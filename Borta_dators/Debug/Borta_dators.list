
Borta_dators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c48c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800c630  0800c630  0001c630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd68  0800cd68  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd68  0800cd68  0001cd68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd70  0800cd70  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd70  0800cd70  0001cd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd74  0800cd74  0001cd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800cd78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ffc  20000218  0800cf8c  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001214  0800cf8c  00021214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c84d  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004562  00000000  00000000  0004ca91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001c103  00000000  00000000  00050ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  0006d0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001790  00000000  00000000  0006e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5a2  00000000  00000000  00070080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029df4  00000000  00000000  0008b622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c389  00000000  00000000  000b5416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015179f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b60  00000000  00000000  001517f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c614 	.word	0x0800c614

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800c614 	.word	0x0800c614

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <BME280_Init>:
struct BME280_temperature_data_struct Temperature_Data;
struct BME280_humidity_data_struct Humidity_Data;


HAL_StatusTypeDef BME280_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	b510      	push	{r4, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	ac08      	add	r4, sp, #32
 8000ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000efc:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
	HAL_StatusTypeDef status;
	uint8_t data;

	// RESET
	data = 0xB6;
 8000f00:	23b6      	movs	r3, #182	; 0xb6
 8000f02:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_reset, 1, &data, 1, Timeout);
 8000f06:	9402      	str	r4, [sp, #8]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f10d 0217 	add.w	r2, sp, #23
 8000f10:	9200      	str	r2, [sp, #0]
 8000f12:	22e0      	movs	r2, #224	; 0xe0
 8000f14:	21ec      	movs	r1, #236	; 0xec
 8000f16:	a808      	add	r0, sp, #32
 8000f18:	f003 ff7c 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b128      	cbz	r0, 8000f2c <BME280_Init+0x3c>

	// Temperature/Pressure measure settings
	data = 0b10001111;
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_meas, 1, &data, 1, Timeout);
	return status;
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	b006      	add	sp, #24
 8000f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f28:	b004      	add	sp, #16
 8000f2a:	4770      	bx	lr
	data = 0b10000000;
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_config, 1, &data, 1, Timeout);
 8000f32:	9402      	str	r4, [sp, #8]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	f10d 0217 	add.w	r2, sp, #23
 8000f3c:	9200      	str	r2, [sp, #0]
 8000f3e:	22f5      	movs	r2, #245	; 0xf5
 8000f40:	21ec      	movs	r1, #236	; 0xec
 8000f42:	a808      	add	r0, sp, #32
 8000f44:	f003 ff66 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d1e8      	bne.n	8000f20 <BME280_Init+0x30>
	data = 0b00000011;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_hum, 1, &data, 1, Timeout);
 8000f54:	9402      	str	r4, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f10d 0217 	add.w	r2, sp, #23
 8000f5e:	9200      	str	r2, [sp, #0]
 8000f60:	22f2      	movs	r2, #242	; 0xf2
 8000f62:	21ec      	movs	r1, #236	; 0xec
 8000f64:	a808      	add	r0, sp, #32
 8000f66:	f003 ff55 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d1d7      	bne.n	8000f20 <BME280_Init+0x30>
	data = 0b10001111;
 8000f70:	238f      	movs	r3, #143	; 0x8f
 8000f72:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_meas, 1, &data, 1, Timeout);
 8000f76:	9402      	str	r4, [sp, #8]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f10d 0217 	add.w	r2, sp, #23
 8000f80:	9200      	str	r2, [sp, #0]
 8000f82:	22f4      	movs	r2, #244	; 0xf4
 8000f84:	21ec      	movs	r1, #236	; 0xec
 8000f86:	a808      	add	r0, sp, #32
 8000f88:	f003 ff44 	bl	8004e14 <HAL_I2C_Mem_Write>
 8000f8c:	4603      	mov	r3, r0
	return status;
 8000f8e:	e7c7      	b.n	8000f20 <BME280_Init+0x30>

08000f90 <BME280_Get_ID>:


HAL_StatusTypeDef BME280_Get_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 8000f90:	b084      	sub	sp, #16
 8000f92:	b500      	push	{lr}
 8000f94:	b085      	sub	sp, #20
 8000f96:	f10d 0c18 	add.w	ip, sp, #24
 8000f9a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	return HAL_I2C_Mem_Read(&handle, BME280_address, BME280_ID, 1, ptr_ID, 1, Timeout);
 8000f9e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	22d0      	movs	r2, #208	; 0xd0
 8000fae:	21ec      	movs	r1, #236	; 0xec
 8000fb0:	4660      	mov	r0, ip
 8000fb2:	f003 ffe1 	bl	8004f78 <HAL_I2C_Mem_Read>
}
 8000fb6:	b005      	add	sp, #20
 8000fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000fbc:	b004      	add	sp, #16
 8000fbe:	4770      	bx	lr

08000fc0 <BME280_Calib_Read>:


HAL_StatusTypeDef BME280_Calib_Read(I2C_HandleTypeDef handle, BME280_Calib_Data_struct *Calib_data, uint16_t Timeout)
{
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	b530      	push	{r4, r5, lr}
 8000fc4:	b091      	sub	sp, #68	; 0x44
 8000fc6:	ac14      	add	r4, sp, #80	; 0x50
 8000fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fcc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8000fce:	f8bd 50a8 	ldrh.w	r5, [sp, #168]	; 0xa8
	HAL_StatusTypeDef status;
	uint8_t calib0[26];
	uint8_t calib1[16];

	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_calib1, 1, calib0, 26, Timeout);
 8000fd2:	9502      	str	r5, [sp, #8]
 8000fd4:	231a      	movs	r3, #26
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	ab09      	add	r3, sp, #36	; 0x24
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2288      	movs	r2, #136	; 0x88
 8000fe0:	21ec      	movs	r1, #236	; 0xec
 8000fe2:	a814      	add	r0, sp, #80	; 0x50
 8000fe4:	f003 ffc8 	bl	8004f78 <HAL_I2C_Mem_Read>
	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_calib2, 1, calib1, 16, Timeout);
 8000fe8:	9502      	str	r5, [sp, #8]
 8000fea:	2310      	movs	r3, #16
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	ab05      	add	r3, sp, #20
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	22e1      	movs	r2, #225	; 0xe1
 8000ff6:	21ec      	movs	r1, #236	; 0xec
 8000ff8:	a814      	add	r0, sp, #80	; 0x50
 8000ffa:	f003 ffbd 	bl	8004f78 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d173      	bne.n	80010ea <BME280_Calib_Read+0x12a>
		return status;

	Calib_data->dig_T1 = calib0[0];
 8001002:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	Calib_data->dig_T1 += calib0[1] << 8;
 8001006:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800100a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800100e:	8023      	strh	r3, [r4, #0]

	Calib_data->dig_T2 = calib0[2];
 8001010:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
	Calib_data->dig_T2 += calib0[3] << 8;
 8001014:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8001018:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800101c:	8063      	strh	r3, [r4, #2]

	Calib_data->dig_T3 = calib0[4];
 800101e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	Calib_data->dig_T3 += calib0[5] << 8;
 8001022:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8001026:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800102a:	80a3      	strh	r3, [r4, #4]

	Calib_data->dig_P1 = calib0[6];
 800102c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
	Calib_data->dig_P1 += calib0[7] << 8;
 8001030:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8001034:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001038:	80e3      	strh	r3, [r4, #6]

	Calib_data->dig_P2 = calib0[8];
 800103a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	Calib_data->dig_P2 += calib0[9] << 8;
 800103e:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8001042:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001046:	8123      	strh	r3, [r4, #8]

	Calib_data->dig_P3 = calib0[10];
 8001048:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
	Calib_data->dig_P3 += calib0[11] << 8;
 800104c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8001050:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001054:	8163      	strh	r3, [r4, #10]

	Calib_data->dig_P4 = calib0[12];
 8001056:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	Calib_data->dig_P4 += calib0[13] << 8;
 800105a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800105e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001062:	81a3      	strh	r3, [r4, #12]

	Calib_data->dig_P5 = calib0[14];
 8001064:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
	Calib_data->dig_P5 += calib0[15] << 8;
 8001068:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800106c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001070:	81e3      	strh	r3, [r4, #14]

	Calib_data->dig_P6 = calib0[16];
 8001072:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
	Calib_data->dig_P6 += calib0[17] << 8;
 8001076:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800107a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800107e:	8223      	strh	r3, [r4, #16]

	Calib_data->dig_P7 = calib0[18];
 8001080:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
	Calib_data->dig_P7 += calib0[19] << 8;
 8001084:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8001088:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800108c:	8263      	strh	r3, [r4, #18]

	Calib_data->dig_P8 = calib0[20];
 800108e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	Calib_data->dig_P8 += calib0[21] << 8;
 8001092:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8001096:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800109a:	82a3      	strh	r3, [r4, #20]

	Calib_data->dig_P9 = calib0[22];
 800109c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
	Calib_data->dig_P9 += calib0[23] << 8;
 80010a0:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80010a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80010a8:	82e3      	strh	r3, [r4, #22]

	Calib_data->dig_H1 = calib0[25];
 80010aa:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 80010ae:	7623      	strb	r3, [r4, #24]

	Calib_data->dig_H2 = calib1[0];
 80010b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
	Calib_data->dig_H2 += calib1[1] << 8;
 80010b4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80010b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80010bc:	8363      	strh	r3, [r4, #26]

	Calib_data->dig_H3 = calib1[2];
 80010be:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80010c2:	7723      	strb	r3, [r4, #28]

	Calib_data->dig_H4 = calib1[3] << 4;
 80010c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
	Calib_data->dig_H4 += calib1[4] & 0b00001111;
 80010c8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80010cc:	f001 020f 	and.w	r2, r1, #15
 80010d0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80010d4:	83e2      	strh	r2, [r4, #30]

	Calib_data->dig_H5 = calib1[4] >> 4;
	Calib_data->dig_H5 += calib1[5] << 4;
 80010d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	eb03 1311 	add.w	r3, r3, r1, lsr #4
 80010e0:	8423      	strh	r3, [r4, #32]

	Calib_data->dig_H6 = calib1[6];
 80010e2:	f99d 301a 	ldrsb.w	r3, [sp, #26]
 80010e6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

	return status;
}
 80010ea:	b011      	add	sp, #68	; 0x44
 80010ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80010f0:	b004      	add	sp, #16
 80010f2:	4770      	bx	lr

080010f4 <BME280_Get_All>:


HAL_StatusTypeDef BME280_Get_All(I2C_HandleTypeDef handle, uint16_t Timeout){
 80010f4:	b084      	sub	sp, #16
 80010f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010fa:	b087      	sub	sp, #28
 80010fc:	ac0e      	add	r4, sp, #56	; 0x38
 80010fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t measure[8];

	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_press, 1, measure, 8, Timeout);
 8001102:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2308      	movs	r3, #8
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	ab04      	add	r3, sp, #16
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	22f7      	movs	r2, #247	; 0xf7
 8001114:	21ec      	movs	r1, #236	; 0xec
 8001116:	4620      	mov	r0, r4
 8001118:	f003 ff2e 	bl	8004f78 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 800111c:	bb68      	cbnz	r0, 800117a <BME280_Get_All+0x86>
		return status;

	Pressure_Data.press_msb = measure[0];
 800111e:	f89d e010 	ldrb.w	lr, [sp, #16]
 8001122:	4c18      	ldr	r4, [pc, #96]	; (8001184 <BME280_Get_All+0x90>)
 8001124:	f884 e000 	strb.w	lr, [r4]
	Pressure_Data.press_lsb = measure[1];
 8001128:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800112c:	7063      	strb	r3, [r4, #1]
	Pressure_Data.press_xlsb = measure[2];
 800112e:	f89d c012 	ldrb.w	ip, [sp, #18]
 8001132:	f884 c002 	strb.w	ip, [r4, #2]

	Temperature_Data.temp_msb = measure[3];
 8001136:	f89d 9013 	ldrb.w	r9, [sp, #19]
 800113a:	4d13      	ldr	r5, [pc, #76]	; (8001188 <BME280_Get_All+0x94>)
 800113c:	f885 9000 	strb.w	r9, [r5]
	Temperature_Data.temp_lsb = measure[4];
 8001140:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001144:	706a      	strb	r2, [r5, #1]
	Temperature_Data.temp_xlsb = measure[5];
 8001146:	f89d 8015 	ldrb.w	r8, [sp, #21]
 800114a:	f885 8002 	strb.w	r8, [r5, #2]

	Humidity_Data.hum_msb = measure[6];
 800114e:	f89d 7016 	ldrb.w	r7, [sp, #22]
 8001152:	4e0e      	ldr	r6, [pc, #56]	; (800118c <BME280_Get_All+0x98>)
 8001154:	7037      	strb	r7, [r6, #0]
	Humidity_Data.hum_lsb = measure[7];
 8001156:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800115a:	7071      	strb	r1, [r6, #1]

	Temperature_Data.ADC_T = ((uint32_t)Temperature_Data.temp_msb << 12) | ((uint32_t)Temperature_Data.temp_lsb << 4) | ((uint32_t)Temperature_Data.temp_xlsb >> 4);
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
 8001162:	ea42 1218 	orr.w	r2, r2, r8, lsr #4
 8001166:	606a      	str	r2, [r5, #4]
	Pressure_Data.ADC_P = ((uint32_t)Pressure_Data.press_msb << 12) | ((uint32_t)Pressure_Data.press_lsb << 4) | ((uint32_t)Pressure_Data.press_xlsb >> 4);
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	ea43 330e 	orr.w	r3, r3, lr, lsl #12
 800116e:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8001172:	6063      	str	r3, [r4, #4]
	Humidity_Data.ADC_H = ((uint32_t)Humidity_Data.hum_msb << 8) | ((uint32_t)Humidity_Data.hum_lsb);
 8001174:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001178:	6071      	str	r1, [r6, #4]
	return status;
}
 800117a:	b007      	add	sp, #28
 800117c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr
 8001184:	200002d0 	.word	0x200002d0
 8001188:	200002c8 	.word	0x200002c8
 800118c:	20000278 	.word	0x20000278

08001190 <BME280_T_Double>:
	return status;
}


double BME280_T_Double (BME280_Calib_Data_struct *Calib_data)
{
 8001190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001194:	4604      	mov	r4, r0
//	BME280_Temperature(handle);
	double var1, var2, t;

	var1 = (((double) Temperature_Data.ADC_T)/16384.0 - ((double) Calib_data->dig_T1)/1024.0) * ((double) Calib_data->dig_T2);
 8001196:	4b31      	ldr	r3, [pc, #196]	; (800125c <BME280_T_Double+0xcc>)
 8001198:	6858      	ldr	r0, [r3, #4]
 800119a:	f7ff f9bb 	bl	8000514 <__aeabi_ui2d>
 800119e:	4606      	mov	r6, r0
 80011a0:	460f      	mov	r7, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <BME280_T_Double+0xd0>)
 80011a6:	f7ff fa2f 	bl	8000608 <__aeabi_dmul>
 80011aa:	4680      	mov	r8, r0
 80011ac:	4689      	mov	r9, r1
 80011ae:	8820      	ldrh	r0, [r4, #0]
 80011b0:	f7ff f9b0 	bl	8000514 <__aeabi_ui2d>
 80011b4:	4682      	mov	sl, r0
 80011b6:	468b      	mov	fp, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <BME280_T_Double+0xd4>)
 80011bc:	f7ff fa24 	bl	8000608 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4640      	mov	r0, r8
 80011c6:	4649      	mov	r1, r9
 80011c8:	f7ff f866 	bl	8000298 <__aeabi_dsub>
 80011cc:	4680      	mov	r8, r0
 80011ce:	4689      	mov	r9, r1
 80011d0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80011d4:	f7ff f9ae 	bl	8000534 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4640      	mov	r0, r8
 80011de:	4649      	mov	r1, r9
 80011e0:	f7ff fa12 	bl	8000608 <__aeabi_dmul>
 80011e4:	4680      	mov	r8, r0
 80011e6:	4689      	mov	r9, r1
	var2 = ((((double) Temperature_Data.ADC_T)/131072.0 - ((double) Calib_data->dig_T1)/8192.0) * (((double) Temperature_Data.ADC_T)/131072.0 - ((double) Calib_data->dig_T1)/8192.0)) * ((double) Calib_data->dig_T3);
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <BME280_T_Double+0xd8>)
 80011ec:	4630      	mov	r0, r6
 80011ee:	4639      	mov	r1, r7
 80011f0:	f7ff fa0a 	bl	8000608 <__aeabi_dmul>
 80011f4:	4606      	mov	r6, r0
 80011f6:	460f      	mov	r7, r1
 80011f8:	2200      	movs	r2, #0
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <BME280_T_Double+0xdc>)
 80011fc:	4650      	mov	r0, sl
 80011fe:	4659      	mov	r1, fp
 8001200:	f7ff fa02 	bl	8000608 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4630      	mov	r0, r6
 800120a:	4639      	mov	r1, r7
 800120c:	f7ff f844 	bl	8000298 <__aeabi_dsub>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	f7ff f9f8 	bl	8000608 <__aeabi_dmul>
 8001218:	4606      	mov	r6, r0
 800121a:	460f      	mov	r7, r1
 800121c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8001220:	f7ff f988 	bl	8000534 <__aeabi_i2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4630      	mov	r0, r6
 800122a:	4639      	mov	r1, r7
 800122c:	f7ff f9ec 	bl	8000608 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1

	t_fine =  (var1 + var2);
 8001234:	4640      	mov	r0, r8
 8001236:	4649      	mov	r1, r9
 8001238:	f7ff f830 	bl	800029c <__adddf3>
 800123c:	4604      	mov	r4, r0
 800123e:	460d      	mov	r5, r1
 8001240:	f7ff fc92 	bl	8000b68 <__aeabi_d2iz>
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <BME280_T_Double+0xe0>)
 8001246:	6018      	str	r0, [r3, #0]
	t = (var1 + var2)/5120.0;
 8001248:	2200      	movs	r2, #0
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <BME280_T_Double+0xe4>)
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff fb04 	bl	800085c <__aeabi_ddiv>

	return t;
}
 8001254:	ec41 0b10 	vmov	d0, r0, r1
 8001258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800125c:	200002c8 	.word	0x200002c8
 8001260:	3f100000 	.word	0x3f100000
 8001264:	3f500000 	.word	0x3f500000
 8001268:	3ee00000 	.word	0x3ee00000
 800126c:	3f200000 	.word	0x3f200000
 8001270:	200002d8 	.word	0x200002d8
 8001274:	40b40000 	.word	0x40b40000

08001278 <BME280_P_Double>:

double BME280_P_Double(BME280_Calib_Data_struct *Calib_data)
{
 8001278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800127c:	4682      	mov	sl, r0
//	BME280_Pressure(handle);
	double var1, var2, p;

	var1 = ((double)t_fine/2.0) - 64000.0;
 800127e:	4b82      	ldr	r3, [pc, #520]	; (8001488 <BME280_P_Double+0x210>)
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	f7ff f957 	bl	8000534 <__aeabi_i2d>
 8001286:	2200      	movs	r2, #0
 8001288:	4b80      	ldr	r3, [pc, #512]	; (800148c <BME280_P_Double+0x214>)
 800128a:	f7ff f9bd 	bl	8000608 <__aeabi_dmul>
 800128e:	2200      	movs	r2, #0
 8001290:	4b7f      	ldr	r3, [pc, #508]	; (8001490 <BME280_P_Double+0x218>)
 8001292:	f7ff f801 	bl	8000298 <__aeabi_dsub>
 8001296:	4604      	mov	r4, r0
 8001298:	460d      	mov	r5, r1
	var2 = var1 * var1 * ((double) Calib_data->dig_P6) / 32768.0;
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	f7ff f9b3 	bl	8000608 <__aeabi_dmul>
 80012a2:	4606      	mov	r6, r0
 80012a4:	460f      	mov	r7, r1
 80012a6:	f9ba 0010 	ldrsh.w	r0, [sl, #16]
 80012aa:	f7ff f943 	bl	8000534 <__aeabi_i2d>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4630      	mov	r0, r6
 80012b4:	4639      	mov	r1, r7
 80012b6:	f7ff f9a7 	bl	8000608 <__aeabi_dmul>
 80012ba:	2200      	movs	r2, #0
 80012bc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80012c0:	f7ff f9a2 	bl	8000608 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
	var2 = var2 + var1 + ((double) Calib_data->dig_P5) * 2.0;
 80012c8:	4620      	mov	r0, r4
 80012ca:	4629      	mov	r1, r5
 80012cc:	f7fe ffe6 	bl	800029c <__adddf3>
 80012d0:	4606      	mov	r6, r0
 80012d2:	460f      	mov	r7, r1
 80012d4:	f9ba 000e 	ldrsh.w	r0, [sl, #14]
 80012d8:	f7ff f92c 	bl	8000534 <__aeabi_i2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	f7fe ffdc 	bl	800029c <__adddf3>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4630      	mov	r0, r6
 80012ea:	4639      	mov	r1, r7
 80012ec:	f7fe ffd6 	bl	800029c <__adddf3>
	var2 = (var2/4.0) + (((double) Calib_data->dig_P4) * 65536.0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	4b68      	ldr	r3, [pc, #416]	; (8001494 <BME280_P_Double+0x21c>)
 80012f4:	f7ff f988 	bl	8000608 <__aeabi_dmul>
 80012f8:	4606      	mov	r6, r0
 80012fa:	460f      	mov	r7, r1
 80012fc:	f9ba 000c 	ldrsh.w	r0, [sl, #12]
 8001300:	f7ff f918 	bl	8000534 <__aeabi_i2d>
 8001304:	2200      	movs	r2, #0
 8001306:	4b64      	ldr	r3, [pc, #400]	; (8001498 <BME280_P_Double+0x220>)
 8001308:	f7ff f97e 	bl	8000608 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4630      	mov	r0, r6
 8001312:	4639      	mov	r1, r7
 8001314:	f7fe ffc2 	bl	800029c <__adddf3>
 8001318:	4680      	mov	r8, r0
 800131a:	4689      	mov	r9, r1
	var1 = (((double) Calib_data->dig_P3) * var1 * var1 / 524288.0 + ((double) Calib_data->dig_P2) * var1) / 524288.0;
 800131c:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
 8001320:	f7ff f908 	bl	8000534 <__aeabi_i2d>
 8001324:	4622      	mov	r2, r4
 8001326:	462b      	mov	r3, r5
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4622      	mov	r2, r4
 800132e:	462b      	mov	r3, r5
 8001330:	f7ff f96a 	bl	8000608 <__aeabi_dmul>
 8001334:	2200      	movs	r2, #0
 8001336:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 800133a:	f7ff f965 	bl	8000608 <__aeabi_dmul>
 800133e:	4606      	mov	r6, r0
 8001340:	460f      	mov	r7, r1
 8001342:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
 8001346:	f7ff f8f5 	bl	8000534 <__aeabi_i2d>
 800134a:	4622      	mov	r2, r4
 800134c:	462b      	mov	r3, r5
 800134e:	f7ff f95b 	bl	8000608 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4630      	mov	r0, r6
 8001358:	4639      	mov	r1, r7
 800135a:	f7fe ff9f 	bl	800029c <__adddf3>
 800135e:	2200      	movs	r2, #0
 8001360:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8001364:	f7ff f950 	bl	8000608 <__aeabi_dmul>
	var1 = (1.0 + var1 / 32768.0)*((double) Calib_data->dig_P1);
 8001368:	2200      	movs	r2, #0
 800136a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800136e:	f7ff f94b 	bl	8000608 <__aeabi_dmul>
 8001372:	2200      	movs	r2, #0
 8001374:	4b49      	ldr	r3, [pc, #292]	; (800149c <BME280_P_Double+0x224>)
 8001376:	f7fe ff91 	bl	800029c <__adddf3>
 800137a:	4604      	mov	r4, r0
 800137c:	460d      	mov	r5, r1
 800137e:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8001382:	f7ff f8c7 	bl	8000514 <__aeabi_ui2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4620      	mov	r0, r4
 800138c:	4629      	mov	r1, r5
 800138e:	f7ff f93b 	bl	8000608 <__aeabi_dmul>
 8001392:	4604      	mov	r4, r0
 8001394:	460d      	mov	r5, r1

	if (var1 == 0.0)
 8001396:	2200      	movs	r2, #0
 8001398:	2300      	movs	r3, #0
 800139a:	f7ff fb9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800139e:	2800      	cmp	r0, #0
 80013a0:	d164      	bne.n	800146c <BME280_P_Double+0x1f4>
	{
		return 0; // avoid exception caused by division by zero
	}

	p = 1048576.0 - (double) Pressure_Data.ADC_P;
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <BME280_P_Double+0x228>)
 80013a4:	6858      	ldr	r0, [r3, #4]
 80013a6:	f7ff f8b5 	bl	8000514 <__aeabi_ui2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	2000      	movs	r0, #0
 80013b0:	493c      	ldr	r1, [pc, #240]	; (80014a4 <BME280_P_Double+0x22c>)
 80013b2:	f7fe ff71 	bl	8000298 <__aeabi_dsub>
 80013b6:	4606      	mov	r6, r0
 80013b8:	460f      	mov	r7, r1
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 80013ba:	2200      	movs	r2, #0
 80013bc:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <BME280_P_Double+0x230>)
 80013be:	4640      	mov	r0, r8
 80013c0:	4649      	mov	r1, r9
 80013c2:	f7ff f921 	bl	8000608 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4630      	mov	r0, r6
 80013cc:	4639      	mov	r1, r7
 80013ce:	f7fe ff63 	bl	8000298 <__aeabi_dsub>
 80013d2:	a329      	add	r3, pc, #164	; (adr r3, 8001478 <BME280_P_Double+0x200>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff f916 	bl	8000608 <__aeabi_dmul>
 80013dc:	4622      	mov	r2, r4
 80013de:	462b      	mov	r3, r5
 80013e0:	f7ff fa3c 	bl	800085c <__aeabi_ddiv>
 80013e4:	4604      	mov	r4, r0
 80013e6:	460d      	mov	r5, r1

	var1 = ((double) Calib_data->dig_P9) * p* p / 2147483648.0;
 80013e8:	f9ba 0016 	ldrsh.w	r0, [sl, #22]
 80013ec:	f7ff f8a2 	bl	8000534 <__aeabi_i2d>
 80013f0:	4622      	mov	r2, r4
 80013f2:	462b      	mov	r3, r5
 80013f4:	f7ff f908 	bl	8000608 <__aeabi_dmul>
 80013f8:	4622      	mov	r2, r4
 80013fa:	462b      	mov	r3, r5
 80013fc:	f7ff f904 	bl	8000608 <__aeabi_dmul>
 8001400:	2200      	movs	r2, #0
 8001402:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8001406:	f7ff f8ff 	bl	8000608 <__aeabi_dmul>
 800140a:	4606      	mov	r6, r0
 800140c:	460f      	mov	r7, r1
	var2 = p * ((double) Calib_data->dig_P8) / 32768.0;
 800140e:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
 8001412:	f7ff f88f 	bl	8000534 <__aeabi_i2d>
 8001416:	4622      	mov	r2, r4
 8001418:	462b      	mov	r3, r5
 800141a:	f7ff f8f5 	bl	8000608 <__aeabi_dmul>
 800141e:	2200      	movs	r2, #0
 8001420:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001424:	f7ff f8f0 	bl	8000608 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1

	p = p + (var1 + var2 + ((double) Calib_data->dig_P7)) / 16.0;
 800142c:	4630      	mov	r0, r6
 800142e:	4639      	mov	r1, r7
 8001430:	f7fe ff34 	bl	800029c <__adddf3>
 8001434:	4606      	mov	r6, r0
 8001436:	460f      	mov	r7, r1
 8001438:	f9ba 0012 	ldrsh.w	r0, [sl, #18]
 800143c:	f7ff f87a 	bl	8000534 <__aeabi_i2d>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4630      	mov	r0, r6
 8001446:	4639      	mov	r1, r7
 8001448:	f7fe ff28 	bl	800029c <__adddf3>
 800144c:	2200      	movs	r2, #0
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <BME280_P_Double+0x234>)
 8001450:	f7ff f8da 	bl	8000608 <__aeabi_dmul>
 8001454:	4622      	mov	r2, r4
 8001456:	462b      	mov	r3, r5
 8001458:	f7fe ff20 	bl	800029c <__adddf3>
	p = (p/1000);
 800145c:	2200      	movs	r2, #0
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <BME280_P_Double+0x238>)
 8001460:	f7ff f9fc 	bl	800085c <__aeabi_ddiv>
 8001464:	ec41 0b10 	vmov	d0, r0, r1

	return p;
}
 8001468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0; // avoid exception caused by division by zero
 800146c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001480 <BME280_P_Double+0x208>
 8001470:	e7fa      	b.n	8001468 <BME280_P_Double+0x1f0>
 8001472:	bf00      	nop
 8001474:	f3af 8000 	nop.w
 8001478:	00000000 	.word	0x00000000
 800147c:	40b86a00 	.word	0x40b86a00
	...
 8001488:	200002d8 	.word	0x200002d8
 800148c:	3fe00000 	.word	0x3fe00000
 8001490:	40ef4000 	.word	0x40ef4000
 8001494:	3fd00000 	.word	0x3fd00000
 8001498:	40f00000 	.word	0x40f00000
 800149c:	3ff00000 	.word	0x3ff00000
 80014a0:	200002d0 	.word	0x200002d0
 80014a4:	41300000 	.word	0x41300000
 80014a8:	3f300000 	.word	0x3f300000
 80014ac:	3fb00000 	.word	0x3fb00000
 80014b0:	408f4000 	.word	0x408f4000
 80014b4:	00000000 	.word	0x00000000

080014b8 <BME280_H_Double>:

double BME280_H_Double(BME280_Calib_Data_struct *Calib_data)
{
 80014b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014bc:	ed2d 8b02 	vpush	{d8}
 80014c0:	b082      	sub	sp, #8
 80014c2:	4682      	mov	sl, r0
//	BME280_Humidity(handle);
	long double var_H;

	var_H = (((double) t_fine) - 76800.0);
 80014c4:	4b58      	ldr	r3, [pc, #352]	; (8001628 <BME280_H_Double+0x170>)
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	f7ff f834 	bl	8000534 <__aeabi_i2d>
 80014cc:	2200      	movs	r2, #0
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <BME280_H_Double+0x174>)
 80014d0:	f7fe fee2 	bl	8000298 <__aeabi_dsub>
 80014d4:	4604      	mov	r4, r0
 80014d6:	460d      	mov	r5, r1
	var_H = (((double) Humidity_Data.ADC_H) - (((double)Calib_data->dig_H4)*64.0 + ((double)Calib_data->dig_H5)/16384.0*var_H)) *
 80014d8:	4b55      	ldr	r3, [pc, #340]	; (8001630 <BME280_H_Double+0x178>)
 80014da:	6858      	ldr	r0, [r3, #4]
 80014dc:	f7ff f81a 	bl	8000514 <__aeabi_ui2d>
 80014e0:	4606      	mov	r6, r0
 80014e2:	460f      	mov	r7, r1
 80014e4:	f9ba 001e 	ldrsh.w	r0, [sl, #30]
 80014e8:	f7ff f824 	bl	8000534 <__aeabi_i2d>
 80014ec:	2200      	movs	r2, #0
 80014ee:	4b51      	ldr	r3, [pc, #324]	; (8001634 <BME280_H_Double+0x17c>)
 80014f0:	f7ff f88a 	bl	8000608 <__aeabi_dmul>
 80014f4:	4680      	mov	r8, r0
 80014f6:	4689      	mov	r9, r1
 80014f8:	f9ba 0020 	ldrsh.w	r0, [sl, #32]
 80014fc:	f7ff f81a 	bl	8000534 <__aeabi_i2d>
 8001500:	2200      	movs	r2, #0
 8001502:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <BME280_H_Double+0x180>)
 8001504:	f7ff f880 	bl	8000608 <__aeabi_dmul>
 8001508:	4622      	mov	r2, r4
 800150a:	462b      	mov	r3, r5
 800150c:	f7ff f87c 	bl	8000608 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4640      	mov	r0, r8
 8001516:	4649      	mov	r1, r9
 8001518:	f7fe fec0 	bl	800029c <__adddf3>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4630      	mov	r0, r6
 8001522:	4639      	mov	r1, r7
 8001524:	f7fe feb8 	bl	8000298 <__aeabi_dsub>
 8001528:	e9cd 0100 	strd	r0, r1, [sp]
			(((double) Calib_data->dig_H2)/65536.0 * (1.0 + ((double) Calib_data->dig_H6) / 67108864.0*var_H * (1.0 + ((double) Calib_data->dig_H3)/67108864.0*var_H)));
 800152c:	f9ba 001a 	ldrsh.w	r0, [sl, #26]
 8001530:	f7ff f800 	bl	8000534 <__aeabi_i2d>
 8001534:	2200      	movs	r2, #0
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <BME280_H_Double+0x184>)
 8001538:	f7ff f866 	bl	8000608 <__aeabi_dmul>
 800153c:	4680      	mov	r8, r0
 800153e:	4689      	mov	r9, r1
 8001540:	f99a 0022 	ldrsb.w	r0, [sl, #34]	; 0x22
 8001544:	f7fe fff6 	bl	8000534 <__aeabi_i2d>
 8001548:	2200      	movs	r2, #0
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <BME280_H_Double+0x188>)
 800154c:	f7ff f85c 	bl	8000608 <__aeabi_dmul>
 8001550:	4622      	mov	r2, r4
 8001552:	462b      	mov	r3, r5
 8001554:	f7ff f858 	bl	8000608 <__aeabi_dmul>
 8001558:	4606      	mov	r6, r0
 800155a:	460f      	mov	r7, r1
 800155c:	f89a 001c 	ldrb.w	r0, [sl, #28]
 8001560:	f7fe ffd8 	bl	8000514 <__aeabi_ui2d>
 8001564:	2200      	movs	r2, #0
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <BME280_H_Double+0x188>)
 8001568:	f7ff f84e 	bl	8000608 <__aeabi_dmul>
 800156c:	4622      	mov	r2, r4
 800156e:	462b      	mov	r3, r5
 8001570:	f7ff f84a 	bl	8000608 <__aeabi_dmul>
 8001574:	2200      	movs	r2, #0
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <BME280_H_Double+0x18c>)
 8001578:	f7fe fe90 	bl	800029c <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4630      	mov	r0, r6
 8001582:	4639      	mov	r1, r7
 8001584:	f7ff f840 	bl	8000608 <__aeabi_dmul>
 8001588:	2200      	movs	r2, #0
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <BME280_H_Double+0x18c>)
 800158c:	f7fe fe86 	bl	800029c <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4640      	mov	r0, r8
 8001596:	4649      	mov	r1, r9
 8001598:	f7ff f836 	bl	8000608 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
	var_H = (((double) Humidity_Data.ADC_H) - (((double)Calib_data->dig_H4)*64.0 + ((double)Calib_data->dig_H5)/16384.0*var_H)) *
 80015a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80015a4:	f7ff f830 	bl	8000608 <__aeabi_dmul>
 80015a8:	4604      	mov	r4, r0
 80015aa:	460d      	mov	r5, r1
	var_H *= (1.0 - ((double)Calib_data->dig_H1)*var_H/524288.0);
 80015ac:	f89a 0018 	ldrb.w	r0, [sl, #24]
 80015b0:	f7fe ffb0 	bl	8000514 <__aeabi_ui2d>
 80015b4:	4622      	mov	r2, r4
 80015b6:	462b      	mov	r3, r5
 80015b8:	f7ff f826 	bl	8000608 <__aeabi_dmul>
 80015bc:	2200      	movs	r2, #0
 80015be:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80015c2:	f7ff f821 	bl	8000608 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	2000      	movs	r0, #0
 80015cc:	491d      	ldr	r1, [pc, #116]	; (8001644 <BME280_H_Double+0x18c>)
 80015ce:	f7fe fe63 	bl	8000298 <__aeabi_dsub>
 80015d2:	4622      	mov	r2, r4
 80015d4:	462b      	mov	r3, r5
 80015d6:	f7ff f817 	bl	8000608 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	ec43 2b18 	vmov	d8, r2, r3

	if (var_H > 100.0){
 80015e2:	2200      	movs	r2, #0
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <BME280_H_Double+0x190>)
 80015e6:	f7ff fa9f 	bl	8000b28 <__aeabi_dcmpgt>
 80015ea:	b948      	cbnz	r0, 8001600 <BME280_H_Double+0x148>
		var_H = 100.0;
	}
	else if (var_H < 0.0){
 80015ec:	2200      	movs	r2, #0
 80015ee:	2300      	movs	r3, #0
 80015f0:	ec51 0b18 	vmov	r0, r1, d8
 80015f4:	f7ff fa7a 	bl	8000aec <__aeabi_dcmplt>
 80015f8:	b120      	cbz	r0, 8001604 <BME280_H_Double+0x14c>
		var_H = 0.0;
 80015fa:	ed9f 8b07 	vldr	d8, [pc, #28]	; 8001618 <BME280_H_Double+0x160>
	}

	return var_H;
 80015fe:	e001      	b.n	8001604 <BME280_H_Double+0x14c>
		var_H = 100.0;
 8001600:	ed9f 8b07 	vldr	d8, [pc, #28]	; 8001620 <BME280_H_Double+0x168>
}
 8001604:	eeb0 0a48 	vmov.f32	s0, s16
 8001608:	eef0 0a68 	vmov.f32	s1, s17
 800160c:	b002      	add	sp, #8
 800160e:	ecbd 8b02 	vpop	{d8}
 8001612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001616:	bf00      	nop
	...
 8001624:	40590000 	.word	0x40590000
 8001628:	200002d8 	.word	0x200002d8
 800162c:	40f2c000 	.word	0x40f2c000
 8001630:	20000278 	.word	0x20000278
 8001634:	40500000 	.word	0x40500000
 8001638:	3f100000 	.word	0x3f100000
 800163c:	3ef00000 	.word	0x3ef00000
 8001640:	3e500000 	.word	0x3e500000
 8001644:	3ff00000 	.word	0x3ff00000
 8001648:	40590000 	.word	0x40590000
 800164c:	00000000 	.word	0x00000000

08001650 <BME280_Altitude_Double>:


double BME280_Altitude_Double(double Pressure, double Pressure_ref)
{
 8001650:	b508      	push	{r3, lr}
 8001652:	ec51 0b10 	vmov	r0, r1, d0
 8001656:	ec53 2b11 	vmov	r2, r3, d1
	long double var1;
	var1 = pow(Pressure/Pressure_ref, 1/5.255);
 800165a:	f7ff f8ff 	bl	800085c <__aeabi_ddiv>
 800165e:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8001688 <BME280_Altitude_Double+0x38>
 8001662:	ec41 0b10 	vmov	d0, r0, r1
 8001666:	f00a f81f 	bl	800b6a8 <pow>
 800166a:	ec53 2b10 	vmov	r2, r3, d0
	return 44330*(1-var1);
 800166e:	2000      	movs	r0, #0
 8001670:	4909      	ldr	r1, [pc, #36]	; (8001698 <BME280_Altitude_Double+0x48>)
 8001672:	f7fe fe11 	bl	8000298 <__aeabi_dsub>
 8001676:	a306      	add	r3, pc, #24	; (adr r3, 8001690 <BME280_Altitude_Double+0x40>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe ffc4 	bl	8000608 <__aeabi_dmul>
}
 8001680:	ec41 0b10 	vmov	d0, r0, r1
 8001684:	bd08      	pop	{r3, pc}
 8001686:	bf00      	nop
 8001688:	ccd9456c 	.word	0xccd9456c
 800168c:	3fc85b95 	.word	0x3fc85b95
 8001690:	00000000 	.word	0x00000000
 8001694:	40e5a540 	.word	0x40e5a540
 8001698:	3ff00000 	.word	0x3ff00000

0800169c <MPU6050_Init>:
int16_t Temperature_raw;



HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 800169c:	b084      	sub	sp, #16
 800169e:	b510      	push	{r4, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	ac08      	add	r4, sp, #32
 80016a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016a8:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
	HAL_StatusTypeDef status;
	uint8_t data;

	// Config register complete reset (everything to 0, except sleep enable and ID)
	data = 0x80;
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_PWR_MGMT_1, 1, &data, 1, Timeout);
 80016b2:	9402      	str	r4, [sp, #8]
 80016b4:	2301      	movs	r3, #1
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	f10d 0217 	add.w	r2, sp, #23
 80016bc:	9200      	str	r2, [sp, #0]
 80016be:	226b      	movs	r2, #107	; 0x6b
 80016c0:	21d0      	movs	r1, #208	; 0xd0
 80016c2:	a808      	add	r0, sp, #32
 80016c4:	f003 fba6 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80016c8:	b120      	cbz	r0, 80016d4 <MPU6050_Init+0x38>

	// Set sample rate to 8kHz/(1+19)=400Hz
	data = 0x13;
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_SMPLRT_DIV, 1, &data, 1, Timeout);
	return status;
}
 80016ca:	b006      	add	sp, #24
 80016cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016d0:	b004      	add	sp, #16
 80016d2:	4770      	bx	lr
	HAL_Delay(100);
 80016d4:	2064      	movs	r0, #100	; 0x64
 80016d6:	f002 fe9f 	bl	8004418 <HAL_Delay>
	data = 0x01;
 80016da:	2301      	movs	r3, #1
 80016dc:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_USER_CTRL, 1, &data, 1, Timeout);
 80016e0:	9402      	str	r4, [sp, #8]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	f10d 0217 	add.w	r2, sp, #23
 80016e8:	9200      	str	r2, [sp, #0]
 80016ea:	226a      	movs	r2, #106	; 0x6a
 80016ec:	21d0      	movs	r1, #208	; 0xd0
 80016ee:	a808      	add	r0, sp, #32
 80016f0:	f003 fb90 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d1e8      	bne.n	80016ca <MPU6050_Init+0x2e>
	HAL_Delay(100);
 80016f8:	2064      	movs	r0, #100	; 0x64
 80016fa:	f002 fe8d 	bl	8004418 <HAL_Delay>
	data = 0x01;
 80016fe:	2301      	movs	r3, #1
 8001700:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_PWR_MGMT_1, 1, &data, 1, Timeout);
 8001704:	9402      	str	r4, [sp, #8]
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	f10d 0217 	add.w	r2, sp, #23
 800170c:	9200      	str	r2, [sp, #0]
 800170e:	226b      	movs	r2, #107	; 0x6b
 8001710:	21d0      	movs	r1, #208	; 0xd0
 8001712:	a808      	add	r0, sp, #32
 8001714:	f003 fb7e 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001718:	2800      	cmp	r0, #0
 800171a:	d1d6      	bne.n	80016ca <MPU6050_Init+0x2e>
	data = 0x08;
 800171c:	2308      	movs	r3, #8
 800171e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_ACCEL_CONFIG, 1, &data, 1, Timeout);
 8001722:	9402      	str	r4, [sp, #8]
 8001724:	2301      	movs	r3, #1
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	f10d 0217 	add.w	r2, sp, #23
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	221c      	movs	r2, #28
 8001730:	21d0      	movs	r1, #208	; 0xd0
 8001732:	a808      	add	r0, sp, #32
 8001734:	f003 fb6e 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001738:	2800      	cmp	r0, #0
 800173a:	d1c6      	bne.n	80016ca <MPU6050_Init+0x2e>
	data = 0x08;
 800173c:	2308      	movs	r3, #8
 800173e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_GYRO_CONFIG, 1, &data, 1, Timeout);
 8001742:	9402      	str	r4, [sp, #8]
 8001744:	2301      	movs	r3, #1
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f10d 0217 	add.w	r2, sp, #23
 800174c:	9200      	str	r2, [sp, #0]
 800174e:	221b      	movs	r2, #27
 8001750:	21d0      	movs	r1, #208	; 0xd0
 8001752:	a808      	add	r0, sp, #32
 8001754:	f003 fb5e 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001758:	2800      	cmp	r0, #0
 800175a:	d1b6      	bne.n	80016ca <MPU6050_Init+0x2e>
	data = 0x13;
 800175c:	2313      	movs	r3, #19
 800175e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_SMPLRT_DIV, 1, &data, 1, Timeout);
 8001762:	9402      	str	r4, [sp, #8]
 8001764:	2301      	movs	r3, #1
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	f10d 0217 	add.w	r2, sp, #23
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	2219      	movs	r2, #25
 8001770:	21d0      	movs	r1, #208	; 0xd0
 8001772:	a808      	add	r0, sp, #32
 8001774:	f003 fb4e 	bl	8004e14 <HAL_I2C_Mem_Write>
	return status;
 8001778:	e7a7      	b.n	80016ca <MPU6050_Init+0x2e>

0800177a <MPU6050_read_ID>:



HAL_StatusTypeDef MPU6050_read_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 800177a:	b084      	sub	sp, #16
 800177c:	b500      	push	{lr}
 800177e:	b085      	sub	sp, #20
 8001780:	f10d 0c18 	add.w	ip, sp, #24
 8001784:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	return HAL_I2C_Mem_Read(&handle, MPU6050_Address, MPU6050_WHO_AM_I, 1, ptr_ID, 1, Timeout);
 8001788:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001794:	9200      	str	r2, [sp, #0]
 8001796:	2275      	movs	r2, #117	; 0x75
 8001798:	21d0      	movs	r1, #208	; 0xd0
 800179a:	4660      	mov	r0, ip
 800179c:	f003 fbec 	bl	8004f78 <HAL_I2C_Mem_Read>
}
 80017a0:	b005      	add	sp, #20
 80017a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80017a6:	b004      	add	sp, #16
 80017a8:	4770      	bx	lr
	...

080017ac <MPU6050_read_All>:



HAL_StatusTypeDef MPU6050_read_All(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 80017ac:	b084      	sub	sp, #16
 80017ae:	b500      	push	{lr}
 80017b0:	b089      	sub	sp, #36	; 0x24
 80017b2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80017b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t data[14];

	status = HAL_I2C_Mem_Read(&handle, MPU6050_Address, MPU6050_ACCEL_XOUT_H, 1, data, 14, Timeout);
 80017ba:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	230e      	movs	r3, #14
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	ab04      	add	r3, sp, #16
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	223b      	movs	r2, #59	; 0x3b
 80017cc:	21d0      	movs	r1, #208	; 0xd0
 80017ce:	4660      	mov	r0, ip
 80017d0:	f003 fbd2 	bl	8004f78 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 80017d4:	bb98      	cbnz	r0, 800183e <MPU6050_read_All+0x92>
		return status;

	MPU6050_Accel_raw.xdata = data[0] << 8 | data[1];
 80017d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80017da:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80017de:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <MPU6050_read_All+0x9c>)
 80017e4:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_raw.ydata = data[2] << 8 | data[3];
 80017e6:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80017ea:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80017ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017f2:	805a      	strh	r2, [r3, #2]
	MPU6050_Accel_raw.zdata = data[4] << 8 | data[5];
 80017f4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80017f8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80017fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001800:	809a      	strh	r2, [r3, #4]

	Temperature_raw = data[6] << 8 | data[7];
 8001802:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001806:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800180a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <MPU6050_read_All+0xa0>)
 8001810:	8013      	strh	r3, [r2, #0]

	MPU6050_Gyro_raw.xdata = data[8] << 8 | data[9];
 8001812:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001816:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800181a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MPU6050_read_All+0xa4>)
 8001820:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_raw.ydata = data[10] << 8 | data[11];
 8001822:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8001826:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800182a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800182e:	805a      	strh	r2, [r3, #2]
	MPU6050_Gyro_raw.zdata = data[12] << 8 | data[13];
 8001830:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8001834:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8001838:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800183c:	809a      	strh	r2, [r3, #4]

	return status;
}
 800183e:	b009      	add	sp, #36	; 0x24
 8001840:	f85d eb04 	ldr.w	lr, [sp], #4
 8001844:	b004      	add	sp, #16
 8001846:	4770      	bx	lr
 8001848:	200002dc 	.word	0x200002dc
 800184c:	200002e2 	.word	0x200002e2
 8001850:	200002e4 	.word	0x200002e4

08001854 <MPU6050_Accel_double>:
}



void MPU6050_Accel_double(MPU6050_struct *pMPU6050)
{
 8001854:	b538      	push	{r3, r4, r5, lr}
 8001856:	4604      	mov	r4, r0
	pMPU6050->Accel_X = (double)MPU6050_Accel_raw.xdata / 8192.0;
 8001858:	4d0f      	ldr	r5, [pc, #60]	; (8001898 <MPU6050_Accel_double+0x44>)
 800185a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800185e:	f7fe fe69 	bl	8000534 <__aeabi_i2d>
 8001862:	2200      	movs	r2, #0
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <MPU6050_Accel_double+0x48>)
 8001866:	f7fe fecf 	bl	8000608 <__aeabi_dmul>
 800186a:	e9c4 0102 	strd	r0, r1, [r4, #8]
	pMPU6050->Accel_Y = (double)MPU6050_Accel_raw.ydata / 8192.0;
 800186e:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8001872:	f7fe fe5f 	bl	8000534 <__aeabi_i2d>
 8001876:	2200      	movs	r2, #0
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <MPU6050_Accel_double+0x48>)
 800187a:	f7fe fec5 	bl	8000608 <__aeabi_dmul>
 800187e:	e9c4 0104 	strd	r0, r1, [r4, #16]
	pMPU6050->Accel_Z = (double)MPU6050_Accel_raw.zdata / 8192.0;
 8001882:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8001886:	f7fe fe55 	bl	8000534 <__aeabi_i2d>
 800188a:	2200      	movs	r2, #0
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <MPU6050_Accel_double+0x48>)
 800188e:	f7fe febb 	bl	8000608 <__aeabi_dmul>
 8001892:	e9c4 0106 	strd	r0, r1, [r4, #24]
}
 8001896:	bd38      	pop	{r3, r4, r5, pc}
 8001898:	200002dc 	.word	0x200002dc
 800189c:	3f200000 	.word	0x3f200000

080018a0 <MPU6050_Temp_double>:

void MPU6050_Temp_double(MPU6050_struct *pMPU6050)
{
 80018a0:	b510      	push	{r4, lr}
 80018a2:	4604      	mov	r4, r0
	pMPU6050->Temperature = (double)Temperature_raw / 340 + 36.53;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MPU6050_Temp_double+0x30>)
 80018a6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80018aa:	f7fe fe43 	bl	8000534 <__aeabi_i2d>
 80018ae:	2200      	movs	r2, #0
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <MPU6050_Temp_double+0x34>)
 80018b2:	f7fe ffd3 	bl	800085c <__aeabi_ddiv>
 80018b6:	a304      	add	r3, pc, #16	; (adr r3, 80018c8 <MPU6050_Temp_double+0x28>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fcee 	bl	800029c <__adddf3>
 80018c0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
 80018c4:	bd10      	pop	{r4, pc}
 80018c6:	bf00      	nop
 80018c8:	0a3d70a4 	.word	0x0a3d70a4
 80018cc:	404243d7 	.word	0x404243d7
 80018d0:	200002e2 	.word	0x200002e2
 80018d4:	40754000 	.word	0x40754000

080018d8 <MPU6050_Gyro_double>:

void MPU6050_Gyro_double(MPU6050_struct *pMPU6050)
{
 80018d8:	b538      	push	{r3, r4, r5, lr}
 80018da:	4604      	mov	r4, r0
	pMPU6050->Gyro_X = (double)MPU6050_Gyro_raw.xdata / 65.5;
 80018dc:	4d14      	ldr	r5, [pc, #80]	; (8001930 <MPU6050_Gyro_double+0x58>)
 80018de:	f9b5 0000 	ldrsh.w	r0, [r5]
 80018e2:	f7fe fe27 	bl	8000534 <__aeabi_i2d>
 80018e6:	a310      	add	r3, pc, #64	; (adr r3, 8001928 <MPU6050_Gyro_double+0x50>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe ffb6 	bl	800085c <__aeabi_ddiv>
 80018f0:	e9c4 0108 	strd	r0, r1, [r4, #32]
	pMPU6050->Gyro_Y = (double)MPU6050_Gyro_raw.ydata / 65.5;
 80018f4:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 80018f8:	f7fe fe1c 	bl	8000534 <__aeabi_i2d>
 80018fc:	a30a      	add	r3, pc, #40	; (adr r3, 8001928 <MPU6050_Gyro_double+0x50>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe ffab 	bl	800085c <__aeabi_ddiv>
 8001906:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
	pMPU6050->Gyro_Z = (double)MPU6050_Gyro_raw.zdata / 65.5;
 800190a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 800190e:	f7fe fe11 	bl	8000534 <__aeabi_i2d>
 8001912:	a305      	add	r3, pc, #20	; (adr r3, 8001928 <MPU6050_Gyro_double+0x50>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe ffa0 	bl	800085c <__aeabi_ddiv>
 800191c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
}
 8001920:	bd38      	pop	{r3, r4, r5, pc}
 8001922:	bf00      	nop
 8001924:	f3af 8000 	nop.w
 8001928:	00000000 	.word	0x00000000
 800192c:	40506000 	.word	0x40506000
 8001930:	200002e4 	.word	0x200002e4

08001934 <SI1145_Init>:
uint8_t Calib_data[12];	// Unused

struct SI1145_read SI1145_raw_data;

HAL_StatusTypeDef SI1145_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 8001934:	b084      	sub	sp, #16
 8001936:	b570      	push	{r4, r5, r6, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	ac0a      	add	r4, sp, #40	; 0x28
 800193c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001940:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
	HAL_StatusTypeDef status;
	uint8_t data[2];


	// Mandatory before any I2C operations with this sensor
	data[0] = 0x17;
 8001944:	2317      	movs	r3, #23
 8001946:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_HW_KEY, 1, data, 1, Timeout);
 800194a:	9402      	str	r4, [sp, #8]
 800194c:	2301      	movs	r3, #1
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	aa05      	add	r2, sp, #20
 8001952:	9200      	str	r2, [sp, #0]
 8001954:	2207      	movs	r2, #7
 8001956:	21c0      	movs	r1, #192	; 0xc0
 8001958:	a80a      	add	r0, sp, #40	; 0x28
 800195a:	f003 fa5b 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 800195e:	b120      	cbz	r0, 800196a <SI1145_Init+0x36>

	// Start autorun measurement
	data[0] = SI1145_ALS_AUTO;
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
	return status;
}
 8001960:	b006      	add	sp, #24
 8001962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001966:	b004      	add	sp, #16
 8001968:	4770      	bx	lr
	data[0] = SI1145_CMD_RESET;
 800196a:	2501      	movs	r5, #1
 800196c:	f88d 5014 	strb.w	r5, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001970:	9402      	str	r4, [sp, #8]
 8001972:	9501      	str	r5, [sp, #4]
 8001974:	ae05      	add	r6, sp, #20
 8001976:	9600      	str	r6, [sp, #0]
 8001978:	462b      	mov	r3, r5
 800197a:	2218      	movs	r2, #24
 800197c:	21c0      	movs	r1, #192	; 0xc0
 800197e:	a80a      	add	r0, sp, #40	; 0x28
 8001980:	f003 fa48 	bl	8004e14 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8001984:	201e      	movs	r0, #30
 8001986:	f002 fd47 	bl	8004418 <HAL_Delay>
	data[0] = 0x17;
 800198a:	2317      	movs	r3, #23
 800198c:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_HW_KEY, 1, data, 1, Timeout);
 8001990:	9402      	str	r4, [sp, #8]
 8001992:	9501      	str	r5, [sp, #4]
 8001994:	9600      	str	r6, [sp, #0]
 8001996:	462b      	mov	r3, r5
 8001998:	2207      	movs	r2, #7
 800199a:	21c0      	movs	r1, #192	; 0xc0
 800199c:	a80a      	add	r0, sp, #40	; 0x28
 800199e:	f003 fa39 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d1dc      	bne.n	8001960 <SI1145_Init+0x2c>
	data[0] = 224;	//LSB
 80019a6:	23e0      	movs	r3, #224	; 0xe0
 80019a8:	f88d 3014 	strb.w	r3, [sp, #20]
	data[1] = 124;	//MSB
 80019ac:	237c      	movs	r3, #124	; 0x7c
 80019ae:	f88d 3015 	strb.w	r3, [sp, #21]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_MEAS_RATE_L, 1, data, 4, Timeout);
 80019b2:	9402      	str	r4, [sp, #8]
 80019b4:	2304      	movs	r3, #4
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	ab05      	add	r3, sp, #20
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	462b      	mov	r3, r5
 80019be:	2208      	movs	r2, #8
 80019c0:	21c0      	movs	r1, #192	; 0xc0
 80019c2:	a80a      	add	r0, sp, #40	; 0x28
 80019c4:	f003 fa26 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d1c9      	bne.n	8001960 <SI1145_Init+0x2c>
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_UCOEF0, 1, UCOEF, 4, Timeout*2);
 80019cc:	fa04 f305 	lsl.w	r3, r4, r5
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	2304      	movs	r3, #4
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <SI1145_Init+0x1b0>)
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	462b      	mov	r3, r5
 80019dc:	2213      	movs	r2, #19
 80019de:	21c0      	movs	r1, #192	; 0xc0
 80019e0:	a80a      	add	r0, sp, #40	; 0x28
 80019e2:	f003 fa17 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d1ba      	bne.n	8001960 <SI1145_Init+0x2c>
	data[0] = 0b00100000;
 80019ea:	2320      	movs	r3, #32
 80019ec:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_PARAM_WR, 1, data, 1, Timeout);
 80019f0:	9402      	str	r4, [sp, #8]
 80019f2:	9501      	str	r5, [sp, #4]
 80019f4:	ae05      	add	r6, sp, #20
 80019f6:	9600      	str	r6, [sp, #0]
 80019f8:	462b      	mov	r3, r5
 80019fa:	2217      	movs	r2, #23
 80019fc:	21c0      	movs	r1, #192	; 0xc0
 80019fe:	a80a      	add	r0, sp, #40	; 0x28
 8001a00:	f003 fa08 	bl	8004e14 <HAL_I2C_Mem_Write>
	data[0] = SI1145_CMD_writeRAM | SI1145_RAM_VIS_ADC_MISC;
 8001a04:	23b2      	movs	r3, #178	; 0xb2
 8001a06:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001a0a:	9402      	str	r4, [sp, #8]
 8001a0c:	9501      	str	r5, [sp, #4]
 8001a0e:	9600      	str	r6, [sp, #0]
 8001a10:	462b      	mov	r3, r5
 8001a12:	2218      	movs	r2, #24
 8001a14:	21c0      	movs	r1, #192	; 0xc0
 8001a16:	a80a      	add	r0, sp, #40	; 0x28
 8001a18:	f003 f9fc 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d19f      	bne.n	8001960 <SI1145_Init+0x2c>
	data[0] = 0b00000000;
 8001a20:	f88d 0014 	strb.w	r0, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_PARAM_WR, 1, data, 1, Timeout);
 8001a24:	9402      	str	r4, [sp, #8]
 8001a26:	9501      	str	r5, [sp, #4]
 8001a28:	ae05      	add	r6, sp, #20
 8001a2a:	9600      	str	r6, [sp, #0]
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	2217      	movs	r2, #23
 8001a30:	21c0      	movs	r1, #192	; 0xc0
 8001a32:	a80a      	add	r0, sp, #40	; 0x28
 8001a34:	f003 f9ee 	bl	8004e14 <HAL_I2C_Mem_Write>
	data[0] = SI1145_CMD_writeRAM | SI1145_RAM_IR_ADC_MISC;
 8001a38:	23bf      	movs	r3, #191	; 0xbf
 8001a3a:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001a3e:	9402      	str	r4, [sp, #8]
 8001a40:	9501      	str	r5, [sp, #4]
 8001a42:	9600      	str	r6, [sp, #0]
 8001a44:	462b      	mov	r3, r5
 8001a46:	2218      	movs	r2, #24
 8001a48:	21c0      	movs	r1, #192	; 0xc0
 8001a4a:	a80a      	add	r0, sp, #40	; 0x28
 8001a4c:	f003 f9e2 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001a50:	2800      	cmp	r0, #0
 8001a52:	d185      	bne.n	8001960 <SI1145_Init+0x2c>
	data[0] = SI1145_CMD_GET_CAL;
 8001a54:	2312      	movs	r3, #18
 8001a56:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001a5a:	9402      	str	r4, [sp, #8]
 8001a5c:	9501      	str	r5, [sp, #4]
 8001a5e:	ab05      	add	r3, sp, #20
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	462b      	mov	r3, r5
 8001a64:	2218      	movs	r2, #24
 8001a66:	21c0      	movs	r1, #192	; 0xc0
 8001a68:	a80a      	add	r0, sp, #40	; 0x28
 8001a6a:	f003 f9d3 	bl	8004e14 <HAL_I2C_Mem_Write>
	status = HAL_I2C_Mem_Read(&handle, SI1145_Address, SI1145_VIS_DATA_L , 1, Calib_data, 12, Timeout*6);
 8001a6e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001a72:	40ab      	lsls	r3, r5
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	230c      	movs	r3, #12
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <SI1145_Init+0x1b4>)
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	462b      	mov	r3, r5
 8001a80:	2222      	movs	r2, #34	; 0x22
 8001a82:	21c0      	movs	r1, #192	; 0xc0
 8001a84:	a80a      	add	r0, sp, #40	; 0x28
 8001a86:	f003 fa77 	bl	8004f78 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	f47f af68 	bne.w	8001960 <SI1145_Init+0x2c>
	data[0] = 0b10110000;
 8001a90:	23b0      	movs	r3, #176	; 0xb0
 8001a92:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_PARAM_WR, 1, data, 1, Timeout);
 8001a96:	9402      	str	r4, [sp, #8]
 8001a98:	9501      	str	r5, [sp, #4]
 8001a9a:	ae05      	add	r6, sp, #20
 8001a9c:	9600      	str	r6, [sp, #0]
 8001a9e:	462b      	mov	r3, r5
 8001aa0:	2217      	movs	r2, #23
 8001aa2:	21c0      	movs	r1, #192	; 0xc0
 8001aa4:	a80a      	add	r0, sp, #40	; 0x28
 8001aa6:	f003 f9b5 	bl	8004e14 <HAL_I2C_Mem_Write>
	data[0] = SI1145_CMD_writeRAM | SI1145_RAM_CHLIST;
 8001aaa:	23a1      	movs	r3, #161	; 0xa1
 8001aac:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001ab0:	9402      	str	r4, [sp, #8]
 8001ab2:	9501      	str	r5, [sp, #4]
 8001ab4:	9600      	str	r6, [sp, #0]
 8001ab6:	462b      	mov	r3, r5
 8001ab8:	2218      	movs	r2, #24
 8001aba:	21c0      	movs	r1, #192	; 0xc0
 8001abc:	a80a      	add	r0, sp, #40	; 0x28
 8001abe:	f003 f9a9 	bl	8004e14 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	f47f af4c 	bne.w	8001960 <SI1145_Init+0x2c>
	data[0] = SI1145_ALS_AUTO;
 8001ac8:	230e      	movs	r3, #14
 8001aca:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001ace:	9402      	str	r4, [sp, #8]
 8001ad0:	462b      	mov	r3, r5
 8001ad2:	9501      	str	r5, [sp, #4]
 8001ad4:	aa05      	add	r2, sp, #20
 8001ad6:	9200      	str	r2, [sp, #0]
 8001ad8:	2218      	movs	r2, #24
 8001ada:	21c0      	movs	r1, #192	; 0xc0
 8001adc:	a80a      	add	r0, sp, #40	; 0x28
 8001ade:	f003 f999 	bl	8004e14 <HAL_I2C_Mem_Write>
	return status;
 8001ae2:	e73d      	b.n	8001960 <SI1145_Init+0x2c>
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	200002ec 	.word	0x200002ec

08001aec <SI1145_read_ID>:



HAL_StatusTypeDef SI1145_read_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 8001aec:	b084      	sub	sp, #16
 8001aee:	b500      	push	{lr}
 8001af0:	b085      	sub	sp, #20
 8001af2:	f10d 0c18 	add.w	ip, sp, #24
 8001af6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	return HAL_I2C_Mem_Read(&handle, SI1145_Address, SI1145_PART_ID, 1, ptr_ID, 1, Timeout);
 8001afa:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	2301      	movs	r3, #1
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001b06:	9200      	str	r2, [sp, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	21c0      	movs	r1, #192	; 0xc0
 8001b0c:	4660      	mov	r0, ip
 8001b0e:	f003 fa33 	bl	8004f78 <HAL_I2C_Mem_Read>
}
 8001b12:	b005      	add	sp, #20
 8001b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b18:	b004      	add	sp, #16
 8001b1a:	4770      	bx	lr

08001b1c <SI1145_Read_Data>:



HAL_StatusTypeDef SI1145_Read_Data(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	b500      	push	{lr}
 8001b20:	b089      	sub	sp, #36	; 0x24
 8001b22:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001b26:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t data[12];

	status = HAL_I2C_Mem_Read(&handle, SI1145_Address, SI1145_VIS_DATA_L , 1, data, 12, Timeout);
 8001b2a:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	230c      	movs	r3, #12
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	ab05      	add	r3, sp, #20
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	2222      	movs	r2, #34	; 0x22
 8001b3c:	21c0      	movs	r1, #192	; 0xc0
 8001b3e:	4660      	mov	r0, ip
 8001b40:	f003 fa1a 	bl	8004f78 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8001b44:	b9a8      	cbnz	r0, 8001b72 <SI1145_Read_Data+0x56>
		return status;

	SI1145_raw_data.VIS = data[1] << 8 | data[0];
 8001b46:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001b4a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001b4e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <SI1145_Read_Data+0x60>)
 8001b54:	809a      	strh	r2, [r3, #4]
	SI1145_raw_data.IR = data[3] << 8 | data[2];
 8001b56:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8001b5a:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001b5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b62:	805a      	strh	r2, [r3, #2]
	SI1145_raw_data.UV = data[11] << 8 | data[10];
 8001b64:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8001b68:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8001b6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b70:	801a      	strh	r2, [r3, #0]

	return status;
}
 8001b72:	b009      	add	sp, #36	; 0x24
 8001b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b78:	b004      	add	sp, #16
 8001b7a:	4770      	bx	lr
 8001b7c:	200002f8 	.word	0x200002f8

08001b80 <SI1145_IR_raw>:


uint16_t SI1145_IR_raw()
{
	return SI1145_raw_data.IR;
}
 8001b80:	4b01      	ldr	r3, [pc, #4]	; (8001b88 <SI1145_IR_raw+0x8>)
 8001b82:	8858      	ldrh	r0, [r3, #2]
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200002f8 	.word	0x200002f8

08001b8c <SI1145_VIS_raw>:


uint16_t SI1145_VIS_raw()
{
	return SI1145_raw_data.VIS;
}
 8001b8c:	4b01      	ldr	r3, [pc, #4]	; (8001b94 <SI1145_VIS_raw+0x8>)
 8001b8e:	8898      	ldrh	r0, [r3, #4]
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	200002f8 	.word	0x200002f8

08001b98 <SI1145_UV_double>:


double SI1145_UV_double()
{
 8001b98:	b508      	push	{r3, lr}
	return (double)SI1145_raw_data.UV / 100;
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SI1145_UV_double+0x18>)
 8001b9c:	8818      	ldrh	r0, [r3, #0]
 8001b9e:	f7fe fcb9 	bl	8000514 <__aeabi_ui2d>
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <SI1145_UV_double+0x1c>)
 8001ba6:	f7fe fe59 	bl	800085c <__aeabi_ddiv>
}
 8001baa:	ec41 0b10 	vmov	d0, r0, r1
 8001bae:	bd08      	pop	{r3, pc}
 8001bb0:	200002f8 	.word	0x200002f8
 8001bb4:	40590000 	.word	0x40590000

08001bb8 <SD_PowerOff>:
}

/* power off */
static void SD_PowerOff(void) 
{
	PowerFlag = 0;
 8001bb8:	4b01      	ldr	r3, [pc, #4]	; (8001bc0 <SD_PowerOff+0x8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
}
 8001bbe:	4770      	bx	lr
 8001bc0:	20000235 	.word	0x20000235

08001bc4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
	return PowerFlag;
}
 8001bc4:	4b01      	ldr	r3, [pc, #4]	; (8001bcc <SD_CheckPower+0x8>)
 8001bc6:	7818      	ldrb	r0, [r3, #0]
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000235 	.word	0x20000235

08001bd0 <SPI_TxBuffer>:
{
 8001bd0:	b508      	push	{r3, lr}
 8001bd2:	460a      	mov	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SPI_TxBuffer+0x1c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f013 0f02 	tst.w	r3, #2
 8001bde:	d0f9      	beq.n	8001bd4 <SPI_TxBuffer+0x4>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001be0:	2364      	movs	r3, #100	; 0x64
 8001be2:	4601      	mov	r1, r0
 8001be4:	4801      	ldr	r0, [pc, #4]	; (8001bec <SPI_TxBuffer+0x1c>)
 8001be6:	f004 f9ec 	bl	8005fc2 <HAL_SPI_Transmit>
}
 8001bea:	bd08      	pop	{r3, pc}
 8001bec:	20000a44 	.word	0x20000a44

08001bf0 <SPI_TxByte>:
{
 8001bf0:	b500      	push	{lr}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <SPI_TxByte+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f013 0f02 	tst.w	r3, #2
 8001c02:	d0f9      	beq.n	8001bf8 <SPI_TxByte+0x8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	2201      	movs	r2, #1
 8001c08:	f10d 0107 	add.w	r1, sp, #7
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <SPI_TxByte+0x28>)
 8001c0e:	f004 f9d8 	bl	8005fc2 <HAL_SPI_Transmit>
}
 8001c12:	b003      	add	sp, #12
 8001c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c18:	20000a44 	.word	0x20000a44

08001c1c <SELECT>:
{
 8001c1c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2110      	movs	r1, #16
 8001c22:	4803      	ldr	r0, [pc, #12]	; (8001c30 <SELECT+0x14>)
 8001c24:	f002 fdb3 	bl	800478e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f002 fbf5 	bl	8004418 <HAL_Delay>
}
 8001c2e:	bd08      	pop	{r3, pc}
 8001c30:	40020000 	.word	0x40020000

08001c34 <DESELECT>:
{
 8001c34:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001c36:	2201      	movs	r2, #1
 8001c38:	2110      	movs	r1, #16
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <DESELECT+0x14>)
 8001c3c:	f002 fda7 	bl	800478e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c40:	2001      	movs	r0, #1
 8001c42:	f002 fbe9 	bl	8004418 <HAL_Delay>
}
 8001c46:	bd08      	pop	{r3, pc}
 8001c48:	40020000 	.word	0x40020000

08001c4c <SPI_RxByte>:
{
 8001c4c:	b500      	push	{lr}
 8001c4e:	b085      	sub	sp, #20
	dummy = 0xFF;
 8001c50:	23ff      	movs	r3, #255	; 0xff
 8001c52:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <SPI_RxByte+0x34>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f013 0f02 	tst.w	r3, #2
 8001c60:	d0f9      	beq.n	8001c56 <SPI_RxByte+0xa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c62:	2364      	movs	r3, #100	; 0x64
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2301      	movs	r3, #1
 8001c68:	f10d 020e 	add.w	r2, sp, #14
 8001c6c:	f10d 010f 	add.w	r1, sp, #15
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <SPI_RxByte+0x34>)
 8001c72:	f004 fa7d 	bl	8006170 <HAL_SPI_TransmitReceive>
}
 8001c76:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001c7a:	b005      	add	sp, #20
 8001c7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c80:	20000a44 	.word	0x20000a44

08001c84 <SD_PowerOn>:
{
 8001c84:	b510      	push	{r4, lr}
 8001c86:	b082      	sub	sp, #8
	DESELECT();
 8001c88:	f7ff ffd4 	bl	8001c34 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001c8c:	2400      	movs	r4, #0
 8001c8e:	2c09      	cmp	r4, #9
 8001c90:	dc04      	bgt.n	8001c9c <SD_PowerOn+0x18>
		SPI_TxByte(0xFF);
 8001c92:	20ff      	movs	r0, #255	; 0xff
 8001c94:	f7ff ffac 	bl	8001bf0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001c98:	3401      	adds	r4, #1
 8001c9a:	e7f8      	b.n	8001c8e <SD_PowerOn+0xa>
	SELECT();
 8001c9c:	f7ff ffbe 	bl	8001c1c <SELECT>
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001ca0:	2340      	movs	r3, #64	; 0x40
 8001ca2:	f88d 3000 	strb.w	r3, [sp]
	args[1] = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f88d 3001 	strb.w	r3, [sp, #1]
	args[2] = 0;
 8001cac:	f88d 3002 	strb.w	r3, [sp, #2]
	args[3] = 0;
 8001cb0:	f88d 3003 	strb.w	r3, [sp, #3]
	args[4] = 0;
 8001cb4:	f88d 3004 	strb.w	r3, [sp, #4]
	args[5] = 0x95;		/* CRC */
 8001cb8:	2395      	movs	r3, #149	; 0x95
 8001cba:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxBuffer(args, sizeof(args));
 8001cbe:	2106      	movs	r1, #6
 8001cc0:	4668      	mov	r0, sp
 8001cc2:	f7ff ff85 	bl	8001bd0 <SPI_TxBuffer>
	uint32_t cnt = 0x1FFF;
 8001cc6:	f641 74ff 	movw	r4, #8191	; 0x1fff
	while ((SPI_RxByte() != 0x01) && cnt)
 8001cca:	f7ff ffbf 	bl	8001c4c <SPI_RxByte>
 8001cce:	2801      	cmp	r0, #1
 8001cd0:	d002      	beq.n	8001cd8 <SD_PowerOn+0x54>
 8001cd2:	b10c      	cbz	r4, 8001cd8 <SD_PowerOn+0x54>
		cnt--;
 8001cd4:	3c01      	subs	r4, #1
 8001cd6:	e7f8      	b.n	8001cca <SD_PowerOn+0x46>
	DESELECT();
 8001cd8:	f7ff ffac 	bl	8001c34 <DESELECT>
	SPI_TxByte(0XFF);
 8001cdc:	20ff      	movs	r0, #255	; 0xff
 8001cde:	f7ff ff87 	bl	8001bf0 <SPI_TxByte>
	PowerFlag = 1;
 8001ce2:	4b02      	ldr	r3, [pc, #8]	; (8001cec <SD_PowerOn+0x68>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
}
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	20000235 	.word	0x20000235

08001cf0 <SD_ReadyWait>:
{
 8001cf0:	b538      	push	{r3, r4, r5, lr}
	tickstart = HAL_GetTick();
 8001cf2:	f002 fb8b 	bl	800440c <HAL_GetTick>
 8001cf6:	4605      	mov	r5, r0
		res = SPI_RxByte();
 8001cf8:	f7ff ffa8 	bl	8001c4c <SPI_RxByte>
 8001cfc:	4604      	mov	r4, r0
	} while ((res != 0xFF) && ((HAL_GetTick() - tickstart) < SD_ReadyWait_TIMEOUT));
 8001cfe:	28ff      	cmp	r0, #255	; 0xff
 8001d00:	d005      	beq.n	8001d0e <SD_ReadyWait+0x1e>
 8001d02:	f002 fb83 	bl	800440c <HAL_GetTick>
 8001d06:	1b40      	subs	r0, r0, r5
 8001d08:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001d0c:	d3f4      	bcc.n	8001cf8 <SD_ReadyWait+0x8>
}
 8001d0e:	4620      	mov	r0, r4
 8001d10:	bd38      	pop	{r3, r4, r5, pc}

08001d12 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001d12:	b538      	push	{r3, r4, r5, lr}
 8001d14:	4605      	mov	r5, r0
 8001d16:	460c      	mov	r4, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001d18:	f7ff ffea 	bl	8001cf0 <SD_ReadyWait>
 8001d1c:	28ff      	cmp	r0, #255	; 0xff
 8001d1e:	d001      	beq.n	8001d24 <SD_SendCmd+0x12>
 8001d20:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(cmd); 					/* Command */
 8001d24:	4628      	mov	r0, r5
 8001d26:	f7ff ff63 	bl	8001bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001d2a:	0e20      	lsrs	r0, r4, #24
 8001d2c:	f7ff ff60 	bl	8001bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001d30:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001d34:	f7ff ff5c 	bl	8001bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001d38:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001d3c:	f7ff ff58 	bl	8001bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001d40:	b2e0      	uxtb	r0, r4
 8001d42:	f7ff ff55 	bl	8001bf0 <SPI_TxByte>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001d46:	2d40      	cmp	r5, #64	; 0x40
 8001d48:	d013      	beq.n	8001d72 <SD_SendCmd+0x60>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d4a:	2d48      	cmp	r5, #72	; 0x48
 8001d4c:	d00f      	beq.n	8001d6e <SD_SendCmd+0x5c>
	else crc = 1;
 8001d4e:	2001      	movs	r0, #1
	SPI_TxByte(crc);
 8001d50:	f7ff ff4e 	bl	8001bf0 <SPI_TxByte>
	if (cmd == CMD12) SPI_RxByte();
 8001d54:	2d4c      	cmp	r5, #76	; 0x4c
 8001d56:	d00e      	beq.n	8001d76 <SD_SendCmd+0x64>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d58:	240a      	movs	r4, #10
		res = SPI_RxByte();
 8001d5a:	f7ff ff77 	bl	8001c4c <SPI_RxByte>
	} while ((res & 0x80) && --n);
 8001d5e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d62:	d0de      	beq.n	8001d22 <SD_SendCmd+0x10>
 8001d64:	1e63      	subs	r3, r4, #1
 8001d66:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001d6a:	d1f6      	bne.n	8001d5a <SD_SendCmd+0x48>
 8001d6c:	e7d9      	b.n	8001d22 <SD_SendCmd+0x10>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d6e:	2087      	movs	r0, #135	; 0x87
 8001d70:	e7ee      	b.n	8001d50 <SD_SendCmd+0x3e>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001d72:	2095      	movs	r0, #149	; 0x95
 8001d74:	e7ec      	b.n	8001d50 <SD_SendCmd+0x3e>
	if (cmd == CMD12) SPI_RxByte();
 8001d76:	f7ff ff69 	bl	8001c4c <SPI_RxByte>
 8001d7a:	e7ed      	b.n	8001d58 <SD_SendCmd+0x46>

08001d7c <SPI_RxBytePtr>:
{
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4604      	mov	r4, r0
	*buff = SPI_RxByte();
 8001d80:	f7ff ff64 	bl	8001c4c <SPI_RxByte>
 8001d84:	7020      	strb	r0, [r4, #0]
}
 8001d86:	bd10      	pop	{r4, pc}

08001d88 <SD_RxDataBlock>:
{
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	4605      	mov	r5, r0
 8001d8c:	460e      	mov	r6, r1
	tickstart = HAL_GetTick();
 8001d8e:	f002 fb3d 	bl	800440c <HAL_GetTick>
 8001d92:	4607      	mov	r7, r0
		token = SPI_RxByte();
 8001d94:	f7ff ff5a 	bl	8001c4c <SPI_RxByte>
 8001d98:	4604      	mov	r4, r0
	} while((token == 0xFF) && ((HAL_GetTick() - tickstart) < SD_RxDataBlock_TIMEOUT));
 8001d9a:	28ff      	cmp	r0, #255	; 0xff
 8001d9c:	d104      	bne.n	8001da8 <SD_RxDataBlock+0x20>
 8001d9e:	f002 fb35 	bl	800440c <HAL_GetTick>
 8001da2:	1bc0      	subs	r0, r0, r7
 8001da4:	28c7      	cmp	r0, #199	; 0xc7
 8001da6:	d9f5      	bls.n	8001d94 <SD_RxDataBlock+0xc>
	if(token != 0xFE) return FALSE;
 8001da8:	2cfe      	cmp	r4, #254	; 0xfe
 8001daa:	d10d      	bne.n	8001dc8 <SD_RxDataBlock+0x40>
		SPI_RxBytePtr(buff++);
 8001dac:	4628      	mov	r0, r5
 8001dae:	3501      	adds	r5, #1
 8001db0:	f7ff ffe4 	bl	8001d7c <SPI_RxBytePtr>
	} while(len--);
 8001db4:	4633      	mov	r3, r6
 8001db6:	3e01      	subs	r6, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f7      	bne.n	8001dac <SD_RxDataBlock+0x24>
	SPI_RxByte();
 8001dbc:	f7ff ff46 	bl	8001c4c <SPI_RxByte>
	SPI_RxByte();
 8001dc0:	f7ff ff44 	bl	8001c4c <SPI_RxByte>
	return TRUE;
 8001dc4:	2001      	movs	r0, #1
}
 8001dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(token != 0xFE) return FALSE;
 8001dc8:	2000      	movs	r0, #0
 8001dca:	e7fc      	b.n	8001dc6 <SD_RxDataBlock+0x3e>

08001dcc <SD_TxDataBlock>:
{
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	4605      	mov	r5, r0
 8001dd0:	460c      	mov	r4, r1
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001dd2:	f7ff ff8d 	bl	8001cf0 <SD_ReadyWait>
 8001dd6:	28ff      	cmp	r0, #255	; 0xff
 8001dd8:	d001      	beq.n	8001dde <SD_TxDataBlock+0x12>
 8001dda:	2000      	movs	r0, #0
}
 8001ddc:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(token);
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff ff06 	bl	8001bf0 <SPI_TxByte>
	if (token != 0xFD)
 8001de4:	2cfd      	cmp	r4, #253	; 0xfd
 8001de6:	d106      	bne.n	8001df6 <SD_TxDataBlock+0x2a>
	uint8_t resp = 0;
 8001de8:	2500      	movs	r5, #0
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001dea:	f005 051f 	and.w	r5, r5, #31
 8001dee:	2d05      	cmp	r5, #5
 8001df0:	d01d      	beq.n	8001e2e <SD_TxDataBlock+0x62>
	return FALSE;
 8001df2:	2000      	movs	r0, #0
 8001df4:	e7f2      	b.n	8001ddc <SD_TxDataBlock+0x10>
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f7ff fee8 	bl	8001bd0 <SPI_TxBuffer>
		SPI_RxByte();
 8001e00:	f7ff ff24 	bl	8001c4c <SPI_RxByte>
		SPI_RxByte();
 8001e04:	f7ff ff22 	bl	8001c4c <SPI_RxByte>
	uint8_t i = 0;
 8001e08:	2400      	movs	r4, #0
	uint8_t resp = 0;
 8001e0a:	4625      	mov	r5, r4
		while (i <= 64)
 8001e0c:	e001      	b.n	8001e12 <SD_TxDataBlock+0x46>
			i++;
 8001e0e:	3401      	adds	r4, #1
 8001e10:	b2e4      	uxtb	r4, r4
		while (i <= 64)
 8001e12:	2c40      	cmp	r4, #64	; 0x40
 8001e14:	d806      	bhi.n	8001e24 <SD_TxDataBlock+0x58>
			resp = SPI_RxByte();
 8001e16:	f7ff ff19 	bl	8001c4c <SPI_RxByte>
 8001e1a:	4605      	mov	r5, r0
			if ((resp & 0x1F) == 0x05) break;
 8001e1c:	f000 031f 	and.w	r3, r0, #31
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d1f4      	bne.n	8001e0e <SD_TxDataBlock+0x42>
		while (SPI_RxByte() == 0);
 8001e24:	f7ff ff12 	bl	8001c4c <SPI_RxByte>
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	d0fb      	beq.n	8001e24 <SD_TxDataBlock+0x58>
 8001e2c:	e7dd      	b.n	8001dea <SD_TxDataBlock+0x1e>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001e2e:	2001      	movs	r0, #1
 8001e30:	e7d4      	b.n	8001ddc <SD_TxDataBlock+0x10>
	...

08001e34 <SD_disk_initialize>:
	uint8_t n, type, ocr[4];
	uint32_t tickstart;


	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001e34:	2800      	cmp	r0, #0
 8001e36:	f040 80b9 	bne.w	8001fac <SD_disk_initialize+0x178>
{
 8001e3a:	b570      	push	{r4, r5, r6, lr}
 8001e3c:	b082      	sub	sp, #8

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	; (8001fb0 <SD_disk_initialize+0x17c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	f013 0402 	ands.w	r4, r3, #2
 8001e46:	d004      	beq.n	8001e52 <SD_disk_initialize+0x1e>
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <SD_disk_initialize+0x17c>)
 8001e4a:	7818      	ldrb	r0, [r3, #0]
 8001e4c:	b2c0      	uxtb	r0, r0
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
}
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
	SD_PowerOn();
 8001e52:	f7ff ff17 	bl	8001c84 <SD_PowerOn>
	SELECT();
 8001e56:	f7ff fee1 	bl	8001c1c <SELECT>
	if (SD_SendCmd(CMD0, 0) == 1)
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2040      	movs	r0, #64	; 0x40
 8001e5e:	f7ff ff58 	bl	8001d12 <SD_SendCmd>
 8001e62:	4605      	mov	r5, r0
 8001e64:	2801      	cmp	r0, #1
 8001e66:	d011      	beq.n	8001e8c <SD_disk_initialize+0x58>
	CardType = type;
 8001e68:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <SD_disk_initialize+0x180>)
 8001e6a:	701c      	strb	r4, [r3, #0]
	DESELECT();
 8001e6c:	f7ff fee2 	bl	8001c34 <DESELECT>
	SPI_RxByte();
 8001e70:	f7ff feec 	bl	8001c4c <SPI_RxByte>
	if (type)
 8001e74:	2c00      	cmp	r4, #0
 8001e76:	f000 8096 	beq.w	8001fa6 <SD_disk_initialize+0x172>
		Stat &= ~STA_NOINIT;
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <SD_disk_initialize+0x17c>)
 8001e7c:	7813      	ldrb	r3, [r2, #0]
 8001e7e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001e82:	7013      	strb	r3, [r2, #0]
	return Stat;
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <SD_disk_initialize+0x17c>)
 8001e86:	7818      	ldrb	r0, [r3, #0]
 8001e88:	b2c0      	uxtb	r0, r0
 8001e8a:	e7e0      	b.n	8001e4e <SD_disk_initialize+0x1a>
		tickstart = HAL_GetTick();
 8001e8c:	f002 fabe 	bl	800440c <HAL_GetTick>
 8001e90:	4606      	mov	r6, r0
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001e92:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001e96:	2048      	movs	r0, #72	; 0x48
 8001e98:	f7ff ff3b 	bl	8001d12 <SD_SendCmd>
 8001e9c:	2801      	cmp	r0, #1
 8001e9e:	d146      	bne.n	8001f2e <SD_disk_initialize+0xfa>
			for (n = 0; n < 4; n++)
 8001ea0:	4625      	mov	r5, r4
 8001ea2:	e007      	b.n	8001eb4 <SD_disk_initialize+0x80>
				ocr[n] = SPI_RxByte();
 8001ea4:	f7ff fed2 	bl	8001c4c <SPI_RxByte>
 8001ea8:	ab02      	add	r3, sp, #8
 8001eaa:	442b      	add	r3, r5
 8001eac:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++)
 8001eb0:	3501      	adds	r5, #1
 8001eb2:	b2ed      	uxtb	r5, r5
 8001eb4:	2d03      	cmp	r5, #3
 8001eb6:	d9f5      	bls.n	8001ea4 <SD_disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001eb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d1d3      	bne.n	8001e68 <SD_disk_initialize+0x34>
 8001ec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ec4:	2baa      	cmp	r3, #170	; 0xaa
 8001ec6:	d1cf      	bne.n	8001e68 <SD_disk_initialize+0x34>
 8001ec8:	e005      	b.n	8001ed6 <SD_disk_initialize+0xa2>
				} while ((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT);
 8001eca:	f002 fa9f 	bl	800440c <HAL_GetTick>
 8001ece:	1b80      	subs	r0, r0, r6
 8001ed0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ed4:	d20c      	bcs.n	8001ef0 <SD_disk_initialize+0xbc>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2077      	movs	r0, #119	; 0x77
 8001eda:	f7ff ff1a 	bl	8001d12 <SD_SendCmd>
 8001ede:	2801      	cmp	r0, #1
 8001ee0:	d8f3      	bhi.n	8001eca <SD_disk_initialize+0x96>
 8001ee2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ee6:	2069      	movs	r0, #105	; 0x69
 8001ee8:	f7ff ff13 	bl	8001d12 <SD_SendCmd>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d1ec      	bne.n	8001eca <SD_disk_initialize+0x96>
				if (((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT) && SD_SendCmd(CMD58, 0) == 0)
 8001ef0:	f002 fa8c 	bl	800440c <HAL_GetTick>
 8001ef4:	1b86      	subs	r6, r0, r6
 8001ef6:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 8001efa:	d2b5      	bcs.n	8001e68 <SD_disk_initialize+0x34>
 8001efc:	2100      	movs	r1, #0
 8001efe:	207a      	movs	r0, #122	; 0x7a
 8001f00:	f7ff ff07 	bl	8001d12 <SD_SendCmd>
 8001f04:	4605      	mov	r5, r0
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d1ae      	bne.n	8001e68 <SD_disk_initialize+0x34>
					for (n = 0; n < 4; n++)
 8001f0a:	2d03      	cmp	r5, #3
 8001f0c:	d808      	bhi.n	8001f20 <SD_disk_initialize+0xec>
						ocr[n] = SPI_RxByte();
 8001f0e:	f7ff fe9d 	bl	8001c4c <SPI_RxByte>
 8001f12:	ab02      	add	r3, sp, #8
 8001f14:	442b      	add	r3, r5
 8001f16:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)
 8001f1a:	3501      	adds	r5, #1
 8001f1c:	b2ed      	uxtb	r5, r5
 8001f1e:	e7f4      	b.n	8001f0a <SD_disk_initialize+0xd6>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001f20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f28:	d03b      	beq.n	8001fa2 <SD_disk_initialize+0x16e>
 8001f2a:	240c      	movs	r4, #12
 8001f2c:	e79c      	b.n	8001e68 <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2077      	movs	r0, #119	; 0x77
 8001f32:	f7ff feee 	bl	8001d12 <SD_SendCmd>
 8001f36:	2801      	cmp	r0, #1
 8001f38:	d813      	bhi.n	8001f62 <SD_disk_initialize+0x12e>
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2069      	movs	r0, #105	; 0x69
 8001f3e:	f7ff fee8 	bl	8001d12 <SD_SendCmd>
 8001f42:	2801      	cmp	r0, #1
 8001f44:	d80d      	bhi.n	8001f62 <SD_disk_initialize+0x12e>
 8001f46:	2502      	movs	r5, #2
 8001f48:	e00b      	b.n	8001f62 <SD_disk_initialize+0x12e>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2077      	movs	r0, #119	; 0x77
 8001f4e:	f7ff fee0 	bl	8001d12 <SD_SendCmd>
 8001f52:	2801      	cmp	r0, #1
 8001f54:	d91e      	bls.n	8001f94 <SD_disk_initialize+0x160>
			} while ((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT);
 8001f56:	f002 fa59 	bl	800440c <HAL_GetTick>
 8001f5a:	1b83      	subs	r3, r0, r6
 8001f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f60:	d207      	bcs.n	8001f72 <SD_disk_initialize+0x13e>
				if (type == CT_SD1)
 8001f62:	2d02      	cmp	r5, #2
 8001f64:	d0f1      	beq.n	8001f4a <SD_disk_initialize+0x116>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001f66:	2100      	movs	r1, #0
 8001f68:	2041      	movs	r0, #65	; 0x41
 8001f6a:	f7ff fed2 	bl	8001d12 <SD_SendCmd>
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d1f1      	bne.n	8001f56 <SD_disk_initialize+0x122>
			if (((HAL_GetTick() - tickstart) >= SD_disk_init_TIMEOUT) || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001f72:	f002 fa4b 	bl	800440c <HAL_GetTick>
 8001f76:	1b86      	subs	r6, r0, r6
 8001f78:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 8001f7c:	f4bf af74 	bcs.w	8001e68 <SD_disk_initialize+0x34>
 8001f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f84:	2050      	movs	r0, #80	; 0x50
 8001f86:	f7ff fec4 	bl	8001d12 <SD_SendCmd>
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	f47f af6c 	bne.w	8001e68 <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001f90:	462c      	mov	r4, r5
 8001f92:	e769      	b.n	8001e68 <SD_disk_initialize+0x34>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001f94:	2100      	movs	r1, #0
 8001f96:	2069      	movs	r0, #105	; 0x69
 8001f98:	f7ff febb 	bl	8001d12 <SD_SendCmd>
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d1da      	bne.n	8001f56 <SD_disk_initialize+0x122>
 8001fa0:	e7e7      	b.n	8001f72 <SD_disk_initialize+0x13e>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001fa2:	2404      	movs	r4, #4
 8001fa4:	e760      	b.n	8001e68 <SD_disk_initialize+0x34>
		SD_PowerOff();
 8001fa6:	f7ff fe07 	bl	8001bb8 <SD_PowerOff>
 8001faa:	e76b      	b.n	8001e84 <SD_disk_initialize+0x50>
	if(drv) return STA_NOINIT;
 8001fac:	2001      	movs	r0, #1
}
 8001fae:	4770      	bx	lr
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	20000234 	.word	0x20000234

08001fb8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 8001fb8:	b918      	cbnz	r0, 8001fc2 <SD_disk_status+0xa>
	return Stat;
 8001fba:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <SD_disk_status+0x10>)
 8001fbc:	7818      	ldrb	r0, [r3, #0]
 8001fbe:	b2c0      	uxtb	r0, r0
 8001fc0:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8001fc2:	2001      	movs	r0, #1
}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000004 	.word	0x20000004

08001fcc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d13e      	bne.n	800204e <SD_disk_read+0x82>
{
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	460d      	mov	r5, r1
 8001fd4:	4616      	mov	r6, r2
 8001fd6:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d03a      	beq.n	8002052 <SD_disk_read+0x86>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <SD_disk_read+0x90>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f013 0f01 	tst.w	r3, #1
 8001fe4:	d137      	bne.n	8002056 <SD_disk_read+0x8a>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <SD_disk_read+0x94>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f013 0f04 	tst.w	r3, #4
 8001fee:	d100      	bne.n	8001ff2 <SD_disk_read+0x26>
 8001ff0:	0256      	lsls	r6, r2, #9

	SELECT();
 8001ff2:	f7ff fe13 	bl	8001c1c <SELECT>

	if (count == 1)
 8001ff6:	2c01      	cmp	r4, #1
 8001ff8:	d01a      	beq.n	8002030 <SD_disk_read+0x64>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001ffa:	4631      	mov	r1, r6
 8001ffc:	2052      	movs	r0, #82	; 0x52
 8001ffe:	f7ff fe88 	bl	8001d12 <SD_SendCmd>
 8002002:	b968      	cbnz	r0, 8002020 <SD_disk_read+0x54>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002008:	4628      	mov	r0, r5
 800200a:	f7ff febd 	bl	8001d88 <SD_RxDataBlock>
 800200e:	b118      	cbz	r0, 8002018 <SD_disk_read+0x4c>
				buff += 512;
 8002010:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8002014:	3c01      	subs	r4, #1
 8002016:	d1f5      	bne.n	8002004 <SD_disk_read+0x38>

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002018:	2100      	movs	r1, #0
 800201a:	204c      	movs	r0, #76	; 0x4c
 800201c:	f7ff fe79 	bl	8001d12 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002020:	f7ff fe08 	bl	8001c34 <DESELECT>
	SPI_RxByte();
 8002024:	f7ff fe12 	bl	8001c4c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002028:	1e20      	subs	r0, r4, #0
 800202a:	bf18      	it	ne
 800202c:	2001      	movne	r0, #1
}
 800202e:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002030:	4631      	mov	r1, r6
 8002032:	2051      	movs	r0, #81	; 0x51
 8002034:	f7ff fe6d 	bl	8001d12 <SD_SendCmd>
 8002038:	2800      	cmp	r0, #0
 800203a:	d1f1      	bne.n	8002020 <SD_disk_read+0x54>
 800203c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002040:	4628      	mov	r0, r5
 8002042:	f7ff fea1 	bl	8001d88 <SD_RxDataBlock>
 8002046:	2800      	cmp	r0, #0
 8002048:	d0ea      	beq.n	8002020 <SD_disk_read+0x54>
 800204a:	2400      	movs	r4, #0
 800204c:	e7e8      	b.n	8002020 <SD_disk_read+0x54>
	if (pdrv || !count) return RES_PARERR;
 800204e:	2004      	movs	r0, #4
}
 8002050:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8002052:	2004      	movs	r0, #4
 8002054:	e7eb      	b.n	800202e <SD_disk_read+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002056:	2003      	movs	r0, #3
 8002058:	e7e9      	b.n	800202e <SD_disk_read+0x62>
 800205a:	bf00      	nop
 800205c:	20000004 	.word	0x20000004
 8002060:	20000234 	.word	0x20000234

08002064 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002064:	2800      	cmp	r0, #0
 8002066:	d152      	bne.n	800210e <SD_disk_write+0xaa>
{
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	460d      	mov	r5, r1
 800206c:	4616      	mov	r6, r2
 800206e:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8002070:	2b00      	cmp	r3, #0
 8002072:	d04e      	beq.n	8002112 <SD_disk_write+0xae>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <SD_disk_write+0xbc>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f013 0f01 	tst.w	r3, #1
 800207c:	d14b      	bne.n	8002116 <SD_disk_write+0xb2>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800207e:	4b28      	ldr	r3, [pc, #160]	; (8002120 <SD_disk_write+0xbc>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f013 0f04 	tst.w	r3, #4
 8002086:	d148      	bne.n	800211a <SD_disk_write+0xb6>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <SD_disk_write+0xc0>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f013 0f04 	tst.w	r3, #4
 8002090:	d100      	bne.n	8002094 <SD_disk_write+0x30>
 8002092:	0256      	lsls	r6, r2, #9

	SELECT();
 8002094:	f7ff fdc2 	bl	8001c1c <SELECT>

	if (count == 1)
 8002098:	2c01      	cmp	r4, #1
 800209a:	d01f      	beq.n	80020dc <SD_disk_write+0x78>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <SD_disk_write+0xc0>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	f013 0f02 	tst.w	r3, #2
 80020a4:	d128      	bne.n	80020f8 <SD_disk_write+0x94>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80020a6:	4631      	mov	r1, r6
 80020a8:	2059      	movs	r0, #89	; 0x59
 80020aa:	f7ff fe32 	bl	8001d12 <SD_SendCmd>
 80020ae:	b968      	cbnz	r0, 80020cc <SD_disk_write+0x68>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80020b0:	21fc      	movs	r1, #252	; 0xfc
 80020b2:	4628      	mov	r0, r5
 80020b4:	f7ff fe8a 	bl	8001dcc <SD_TxDataBlock>
 80020b8:	b118      	cbz	r0, 80020c2 <SD_disk_write+0x5e>
				buff += 512;
 80020ba:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80020be:	3c01      	subs	r4, #1
 80020c0:	d1f6      	bne.n	80020b0 <SD_disk_write+0x4c>

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80020c2:	21fd      	movs	r1, #253	; 0xfd
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff fe81 	bl	8001dcc <SD_TxDataBlock>
 80020ca:	b1f0      	cbz	r0, 800210a <SD_disk_write+0xa6>
			}
		}
	}

	/* Idle */
	DESELECT();
 80020cc:	f7ff fdb2 	bl	8001c34 <DESELECT>
	SPI_RxByte();
 80020d0:	f7ff fdbc 	bl	8001c4c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80020d4:	1e20      	subs	r0, r4, #0
 80020d6:	bf18      	it	ne
 80020d8:	2001      	movne	r0, #1
}
 80020da:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80020dc:	4631      	mov	r1, r6
 80020de:	2058      	movs	r0, #88	; 0x58
 80020e0:	f7ff fe17 	bl	8001d12 <SD_SendCmd>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d1f1      	bne.n	80020cc <SD_disk_write+0x68>
 80020e8:	21fe      	movs	r1, #254	; 0xfe
 80020ea:	4628      	mov	r0, r5
 80020ec:	f7ff fe6e 	bl	8001dcc <SD_TxDataBlock>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d0eb      	beq.n	80020cc <SD_disk_write+0x68>
			count = 0;
 80020f4:	2400      	movs	r4, #0
 80020f6:	e7e9      	b.n	80020cc <SD_disk_write+0x68>
			SD_SendCmd(CMD55, 0);
 80020f8:	2100      	movs	r1, #0
 80020fa:	2077      	movs	r0, #119	; 0x77
 80020fc:	f7ff fe09 	bl	8001d12 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002100:	4621      	mov	r1, r4
 8002102:	2057      	movs	r0, #87	; 0x57
 8002104:	f7ff fe05 	bl	8001d12 <SD_SendCmd>
 8002108:	e7cd      	b.n	80020a6 <SD_disk_write+0x42>
				count = 1;
 800210a:	2401      	movs	r4, #1
 800210c:	e7de      	b.n	80020cc <SD_disk_write+0x68>
	if (pdrv || !count) return RES_PARERR;
 800210e:	2004      	movs	r0, #4
}
 8002110:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8002112:	2004      	movs	r0, #4
 8002114:	e7e1      	b.n	80020da <SD_disk_write+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002116:	2003      	movs	r0, #3
 8002118:	e7df      	b.n	80020da <SD_disk_write+0x76>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800211a:	2002      	movs	r0, #2
 800211c:	e7dd      	b.n	80020da <SD_disk_write+0x76>
 800211e:	bf00      	nop
 8002120:	20000004 	.word	0x20000004
 8002124:	20000234 	.word	0x20000234

08002128 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	b085      	sub	sp, #20
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800212c:	2800      	cmp	r0, #0
 800212e:	f040 80b2 	bne.w	8002296 <SD_disk_ioctl+0x16e>
 8002132:	460d      	mov	r5, r1
 8002134:	4616      	mov	r6, r2
 8002136:	4607      	mov	r7, r0
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8002138:	2905      	cmp	r1, #5
 800213a:	d013      	beq.n	8002164 <SD_disk_ioctl+0x3c>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800213c:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <SD_disk_ioctl+0x178>)
 800213e:	781c      	ldrb	r4, [r3, #0]
 8002140:	f014 0401 	ands.w	r4, r4, #1
 8002144:	f040 80a9 	bne.w	800229a <SD_disk_ioctl+0x172>

		SELECT();
 8002148:	f7ff fd68 	bl	8001c1c <SELECT>

		switch (ctrl)
 800214c:	2d0d      	cmp	r5, #13
 800214e:	f200 8096 	bhi.w	800227e <SD_disk_ioctl+0x156>
 8002152:	e8df f005 	tbb	[pc, r5]
 8002156:	1b5e      	.short	0x1b5e
 8002158:	9494945a 	.word	0x9494945a
 800215c:	94949494 	.word	0x94949494
 8002160:	82736494 	.word	0x82736494
		switch (*ptr)
 8002164:	7814      	ldrb	r4, [r2, #0]
 8002166:	2c01      	cmp	r4, #1
 8002168:	d007      	beq.n	800217a <SD_disk_ioctl+0x52>
 800216a:	2c02      	cmp	r4, #2
 800216c:	d009      	beq.n	8002182 <SD_disk_ioctl+0x5a>
 800216e:	b10c      	cbz	r4, 8002174 <SD_disk_ioctl+0x4c>
 8002170:	2404      	movs	r4, #4
 8002172:	e089      	b.n	8002288 <SD_disk_ioctl+0x160>
			SD_PowerOff();		/* Power Off */
 8002174:	f7ff fd20 	bl	8001bb8 <SD_PowerOff>
			break;
 8002178:	e086      	b.n	8002288 <SD_disk_ioctl+0x160>
			SD_PowerOn();		/* Power On */
 800217a:	f7ff fd83 	bl	8001c84 <SD_PowerOn>
			res = RES_OK;
 800217e:	463c      	mov	r4, r7
			break;
 8002180:	e082      	b.n	8002288 <SD_disk_ioctl+0x160>
			*(ptr + 1) = SD_CheckPower();
 8002182:	f7ff fd1f 	bl	8001bc4 <SD_CheckPower>
 8002186:	7070      	strb	r0, [r6, #1]
			res = RES_OK;		/* Power Check */
 8002188:	463c      	mov	r4, r7
			break;
 800218a:	e07d      	b.n	8002288 <SD_disk_ioctl+0x160>
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800218c:	2100      	movs	r1, #0
 800218e:	2049      	movs	r0, #73	; 0x49
 8002190:	f7ff fdbf 	bl	8001d12 <SD_SendCmd>
 8002194:	4604      	mov	r4, r0
 8002196:	b108      	cbz	r0, 800219c <SD_disk_ioctl+0x74>
	res = RES_ERROR;
 8002198:	462c      	mov	r4, r5
 800219a:	e071      	b.n	8002280 <SD_disk_ioctl+0x158>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800219c:	2110      	movs	r1, #16
 800219e:	4668      	mov	r0, sp
 80021a0:	f7ff fdf2 	bl	8001d88 <SD_RxDataBlock>
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d072      	beq.n	800228e <SD_disk_ioctl+0x166>
			{
				if ((csd[0] >> 6) == 1)
 80021a8:	f89d 3000 	ldrb.w	r3, [sp]
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d01f      	beq.n	80021f2 <SD_disk_ioctl+0xca>
					*(DWORD*) buff = (DWORD) csize << 10;
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80021b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80021b6:	f002 020f 	and.w	r2, r2, #15
 80021ba:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80021be:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 80021c2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	f003 0306 	and.w	r3, r3, #6
 80021cc:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80021ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80021d2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80021dc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80021e0:	0289      	lsls	r1, r1, #10
 80021e2:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80021e6:	440b      	add	r3, r1
 80021e8:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80021ea:	3a07      	subs	r2, #7
 80021ec:	4093      	lsls	r3, r2
 80021ee:	6033      	str	r3, [r6, #0]
 80021f0:	e046      	b.n	8002280 <SD_disk_ioctl+0x158>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80021f2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80021f6:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80021fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3301      	adds	r3, #1
 8002202:	b29b      	uxth	r3, r3
					*(DWORD*) buff = (DWORD) csize << 10;
 8002204:	029b      	lsls	r3, r3, #10
 8002206:	6033      	str	r3, [r6, #0]
 8002208:	e03a      	b.n	8002280 <SD_disk_ioctl+0x158>
				}
				res = RES_OK;
			}
			break;
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800220a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220e:	8033      	strh	r3, [r6, #0]
			res = RES_OK;
			break;
 8002210:	e036      	b.n	8002280 <SD_disk_ioctl+0x158>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002212:	f7ff fd6d 	bl	8001cf0 <SD_ReadyWait>
 8002216:	28ff      	cmp	r0, #255	; 0xff
 8002218:	d03b      	beq.n	8002292 <SD_disk_ioctl+0x16a>
	res = RES_ERROR;
 800221a:	2401      	movs	r4, #1
 800221c:	e030      	b.n	8002280 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800221e:	2100      	movs	r1, #0
 8002220:	2049      	movs	r0, #73	; 0x49
 8002222:	f7ff fd76 	bl	8001d12 <SD_SendCmd>
 8002226:	4604      	mov	r4, r0
 8002228:	b108      	cbz	r0, 800222e <SD_disk_ioctl+0x106>
	res = RES_ERROR;
 800222a:	2401      	movs	r4, #1
 800222c:	e028      	b.n	8002280 <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800222e:	2110      	movs	r1, #16
 8002230:	4630      	mov	r0, r6
 8002232:	f7ff fda9 	bl	8001d88 <SD_RxDataBlock>
 8002236:	bb18      	cbnz	r0, 8002280 <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 8002238:	2401      	movs	r4, #1
 800223a:	e021      	b.n	8002280 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800223c:	2100      	movs	r1, #0
 800223e:	204a      	movs	r0, #74	; 0x4a
 8002240:	f7ff fd67 	bl	8001d12 <SD_SendCmd>
 8002244:	4604      	mov	r4, r0
 8002246:	b108      	cbz	r0, 800224c <SD_disk_ioctl+0x124>
	res = RES_ERROR;
 8002248:	2401      	movs	r4, #1
 800224a:	e019      	b.n	8002280 <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800224c:	2110      	movs	r1, #16
 800224e:	4630      	mov	r0, r6
 8002250:	f7ff fd9a 	bl	8001d88 <SD_RxDataBlock>
 8002254:	b9a0      	cbnz	r0, 8002280 <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 8002256:	2401      	movs	r4, #1
 8002258:	e012      	b.n	8002280 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800225a:	2100      	movs	r1, #0
 800225c:	207a      	movs	r0, #122	; 0x7a
 800225e:	f7ff fd58 	bl	8001d12 <SD_SendCmd>
 8002262:	4604      	mov	r4, r0
 8002264:	b138      	cbz	r0, 8002276 <SD_disk_ioctl+0x14e>
					*ptr++ = SPI_RxByte();
				}
				res = RES_OK;
			}
		default:
			res = RES_PARERR;
 8002266:	2404      	movs	r4, #4
 8002268:	e00a      	b.n	8002280 <SD_disk_ioctl+0x158>
					*ptr++ = SPI_RxByte();
 800226a:	f7ff fcef 	bl	8001c4c <SPI_RxByte>
 800226e:	f806 0b01 	strb.w	r0, [r6], #1
				for (n = 0; n < 4; n++)
 8002272:	3401      	adds	r4, #1
 8002274:	b2e4      	uxtb	r4, r4
 8002276:	2c03      	cmp	r4, #3
 8002278:	d9f7      	bls.n	800226a <SD_disk_ioctl+0x142>
			res = RES_PARERR;
 800227a:	2404      	movs	r4, #4
 800227c:	e000      	b.n	8002280 <SD_disk_ioctl+0x158>
		SELECT();
 800227e:	2404      	movs	r4, #4
		}

		DESELECT();
 8002280:	f7ff fcd8 	bl	8001c34 <DESELECT>
		SPI_RxByte();
 8002284:	f7ff fce2 	bl	8001c4c <SPI_RxByte>
	}

	return res;
}
 8002288:	4620      	mov	r0, r4
 800228a:	b005      	add	sp, #20
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = RES_ERROR;
 800228e:	462c      	mov	r4, r5
 8002290:	e7f6      	b.n	8002280 <SD_disk_ioctl+0x158>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002292:	462c      	mov	r4, r5
 8002294:	e7f4      	b.n	8002280 <SD_disk_ioctl+0x158>
	if (drv) return RES_PARERR;
 8002296:	2404      	movs	r4, #4
 8002298:	e7f6      	b.n	8002288 <SD_disk_ioctl+0x160>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800229a:	2403      	movs	r4, #3
 800229c:	e7f4      	b.n	8002288 <SD_disk_ioctl+0x160>
 800229e:	bf00      	nop
 80022a0:	20000004 	.word	0x20000004

080022a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	2400      	movs	r4, #0
 80022aa:	9403      	str	r4, [sp, #12]
 80022ac:	9404      	str	r4, [sp, #16]
 80022ae:	9405      	str	r4, [sp, #20]
 80022b0:	9406      	str	r4, [sp, #24]
 80022b2:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	9401      	str	r4, [sp, #4]
 80022b6:	4b39      	ldr	r3, [pc, #228]	; (800239c <MX_GPIO_Init+0xf8>)
 80022b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
 80022c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c2:	f002 0201 	and.w	r2, r2, #1
 80022c6:	9201      	str	r2, [sp, #4]
 80022c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	9402      	str	r4, [sp, #8]
 80022cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ce:	f042 0202 	orr.w	r2, r2, #2
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROPE_CUT_EN_Pin|SD_CS_Pin|USER_LED1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80022de:	4f30      	ldr	r7, [pc, #192]	; (80023a0 <MX_GPIO_Init+0xfc>)
 80022e0:	4622      	mov	r2, r4
 80022e2:	f248 1112 	movw	r1, #33042	; 0x8112
 80022e6:	4638      	mov	r0, r7
 80022e8:	f002 fa51 	bl	800478e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAM2_OK_Pin|CAM1_OK_Pin, GPIO_PIN_SET);
 80022ec:	4e2d      	ldr	r6, [pc, #180]	; (80023a4 <MX_GPIO_Init+0x100>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	2106      	movs	r1, #6
 80022f2:	4630      	mov	r0, r6
 80022f4:	f002 fa4b 	bl	800478e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED3_Pin|USER_LED5_Pin|USER_LED2_Pin|USER_LED4_Pin
 80022f8:	4622      	mov	r2, r4
 80022fa:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 80022fe:	4630      	mov	r0, r6
 8002300:	f002 fa45 	bl	800478e <HAL_GPIO_WritePin>
                          |CAM2_ON_Pin|CAM1_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUS_SEL_1_Pin|BUS_SEL_2_Pin, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800230a:	4638      	mov	r0, r7
 800230c:	f002 fa3f 	bl	800478e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROPE_CUT_EN_Pin SD_CS_Pin USER_LED1_Pin BUS_SEL_1_Pin
                           BUS_SEL_2_Pin */
  GPIO_InitStruct.Pin = ROPE_CUT_EN_Pin|SD_CS_Pin|USER_LED1_Pin|BUS_SEL_1_Pin
 8002310:	f641 1312 	movw	r3, #6418	; 0x1912
 8002314:	9303      	str	r3, [sp, #12]
                          |BUS_SEL_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002316:	2501      	movs	r5, #1
 8002318:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	a903      	add	r1, sp, #12
 8002320:	4638      	mov	r0, r7
 8002322:	f002 f955 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM2_OK_Pin CAM1_OK_Pin */
  GPIO_InitStruct.Pin = CAM2_OK_Pin|CAM1_OK_Pin;
 8002326:	2306      	movs	r3, #6
 8002328:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800232a:	2311      	movs	r3, #17
 800232c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	a903      	add	r1, sp, #12
 8002334:	4630      	mov	r0, r6
 8002336:	f002 f94b 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED3_Pin USER_LED5_Pin USER_LED2_Pin USER_LED4_Pin
                           CAM2_ON_Pin CAM1_ON_Pin */
  GPIO_InitStruct.Pin = USER_LED3_Pin|USER_LED5_Pin|USER_LED2_Pin|USER_LED4_Pin
 800233a:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 800233e:	9303      	str	r3, [sp, #12]
                          |CAM2_ON_Pin|CAM1_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	a903      	add	r1, sp, #12
 8002348:	4630      	mov	r0, r6
 800234a:	f002 f941 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800234e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002352:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002356:	2302      	movs	r3, #2
 8002358:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800235c:	a903      	add	r1, sp, #12
 800235e:	4638      	mov	r0, r7
 8002360:	f002 f936 	bl	80045d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM2_START_Pin CAM1_START_Pin */
  GPIO_InitStruct.Pin = CAM2_START_Pin|CAM1_START_Pin;
 8002364:	2330      	movs	r3, #48	; 0x30
 8002366:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002368:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800236c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	a903      	add	r1, sp, #12
 8002372:	4630      	mov	r0, r6
 8002374:	f002 f92c 	bl	80045d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8002378:	4622      	mov	r2, r4
 800237a:	4629      	mov	r1, r5
 800237c:	200a      	movs	r0, #10
 800237e:	f002 f871 	bl	8004464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002382:	200a      	movs	r0, #10
 8002384:	f002 f8a2 	bl	80044cc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002388:	4622      	mov	r2, r4
 800238a:	4629      	mov	r1, r5
 800238c:	2017      	movs	r0, #23
 800238e:	f002 f869 	bl	8004464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002392:	2017      	movs	r0, #23
 8002394:	f002 f89a 	bl	80044cc <HAL_NVIC_EnableIRQ>

}
 8002398:	b009      	add	sp, #36	; 0x24
 800239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400

080023a8 <Get_System_Status>:
	if(Is_asleep == 1)
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <Get_System_Status+0x5c>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
	if(Sensors.BME280_Internal.Status == HAL_OK)
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <Get_System_Status+0x60>)
 80023ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023b2:	b1fb      	cbz	r3, 80023f4 <Get_System_Status+0x4c>
 80023b4:	2000      	movs	r0, #0
	if(Sensors.BME280_External.Status == HAL_OK)
 80023b6:	4b14      	ldr	r3, [pc, #80]	; (8002408 <Get_System_Status+0x60>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	b90b      	cbnz	r3, 80023c0 <Get_System_Status+0x18>
		status |= 1 << 5;
 80023bc:	f040 0020 	orr.w	r0, r0, #32
	if(Sensors.MPU650.Status == HAL_OK)
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <Get_System_Status+0x60>)
 80023c2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80023c6:	b90b      	cbnz	r3, 80023cc <Get_System_Status+0x24>
		status |= 1 << 4;
 80023c8:	f040 0010 	orr.w	r0, r0, #16
	if(Sensors.SI1145.Status == HAL_OK)
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <Get_System_Status+0x60>)
 80023ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80023d2:	b90b      	cbnz	r3, 80023d8 <Get_System_Status+0x30>
		status |= 1 << 3;
 80023d4:	f040 0008 	orr.w	r0, r0, #8
	if(sd_status == FR_OK)
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <Get_System_Status+0x64>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b90b      	cbnz	r3, 80023e2 <Get_System_Status+0x3a>
		status |= 1 << 2;
 80023de:	f040 0004 	orr.w	r0, r0, #4
	if(CAM_1.REC_STATUS == CAM_REC)
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <Get_System_Status+0x68>)
 80023e4:	7f1b      	ldrb	r3, [r3, #28]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d006      	beq.n	80023f8 <Get_System_Status+0x50>
	if(CAM_2.REC_STATUS == CAM_REC)
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <Get_System_Status+0x6c>)
 80023ec:	7f1b      	ldrb	r3, [r3, #28]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <Get_System_Status+0x56>
}
 80023f2:	4770      	bx	lr
		status |= 1 << 6;
 80023f4:	2040      	movs	r0, #64	; 0x40
 80023f6:	e7de      	b.n	80023b6 <Get_System_Status+0xe>
		status |= 1 << 1;
 80023f8:	f040 0002 	orr.w	r0, r0, #2
 80023fc:	e7f5      	b.n	80023ea <Get_System_Status+0x42>
		status |= 1;
 80023fe:	f040 0001 	orr.w	r0, r0, #1
 8002402:	e7f6      	b.n	80023f2 <Get_System_Status+0x4a>
 8002404:	200008cc 	.word	0x200008cc
 8002408:	200008d0 	.word	0x200008d0
 800240c:	20000820 	.word	0x20000820
 8002410:	2000088c 	.word	0x2000088c
 8002414:	20000788 	.word	0x20000788

08002418 <I2C_Select_bus>:
{
 8002418:	b510      	push	{r4, lr}
	switch(select)
 800241a:	b178      	cbz	r0, 800243c <I2C_Select_bus+0x24>
 800241c:	2801      	cmp	r0, #1
 800241e:	d01b      	beq.n	8002458 <I2C_Select_bus+0x40>
		HAL_GPIO_WritePin(BUS_SEL_1_GPIO_Port, BUS_SEL_1_Pin, GPIO_PIN_SET);
 8002420:	4c14      	ldr	r4, [pc, #80]	; (8002474 <I2C_Select_bus+0x5c>)
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002428:	4620      	mov	r0, r4
 800242a:	f002 f9b0 	bl	800478e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUS_SEL_2_GPIO_Port, BUS_SEL_2_Pin, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002434:	4620      	mov	r0, r4
 8002436:	f002 f9aa 	bl	800478e <HAL_GPIO_WritePin>
}
 800243a:	e00c      	b.n	8002456 <I2C_Select_bus+0x3e>
		HAL_GPIO_WritePin(BUS_SEL_1_GPIO_Port, BUS_SEL_1_Pin, GPIO_PIN_SET);
 800243c:	4c0d      	ldr	r4, [pc, #52]	; (8002474 <I2C_Select_bus+0x5c>)
 800243e:	2201      	movs	r2, #1
 8002440:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002444:	4620      	mov	r0, r4
 8002446:	f002 f9a2 	bl	800478e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUS_SEL_2_GPIO_Port, BUS_SEL_2_Pin, GPIO_PIN_RESET);
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002450:	4620      	mov	r0, r4
 8002452:	f002 f99c 	bl	800478e <HAL_GPIO_WritePin>
}
 8002456:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(BUS_SEL_2_GPIO_Port, BUS_SEL_2_Pin, GPIO_PIN_SET);
 8002458:	4c06      	ldr	r4, [pc, #24]	; (8002474 <I2C_Select_bus+0x5c>)
 800245a:	2201      	movs	r2, #1
 800245c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002460:	4620      	mov	r0, r4
 8002462:	f002 f994 	bl	800478e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUS_SEL_1_GPIO_Port, BUS_SEL_1_Pin, GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800246c:	4620      	mov	r0, r4
 800246e:	f002 f98e 	bl	800478e <HAL_GPIO_WritePin>
		break;
 8002472:	e7f0      	b.n	8002456 <I2C_Select_bus+0x3e>
 8002474:	40020000 	.word	0x40020000

08002478 <Get_BME280_in_all_readings>:
{
 8002478:	b530      	push	{r4, r5, lr}
 800247a:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 800247c:	2000      	movs	r0, #0
 800247e:	f7ff ffcb 	bl	8002418 <I2C_Select_bus>
	Sensors.BME280_Internal.Status = BME280_Get_ID(I2C_handle_BME_in__MPU, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 8002482:	4c20      	ldr	r4, [pc, #128]	; (8002504 <Get_BME280_in_all_readings+0x8c>)
 8002484:	2314      	movs	r3, #20
 8002486:	9312      	str	r3, [sp, #72]	; 0x48
 8002488:	4d1f      	ldr	r5, [pc, #124]	; (8002508 <Get_BME280_in_all_readings+0x90>)
 800248a:	9511      	str	r5, [sp, #68]	; 0x44
 800248c:	2244      	movs	r2, #68	; 0x44
 800248e:	f104 0110 	add.w	r1, r4, #16
 8002492:	4668      	mov	r0, sp
 8002494:	f006 fa5e 	bl	8008954 <memcpy>
 8002498:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800249c:	f7fe fd78 	bl	8000f90 <BME280_Get_ID>
 80024a0:	f805 0c01 	strb.w	r0, [r5, #-1]
	if(Sensors.BME280_Internal.Status != HAL_OK)
 80024a4:	b108      	cbz	r0, 80024aa <Get_BME280_in_all_readings+0x32>
}
 80024a6:	b015      	add	sp, #84	; 0x54
 80024a8:	bd30      	pop	{r4, r5, pc}
	Sensors.BME280_Internal.Status = BME280_Get_All(I2C_handle_BME_in__MPU, I2C_long_timeout);
 80024aa:	23c8      	movs	r3, #200	; 0xc8
 80024ac:	9311      	str	r3, [sp, #68]	; 0x44
 80024ae:	2244      	movs	r2, #68	; 0x44
 80024b0:	f104 0110 	add.w	r1, r4, #16
 80024b4:	4668      	mov	r0, sp
 80024b6:	f006 fa4d 	bl	8008954 <memcpy>
 80024ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024be:	f7fe fe19 	bl	80010f4 <BME280_Get_All>
 80024c2:	f1a5 0331 	sub.w	r3, r5, #49	; 0x31
 80024c6:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	if(Sensors.BME280_Internal.Status != HAL_OK)
 80024ca:	2800      	cmp	r0, #0
 80024cc:	d1eb      	bne.n	80024a6 <Get_BME280_in_all_readings+0x2e>
	Sensors.BME280_Internal.Temperature = BME280_T_Double(&BME280_internal_Calib_Data);
 80024ce:	4d0f      	ldr	r5, [pc, #60]	; (800250c <Get_BME280_in_all_readings+0x94>)
 80024d0:	4628      	mov	r0, r5
 80024d2:	f7fe fe5d 	bl	8001190 <BME280_T_Double>
 80024d6:	4c0e      	ldr	r4, [pc, #56]	; (8002510 <Get_BME280_in_all_readings+0x98>)
 80024d8:	ed84 0b0e 	vstr	d0, [r4, #56]	; 0x38
	Sensors.BME280_Internal.Pressure = BME280_P_Double(&BME280_internal_Calib_Data);
 80024dc:	4628      	mov	r0, r5
 80024de:	f7fe fecb 	bl	8001278 <BME280_P_Double>
 80024e2:	ed84 0b10 	vstr	d0, [r4, #64]	; 0x40
	Sensors.BME280_Internal.Humidity = BME280_H_Double(&BME280_internal_Calib_Data);
 80024e6:	4628      	mov	r0, r5
 80024e8:	f7fe ffe6 	bl	80014b8 <BME280_H_Double>
 80024ec:	ed84 0b14 	vstr	d0, [r4, #80]	; 0x50
	Sensors.BME280_Internal.Altitude = BME280_Altitude_Double(Sensors.BME280_Internal.Pressure, Sensors.BME280_Internal.Pressure_ref);
 80024f0:	ed94 1b12 	vldr	d1, [r4, #72]	; 0x48
 80024f4:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 80024f8:	f7ff f8aa 	bl	8001650 <BME280_Altitude_Double>
 80024fc:	ed84 0b16 	vstr	d0, [r4, #88]	; 0x58
 8002500:	e7d1      	b.n	80024a6 <Get_BME280_in_all_readings+0x2e>
 8002502:	bf00      	nop
 8002504:	20000620 	.word	0x20000620
 8002508:	20000901 	.word	0x20000901
 800250c:	200002a4 	.word	0x200002a4
 8002510:	200008d0 	.word	0x200008d0

08002514 <Get_BME280_ex_all_readings>:
{
 8002514:	b530      	push	{r4, r5, lr}
 8002516:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff ff7d 	bl	8002418 <I2C_Select_bus>
	Sensors.BME280_External.Status = BME280_Get_ID(I2C_handle_BME_ex__SI, &Sensors.BME280_External.ID, I2C_short_timeout);
 800251e:	4c1f      	ldr	r4, [pc, #124]	; (800259c <Get_BME280_ex_all_readings+0x88>)
 8002520:	2314      	movs	r3, #20
 8002522:	9312      	str	r3, [sp, #72]	; 0x48
 8002524:	4d1e      	ldr	r5, [pc, #120]	; (80025a0 <Get_BME280_ex_all_readings+0x8c>)
 8002526:	9511      	str	r5, [sp, #68]	; 0x44
 8002528:	2244      	movs	r2, #68	; 0x44
 800252a:	f104 0110 	add.w	r1, r4, #16
 800252e:	4668      	mov	r0, sp
 8002530:	f006 fa10 	bl	8008954 <memcpy>
 8002534:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002538:	f7fe fd2a 	bl	8000f90 <BME280_Get_ID>
 800253c:	f805 0c01 	strb.w	r0, [r5, #-1]
	if(Sensors.BME280_External.Status != HAL_OK)
 8002540:	b108      	cbz	r0, 8002546 <Get_BME280_ex_all_readings+0x32>
}
 8002542:	b015      	add	sp, #84	; 0x54
 8002544:	bd30      	pop	{r4, r5, pc}
	Sensors.BME280_External.Status = BME280_Get_All(I2C_handle_BME_ex__SI, I2C_long_timeout);
 8002546:	23c8      	movs	r3, #200	; 0xc8
 8002548:	9311      	str	r3, [sp, #68]	; 0x44
 800254a:	2244      	movs	r2, #68	; 0x44
 800254c:	f104 0110 	add.w	r1, r4, #16
 8002550:	4668      	mov	r0, sp
 8002552:	f006 f9ff 	bl	8008954 <memcpy>
 8002556:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800255a:	f7fe fdcb 	bl	80010f4 <BME280_Get_All>
 800255e:	1e6b      	subs	r3, r5, #1
 8002560:	7018      	strb	r0, [r3, #0]
	if(Sensors.BME280_External.Status != HAL_OK)
 8002562:	2800      	cmp	r0, #0
 8002564:	d1ed      	bne.n	8002542 <Get_BME280_ex_all_readings+0x2e>
	Sensors.BME280_External.Temperature = BME280_T_Double(&BME280_external_Calib_Data);
 8002566:	4d0f      	ldr	r5, [pc, #60]	; (80025a4 <Get_BME280_ex_all_readings+0x90>)
 8002568:	4628      	mov	r0, r5
 800256a:	f7fe fe11 	bl	8001190 <BME280_T_Double>
 800256e:	4c0e      	ldr	r4, [pc, #56]	; (80025a8 <Get_BME280_ex_all_readings+0x94>)
 8002570:	ed84 0b02 	vstr	d0, [r4, #8]
	Sensors.BME280_External.Pressure = BME280_P_Double(&BME280_external_Calib_Data);
 8002574:	4628      	mov	r0, r5
 8002576:	f7fe fe7f 	bl	8001278 <BME280_P_Double>
 800257a:	ed84 0b04 	vstr	d0, [r4, #16]
	Sensors.BME280_External.Humidity = BME280_H_Double(&BME280_external_Calib_Data);
 800257e:	4628      	mov	r0, r5
 8002580:	f7fe ff9a 	bl	80014b8 <BME280_H_Double>
 8002584:	ed84 0b08 	vstr	d0, [r4, #32]
	Sensors.BME280_External.Altitude = BME280_Altitude_Double(Sensors.BME280_External.Pressure, Sensors.BME280_External.Pressure_ref);
 8002588:	ed94 1b06 	vldr	d1, [r4, #24]
 800258c:	ed94 0b04 	vldr	d0, [r4, #16]
 8002590:	f7ff f85e 	bl	8001650 <BME280_Altitude_Double>
 8002594:	ed84 0b0a 	vstr	d0, [r4, #40]	; 0x28
 8002598:	e7d3      	b.n	8002542 <Get_BME280_ex_all_readings+0x2e>
 800259a:	bf00      	nop
 800259c:	20000584 	.word	0x20000584
 80025a0:	200008d1 	.word	0x200008d1
 80025a4:	20000280 	.word	0x20000280
 80025a8:	200008d0 	.word	0x200008d0

080025ac <Get_MPU6050_all_readings>:
{
 80025ac:	b530      	push	{r4, r5, lr}
 80025ae:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7ff ff31 	bl	8002418 <I2C_Select_bus>
	Sensors.MPU650.Status = MPU6050_read_ID(I2C_handle_BME_in__MPU, &Sensors.MPU650.ID, I2C_short_timeout);
 80025b6:	4c19      	ldr	r4, [pc, #100]	; (800261c <Get_MPU6050_all_readings+0x70>)
 80025b8:	2314      	movs	r3, #20
 80025ba:	9312      	str	r3, [sp, #72]	; 0x48
 80025bc:	4d18      	ldr	r5, [pc, #96]	; (8002620 <Get_MPU6050_all_readings+0x74>)
 80025be:	9511      	str	r5, [sp, #68]	; 0x44
 80025c0:	2244      	movs	r2, #68	; 0x44
 80025c2:	f104 0110 	add.w	r1, r4, #16
 80025c6:	4668      	mov	r0, sp
 80025c8:	f006 f9c4 	bl	8008954 <memcpy>
 80025cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025d0:	f7ff f8d3 	bl	800177a <MPU6050_read_ID>
 80025d4:	f805 0c01 	strb.w	r0, [r5, #-1]
	if(Sensors.MPU650.Status != HAL_OK)
 80025d8:	b108      	cbz	r0, 80025de <Get_MPU6050_all_readings+0x32>
}
 80025da:	b015      	add	sp, #84	; 0x54
 80025dc:	bd30      	pop	{r4, r5, pc}
	Sensors.MPU650.Status = MPU6050_read_All(I2C_handle_BME_in__MPU, I2C_long_timeout);
 80025de:	23c8      	movs	r3, #200	; 0xc8
 80025e0:	9311      	str	r3, [sp, #68]	; 0x44
 80025e2:	2244      	movs	r2, #68	; 0x44
 80025e4:	f104 0110 	add.w	r1, r4, #16
 80025e8:	4668      	mov	r0, sp
 80025ea:	f006 f9b3 	bl	8008954 <memcpy>
 80025ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025f2:	f7ff f8db 	bl	80017ac <MPU6050_read_All>
 80025f6:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80025fa:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
	if(Sensors.MPU650.Status != HAL_OK)
 80025fe:	2800      	cmp	r0, #0
 8002600:	d1eb      	bne.n	80025da <Get_MPU6050_all_readings+0x2e>
	MPU6050_Accel_double(&Sensors.MPU650);
 8002602:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002606:	4620      	mov	r0, r4
 8002608:	f7ff f924 	bl	8001854 <MPU6050_Accel_double>
	MPU6050_Gyro_double(&Sensors.MPU650);
 800260c:	4620      	mov	r0, r4
 800260e:	f7ff f963 	bl	80018d8 <MPU6050_Gyro_double>
	MPU6050_Temp_double(&Sensors.MPU650);
 8002612:	4620      	mov	r0, r4
 8002614:	f7ff f944 	bl	80018a0 <MPU6050_Temp_double>
 8002618:	e7df      	b.n	80025da <Get_MPU6050_all_readings+0x2e>
 800261a:	bf00      	nop
 800261c:	20000620 	.word	0x20000620
 8002620:	20000931 	.word	0x20000931

08002624 <Get_SI1145_all_readings>:
{
 8002624:	b530      	push	{r4, r5, lr}
 8002626:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 8002628:	2001      	movs	r0, #1
 800262a:	f7ff fef5 	bl	8002418 <I2C_Select_bus>
	Sensors.SI1145.Status = SI1145_read_ID(I2C_handle_BME_ex__SI, &Sensors.SI1145.ID, I2C_short_timeout);
 800262e:	4c1a      	ldr	r4, [pc, #104]	; (8002698 <Get_SI1145_all_readings+0x74>)
 8002630:	2314      	movs	r3, #20
 8002632:	9312      	str	r3, [sp, #72]	; 0x48
 8002634:	4d19      	ldr	r5, [pc, #100]	; (800269c <Get_SI1145_all_readings+0x78>)
 8002636:	9511      	str	r5, [sp, #68]	; 0x44
 8002638:	2244      	movs	r2, #68	; 0x44
 800263a:	f104 0110 	add.w	r1, r4, #16
 800263e:	4668      	mov	r0, sp
 8002640:	f006 f988 	bl	8008954 <memcpy>
 8002644:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002648:	f7ff fa50 	bl	8001aec <SI1145_read_ID>
 800264c:	f805 0c01 	strb.w	r0, [r5, #-1]
	if(Sensors.SI1145.Status != HAL_OK)
 8002650:	b108      	cbz	r0, 8002656 <Get_SI1145_all_readings+0x32>
}
 8002652:	b015      	add	sp, #84	; 0x54
 8002654:	bd30      	pop	{r4, r5, pc}
	Sensors.SI1145.Status = SI1145_Read_Data(I2C_handle_BME_ex__SI, I2C_long_timeout);
 8002656:	23c8      	movs	r3, #200	; 0xc8
 8002658:	9311      	str	r3, [sp, #68]	; 0x44
 800265a:	2244      	movs	r2, #68	; 0x44
 800265c:	f104 0110 	add.w	r1, r4, #16
 8002660:	4668      	mov	r0, sp
 8002662:	f006 f977 	bl	8008954 <memcpy>
 8002666:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800266a:	f7ff fa57 	bl	8001b1c <SI1145_Read_Data>
 800266e:	f1a5 03a1 	sub.w	r3, r5, #161	; 0xa1
 8002672:	f883 00a0 	strb.w	r0, [r3, #160]	; 0xa0
	if(Sensors.SI1145.Status != HAL_OK)
 8002676:	2800      	cmp	r0, #0
 8002678:	d1eb      	bne.n	8002652 <Get_SI1145_all_readings+0x2e>
	Sensors.SI1145.VIS = SI1145_VIS_raw();
 800267a:	f7ff fa87 	bl	8001b8c <SI1145_VIS_raw>
 800267e:	f1a5 04a1 	sub.w	r4, r5, #161	; 0xa1
 8002682:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
	Sensors.SI1145.IR = SI1145_IR_raw();
 8002686:	f7ff fa7b 	bl	8001b80 <SI1145_IR_raw>
 800268a:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
	Sensors.SI1145.UV = SI1145_UV_double();
 800268e:	f7ff fa83 	bl	8001b98 <SI1145_UV_double>
 8002692:	ed84 0b2a 	vstr	d0, [r4, #168]	; 0xa8
 8002696:	e7dc      	b.n	8002652 <Get_SI1145_all_readings+0x2e>
 8002698:	20000584 	.word	0x20000584
 800269c:	20000971 	.word	0x20000971

080026a0 <Mount_open_SD_Card>:
{
 80026a0:	b510      	push	{r4, lr}
	sd_mounting_status = f_mount(&fs, "", 1);
 80026a2:	2201      	movs	r2, #1
 80026a4:	4932      	ldr	r1, [pc, #200]	; (8002770 <Mount_open_SD_Card+0xd0>)
 80026a6:	4833      	ldr	r0, [pc, #204]	; (8002774 <Mount_open_SD_Card+0xd4>)
 80026a8:	f005 fc92 	bl	8007fd0 <f_mount>
	if(sd_mounting_status != FR_OK)
 80026ac:	4603      	mov	r3, r0
 80026ae:	b108      	cbz	r0, 80026b4 <Mount_open_SD_Card+0x14>
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd10      	pop	{r4, pc}
	sd_mounting_status = f_open(&fil, "Data0.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80026b4:	2212      	movs	r2, #18
 80026b6:	4930      	ldr	r1, [pc, #192]	; (8002778 <Mount_open_SD_Card+0xd8>)
 80026b8:	4830      	ldr	r0, [pc, #192]	; (800277c <Mount_open_SD_Card+0xdc>)
 80026ba:	f005 fcb7 	bl	800802c <f_open>
	if(sd_mounting_status != FR_OK)
 80026be:	4603      	mov	r3, r0
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d1f5      	bne.n	80026b0 <Mount_open_SD_Card+0x10>
	sd_mounting_status = f_getfree("", &fre_clust, &pfs);
 80026c4:	4a2e      	ldr	r2, [pc, #184]	; (8002780 <Mount_open_SD_Card+0xe0>)
 80026c6:	492f      	ldr	r1, [pc, #188]	; (8002784 <Mount_open_SD_Card+0xe4>)
 80026c8:	4829      	ldr	r0, [pc, #164]	; (8002770 <Mount_open_SD_Card+0xd0>)
 80026ca:	f005 ff67 	bl	800859c <f_getfree>
	if(sd_mounting_status != FR_OK)
 80026ce:	4603      	mov	r3, r0
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d1ed      	bne.n	80026b0 <Mount_open_SD_Card+0x10>
	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80026d4:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <Mount_open_SD_Card+0xe0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6958      	ldr	r0, [r3, #20]
 80026da:	3802      	subs	r0, #2
 80026dc:	895c      	ldrh	r4, [r3, #10]
 80026de:	fb04 f000 	mul.w	r0, r4, r0
 80026e2:	f7fd ff17 	bl	8000514 <__aeabi_ui2d>
 80026e6:	2200      	movs	r2, #0
 80026e8:	4b27      	ldr	r3, [pc, #156]	; (8002788 <Mount_open_SD_Card+0xe8>)
 80026ea:	f7fd ff8d 	bl	8000608 <__aeabi_dmul>
 80026ee:	f7fe fa63 	bl	8000bb8 <__aeabi_d2uiz>
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <Mount_open_SD_Card+0xec>)
 80026f4:	6018      	str	r0, [r3, #0]
	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80026f6:	4b23      	ldr	r3, [pc, #140]	; (8002784 <Mount_open_SD_Card+0xe4>)
 80026f8:	6818      	ldr	r0, [r3, #0]
 80026fa:	fb00 f004 	mul.w	r0, r0, r4
 80026fe:	f7fd ff09 	bl	8000514 <__aeabi_ui2d>
 8002702:	2200      	movs	r2, #0
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <Mount_open_SD_Card+0xe8>)
 8002706:	f7fd ff7f 	bl	8000608 <__aeabi_dmul>
 800270a:	f7fe fa55 	bl	8000bb8 <__aeabi_d2uiz>
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <Mount_open_SD_Card+0xf0>)
 8002710:	6018      	str	r0, [r3, #0]
	if(freeSpace < 1)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	b34b      	cbz	r3, 800276a <Mount_open_SD_Card+0xca>
	f_printf(&fil, "STM32 SD Card data logger\n");
 8002716:	4c19      	ldr	r4, [pc, #100]	; (800277c <Mount_open_SD_Card+0xdc>)
 8002718:	491e      	ldr	r1, [pc, #120]	; (8002794 <Mount_open_SD_Card+0xf4>)
 800271a:	4620      	mov	r0, r4
 800271c:	f005 ffac 	bl	8008678 <f_printf>
	f_printf(&fil, "RTC time and sensor readings (SI VIS and SI IR are raw values)\n");
 8002720:	491d      	ldr	r1, [pc, #116]	; (8002798 <Mount_open_SD_Card+0xf8>)
 8002722:	4620      	mov	r0, r4
 8002724:	f005 ffa8 	bl	8008678 <f_printf>
	f_printf(&fil, "SD-CARD-MEMORY = %d \n SD-CARD-FREE-MEMORY = %d\n", totalSpace, freeSpace);
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <Mount_open_SD_Card+0xec>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b18      	ldr	r3, [pc, #96]	; (8002790 <Mount_open_SD_Card+0xf0>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	491a      	ldr	r1, [pc, #104]	; (800279c <Mount_open_SD_Card+0xfc>)
 8002732:	4620      	mov	r0, r4
 8002734:	f005 ffa0 	bl	8008678 <f_printf>
	f_printf(&fil, "| Dt | Hr | Mn | Sc |");
 8002738:	4919      	ldr	r1, [pc, #100]	; (80027a0 <Mount_open_SD_Card+0x100>)
 800273a:	4620      	mov	r0, r4
 800273c:	f005 ff9c 	bl	8008678 <f_printf>
	f_printf(&fil, " BME_in T | BME_in P | BME_in H | BME_in A |");
 8002740:	4918      	ldr	r1, [pc, #96]	; (80027a4 <Mount_open_SD_Card+0x104>)
 8002742:	4620      	mov	r0, r4
 8002744:	f005 ff98 	bl	8008678 <f_printf>
	f_printf(&fil, " BME_ex T | BME_ex P | BME_ex H | BME_in A |");
 8002748:	4917      	ldr	r1, [pc, #92]	; (80027a8 <Mount_open_SD_Card+0x108>)
 800274a:	4620      	mov	r0, r4
 800274c:	f005 ff94 	bl	8008678 <f_printf>
	f_printf(&fil, " MPU Acc_X | MPU Acc_Y | MPU Acc_Z | MPU Gyr_X | MPU Gyr_Y | MPU Gyr_Z | MPU Tmpr  |");
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <Mount_open_SD_Card+0x10c>)
 8002752:	4620      	mov	r0, r4
 8002754:	f005 ff90 	bl	8008678 <f_printf>
	f_printf(&fil, " SI VIS | SI IR  | SI UV  |\n");
 8002758:	4915      	ldr	r1, [pc, #84]	; (80027b0 <Mount_open_SD_Card+0x110>)
 800275a:	4620      	mov	r0, r4
 800275c:	f005 ff8c 	bl	8008678 <f_printf>
	sd_mounting_status = f_sync(&fil);
 8002760:	4620      	mov	r0, r4
 8002762:	f005 feba 	bl	80084da <f_sync>
 8002766:	4603      	mov	r3, r0
	return sd_mounting_status;
 8002768:	e7a2      	b.n	80026b0 <Mount_open_SD_Card+0x10>
		return sd_mounting_status;
 800276a:	23df      	movs	r3, #223	; 0xdf
 800276c:	e7a0      	b.n	80026b0 <Mount_open_SD_Card+0x10>
 800276e:	bf00      	nop
 8002770:	0800c7b4 	.word	0x0800c7b4
 8002774:	20000350 	.word	0x20000350
 8002778:	0800c630 	.word	0x0800c630
 800277c:	20000ae8 	.word	0x20000ae8
 8002780:	20000a40 	.word	0x20000a40
 8002784:	20000300 	.word	0x20000300
 8002788:	3fe00000 	.word	0x3fe00000
 800278c:	200006a8 	.word	0x200006a8
 8002790:	200009d4 	.word	0x200009d4
 8002794:	0800c63c 	.word	0x0800c63c
 8002798:	0800c658 	.word	0x0800c658
 800279c:	0800c698 	.word	0x0800c698
 80027a0:	0800c6c8 	.word	0x0800c6c8
 80027a4:	0800c6e0 	.word	0x0800c6e0
 80027a8:	0800c710 	.word	0x0800c710
 80027ac:	0800c740 	.word	0x0800c740
 80027b0:	0800c798 	.word	0x0800c798

080027b4 <CAM_ON>:
{
 80027b4:	b510      	push	{r4, lr}
 80027b6:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 0)
 80027b8:	8981      	ldrh	r1, [r0, #12]
 80027ba:	6880      	ldr	r0, [r0, #8]
 80027bc:	f001 ffe0 	bl	8004780 <HAL_GPIO_ReadPin>
 80027c0:	b110      	cbz	r0, 80027c8 <CAM_ON+0x14>
	CAM->Do_EXTI = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	77a3      	strb	r3, [r4, #30]
}
 80027c6:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CAM->ON_PORT, CAM->ON_PIN, GPIO_PIN_SET);
 80027c8:	2201      	movs	r2, #1
 80027ca:	88a1      	ldrh	r1, [r4, #4]
 80027cc:	6820      	ldr	r0, [r4, #0]
 80027ce:	f001 ffde 	bl	800478e <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80027d2:	2064      	movs	r0, #100	; 0x64
 80027d4:	f001 fe20 	bl	8004418 <HAL_Delay>
		HAL_GPIO_WritePin(CAM->ON_PORT, CAM->ON_PIN, GPIO_PIN_RESET);
 80027d8:	2200      	movs	r2, #0
 80027da:	88a1      	ldrh	r1, [r4, #4]
 80027dc:	6820      	ldr	r0, [r4, #0]
 80027de:	f001 ffd6 	bl	800478e <HAL_GPIO_WritePin>
		CAM->Startup_delay = CAM_STARTUP_TIME;
 80027e2:	2306      	movs	r3, #6
 80027e4:	77e3      	strb	r3, [r4, #31]
 80027e6:	e7ec      	b.n	80027c2 <CAM_ON+0xe>

080027e8 <CAM_START>:
{
 80027e8:	b510      	push	{r4, lr}
 80027ea:	4604      	mov	r4, r0
	if((CAM->REC_STATUS == CAM_NREC) && (HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 1) && (CAM->Startup_delay == 0))
 80027ec:	7f03      	ldrb	r3, [r0, #28]
 80027ee:	b13b      	cbz	r3, 8002800 <CAM_START+0x18>
	if(HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 0)
 80027f0:	89a1      	ldrh	r1, [r4, #12]
 80027f2:	68a0      	ldr	r0, [r4, #8]
 80027f4:	f001 ffc4 	bl	8004780 <HAL_GPIO_ReadPin>
 80027f8:	b1c8      	cbz	r0, 800282e <CAM_START+0x46>
	CAM->Do_Restart = 1;
 80027fa:	2301      	movs	r3, #1
 80027fc:	7763      	strb	r3, [r4, #29]
}
 80027fe:	bd10      	pop	{r4, pc}
	if((CAM->REC_STATUS == CAM_NREC) && (HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 1) && (CAM->Startup_delay == 0))
 8002800:	8981      	ldrh	r1, [r0, #12]
 8002802:	6880      	ldr	r0, [r0, #8]
 8002804:	f001 ffbc 	bl	8004780 <HAL_GPIO_ReadPin>
 8002808:	2801      	cmp	r0, #1
 800280a:	d1f1      	bne.n	80027f0 <CAM_START+0x8>
 800280c:	7fe3      	ldrb	r3, [r4, #31]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ee      	bne.n	80027f0 <CAM_START+0x8>
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	89a1      	ldrh	r1, [r4, #12]
 8002816:	68a0      	ldr	r0, [r4, #8]
 8002818:	f001 ffb9 	bl	800478e <HAL_GPIO_WritePin>
		HAL_Delay(30);
 800281c:	201e      	movs	r0, #30
 800281e:	f001 fdfb 	bl	8004418 <HAL_Delay>
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_SET);
 8002822:	2201      	movs	r2, #1
 8002824:	89a1      	ldrh	r1, [r4, #12]
 8002826:	68a0      	ldr	r0, [r4, #8]
 8002828:	f001 ffb1 	bl	800478e <HAL_GPIO_WritePin>
 800282c:	e7e0      	b.n	80027f0 <CAM_START+0x8>
		CAM_ON(CAM);
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff ffc0 	bl	80027b4 <CAM_ON>
 8002834:	e7e1      	b.n	80027fa <CAM_START+0x12>

08002836 <CAM_STOP>:
{
 8002836:	b510      	push	{r4, lr}
 8002838:	4604      	mov	r4, r0
	if(CAM->REC_STATUS == CAM_REC)
 800283a:	7f03      	ldrb	r3, [r0, #28]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d002      	beq.n	8002846 <CAM_STOP+0x10>
	CAM->Do_Restart = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	7763      	strb	r3, [r4, #29]
}
 8002844:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	8981      	ldrh	r1, [r0, #12]
 800284a:	6880      	ldr	r0, [r0, #8]
 800284c:	f001 ff9f 	bl	800478e <HAL_GPIO_WritePin>
		HAL_Delay(30);
 8002850:	201e      	movs	r0, #30
 8002852:	f001 fde1 	bl	8004418 <HAL_Delay>
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_SET);
 8002856:	2201      	movs	r2, #1
 8002858:	89a1      	ldrh	r1, [r4, #12]
 800285a:	68a0      	ldr	r0, [r4, #8]
 800285c:	f001 ff97 	bl	800478e <HAL_GPIO_WritePin>
		CAM->REC_STATUS = CAM_NREC;
 8002860:	2300      	movs	r3, #0
 8002862:	7723      	strb	r3, [r4, #28]
 8002864:	e7ec      	b.n	8002840 <CAM_STOP+0xa>
	...

08002868 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800286c:	b0a0      	sub	sp, #128	; 0x80
 800286e:	4604      	mov	r4, r0

	// Core cycle, runs every 1s
	if (htim == &htim3)
 8002870:	4b9d      	ldr	r3, [pc, #628]	; (8002ae8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002872:	4298      	cmp	r0, r3
 8002874:	d014      	beq.n	80028a0 <HAL_TIM_PeriodElapsedCallback+0x38>
	}



	// LED flasher
	if (htim == &htim4)
 8002876:	4b9d      	ldr	r3, [pc, #628]	; (8002aec <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002878:	429c      	cmp	r4, r3
 800287a:	f000 8245 	beq.w	8002d08 <HAL_TIM_PeriodElapsedCallback+0x4a0>
	}



	// Camera_1 recording restart
	if (htim == CAM_1.TIM)
 800287e:	4b9c      	ldr	r3, [pc, #624]	; (8002af0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	42a3      	cmp	r3, r4
 8002884:	f000 8294 	beq.w	8002db0 <HAL_TIM_PeriodElapsedCallback+0x548>
		if(CAM_1.Do_Restart)
			CAM_START(&CAM_1);
	}

	// Camera_2 recording restart
	if (htim == CAM_2.TIM)
 8002888:	4b9a      	ldr	r3, [pc, #616]	; (8002af4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	42a3      	cmp	r3, r4
 800288e:	f000 82cd 	beq.w	8002e2c <HAL_TIM_PeriodElapsedCallback+0x5c4>
			CAM_START(&CAM_2);
	}


	// Buzzer control
	if (htim == &htim10)
 8002892:	4b99      	ldr	r3, [pc, #612]	; (8002af8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002894:	429c      	cmp	r4, r3
 8002896:	f000 82da 	beq.w	8002e4e <HAL_TIM_PeriodElapsedCallback+0x5e6>
		if((Current_Time.Seconds == 30) || (Current_Time.Seconds == 0))
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
		else
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 800289a:	b020      	add	sp, #128	; 0x80
 800289c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint16_t tickstart = HAL_GetTick();
 80028a0:	f001 fdb4 	bl	800440c <HAL_GetTick>
 80028a4:	b285      	uxth	r5, r0
		HAL_RTC_GetTime(&hrtc, &Current_Time, RTC_FORMAT_BIN);
 80028a6:	4e95      	ldr	r6, [pc, #596]	; (8002afc <HAL_TIM_PeriodElapsedCallback+0x294>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	4995      	ldr	r1, [pc, #596]	; (8002b00 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80028ac:	4630      	mov	r0, r6
 80028ae:	f003 fa46 	bl	8005d3e <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Current_Date, RTC_FORMAT_BIN);
 80028b2:	2200      	movs	r2, #0
 80028b4:	4993      	ldr	r1, [pc, #588]	; (8002b04 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80028b6:	4630      	mov	r0, r6
 80028b8:	f003 fa69 	bl	8005d8e <HAL_RTC_GetDate>
		Get_BME280_in_all_readings();
 80028bc:	f7ff fddc 	bl	8002478 <Get_BME280_in_all_readings>
		Get_BME280_ex_all_readings();
 80028c0:	f7ff fe28 	bl	8002514 <Get_BME280_ex_all_readings>
		Get_MPU6050_all_readings();
 80028c4:	f7ff fe72 	bl	80025ac <Get_MPU6050_all_readings>
		Get_SI1145_all_readings();
 80028c8:	f7ff feac 	bl	8002624 <Get_SI1145_all_readings>
		if(Sensors.BME280_External.Altitude > Altitude_max)
 80028cc:	4b8e      	ldr	r3, [pc, #568]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80028ce:	e9d3 670a 	ldrd	r6, r7, [r3, #40]	; 0x28
 80028d2:	4b8e      	ldr	r3, [pc, #568]	; (8002b0c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	4630      	mov	r0, r6
 80028da:	4639      	mov	r1, r7
 80028dc:	f7fe f924 	bl	8000b28 <__aeabi_dcmpgt>
 80028e0:	b110      	cbz	r0, 80028e8 <HAL_TIM_PeriodElapsedCallback+0x80>
			Altitude_max = Sensors.BME280_External.Altitude;
 80028e2:	4b8a      	ldr	r3, [pc, #552]	; (8002b0c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80028e4:	e9c3 6700 	strd	r6, r7, [r3]
		if((Altitude_max > LOWER_ALTITUDE_LIMIT+200) && (Sensors.BME280_External.Altitude < LOWER_ALTITUDE_LIMIT))
 80028e8:	2200      	movs	r2, #0
 80028ea:	4b89      	ldr	r3, [pc, #548]	; (8002b10 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80028ec:	4987      	ldr	r1, [pc, #540]	; (8002b0c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80028ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028f2:	f7fe f919 	bl	8000b28 <__aeabi_dcmpgt>
 80028f6:	b138      	cbz	r0, 8002908 <HAL_TIM_PeriodElapsedCallback+0xa0>
 80028f8:	2200      	movs	r2, #0
 80028fa:	4b86      	ldr	r3, [pc, #536]	; (8002b14 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80028fc:	4630      	mov	r0, r6
 80028fe:	4639      	mov	r1, r7
 8002900:	f7fe f8f4 	bl	8000aec <__aeabi_dcmplt>
 8002904:	2800      	cmp	r0, #0
 8002906:	d179      	bne.n	80029fc <HAL_TIM_PeriodElapsedCallback+0x194>
		if((Sensors.BME280_External.Altitude > UPPER_ALTITUDE_LIMIT) && (Rope_cut_status != ROPE_CUTTING))
 8002908:	a375      	add	r3, pc, #468	; (adr r3, 8002ae0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	497e      	ldr	r1, [pc, #504]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002910:	e9d1 010a 	ldrd	r0, r1, [r1, #40]	; 0x28
 8002914:	f7fe f908 	bl	8000b28 <__aeabi_dcmpgt>
 8002918:	b150      	cbz	r0, 8002930 <HAL_TIM_PeriodElapsedCallback+0xc8>
 800291a:	4b7f      	ldr	r3, [pc, #508]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d005      	beq.n	8002930 <HAL_TIM_PeriodElapsedCallback+0xc8>
			Rope_cut_status = ROPE_CUTTING;
 8002924:	4b7c      	ldr	r3, [pc, #496]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
			Rope_cut_delay = ROPE_CUT_TIME;
 800292a:	4b7c      	ldr	r3, [pc, #496]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800292c:	220a      	movs	r2, #10
 800292e:	701a      	strb	r2, [r3, #0]
		if(Rope_cut_status == ROPE_CUTTING)
 8002930:	4b79      	ldr	r3, [pc, #484]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d06a      	beq.n	8002a10 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		memset(Data_to_send, 0, sizeof(Data_to_send));
 800293a:	4e79      	ldr	r6, [pc, #484]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800293c:	2232      	movs	r2, #50	; 0x32
 800293e:	2100      	movs	r1, #0
 8002940:	4630      	mov	r0, r6
 8002942:	f006 f815 	bl	8008970 <memset>
		Data_to_send[0] = ',';
 8002946:	232c      	movs	r3, #44	; 0x2c
 8002948:	7033      	strb	r3, [r6, #0]
		if(Sensors.BME280_Internal.Status == HAL_OK)
 800294a:	4b6f      	ldr	r3, [pc, #444]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800294c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002950:	2b00      	cmp	r3, #0
 8002952:	d174      	bne.n	8002a3e <HAL_TIM_PeriodElapsedCallback+0x1d6>
			sprintf(TempStr, "%.2f", Sensors.BME280_Internal.Temperature);
 8002954:	4b6c      	ldr	r3, [pc, #432]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002956:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800295a:	4972      	ldr	r1, [pc, #456]	; (8002b24 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800295c:	a807      	add	r0, sp, #28
 800295e:	f006 fc79 	bl	8009254 <siprintf>
			strcat(Data_to_send, TempStr);
 8002962:	a907      	add	r1, sp, #28
 8002964:	4630      	mov	r0, r6
 8002966:	f006 fc95 	bl	8009294 <strcat>
		if(Sensors.BME280_External.Status == HAL_OK)
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d16c      	bne.n	8002a4c <HAL_TIM_PeriodElapsedCallback+0x1e4>
			sprintf(TempStr, ",%.2f,%d", Sensors.BME280_External.Temperature, (int16_t)Sensors.BME280_External.Altitude);
 8002972:	4e65      	ldr	r6, [pc, #404]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002974:	e9d6 010a 	ldrd	r0, r1, [r6, #40]	; 0x28
 8002978:	f7fe f8f6 	bl	8000b68 <__aeabi_d2iz>
 800297c:	b200      	sxth	r0, r0
 800297e:	9000      	str	r0, [sp, #0]
 8002980:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8002984:	4968      	ldr	r1, [pc, #416]	; (8002b28 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002986:	a807      	add	r0, sp, #28
 8002988:	f006 fc64 	bl	8009254 <siprintf>
			strcat(Data_to_send, TempStr);
 800298c:	a907      	add	r1, sp, #28
 800298e:	4864      	ldr	r0, [pc, #400]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002990:	f006 fc80 	bl	8009294 <strcat>
		if(Sensors.SI1145.Status == HAL_OK)
 8002994:	4b5c      	ldr	r3, [pc, #368]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002996:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d164      	bne.n	8002a68 <HAL_TIM_PeriodElapsedCallback+0x200>
			sprintf(TempStr, ",%.2f", Sensors.SI1145.UV);
 800299e:	4b5a      	ldr	r3, [pc, #360]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80029a0:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80029a4:	4961      	ldr	r1, [pc, #388]	; (8002b2c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80029a6:	a807      	add	r0, sp, #28
 80029a8:	f006 fc54 	bl	8009254 <siprintf>
			strcat(Data_to_send, TempStr);
 80029ac:	a907      	add	r1, sp, #28
 80029ae:	485c      	ldr	r0, [pc, #368]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80029b0:	f006 fc70 	bl	8009294 <strcat>
		if((sd_mounted == 1) && (sd_status == FR_OK))
 80029b4:	4b5e      	ldr	r3, [pc, #376]	; (8002b30 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d05d      	beq.n	8002a7a <HAL_TIM_PeriodElapsedCallback+0x212>
		if((sd_status != FR_OK) && (sd_error_cnt <= SD_MAX_RETRIES))
 80029be:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b12b      	cbz	r3, 80029d0 <HAL_TIM_PeriodElapsedCallback+0x168>
 80029c4:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	f240 815c 	bls.w	8002c88 <HAL_TIM_PeriodElapsedCallback+0x420>
		uint16_t Cycle_runtime = HAL_GetTick() - tickstart;
 80029d0:	f001 fd1c 	bl	800440c <HAL_GetTick>
 80029d4:	b283      	uxth	r3, r0
 80029d6:	1b5b      	subs	r3, r3, r5
 80029d8:	b29b      	uxth	r3, r3
		if(Cycle_runtime > Cycle_runtime_max)
 80029da:	4a58      	ldr	r2, [pc, #352]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80029dc:	8812      	ldrh	r2, [r2, #0]
 80029de:	b292      	uxth	r2, r2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d201      	bcs.n	80029e8 <HAL_TIM_PeriodElapsedCallback+0x180>
			Cycle_runtime_max = Cycle_runtime;
 80029e4:	4a55      	ldr	r2, [pc, #340]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80029e6:	8013      	strh	r3, [r2, #0]
		if(Cycle_runtime < Cycle_runtime_min)
 80029e8:	4a55      	ldr	r2, [pc, #340]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80029ea:	8812      	ldrh	r2, [r2, #0]
 80029ec:	b292      	uxth	r2, r2
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d901      	bls.n	80029f6 <HAL_TIM_PeriodElapsedCallback+0x18e>
			Cycle_runtime_min = Cycle_runtime;
 80029f2:	4a53      	ldr	r2, [pc, #332]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80029f4:	8013      	strh	r3, [r2, #0]
		Cycle_runtime_last = Cycle_runtime;
 80029f6:	4a53      	ldr	r2, [pc, #332]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80029f8:	8013      	strh	r3, [r2, #0]
 80029fa:	e73c      	b.n	8002876 <HAL_TIM_PeriodElapsedCallback+0xe>
			HAL_TIM_Base_Stop_IT(&htim3);
 80029fc:	483a      	ldr	r0, [pc, #232]	; (8002ae8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80029fe:	f003 fd93 	bl	8006528 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim10);
 8002a02:	483d      	ldr	r0, [pc, #244]	; (8002af8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002a04:	f003 fd54 	bl	80064b0 <HAL_TIM_Base_Start_IT>
			Is_asleep = 1;
 8002a08:	4b4f      	ldr	r3, [pc, #316]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e77b      	b.n	8002908 <HAL_TIM_PeriodElapsedCallback+0xa0>
			if(Rope_cut_delay > 0)
 8002a10:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b153      	cbz	r3, 8002a2c <HAL_TIM_PeriodElapsedCallback+0x1c4>
				Rope_cut_delay--;
 8002a16:	4a41      	ldr	r2, [pc, #260]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002a18:	7813      	ldrb	r3, [r2, #0]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(ROPE_CUT_EN_GPIO_Port, ROPE_CUT_EN_Pin, GPIO_PIN_SET);
 8002a20:	2201      	movs	r2, #1
 8002a22:	2102      	movs	r1, #2
 8002a24:	4849      	ldr	r0, [pc, #292]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002a26:	f001 feb2 	bl	800478e <HAL_GPIO_WritePin>
 8002a2a:	e786      	b.n	800293a <HAL_TIM_PeriodElapsedCallback+0xd2>
				HAL_GPIO_WritePin(ROPE_CUT_EN_GPIO_Port, ROPE_CUT_EN_Pin, GPIO_PIN_RESET);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4846      	ldr	r0, [pc, #280]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002a32:	f001 feac 	bl	800478e <HAL_GPIO_WritePin>
				Rope_cut_status = ROPE_CUT_DONE;
 8002a36:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a38:	2202      	movs	r2, #2
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e77d      	b.n	800293a <HAL_TIM_PeriodElapsedCallback+0xd2>
			sprintf(Data_to_send, "--");
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002a40:	4a43      	ldr	r2, [pc, #268]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002a42:	8811      	ldrh	r1, [r2, #0]
 8002a44:	7892      	ldrb	r2, [r2, #2]
 8002a46:	8019      	strh	r1, [r3, #0]
 8002a48:	709a      	strb	r2, [r3, #2]
 8002a4a:	e78e      	b.n	800296a <HAL_TIM_PeriodElapsedCallback+0x102>
			strcat(Data_to_send, ",--,--");
 8002a4c:	4e34      	ldr	r6, [pc, #208]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002a4e:	4630      	mov	r0, r6
 8002a50:	f7fd fbc6 	bl	80001e0 <strlen>
 8002a54:	4603      	mov	r3, r0
 8002a56:	1981      	adds	r1, r0, r6
 8002a58:	4a3e      	ldr	r2, [pc, #248]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002a5a:	6810      	ldr	r0, [r2, #0]
 8002a5c:	5198      	str	r0, [r3, r6]
 8002a5e:	8890      	ldrh	r0, [r2, #4]
 8002a60:	7993      	ldrb	r3, [r2, #6]
 8002a62:	8088      	strh	r0, [r1, #4]
 8002a64:	718b      	strb	r3, [r1, #6]
 8002a66:	e795      	b.n	8002994 <HAL_TIM_PeriodElapsedCallback+0x12c>
			strcat(Data_to_send, ",--");
 8002a68:	4e2d      	ldr	r6, [pc, #180]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	f7fd fbb8 	bl	80001e0 <strlen>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4a39      	ldr	r2, [pc, #228]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002a74:	6810      	ldr	r0, [r2, #0]
 8002a76:	50f0      	str	r0, [r6, r3]
 8002a78:	e79c      	b.n	80029b4 <HAL_TIM_PeriodElapsedCallback+0x14c>
		if((sd_mounted == 1) && (sd_status == FR_OK))
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f003 07ff 	and.w	r7, r3, #255	; 0xff
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d19b      	bne.n	80029be <HAL_TIM_PeriodElapsedCallback+0x156>
			sd_error_cnt = 0;
 8002a86:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
			f_printf(&fil, "| %2u | %2u | %2u | %2u |", Current_Date.Date, Current_Time.Hours, Current_Time.Minutes, Current_Time.Seconds);
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002a8e:	785a      	ldrb	r2, [r3, #1]
 8002a90:	7899      	ldrb	r1, [r3, #2]
 8002a92:	9101      	str	r1, [sp, #4]
 8002a94:	9200      	str	r2, [sp, #0]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4a1a      	ldr	r2, [pc, #104]	; (8002b04 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002a9a:	7892      	ldrb	r2, [r2, #2]
 8002a9c:	492f      	ldr	r1, [pc, #188]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002a9e:	4830      	ldr	r0, [pc, #192]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002aa0:	f005 fdea 	bl	8008678 <f_printf>
			if(Sensors.BME280_Internal.Status == HAL_OK)
 8002aa4:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002aaa:	b10b      	cbz	r3, 8002ab0 <HAL_TIM_PeriodElapsedCallback+0x248>
				for(uint8_t i = 0; i < 3; i++)
 8002aac:	463e      	mov	r6, r7
 8002aae:	e061      	b.n	8002b74 <HAL_TIM_PeriodElapsedCallback+0x30c>
				sprintf(TempStr, " %8.3f | %8.3f | %8.3f | %8.1f |", Sensors.BME280_Internal.Temperature, Sensors.BME280_Internal.Pressure, Sensors.BME280_Internal.Humidity, Sensors.BME280_Internal.Altitude);
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002ab2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002aba:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ac2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002ac6:	e9cd 0100 	strd	r0, r1, [sp]
 8002aca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ace:	4925      	ldr	r1, [pc, #148]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002ad0:	a807      	add	r0, sp, #28
 8002ad2:	f006 fbbf 	bl	8009254 <siprintf>
				f_printf(&fil, TempStr);
 8002ad6:	a907      	add	r1, sp, #28
 8002ad8:	4821      	ldr	r0, [pc, #132]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002ada:	f005 fdcd 	bl	8008678 <f_printf>
 8002ade:	e04b      	b.n	8002b78 <HAL_TIM_PeriodElapsedCallback+0x310>
 8002ae0:	00000000 	.word	0x00000000
 8002ae4:	40db5800 	.word	0x40db5800
 8002ae8:	200006f8 	.word	0x200006f8
 8002aec:	20000308 	.word	0x20000308
 8002af0:	2000088c 	.word	0x2000088c
 8002af4:	20000788 	.word	0x20000788
 8002af8:	200005d8 	.word	0x200005d8
 8002afc:	200008ac 	.word	0x200008ac
 8002b00:	20000d4c 	.word	0x20000d4c
 8002b04:	20000ae0 	.word	0x20000ae0
 8002b08:	200008d0 	.word	0x200008d0
 8002b0c:	20000748 	.word	0x20000748
 8002b10:	4092c000 	.word	0x4092c000
 8002b14:	408f4000 	.word	0x408f4000
 8002b18:	200009d0 	.word	0x200009d0
 8002b1c:	20000304 	.word	0x20000304
 8002b20:	20000d18 	.word	0x20000d18
 8002b24:	0800c7b8 	.word	0x0800c7b8
 8002b28:	0800c7c0 	.word	0x0800c7c0
 8002b2c:	0800c7d4 	.word	0x0800c7d4
 8002b30:	20000888 	.word	0x20000888
 8002b34:	20000820 	.word	0x20000820
 8002b38:	20000305 	.word	0x20000305
 8002b3c:	20000750 	.word	0x20000750
 8002b40:	200006ae 	.word	0x200006ae
 8002b44:	20000d92 	.word	0x20000d92
 8002b48:	200008cc 	.word	0x200008cc
 8002b4c:	40020000 	.word	0x40020000
 8002b50:	0800c7d0 	.word	0x0800c7d0
 8002b54:	0800c7cc 	.word	0x0800c7cc
 8002b58:	0800c7dc 	.word	0x0800c7dc
 8002b5c:	0800c7e0 	.word	0x0800c7e0
 8002b60:	20000ae8 	.word	0x20000ae8
 8002b64:	0800c7fc 	.word	0x0800c7fc
					f_printf(&fil, "    N/A    |");
 8002b68:	499a      	ldr	r1, [pc, #616]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002b6a:	489b      	ldr	r0, [pc, #620]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002b6c:	f005 fd84 	bl	8008678 <f_printf>
				for(uint8_t i = 0; i < 3; i++)
 8002b70:	3601      	adds	r6, #1
 8002b72:	b2f6      	uxtb	r6, r6
 8002b74:	2e02      	cmp	r6, #2
 8002b76:	d9f7      	bls.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x300>
			if(Sensors.BME280_External.Status == HAL_OK)
 8002b78:	4b98      	ldr	r3, [pc, #608]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b10b      	cbz	r3, 8002b82 <HAL_TIM_PeriodElapsedCallback+0x31a>
				for(uint8_t i = 0; i < 3; i++)
 8002b7e:	463e      	mov	r6, r7
 8002b80:	e01d      	b.n	8002bbe <HAL_TIM_PeriodElapsedCallback+0x356>
				sprintf(TempStr, " %8.3f | %8.3f | %8.3f | %8.1f |", Sensors.BME280_External.Temperature, Sensors.BME280_External.Pressure, Sensors.BME280_External.Humidity, Sensors.BME280_External.Altitude);
 8002b82:	4b96      	ldr	r3, [pc, #600]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002b84:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002b88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002b8c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002b90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b94:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002b98:	e9cd 0100 	strd	r0, r1, [sp]
 8002b9c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ba0:	498f      	ldr	r1, [pc, #572]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002ba2:	a807      	add	r0, sp, #28
 8002ba4:	f006 fb56 	bl	8009254 <siprintf>
				f_printf(&fil, TempStr);
 8002ba8:	a907      	add	r1, sp, #28
 8002baa:	488b      	ldr	r0, [pc, #556]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002bac:	f005 fd64 	bl	8008678 <f_printf>
 8002bb0:	e007      	b.n	8002bc2 <HAL_TIM_PeriodElapsedCallback+0x35a>
					f_printf(&fil, "    N/A    |");
 8002bb2:	4988      	ldr	r1, [pc, #544]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002bb4:	4888      	ldr	r0, [pc, #544]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002bb6:	f005 fd5f 	bl	8008678 <f_printf>
				for(uint8_t i = 0; i < 3; i++)
 8002bba:	3601      	adds	r6, #1
 8002bbc:	b2f6      	uxtb	r6, r6
 8002bbe:	2e02      	cmp	r6, #2
 8002bc0:	d9f7      	bls.n	8002bb2 <HAL_TIM_PeriodElapsedCallback+0x34a>
			if(Sensors.MPU650.Status == HAL_OK)
 8002bc2:	4b86      	ldr	r3, [pc, #536]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002bc4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002bc8:	b10b      	cbz	r3, 8002bce <HAL_TIM_PeriodElapsedCallback+0x366>
				for(uint8_t i = 0; i < 7; i++)
 8002bca:	463e      	mov	r6, r7
 8002bcc:	e031      	b.n	8002c32 <HAL_TIM_PeriodElapsedCallback+0x3ca>
				sprintf(TempStr, " %9.3f | %9.3f | %9.3f |", Sensors.MPU650.Accel_X, Sensors.MPU650.Accel_Y, Sensors.MPU650.Accel_Z);
 8002bce:	4e83      	ldr	r6, [pc, #524]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002bd0:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
 8002bd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002bd8:	e9d6 231c 	ldrd	r2, r3, [r6, #112]	; 0x70
 8002bdc:	e9cd 2300 	strd	r2, r3, [sp]
 8002be0:	e9d6 231a 	ldrd	r2, r3, [r6, #104]	; 0x68
 8002be4:	497f      	ldr	r1, [pc, #508]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002be6:	a807      	add	r0, sp, #28
 8002be8:	f006 fb34 	bl	8009254 <siprintf>
				f_printf(&fil, TempStr);
 8002bec:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002dd8 <HAL_TIM_PeriodElapsedCallback+0x570>
 8002bf0:	a907      	add	r1, sp, #28
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	f005 fd40 	bl	8008678 <f_printf>
				sprintf(TempStr, " %9.3f | %9.3f | %9.3f | %9.3f |", Sensors.MPU650.Gyro_X, Sensors.MPU650.Gyro_Y, Sensors.MPU650.Gyro_Z, Sensors.MPU650.Temperature);
 8002bf8:	e9d6 2326 	ldrd	r2, r3, [r6, #152]	; 0x98
 8002bfc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c00:	e9d6 2324 	ldrd	r2, r3, [r6, #144]	; 0x90
 8002c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c08:	e9d6 2322 	ldrd	r2, r3, [r6, #136]	; 0x88
 8002c0c:	e9cd 2300 	strd	r2, r3, [sp]
 8002c10:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
 8002c14:	4974      	ldr	r1, [pc, #464]	; (8002de8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002c16:	a807      	add	r0, sp, #28
 8002c18:	f006 fb1c 	bl	8009254 <siprintf>
				f_printf(&fil, TempStr);
 8002c1c:	a907      	add	r1, sp, #28
 8002c1e:	4640      	mov	r0, r8
 8002c20:	f005 fd2a 	bl	8008678 <f_printf>
 8002c24:	e007      	b.n	8002c36 <HAL_TIM_PeriodElapsedCallback+0x3ce>
					f_printf(&fil, "      N/A     |");
 8002c26:	4971      	ldr	r1, [pc, #452]	; (8002dec <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002c28:	486b      	ldr	r0, [pc, #428]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002c2a:	f005 fd25 	bl	8008678 <f_printf>
				for(uint8_t i = 0; i < 7; i++)
 8002c2e:	3601      	adds	r6, #1
 8002c30:	b2f6      	uxtb	r6, r6
 8002c32:	2e06      	cmp	r6, #6
 8002c34:	d9f7      	bls.n	8002c26 <HAL_TIM_PeriodElapsedCallback+0x3be>
			if(Sensors.SI1145.Status == HAL_OK)
 8002c36:	4b69      	ldr	r3, [pc, #420]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002c38:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002c3c:	b9bb      	cbnz	r3, 8002c6e <HAL_TIM_PeriodElapsedCallback+0x406>
				sprintf(TempStr, " %6d | %6d | %6.2f |", Sensors.SI1145.VIS, Sensors.SI1145.IR, Sensors.SI1145.UV);
 8002c3e:	4a67      	ldr	r2, [pc, #412]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002c40:	e9d2 012a 	ldrd	r0, r1, [r2, #168]	; 0xa8
 8002c44:	e9cd 0100 	strd	r0, r1, [sp]
 8002c48:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8002c4c:	f8b2 20b2 	ldrh.w	r2, [r2, #178]	; 0xb2
 8002c50:	4967      	ldr	r1, [pc, #412]	; (8002df0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002c52:	a807      	add	r0, sp, #28
 8002c54:	f006 fafe 	bl	8009254 <siprintf>
				f_printf(&fil, TempStr);
 8002c58:	a907      	add	r1, sp, #28
 8002c5a:	485f      	ldr	r0, [pc, #380]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002c5c:	f005 fd0c 	bl	8008678 <f_printf>
 8002c60:	e007      	b.n	8002c72 <HAL_TIM_PeriodElapsedCallback+0x40a>
					f_printf(&fil, "  N/A   |");
 8002c62:	4964      	ldr	r1, [pc, #400]	; (8002df4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002c64:	485c      	ldr	r0, [pc, #368]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002c66:	f005 fd07 	bl	8008678 <f_printf>
				for(uint8_t i = 0; i < 3; i++)
 8002c6a:	3701      	adds	r7, #1
 8002c6c:	b2ff      	uxtb	r7, r7
 8002c6e:	2f02      	cmp	r7, #2
 8002c70:	d9f7      	bls.n	8002c62 <HAL_TIM_PeriodElapsedCallback+0x3fa>
			f_printf(&fil, "\n");
 8002c72:	4e59      	ldr	r6, [pc, #356]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002c74:	4960      	ldr	r1, [pc, #384]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002c76:	4630      	mov	r0, r6
 8002c78:	f005 fcfe 	bl	8008678 <f_printf>
			sd_status = f_sync(&fil);
 8002c7c:	4630      	mov	r0, r6
 8002c7e:	f005 fc2c 	bl	80084da <f_sync>
 8002c82:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002c84:	7018      	strb	r0, [r3, #0]
 8002c86:	e69a      	b.n	80029be <HAL_TIM_PeriodElapsedCallback+0x156>
			sd_status = f_mount(NULL, "", 1);
 8002c88:	4f5d      	ldr	r7, [pc, #372]	; (8002e00 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4639      	mov	r1, r7
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f005 f99e 	bl	8007fd0 <f_mount>
 8002c94:	4e59      	ldr	r6, [pc, #356]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002c96:	7030      	strb	r0, [r6, #0]
			sd_status = f_mount(&fs, "", 1);
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4639      	mov	r1, r7
 8002c9c:	4859      	ldr	r0, [pc, #356]	; (8002e04 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002c9e:	f005 f997 	bl	8007fd0 <f_mount>
 8002ca2:	7030      	strb	r0, [r6, #0]
			if(sd_status == FR_OK)
 8002ca4:	7833      	ldrb	r3, [r6, #0]
 8002ca6:	b1c3      	cbz	r3, 8002cda <HAL_TIM_PeriodElapsedCallback+0x472>
				sd_error_cnt++;
 8002ca8:	4a57      	ldr	r2, [pc, #348]	; (8002e08 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002caa:	7813      	ldrb	r3, [r2, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	7013      	strb	r3, [r2, #0]
			if(sd_error_cnt > SD_MAX_RETRIES)
 8002cb2:	4b55      	ldr	r3, [pc, #340]	; (8002e08 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b05      	cmp	r3, #5
 8002cba:	f67f ae89 	bls.w	80029d0 <HAL_TIM_PeriodElapsedCallback+0x168>
				UART1_TxBuf[0] = 0xD0;
 8002cbe:	4953      	ldr	r1, [pc, #332]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002cc0:	23d0      	movs	r3, #208	; 0xd0
 8002cc2:	700b      	strb	r3, [r1, #0]
				UART1_TxBuf[1] = sd_status;
 8002cc4:	4b4d      	ldr	r3, [pc, #308]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	704b      	strb	r3, [r1, #1]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8002cca:	2202      	movs	r2, #2
 8002ccc:	4850      	ldr	r0, [pc, #320]	; (8002e10 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8002cce:	f003 ff66 	bl	8006b9e <HAL_UART_Transmit_IT>
				sd_mounted = 0;
 8002cd2:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e67a      	b.n	80029d0 <HAL_TIM_PeriodElapsedCallback+0x168>
				sd_error_cnt = 0;
 8002cda:	4b4b      	ldr	r3, [pc, #300]	; (8002e08 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
				sd_mounted = 1;
 8002ce0:	4b4c      	ldr	r3, [pc, #304]	; (8002e14 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
				sd_file_cnt++;
 8002ce6:	4a4c      	ldr	r2, [pc, #304]	; (8002e18 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8002ce8:	7813      	ldrb	r3, [r2, #0]
 8002cea:	3301      	adds	r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	7013      	strb	r3, [r2, #0]
				sprintf(TempStr, "Data%d.txt", sd_file_cnt);
 8002cf0:	7812      	ldrb	r2, [r2, #0]
 8002cf2:	494a      	ldr	r1, [pc, #296]	; (8002e1c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8002cf4:	a807      	add	r0, sp, #28
 8002cf6:	f006 faad 	bl	8009254 <siprintf>
				sd_status = f_open(&fil, TempStr, FA_OPEN_ALWAYS | FA_WRITE);
 8002cfa:	2212      	movs	r2, #18
 8002cfc:	a907      	add	r1, sp, #28
 8002cfe:	4836      	ldr	r0, [pc, #216]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002d00:	f005 f994 	bl	800802c <f_open>
 8002d04:	7030      	strb	r0, [r6, #0]
 8002d06:	e7d4      	b.n	8002cb2 <HAL_TIM_PeriodElapsedCallback+0x44a>
		  if((sd_mounted == 1) && (sd_status == FR_OK))
 8002d08:	4b42      	ldr	r3, [pc, #264]	; (8002e14 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_TIM_PeriodElapsedCallback+0x4b0>
 8002d12:	4b3a      	ldr	r3, [pc, #232]	; (8002dfc <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b34b      	cbz	r3, 8002d6c <HAL_TIM_PeriodElapsedCallback+0x504>
			  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d1e:	4840      	ldr	r0, [pc, #256]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8002d20:	f001 fd35 	bl	800478e <HAL_GPIO_WritePin>
		  if(Sensors.BME280_Internal.Status == HAL_OK)
 8002d24:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002d26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d2a:	bb2b      	cbnz	r3, 8002d78 <HAL_TIM_PeriodElapsedCallback+0x510>
			  HAL_GPIO_TogglePin(USER_LED4_GPIO_Port, USER_LED4_Pin);
 8002d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d30:	483c      	ldr	r0, [pc, #240]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002d32:	f001 fd32 	bl	800479a <HAL_GPIO_TogglePin>
		  if(Sensors.BME280_External.Status == HAL_OK)
 8002d36:	4b29      	ldr	r3, [pc, #164]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	bb23      	cbnz	r3, 8002d86 <HAL_TIM_PeriodElapsedCallback+0x51e>
			  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 8002d3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d40:	4838      	ldr	r0, [pc, #224]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002d42:	f001 fd2a 	bl	800479a <HAL_GPIO_TogglePin>
		  if(Sensors.MPU650.Status == HAL_OK)
 8002d46:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002d48:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002d4c:	bb13      	cbnz	r3, 8002d94 <HAL_TIM_PeriodElapsedCallback+0x52c>
			  HAL_GPIO_TogglePin(USER_LED5_GPIO_Port, USER_LED5_Pin);
 8002d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d52:	4834      	ldr	r0, [pc, #208]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002d54:	f001 fd21 	bl	800479a <HAL_GPIO_TogglePin>
		  if(Sensors.SI1145.Status == HAL_OK)
 8002d58:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002d5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002d5e:	bb03      	cbnz	r3, 8002da2 <HAL_TIM_PeriodElapsedCallback+0x53a>
			  HAL_GPIO_TogglePin(USER_LED3_GPIO_Port, USER_LED3_Pin);
 8002d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d64:	482f      	ldr	r0, [pc, #188]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002d66:	f001 fd18 	bl	800479a <HAL_GPIO_TogglePin>
 8002d6a:	e588      	b.n	800287e <HAL_TIM_PeriodElapsedCallback+0x16>
			  HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8002d6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d70:	482b      	ldr	r0, [pc, #172]	; (8002e20 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8002d72:	f001 fd12 	bl	800479a <HAL_GPIO_TogglePin>
 8002d76:	e7d5      	b.n	8002d24 <HAL_TIM_PeriodElapsedCallback+0x4bc>
			  HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, GPIO_PIN_RESET);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d7e:	4829      	ldr	r0, [pc, #164]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002d80:	f001 fd05 	bl	800478e <HAL_GPIO_WritePin>
 8002d84:	e7d7      	b.n	8002d36 <HAL_TIM_PeriodElapsedCallback+0x4ce>
			  HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, GPIO_PIN_RESET);
 8002d86:	2200      	movs	r2, #0
 8002d88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d8c:	4825      	ldr	r0, [pc, #148]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002d8e:	f001 fcfe 	bl	800478e <HAL_GPIO_WritePin>
 8002d92:	e7d8      	b.n	8002d46 <HAL_TIM_PeriodElapsedCallback+0x4de>
			  HAL_GPIO_WritePin(USER_LED5_GPIO_Port, USER_LED5_Pin, GPIO_PIN_RESET);
 8002d94:	2200      	movs	r2, #0
 8002d96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d9a:	4822      	ldr	r0, [pc, #136]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002d9c:	f001 fcf7 	bl	800478e <HAL_GPIO_WritePin>
 8002da0:	e7da      	b.n	8002d58 <HAL_TIM_PeriodElapsedCallback+0x4f0>
			  HAL_GPIO_WritePin(USER_LED3_GPIO_Port, USER_LED3_Pin, GPIO_PIN_RESET);
 8002da2:	2200      	movs	r2, #0
 8002da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002da8:	481e      	ldr	r0, [pc, #120]	; (8002e24 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002daa:	f001 fcf0 	bl	800478e <HAL_GPIO_WritePin>
 8002dae:	e566      	b.n	800287e <HAL_TIM_PeriodElapsedCallback+0x16>
		CAM_1.REC_STATUS = CAM_NREC;
 8002db0:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	771a      	strb	r2, [r3, #28]
		if(CAM_1.Startup_delay > 0)
 8002db6:	7fdb      	ldrb	r3, [r3, #31]
 8002db8:	b113      	cbz	r3, 8002dc0 <HAL_TIM_PeriodElapsedCallback+0x558>
			CAM_1.Startup_delay--;
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002dbe:	77d3      	strb	r3, [r2, #31]
		if(CAM_1.Do_Restart)
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002dc2:	7f5b      	ldrb	r3, [r3, #29]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f43f ad5f 	beq.w	8002888 <HAL_TIM_PeriodElapsedCallback+0x20>
			CAM_START(&CAM_1);
 8002dca:	4817      	ldr	r0, [pc, #92]	; (8002e28 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002dcc:	f7ff fd0c 	bl	80027e8 <CAM_START>
 8002dd0:	e55a      	b.n	8002888 <HAL_TIM_PeriodElapsedCallback+0x20>
 8002dd2:	bf00      	nop
 8002dd4:	0800c820 	.word	0x0800c820
 8002dd8:	20000ae8 	.word	0x20000ae8
 8002ddc:	200008d0 	.word	0x200008d0
 8002de0:	0800c7fc 	.word	0x0800c7fc
 8002de4:	0800c838 	.word	0x0800c838
 8002de8:	0800c830 	.word	0x0800c830
 8002dec:	0800c854 	.word	0x0800c854
 8002df0:	0800c864 	.word	0x0800c864
 8002df4:	0800c87c 	.word	0x0800c87c
 8002df8:	0800c888 	.word	0x0800c888
 8002dfc:	20000820 	.word	0x20000820
 8002e00:	0800c7b4 	.word	0x0800c7b4
 8002e04:	20000350 	.word	0x20000350
 8002e08:	20000305 	.word	0x20000305
 8002e0c:	200009d8 	.word	0x200009d8
 8002e10:	200007dc 	.word	0x200007dc
 8002e14:	20000888 	.word	0x20000888
 8002e18:	200007da 	.word	0x200007da
 8002e1c:	0800c88c 	.word	0x0800c88c
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020400 	.word	0x40020400
 8002e28:	2000088c 	.word	0x2000088c
		CAM_2.REC_STATUS = CAM_NREC;
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	771a      	strb	r2, [r3, #28]
		if(CAM_2.Startup_delay > 0)
 8002e32:	7fdb      	ldrb	r3, [r3, #31]
 8002e34:	b113      	cbz	r3, 8002e3c <HAL_TIM_PeriodElapsedCallback+0x5d4>
			CAM_2.Startup_delay--;
 8002e36:	3b01      	subs	r3, #1
 8002e38:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8002e3a:	77d3      	strb	r3, [r2, #31]
		if(CAM_2.Do_Restart)
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8002e3e:	7f5b      	ldrb	r3, [r3, #29]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f43f ad26 	beq.w	8002892 <HAL_TIM_PeriodElapsedCallback+0x2a>
			CAM_START(&CAM_2);
 8002e46:	480b      	ldr	r0, [pc, #44]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8002e48:	f7ff fcce 	bl	80027e8 <CAM_START>
 8002e4c:	e521      	b.n	8002892 <HAL_TIM_PeriodElapsedCallback+0x2a>
		if((Current_Time.Seconds == 30) || (Current_Time.Seconds == 0))
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8002e50:	789b      	ldrb	r3, [r3, #2]
 8002e52:	2b1e      	cmp	r3, #30
 8002e54:	d000      	beq.n	8002e58 <HAL_TIM_PeriodElapsedCallback+0x5f0>
 8002e56:	b933      	cbnz	r3, 8002e66 <HAL_TIM_PeriodElapsedCallback+0x5fe>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e5e:	4807      	ldr	r0, [pc, #28]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x614>)
 8002e60:	f001 fc95 	bl	800478e <HAL_GPIO_WritePin>
 8002e64:	e519      	b.n	800289a <HAL_TIM_PeriodElapsedCallback+0x32>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002e66:	2200      	movs	r2, #0
 8002e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e6c:	4803      	ldr	r0, [pc, #12]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x614>)
 8002e6e:	f001 fc8e 	bl	800478e <HAL_GPIO_WritePin>
}
 8002e72:	e512      	b.n	800289a <HAL_TIM_PeriodElapsedCallback+0x32>
 8002e74:	20000788 	.word	0x20000788
 8002e78:	20000d4c 	.word	0x20000d4c
 8002e7c:	40020000 	.word	0x40020000

08002e80 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	4604      	mov	r4, r0
	if((GPIO_PIN == CAM1_START_Pin) && CAM_1.Do_EXTI && (CAM_1.Startup_delay == 0))
 8002e84:	2820      	cmp	r0, #32
 8002e86:	d002      	beq.n	8002e8e <HAL_GPIO_EXTI_Callback+0xe>
		HAL_TIM_Base_Stop_IT(CAM_1.TIM);
		__HAL_TIM_SET_COUNTER(CAM_1.TIM, 1);
		HAL_TIM_Base_Start_IT(CAM_1.TIM);
	}

	if((GPIO_PIN == CAM2_START_Pin) && CAM_2.Do_EXTI && (CAM_2.Startup_delay == 0))
 8002e88:	2c10      	cmp	r4, #16
 8002e8a:	d014      	beq.n	8002eb6 <HAL_GPIO_EXTI_Callback+0x36>
		CAM_2.REC_STATUS = CAM_REC;
		HAL_TIM_Base_Stop_IT(CAM_2.TIM);
		__HAL_TIM_SET_COUNTER(CAM_2.TIM, 1);
		HAL_TIM_Base_Start_IT(CAM_2.TIM);
	}
}
 8002e8c:	bd70      	pop	{r4, r5, r6, pc}
	if((GPIO_PIN == CAM1_START_Pin) && CAM_1.Do_EXTI && (CAM_1.Startup_delay == 0))
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x60>)
 8002e90:	7f9b      	ldrb	r3, [r3, #30]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f8      	beq.n	8002e88 <HAL_GPIO_EXTI_Callback+0x8>
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x60>)
 8002e98:	7fdb      	ldrb	r3, [r3, #31]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f4      	bne.n	8002e88 <HAL_GPIO_EXTI_Callback+0x8>
		CAM_1.REC_STATUS = CAM_REC;
 8002e9e:	4d10      	ldr	r5, [pc, #64]	; (8002ee0 <HAL_GPIO_EXTI_Callback+0x60>)
 8002ea0:	2601      	movs	r6, #1
 8002ea2:	772e      	strb	r6, [r5, #28]
		HAL_TIM_Base_Stop_IT(CAM_1.TIM);
 8002ea4:	69a8      	ldr	r0, [r5, #24]
 8002ea6:	f003 fb3f 	bl	8006528 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(CAM_1.TIM, 1);
 8002eaa:	69a8      	ldr	r0, [r5, #24]
 8002eac:	6803      	ldr	r3, [r0, #0]
 8002eae:	625e      	str	r6, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(CAM_1.TIM);
 8002eb0:	f003 fafe 	bl	80064b0 <HAL_TIM_Base_Start_IT>
 8002eb4:	e7e8      	b.n	8002e88 <HAL_GPIO_EXTI_Callback+0x8>
	if((GPIO_PIN == CAM2_START_Pin) && CAM_2.Do_EXTI && (CAM_2.Startup_delay == 0))
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002eb8:	7f9b      	ldrb	r3, [r3, #30]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0e6      	beq.n	8002e8c <HAL_GPIO_EXTI_Callback+0xc>
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002ec0:	7fdb      	ldrb	r3, [r3, #31]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e2      	bne.n	8002e8c <HAL_GPIO_EXTI_Callback+0xc>
		CAM_2.REC_STATUS = CAM_REC;
 8002ec6:	4c07      	ldr	r4, [pc, #28]	; (8002ee4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002ec8:	2501      	movs	r5, #1
 8002eca:	7725      	strb	r5, [r4, #28]
		HAL_TIM_Base_Stop_IT(CAM_2.TIM);
 8002ecc:	69a0      	ldr	r0, [r4, #24]
 8002ece:	f003 fb2b 	bl	8006528 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(CAM_2.TIM, 1);
 8002ed2:	69a0      	ldr	r0, [r4, #24]
 8002ed4:	6803      	ldr	r3, [r0, #0]
 8002ed6:	625d      	str	r5, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(CAM_2.TIM);
 8002ed8:	f003 faea 	bl	80064b0 <HAL_TIM_Base_Start_IT>
}
 8002edc:	e7d6      	b.n	8002e8c <HAL_GPIO_EXTI_Callback+0xc>
 8002ede:	bf00      	nop
 8002ee0:	2000088c 	.word	0x2000088c
 8002ee4:	20000788 	.word	0x20000788

08002ee8 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	4604      	mov	r4, r0

	// UART1 connects to the bluetooth module for debugging
	if (huart == &huart1)
 8002eee:	4ba1      	ldr	r3, [pc, #644]	; (8003174 <HAL_UART_RxCpltCallback+0x28c>)
 8002ef0:	4298      	cmp	r0, r3
 8002ef2:	d005      	beq.n	8002f00 <HAL_UART_RxCpltCallback+0x18>
		memset(UART1_RxBuf, 0, UART_Buffer_size);
	}


	// UART2 connects to the COM computer
	if (huart == &huart2)
 8002ef4:	4ba0      	ldr	r3, [pc, #640]	; (8003178 <HAL_UART_RxCpltCallback+0x290>)
 8002ef6:	429c      	cmp	r4, r3
 8002ef8:	f000 8211 	beq.w	800331e <HAL_UART_RxCpltCallback+0x436>
			break;
			}
		}
		memset(UART2_RxBuf, 0, UART_Buffer_size);
	}
}
 8002efc:	b009      	add	sp, #36	; 0x24
 8002efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (UART1_RxIsData == 1)
 8002f00:	4b9e      	ldr	r3, [pc, #632]	; (800317c <HAL_UART_RxCpltCallback+0x294>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d023      	beq.n	8002f52 <HAL_UART_RxCpltCallback+0x6a>
			volatile uint8_t Command = UART1_RxBuf[0];
 8002f0a:	4b9d      	ldr	r3, [pc, #628]	; (8003180 <HAL_UART_RxCpltCallback+0x298>)
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	f88d 2004 	strb.w	r2, [sp, #4]
			volatile uint8_t Parameter = UART1_RxBuf[1];
 8002f12:	785b      	ldrb	r3, [r3, #1]
 8002f14:	f88d 3005 	strb.w	r3, [sp, #5]
			if(Command != 0x02)
 8002f18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d13f      	bne.n	8002fa2 <HAL_UART_RxCpltCallback+0xba>
			switch(Command)
 8002f22:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2bcb      	cmp	r3, #203	; 0xcb
 8002f2a:	d834      	bhi.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
 8002f2c:	2bc0      	cmp	r3, #192	; 0xc0
 8002f2e:	d340      	bcc.n	8002fb2 <HAL_UART_RxCpltCallback+0xca>
 8002f30:	3bc0      	subs	r3, #192	; 0xc0
 8002f32:	2b0b      	cmp	r3, #11
 8002f34:	d82f      	bhi.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
 8002f36:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f3a:	00d0      	.short	0x00d0
 8002f3c:	00f600da 	.word	0x00f600da
 8002f40:	01390101 	.word	0x01390101
 8002f44:	019e015d 	.word	0x019e015d
 8002f48:	01b501a1 	.word	0x01b501a1
 8002f4c:	01e401d2 	.word	0x01e401d2
 8002f50:	01eb      	.short	0x01eb
			for (uint8_t i = 0; i < UART1_RxBytes; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	4a8b      	ldr	r2, [pc, #556]	; (8003184 <HAL_UART_RxCpltCallback+0x29c>)
 8002f56:	7812      	ldrb	r2, [r2, #0]
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d906      	bls.n	8002f6c <HAL_UART_RxCpltCallback+0x84>
				UART1_DataBuf[i] = UART1_RxBuf[i];
 8002f5e:	4a88      	ldr	r2, [pc, #544]	; (8003180 <HAL_UART_RxCpltCallback+0x298>)
 8002f60:	5cd1      	ldrb	r1, [r2, r3]
 8002f62:	4a89      	ldr	r2, [pc, #548]	; (8003188 <HAL_UART_RxCpltCallback+0x2a0>)
 8002f64:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < UART1_RxBytes; i++)
 8002f66:	3301      	adds	r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e7f3      	b.n	8002f54 <HAL_UART_RxCpltCallback+0x6c>
			UART1_TxBuf[0] = 0x00;
 8002f6c:	4d87      	ldr	r5, [pc, #540]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 8002f6e:	2700      	movs	r7, #0
 8002f70:	702f      	strb	r7, [r5, #0]
			UART1_TxBuf[1] = Get_System_Status();
 8002f72:	f7ff fa19 	bl	80023a8 <Get_System_Status>
 8002f76:	7068      	strb	r0, [r5, #1]
			HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8002f78:	4e7e      	ldr	r6, [pc, #504]	; (8003174 <HAL_UART_RxCpltCallback+0x28c>)
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f003 fe0d 	bl	8006b9e <HAL_UART_Transmit_IT>
			UART1_RxIsData = 0;
 8002f84:	4b7d      	ldr	r3, [pc, #500]	; (800317c <HAL_UART_RxCpltCallback+0x294>)
 8002f86:	701f      	strb	r7, [r3, #0]
			UART1_RxBytes = 2;
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4b7e      	ldr	r3, [pc, #504]	; (8003184 <HAL_UART_RxCpltCallback+0x29c>)
 8002f8c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 8002f8e:	497c      	ldr	r1, [pc, #496]	; (8003180 <HAL_UART_RxCpltCallback+0x298>)
 8002f90:	4630      	mov	r0, r6
 8002f92:	f004 f80c 	bl	8006fae <HAL_UART_Receive_IT>
		memset(UART1_RxBuf, 0, UART_Buffer_size);
 8002f96:	2232      	movs	r2, #50	; 0x32
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4879      	ldr	r0, [pc, #484]	; (8003180 <HAL_UART_RxCpltCallback+0x298>)
 8002f9c:	f005 fce8 	bl	8008970 <memset>
 8002fa0:	e7a8      	b.n	8002ef4 <HAL_UART_RxCpltCallback+0xc>
				UART1_RxBytes = 2;
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	4b77      	ldr	r3, [pc, #476]	; (8003184 <HAL_UART_RxCpltCallback+0x29c>)
 8002fa6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 8002fa8:	4975      	ldr	r1, [pc, #468]	; (8003180 <HAL_UART_RxCpltCallback+0x298>)
 8002faa:	4872      	ldr	r0, [pc, #456]	; (8003174 <HAL_UART_RxCpltCallback+0x28c>)
 8002fac:	f003 ffff 	bl	8006fae <HAL_UART_Receive_IT>
 8002fb0:	e7b7      	b.n	8002f22 <HAL_UART_RxCpltCallback+0x3a>
			switch(Command)
 8002fb2:	2b41      	cmp	r3, #65	; 0x41
 8002fb4:	d06c      	beq.n	8003090 <HAL_UART_RxCpltCallback+0x1a8>
 8002fb6:	d914      	bls.n	8002fe2 <HAL_UART_RxCpltCallback+0xfa>
 8002fb8:	2b42      	cmp	r3, #66	; 0x42
 8002fba:	d06f      	beq.n	800309c <HAL_UART_RxCpltCallback+0x1b4>
 8002fbc:	2b4f      	cmp	r3, #79	; 0x4f
 8002fbe:	d1ea      	bne.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				if((Parameter == 0xCC) && (Rope_cut_status != ROPE_CUTTING))
 8002fc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2bcc      	cmp	r3, #204	; 0xcc
 8002fc8:	d1e5      	bne.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
 8002fca:	4b71      	ldr	r3, [pc, #452]	; (8003190 <HAL_UART_RxCpltCallback+0x2a8>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d0e0      	beq.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
					Rope_cut_status = ROPE_CUTTING;
 8002fd4:	4b6e      	ldr	r3, [pc, #440]	; (8003190 <HAL_UART_RxCpltCallback+0x2a8>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
					Rope_cut_delay = ROPE_CUT_TIME;
 8002fda:	4b6e      	ldr	r3, [pc, #440]	; (8003194 <HAL_UART_RxCpltCallback+0x2ac>)
 8002fdc:	220a      	movs	r2, #10
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	e7d9      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
			switch(Command)
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d01a      	beq.n	800301c <HAL_UART_RxCpltCallback+0x134>
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d10a      	bne.n	8003000 <HAL_UART_RxCpltCallback+0x118>
				if (Parameter == 0)
 8002fea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002fee:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8002ff2:	bb8a      	cbnz	r2, 8003058 <HAL_UART_RxCpltCallback+0x170>
					UART1_TxBuf[0] = 0x02;
 8002ff4:	4a65      	ldr	r2, [pc, #404]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 8002ff6:	2102      	movs	r1, #2
 8002ff8:	7011      	strb	r1, [r2, #0]
					UART1_TxBuf[1] = temp;
 8002ffa:	2117      	movs	r1, #23
 8002ffc:	7051      	strb	r1, [r2, #1]
					for(uint8_t i = 0; i < temp; i++)
 8002ffe:	e023      	b.n	8003048 <HAL_UART_RxCpltCallback+0x160>
			switch(Command)
 8003000:	2b01      	cmp	r3, #1
 8003002:	d1c8      	bne.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				UART1_TxBuf[0] = 0x00;
 8003004:	4d61      	ldr	r5, [pc, #388]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 8003006:	2300      	movs	r3, #0
 8003008:	702b      	strb	r3, [r5, #0]
				UART1_TxBuf[1] = Get_System_Status();
 800300a:	f7ff f9cd 	bl	80023a8 <Get_System_Status>
 800300e:	7068      	strb	r0, [r5, #1]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003010:	2202      	movs	r2, #2
 8003012:	4629      	mov	r1, r5
 8003014:	4857      	ldr	r0, [pc, #348]	; (8003174 <HAL_UART_RxCpltCallback+0x28c>)
 8003016:	f003 fdc2 	bl	8006b9e <HAL_UART_Transmit_IT>
			break;
 800301a:	e7bc      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				UART1_RxIsData = 1;
 800301c:	4b57      	ldr	r3, [pc, #348]	; (800317c <HAL_UART_RxCpltCallback+0x294>)
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
				UART1_RxBytes = Parameter;
 8003022:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4a56      	ldr	r2, [pc, #344]	; (8003184 <HAL_UART_RxCpltCallback+0x29c>)
 800302a:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_IT(&huart1, UART1_RxBuf, Parameter);
 800302c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003030:	4953      	ldr	r1, [pc, #332]	; (8003180 <HAL_UART_RxCpltCallback+0x298>)
 8003032:	4850      	ldr	r0, [pc, #320]	; (8003174 <HAL_UART_RxCpltCallback+0x28c>)
 8003034:	f003 ffbb 	bl	8006fae <HAL_UART_Receive_IT>
			break;
 8003038:	e7ad      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
						UART1_TxBuf[2+i] = message[i];
 800303a:	1c9a      	adds	r2, r3, #2
 800303c:	4956      	ldr	r1, [pc, #344]	; (8003198 <HAL_UART_RxCpltCallback+0x2b0>)
 800303e:	5cc8      	ldrb	r0, [r1, r3]
 8003040:	4952      	ldr	r1, [pc, #328]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 8003042:	5488      	strb	r0, [r1, r2]
					for(uint8_t i = 0; i < temp; i++)
 8003044:	3301      	adds	r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b16      	cmp	r3, #22
 800304a:	d9f6      	bls.n	800303a <HAL_UART_RxCpltCallback+0x152>
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2+temp);
 800304c:	2219      	movs	r2, #25
 800304e:	494f      	ldr	r1, [pc, #316]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 8003050:	4848      	ldr	r0, [pc, #288]	; (8003174 <HAL_UART_RxCpltCallback+0x28c>)
 8003052:	f003 fda4 	bl	8006b9e <HAL_UART_Transmit_IT>
 8003056:	e79e      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
					UART1_TxBuf[0] = 0x02;
 8003058:	4b4c      	ldr	r3, [pc, #304]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 800305a:	2202      	movs	r2, #2
 800305c:	701a      	strb	r2, [r3, #0]
					UART1_TxBuf[1] = Parameter;
 800305e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003062:	705a      	strb	r2, [r3, #1]
					for(uint8_t i = 0; i < Parameter; i++)
 8003064:	2300      	movs	r3, #0
 8003066:	e006      	b.n	8003076 <HAL_UART_RxCpltCallback+0x18e>
						UART1_TxBuf[2+i] = UART1_DataBuf[i];
 8003068:	1c9a      	adds	r2, r3, #2
 800306a:	4947      	ldr	r1, [pc, #284]	; (8003188 <HAL_UART_RxCpltCallback+0x2a0>)
 800306c:	5cc8      	ldrb	r0, [r1, r3]
 800306e:	4947      	ldr	r1, [pc, #284]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 8003070:	5488      	strb	r0, [r1, r2]
					for(uint8_t i = 0; i < Parameter; i++)
 8003072:	3301      	adds	r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	429a      	cmp	r2, r3
 800307e:	d8f3      	bhi.n	8003068 <HAL_UART_RxCpltCallback+0x180>
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2+Parameter);
 8003080:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003084:	3202      	adds	r2, #2
 8003086:	4941      	ldr	r1, [pc, #260]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 8003088:	483a      	ldr	r0, [pc, #232]	; (8003174 <HAL_UART_RxCpltCallback+0x28c>)
 800308a:	f003 fd88 	bl	8006b9e <HAL_UART_Transmit_IT>
 800308e:	e782      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003090:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003094:	4841      	ldr	r0, [pc, #260]	; (800319c <HAL_UART_RxCpltCallback+0x2b4>)
 8003096:	f001 fb80 	bl	800479a <HAL_GPIO_TogglePin>
			break;
 800309a:	e77c      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				sTime.Seconds = UART2_DataBuf[0];
 800309c:	4b40      	ldr	r3, [pc, #256]	; (80031a0 <HAL_UART_RxCpltCallback+0x2b8>)
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	f88d 200e 	strb.w	r2, [sp, #14]
				sTime.Minutes = UART2_DataBuf[1];
 80030a4:	785a      	ldrb	r2, [r3, #1]
 80030a6:	f88d 200d 	strb.w	r2, [sp, #13]
				sTime.Hours = UART2_DataBuf[2];
 80030aa:	789a      	ldrb	r2, [r3, #2]
 80030ac:	f88d 200c 	strb.w	r2, [sp, #12]
				sDate.Date = UART2_DataBuf[3];
 80030b0:	78da      	ldrb	r2, [r3, #3]
 80030b2:	f88d 200a 	strb.w	r2, [sp, #10]
				sDate.Month = UART2_DataBuf[4];
 80030b6:	791a      	ldrb	r2, [r3, #4]
 80030b8:	f88d 2009 	strb.w	r2, [sp, #9]
				sDate.Year = UART2_DataBuf[5];
 80030bc:	795b      	ldrb	r3, [r3, #5]
 80030be:	f88d 300b 	strb.w	r3, [sp, #11]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80030c2:	4d38      	ldr	r5, [pc, #224]	; (80031a4 <HAL_UART_RxCpltCallback+0x2bc>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	a903      	add	r1, sp, #12
 80030c8:	4628      	mov	r0, r5
 80030ca:	f002 fd43 	bl	8005b54 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80030ce:	2201      	movs	r2, #1
 80030d0:	a902      	add	r1, sp, #8
 80030d2:	4628      	mov	r0, r5
 80030d4:	f002 fdbd 	bl	8005c52 <HAL_RTC_SetDate>
			break;
 80030d8:	e75d      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				UART2_TxBuf[0] = 0x01;
 80030da:	4933      	ldr	r1, [pc, #204]	; (80031a8 <HAL_UART_RxCpltCallback+0x2c0>)
 80030dc:	2301      	movs	r3, #1
 80030de:	700b      	strb	r3, [r1, #0]
				UART2_TxBuf[1] = 0x00;
 80030e0:	2300      	movs	r3, #0
 80030e2:	704b      	strb	r3, [r1, #1]
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 2);
 80030e4:	2202      	movs	r2, #2
 80030e6:	4824      	ldr	r0, [pc, #144]	; (8003178 <HAL_UART_RxCpltCallback+0x290>)
 80030e8:	f003 fd59 	bl	8006b9e <HAL_UART_Transmit_IT>
			break;
 80030ec:	e753      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				UART2_TxBuf[0] = 0x02;
 80030ee:	4b2e      	ldr	r3, [pc, #184]	; (80031a8 <HAL_UART_RxCpltCallback+0x2c0>)
 80030f0:	2202      	movs	r2, #2
 80030f2:	701a      	strb	r2, [r3, #0]
				UART2_TxBuf[1] = Parameter;
 80030f4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80030f8:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0; i < Parameter; i++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	e006      	b.n	800310c <HAL_UART_RxCpltCallback+0x224>
					UART2_TxBuf[2+i] = UART1_DataBuf[i];
 80030fe:	1c9a      	adds	r2, r3, #2
 8003100:	4921      	ldr	r1, [pc, #132]	; (8003188 <HAL_UART_RxCpltCallback+0x2a0>)
 8003102:	5cc8      	ldrb	r0, [r1, r3]
 8003104:	4928      	ldr	r1, [pc, #160]	; (80031a8 <HAL_UART_RxCpltCallback+0x2c0>)
 8003106:	5488      	strb	r0, [r1, r2]
				for(uint8_t i = 0; i < Parameter; i++)
 8003108:	3301      	adds	r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	429a      	cmp	r2, r3
 8003114:	d8f3      	bhi.n	80030fe <HAL_UART_RxCpltCallback+0x216>
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 2+Parameter);
 8003116:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800311a:	3202      	adds	r2, #2
 800311c:	4922      	ldr	r1, [pc, #136]	; (80031a8 <HAL_UART_RxCpltCallback+0x2c0>)
 800311e:	4816      	ldr	r0, [pc, #88]	; (8003178 <HAL_UART_RxCpltCallback+0x290>)
 8003120:	f003 fd3d 	bl	8006b9e <HAL_UART_Transmit_IT>
			break;
 8003124:	e737      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				UART2_TxBuf[0] = 0x03;
 8003126:	4920      	ldr	r1, [pc, #128]	; (80031a8 <HAL_UART_RxCpltCallback+0x2c0>)
 8003128:	2303      	movs	r3, #3
 800312a:	700b      	strb	r3, [r1, #0]
				UART2_TxBuf[1] = Parameter;
 800312c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003130:	704b      	strb	r3, [r1, #1]
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 2);
 8003132:	2202      	movs	r2, #2
 8003134:	4810      	ldr	r0, [pc, #64]	; (8003178 <HAL_UART_RxCpltCallback+0x290>)
 8003136:	f003 fd32 	bl	8006b9e <HAL_UART_Transmit_IT>
			break;
 800313a:	e72c      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				UART1_TxBuf[0] = 0x02;
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 800313e:	2202      	movs	r2, #2
 8003140:	701a      	strb	r2, [r3, #0]
				UART1_TxBuf[1] = Parameter;
 8003142:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003146:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0; i < Parameter; i++)
 8003148:	2300      	movs	r3, #0
 800314a:	e006      	b.n	800315a <HAL_UART_RxCpltCallback+0x272>
					UART1_TxBuf[2+i] = UART2_DataBuf[i];
 800314c:	1c9a      	adds	r2, r3, #2
 800314e:	4914      	ldr	r1, [pc, #80]	; (80031a0 <HAL_UART_RxCpltCallback+0x2b8>)
 8003150:	5cc8      	ldrb	r0, [r1, r3]
 8003152:	490e      	ldr	r1, [pc, #56]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 8003154:	5488      	strb	r0, [r1, r2]
				for(uint8_t i = 0; i < Parameter; i++)
 8003156:	3301      	adds	r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	429a      	cmp	r2, r3
 8003162:	d8f3      	bhi.n	800314c <HAL_UART_RxCpltCallback+0x264>
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2+Parameter);
 8003164:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003168:	3202      	adds	r2, #2
 800316a:	4908      	ldr	r1, [pc, #32]	; (800318c <HAL_UART_RxCpltCallback+0x2a4>)
 800316c:	4801      	ldr	r0, [pc, #4]	; (8003174 <HAL_UART_RxCpltCallback+0x28c>)
 800316e:	f003 fd16 	bl	8006b9e <HAL_UART_Transmit_IT>
			break;
 8003172:	e710      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
 8003174:	200007dc 	.word	0x200007dc
 8003178:	20000a9c 	.word	0x20000a9c
 800317c:	200006ac 	.word	0x200006ac
 8003180:	200007a8 	.word	0x200007a8
 8003184:	20000580 	.word	0x20000580
 8003188:	20000674 	.word	0x20000674
 800318c:	200009d8 	.word	0x200009d8
 8003190:	200009d0 	.word	0x200009d0
 8003194:	20000304 	.word	0x20000304
 8003198:	20000008 	.word	0x20000008
 800319c:	40020000 	.word	0x40020000
 80031a0:	20000754 	.word	0x20000754
 80031a4:	200008ac 	.word	0x200008ac
 80031a8:	20000d60 	.word	0x20000d60
				if (sd_mounted == 0)
 80031ac:	4bac      	ldr	r3, [pc, #688]	; (8003460 <HAL_UART_RxCpltCallback+0x578>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b9b3      	cbnz	r3, 80031e0 <HAL_UART_RxCpltCallback+0x2f8>
					sd_status = Mount_open_SD_Card();
 80031b2:	f7ff fa75 	bl	80026a0 <Mount_open_SD_Card>
 80031b6:	4bab      	ldr	r3, [pc, #684]	; (8003464 <HAL_UART_RxCpltCallback+0x57c>)
 80031b8:	7018      	strb	r0, [r3, #0]
					sd_file_cnt = 0;
 80031ba:	4aab      	ldr	r2, [pc, #684]	; (8003468 <HAL_UART_RxCpltCallback+0x580>)
 80031bc:	2100      	movs	r1, #0
 80031be:	7011      	strb	r1, [r2, #0]
					if (sd_status == FR_OK)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b913      	cbnz	r3, 80031ca <HAL_UART_RxCpltCallback+0x2e2>
						sd_mounted = 1;
 80031c4:	4ba6      	ldr	r3, [pc, #664]	; (8003460 <HAL_UART_RxCpltCallback+0x578>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
					UART1_TxBuf[0] = 0xD0;
 80031ca:	49a8      	ldr	r1, [pc, #672]	; (800346c <HAL_UART_RxCpltCallback+0x584>)
 80031cc:	23d0      	movs	r3, #208	; 0xd0
 80031ce:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = sd_status;
 80031d0:	4ba4      	ldr	r3, [pc, #656]	; (8003464 <HAL_UART_RxCpltCallback+0x57c>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80031d6:	2202      	movs	r2, #2
 80031d8:	48a5      	ldr	r0, [pc, #660]	; (8003470 <HAL_UART_RxCpltCallback+0x588>)
 80031da:	f003 fce0 	bl	8006b9e <HAL_UART_Transmit_IT>
 80031de:	e6da      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
					UART1_TxBuf[0] = 0xD0;
 80031e0:	49a2      	ldr	r1, [pc, #648]	; (800346c <HAL_UART_RxCpltCallback+0x584>)
 80031e2:	23d0      	movs	r3, #208	; 0xd0
 80031e4:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = 0xD1;
 80031e6:	23d1      	movs	r3, #209	; 0xd1
 80031e8:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80031ea:	2202      	movs	r2, #2
 80031ec:	48a0      	ldr	r0, [pc, #640]	; (8003470 <HAL_UART_RxCpltCallback+0x588>)
 80031ee:	f003 fcd6 	bl	8006b9e <HAL_UART_Transmit_IT>
 80031f2:	e6d0      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				if (sd_mounted == 1)
 80031f4:	4b9a      	ldr	r3, [pc, #616]	; (8003460 <HAL_UART_RxCpltCallback+0x578>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d008      	beq.n	8003210 <HAL_UART_RxCpltCallback+0x328>
					UART1_TxBuf[0] = 0xD0;
 80031fe:	499b      	ldr	r1, [pc, #620]	; (800346c <HAL_UART_RxCpltCallback+0x584>)
 8003200:	23d0      	movs	r3, #208	; 0xd0
 8003202:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = 0xD0;
 8003204:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003206:	2202      	movs	r2, #2
 8003208:	4899      	ldr	r0, [pc, #612]	; (8003470 <HAL_UART_RxCpltCallback+0x588>)
 800320a:	f003 fcc8 	bl	8006b9e <HAL_UART_Transmit_IT>
 800320e:	e6c2      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
					sd_status = f_close(&fil);
 8003210:	4898      	ldr	r0, [pc, #608]	; (8003474 <HAL_UART_RxCpltCallback+0x58c>)
 8003212:	f005 f9ae 	bl	8008572 <f_close>
 8003216:	4d93      	ldr	r5, [pc, #588]	; (8003464 <HAL_UART_RxCpltCallback+0x57c>)
 8003218:	7028      	strb	r0, [r5, #0]
					sd_status = f_mount(NULL, "", 1);
 800321a:	2201      	movs	r2, #1
 800321c:	4996      	ldr	r1, [pc, #600]	; (8003478 <HAL_UART_RxCpltCallback+0x590>)
 800321e:	2000      	movs	r0, #0
 8003220:	f004 fed6 	bl	8007fd0 <f_mount>
 8003224:	7028      	strb	r0, [r5, #0]
					sd_mounted = 0;
 8003226:	4b8e      	ldr	r3, [pc, #568]	; (8003460 <HAL_UART_RxCpltCallback+0x578>)
 8003228:	2200      	movs	r2, #0
 800322a:	701a      	strb	r2, [r3, #0]
					UART1_TxBuf[0] = 0xD0;
 800322c:	498f      	ldr	r1, [pc, #572]	; (800346c <HAL_UART_RxCpltCallback+0x584>)
 800322e:	23d0      	movs	r3, #208	; 0xd0
 8003230:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = sd_status;
 8003232:	782b      	ldrb	r3, [r5, #0]
 8003234:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003236:	2202      	movs	r2, #2
 8003238:	488d      	ldr	r0, [pc, #564]	; (8003470 <HAL_UART_RxCpltCallback+0x588>)
 800323a:	f003 fcb0 	bl	8006b9e <HAL_UART_Transmit_IT>
 800323e:	e6aa      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
					temp += UART1_DataBuf[i] << ((3 - i)*8);
 8003240:	4a8e      	ldr	r2, [pc, #568]	; (800347c <HAL_UART_RxCpltCallback+0x594>)
 8003242:	5cd2      	ldrb	r2, [r2, r3]
 8003244:	f1c3 0103 	rsb	r1, r3, #3
 8003248:	00c9      	lsls	r1, r1, #3
 800324a:	408a      	lsls	r2, r1
 800324c:	4415      	add	r5, r2
 800324e:	b2ad      	uxth	r5, r5
				for (uint8_t i = 0; i < 4; i++)
 8003250:	3301      	adds	r3, #1
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b03      	cmp	r3, #3
 8003256:	d9f3      	bls.n	8003240 <HAL_UART_RxCpltCallback+0x358>
				HAL_TIM_Base_Stop_IT(&htim4);
 8003258:	4889      	ldr	r0, [pc, #548]	; (8003480 <HAL_UART_RxCpltCallback+0x598>)
 800325a:	f003 f965 	bl	8006528 <HAL_TIM_Base_Stop_IT>
				if(temp > 0)
 800325e:	2d00      	cmp	r5, #0
 8003260:	f43f ae99 	beq.w	8002f96 <HAL_UART_RxCpltCallback+0xae>
					__HAL_TIM_SET_AUTORELOAD(&htim4, temp);
 8003264:	4886      	ldr	r0, [pc, #536]	; (8003480 <HAL_UART_RxCpltCallback+0x598>)
 8003266:	6803      	ldr	r3, [r0, #0]
 8003268:	62dd      	str	r5, [r3, #44]	; 0x2c
 800326a:	60c5      	str	r5, [r0, #12]
					__HAL_TIM_SET_COUNTER(&htim4, 0);
 800326c:	2200      	movs	r2, #0
 800326e:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim4);
 8003270:	f003 f91e 	bl	80064b0 <HAL_TIM_Base_Start_IT>
 8003274:	e68f      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
			switch(Command)
 8003276:	2300      	movs	r3, #0
 8003278:	461d      	mov	r5, r3
 800327a:	e7eb      	b.n	8003254 <HAL_UART_RxCpltCallback+0x36c>
				UART1_TxBuf[0] = 0xD1;
 800327c:	497b      	ldr	r1, [pc, #492]	; (800346c <HAL_UART_RxCpltCallback+0x584>)
 800327e:	23d1      	movs	r3, #209	; 0xd1
 8003280:	700b      	strb	r3, [r1, #0]
				UART1_TxBuf[1] = Sensors.BME280_Internal.ID;
 8003282:	4b80      	ldr	r3, [pc, #512]	; (8003484 <HAL_UART_RxCpltCallback+0x59c>)
 8003284:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8003288:	704a      	strb	r2, [r1, #1]
				UART1_TxBuf[2] = Sensors.BME280_External.ID;
 800328a:	785a      	ldrb	r2, [r3, #1]
 800328c:	708a      	strb	r2, [r1, #2]
				UART1_TxBuf[3] = Sensors.MPU650.ID;
 800328e:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8003292:	70ca      	strb	r2, [r1, #3]
				UART1_TxBuf[4] = Sensors.SI1145.ID;
 8003294:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003298:	710b      	strb	r3, [r1, #4]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 5);
 800329a:	2205      	movs	r2, #5
 800329c:	4874      	ldr	r0, [pc, #464]	; (8003470 <HAL_UART_RxCpltCallback+0x588>)
 800329e:	f003 fc7e 	bl	8006b9e <HAL_UART_Transmit_IT>
			break;
 80032a2:	e678      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				UART1_TxBuf[0] = 0xD2;
 80032a4:	4971      	ldr	r1, [pc, #452]	; (800346c <HAL_UART_RxCpltCallback+0x584>)
 80032a6:	23d2      	movs	r3, #210	; 0xd2
 80032a8:	700b      	strb	r3, [r1, #0]
				UART1_TxBuf[1] = Cycle_runtime_min >> 8;
 80032aa:	4a77      	ldr	r2, [pc, #476]	; (8003488 <HAL_UART_RxCpltCallback+0x5a0>)
 80032ac:	8813      	ldrh	r3, [r2, #0]
 80032ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80032b2:	704b      	strb	r3, [r1, #1]
				UART1_TxBuf[2] = Cycle_runtime_min & 0x00FF;
 80032b4:	8813      	ldrh	r3, [r2, #0]
 80032b6:	708b      	strb	r3, [r1, #2]
				UART1_TxBuf[3] = Cycle_runtime_max >> 8;
 80032b8:	4a74      	ldr	r2, [pc, #464]	; (800348c <HAL_UART_RxCpltCallback+0x5a4>)
 80032ba:	8813      	ldrh	r3, [r2, #0]
 80032bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80032c0:	70cb      	strb	r3, [r1, #3]
				UART1_TxBuf[4] = Cycle_runtime_max & 0x00FF;
 80032c2:	8813      	ldrh	r3, [r2, #0]
 80032c4:	710b      	strb	r3, [r1, #4]
				UART1_TxBuf[5] = Cycle_runtime_last >> 8;
 80032c6:	4a72      	ldr	r2, [pc, #456]	; (8003490 <HAL_UART_RxCpltCallback+0x5a8>)
 80032c8:	8813      	ldrh	r3, [r2, #0]
 80032ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80032ce:	714b      	strb	r3, [r1, #5]
				UART1_TxBuf[6] = Cycle_runtime_last & 0x00FF;
 80032d0:	8813      	ldrh	r3, [r2, #0]
 80032d2:	718b      	strb	r3, [r1, #6]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 7);
 80032d4:	2207      	movs	r2, #7
 80032d6:	4866      	ldr	r0, [pc, #408]	; (8003470 <HAL_UART_RxCpltCallback+0x588>)
 80032d8:	f003 fc61 	bl	8006b9e <HAL_UART_Transmit_IT>
			break;
 80032dc:	e65b      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				Sensors.BME280_Internal.Pressure_ref = 90 + (((double)temp)/1000);
 80032de:	4b67      	ldr	r3, [pc, #412]	; (800347c <HAL_UART_RxCpltCallback+0x594>)
 80032e0:	7818      	ldrb	r0, [r3, #0]
 80032e2:	f7fd f917 	bl	8000514 <__aeabi_ui2d>
 80032e6:	2200      	movs	r2, #0
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <HAL_UART_RxCpltCallback+0x5ac>)
 80032ea:	f7fd fab7 	bl	800085c <__aeabi_ddiv>
 80032ee:	2200      	movs	r2, #0
 80032f0:	4b69      	ldr	r3, [pc, #420]	; (8003498 <HAL_UART_RxCpltCallback+0x5b0>)
 80032f2:	f7fc ffd3 	bl	800029c <__adddf3>
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_UART_RxCpltCallback+0x59c>)
 80032f8:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
				Sensors.BME280_External.Pressure_ref = 90 + (((double)temp)/1000);
 80032fc:	e9c3 0106 	strd	r0, r1, [r3, #24]
			break;
 8003300:	e649      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				CAM_START(&CAM_1);
 8003302:	4866      	ldr	r0, [pc, #408]	; (800349c <HAL_UART_RxCpltCallback+0x5b4>)
 8003304:	f7ff fa70 	bl	80027e8 <CAM_START>
				CAM_START(&CAM_2);
 8003308:	4865      	ldr	r0, [pc, #404]	; (80034a0 <HAL_UART_RxCpltCallback+0x5b8>)
 800330a:	f7ff fa6d 	bl	80027e8 <CAM_START>
			break;
 800330e:	e642      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
				CAM_STOP(&CAM_1);
 8003310:	4862      	ldr	r0, [pc, #392]	; (800349c <HAL_UART_RxCpltCallback+0x5b4>)
 8003312:	f7ff fa90 	bl	8002836 <CAM_STOP>
				CAM_STOP(&CAM_2);
 8003316:	4862      	ldr	r0, [pc, #392]	; (80034a0 <HAL_UART_RxCpltCallback+0x5b8>)
 8003318:	f7ff fa8d 	bl	8002836 <CAM_STOP>
			break;
 800331c:	e63b      	b.n	8002f96 <HAL_UART_RxCpltCallback+0xae>
		if (UART2_RxIsData == 1)
 800331e:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <HAL_UART_RxCpltCallback+0x5bc>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d031      	beq.n	800338c <HAL_UART_RxCpltCallback+0x4a4>
			volatile uint8_t Command = UART2_RxBuf[0];
 8003328:	4b5f      	ldr	r3, [pc, #380]	; (80034a8 <HAL_UART_RxCpltCallback+0x5c0>)
 800332a:	781a      	ldrb	r2, [r3, #0]
 800332c:	f88d 2006 	strb.w	r2, [sp, #6]
			volatile uint8_t Parameter = UART2_RxBuf[1];
 8003330:	785b      	ldrb	r3, [r3, #1]
 8003332:	f88d 3007 	strb.w	r3, [sp, #7]
			if(Command != 0x02)
 8003336:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d127      	bne.n	8003390 <HAL_UART_RxCpltCallback+0x4a8>
			switch(Command)
 8003340:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b03      	cmp	r3, #3
 8003348:	d82a      	bhi.n	80033a0 <HAL_UART_RxCpltCallback+0x4b8>
 800334a:	2b03      	cmp	r3, #3
 800334c:	d818      	bhi.n	8003380 <HAL_UART_RxCpltCallback+0x498>
 800334e:	e8df f003 	tbb	[pc, r3]
 8003352:	483d      	.short	0x483d
 8003354:	6354      	.short	0x6354
				UART2_DataBuf[i] = UART2_RxBuf[i];
 8003356:	4a54      	ldr	r2, [pc, #336]	; (80034a8 <HAL_UART_RxCpltCallback+0x5c0>)
 8003358:	5cd1      	ldrb	r1, [r2, r3]
 800335a:	4a54      	ldr	r2, [pc, #336]	; (80034ac <HAL_UART_RxCpltCallback+0x5c4>)
 800335c:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < UART2_RxBytes; i++)
 800335e:	3301      	adds	r3, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	4a53      	ldr	r2, [pc, #332]	; (80034b0 <HAL_UART_RxCpltCallback+0x5c8>)
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	429a      	cmp	r2, r3
 800336a:	d8f4      	bhi.n	8003356 <HAL_UART_RxCpltCallback+0x46e>
			UART2_RxIsData = 0;
 800336c:	4b4d      	ldr	r3, [pc, #308]	; (80034a4 <HAL_UART_RxCpltCallback+0x5bc>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
			UART2_RxBytes = 2;
 8003372:	2202      	movs	r2, #2
 8003374:	4b4e      	ldr	r3, [pc, #312]	; (80034b0 <HAL_UART_RxCpltCallback+0x5c8>)
 8003376:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, UART2_RxBuf, 2);
 8003378:	494b      	ldr	r1, [pc, #300]	; (80034a8 <HAL_UART_RxCpltCallback+0x5c0>)
 800337a:	484e      	ldr	r0, [pc, #312]	; (80034b4 <HAL_UART_RxCpltCallback+0x5cc>)
 800337c:	f003 fe17 	bl	8006fae <HAL_UART_Receive_IT>
		memset(UART2_RxBuf, 0, UART_Buffer_size);
 8003380:	2232      	movs	r2, #50	; 0x32
 8003382:	2100      	movs	r1, #0
 8003384:	4848      	ldr	r0, [pc, #288]	; (80034a8 <HAL_UART_RxCpltCallback+0x5c0>)
 8003386:	f005 faf3 	bl	8008970 <memset>
}
 800338a:	e5b7      	b.n	8002efc <HAL_UART_RxCpltCallback+0x14>
			for (uint8_t i = 0; i < UART2_RxBytes; i++)
 800338c:	2300      	movs	r3, #0
 800338e:	e7e8      	b.n	8003362 <HAL_UART_RxCpltCallback+0x47a>
				UART2_RxBytes = 2;
 8003390:	2202      	movs	r2, #2
 8003392:	4b47      	ldr	r3, [pc, #284]	; (80034b0 <HAL_UART_RxCpltCallback+0x5c8>)
 8003394:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart2, UART2_RxBuf, 2);
 8003396:	4944      	ldr	r1, [pc, #272]	; (80034a8 <HAL_UART_RxCpltCallback+0x5c0>)
 8003398:	4846      	ldr	r0, [pc, #280]	; (80034b4 <HAL_UART_RxCpltCallback+0x5cc>)
 800339a:	f003 fe08 	bl	8006fae <HAL_UART_Receive_IT>
 800339e:	e7cf      	b.n	8003340 <HAL_UART_RxCpltCallback+0x458>
			switch(Command)
 80033a0:	2b42      	cmp	r3, #66	; 0x42
 80033a2:	f000 8091 	beq.w	80034c8 <HAL_UART_RxCpltCallback+0x5e0>
 80033a6:	2b4f      	cmp	r3, #79	; 0x4f
 80033a8:	d1ea      	bne.n	8003380 <HAL_UART_RxCpltCallback+0x498>
				if((Parameter == 0xCC) && (Rope_cut_status != ROPE_CUTTING))
 80033aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2bcc      	cmp	r3, #204	; 0xcc
 80033b2:	d1e5      	bne.n	8003380 <HAL_UART_RxCpltCallback+0x498>
 80033b4:	4b40      	ldr	r3, [pc, #256]	; (80034b8 <HAL_UART_RxCpltCallback+0x5d0>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d0e0      	beq.n	8003380 <HAL_UART_RxCpltCallback+0x498>
					Rope_cut_status = ROPE_CUTTING;
 80033be:	4b3e      	ldr	r3, [pc, #248]	; (80034b8 <HAL_UART_RxCpltCallback+0x5d0>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
					Rope_cut_delay = ROPE_CUT_TIME;
 80033c4:	4b3d      	ldr	r3, [pc, #244]	; (80034bc <HAL_UART_RxCpltCallback+0x5d4>)
 80033c6:	220a      	movs	r2, #10
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e7d9      	b.n	8003380 <HAL_UART_RxCpltCallback+0x498>
				UART1_TxBuf[0] = 0x00;
 80033cc:	4927      	ldr	r1, [pc, #156]	; (800346c <HAL_UART_RxCpltCallback+0x584>)
 80033ce:	2300      	movs	r3, #0
 80033d0:	700b      	strb	r3, [r1, #0]
				UART1_TxBuf[1] = Parameter;
 80033d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033d6:	704b      	strb	r3, [r1, #1]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80033d8:	2202      	movs	r2, #2
 80033da:	4825      	ldr	r0, [pc, #148]	; (8003470 <HAL_UART_RxCpltCallback+0x588>)
 80033dc:	f003 fbdf 	bl	8006b9e <HAL_UART_Transmit_IT>
			break;
 80033e0:	e7ce      	b.n	8003380 <HAL_UART_RxCpltCallback+0x498>
				UART2_TxBuf[0] = 0x00;
 80033e2:	4c37      	ldr	r4, [pc, #220]	; (80034c0 <HAL_UART_RxCpltCallback+0x5d8>)
 80033e4:	2300      	movs	r3, #0
 80033e6:	7023      	strb	r3, [r4, #0]
				UART2_TxBuf[1] = Get_System_Status();
 80033e8:	f7fe ffde 	bl	80023a8 <Get_System_Status>
 80033ec:	7060      	strb	r0, [r4, #1]
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 2);
 80033ee:	2202      	movs	r2, #2
 80033f0:	4621      	mov	r1, r4
 80033f2:	4830      	ldr	r0, [pc, #192]	; (80034b4 <HAL_UART_RxCpltCallback+0x5cc>)
 80033f4:	f003 fbd3 	bl	8006b9e <HAL_UART_Transmit_IT>
			break;
 80033f8:	e7c2      	b.n	8003380 <HAL_UART_RxCpltCallback+0x498>
				UART2_RxIsData = 1;
 80033fa:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <HAL_UART_RxCpltCallback+0x5bc>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
				UART2_RxBytes = Parameter;
 8003400:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <HAL_UART_RxCpltCallback+0x5c8>)
 8003408:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_IT(&huart2, UART2_RxBuf, Parameter);
 800340a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800340e:	4926      	ldr	r1, [pc, #152]	; (80034a8 <HAL_UART_RxCpltCallback+0x5c0>)
 8003410:	4828      	ldr	r0, [pc, #160]	; (80034b4 <HAL_UART_RxCpltCallback+0x5cc>)
 8003412:	f003 fdcc 	bl	8006fae <HAL_UART_Receive_IT>
			break;
 8003416:	e7b3      	b.n	8003380 <HAL_UART_RxCpltCallback+0x498>
				if(Parameter == 0x99)
 8003418:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b99      	cmp	r3, #153	; 0x99
 8003420:	d1ae      	bne.n	8003380 <HAL_UART_RxCpltCallback+0x498>
					Data_to_send[0] = ',';
 8003422:	4828      	ldr	r0, [pc, #160]	; (80034c4 <HAL_UART_RxCpltCallback+0x5dc>)
 8003424:	232c      	movs	r3, #44	; 0x2c
 8003426:	7003      	strb	r3, [r0, #0]
					temp = strlen(Data_to_send);
 8003428:	f7fc feda 	bl	80001e0 <strlen>
 800342c:	b2c4      	uxtb	r4, r0
					UART2_TxBuf[0] = 0x02;
 800342e:	4d24      	ldr	r5, [pc, #144]	; (80034c0 <HAL_UART_RxCpltCallback+0x5d8>)
 8003430:	2302      	movs	r3, #2
 8003432:	702b      	strb	r3, [r5, #0]
					UART2_TxBuf[1] = temp+1;
 8003434:	1c63      	adds	r3, r4, #1
 8003436:	706b      	strb	r3, [r5, #1]
					UART2_TxBuf[2] = Get_System_Status();
 8003438:	f7fe ffb6 	bl	80023a8 <Get_System_Status>
 800343c:	70a8      	strb	r0, [r5, #2]
					for(uint8_t i = 0; i < temp; i++)
 800343e:	2300      	movs	r3, #0
 8003440:	42a3      	cmp	r3, r4
 8003442:	d207      	bcs.n	8003454 <HAL_UART_RxCpltCallback+0x56c>
						UART2_TxBuf[3+i] = Data_to_send[i];
 8003444:	1cda      	adds	r2, r3, #3
 8003446:	491f      	ldr	r1, [pc, #124]	; (80034c4 <HAL_UART_RxCpltCallback+0x5dc>)
 8003448:	5cc8      	ldrb	r0, [r1, r3]
 800344a:	491d      	ldr	r1, [pc, #116]	; (80034c0 <HAL_UART_RxCpltCallback+0x5d8>)
 800344c:	5488      	strb	r0, [r1, r2]
					for(uint8_t i = 0; i < temp; i++)
 800344e:	3301      	adds	r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e7f5      	b.n	8003440 <HAL_UART_RxCpltCallback+0x558>
					HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 3+temp);
 8003454:	1ce2      	adds	r2, r4, #3
 8003456:	491a      	ldr	r1, [pc, #104]	; (80034c0 <HAL_UART_RxCpltCallback+0x5d8>)
 8003458:	4816      	ldr	r0, [pc, #88]	; (80034b4 <HAL_UART_RxCpltCallback+0x5cc>)
 800345a:	f003 fba0 	bl	8006b9e <HAL_UART_Transmit_IT>
 800345e:	e78f      	b.n	8003380 <HAL_UART_RxCpltCallback+0x498>
 8003460:	20000888 	.word	0x20000888
 8003464:	20000820 	.word	0x20000820
 8003468:	200007da 	.word	0x200007da
 800346c:	200009d8 	.word	0x200009d8
 8003470:	200007dc 	.word	0x200007dc
 8003474:	20000ae8 	.word	0x20000ae8
 8003478:	0800c7b4 	.word	0x0800c7b4
 800347c:	20000674 	.word	0x20000674
 8003480:	20000308 	.word	0x20000308
 8003484:	200008d0 	.word	0x200008d0
 8003488:	200006ae 	.word	0x200006ae
 800348c:	20000750 	.word	0x20000750
 8003490:	20000d92 	.word	0x20000d92
 8003494:	408f4000 	.word	0x408f4000
 8003498:	40568000 	.word	0x40568000
 800349c:	2000088c 	.word	0x2000088c
 80034a0:	20000788 	.word	0x20000788
 80034a4:	200006a6 	.word	0x200006a6
 80034a8:	20000a0c 	.word	0x20000a0c
 80034ac:	20000754 	.word	0x20000754
 80034b0:	20000740 	.word	0x20000740
 80034b4:	20000a9c 	.word	0x20000a9c
 80034b8:	200009d0 	.word	0x200009d0
 80034bc:	20000304 	.word	0x20000304
 80034c0:	20000d60 	.word	0x20000d60
 80034c4:	20000d18 	.word	0x20000d18
				sTime.Seconds = UART2_DataBuf[0];
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <HAL_UART_RxCpltCallback+0x620>)
 80034ca:	781a      	ldrb	r2, [r3, #0]
 80034cc:	f88d 200e 	strb.w	r2, [sp, #14]
				sTime.Minutes = UART2_DataBuf[1];
 80034d0:	785a      	ldrb	r2, [r3, #1]
 80034d2:	f88d 200d 	strb.w	r2, [sp, #13]
				sTime.Hours = UART2_DataBuf[2];
 80034d6:	789a      	ldrb	r2, [r3, #2]
 80034d8:	f88d 200c 	strb.w	r2, [sp, #12]
				sDate.Date = UART2_DataBuf[3];
 80034dc:	78da      	ldrb	r2, [r3, #3]
 80034de:	f88d 200a 	strb.w	r2, [sp, #10]
				sDate.Month = UART2_DataBuf[4];
 80034e2:	791a      	ldrb	r2, [r3, #4]
 80034e4:	f88d 2009 	strb.w	r2, [sp, #9]
				sDate.Year = UART2_DataBuf[5];
 80034e8:	795b      	ldrb	r3, [r3, #5]
 80034ea:	f88d 300b 	strb.w	r3, [sp, #11]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80034ee:	4c07      	ldr	r4, [pc, #28]	; (800350c <HAL_UART_RxCpltCallback+0x624>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	a903      	add	r1, sp, #12
 80034f4:	4620      	mov	r0, r4
 80034f6:	f002 fb2d 	bl	8005b54 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80034fa:	2201      	movs	r2, #1
 80034fc:	a902      	add	r1, sp, #8
 80034fe:	4620      	mov	r0, r4
 8003500:	f002 fba7 	bl	8005c52 <HAL_RTC_SetDate>
			break;
 8003504:	e73c      	b.n	8003380 <HAL_UART_RxCpltCallback+0x498>
 8003506:	bf00      	nop
 8003508:	20000754 	.word	0x20000754
 800350c:	200008ac 	.word	0x200008ac

08003510 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003510:	b510      	push	{r4, lr}
 8003512:	4604      	mov	r4, r0
	if(huart == &huart1)
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <HAL_UART_ErrorCallback+0x30>)
 8003516:	4298      	cmp	r0, r3
 8003518:	d003      	beq.n	8003522 <HAL_UART_ErrorCallback+0x12>
	{
		HAL_UART_Receive_IT(&huart1, UART1_RxBuf, UART1_RxBytes);
	}

	if(huart == &huart2)
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_UART_ErrorCallback+0x34>)
 800351c:	429c      	cmp	r4, r3
 800351e:	d007      	beq.n	8003530 <HAL_UART_ErrorCallback+0x20>
	{
		HAL_UART_Receive_IT(&huart2, UART2_RxBuf, UART2_RxBytes);
	}
}
 8003520:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_IT(&huart1, UART1_RxBuf, UART1_RxBytes);
 8003522:	4b09      	ldr	r3, [pc, #36]	; (8003548 <HAL_UART_ErrorCallback+0x38>)
 8003524:	781a      	ldrb	r2, [r3, #0]
 8003526:	4909      	ldr	r1, [pc, #36]	; (800354c <HAL_UART_ErrorCallback+0x3c>)
 8003528:	4805      	ldr	r0, [pc, #20]	; (8003540 <HAL_UART_ErrorCallback+0x30>)
 800352a:	f003 fd40 	bl	8006fae <HAL_UART_Receive_IT>
 800352e:	e7f4      	b.n	800351a <HAL_UART_ErrorCallback+0xa>
		HAL_UART_Receive_IT(&huart2, UART2_RxBuf, UART2_RxBytes);
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_UART_ErrorCallback+0x40>)
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	4907      	ldr	r1, [pc, #28]	; (8003554 <HAL_UART_ErrorCallback+0x44>)
 8003536:	4803      	ldr	r0, [pc, #12]	; (8003544 <HAL_UART_ErrorCallback+0x34>)
 8003538:	f003 fd39 	bl	8006fae <HAL_UART_Receive_IT>
}
 800353c:	e7f0      	b.n	8003520 <HAL_UART_ErrorCallback+0x10>
 800353e:	bf00      	nop
 8003540:	200007dc 	.word	0x200007dc
 8003544:	20000a9c 	.word	0x20000a9c
 8003548:	20000580 	.word	0x20000580
 800354c:	200007a8 	.word	0x200007a8
 8003550:	20000740 	.word	0x20000740
 8003554:	20000a0c 	.word	0x20000a0c

08003558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003558:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800355a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	UART1_TxBuf[0] = 0xEE;
 800355c:	4c05      	ldr	r4, [pc, #20]	; (8003574 <Error_Handler+0x1c>)
 800355e:	23ee      	movs	r3, #238	; 0xee
 8003560:	7023      	strb	r3, [r4, #0]
	UART1_TxBuf[1] = Get_System_Status();
 8003562:	f7fe ff21 	bl	80023a8 <Get_System_Status>
 8003566:	7060      	strb	r0, [r4, #1]
	HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003568:	2202      	movs	r2, #2
 800356a:	4621      	mov	r1, r4
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <Error_Handler+0x20>)
 800356e:	f003 fb16 	bl	8006b9e <HAL_UART_Transmit_IT>
  while (1)
 8003572:	e7fe      	b.n	8003572 <Error_Handler+0x1a>
 8003574:	200009d8 	.word	0x200009d8
 8003578:	200007dc 	.word	0x200007dc

0800357c <MX_USART2_UART_Init>:
{
 800357c:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800357e:	480a      	ldr	r0, [pc, #40]	; (80035a8 <MX_USART2_UART_Init+0x2c>)
 8003580:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <MX_USART2_UART_Init+0x30>)
 8003582:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003584:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003588:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800358a:	2300      	movs	r3, #0
 800358c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800358e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003590:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003592:	220c      	movs	r2, #12
 8003594:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003596:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003598:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800359a:	f003 fad1 	bl	8006b40 <HAL_UART_Init>
 800359e:	b900      	cbnz	r0, 80035a2 <MX_USART2_UART_Init+0x26>
}
 80035a0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80035a2:	f7ff ffd9 	bl	8003558 <Error_Handler>
 80035a6:	bf00      	nop
 80035a8:	20000a9c 	.word	0x20000a9c
 80035ac:	40004400 	.word	0x40004400

080035b0 <MX_TIM4_Init>:
{
 80035b0:	b500      	push	{lr}
 80035b2:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b4:	2300      	movs	r3, #0
 80035b6:	9308      	str	r3, [sp, #32]
 80035b8:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035ba:	9301      	str	r3, [sp, #4]
 80035bc:	9302      	str	r3, [sp, #8]
 80035be:	9303      	str	r3, [sp, #12]
 80035c0:	9304      	str	r3, [sp, #16]
 80035c2:	9305      	str	r3, [sp, #20]
 80035c4:	9306      	str	r3, [sp, #24]
 80035c6:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80035c8:	4814      	ldr	r0, [pc, #80]	; (800361c <MX_TIM4_Init+0x6c>)
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <MX_TIM4_Init+0x70>)
 80035cc:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 16000;
 80035ce:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80035d2:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d4:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 500;
 80035d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035da:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035dc:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035de:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80035e0:	f003 f8f6 	bl	80067d0 <HAL_TIM_OC_Init>
 80035e4:	b9a0      	cbnz	r0, 8003610 <MX_TIM4_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035ea:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035ec:	a908      	add	r1, sp, #32
 80035ee:	480b      	ldr	r0, [pc, #44]	; (800361c <MX_TIM4_Init+0x6c>)
 80035f0:	f003 f97c 	bl	80068ec <HAL_TIMEx_MasterConfigSynchronization>
 80035f4:	b970      	cbnz	r0, 8003614 <MX_TIM4_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80035f6:	2200      	movs	r2, #0
 80035f8:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 80035fa:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035fc:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035fe:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003600:	a901      	add	r1, sp, #4
 8003602:	4806      	ldr	r0, [pc, #24]	; (800361c <MX_TIM4_Init+0x6c>)
 8003604:	f003 f942 	bl	800688c <HAL_TIM_OC_ConfigChannel>
 8003608:	b930      	cbnz	r0, 8003618 <MX_TIM4_Init+0x68>
}
 800360a:	b00b      	add	sp, #44	; 0x2c
 800360c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003610:	f7ff ffa2 	bl	8003558 <Error_Handler>
    Error_Handler();
 8003614:	f7ff ffa0 	bl	8003558 <Error_Handler>
    Error_Handler();
 8003618:	f7ff ff9e 	bl	8003558 <Error_Handler>
 800361c:	20000308 	.word	0x20000308
 8003620:	40000800 	.word	0x40000800

08003624 <MX_USART1_UART_Init>:
{
 8003624:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003626:	480a      	ldr	r0, [pc, #40]	; (8003650 <MX_USART1_UART_Init+0x2c>)
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <MX_USART1_UART_Init+0x30>)
 800362a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800362c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003630:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003632:	2300      	movs	r3, #0
 8003634:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003636:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003638:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800363a:	220c      	movs	r2, #12
 800363c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800363e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003640:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003642:	f003 fa7d 	bl	8006b40 <HAL_UART_Init>
 8003646:	b900      	cbnz	r0, 800364a <MX_USART1_UART_Init+0x26>
}
 8003648:	bd08      	pop	{r3, pc}
    Error_Handler();
 800364a:	f7ff ff85 	bl	8003558 <Error_Handler>
 800364e:	bf00      	nop
 8003650:	200007dc 	.word	0x200007dc
 8003654:	40011000 	.word	0x40011000

08003658 <MX_SPI1_Init>:
{
 8003658:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800365a:	480d      	ldr	r0, [pc, #52]	; (8003690 <MX_SPI1_Init+0x38>)
 800365c:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <MX_SPI1_Init+0x3c>)
 800365e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003660:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003664:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003666:	2300      	movs	r3, #0
 8003668:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800366a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800366c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800366e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003670:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003674:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003676:	2230      	movs	r2, #48	; 0x30
 8003678:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800367a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800367c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800367e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003680:	230a      	movs	r3, #10
 8003682:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003684:	f002 fc3e 	bl	8005f04 <HAL_SPI_Init>
 8003688:	b900      	cbnz	r0, 800368c <MX_SPI1_Init+0x34>
}
 800368a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800368c:	f7ff ff64 	bl	8003558 <Error_Handler>
 8003690:	20000a44 	.word	0x20000a44
 8003694:	40013000 	.word	0x40013000

08003698 <MX_RTC_Init>:
{
 8003698:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 800369a:	4809      	ldr	r0, [pc, #36]	; (80036c0 <MX_RTC_Init+0x28>)
 800369c:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <MX_RTC_Init+0x2c>)
 800369e:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036a0:	2300      	movs	r3, #0
 80036a2:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80036a4:	227f      	movs	r2, #127	; 0x7f
 80036a6:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036ac:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036ae:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036b0:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036b2:	f002 f9e2 	bl	8005a7a <HAL_RTC_Init>
 80036b6:	b900      	cbnz	r0, 80036ba <MX_RTC_Init+0x22>
}
 80036b8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80036ba:	f7ff ff4d 	bl	8003558 <Error_Handler>
 80036be:	bf00      	nop
 80036c0:	200008ac 	.word	0x200008ac
 80036c4:	40002800 	.word	0x40002800

080036c8 <MX_TIM3_Init>:
{
 80036c8:	b500      	push	{lr}
 80036ca:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036cc:	2300      	movs	r3, #0
 80036ce:	9308      	str	r3, [sp, #32]
 80036d0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	9303      	str	r3, [sp, #12]
 80036d8:	9304      	str	r3, [sp, #16]
 80036da:	9305      	str	r3, [sp, #20]
 80036dc:	9306      	str	r3, [sp, #24]
 80036de:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80036e0:	4814      	ldr	r0, [pc, #80]	; (8003734 <MX_TIM3_Init+0x6c>)
 80036e2:	4a15      	ldr	r2, [pc, #84]	; (8003738 <MX_TIM3_Init+0x70>)
 80036e4:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 16000;
 80036e6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80036ea:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ec:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 80036ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036f2:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f4:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80036f8:	f003 f86a 	bl	80067d0 <HAL_TIM_OC_Init>
 80036fc:	b9a0      	cbnz	r0, 8003728 <MX_TIM3_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003702:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003704:	a908      	add	r1, sp, #32
 8003706:	480b      	ldr	r0, [pc, #44]	; (8003734 <MX_TIM3_Init+0x6c>)
 8003708:	f003 f8f0 	bl	80068ec <HAL_TIMEx_MasterConfigSynchronization>
 800370c:	b970      	cbnz	r0, 800372c <MX_TIM3_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800370e:	2200      	movs	r2, #0
 8003710:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003712:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003714:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003716:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003718:	a901      	add	r1, sp, #4
 800371a:	4806      	ldr	r0, [pc, #24]	; (8003734 <MX_TIM3_Init+0x6c>)
 800371c:	f003 f8b6 	bl	800688c <HAL_TIM_OC_ConfigChannel>
 8003720:	b930      	cbnz	r0, 8003730 <MX_TIM3_Init+0x68>
}
 8003722:	b00b      	add	sp, #44	; 0x2c
 8003724:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003728:	f7ff ff16 	bl	8003558 <Error_Handler>
    Error_Handler();
 800372c:	f7ff ff14 	bl	8003558 <Error_Handler>
    Error_Handler();
 8003730:	f7ff ff12 	bl	8003558 <Error_Handler>
 8003734:	200006f8 	.word	0x200006f8
 8003738:	40000400 	.word	0x40000400

0800373c <MX_I2C1_Init>:
{
 800373c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800373e:	480a      	ldr	r0, [pc, #40]	; (8003768 <MX_I2C1_Init+0x2c>)
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <MX_I2C1_Init+0x30>)
 8003742:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003744:	4b0a      	ldr	r3, [pc, #40]	; (8003770 <MX_I2C1_Init+0x34>)
 8003746:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003748:	2300      	movs	r3, #0
 800374a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800374c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800374e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003752:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003754:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003756:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003758:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800375a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800375c:	f001 fa7c 	bl	8004c58 <HAL_I2C_Init>
 8003760:	b900      	cbnz	r0, 8003764 <MX_I2C1_Init+0x28>
}
 8003762:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003764:	f7ff fef8 	bl	8003558 <Error_Handler>
 8003768:	20000584 	.word	0x20000584
 800376c:	40005400 	.word	0x40005400
 8003770:	000186a0 	.word	0x000186a0

08003774 <MX_I2C2_Init>:
{
 8003774:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8003776:	480a      	ldr	r0, [pc, #40]	; (80037a0 <MX_I2C2_Init+0x2c>)
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <MX_I2C2_Init+0x30>)
 800377a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <MX_I2C2_Init+0x34>)
 800377e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003780:	2300      	movs	r3, #0
 8003782:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003784:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800378a:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800378c:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800378e:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003790:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003792:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003794:	f001 fa60 	bl	8004c58 <HAL_I2C_Init>
 8003798:	b900      	cbnz	r0, 800379c <MX_I2C2_Init+0x28>
}
 800379a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800379c:	f7ff fedc 	bl	8003558 <Error_Handler>
 80037a0:	20000620 	.word	0x20000620
 80037a4:	40005800 	.word	0x40005800
 80037a8:	000186a0 	.word	0x000186a0

080037ac <MX_TIM5_Init>:
{
 80037ac:	b500      	push	{lr}
 80037ae:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b0:	2300      	movs	r3, #0
 80037b2:	9308      	str	r3, [sp, #32]
 80037b4:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	9302      	str	r3, [sp, #8]
 80037ba:	9303      	str	r3, [sp, #12]
 80037bc:	9304      	str	r3, [sp, #16]
 80037be:	9305      	str	r3, [sp, #20]
 80037c0:	9306      	str	r3, [sp, #24]
 80037c2:	9307      	str	r3, [sp, #28]
  htim5.Instance = TIM5;
 80037c4:	4814      	ldr	r0, [pc, #80]	; (8003818 <MX_TIM5_Init+0x6c>)
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <MX_TIM5_Init+0x70>)
 80037c8:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 16000;
 80037ca:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80037ce:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d0:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 5000;
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d8:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037da:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80037dc:	f002 fff8 	bl	80067d0 <HAL_TIM_OC_Init>
 80037e0:	b9a0      	cbnz	r0, 800380c <MX_TIM5_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80037e8:	a908      	add	r1, sp, #32
 80037ea:	480b      	ldr	r0, [pc, #44]	; (8003818 <MX_TIM5_Init+0x6c>)
 80037ec:	f003 f87e 	bl	80068ec <HAL_TIMEx_MasterConfigSynchronization>
 80037f0:	b970      	cbnz	r0, 8003810 <MX_TIM5_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80037f2:	2200      	movs	r2, #0
 80037f4:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 80037f6:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037f8:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037fa:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037fc:	a901      	add	r1, sp, #4
 80037fe:	4806      	ldr	r0, [pc, #24]	; (8003818 <MX_TIM5_Init+0x6c>)
 8003800:	f003 f844 	bl	800688c <HAL_TIM_OC_ConfigChannel>
 8003804:	b930      	cbnz	r0, 8003814 <MX_TIM5_Init+0x68>
}
 8003806:	b00b      	add	sp, #44	; 0x2c
 8003808:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800380c:	f7ff fea4 	bl	8003558 <Error_Handler>
    Error_Handler();
 8003810:	f7ff fea2 	bl	8003558 <Error_Handler>
    Error_Handler();
 8003814:	f7ff fea0 	bl	8003558 <Error_Handler>
 8003818:	200006b0 	.word	0x200006b0
 800381c:	40000c00 	.word	0x40000c00

08003820 <MX_TIM9_Init>:
{
 8003820:	b500      	push	{lr}
 8003822:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003824:	2300      	movs	r3, #0
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	9302      	str	r3, [sp, #8]
 800382a:	9303      	str	r3, [sp, #12]
 800382c:	9304      	str	r3, [sp, #16]
 800382e:	9305      	str	r3, [sp, #20]
 8003830:	9306      	str	r3, [sp, #24]
 8003832:	9307      	str	r3, [sp, #28]
  htim9.Instance = TIM9;
 8003834:	480f      	ldr	r0, [pc, #60]	; (8003874 <MX_TIM9_Init+0x54>)
 8003836:	4a10      	ldr	r2, [pc, #64]	; (8003878 <MX_TIM9_Init+0x58>)
 8003838:	6002      	str	r2, [r0, #0]
  htim9.Init.Prescaler = 16000;
 800383a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800383e:	6042      	str	r2, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003840:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 5000;
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003848:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800384a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 800384c:	f002 ffc0 	bl	80067d0 <HAL_TIM_OC_Init>
 8003850:	b960      	cbnz	r0, 800386c <MX_TIM9_Init+0x4c>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003852:	2200      	movs	r2, #0
 8003854:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003856:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003858:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800385a:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800385c:	a901      	add	r1, sp, #4
 800385e:	4805      	ldr	r0, [pc, #20]	; (8003874 <MX_TIM9_Init+0x54>)
 8003860:	f003 f814 	bl	800688c <HAL_TIM_OC_ConfigChannel>
 8003864:	b920      	cbnz	r0, 8003870 <MX_TIM9_Init+0x50>
}
 8003866:	b009      	add	sp, #36	; 0x24
 8003868:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800386c:	f7ff fe74 	bl	8003558 <Error_Handler>
    Error_Handler();
 8003870:	f7ff fe72 	bl	8003558 <Error_Handler>
 8003874:	20000988 	.word	0x20000988
 8003878:	40014000 	.word	0x40014000

0800387c <MX_TIM10_Init>:
{
 800387c:	b500      	push	{lr}
 800387e:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003880:	2300      	movs	r3, #0
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	9302      	str	r3, [sp, #8]
 8003886:	9303      	str	r3, [sp, #12]
 8003888:	9304      	str	r3, [sp, #16]
 800388a:	9305      	str	r3, [sp, #20]
 800388c:	9306      	str	r3, [sp, #24]
 800388e:	9307      	str	r3, [sp, #28]
  htim10.Instance = TIM10;
 8003890:	4812      	ldr	r0, [pc, #72]	; (80038dc <MX_TIM10_Init+0x60>)
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <MX_TIM10_Init+0x64>)
 8003894:	6002      	str	r2, [r0, #0]
  htim10.Init.Prescaler = 16000;
 8003896:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800389a:	6042      	str	r2, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800389c:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 1000;
 800389e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038a2:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a4:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80038a8:	f002 ff66 	bl	8006778 <HAL_TIM_Base_Init>
 80038ac:	b980      	cbnz	r0, 80038d0 <MX_TIM10_Init+0x54>
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80038ae:	480b      	ldr	r0, [pc, #44]	; (80038dc <MX_TIM10_Init+0x60>)
 80038b0:	f002 ff8e 	bl	80067d0 <HAL_TIM_OC_Init>
 80038b4:	b970      	cbnz	r0, 80038d4 <MX_TIM10_Init+0x58>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80038b6:	2200      	movs	r2, #0
 80038b8:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 80038ba:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038bc:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038be:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038c0:	a901      	add	r1, sp, #4
 80038c2:	4806      	ldr	r0, [pc, #24]	; (80038dc <MX_TIM10_Init+0x60>)
 80038c4:	f002 ffe2 	bl	800688c <HAL_TIM_OC_ConfigChannel>
 80038c8:	b930      	cbnz	r0, 80038d8 <MX_TIM10_Init+0x5c>
}
 80038ca:	b009      	add	sp, #36	; 0x24
 80038cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80038d0:	f7ff fe42 	bl	8003558 <Error_Handler>
    Error_Handler();
 80038d4:	f7ff fe40 	bl	8003558 <Error_Handler>
    Error_Handler();
 80038d8:	f7ff fe3e 	bl	8003558 <Error_Handler>
 80038dc:	200005d8 	.word	0x200005d8
 80038e0:	40014400 	.word	0x40014400

080038e4 <SystemClock_Config>:
{
 80038e4:	b500      	push	{lr}
 80038e6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038e8:	2230      	movs	r2, #48	; 0x30
 80038ea:	2100      	movs	r1, #0
 80038ec:	a808      	add	r0, sp, #32
 80038ee:	f005 f83f 	bl	8008970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038f2:	2300      	movs	r3, #0
 80038f4:	9303      	str	r3, [sp, #12]
 80038f6:	9304      	str	r3, [sp, #16]
 80038f8:	9305      	str	r3, [sp, #20]
 80038fa:	9306      	str	r3, [sp, #24]
 80038fc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <SystemClock_Config+0x8c>)
 8003902:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003904:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003908:	6411      	str	r1, [r2, #64]	; 0x40
 800390a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800390c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003910:	9201      	str	r2, [sp, #4]
 8003912:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003914:	9302      	str	r3, [sp, #8]
 8003916:	4917      	ldr	r1, [pc, #92]	; (8003974 <SystemClock_Config+0x90>)
 8003918:	680a      	ldr	r2, [r1, #0]
 800391a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800391e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003922:	600a      	str	r2, [r1, #0]
 8003924:	680a      	ldr	r2, [r1, #0]
 8003926:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800392a:	9202      	str	r2, [sp, #8]
 800392c:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800392e:	220a      	movs	r2, #10
 8003930:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003932:	2201      	movs	r2, #1
 8003934:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003936:	2110      	movs	r1, #16
 8003938:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800393a:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800393c:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800393e:	a808      	add	r0, sp, #32
 8003940:	f001 fc8c 	bl	800525c <HAL_RCC_OscConfig>
 8003944:	b978      	cbnz	r0, 8003966 <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003946:	230f      	movs	r3, #15
 8003948:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800394a:	2100      	movs	r1, #0
 800394c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800394e:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003954:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003956:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003958:	a803      	add	r0, sp, #12
 800395a:	f001 fecb 	bl	80056f4 <HAL_RCC_ClockConfig>
 800395e:	b920      	cbnz	r0, 800396a <SystemClock_Config+0x86>
}
 8003960:	b015      	add	sp, #84	; 0x54
 8003962:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003966:	f7ff fdf7 	bl	8003558 <Error_Handler>
    Error_Handler();
 800396a:	f7ff fdf5 	bl	8003558 <Error_Handler>
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800
 8003974:	40007000 	.word	0x40007000

08003978 <main>:
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 800397c:	f000 fd20 	bl	80043c0 <HAL_Init>
  SystemClock_Config();
 8003980:	f7ff ffb0 	bl	80038e4 <SystemClock_Config>
  MX_GPIO_Init();
 8003984:	f7fe fc8e 	bl	80022a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003988:	f7ff fdf8 	bl	800357c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800398c:	f7ff fe10 	bl	80035b0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003990:	f7ff fe48 	bl	8003624 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8003994:	f7ff fe60 	bl	8003658 <MX_SPI1_Init>
  MX_RTC_Init();
 8003998:	f7ff fe7e 	bl	8003698 <MX_RTC_Init>
  MX_FATFS_Init();
 800399c:	f003 fb24 	bl	8006fe8 <MX_FATFS_Init>
  MX_TIM3_Init();
 80039a0:	f7ff fe92 	bl	80036c8 <MX_TIM3_Init>
  MX_I2C1_Init();
 80039a4:	f7ff feca 	bl	800373c <MX_I2C1_Init>
  MX_I2C2_Init();
 80039a8:	f7ff fee4 	bl	8003774 <MX_I2C2_Init>
  MX_TIM5_Init();
 80039ac:	f7ff fefe 	bl	80037ac <MX_TIM5_Init>
  MX_TIM9_Init();
 80039b0:	f7ff ff36 	bl	8003820 <MX_TIM9_Init>
  MX_TIM10_Init();
 80039b4:	f7ff ff62 	bl	800387c <MX_TIM10_Init>
	Is_asleep = 0;
 80039b8:	2400      	movs	r4, #0
 80039ba:	4bc4      	ldr	r3, [pc, #784]	; (8003ccc <main+0x354>)
 80039bc:	701c      	strb	r4, [r3, #0]
	Rope_cut_status = ROPE_NOT_CUT;
 80039be:	4bc4      	ldr	r3, [pc, #784]	; (8003cd0 <main+0x358>)
 80039c0:	701c      	strb	r4, [r3, #0]
	Rope_cut_delay = ROPE_CUT_TIME;
 80039c2:	4bc4      	ldr	r3, [pc, #784]	; (8003cd4 <main+0x35c>)
 80039c4:	220a      	movs	r2, #10
 80039c6:	701a      	strb	r2, [r3, #0]
	Cycle_runtime_last = 0;
 80039c8:	4bc3      	ldr	r3, [pc, #780]	; (8003cd8 <main+0x360>)
 80039ca:	801c      	strh	r4, [r3, #0]
	Cycle_runtime_min = 0xFFFF;
 80039cc:	4bc3      	ldr	r3, [pc, #780]	; (8003cdc <main+0x364>)
 80039ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039d2:	801a      	strh	r2, [r3, #0]
	Cycle_runtime_max = 0;
 80039d4:	4bc2      	ldr	r3, [pc, #776]	; (8003ce0 <main+0x368>)
 80039d6:	801c      	strh	r4, [r3, #0]
	HAL_RTC_GetTime(&hrtc, &Current_Time, RTC_FORMAT_BIN);
 80039d8:	4dc2      	ldr	r5, [pc, #776]	; (8003ce4 <main+0x36c>)
 80039da:	4622      	mov	r2, r4
 80039dc:	49c2      	ldr	r1, [pc, #776]	; (8003ce8 <main+0x370>)
 80039de:	4628      	mov	r0, r5
 80039e0:	f002 f9ad 	bl	8005d3e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Current_Date, RTC_FORMAT_BIN);
 80039e4:	4622      	mov	r2, r4
 80039e6:	49c1      	ldr	r1, [pc, #772]	; (8003cec <main+0x374>)
 80039e8:	4628      	mov	r0, r5
 80039ea:	f002 f9d0 	bl	8005d8e <HAL_RTC_GetDate>
	HAL_Delay(2000);
 80039ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80039f2:	f000 fd11 	bl	8004418 <HAL_Delay>
	sd_file_cnt = 0;
 80039f6:	4bbe      	ldr	r3, [pc, #760]	; (8003cf0 <main+0x378>)
 80039f8:	701c      	strb	r4, [r3, #0]
	sd_error_cnt = 0;
 80039fa:	4bbe      	ldr	r3, [pc, #760]	; (8003cf4 <main+0x37c>)
 80039fc:	701c      	strb	r4, [r3, #0]
	sd_mounted = 0;
 80039fe:	4bbe      	ldr	r3, [pc, #760]	; (8003cf8 <main+0x380>)
 8003a00:	701c      	strb	r4, [r3, #0]
	sd_status = Mount_open_SD_Card();
 8003a02:	f7fe fe4d 	bl	80026a0 <Mount_open_SD_Card>
 8003a06:	4abd      	ldr	r2, [pc, #756]	; (8003cfc <main+0x384>)
 8003a08:	7010      	strb	r0, [r2, #0]
	while(sd_status == FR_NOT_READY)
 8003a0a:	e003      	b.n	8003a14 <main+0x9c>
		sd_status = Mount_open_SD_Card();
 8003a0c:	f7fe fe48 	bl	80026a0 <Mount_open_SD_Card>
 8003a10:	4aba      	ldr	r2, [pc, #744]	; (8003cfc <main+0x384>)
 8003a12:	7010      	strb	r0, [r2, #0]
	while(sd_status == FR_NOT_READY)
 8003a14:	4bb9      	ldr	r3, [pc, #740]	; (8003cfc <main+0x384>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d0f6      	beq.n	8003a0c <main+0x94>
	if(sd_status == FR_OK)
 8003a1e:	4bb7      	ldr	r3, [pc, #732]	; (8003cfc <main+0x384>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f040 80dd 	bne.w	8003be2 <main+0x26a>
		sd_mounted = 1;
 8003a28:	4bb3      	ldr	r3, [pc, #716]	; (8003cf8 <main+0x380>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
	Sensors.BME280_Internal.Pressure_ref = PRESSURE_REFERENCE;
 8003a2e:	4db4      	ldr	r5, [pc, #720]	; (8003d00 <main+0x388>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	4bb4      	ldr	r3, [pc, #720]	; (8003d04 <main+0x38c>)
 8003a34:	e9c5 2312 	strd	r2, r3, [r5, #72]	; 0x48
	Sensors.BME280_External.Pressure_ref = PRESSURE_REFERENCE;
 8003a38:	e9c5 2306 	strd	r2, r3, [r5, #24]
	HAL_Delay(1000);
 8003a3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a40:	f000 fcea 	bl	8004418 <HAL_Delay>
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7fe fce7 	bl	8002418 <I2C_Select_bus>
	Sensors.BME280_Internal.Status = BME280_Get_ID(I2C_handle_BME_in__MPU, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 8003a4a:	4caf      	ldr	r4, [pc, #700]	; (8003d08 <main+0x390>)
 8003a4c:	2314      	movs	r3, #20
 8003a4e:	9312      	str	r3, [sp, #72]	; 0x48
 8003a50:	f105 0331 	add.w	r3, r5, #49	; 0x31
 8003a54:	9311      	str	r3, [sp, #68]	; 0x44
 8003a56:	2244      	movs	r2, #68	; 0x44
 8003a58:	f104 0110 	add.w	r1, r4, #16
 8003a5c:	4668      	mov	r0, sp
 8003a5e:	f004 ff79 	bl	8008954 <memcpy>
 8003a62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a66:	f7fd fa93 	bl	8000f90 <BME280_Get_ID>
 8003a6a:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
	if (Sensors.BME280_Internal.Status == HAL_OK)
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	f000 80c2 	beq.w	8003bf8 <main+0x280>
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7fe fccf 	bl	8002418 <I2C_Select_bus>
	Sensors.BME280_External.Status = BME280_Get_ID(I2C_handle_BME_ex__SI, &Sensors.BME280_External.ID, I2C_short_timeout);
 8003a7a:	4ca4      	ldr	r4, [pc, #656]	; (8003d0c <main+0x394>)
 8003a7c:	2314      	movs	r3, #20
 8003a7e:	9312      	str	r3, [sp, #72]	; 0x48
 8003a80:	4da3      	ldr	r5, [pc, #652]	; (8003d10 <main+0x398>)
 8003a82:	9511      	str	r5, [sp, #68]	; 0x44
 8003a84:	2244      	movs	r2, #68	; 0x44
 8003a86:	f104 0110 	add.w	r1, r4, #16
 8003a8a:	4668      	mov	r0, sp
 8003a8c:	f004 ff62 	bl	8008954 <memcpy>
 8003a90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a94:	f7fd fa7c 	bl	8000f90 <BME280_Get_ID>
 8003a98:	f805 0c01 	strb.w	r0, [r5, #-1]
	if (Sensors.BME280_External.Status == HAL_OK)
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	f000 80cd 	beq.w	8003c3c <main+0x2c4>
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f7fe fcb8 	bl	8002418 <I2C_Select_bus>
	Sensors.MPU650.Status = MPU6050_read_ID(I2C_handle_BME_in__MPU, &Sensors.MPU650.ID, I2C_short_timeout);
 8003aa8:	4c97      	ldr	r4, [pc, #604]	; (8003d08 <main+0x390>)
 8003aaa:	2314      	movs	r3, #20
 8003aac:	9312      	str	r3, [sp, #72]	; 0x48
 8003aae:	4d99      	ldr	r5, [pc, #612]	; (8003d14 <main+0x39c>)
 8003ab0:	9511      	str	r5, [sp, #68]	; 0x44
 8003ab2:	2244      	movs	r2, #68	; 0x44
 8003ab4:	f104 0110 	add.w	r1, r4, #16
 8003ab8:	4668      	mov	r0, sp
 8003aba:	f004 ff4b 	bl	8008954 <memcpy>
 8003abe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003ac2:	f7fd fe5a 	bl	800177a <MPU6050_read_ID>
 8003ac6:	f805 0c01 	strb.w	r0, [r5, #-1]
	if (Sensors.MPU650.Status == HAL_OK)
 8003aca:	2800      	cmp	r0, #0
 8003acc:	f000 80d7 	beq.w	8003c7e <main+0x306>
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f7fe fca1 	bl	8002418 <I2C_Select_bus>
	Sensors.SI1145.Status = SI1145_Init(I2C_handle_BME_ex__SI, I2C_short_timeout);
 8003ad6:	4c8d      	ldr	r4, [pc, #564]	; (8003d0c <main+0x394>)
 8003ad8:	2314      	movs	r3, #20
 8003ada:	9311      	str	r3, [sp, #68]	; 0x44
 8003adc:	2244      	movs	r2, #68	; 0x44
 8003ade:	f104 0110 	add.w	r1, r4, #16
 8003ae2:	4668      	mov	r0, sp
 8003ae4:	f004 ff36 	bl	8008954 <memcpy>
 8003ae8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003aec:	f7fd ff22 	bl	8001934 <SI1145_Init>
 8003af0:	4a83      	ldr	r2, [pc, #524]	; (8003d00 <main+0x388>)
 8003af2:	f882 00a0 	strb.w	r0, [r2, #160]	; 0xa0
	if (Sensors.SI1145.Status == HAL_OK)
 8003af6:	2800      	cmp	r0, #0
 8003af8:	f000 80d4 	beq.w	8003ca4 <main+0x32c>
	Get_BME280_ex_all_readings();
 8003afc:	f7fe fd0a 	bl	8002514 <Get_BME280_ex_all_readings>
	Altitude_max = Sensors.BME280_External.Altitude;
 8003b00:	4b7f      	ldr	r3, [pc, #508]	; (8003d00 <main+0x388>)
 8003b02:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003b06:	4b84      	ldr	r3, [pc, #528]	; (8003d18 <main+0x3a0>)
 8003b08:	e9c3 0100 	strd	r0, r1, [r3]
	UART1_RxIsData = 0;
 8003b0c:	4b83      	ldr	r3, [pc, #524]	; (8003d1c <main+0x3a4>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	701a      	strb	r2, [r3, #0]
	UART1_RxBytes = 2;
 8003b12:	4b83      	ldr	r3, [pc, #524]	; (8003d20 <main+0x3a8>)
 8003b14:	2202      	movs	r2, #2
 8003b16:	701a      	strb	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0);
 8003b18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b1c:	4881      	ldr	r0, [pc, #516]	; (8003d24 <main+0x3ac>)
 8003b1e:	f000 fe2f 	bl	8004780 <HAL_GPIO_ReadPin>
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d0f8      	beq.n	8003b18 <main+0x1a0>
	HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 8003b26:	2202      	movs	r2, #2
 8003b28:	497f      	ldr	r1, [pc, #508]	; (8003d28 <main+0x3b0>)
 8003b2a:	4880      	ldr	r0, [pc, #512]	; (8003d2c <main+0x3b4>)
 8003b2c:	f003 fa3f 	bl	8006fae <HAL_UART_Receive_IT>
	UART2_RxIsData = 0;
 8003b30:	4b7f      	ldr	r3, [pc, #508]	; (8003d30 <main+0x3b8>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
	UART2_RxBytes = 2;
 8003b36:	4b7f      	ldr	r3, [pc, #508]	; (8003d34 <main+0x3bc>)
 8003b38:	2202      	movs	r2, #2
 8003b3a:	701a      	strb	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0);
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	4879      	ldr	r0, [pc, #484]	; (8003d24 <main+0x3ac>)
 8003b40:	f000 fe1e 	bl	8004780 <HAL_GPIO_ReadPin>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d0f9      	beq.n	8003b3c <main+0x1c4>
	HAL_UART_Receive_IT(&huart2, UART2_RxBuf, 2);
 8003b48:	2202      	movs	r2, #2
 8003b4a:	497b      	ldr	r1, [pc, #492]	; (8003d38 <main+0x3c0>)
 8003b4c:	487b      	ldr	r0, [pc, #492]	; (8003d3c <main+0x3c4>)
 8003b4e:	f003 fa2e 	bl	8006fae <HAL_UART_Receive_IT>
	UART1_TxBuf[0] = 0x00;
 8003b52:	4c7b      	ldr	r4, [pc, #492]	; (8003d40 <main+0x3c8>)
 8003b54:	2600      	movs	r6, #0
 8003b56:	7026      	strb	r6, [r4, #0]
	UART1_TxBuf[1] = Get_System_Status();
 8003b58:	f7fe fc26 	bl	80023a8 <Get_System_Status>
 8003b5c:	7060      	strb	r0, [r4, #1]
	HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003b5e:	2202      	movs	r2, #2
 8003b60:	4621      	mov	r1, r4
 8003b62:	4872      	ldr	r0, [pc, #456]	; (8003d2c <main+0x3b4>)
 8003b64:	f003 f81b 	bl	8006b9e <HAL_UART_Transmit_IT>
	HAL_TIM_Base_Start_IT(&htim3);	// Sensor read cycle timer
 8003b68:	4876      	ldr	r0, [pc, #472]	; (8003d44 <main+0x3cc>)
 8003b6a:	f002 fca1 	bl	80064b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);	// Flashes LEDs
 8003b6e:	4876      	ldr	r0, [pc, #472]	; (8003d48 <main+0x3d0>)
 8003b70:	f002 fc9e 	bl	80064b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);	// CAM1 heartbeat timer
 8003b74:	4c75      	ldr	r4, [pc, #468]	; (8003d4c <main+0x3d4>)
 8003b76:	4620      	mov	r0, r4
 8003b78:	f002 fc9a 	bl	80064b0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);	// CAM2 heartbeat timer
 8003b7c:	4f74      	ldr	r7, [pc, #464]	; (8003d50 <main+0x3d8>)
 8003b7e:	4638      	mov	r0, r7
 8003b80:	f002 fc96 	bl	80064b0 <HAL_TIM_Base_Start_IT>
	CAM_1.OK_PIN = CAM1_OK_Pin;
 8003b84:	4d73      	ldr	r5, [pc, #460]	; (8003d54 <main+0x3dc>)
 8003b86:	2304      	movs	r3, #4
 8003b88:	81ab      	strh	r3, [r5, #12]
	CAM_1.OK_PORT = CAM1_OK_GPIO_Port;
 8003b8a:	4b73      	ldr	r3, [pc, #460]	; (8003d58 <main+0x3e0>)
 8003b8c:	60ab      	str	r3, [r5, #8]
	CAM_1.ON_PIN = CAM1_ON_Pin;
 8003b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b92:	80aa      	strh	r2, [r5, #4]
	CAM_1.ON_PORT = CAM1_ON_GPIO_Port;
 8003b94:	602b      	str	r3, [r5, #0]
	CAM_1.START_PIN = CAM1_START_Pin;
 8003b96:	2220      	movs	r2, #32
 8003b98:	82aa      	strh	r2, [r5, #20]
	CAM_1.START_PORT = CAM1_START_GPIO_Port;
 8003b9a:	612b      	str	r3, [r5, #16]
	CAM_1.REC_STATUS = CAM_NREC;
 8003b9c:	772e      	strb	r6, [r5, #28]
	CAM_1.TIM = &htim5;
 8003b9e:	61ac      	str	r4, [r5, #24]
	CAM_1.Do_Restart = 0;
 8003ba0:	776e      	strb	r6, [r5, #29]
	CAM_1.Do_EXTI = 0;
 8003ba2:	77ae      	strb	r6, [r5, #30]
	CAM_1.Startup_delay = CAM_STARTUP_TIME;
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	77ea      	strb	r2, [r5, #31]
	CAM_2.OK_PIN = CAM2_OK_Pin;
 8003ba8:	4c6c      	ldr	r4, [pc, #432]	; (8003d5c <main+0x3e4>)
 8003baa:	2102      	movs	r1, #2
 8003bac:	81a1      	strh	r1, [r4, #12]
	CAM_2.OK_PORT = CAM2_OK_GPIO_Port;
 8003bae:	60a3      	str	r3, [r4, #8]
	CAM_2.ON_PIN = CAM2_ON_Pin;
 8003bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bb4:	80a1      	strh	r1, [r4, #4]
	CAM_2.ON_PORT = CAM2_ON_GPIO_Port;
 8003bb6:	6023      	str	r3, [r4, #0]
	CAM_2.START_PIN = CAM2_START_Pin;
 8003bb8:	2110      	movs	r1, #16
 8003bba:	82a1      	strh	r1, [r4, #20]
	CAM_2.START_PORT = CAM2_START_GPIO_Port;
 8003bbc:	6123      	str	r3, [r4, #16]
	CAM_2.REC_STATUS = CAM_NREC;
 8003bbe:	7726      	strb	r6, [r4, #28]
	CAM_2.TIM = &htim9;
 8003bc0:	61a7      	str	r7, [r4, #24]
	CAM_2.Do_Restart = 0;
 8003bc2:	7766      	strb	r6, [r4, #29]
	CAM_2.Do_EXTI = 0;
 8003bc4:	77a6      	strb	r6, [r4, #30]
	CAM_2.Startup_delay = CAM_STARTUP_TIME;
 8003bc6:	77e2      	strb	r2, [r4, #31]
	CAM_ON(&CAM_1);
 8003bc8:	4628      	mov	r0, r5
 8003bca:	f7fe fdf3 	bl	80027b4 <CAM_ON>
	CAM_ON(&CAM_2);
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f7fe fdf0 	bl	80027b4 <CAM_ON>
	CAM_START(&CAM_1);
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f7fe fe07 	bl	80027e8 <CAM_START>
	CAM_START(&CAM_2);
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7fe fe04 	bl	80027e8 <CAM_START>
 8003be0:	e0c5      	b.n	8003d6e <main+0x3f6>
		UART1_TxBuf[0] = 0xD0;
 8003be2:	4957      	ldr	r1, [pc, #348]	; (8003d40 <main+0x3c8>)
 8003be4:	23d0      	movs	r3, #208	; 0xd0
 8003be6:	700b      	strb	r3, [r1, #0]
		UART1_TxBuf[1] = sd_status;
 8003be8:	4b44      	ldr	r3, [pc, #272]	; (8003cfc <main+0x384>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	704b      	strb	r3, [r1, #1]
		HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003bee:	2202      	movs	r2, #2
 8003bf0:	484e      	ldr	r0, [pc, #312]	; (8003d2c <main+0x3b4>)
 8003bf2:	f002 ffd4 	bl	8006b9e <HAL_UART_Transmit_IT>
 8003bf6:	e71a      	b.n	8003a2e <main+0xb6>
		Sensors.BME280_Internal.Status = BME280_Init(I2C_handle_BME_in__MPU, I2C_short_timeout);
 8003bf8:	2314      	movs	r3, #20
 8003bfa:	9311      	str	r3, [sp, #68]	; 0x44
 8003bfc:	f104 0610 	add.w	r6, r4, #16
 8003c00:	2744      	movs	r7, #68	; 0x44
 8003c02:	463a      	mov	r2, r7
 8003c04:	4631      	mov	r1, r6
 8003c06:	4668      	mov	r0, sp
 8003c08:	f004 fea4 	bl	8008954 <memcpy>
 8003c0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c10:	f7fd f96e 	bl	8000ef0 <BME280_Init>
 8003c14:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
		Sensors.BME280_Internal.Status = BME280_Calib_Read(I2C_handle_BME_in__MPU, &BME280_internal_Calib_Data, I2C_long_timeout);
 8003c18:	23c8      	movs	r3, #200	; 0xc8
 8003c1a:	9312      	str	r3, [sp, #72]	; 0x48
 8003c1c:	4b50      	ldr	r3, [pc, #320]	; (8003d60 <main+0x3e8>)
 8003c1e:	9311      	str	r3, [sp, #68]	; 0x44
 8003c20:	463a      	mov	r2, r7
 8003c22:	4631      	mov	r1, r6
 8003c24:	4668      	mov	r0, sp
 8003c26:	f004 fe95 	bl	8008954 <memcpy>
 8003c2a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c2e:	f7fd f9c7 	bl	8000fc0 <BME280_Calib_Read>
 8003c32:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
		Get_BME280_in_all_readings();
 8003c36:	f7fe fc1f 	bl	8002478 <Get_BME280_in_all_readings>
 8003c3a:	e71b      	b.n	8003a74 <main+0xfc>
		Sensors.BME280_External.Status = BME280_Init(I2C_handle_BME_ex__SI, I2C_short_timeout);
 8003c3c:	2314      	movs	r3, #20
 8003c3e:	9311      	str	r3, [sp, #68]	; 0x44
 8003c40:	f104 0610 	add.w	r6, r4, #16
 8003c44:	2744      	movs	r7, #68	; 0x44
 8003c46:	463a      	mov	r2, r7
 8003c48:	4631      	mov	r1, r6
 8003c4a:	4668      	mov	r0, sp
 8003c4c:	f004 fe82 	bl	8008954 <memcpy>
 8003c50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c54:	f7fd f94c 	bl	8000ef0 <BME280_Init>
 8003c58:	3d01      	subs	r5, #1
 8003c5a:	7028      	strb	r0, [r5, #0]
		Sensors.BME280_External.Status = BME280_Calib_Read(I2C_handle_BME_ex__SI, &BME280_external_Calib_Data, I2C_long_timeout);
 8003c5c:	23c8      	movs	r3, #200	; 0xc8
 8003c5e:	9312      	str	r3, [sp, #72]	; 0x48
 8003c60:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <main+0x3ec>)
 8003c62:	9311      	str	r3, [sp, #68]	; 0x44
 8003c64:	463a      	mov	r2, r7
 8003c66:	4631      	mov	r1, r6
 8003c68:	4668      	mov	r0, sp
 8003c6a:	f004 fe73 	bl	8008954 <memcpy>
 8003c6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c72:	f7fd f9a5 	bl	8000fc0 <BME280_Calib_Read>
 8003c76:	7028      	strb	r0, [r5, #0]
		Get_BME280_ex_all_readings();
 8003c78:	f7fe fc4c 	bl	8002514 <Get_BME280_ex_all_readings>
 8003c7c:	e711      	b.n	8003aa2 <main+0x12a>
		Sensors.MPU650.Status = MPU6050_Init(I2C_handle_BME_in__MPU, I2C_short_timeout);
 8003c7e:	2314      	movs	r3, #20
 8003c80:	9311      	str	r3, [sp, #68]	; 0x44
 8003c82:	2244      	movs	r2, #68	; 0x44
 8003c84:	f104 0110 	add.w	r1, r4, #16
 8003c88:	4668      	mov	r0, sp
 8003c8a:	f004 fe63 	bl	8008954 <memcpy>
 8003c8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003c92:	f7fd fd03 	bl	800169c <MPU6050_Init>
 8003c96:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 8003c9a:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
		Get_MPU6050_all_readings();
 8003c9e:	f7fe fc85 	bl	80025ac <Get_MPU6050_all_readings>
 8003ca2:	e715      	b.n	8003ad0 <main+0x158>
		Sensors.SI1145.Status = SI1145_read_ID(I2C_handle_BME_ex__SI, &Sensors.SI1145.ID, I2C_short_timeout);
 8003ca4:	2314      	movs	r3, #20
 8003ca6:	9312      	str	r3, [sp, #72]	; 0x48
 8003ca8:	f102 05a1 	add.w	r5, r2, #161	; 0xa1
 8003cac:	9511      	str	r5, [sp, #68]	; 0x44
 8003cae:	2244      	movs	r2, #68	; 0x44
 8003cb0:	f104 0110 	add.w	r1, r4, #16
 8003cb4:	4668      	mov	r0, sp
 8003cb6:	f004 fe4d 	bl	8008954 <memcpy>
 8003cba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003cbe:	f7fd ff15 	bl	8001aec <SI1145_read_ID>
 8003cc2:	f805 0c01 	strb.w	r0, [r5, #-1]
		Get_SI1145_all_readings();
 8003cc6:	f7fe fcad 	bl	8002624 <Get_SI1145_all_readings>
 8003cca:	e717      	b.n	8003afc <main+0x184>
 8003ccc:	200008cc 	.word	0x200008cc
 8003cd0:	200009d0 	.word	0x200009d0
 8003cd4:	20000304 	.word	0x20000304
 8003cd8:	20000d92 	.word	0x20000d92
 8003cdc:	200006ae 	.word	0x200006ae
 8003ce0:	20000750 	.word	0x20000750
 8003ce4:	200008ac 	.word	0x200008ac
 8003ce8:	20000d4c 	.word	0x20000d4c
 8003cec:	20000ae0 	.word	0x20000ae0
 8003cf0:	200007da 	.word	0x200007da
 8003cf4:	20000305 	.word	0x20000305
 8003cf8:	20000888 	.word	0x20000888
 8003cfc:	20000820 	.word	0x20000820
 8003d00:	200008d0 	.word	0x200008d0
 8003d04:	40590000 	.word	0x40590000
 8003d08:	20000620 	.word	0x20000620
 8003d0c:	20000584 	.word	0x20000584
 8003d10:	200008d1 	.word	0x200008d1
 8003d14:	20000931 	.word	0x20000931
 8003d18:	20000748 	.word	0x20000748
 8003d1c:	200006ac 	.word	0x200006ac
 8003d20:	20000580 	.word	0x20000580
 8003d24:	40020000 	.word	0x40020000
 8003d28:	200007a8 	.word	0x200007a8
 8003d2c:	200007dc 	.word	0x200007dc
 8003d30:	200006a6 	.word	0x200006a6
 8003d34:	20000740 	.word	0x20000740
 8003d38:	20000a0c 	.word	0x20000a0c
 8003d3c:	20000a9c 	.word	0x20000a9c
 8003d40:	200009d8 	.word	0x200009d8
 8003d44:	200006f8 	.word	0x200006f8
 8003d48:	20000308 	.word	0x20000308
 8003d4c:	200006b0 	.word	0x200006b0
 8003d50:	20000988 	.word	0x20000988
 8003d54:	2000088c 	.word	0x2000088c
 8003d58:	40020400 	.word	0x40020400
 8003d5c:	20000788 	.word	0x20000788
 8003d60:	200002a4 	.word	0x200002a4
 8003d64:	20000280 	.word	0x20000280
		  UART2_RxBytes = 2;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <main+0x40c>)
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	701a      	strb	r2, [r3, #0]
	  if(UART1_RxIsData == 0)
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <main+0x410>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	b913      	cbnz	r3, 8003d7a <main+0x402>
		  UART1_RxBytes = 2;
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <main+0x414>)
 8003d76:	2202      	movs	r2, #2
 8003d78:	701a      	strb	r2, [r3, #0]
	  if(UART2_RxIsData == 0)
 8003d7a:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <main+0x418>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f5      	bne.n	8003d6e <main+0x3f6>
 8003d82:	e7f1      	b.n	8003d68 <main+0x3f0>
 8003d84:	20000740 	.word	0x20000740
 8003d88:	200006ac 	.word	0x200006ac
 8003d8c:	20000580 	.word	0x20000580
 8003d90:	200006a6 	.word	0x200006a6

08003d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d94:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d96:	2100      	movs	r1, #0
 8003d98:	9100      	str	r1, [sp, #0]
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_MspInit+0x34>)
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44
 8003da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003daa:	9200      	str	r2, [sp, #0]
 8003dac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	9101      	str	r1, [sp, #4]
 8003db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	9301      	str	r3, [sp, #4]
 8003dc0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dc2:	b002      	add	sp, #8
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800

08003dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd0:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	9305      	str	r3, [sp, #20]
 8003dd6:	9306      	str	r3, [sp, #24]
 8003dd8:	9307      	str	r3, [sp, #28]
 8003dda:	9308      	str	r3, [sp, #32]
 8003ddc:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8003dde:	6803      	ldr	r3, [r0, #0]
 8003de0:	4a30      	ldr	r2, [pc, #192]	; (8003ea4 <HAL_I2C_MspInit+0xd8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d005      	beq.n	8003df2 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8003de6:	4a30      	ldr	r2, [pc, #192]	; (8003ea8 <HAL_I2C_MspInit+0xdc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d026      	beq.n	8003e3a <HAL_I2C_MspInit+0x6e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003dec:	b00a      	add	sp, #40	; 0x28
 8003dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003df2:	2500      	movs	r5, #0
 8003df4:	9501      	str	r5, [sp, #4]
 8003df6:	4c2d      	ldr	r4, [pc, #180]	; (8003eac <HAL_I2C_MspInit+0xe0>)
 8003df8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003dfa:	f043 0302 	orr.w	r3, r3, #2
 8003dfe:	6323      	str	r3, [r4, #48]	; 0x30
 8003e00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e0a:	23c0      	movs	r3, #192	; 0xc0
 8003e0c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e0e:	2312      	movs	r3, #18
 8003e10:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e14:	2303      	movs	r3, #3
 8003e16:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e18:	2304      	movs	r3, #4
 8003e1a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1c:	a905      	add	r1, sp, #20
 8003e1e:	4824      	ldr	r0, [pc, #144]	; (8003eb0 <HAL_I2C_MspInit+0xe4>)
 8003e20:	f000 fbd6 	bl	80045d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e24:	9502      	str	r5, [sp, #8]
 8003e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e2c:	6423      	str	r3, [r4, #64]	; 0x40
 8003e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e34:	9302      	str	r3, [sp, #8]
 8003e36:	9b02      	ldr	r3, [sp, #8]
 8003e38:	e7d8      	b.n	8003dec <HAL_I2C_MspInit+0x20>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3a:	2500      	movs	r5, #0
 8003e3c:	9503      	str	r5, [sp, #12]
 8003e3e:	4c1b      	ldr	r4, [pc, #108]	; (8003eac <HAL_I2C_MspInit+0xe0>)
 8003e40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	6323      	str	r3, [r4, #48]	; 0x30
 8003e48:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	9303      	str	r3, [sp, #12]
 8003e50:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e56:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e58:	f04f 0812 	mov.w	r8, #18
 8003e5c:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e62:	2703      	movs	r7, #3
 8003e64:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e66:	2304      	movs	r3, #4
 8003e68:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6a:	4e11      	ldr	r6, [pc, #68]	; (8003eb0 <HAL_I2C_MspInit+0xe4>)
 8003e6c:	a905      	add	r1, sp, #20
 8003e6e:	4630      	mov	r0, r6
 8003e70:	f000 fbae 	bl	80045d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e74:	2308      	movs	r3, #8
 8003e76:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e78:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8003e80:	2309      	movs	r3, #9
 8003e82:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e84:	a905      	add	r1, sp, #20
 8003e86:	4630      	mov	r0, r6
 8003e88:	f000 fba2 	bl	80045d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e8c:	9504      	str	r5, [sp, #16]
 8003e8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e94:	6423      	str	r3, [r4, #64]	; 0x40
 8003e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9c:	9304      	str	r3, [sp, #16]
 8003e9e:	9b04      	ldr	r3, [sp, #16]
}
 8003ea0:	e7a4      	b.n	8003dec <HAL_I2C_MspInit+0x20>
 8003ea2:	bf00      	nop
 8003ea4:	40005400 	.word	0x40005400
 8003ea8:	40005800 	.word	0x40005800
 8003eac:	40023800 	.word	0x40023800
 8003eb0:	40020400 	.word	0x40020400

08003eb4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003eb4:	b500      	push	{lr}
 8003eb6:	b087      	sub	sp, #28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9302      	str	r3, [sp, #8]
 8003ebc:	9303      	str	r3, [sp, #12]
 8003ebe:	9305      	str	r3, [sp, #20]
  if(hrtc->Instance==RTC)
 8003ec0:	6802      	ldr	r2, [r0, #0]
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RTC_MspInit+0x3c>)
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d002      	beq.n	8003ece <HAL_RTC_MspInit+0x1a>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003ec8:	b007      	add	sp, #28
 8003eca:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003ed2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ed6:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ed8:	a801      	add	r0, sp, #4
 8003eda:	f001 fce1 	bl	80058a0 <HAL_RCCEx_PeriphCLKConfig>
 8003ede:	b918      	cbnz	r0, 8003ee8 <HAL_RTC_MspInit+0x34>
    __HAL_RCC_RTC_ENABLE();
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <HAL_RTC_MspInit+0x40>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
}
 8003ee6:	e7ef      	b.n	8003ec8 <HAL_RTC_MspInit+0x14>
      Error_Handler();
 8003ee8:	f7ff fb36 	bl	8003558 <Error_Handler>
 8003eec:	e7f8      	b.n	8003ee0 <HAL_RTC_MspInit+0x2c>
 8003eee:	bf00      	nop
 8003ef0:	40002800 	.word	0x40002800
 8003ef4:	42470e3c 	.word	0x42470e3c

08003ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ef8:	b500      	push	{lr}
 8003efa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	2300      	movs	r3, #0
 8003efe:	9303      	str	r3, [sp, #12]
 8003f00:	9304      	str	r3, [sp, #16]
 8003f02:	9305      	str	r3, [sp, #20]
 8003f04:	9306      	str	r3, [sp, #24]
 8003f06:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8003f08:	6802      	ldr	r2, [r0, #0]
 8003f0a:	4b15      	ldr	r3, [pc, #84]	; (8003f60 <HAL_SPI_MspInit+0x68>)
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f10:	b009      	add	sp, #36	; 0x24
 8003f12:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f16:	2200      	movs	r2, #0
 8003f18:	9201      	str	r2, [sp, #4]
 8003f1a:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8003f1e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003f20:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003f24:	6459      	str	r1, [r3, #68]	; 0x44
 8003f26:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003f28:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8003f2c:	9101      	str	r1, [sp, #4]
 8003f2e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f30:	9202      	str	r2, [sp, #8]
 8003f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f34:	f041 0101 	orr.w	r1, r1, #1
 8003f38:	6319      	str	r1, [r3, #48]	; 0x30
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	9302      	str	r3, [sp, #8]
 8003f42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f44:	23e0      	movs	r3, #224	; 0xe0
 8003f46:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f52:	2305      	movs	r3, #5
 8003f54:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f56:	a903      	add	r1, sp, #12
 8003f58:	4802      	ldr	r0, [pc, #8]	; (8003f64 <HAL_SPI_MspInit+0x6c>)
 8003f5a:	f000 fb39 	bl	80045d0 <HAL_GPIO_Init>
}
 8003f5e:	e7d7      	b.n	8003f10 <HAL_SPI_MspInit+0x18>
 8003f60:	40013000 	.word	0x40013000
 8003f64:	40020000 	.word	0x40020000

08003f68 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003f68:	b500      	push	{lr}
 8003f6a:	b085      	sub	sp, #20
  if(htim_oc->Instance==TIM3)
 8003f6c:	6803      	ldr	r3, [r0, #0]
 8003f6e:	4a2f      	ldr	r2, [pc, #188]	; (800402c <HAL_TIM_OC_MspInit+0xc4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <HAL_TIM_OC_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_oc->Instance==TIM4)
 8003f74:	4a2e      	ldr	r2, [pc, #184]	; (8004030 <HAL_TIM_OC_MspInit+0xc8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01c      	beq.n	8003fb4 <HAL_TIM_OC_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_oc->Instance==TIM5)
 8003f7a:	4a2e      	ldr	r2, [pc, #184]	; (8004034 <HAL_TIM_OC_MspInit+0xcc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d02d      	beq.n	8003fdc <HAL_TIM_OC_MspInit+0x74>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_oc->Instance==TIM9)
 8003f80:	4a2d      	ldr	r2, [pc, #180]	; (8004038 <HAL_TIM_OC_MspInit+0xd0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d03e      	beq.n	8004004 <HAL_TIM_OC_MspInit+0x9c>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003f86:	b005      	add	sp, #20
 8003f88:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	9200      	str	r2, [sp, #0]
 8003f90:	4b2a      	ldr	r3, [pc, #168]	; (800403c <HAL_TIM_OC_MspInit+0xd4>)
 8003f92:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003f94:	f041 0102 	orr.w	r1, r1, #2
 8003f98:	6419      	str	r1, [r3, #64]	; 0x40
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	201d      	movs	r0, #29
 8003fa8:	f000 fa5c 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003fac:	201d      	movs	r0, #29
 8003fae:	f000 fa8d 	bl	80044cc <HAL_NVIC_EnableIRQ>
 8003fb2:	e7e8      	b.n	8003f86 <HAL_TIM_OC_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	9201      	str	r2, [sp, #4]
 8003fb8:	4b20      	ldr	r3, [pc, #128]	; (800403c <HAL_TIM_OC_MspInit+0xd4>)
 8003fba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003fbc:	f041 0104 	orr.w	r1, r1, #4
 8003fc0:	6419      	str	r1, [r3, #64]	; 0x40
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003fcc:	2101      	movs	r1, #1
 8003fce:	201e      	movs	r0, #30
 8003fd0:	f000 fa48 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003fd4:	201e      	movs	r0, #30
 8003fd6:	f000 fa79 	bl	80044cc <HAL_NVIC_EnableIRQ>
 8003fda:	e7d4      	b.n	8003f86 <HAL_TIM_OC_MspInit+0x1e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003fdc:	2200      	movs	r2, #0
 8003fde:	9202      	str	r2, [sp, #8]
 8003fe0:	4b16      	ldr	r3, [pc, #88]	; (800403c <HAL_TIM_OC_MspInit+0xd4>)
 8003fe2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003fe4:	f041 0108 	orr.w	r1, r1, #8
 8003fe8:	6419      	str	r1, [r3, #64]	; 0x40
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	9302      	str	r3, [sp, #8]
 8003ff2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	2032      	movs	r0, #50	; 0x32
 8003ff8:	f000 fa34 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003ffc:	2032      	movs	r0, #50	; 0x32
 8003ffe:	f000 fa65 	bl	80044cc <HAL_NVIC_EnableIRQ>
 8004002:	e7c0      	b.n	8003f86 <HAL_TIM_OC_MspInit+0x1e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004004:	2200      	movs	r2, #0
 8004006:	9203      	str	r2, [sp, #12]
 8004008:	4b0c      	ldr	r3, [pc, #48]	; (800403c <HAL_TIM_OC_MspInit+0xd4>)
 800400a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800400c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8004010:	6459      	str	r1, [r3, #68]	; 0x44
 8004012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004018:	9303      	str	r3, [sp, #12]
 800401a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 800401c:	2101      	movs	r1, #1
 800401e:	2018      	movs	r0, #24
 8004020:	f000 fa20 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004024:	2018      	movs	r0, #24
 8004026:	f000 fa51 	bl	80044cc <HAL_NVIC_EnableIRQ>
}
 800402a:	e7ac      	b.n	8003f86 <HAL_TIM_OC_MspInit+0x1e>
 800402c:	40000400 	.word	0x40000400
 8004030:	40000800 	.word	0x40000800
 8004034:	40000c00 	.word	0x40000c00
 8004038:	40014000 	.word	0x40014000
 800403c:	40023800 	.word	0x40023800

08004040 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM10)
 8004040:	6802      	ldr	r2, [r0, #0]
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <HAL_TIM_Base_MspInit+0x3c>)
 8004044:	429a      	cmp	r2, r3
 8004046:	d000      	beq.n	800404a <HAL_TIM_Base_MspInit+0xa>
 8004048:	4770      	bx	lr
{
 800404a:	b500      	push	{lr}
 800404c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800404e:	2200      	movs	r2, #0
 8004050:	9201      	str	r2, [sp, #4]
 8004052:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 8004056:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004058:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800405c:	6459      	str	r1, [r3, #68]	; 0x44
 800405e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	9b01      	ldr	r3, [sp, #4]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8004068:	2101      	movs	r1, #1
 800406a:	2019      	movs	r0, #25
 800406c:	f000 f9fa 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004070:	2019      	movs	r0, #25
 8004072:	f000 fa2b 	bl	80044cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004076:	b003      	add	sp, #12
 8004078:	f85d fb04 	ldr.w	pc, [sp], #4
 800407c:	40014400 	.word	0x40014400

08004080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004080:	b510      	push	{r4, lr}
 8004082:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004084:	2300      	movs	r3, #0
 8004086:	9305      	str	r3, [sp, #20]
 8004088:	9306      	str	r3, [sp, #24]
 800408a:	9307      	str	r3, [sp, #28]
 800408c:	9308      	str	r3, [sp, #32]
 800408e:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8004090:	6803      	ldr	r3, [r0, #0]
 8004092:	4a30      	ldr	r2, [pc, #192]	; (8004154 <HAL_UART_MspInit+0xd4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8004098:	4a2f      	ldr	r2, [pc, #188]	; (8004158 <HAL_UART_MspInit+0xd8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d02e      	beq.n	80040fc <HAL_UART_MspInit+0x7c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800409e:	b00a      	add	sp, #40	; 0x28
 80040a0:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80040a2:	2400      	movs	r4, #0
 80040a4:	9401      	str	r4, [sp, #4]
 80040a6:	4b2d      	ldr	r3, [pc, #180]	; (800415c <HAL_UART_MspInit+0xdc>)
 80040a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040aa:	f042 0210 	orr.w	r2, r2, #16
 80040ae:	645a      	str	r2, [r3, #68]	; 0x44
 80040b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040b2:	f002 0210 	and.w	r2, r2, #16
 80040b6:	9201      	str	r2, [sp, #4]
 80040b8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ba:	9402      	str	r4, [sp, #8]
 80040bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	9302      	str	r3, [sp, #8]
 80040cc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040d2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d4:	2302      	movs	r3, #2
 80040d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040da:	2303      	movs	r3, #3
 80040dc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040de:	2307      	movs	r3, #7
 80040e0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e2:	a905      	add	r1, sp, #20
 80040e4:	481e      	ldr	r0, [pc, #120]	; (8004160 <HAL_UART_MspInit+0xe0>)
 80040e6:	f000 fa73 	bl	80045d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80040ea:	4622      	mov	r2, r4
 80040ec:	2101      	movs	r1, #1
 80040ee:	2025      	movs	r0, #37	; 0x25
 80040f0:	f000 f9b8 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040f4:	2025      	movs	r0, #37	; 0x25
 80040f6:	f000 f9e9 	bl	80044cc <HAL_NVIC_EnableIRQ>
 80040fa:	e7d0      	b.n	800409e <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80040fc:	2400      	movs	r4, #0
 80040fe:	9403      	str	r4, [sp, #12]
 8004100:	4b16      	ldr	r3, [pc, #88]	; (800415c <HAL_UART_MspInit+0xdc>)
 8004102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004104:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
 800410a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004110:	9203      	str	r2, [sp, #12]
 8004112:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004114:	9404      	str	r4, [sp, #16]
 8004116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	9304      	str	r3, [sp, #16]
 8004126:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004128:	230c      	movs	r3, #12
 800412a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412c:	2302      	movs	r3, #2
 800412e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004132:	2303      	movs	r3, #3
 8004134:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004136:	2307      	movs	r3, #7
 8004138:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800413a:	a905      	add	r1, sp, #20
 800413c:	4808      	ldr	r0, [pc, #32]	; (8004160 <HAL_UART_MspInit+0xe0>)
 800413e:	f000 fa47 	bl	80045d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004142:	4622      	mov	r2, r4
 8004144:	2101      	movs	r1, #1
 8004146:	2026      	movs	r0, #38	; 0x26
 8004148:	f000 f98c 	bl	8004464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800414c:	2026      	movs	r0, #38	; 0x26
 800414e:	f000 f9bd 	bl	80044cc <HAL_NVIC_EnableIRQ>
}
 8004152:	e7a4      	b.n	800409e <HAL_UART_MspInit+0x1e>
 8004154:	40011000 	.word	0x40011000
 8004158:	40004400 	.word	0x40004400
 800415c:	40023800 	.word	0x40023800
 8004160:	40020000 	.word	0x40020000

08004164 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <NMI_Handler>

08004166 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004166:	e7fe      	b.n	8004166 <HardFault_Handler>

08004168 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004168:	e7fe      	b.n	8004168 <MemManage_Handler>

0800416a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800416a:	e7fe      	b.n	800416a <BusFault_Handler>

0800416c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800416c:	e7fe      	b.n	800416c <UsageFault_Handler>

0800416e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800416e:	4770      	bx	lr

08004170 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004170:	4770      	bx	lr

08004172 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004172:	4770      	bx	lr

08004174 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004174:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_CS_Pin);
 8004176:	2010      	movs	r0, #16
 8004178:	f000 fb18 	bl	80047ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800417c:	bd08      	pop	{r3, pc}

0800417e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800417e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAM1_START_Pin);
 8004180:	2020      	movs	r0, #32
 8004182:	f000 fb13 	bl	80047ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004186:	bd08      	pop	{r3, pc}

08004188 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004188:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800418a:	4802      	ldr	r0, [pc, #8]	; (8004194 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 800418c:	f002 f9e9 	bl	8006562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004190:	bd08      	pop	{r3, pc}
 8004192:	bf00      	nop
 8004194:	20000988 	.word	0x20000988

08004198 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004198:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800419a:	4802      	ldr	r0, [pc, #8]	; (80041a4 <TIM1_UP_TIM10_IRQHandler+0xc>)
 800419c:	f002 f9e1 	bl	8006562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80041a0:	bd08      	pop	{r3, pc}
 80041a2:	bf00      	nop
 80041a4:	200005d8 	.word	0x200005d8

080041a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041aa:	4802      	ldr	r0, [pc, #8]	; (80041b4 <TIM3_IRQHandler+0xc>)
 80041ac:	f002 f9d9 	bl	8006562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041b0:	bd08      	pop	{r3, pc}
 80041b2:	bf00      	nop
 80041b4:	200006f8 	.word	0x200006f8

080041b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80041b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80041ba:	4802      	ldr	r0, [pc, #8]	; (80041c4 <TIM4_IRQHandler+0xc>)
 80041bc:	f002 f9d1 	bl	8006562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041c0:	bd08      	pop	{r3, pc}
 80041c2:	bf00      	nop
 80041c4:	20000308 	.word	0x20000308

080041c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041ca:	4802      	ldr	r0, [pc, #8]	; (80041d4 <USART1_IRQHandler+0xc>)
 80041cc:	f002 fd94 	bl	8006cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041d0:	bd08      	pop	{r3, pc}
 80041d2:	bf00      	nop
 80041d4:	200007dc 	.word	0x200007dc

080041d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041da:	4802      	ldr	r0, [pc, #8]	; (80041e4 <USART2_IRQHandler+0xc>)
 80041dc:	f002 fd8c 	bl	8006cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041e0:	bd08      	pop	{r3, pc}
 80041e2:	bf00      	nop
 80041e4:	20000a9c 	.word	0x20000a9c

080041e8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80041e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80041ea:	4802      	ldr	r0, [pc, #8]	; (80041f4 <TIM5_IRQHandler+0xc>)
 80041ec:	f002 f9b9 	bl	8006562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80041f0:	bd08      	pop	{r3, pc}
 80041f2:	bf00      	nop
 80041f4:	200006b0 	.word	0x200006b0

080041f8 <SDTimer_Handler>:

/* USER CODE BEGIN 1 */
void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <SDTimer_Handler+0x24>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	b123      	cbz	r3, 8004208 <SDTimer_Handler+0x10>
    Timer1--;
 80041fe:	4a07      	ldr	r2, [pc, #28]	; (800421c <SDTimer_Handler+0x24>)
 8004200:	7813      	ldrb	r3, [r2, #0]
 8004202:	3b01      	subs	r3, #1
 8004204:	b2db      	uxtb	r3, r3
 8004206:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <SDTimer_Handler+0x28>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	b123      	cbz	r3, 8004218 <SDTimer_Handler+0x20>
    Timer2--;
 800420e:	4a04      	ldr	r2, [pc, #16]	; (8004220 <SDTimer_Handler+0x28>)
 8004210:	7813      	ldrb	r3, [r2, #0]
 8004212:	3b01      	subs	r3, #1
 8004214:	b2db      	uxtb	r3, r3
 8004216:	7013      	strb	r3, [r2, #0]
}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000d95 	.word	0x20000d95
 8004220:	20000d94 	.word	0x20000d94

08004224 <SysTick_Handler>:
{
 8004224:	b508      	push	{r3, lr}
	FatFsCnt++;
 8004226:	4a09      	ldr	r2, [pc, #36]	; (800424c <SysTick_Handler+0x28>)
 8004228:	7813      	ldrb	r3, [r2, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	7013      	strb	r3, [r2, #0]
	if(FatFsCnt >= 10)
 8004230:	7813      	ldrb	r3, [r2, #0]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b09      	cmp	r3, #9
 8004236:	d802      	bhi.n	800423e <SysTick_Handler+0x1a>
  HAL_IncTick();
 8004238:	f000 f8dc 	bl	80043f4 <HAL_IncTick>
}
 800423c:	bd08      	pop	{r3, pc}
		FatFsCnt = 0;
 800423e:	4613      	mov	r3, r2
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8004244:	f7ff ffd8 	bl	80041f8 <SDTimer_Handler>
 8004248:	e7f6      	b.n	8004238 <SysTick_Handler+0x14>
 800424a:	bf00      	nop
 800424c:	20000236 	.word	0x20000236

08004250 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004250:	2001      	movs	r0, #1
 8004252:	4770      	bx	lr

08004254 <_kill>:

int _kill(int pid, int sig)
{
 8004254:	b508      	push	{r3, lr}
	errno = EINVAL;
 8004256:	f004 fb53 	bl	8008900 <__errno>
 800425a:	2316      	movs	r3, #22
 800425c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800425e:	f04f 30ff 	mov.w	r0, #4294967295
 8004262:	bd08      	pop	{r3, pc}

08004264 <_exit>:

void _exit (int status)
{
 8004264:	b508      	push	{r3, lr}
	_kill(status, -1);
 8004266:	f04f 31ff 	mov.w	r1, #4294967295
 800426a:	f7ff fff3 	bl	8004254 <_kill>
	while (1) {}		/* Make sure we hang here */
 800426e:	e7fe      	b.n	800426e <_exit+0xa>

08004270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004270:	b570      	push	{r4, r5, r6, lr}
 8004272:	460c      	mov	r4, r1
 8004274:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004276:	2500      	movs	r5, #0
 8004278:	42b5      	cmp	r5, r6
 800427a:	da07      	bge.n	800428c <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 800427c:	f3af 8000 	nop.w
 8004280:	4621      	mov	r1, r4
 8004282:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004286:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8004288:	460c      	mov	r4, r1
 800428a:	e7f5      	b.n	8004278 <_read+0x8>
	}

return len;
}
 800428c:	4630      	mov	r0, r6
 800428e:	bd70      	pop	{r4, r5, r6, pc}

08004290 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	460c      	mov	r4, r1
 8004294:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004296:	2500      	movs	r5, #0
 8004298:	42b5      	cmp	r5, r6
 800429a:	da05      	bge.n	80042a8 <_write+0x18>
	{
		__io_putchar(*ptr++);
 800429c:	f814 0b01 	ldrb.w	r0, [r4], #1
 80042a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042a4:	3501      	adds	r5, #1
 80042a6:	e7f7      	b.n	8004298 <_write+0x8>
	}
	return len;
}
 80042a8:	4630      	mov	r0, r6
 80042aa:	bd70      	pop	{r4, r5, r6, pc}

080042ac <_close>:

int _close(int file)
{
	return -1;
}
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	4770      	bx	lr

080042b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80042b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042b6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80042b8:	2000      	movs	r0, #0
 80042ba:	4770      	bx	lr

080042bc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80042bc:	2001      	movs	r0, #1
 80042be:	4770      	bx	lr

080042c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80042c0:	2000      	movs	r0, #0
 80042c2:	4770      	bx	lr

080042c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c4:	b510      	push	{r4, lr}
 80042c6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042c8:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <_sbrk+0x38>)
 80042ca:	490d      	ldr	r1, [pc, #52]	; (8004300 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042cc:	480d      	ldr	r0, [pc, #52]	; (8004304 <_sbrk+0x40>)
 80042ce:	6800      	ldr	r0, [r0, #0]
 80042d0:	b140      	cbz	r0, 80042e4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042d2:	480c      	ldr	r0, [pc, #48]	; (8004304 <_sbrk+0x40>)
 80042d4:	6800      	ldr	r0, [r0, #0]
 80042d6:	4403      	add	r3, r0
 80042d8:	1a52      	subs	r2, r2, r1
 80042da:	4293      	cmp	r3, r2
 80042dc:	d806      	bhi.n	80042ec <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80042de:	4a09      	ldr	r2, [pc, #36]	; (8004304 <_sbrk+0x40>)
 80042e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80042e2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80042e4:	4807      	ldr	r0, [pc, #28]	; (8004304 <_sbrk+0x40>)
 80042e6:	4c08      	ldr	r4, [pc, #32]	; (8004308 <_sbrk+0x44>)
 80042e8:	6004      	str	r4, [r0, #0]
 80042ea:	e7f2      	b.n	80042d2 <_sbrk+0xe>
    errno = ENOMEM;
 80042ec:	f004 fb08 	bl	8008900 <__errno>
 80042f0:	230c      	movs	r3, #12
 80042f2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	e7f3      	b.n	80042e2 <_sbrk+0x1e>
 80042fa:	bf00      	nop
 80042fc:	20018000 	.word	0x20018000
 8004300:	00000400 	.word	0x00000400
 8004304:	20000238 	.word	0x20000238
 8004308:	20001218 	.word	0x20001218

0800430c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800430c:	4a03      	ldr	r2, [pc, #12]	; (800431c <SystemInit+0x10>)
 800430e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004312:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004316:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <Reset_Handler>:
 8004320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004358 <LoopFillZerobss+0x12>
 8004324:	480d      	ldr	r0, [pc, #52]	; (800435c <LoopFillZerobss+0x16>)
 8004326:	490e      	ldr	r1, [pc, #56]	; (8004360 <LoopFillZerobss+0x1a>)
 8004328:	4a0e      	ldr	r2, [pc, #56]	; (8004364 <LoopFillZerobss+0x1e>)
 800432a:	2300      	movs	r3, #0
 800432c:	e002      	b.n	8004334 <LoopCopyDataInit>

0800432e <CopyDataInit>:
 800432e:	58d4      	ldr	r4, [r2, r3]
 8004330:	50c4      	str	r4, [r0, r3]
 8004332:	3304      	adds	r3, #4

08004334 <LoopCopyDataInit>:
 8004334:	18c4      	adds	r4, r0, r3
 8004336:	428c      	cmp	r4, r1
 8004338:	d3f9      	bcc.n	800432e <CopyDataInit>
 800433a:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <LoopFillZerobss+0x22>)
 800433c:	4c0b      	ldr	r4, [pc, #44]	; (800436c <LoopFillZerobss+0x26>)
 800433e:	2300      	movs	r3, #0
 8004340:	e001      	b.n	8004346 <LoopFillZerobss>

08004342 <FillZerobss>:
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	3204      	adds	r2, #4

08004346 <LoopFillZerobss>:
 8004346:	42a2      	cmp	r2, r4
 8004348:	d3fb      	bcc.n	8004342 <FillZerobss>
 800434a:	f7ff ffdf 	bl	800430c <SystemInit>
 800434e:	f004 fadd 	bl	800890c <__libc_init_array>
 8004352:	f7ff fb11 	bl	8003978 <main>
 8004356:	4770      	bx	lr
 8004358:	20018000 	.word	0x20018000
 800435c:	20000000 	.word	0x20000000
 8004360:	20000214 	.word	0x20000214
 8004364:	0800cd78 	.word	0x0800cd78
 8004368:	20000218 	.word	0x20000218
 800436c:	20001214 	.word	0x20001214

08004370 <ADC_IRQHandler>:
 8004370:	e7fe      	b.n	8004370 <ADC_IRQHandler>
	...

08004374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004374:	b510      	push	{r4, lr}
 8004376:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004378:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <HAL_InitTick+0x40>)
 800437a:	7818      	ldrb	r0, [r3, #0]
 800437c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004380:	fbb3 f3f0 	udiv	r3, r3, r0
 8004384:	4a0c      	ldr	r2, [pc, #48]	; (80043b8 <HAL_InitTick+0x44>)
 8004386:	6810      	ldr	r0, [r2, #0]
 8004388:	fbb0 f0f3 	udiv	r0, r0, r3
 800438c:	f000 f8ac 	bl	80044e8 <HAL_SYSTICK_Config>
 8004390:	b968      	cbnz	r0, 80043ae <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004392:	2c0f      	cmp	r4, #15
 8004394:	d901      	bls.n	800439a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8004396:	2001      	movs	r0, #1
 8004398:	e00a      	b.n	80043b0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800439a:	2200      	movs	r2, #0
 800439c:	4621      	mov	r1, r4
 800439e:	f04f 30ff 	mov.w	r0, #4294967295
 80043a2:	f000 f85f 	bl	8004464 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_InitTick+0x48>)
 80043a8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043aa:	2000      	movs	r0, #0
 80043ac:	e000      	b.n	80043b0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80043ae:	2001      	movs	r0, #1
}
 80043b0:	bd10      	pop	{r4, pc}
 80043b2:	bf00      	nop
 80043b4:	20000024 	.word	0x20000024
 80043b8:	20000020 	.word	0x20000020
 80043bc:	20000028 	.word	0x20000028

080043c0 <HAL_Init>:
{
 80043c0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043c2:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <HAL_Init+0x30>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043da:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043dc:	2003      	movs	r0, #3
 80043de:	f000 f82f 	bl	8004440 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80043e2:	2000      	movs	r0, #0
 80043e4:	f7ff ffc6 	bl	8004374 <HAL_InitTick>
  HAL_MspInit();
 80043e8:	f7ff fcd4 	bl	8003d94 <HAL_MspInit>
}
 80043ec:	2000      	movs	r0, #0
 80043ee:	bd08      	pop	{r3, pc}
 80043f0:	40023c00 	.word	0x40023c00

080043f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80043f4:	4a03      	ldr	r2, [pc, #12]	; (8004404 <HAL_IncTick+0x10>)
 80043f6:	6811      	ldr	r1, [r2, #0]
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <HAL_IncTick+0x14>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	440b      	add	r3, r1
 80043fe:	6013      	str	r3, [r2, #0]
}
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000d98 	.word	0x20000d98
 8004408:	20000024 	.word	0x20000024

0800440c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800440c:	4b01      	ldr	r3, [pc, #4]	; (8004414 <HAL_GetTick+0x8>)
 800440e:	6818      	ldr	r0, [r3, #0]
}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000d98 	.word	0x20000d98

08004418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800441c:	f7ff fff6 	bl	800440c <HAL_GetTick>
 8004420:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004422:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004426:	d002      	beq.n	800442e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8004428:	4b04      	ldr	r3, [pc, #16]	; (800443c <HAL_Delay+0x24>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800442e:	f7ff ffed 	bl	800440c <HAL_GetTick>
 8004432:	1b40      	subs	r0, r0, r5
 8004434:	42a0      	cmp	r0, r4
 8004436:	d3fa      	bcc.n	800442e <HAL_Delay+0x16>
  {
  }
}
 8004438:	bd38      	pop	{r3, r4, r5, pc}
 800443a:	bf00      	nop
 800443c:	20000024 	.word	0x20000024

08004440 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004440:	4a07      	ldr	r2, [pc, #28]	; (8004460 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004442:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004444:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800444c:	0200      	lsls	r0, r0, #8
 800444e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004452:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800445c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800445e:	4770      	bx	lr
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004464:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004466:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <HAL_NVIC_SetPriority+0x60>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800446e:	f1c3 0407 	rsb	r4, r3, #7
 8004472:	2c04      	cmp	r4, #4
 8004474:	bf28      	it	cs
 8004476:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004478:	1d1d      	adds	r5, r3, #4
 800447a:	2d06      	cmp	r5, #6
 800447c:	d918      	bls.n	80044b0 <HAL_NVIC_SetPriority+0x4c>
 800447e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	f04f 35ff 	mov.w	r5, #4294967295
 8004484:	fa05 f404 	lsl.w	r4, r5, r4
 8004488:	ea21 0104 	bic.w	r1, r1, r4
 800448c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800448e:	fa05 f303 	lsl.w	r3, r5, r3
 8004492:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004496:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004498:	2800      	cmp	r0, #0
 800449a:	db0b      	blt.n	80044b4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449c:	0109      	lsls	r1, r1, #4
 800449e:	b2c9      	uxtb	r1, r1
 80044a0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80044a4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80044a8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80044ac:	bc30      	pop	{r4, r5}
 80044ae:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044b0:	2300      	movs	r3, #0
 80044b2:	e7e5      	b.n	8004480 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b4:	f000 000f 	and.w	r0, r0, #15
 80044b8:	0109      	lsls	r1, r1, #4
 80044ba:	b2c9      	uxtb	r1, r1
 80044bc:	4b02      	ldr	r3, [pc, #8]	; (80044c8 <HAL_NVIC_SetPriority+0x64>)
 80044be:	5419      	strb	r1, [r3, r0]
 80044c0:	e7f4      	b.n	80044ac <HAL_NVIC_SetPriority+0x48>
 80044c2:	bf00      	nop
 80044c4:	e000ed00 	.word	0xe000ed00
 80044c8:	e000ed14 	.word	0xe000ed14

080044cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044cc:	2800      	cmp	r0, #0
 80044ce:	db07      	blt.n	80044e0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d0:	f000 021f 	and.w	r2, r0, #31
 80044d4:	0940      	lsrs	r0, r0, #5
 80044d6:	2301      	movs	r3, #1
 80044d8:	4093      	lsls	r3, r2
 80044da:	4a02      	ldr	r2, [pc, #8]	; (80044e4 <HAL_NVIC_EnableIRQ+0x18>)
 80044dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	e000e100 	.word	0xe000e100

080044e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044e8:	3801      	subs	r0, #1
 80044ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80044ee:	d20a      	bcs.n	8004506 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <HAL_SYSTICK_Config+0x24>)
 80044f2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f4:	4a06      	ldr	r2, [pc, #24]	; (8004510 <HAL_SYSTICK_Config+0x28>)
 80044f6:	21f0      	movs	r1, #240	; 0xf0
 80044f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044fc:	2000      	movs	r0, #0
 80044fe:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004500:	2207      	movs	r2, #7
 8004502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004504:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004506:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	e000e010 	.word	0xe000e010
 8004510:	e000ed00 	.word	0xe000ed00

08004514 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004518:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 800451a:	f7ff ff77 	bl	800440c <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800451e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d006      	beq.n	8004536 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800452c:	2300      	movs	r3, #0
 800452e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8004532:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8004534:	bd70      	pop	{r4, r5, r6, pc}
 8004536:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004538:	6822      	ldr	r2, [r4, #0]
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	f023 0316 	bic.w	r3, r3, #22
 8004540:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004542:	6822      	ldr	r2, [r4, #0]
 8004544:	6953      	ldr	r3, [r2, #20]
 8004546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454a:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800454c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800454e:	b1e3      	cbz	r3, 800458a <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	f023 0308 	bic.w	r3, r3, #8
 8004558:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	6813      	ldr	r3, [r2, #0]
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f013 0f01 	tst.w	r3, #1
 800456c:	d011      	beq.n	8004592 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800456e:	f7ff ff4d 	bl	800440c <HAL_GetTick>
 8004572:	1b43      	subs	r3, r0, r5
 8004574:	2b05      	cmp	r3, #5
 8004576:	d9f5      	bls.n	8004564 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004578:	2320      	movs	r3, #32
 800457a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800457c:	2003      	movs	r0, #3
 800457e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004582:	2300      	movs	r3, #0
 8004584:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004588:	e7d4      	b.n	8004534 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800458a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1df      	bne.n	8004550 <HAL_DMA_Abort+0x3c>
 8004590:	e7e3      	b.n	800455a <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004592:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004594:	233f      	movs	r3, #63	; 0x3f
 8004596:	4093      	lsls	r3, r2
 8004598:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800459a:	2301      	movs	r3, #1
 800459c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80045a0:	2000      	movs	r0, #0
 80045a2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 80045a6:	e7c5      	b.n	8004534 <HAL_DMA_Abort+0x20>

080045a8 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045a8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d003      	beq.n	80045ba <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80045b6:	2001      	movs	r0, #1
 80045b8:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045ba:	2305      	movs	r3, #5
 80045bc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045c0:	6802      	ldr	r2, [r0, #0]
 80045c2:	6813      	ldr	r3, [r2, #0]
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045ca:	2000      	movs	r0, #0
}
 80045cc:	4770      	bx	lr
	...

080045d0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	f200 80cb 	bhi.w	800476e <HAL_GPIO_Init+0x19e>
{
 80045d8:	b4f0      	push	{r4, r5, r6, r7}
 80045da:	b082      	sub	sp, #8
 80045dc:	e05d      	b.n	800469a <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045de:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045e0:	005f      	lsls	r7, r3, #1
 80045e2:	2403      	movs	r4, #3
 80045e4:	40bc      	lsls	r4, r7
 80045e6:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045ea:	68cc      	ldr	r4, [r1, #12]
 80045ec:	40bc      	lsls	r4, r7
 80045ee:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80045f0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045f2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045f4:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045f8:	684c      	ldr	r4, [r1, #4]
 80045fa:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80045fe:	409a      	lsls	r2, r3
 8004600:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8004602:	6042      	str	r2, [r0, #4]
 8004604:	e057      	b.n	80046b6 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004606:	08dc      	lsrs	r4, r3, #3
 8004608:	3408      	adds	r4, #8
 800460a:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800460e:	f003 0207 	and.w	r2, r3, #7
 8004612:	0096      	lsls	r6, r2, #2
 8004614:	220f      	movs	r2, #15
 8004616:	40b2      	lsls	r2, r6
 8004618:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800461c:	690a      	ldr	r2, [r1, #16]
 800461e:	40b2      	lsls	r2, r6
 8004620:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8004622:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8004626:	e05a      	b.n	80046de <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004628:	2204      	movs	r2, #4
 800462a:	e000      	b.n	800462e <HAL_GPIO_Init+0x5e>
 800462c:	2200      	movs	r2, #0
 800462e:	40b2      	lsls	r2, r6
 8004630:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004632:	3402      	adds	r4, #2
 8004634:	4e4e      	ldr	r6, [pc, #312]	; (8004770 <HAL_GPIO_Init+0x1a0>)
 8004636:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800463a:	4a4e      	ldr	r2, [pc, #312]	; (8004774 <HAL_GPIO_Init+0x1a4>)
 800463c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800463e:	43ea      	mvns	r2, r5
 8004640:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004644:	684f      	ldr	r7, [r1, #4]
 8004646:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800464a:	d001      	beq.n	8004650 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 800464c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8004650:	4c48      	ldr	r4, [pc, #288]	; (8004774 <HAL_GPIO_Init+0x1a4>)
 8004652:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8004654:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004656:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800465a:	684f      	ldr	r7, [r1, #4]
 800465c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004660:	d001      	beq.n	8004666 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8004662:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8004666:	4c43      	ldr	r4, [pc, #268]	; (8004774 <HAL_GPIO_Init+0x1a4>)
 8004668:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800466a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800466c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004670:	684f      	ldr	r7, [r1, #4]
 8004672:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004676:	d001      	beq.n	800467c <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8004678:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800467c:	4c3d      	ldr	r4, [pc, #244]	; (8004774 <HAL_GPIO_Init+0x1a4>)
 800467e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8004680:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004682:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004684:	684e      	ldr	r6, [r1, #4]
 8004686:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800468a:	d001      	beq.n	8004690 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 800468c:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8004690:	4c38      	ldr	r4, [pc, #224]	; (8004774 <HAL_GPIO_Init+0x1a4>)
 8004692:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004694:	3301      	adds	r3, #1
 8004696:	2b0f      	cmp	r3, #15
 8004698:	d866      	bhi.n	8004768 <HAL_GPIO_Init+0x198>
    ioposition = 0x01U << position;
 800469a:	2201      	movs	r2, #1
 800469c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800469e:	680c      	ldr	r4, [r1, #0]
 80046a0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 80046a4:	ea32 0404 	bics.w	r4, r2, r4
 80046a8:	d1f4      	bne.n	8004694 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046aa:	684c      	ldr	r4, [r1, #4]
 80046ac:	f004 0403 	and.w	r4, r4, #3
 80046b0:	3c01      	subs	r4, #1
 80046b2:	2c01      	cmp	r4, #1
 80046b4:	d993      	bls.n	80045de <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046b6:	684a      	ldr	r2, [r1, #4]
 80046b8:	f002 0203 	and.w	r2, r2, #3
 80046bc:	2a03      	cmp	r2, #3
 80046be:	d009      	beq.n	80046d4 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 80046c0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046c2:	005e      	lsls	r6, r3, #1
 80046c4:	2203      	movs	r2, #3
 80046c6:	40b2      	lsls	r2, r6
 80046c8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046cc:	688a      	ldr	r2, [r1, #8]
 80046ce:	40b2      	lsls	r2, r6
 80046d0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80046d2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d4:	684a      	ldr	r2, [r1, #4]
 80046d6:	f002 0203 	and.w	r2, r2, #3
 80046da:	2a02      	cmp	r2, #2
 80046dc:	d093      	beq.n	8004606 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80046de:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046e0:	005e      	lsls	r6, r3, #1
 80046e2:	2203      	movs	r2, #3
 80046e4:	40b2      	lsls	r2, r6
 80046e6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ea:	684a      	ldr	r2, [r1, #4]
 80046ec:	f002 0203 	and.w	r2, r2, #3
 80046f0:	40b2      	lsls	r2, r6
 80046f2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80046f4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046f6:	684a      	ldr	r2, [r1, #4]
 80046f8:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80046fc:	d0ca      	beq.n	8004694 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fe:	2200      	movs	r2, #0
 8004700:	9201      	str	r2, [sp, #4]
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <HAL_GPIO_Init+0x1a8>)
 8004704:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004706:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800470a:	6454      	str	r4, [r2, #68]	; 0x44
 800470c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800470e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004712:	9201      	str	r2, [sp, #4]
 8004714:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004716:	089c      	lsrs	r4, r3, #2
 8004718:	1ca6      	adds	r6, r4, #2
 800471a:	4a15      	ldr	r2, [pc, #84]	; (8004770 <HAL_GPIO_Init+0x1a0>)
 800471c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004720:	f003 0203 	and.w	r2, r3, #3
 8004724:	0096      	lsls	r6, r2, #2
 8004726:	220f      	movs	r2, #15
 8004728:	40b2      	lsls	r2, r6
 800472a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800472e:	4a13      	ldr	r2, [pc, #76]	; (800477c <HAL_GPIO_Init+0x1ac>)
 8004730:	4290      	cmp	r0, r2
 8004732:	f43f af7b 	beq.w	800462c <HAL_GPIO_Init+0x5c>
 8004736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800473a:	4290      	cmp	r0, r2
 800473c:	d00e      	beq.n	800475c <HAL_GPIO_Init+0x18c>
 800473e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004742:	4290      	cmp	r0, r2
 8004744:	d00c      	beq.n	8004760 <HAL_GPIO_Init+0x190>
 8004746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800474a:	4290      	cmp	r0, r2
 800474c:	d00a      	beq.n	8004764 <HAL_GPIO_Init+0x194>
 800474e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004752:	4290      	cmp	r0, r2
 8004754:	f43f af68 	beq.w	8004628 <HAL_GPIO_Init+0x58>
 8004758:	2207      	movs	r2, #7
 800475a:	e768      	b.n	800462e <HAL_GPIO_Init+0x5e>
 800475c:	2201      	movs	r2, #1
 800475e:	e766      	b.n	800462e <HAL_GPIO_Init+0x5e>
 8004760:	2202      	movs	r2, #2
 8004762:	e764      	b.n	800462e <HAL_GPIO_Init+0x5e>
 8004764:	2203      	movs	r2, #3
 8004766:	e762      	b.n	800462e <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8004768:	b002      	add	sp, #8
 800476a:	bcf0      	pop	{r4, r5, r6, r7}
 800476c:	4770      	bx	lr
 800476e:	4770      	bx	lr
 8004770:	40013800 	.word	0x40013800
 8004774:	40013c00 	.word	0x40013c00
 8004778:	40023800 	.word	0x40023800
 800477c:	40020000 	.word	0x40020000

08004780 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004780:	6903      	ldr	r3, [r0, #16]
 8004782:	4219      	tst	r1, r3
 8004784:	d001      	beq.n	800478a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004786:	2001      	movs	r0, #1
 8004788:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800478a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800478c:	4770      	bx	lr

0800478e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800478e:	b10a      	cbz	r2, 8004794 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004790:	6181      	str	r1, [r0, #24]
 8004792:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004794:	0409      	lsls	r1, r1, #16
 8004796:	6181      	str	r1, [r0, #24]
  }
}
 8004798:	4770      	bx	lr

0800479a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800479a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800479c:	ea01 0203 	and.w	r2, r1, r3
 80047a0:	ea21 0103 	bic.w	r1, r1, r3
 80047a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80047a8:	6181      	str	r1, [r0, #24]
}
 80047aa:	4770      	bx	lr

080047ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047ac:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047ae:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4203      	tst	r3, r0
 80047b4:	d100      	bne.n	80047b8 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80047b6:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047b8:	4b02      	ldr	r3, [pc, #8]	; (80047c4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80047ba:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047bc:	f7fe fb60 	bl	8002e80 <HAL_GPIO_EXTI_Callback>
}
 80047c0:	e7f9      	b.n	80047b6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80047c2:	bf00      	nop
 80047c4:	40013c00 	.word	0x40013c00

080047c8 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c8:	6803      	ldr	r3, [r0, #0]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80047d0:	d101      	bne.n	80047d6 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80047d2:	2000      	movs	r0, #0
}
 80047d4:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047da:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80047dc:	2300      	movs	r3, #0
 80047de:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047e0:	2220      	movs	r2, #32
 80047e2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80047ec:	f042 0204 	orr.w	r2, r2, #4
 80047f0:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80047f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80047f6:	2001      	movs	r0, #1
 80047f8:	4770      	bx	lr

080047fa <I2C_WaitOnFlagUntilTimeout>:
{
 80047fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fe:	4607      	mov	r7, r0
 8004800:	460d      	mov	r5, r1
 8004802:	4690      	mov	r8, r2
 8004804:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004806:	e022      	b.n	800484e <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004808:	f7ff fe00 	bl	800440c <HAL_GetTick>
 800480c:	9b06      	ldr	r3, [sp, #24]
 800480e:	1ac0      	subs	r0, r0, r3
 8004810:	42b0      	cmp	r0, r6
 8004812:	d800      	bhi.n	8004816 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8004814:	b9de      	cbnz	r6, 800484e <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004816:	2300      	movs	r3, #0
 8004818:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800481a:	2220      	movs	r2, #32
 800481c:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004820:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004824:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004826:	f042 0220 	orr.w	r2, r2, #32
 800482a:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800482c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8004830:	2001      	movs	r0, #1
 8004832:	e01a      	b.n	800486a <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	699c      	ldr	r4, [r3, #24]
 8004838:	ea25 0404 	bic.w	r4, r5, r4
 800483c:	b2a4      	uxth	r4, r4
 800483e:	fab4 f484 	clz	r4, r4
 8004842:	0964      	lsrs	r4, r4, #5
 8004844:	45a0      	cmp	r8, r4
 8004846:	d10f      	bne.n	8004868 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8004848:	f1b6 3fff 	cmp.w	r6, #4294967295
 800484c:	d1dc      	bne.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800484e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8004852:	2b01      	cmp	r3, #1
 8004854:	d1ee      	bne.n	8004834 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695c      	ldr	r4, [r3, #20]
 800485a:	ea25 0404 	bic.w	r4, r5, r4
 800485e:	b2a4      	uxth	r4, r4
 8004860:	fab4 f484 	clz	r4, r4
 8004864:	0964      	lsrs	r4, r4, #5
 8004866:	e7ed      	b.n	8004844 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8004868:	2000      	movs	r0, #0
}
 800486a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800486e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004872:	4605      	mov	r5, r0
 8004874:	460e      	mov	r6, r1
 8004876:	4617      	mov	r7, r2
 8004878:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800487a:	e03d      	b.n	80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004882:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800488a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800488c:	2300      	movs	r3, #0
 800488e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004890:	2220      	movs	r2, #32
 8004892:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004896:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800489a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800489c:	f042 0204 	orr.w	r2, r2, #4
 80048a0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80048a2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80048a6:	2001      	movs	r0, #1
 80048a8:	e034      	b.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048aa:	f7ff fdaf 	bl	800440c <HAL_GetTick>
 80048ae:	eba0 0008 	sub.w	r0, r0, r8
 80048b2:	42b8      	cmp	r0, r7
 80048b4:	d800      	bhi.n	80048b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 80048b6:	b9ff      	cbnz	r7, 80048f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048bc:	2220      	movs	r2, #32
 80048be:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80048c8:	f042 0220 	orr.w	r2, r2, #32
 80048cc:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80048ce:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 80048d2:	2001      	movs	r0, #1
 80048d4:	e01e      	b.n	8004914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	699c      	ldr	r4, [r3, #24]
 80048da:	ea26 0404 	bic.w	r4, r6, r4
 80048de:	b2a4      	uxth	r4, r4
 80048e0:	3c00      	subs	r4, #0
 80048e2:	bf18      	it	ne
 80048e4:	2401      	movne	r4, #1
 80048e6:	b1a4      	cbz	r4, 8004912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80048f0:	d1c4      	bne.n	800487c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80048f2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80048f6:	d1d8      	bne.n	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048f8:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d1ea      	bne.n	80048d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	695c      	ldr	r4, [r3, #20]
 8004904:	ea26 0404 	bic.w	r4, r6, r4
 8004908:	b2a4      	uxth	r4, r4
 800490a:	3c00      	subs	r4, #0
 800490c:	bf18      	it	ne
 800490e:	2401      	movne	r4, #1
 8004910:	e7e9      	b.n	80048e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8004912:	2000      	movs	r0, #0
}
 8004914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004918 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	4604      	mov	r4, r0
 800491c:	460d      	mov	r5, r1
 800491e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004928:	d11c      	bne.n	8004964 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800492a:	4620      	mov	r0, r4
 800492c:	f7ff ff4c 	bl	80047c8 <I2C_IsAcknowledgeFailed>
 8004930:	b9d0      	cbnz	r0, 8004968 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004932:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004936:	d0f3      	beq.n	8004920 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004938:	f7ff fd68 	bl	800440c <HAL_GetTick>
 800493c:	1b80      	subs	r0, r0, r6
 800493e:	42a8      	cmp	r0, r5
 8004940:	d801      	bhi.n	8004946 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004942:	2d00      	cmp	r5, #0
 8004944:	d1ec      	bne.n	8004920 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004946:	2300      	movs	r3, #0
 8004948:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800494a:	2220      	movs	r2, #32
 800494c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004950:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004954:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004956:	f042 0220 	orr.w	r2, r2, #32
 800495a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800495c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004960:	2001      	movs	r0, #1
 8004962:	e000      	b.n	8004966 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004964:	2000      	movs	r0, #0
}
 8004966:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004968:	2001      	movs	r0, #1
 800496a:	e7fc      	b.n	8004966 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

0800496c <I2C_RequestMemoryWrite>:
{
 800496c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004970:	b085      	sub	sp, #20
 8004972:	4604      	mov	r4, r0
 8004974:	460d      	mov	r5, r1
 8004976:	4691      	mov	r9, r2
 8004978:	461f      	mov	r7, r3
 800497a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800497e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004980:	6803      	ldr	r3, [r0, #0]
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004988:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800498a:	9600      	str	r6, [sp, #0]
 800498c:	4643      	mov	r3, r8
 800498e:	2200      	movs	r2, #0
 8004990:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004994:	f7ff ff31 	bl	80047fa <I2C_WaitOnFlagUntilTimeout>
 8004998:	b960      	cbnz	r0, 80049b4 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80049a0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a2:	4633      	mov	r3, r6
 80049a4:	4642      	mov	r2, r8
 80049a6:	4926      	ldr	r1, [pc, #152]	; (8004a40 <I2C_RequestMemoryWrite+0xd4>)
 80049a8:	4620      	mov	r0, r4
 80049aa:	f7ff ff60 	bl	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ae:	b168      	cbz	r0, 80049cc <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80049b0:	2001      	movs	r0, #1
 80049b2:	e008      	b.n	80049c6 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80049bc:	d002      	beq.n	80049c4 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049c2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80049c4:	2003      	movs	r0, #3
}
 80049c6:	b005      	add	sp, #20
 80049c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049cc:	2300      	movs	r3, #0
 80049ce:	9303      	str	r3, [sp, #12]
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	9203      	str	r2, [sp, #12]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	9303      	str	r3, [sp, #12]
 80049da:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049dc:	4632      	mov	r2, r6
 80049de:	4641      	mov	r1, r8
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7ff ff99 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e6:	b930      	cbnz	r0, 80049f6 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049e8:	2f01      	cmp	r7, #1
 80049ea:	d10f      	bne.n	8004a0c <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	fa5f f689 	uxtb.w	r6, r9
 80049f2:	611e      	str	r6, [r3, #16]
 80049f4:	e7e7      	b.n	80049c6 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d001      	beq.n	8004a00 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80049fc:	2001      	movs	r0, #1
 80049fe:	e7e2      	b.n	80049c6 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	6822      	ldr	r2, [r4, #0]
 8004a02:	6813      	ldr	r3, [r2, #0]
 8004a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e7f7      	b.n	80049fc <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8004a12:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a14:	4632      	mov	r2, r6
 8004a16:	4641      	mov	r1, r8
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f7ff ff7d 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a1e:	b920      	cbnz	r0, 8004a2a <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	fa5f f689 	uxtb.w	r6, r9
 8004a26:	611e      	str	r6, [r3, #16]
 8004a28:	e7cd      	b.n	80049c6 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a2c:	2b04      	cmp	r3, #4
 8004a2e:	d001      	beq.n	8004a34 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8004a30:	2001      	movs	r0, #1
 8004a32:	e7c8      	b.n	80049c6 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	6813      	ldr	r3, [r2, #0]
 8004a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e7f7      	b.n	8004a30 <I2C_RequestMemoryWrite+0xc4>
 8004a40:	00010002 	.word	0x00010002

08004a44 <I2C_RequestMemoryRead>:
{
 8004a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	460d      	mov	r5, r1
 8004a4e:	4616      	mov	r6, r2
 8004a50:	4699      	mov	r9, r3
 8004a52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004a54:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a58:	6802      	ldr	r2, [r0, #0]
 8004a5a:	6813      	ldr	r3, [r2, #0]
 8004a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a60:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a62:	6803      	ldr	r3, [r0, #0]
 8004a64:	6819      	ldr	r1, [r3, #0]
 8004a66:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004a6a:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6c:	f8cd 8000 	str.w	r8, [sp]
 8004a70:	463b      	mov	r3, r7
 8004a72:	2200      	movs	r2, #0
 8004a74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a78:	f7ff febf 	bl	80047fa <I2C_WaitOnFlagUntilTimeout>
 8004a7c:	b970      	cbnz	r0, 8004a9c <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a7e:	fa5f fa85 	uxtb.w	sl, r5
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004a88:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a8a:	4643      	mov	r3, r8
 8004a8c:	463a      	mov	r2, r7
 8004a8e:	4941      	ldr	r1, [pc, #260]	; (8004b94 <I2C_RequestMemoryRead+0x150>)
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff feec 	bl	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a96:	b168      	cbz	r0, 8004ab4 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8004a98:	2001      	movs	r0, #1
 8004a9a:	e008      	b.n	8004aae <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004aa4:	d002      	beq.n	8004aac <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aaa:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004aac:	2003      	movs	r0, #3
}
 8004aae:	b004      	add	sp, #16
 8004ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9303      	str	r3, [sp, #12]
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	9203      	str	r2, [sp, #12]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	9303      	str	r3, [sp, #12]
 8004ac2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f7ff ff25 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ace:	b980      	cbnz	r0, 8004af2 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ad0:	f1b9 0f01 	cmp.w	r9, #1
 8004ad4:	d118      	bne.n	8004b08 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	b2f6      	uxtb	r6, r6
 8004ada:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004adc:	4642      	mov	r2, r8
 8004ade:	4639      	mov	r1, r7
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	f7ff ff19 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae6:	b368      	cbz	r0, 8004b44 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d024      	beq.n	8004b38 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8004aee:	2001      	movs	r0, #1
 8004af0:	e7dd      	b.n	8004aae <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d001      	beq.n	8004afc <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8004af8:	2001      	movs	r0, #1
 8004afa:	e7d8      	b.n	8004aae <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	6813      	ldr	r3, [r2, #0]
 8004b00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	e7f7      	b.n	8004af8 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	0a32      	lsrs	r2, r6, #8
 8004b0c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0e:	4642      	mov	r2, r8
 8004b10:	4639      	mov	r1, r7
 8004b12:	4620      	mov	r0, r4
 8004b14:	f7ff ff00 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b18:	b918      	cbnz	r0, 8004b22 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	b2f6      	uxtb	r6, r6
 8004b1e:	611e      	str	r6, [r3, #16]
 8004b20:	e7dc      	b.n	8004adc <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d001      	beq.n	8004b2c <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8004b28:	2001      	movs	r0, #1
 8004b2a:	e7c0      	b.n	8004aae <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2c:	6822      	ldr	r2, [r4, #0]
 8004b2e:	6813      	ldr	r3, [r2, #0]
 8004b30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e7f7      	b.n	8004b28 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b38:	6822      	ldr	r2, [r4, #0]
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e7d4      	b.n	8004aee <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b44:	6822      	ldr	r2, [r4, #0]
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b4e:	f8cd 8000 	str.w	r8, [sp]
 8004b52:	463b      	mov	r3, r7
 8004b54:	2200      	movs	r2, #0
 8004b56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f7ff fe4d 	bl	80047fa <I2C_WaitOnFlagUntilTimeout>
 8004b60:	b968      	cbnz	r0, 8004b7e <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b62:	6822      	ldr	r2, [r4, #0]
 8004b64:	f04a 0301 	orr.w	r3, sl, #1
 8004b68:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b6a:	4643      	mov	r3, r8
 8004b6c:	463a      	mov	r2, r7
 8004b6e:	4909      	ldr	r1, [pc, #36]	; (8004b94 <I2C_RequestMemoryRead+0x150>)
 8004b70:	4620      	mov	r0, r4
 8004b72:	f7ff fe7c 	bl	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d099      	beq.n	8004aae <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	e797      	b.n	8004aae <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004b86:	d002      	beq.n	8004b8e <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b8c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004b8e:	2003      	movs	r0, #3
 8004b90:	e78d      	b.n	8004aae <I2C_RequestMemoryRead+0x6a>
 8004b92:	bf00      	nop
 8004b94:	00010002 	.word	0x00010002

08004b98 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004b98:	b570      	push	{r4, r5, r6, lr}
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f013 0f04 	tst.w	r3, #4
 8004ba8:	d11c      	bne.n	8004be4 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7ff fe0c 	bl	80047c8 <I2C_IsAcknowledgeFailed>
 8004bb0:	b9d0      	cbnz	r0, 8004be8 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004bb2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004bb6:	d0f3      	beq.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb8:	f7ff fc28 	bl	800440c <HAL_GetTick>
 8004bbc:	1b80      	subs	r0, r0, r6
 8004bbe:	42a8      	cmp	r0, r5
 8004bc0:	d801      	bhi.n	8004bc6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004bc2:	2d00      	cmp	r5, #0
 8004bc4:	d1ec      	bne.n	8004ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004bd6:	f042 0220 	orr.w	r2, r2, #32
 8004bda:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004bdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004be0:	2001      	movs	r0, #1
 8004be2:	e000      	b.n	8004be6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004be4:	2000      	movs	r0, #0
}
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004be8:	2001      	movs	r0, #1
 8004bea:	e7fc      	b.n	8004be6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08004bec <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4605      	mov	r5, r0
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	6959      	ldr	r1, [r3, #20]
 8004bf8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004bfc:	d129      	bne.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004bfe:	6959      	ldr	r1, [r3, #20]
 8004c00:	f011 0f10 	tst.w	r1, #16
 8004c04:	d115      	bne.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c06:	f7ff fc01 	bl	800440c <HAL_GetTick>
 8004c0a:	1b80      	subs	r0, r0, r6
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	d801      	bhi.n	8004c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8004c10:	2c00      	cmp	r4, #0
 8004c12:	d1ef      	bne.n	8004bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c22:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004c24:	f042 0220 	orr.w	r2, r2, #32
 8004c28:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004c2a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004c2e:	2001      	movs	r0, #1
}
 8004c30:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c32:	f06f 0210 	mvn.w	r2, #16
 8004c36:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c42:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c46:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004c48:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004c4a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004c4e:	2001      	movs	r0, #1
 8004c50:	e7ee      	b.n	8004c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8004c52:	2000      	movs	r0, #0
 8004c54:	e7ec      	b.n	8004c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08004c58 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	f000 80cc 	beq.w	8004df6 <HAL_I2C_Init+0x19e>
{
 8004c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c60:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d077      	beq.n	8004d5a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c6a:	2324      	movs	r3, #36	; 0x24
 8004c6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	6813      	ldr	r3, [r2, #0]
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c7a:	6822      	ldr	r2, [r4, #0]
 8004c7c:	6813      	ldr	r3, [r2, #0]
 8004c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c82:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c84:	6822      	ldr	r2, [r4, #0]
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c8c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c8e:	f000 fde7 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c92:	6862      	ldr	r2, [r4, #4]
 8004c94:	4b5a      	ldr	r3, [pc, #360]	; (8004e00 <HAL_I2C_Init+0x1a8>)
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d864      	bhi.n	8004d64 <HAL_I2C_Init+0x10c>
 8004c9a:	4b5a      	ldr	r3, [pc, #360]	; (8004e04 <HAL_I2C_Init+0x1ac>)
 8004c9c:	4298      	cmp	r0, r3
 8004c9e:	bf8c      	ite	hi
 8004ca0:	2300      	movhi	r3, #0
 8004ca2:	2301      	movls	r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f040 80a8 	bne.w	8004dfa <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8004caa:	4d57      	ldr	r5, [pc, #348]	; (8004e08 <HAL_I2C_Init+0x1b0>)
 8004cac:	fba5 3500 	umull	r3, r5, r5, r0
 8004cb0:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cb2:	6826      	ldr	r6, [r4, #0]
 8004cb4:	6871      	ldr	r1, [r6, #4]
 8004cb6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004cba:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8004cbe:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cc0:	6821      	ldr	r1, [r4, #0]
 8004cc2:	6a0b      	ldr	r3, [r1, #32]
 8004cc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004cc8:	6865      	ldr	r5, [r4, #4]
 8004cca:	4a4d      	ldr	r2, [pc, #308]	; (8004e00 <HAL_I2C_Init+0x1a8>)
 8004ccc:	4295      	cmp	r5, r2
 8004cce:	d84f      	bhi.n	8004d70 <HAL_I2C_Init+0x118>
 8004cd0:	1c7a      	adds	r2, r7, #1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cd6:	6825      	ldr	r5, [r4, #0]
 8004cd8:	69e9      	ldr	r1, [r5, #28]
 8004cda:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004cde:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004ce2:	6863      	ldr	r3, [r4, #4]
 8004ce4:	4a46      	ldr	r2, [pc, #280]	; (8004e00 <HAL_I2C_Init+0x1a8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d84c      	bhi.n	8004d84 <HAL_I2C_Init+0x12c>
 8004cea:	3801      	subs	r0, #1
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	fbb0 f0f3 	udiv	r0, r0, r3
 8004cf2:	3001      	adds	r0, #1
 8004cf4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cf8:	4218      	tst	r0, r3
 8004cfa:	d078      	beq.n	8004dee <HAL_I2C_Init+0x196>
 8004cfc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8004d00:	430b      	orrs	r3, r1
 8004d02:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d04:	6821      	ldr	r1, [r4, #0]
 8004d06:	680b      	ldr	r3, [r1, #0]
 8004d08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004d0c:	69e2      	ldr	r2, [r4, #28]
 8004d0e:	6a20      	ldr	r0, [r4, #32]
 8004d10:	4302      	orrs	r2, r0
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d16:	6821      	ldr	r1, [r4, #0]
 8004d18:	688b      	ldr	r3, [r1, #8]
 8004d1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d22:	6922      	ldr	r2, [r4, #16]
 8004d24:	68e0      	ldr	r0, [r4, #12]
 8004d26:	4302      	orrs	r2, r0
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d2c:	6821      	ldr	r1, [r4, #0]
 8004d2e:	68cb      	ldr	r3, [r1, #12]
 8004d30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d34:	6962      	ldr	r2, [r4, #20]
 8004d36:	69a0      	ldr	r0, [r4, #24]
 8004d38:	4302      	orrs	r2, r0
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	6813      	ldr	r3, [r2, #0]
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d48:	2000      	movs	r0, #0
 8004d4a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d52:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d54:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8004d58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004d5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004d5e:	f7ff f835 	bl	8003dcc <HAL_I2C_MspInit>
 8004d62:	e782      	b.n	8004c6a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d64:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <HAL_I2C_Init+0x1b4>)
 8004d66:	4298      	cmp	r0, r3
 8004d68:	bf8c      	ite	hi
 8004d6a:	2300      	movhi	r3, #0
 8004d6c:	2301      	movls	r3, #1
 8004d6e:	e799      	b.n	8004ca4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d70:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d74:	fb02 f207 	mul.w	r2, r2, r7
 8004d78:	4d25      	ldr	r5, [pc, #148]	; (8004e10 <HAL_I2C_Init+0x1b8>)
 8004d7a:	fba5 5202 	umull	r5, r2, r5, r2
 8004d7e:	0992      	lsrs	r2, r2, #6
 8004d80:	3201      	adds	r2, #1
 8004d82:	e7a6      	b.n	8004cd2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d84:	68a2      	ldr	r2, [r4, #8]
 8004d86:	b9ba      	cbnz	r2, 8004db8 <HAL_I2C_Init+0x160>
 8004d88:	1e46      	subs	r6, r0, #1
 8004d8a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8004d8e:	fbb6 f6f7 	udiv	r6, r6, r7
 8004d92:	3601      	adds	r6, #1
 8004d94:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8004d98:	fab6 f686 	clz	r6, r6
 8004d9c:	0976      	lsrs	r6, r6, #5
 8004d9e:	bb46      	cbnz	r6, 8004df2 <HAL_I2C_Init+0x19a>
 8004da0:	b9c2      	cbnz	r2, 8004dd4 <HAL_I2C_Init+0x17c>
 8004da2:	1e42      	subs	r2, r0, #1
 8004da4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dac:	3201      	adds	r2, #1
 8004dae:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004db2:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8004db6:	e7a3      	b.n	8004d00 <HAL_I2C_Init+0xa8>
 8004db8:	1e46      	subs	r6, r0, #1
 8004dba:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8004dbe:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8004dc2:	fbb6 f6f7 	udiv	r6, r6, r7
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8004dcc:	fab6 f686 	clz	r6, r6
 8004dd0:	0976      	lsrs	r6, r6, #5
 8004dd2:	e7e4      	b.n	8004d9e <HAL_I2C_Init+0x146>
 8004dd4:	1e42      	subs	r2, r0, #1
 8004dd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004dda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004dde:	fbb2 f2f3 	udiv	r2, r2, r3
 8004de2:	3201      	adds	r2, #1
 8004de4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004de8:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8004dec:	e788      	b.n	8004d00 <HAL_I2C_Init+0xa8>
 8004dee:	2304      	movs	r3, #4
 8004df0:	e786      	b.n	8004d00 <HAL_I2C_Init+0xa8>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e784      	b.n	8004d00 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8004df6:	2001      	movs	r0, #1
}
 8004df8:	4770      	bx	lr
    return HAL_ERROR;
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	e7ac      	b.n	8004d58 <HAL_I2C_Init+0x100>
 8004dfe:	bf00      	nop
 8004e00:	000186a0 	.word	0x000186a0
 8004e04:	001e847f 	.word	0x001e847f
 8004e08:	431bde83 	.word	0x431bde83
 8004e0c:	003d08ff 	.word	0x003d08ff
 8004e10:	10624dd3 	.word	0x10624dd3

08004e14 <HAL_I2C_Mem_Write>:
{
 8004e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	460f      	mov	r7, r1
 8004e1e:	4690      	mov	r8, r2
 8004e20:	4699      	mov	r9, r3
 8004e22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8004e24:	f7ff faf2 	bl	800440c <HAL_GetTick>
 8004e28:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e2a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004e2e:	b2c0      	uxtb	r0, r0
 8004e30:	2820      	cmp	r0, #32
 8004e32:	d003      	beq.n	8004e3c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8004e34:	2002      	movs	r0, #2
}
 8004e36:	b003      	add	sp, #12
 8004e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e3c:	9500      	str	r5, [sp, #0]
 8004e3e:	2319      	movs	r3, #25
 8004e40:	2201      	movs	r2, #1
 8004e42:	494b      	ldr	r1, [pc, #300]	; (8004f70 <HAL_I2C_Mem_Write+0x15c>)
 8004e44:	4620      	mov	r0, r4
 8004e46:	f7ff fcd8 	bl	80047fa <I2C_WaitOnFlagUntilTimeout>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	f040 8089 	bne.w	8004f62 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8004e50:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f000 8086 	beq.w	8004f66 <HAL_I2C_Mem_Write+0x152>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	f012 0f01 	tst.w	r2, #1
 8004e68:	d103      	bne.n	8004e72 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	6813      	ldr	r3, [r2, #0]
 8004e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e7a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e7c:	2321      	movs	r3, #33	; 0x21
 8004e7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e82:	2340      	movs	r3, #64	; 0x40
 8004e84:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e8e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e90:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8004e94:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e98:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e9a:	4b36      	ldr	r3, [pc, #216]	; (8004f74 <HAL_I2C_Mem_Write+0x160>)
 8004e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e9e:	9501      	str	r5, [sp, #4]
 8004ea0:	9600      	str	r6, [sp, #0]
 8004ea2:	464b      	mov	r3, r9
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	4639      	mov	r1, r7
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f7ff fd5f 	bl	800496c <I2C_RequestMemoryWrite>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d15b      	bne.n	8004f6a <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8004eb2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d035      	beq.n	8004f24 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb8:	462a      	mov	r2, r5
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7ff fd2b 	bl	8004918 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec2:	bb20      	cbnz	r0, 8004f0e <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ec4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ece:	1c4b      	adds	r3, r1, #1
 8004ed0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004ed2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004ed4:	3a01      	subs	r2, #1
 8004ed6:	b292      	uxth	r2, r2
 8004ed8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004eda:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	6958      	ldr	r0, [r3, #20]
 8004ee8:	f010 0f04 	tst.w	r0, #4
 8004eec:	d0e1      	beq.n	8004eb2 <HAL_I2C_Mem_Write+0x9e>
 8004eee:	2a00      	cmp	r2, #0
 8004ef0:	d0df      	beq.n	8004eb2 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ef2:	784a      	ldrb	r2, [r1, #1]
 8004ef4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ef8:	3301      	adds	r3, #1
 8004efa:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004efc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004efe:	3b01      	subs	r3, #1
 8004f00:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004f02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004f0c:	e7d1      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d001      	beq.n	8004f18 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8004f14:	2001      	movs	r0, #1
 8004f16:	e78e      	b.n	8004e36 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f18:	6822      	ldr	r2, [r4, #0]
 8004f1a:	6813      	ldr	r3, [r2, #0]
 8004f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	e7f7      	b.n	8004f14 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f24:	462a      	mov	r2, r5
 8004f26:	4631      	mov	r1, r6
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f7ff fe35 	bl	8004b98 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f2e:	b150      	cbz	r0, 8004f46 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8004f36:	2001      	movs	r0, #1
 8004f38:	e77d      	b.n	8004e36 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	6813      	ldr	r3, [r2, #0]
 8004f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	e7f7      	b.n	8004f36 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	6813      	ldr	r3, [r2, #0]
 8004f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f4e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	2320      	movs	r3, #32
 8004f52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004f5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004f60:	e769      	b.n	8004e36 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8004f62:	2002      	movs	r0, #2
 8004f64:	e767      	b.n	8004e36 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8004f66:	2002      	movs	r0, #2
 8004f68:	e765      	b.n	8004e36 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	e763      	b.n	8004e36 <HAL_I2C_Mem_Write+0x22>
 8004f6e:	bf00      	nop
 8004f70:	00100002 	.word	0x00100002
 8004f74:	ffff0000 	.word	0xffff0000

08004f78 <HAL_I2C_Mem_Read>:
{
 8004f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f7c:	b087      	sub	sp, #28
 8004f7e:	4604      	mov	r4, r0
 8004f80:	460f      	mov	r7, r1
 8004f82:	4690      	mov	r8, r2
 8004f84:	4699      	mov	r9, r3
 8004f86:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8004f88:	f7ff fa40 	bl	800440c <HAL_GetTick>
 8004f8c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f8e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8004f92:	b2c0      	uxtb	r0, r0
 8004f94:	2820      	cmp	r0, #32
 8004f96:	d004      	beq.n	8004fa2 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8004f98:	2702      	movs	r7, #2
}
 8004f9a:	4638      	mov	r0, r7
 8004f9c:	b007      	add	sp, #28
 8004f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fa2:	9500      	str	r5, [sp, #0]
 8004fa4:	2319      	movs	r3, #25
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	499d      	ldr	r1, [pc, #628]	; (8005220 <HAL_I2C_Mem_Read+0x2a8>)
 8004faa:	4620      	mov	r0, r4
 8004fac:	f7ff fc25 	bl	80047fa <I2C_WaitOnFlagUntilTimeout>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	f040 8144 	bne.w	800523e <HAL_I2C_Mem_Read+0x2c6>
    __HAL_LOCK(hi2c);
 8004fb6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	f000 8141 	beq.w	8005242 <HAL_I2C_Mem_Read+0x2ca>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	f012 0f01 	tst.w	r2, #1
 8004fce:	d103      	bne.n	8004fd8 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fe0:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fe2:	2322      	movs	r3, #34	; 0x22
 8004fe4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fe8:	2340      	movs	r3, #64	; 0x40
 8004fea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ff4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ff6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8004ffa:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ffc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ffe:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005000:	4b88      	ldr	r3, [pc, #544]	; (8005224 <HAL_I2C_Mem_Read+0x2ac>)
 8005002:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005004:	9501      	str	r5, [sp, #4]
 8005006:	9600      	str	r6, [sp, #0]
 8005008:	464b      	mov	r3, r9
 800500a:	4642      	mov	r2, r8
 800500c:	4639      	mov	r1, r7
 800500e:	4620      	mov	r0, r4
 8005010:	f7ff fd18 	bl	8004a44 <I2C_RequestMemoryRead>
 8005014:	4607      	mov	r7, r0
 8005016:	2800      	cmp	r0, #0
 8005018:	f040 8115 	bne.w	8005246 <HAL_I2C_Mem_Read+0x2ce>
    if (hi2c->XferSize == 0U)
 800501c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800501e:	b95b      	cbnz	r3, 8005038 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	9202      	str	r2, [sp, #8]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	9202      	str	r2, [sp, #8]
 800502c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e098      	b.n	800516a <HAL_I2C_Mem_Read+0x1f2>
    else if (hi2c->XferSize == 1U)
 8005038:	2b01      	cmp	r3, #1
 800503a:	d00a      	beq.n	8005052 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 800503c:	2b02      	cmp	r3, #2
 800503e:	d01a      	beq.n	8005076 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005040:	2300      	movs	r3, #0
 8005042:	9305      	str	r3, [sp, #20]
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	9205      	str	r2, [sp, #20]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	9305      	str	r3, [sp, #20]
 800504e:	9b05      	ldr	r3, [sp, #20]
 8005050:	e08b      	b.n	800516a <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	6813      	ldr	r3, [r2, #0]
 8005056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505c:	2300      	movs	r3, #0
 800505e:	9303      	str	r3, [sp, #12]
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	695a      	ldr	r2, [r3, #20]
 8005064:	9203      	str	r2, [sp, #12]
 8005066:	699a      	ldr	r2, [r3, #24]
 8005068:	9203      	str	r2, [sp, #12]
 800506a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e079      	b.n	800516a <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	6813      	ldr	r3, [r2, #0]
 800507a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800507e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005080:	6822      	ldr	r2, [r4, #0]
 8005082:	6813      	ldr	r3, [r2, #0]
 8005084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005088:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508a:	2300      	movs	r3, #0
 800508c:	9304      	str	r3, [sp, #16]
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	9204      	str	r2, [sp, #16]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	9304      	str	r3, [sp, #16]
 8005098:	9b04      	ldr	r3, [sp, #16]
 800509a:	e066      	b.n	800516a <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800509c:	462a      	mov	r2, r5
 800509e:	4631      	mov	r1, r6
 80050a0:	4620      	mov	r0, r4
 80050a2:	f7ff fda3 	bl	8004bec <I2C_WaitOnRXNEFlagUntilTimeout>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	f040 80cf 	bne.w	800524a <HAL_I2C_Mem_Read+0x2d2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80050b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050b6:	3301      	adds	r3, #1
 80050b8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80050ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80050bc:	3b01      	subs	r3, #1
 80050be:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80050c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80050ca:	e04e      	b.n	800516a <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050cc:	9500      	str	r5, [sp, #0]
 80050ce:	4633      	mov	r3, r6
 80050d0:	2200      	movs	r2, #0
 80050d2:	4955      	ldr	r1, [pc, #340]	; (8005228 <HAL_I2C_Mem_Read+0x2b0>)
 80050d4:	4620      	mov	r0, r4
 80050d6:	f7ff fb90 	bl	80047fa <I2C_WaitOnFlagUntilTimeout>
 80050da:	2800      	cmp	r0, #0
 80050dc:	f040 80b7 	bne.w	800524e <HAL_I2C_Mem_Read+0x2d6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050e0:	6822      	ldr	r2, [r4, #0]
 80050e2:	6813      	ldr	r3, [r2, #0]
 80050e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050e8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80050f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80050f4:	1c53      	adds	r3, r2, #1
 80050f6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80050f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80050fa:	3b01      	subs	r3, #1
 80050fc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80050fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29b      	uxth	r3, r3
 8005106:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800510e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005110:	3301      	adds	r3, #1
 8005112:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005114:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005116:	3b01      	subs	r3, #1
 8005118:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800511a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29b      	uxth	r3, r3
 8005122:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005124:	e021      	b.n	800516a <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	6813      	ldr	r3, [r2, #0]
 800512a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800512e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	691a      	ldr	r2, [r3, #16]
 8005134:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005136:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005138:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800513a:	1c53      	adds	r3, r2, #1
 800513c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800513e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005140:	3b01      	subs	r3, #1
 8005142:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005144:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29b      	uxth	r3, r3
 800514c:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005156:	3301      	adds	r3, #1
 8005158:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800515a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800515c:	3b01      	subs	r3, #1
 800515e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005160:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29b      	uxth	r3, r3
 8005168:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800516a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800516c:	2b00      	cmp	r3, #0
 800516e:	d05d      	beq.n	800522c <HAL_I2C_Mem_Read+0x2b4>
      if (hi2c->XferSize <= 3U)
 8005170:	2b03      	cmp	r3, #3
 8005172:	d82b      	bhi.n	80051cc <HAL_I2C_Mem_Read+0x254>
        if (hi2c->XferSize == 1U)
 8005174:	2b01      	cmp	r3, #1
 8005176:	d091      	beq.n	800509c <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8005178:	2b02      	cmp	r3, #2
 800517a:	d0a7      	beq.n	80050cc <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800517c:	9500      	str	r5, [sp, #0]
 800517e:	4633      	mov	r3, r6
 8005180:	2200      	movs	r2, #0
 8005182:	4929      	ldr	r1, [pc, #164]	; (8005228 <HAL_I2C_Mem_Read+0x2b0>)
 8005184:	4620      	mov	r0, r4
 8005186:	f7ff fb38 	bl	80047fa <I2C_WaitOnFlagUntilTimeout>
 800518a:	2800      	cmp	r0, #0
 800518c:	d161      	bne.n	8005252 <HAL_I2C_Mem_Read+0x2da>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800518e:	6822      	ldr	r2, [r4, #0]
 8005190:	6813      	ldr	r3, [r2, #0]
 8005192:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005196:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800519e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80051a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051a2:	3301      	adds	r3, #1
 80051a4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80051a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80051ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051b6:	9500      	str	r5, [sp, #0]
 80051b8:	4633      	mov	r3, r6
 80051ba:	2200      	movs	r2, #0
 80051bc:	491a      	ldr	r1, [pc, #104]	; (8005228 <HAL_I2C_Mem_Read+0x2b0>)
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff fb1b 	bl	80047fa <I2C_WaitOnFlagUntilTimeout>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d0ae      	beq.n	8005126 <HAL_I2C_Mem_Read+0x1ae>
            return HAL_ERROR;
 80051c8:	2701      	movs	r7, #1
 80051ca:	e6e6      	b.n	8004f9a <HAL_I2C_Mem_Read+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051cc:	462a      	mov	r2, r5
 80051ce:	4631      	mov	r1, r6
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7ff fd0b 	bl	8004bec <I2C_WaitOnRXNEFlagUntilTimeout>
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d13d      	bne.n	8005256 <HAL_I2C_Mem_Read+0x2de>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80051e4:	1c53      	adds	r3, r2, #1
 80051e6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80051e8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80051ea:	3b01      	subs	r3, #1
 80051ec:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80051ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	6959      	ldr	r1, [r3, #20]
 80051fc:	f011 0f04 	tst.w	r1, #4
 8005200:	d0b3      	beq.n	800516a <HAL_I2C_Mem_Read+0x1f2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005208:	3301      	adds	r3, #1
 800520a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800520c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800520e:	3b01      	subs	r3, #1
 8005210:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005212:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29b      	uxth	r3, r3
 800521a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800521c:	e7a5      	b.n	800516a <HAL_I2C_Mem_Read+0x1f2>
 800521e:	bf00      	nop
 8005220:	00100002 	.word	0x00100002
 8005224:	ffff0000 	.word	0xffff0000
 8005228:	00010004 	.word	0x00010004
    hi2c->State = HAL_I2C_STATE_READY;
 800522c:	2320      	movs	r3, #32
 800522e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005232:	2300      	movs	r3, #0
 8005234:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005238:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800523c:	e6ad      	b.n	8004f9a <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 800523e:	2702      	movs	r7, #2
 8005240:	e6ab      	b.n	8004f9a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8005242:	2702      	movs	r7, #2
 8005244:	e6a9      	b.n	8004f9a <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 8005246:	2701      	movs	r7, #1
 8005248:	e6a7      	b.n	8004f9a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 800524a:	2701      	movs	r7, #1
 800524c:	e6a5      	b.n	8004f9a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 800524e:	2701      	movs	r7, #1
 8005250:	e6a3      	b.n	8004f9a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8005252:	2701      	movs	r7, #1
 8005254:	e6a1      	b.n	8004f9a <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 8005256:	2701      	movs	r7, #1
 8005258:	e69f      	b.n	8004f9a <HAL_I2C_Mem_Read+0x22>
 800525a:	bf00      	nop

0800525c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800525c:	2800      	cmp	r0, #0
 800525e:	f000 81df 	beq.w	8005620 <HAL_RCC_OscConfig+0x3c4>
{
 8005262:	b570      	push	{r4, r5, r6, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005268:	6803      	ldr	r3, [r0, #0]
 800526a:	f013 0f01 	tst.w	r3, #1
 800526e:	d03b      	beq.n	80052e8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005270:	4ba6      	ldr	r3, [pc, #664]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	2b04      	cmp	r3, #4
 800527a:	d02c      	beq.n	80052d6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800527c:	4ba3      	ldr	r3, [pc, #652]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005284:	2b08      	cmp	r3, #8
 8005286:	d021      	beq.n	80052cc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005288:	6863      	ldr	r3, [r4, #4]
 800528a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528e:	d04f      	beq.n	8005330 <HAL_RCC_OscConfig+0xd4>
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005294:	d052      	beq.n	800533c <HAL_RCC_OscConfig+0xe0>
 8005296:	4b9d      	ldr	r3, [pc, #628]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052a8:	6863      	ldr	r3, [r4, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d050      	beq.n	8005350 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ae:	f7ff f8ad 	bl	800440c <HAL_GetTick>
 80052b2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b4:	4b95      	ldr	r3, [pc, #596]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80052bc:	d114      	bne.n	80052e8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052be:	f7ff f8a5 	bl	800440c <HAL_GetTick>
 80052c2:	1b40      	subs	r0, r0, r5
 80052c4:	2864      	cmp	r0, #100	; 0x64
 80052c6:	d9f5      	bls.n	80052b4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80052c8:	2003      	movs	r0, #3
 80052ca:	e1b0      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052cc:	4b8f      	ldr	r3, [pc, #572]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80052d4:	d0d8      	beq.n	8005288 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d6:	4b8d      	ldr	r3, [pc, #564]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80052de:	d003      	beq.n	80052e8 <HAL_RCC_OscConfig+0x8c>
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 819e 	beq.w	8005624 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	f013 0f02 	tst.w	r3, #2
 80052ee:	d054      	beq.n	800539a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052f0:	4b86      	ldr	r3, [pc, #536]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f013 0f0c 	tst.w	r3, #12
 80052f8:	d03e      	beq.n	8005378 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052fa:	4b84      	ldr	r3, [pc, #528]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005302:	2b08      	cmp	r3, #8
 8005304:	d033      	beq.n	800536e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005306:	68e3      	ldr	r3, [r4, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d067      	beq.n	80053dc <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800530c:	4b80      	ldr	r3, [pc, #512]	; (8005510 <HAL_RCC_OscConfig+0x2b4>)
 800530e:	2201      	movs	r2, #1
 8005310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005312:	f7ff f87b 	bl	800440c <HAL_GetTick>
 8005316:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005318:	4b7c      	ldr	r3, [pc, #496]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f013 0f02 	tst.w	r3, #2
 8005320:	d153      	bne.n	80053ca <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005322:	f7ff f873 	bl	800440c <HAL_GetTick>
 8005326:	1b40      	subs	r0, r0, r5
 8005328:	2802      	cmp	r0, #2
 800532a:	d9f5      	bls.n	8005318 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800532c:	2003      	movs	r0, #3
 800532e:	e17e      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005330:	4a76      	ldr	r2, [pc, #472]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 8005332:	6813      	ldr	r3, [r2, #0]
 8005334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005338:	6013      	str	r3, [r2, #0]
 800533a:	e7b5      	b.n	80052a8 <HAL_RCC_OscConfig+0x4c>
 800533c:	4b73      	ldr	r3, [pc, #460]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e7ab      	b.n	80052a8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8005350:	f7ff f85c 	bl	800440c <HAL_GetTick>
 8005354:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005356:	4b6d      	ldr	r3, [pc, #436]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800535e:	d0c3      	beq.n	80052e8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005360:	f7ff f854 	bl	800440c <HAL_GetTick>
 8005364:	1b40      	subs	r0, r0, r5
 8005366:	2864      	cmp	r0, #100	; 0x64
 8005368:	d9f5      	bls.n	8005356 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800536a:	2003      	movs	r0, #3
 800536c:	e15f      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800536e:	4b67      	ldr	r3, [pc, #412]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005376:	d1c6      	bne.n	8005306 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005378:	4b64      	ldr	r3, [pc, #400]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f013 0f02 	tst.w	r3, #2
 8005380:	d003      	beq.n	800538a <HAL_RCC_OscConfig+0x12e>
 8005382:	68e3      	ldr	r3, [r4, #12]
 8005384:	2b01      	cmp	r3, #1
 8005386:	f040 814f 	bne.w	8005628 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538a:	4a60      	ldr	r2, [pc, #384]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005392:	6921      	ldr	r1, [r4, #16]
 8005394:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005398:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	f013 0f08 	tst.w	r3, #8
 80053a0:	d040      	beq.n	8005424 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053a2:	6963      	ldr	r3, [r4, #20]
 80053a4:	b363      	cbz	r3, 8005400 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a6:	4b5b      	ldr	r3, [pc, #364]	; (8005514 <HAL_RCC_OscConfig+0x2b8>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ac:	f7ff f82e 	bl	800440c <HAL_GetTick>
 80053b0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053b2:	4b56      	ldr	r3, [pc, #344]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80053b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b6:	f013 0f02 	tst.w	r3, #2
 80053ba:	d133      	bne.n	8005424 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053bc:	f7ff f826 	bl	800440c <HAL_GetTick>
 80053c0:	1b40      	subs	r0, r0, r5
 80053c2:	2802      	cmp	r0, #2
 80053c4:	d9f5      	bls.n	80053b2 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 80053c6:	2003      	movs	r0, #3
 80053c8:	e131      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ca:	4a50      	ldr	r2, [pc, #320]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80053cc:	6813      	ldr	r3, [r2, #0]
 80053ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053d2:	6921      	ldr	r1, [r4, #16]
 80053d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e7de      	b.n	800539a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80053dc:	4b4c      	ldr	r3, [pc, #304]	; (8005510 <HAL_RCC_OscConfig+0x2b4>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80053e2:	f7ff f813 	bl	800440c <HAL_GetTick>
 80053e6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053e8:	4b48      	ldr	r3, [pc, #288]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f013 0f02 	tst.w	r3, #2
 80053f0:	d0d3      	beq.n	800539a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f2:	f7ff f80b 	bl	800440c <HAL_GetTick>
 80053f6:	1b40      	subs	r0, r0, r5
 80053f8:	2802      	cmp	r0, #2
 80053fa:	d9f5      	bls.n	80053e8 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80053fc:	2003      	movs	r0, #3
 80053fe:	e116      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005400:	4b44      	ldr	r3, [pc, #272]	; (8005514 <HAL_RCC_OscConfig+0x2b8>)
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005406:	f7ff f801 	bl	800440c <HAL_GetTick>
 800540a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800540c:	4b3f      	ldr	r3, [pc, #252]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 800540e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005410:	f013 0f02 	tst.w	r3, #2
 8005414:	d006      	beq.n	8005424 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005416:	f7fe fff9 	bl	800440c <HAL_GetTick>
 800541a:	1b40      	subs	r0, r0, r5
 800541c:	2802      	cmp	r0, #2
 800541e:	d9f5      	bls.n	800540c <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8005420:	2003      	movs	r0, #3
 8005422:	e104      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	f013 0f04 	tst.w	r3, #4
 800542a:	d078      	beq.n	800551e <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542c:	4b37      	ldr	r3, [pc, #220]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005434:	d10d      	bne.n	8005452 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	9301      	str	r3, [sp, #4]
 800543a:	4b34      	ldr	r3, [pc, #208]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 800543c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800544e:	2501      	movs	r5, #1
 8005450:	e000      	b.n	8005454 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8005452:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005454:	4b30      	ldr	r3, [pc, #192]	; (8005518 <HAL_RCC_OscConfig+0x2bc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f413 7f80 	tst.w	r3, #256	; 0x100
 800545c:	d021      	beq.n	80054a2 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800545e:	68a3      	ldr	r3, [r4, #8]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d032      	beq.n	80054ca <HAL_RCC_OscConfig+0x26e>
 8005464:	2b05      	cmp	r3, #5
 8005466:	d036      	beq.n	80054d6 <HAL_RCC_OscConfig+0x27a>
 8005468:	4b28      	ldr	r3, [pc, #160]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 800546a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800546c:	f022 0201 	bic.w	r2, r2, #1
 8005470:	671a      	str	r2, [r3, #112]	; 0x70
 8005472:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005474:	f022 0204 	bic.w	r2, r2, #4
 8005478:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d034      	beq.n	80054ea <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fe ffc4 	bl	800440c <HAL_GetTick>
 8005484:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005486:	4b21      	ldr	r3, [pc, #132]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548a:	f013 0f02 	tst.w	r3, #2
 800548e:	d145      	bne.n	800551c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005490:	f7fe ffbc 	bl	800440c <HAL_GetTick>
 8005494:	1b80      	subs	r0, r0, r6
 8005496:	f241 3388 	movw	r3, #5000	; 0x1388
 800549a:	4298      	cmp	r0, r3
 800549c:	d9f3      	bls.n	8005486 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800549e:	2003      	movs	r0, #3
 80054a0:	e0c5      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_RCC_OscConfig+0x2bc>)
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054aa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80054ac:	f7fe ffae 	bl	800440c <HAL_GetTick>
 80054b0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b2:	4b19      	ldr	r3, [pc, #100]	; (8005518 <HAL_RCC_OscConfig+0x2bc>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80054ba:	d1d0      	bne.n	800545e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054bc:	f7fe ffa6 	bl	800440c <HAL_GetTick>
 80054c0:	1b80      	subs	r0, r0, r6
 80054c2:	2802      	cmp	r0, #2
 80054c4:	d9f5      	bls.n	80054b2 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80054c6:	2003      	movs	r0, #3
 80054c8:	e0b1      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ca:	4a10      	ldr	r2, [pc, #64]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80054cc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	6713      	str	r3, [r2, #112]	; 0x70
 80054d4:	e7d1      	b.n	800547a <HAL_RCC_OscConfig+0x21e>
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80054d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054da:	f042 0204 	orr.w	r2, r2, #4
 80054de:	671a      	str	r2, [r3, #112]	; 0x70
 80054e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	671a      	str	r2, [r3, #112]	; 0x70
 80054e8:	e7c7      	b.n	800547a <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ea:	f7fe ff8f 	bl	800440c <HAL_GetTick>
 80054ee:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <HAL_RCC_OscConfig+0x2b0>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f4:	f013 0f02 	tst.w	r3, #2
 80054f8:	d010      	beq.n	800551c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054fa:	f7fe ff87 	bl	800440c <HAL_GetTick>
 80054fe:	1b80      	subs	r0, r0, r6
 8005500:	f241 3388 	movw	r3, #5000	; 0x1388
 8005504:	4298      	cmp	r0, r3
 8005506:	d9f3      	bls.n	80054f0 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8005508:	2003      	movs	r0, #3
 800550a:	e090      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
 800550c:	40023800 	.word	0x40023800
 8005510:	42470000 	.word	0x42470000
 8005514:	42470e80 	.word	0x42470e80
 8005518:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800551c:	b9ed      	cbnz	r5, 800555a <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800551e:	69a3      	ldr	r3, [r4, #24]
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8083 	beq.w	800562c <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005526:	4a49      	ldr	r2, [pc, #292]	; (800564c <HAL_RCC_OscConfig+0x3f0>)
 8005528:	6892      	ldr	r2, [r2, #8]
 800552a:	f002 020c 	and.w	r2, r2, #12
 800552e:	2a08      	cmp	r2, #8
 8005530:	d051      	beq.n	80055d6 <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005532:	2b02      	cmp	r3, #2
 8005534:	d017      	beq.n	8005566 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005536:	4b46      	ldr	r3, [pc, #280]	; (8005650 <HAL_RCC_OscConfig+0x3f4>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fe ff66 	bl	800440c <HAL_GetTick>
 8005540:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005542:	4b42      	ldr	r3, [pc, #264]	; (800564c <HAL_RCC_OscConfig+0x3f0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800554a:	d042      	beq.n	80055d2 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800554c:	f7fe ff5e 	bl	800440c <HAL_GetTick>
 8005550:	1b00      	subs	r0, r0, r4
 8005552:	2802      	cmp	r0, #2
 8005554:	d9f5      	bls.n	8005542 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8005556:	2003      	movs	r0, #3
 8005558:	e069      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800555a:	4a3c      	ldr	r2, [pc, #240]	; (800564c <HAL_RCC_OscConfig+0x3f0>)
 800555c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800555e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005562:	6413      	str	r3, [r2, #64]	; 0x40
 8005564:	e7db      	b.n	800551e <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8005566:	4b3a      	ldr	r3, [pc, #232]	; (8005650 <HAL_RCC_OscConfig+0x3f4>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800556c:	f7fe ff4e 	bl	800440c <HAL_GetTick>
 8005570:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005572:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_RCC_OscConfig+0x3f0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800557a:	d006      	beq.n	800558a <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557c:	f7fe ff46 	bl	800440c <HAL_GetTick>
 8005580:	1b40      	subs	r0, r0, r5
 8005582:	2802      	cmp	r0, #2
 8005584:	d9f5      	bls.n	8005572 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8005586:	2003      	movs	r0, #3
 8005588:	e051      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800558a:	69e3      	ldr	r3, [r4, #28]
 800558c:	6a22      	ldr	r2, [r4, #32]
 800558e:	4313      	orrs	r3, r2
 8005590:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005592:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005596:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005598:	0852      	lsrs	r2, r2, #1
 800559a:	3a01      	subs	r2, #1
 800559c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80055a2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80055a6:	4a29      	ldr	r2, [pc, #164]	; (800564c <HAL_RCC_OscConfig+0x3f0>)
 80055a8:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80055aa:	4b29      	ldr	r3, [pc, #164]	; (8005650 <HAL_RCC_OscConfig+0x3f4>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80055b0:	f7fe ff2c 	bl	800440c <HAL_GetTick>
 80055b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055b6:	4b25      	ldr	r3, [pc, #148]	; (800564c <HAL_RCC_OscConfig+0x3f0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80055be:	d106      	bne.n	80055ce <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c0:	f7fe ff24 	bl	800440c <HAL_GetTick>
 80055c4:	1b00      	subs	r0, r0, r4
 80055c6:	2802      	cmp	r0, #2
 80055c8:	d9f5      	bls.n	80055b6 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80055ca:	2003      	movs	r0, #3
 80055cc:	e02f      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80055ce:	2000      	movs	r0, #0
 80055d0:	e02d      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
 80055d2:	2000      	movs	r0, #0
 80055d4:	e02b      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d02b      	beq.n	8005632 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 80055da:	4b1c      	ldr	r3, [pc, #112]	; (800564c <HAL_RCC_OscConfig+0x3f0>)
 80055dc:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055de:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80055e2:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055e4:	4291      	cmp	r1, r2
 80055e6:	d126      	bne.n	8005636 <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055ec:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ee:	428a      	cmp	r2, r1
 80055f0:	d123      	bne.n	800563a <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055f4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80055f8:	401a      	ands	r2, r3
 80055fa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80055fe:	d11e      	bne.n	800563e <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005600:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8005604:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005606:	0852      	lsrs	r2, r2, #1
 8005608:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800560a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800560e:	d118      	bne.n	8005642 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005610:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005614:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005616:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800561a:	d114      	bne.n	8005646 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 800561c:	2000      	movs	r0, #0
 800561e:	e006      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8005620:	2001      	movs	r0, #1
}
 8005622:	4770      	bx	lr
        return HAL_ERROR;
 8005624:	2001      	movs	r0, #1
 8005626:	e002      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8005628:	2001      	movs	r0, #1
 800562a:	e000      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 800562c:	2000      	movs	r0, #0
}
 800562e:	b002      	add	sp, #8
 8005630:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005632:	2001      	movs	r0, #1
 8005634:	e7fb      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8005636:	2001      	movs	r0, #1
 8005638:	e7f9      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
 800563a:	2001      	movs	r0, #1
 800563c:	e7f7      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
 800563e:	2001      	movs	r0, #1
 8005640:	e7f5      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
 8005642:	2001      	movs	r0, #1
 8005644:	e7f3      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
 8005646:	2001      	movs	r0, #1
 8005648:	e7f1      	b.n	800562e <HAL_RCC_OscConfig+0x3d2>
 800564a:	bf00      	nop
 800564c:	40023800 	.word	0x40023800
 8005650:	42470060 	.word	0x42470060

08005654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005656:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 030c 	and.w	r3, r3, #12
 800565e:	2b04      	cmp	r3, #4
 8005660:	d03d      	beq.n	80056de <HAL_RCC_GetSysClockFreq+0x8a>
 8005662:	2b08      	cmp	r3, #8
 8005664:	d13d      	bne.n	80056e2 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005666:	4b20      	ldr	r3, [pc, #128]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005674:	d012      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005676:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005678:	6859      	ldr	r1, [r3, #4]
 800567a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800567e:	2300      	movs	r3, #0
 8005680:	481a      	ldr	r0, [pc, #104]	; (80056ec <HAL_RCC_GetSysClockFreq+0x98>)
 8005682:	fba1 0100 	umull	r0, r1, r1, r0
 8005686:	f7fb fab7 	bl	8000bf8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005692:	3301      	adds	r3, #1
 8005694:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005696:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800569a:	e023      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800569c:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80056a4:	015c      	lsls	r4, r3, #5
 80056a6:	2500      	movs	r5, #0
 80056a8:	1ae4      	subs	r4, r4, r3
 80056aa:	f165 0500 	sbc.w	r5, r5, #0
 80056ae:	01ae      	lsls	r6, r5, #6
 80056b0:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80056b4:	01a7      	lsls	r7, r4, #6
 80056b6:	1b38      	subs	r0, r7, r4
 80056b8:	eb66 0105 	sbc.w	r1, r6, r5
 80056bc:	00cc      	lsls	r4, r1, #3
 80056be:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 80056c2:	00c5      	lsls	r5, r0, #3
 80056c4:	18e8      	adds	r0, r5, r3
 80056c6:	f144 0100 	adc.w	r1, r4, #0
 80056ca:	028b      	lsls	r3, r1, #10
 80056cc:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80056d0:	0284      	lsls	r4, r0, #10
 80056d2:	4620      	mov	r0, r4
 80056d4:	4619      	mov	r1, r3
 80056d6:	2300      	movs	r3, #0
 80056d8:	f7fb fa8e 	bl	8000bf8 <__aeabi_uldivmod>
 80056dc:	e7d5      	b.n	800568a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 80056de:	4803      	ldr	r0, [pc, #12]	; (80056ec <HAL_RCC_GetSysClockFreq+0x98>)
 80056e0:	e000      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e2:	4803      	ldr	r0, [pc, #12]	; (80056f0 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80056e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e6:	bf00      	nop
 80056e8:	40023800 	.word	0x40023800
 80056ec:	017d7840 	.word	0x017d7840
 80056f0:	00f42400 	.word	0x00f42400

080056f4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80056f4:	2800      	cmp	r0, #0
 80056f6:	f000 809b 	beq.w	8005830 <HAL_RCC_ClockConfig+0x13c>
{
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	460d      	mov	r5, r1
 80056fe:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005700:	4b4f      	ldr	r3, [pc, #316]	; (8005840 <HAL_RCC_ClockConfig+0x14c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0307 	and.w	r3, r3, #7
 8005708:	428b      	cmp	r3, r1
 800570a:	d208      	bcs.n	800571e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570c:	b2cb      	uxtb	r3, r1
 800570e:	4a4c      	ldr	r2, [pc, #304]	; (8005840 <HAL_RCC_ClockConfig+0x14c>)
 8005710:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	6813      	ldr	r3, [r2, #0]
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	428b      	cmp	r3, r1
 800571a:	f040 808b 	bne.w	8005834 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	f013 0f02 	tst.w	r3, #2
 8005724:	d017      	beq.n	8005756 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005726:	f013 0f04 	tst.w	r3, #4
 800572a:	d004      	beq.n	8005736 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800572c:	4a45      	ldr	r2, [pc, #276]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 800572e:	6893      	ldr	r3, [r2, #8]
 8005730:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005734:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	f013 0f08 	tst.w	r3, #8
 800573c:	d004      	beq.n	8005748 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800573e:	4a41      	ldr	r2, [pc, #260]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 8005740:	6893      	ldr	r3, [r2, #8]
 8005742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005746:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005748:	4a3e      	ldr	r2, [pc, #248]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 800574a:	6893      	ldr	r3, [r2, #8]
 800574c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005750:	68a1      	ldr	r1, [r4, #8]
 8005752:	430b      	orrs	r3, r1
 8005754:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	f013 0f01 	tst.w	r3, #1
 800575c:	d032      	beq.n	80057c4 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800575e:	6863      	ldr	r3, [r4, #4]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d021      	beq.n	80057a8 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005764:	1e9a      	subs	r2, r3, #2
 8005766:	2a01      	cmp	r2, #1
 8005768:	d925      	bls.n	80057b6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576a:	4a36      	ldr	r2, [pc, #216]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	f012 0f02 	tst.w	r2, #2
 8005772:	d061      	beq.n	8005838 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005774:	4933      	ldr	r1, [pc, #204]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 8005776:	688a      	ldr	r2, [r1, #8]
 8005778:	f022 0203 	bic.w	r2, r2, #3
 800577c:	4313      	orrs	r3, r2
 800577e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005780:	f7fe fe44 	bl	800440c <HAL_GetTick>
 8005784:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005786:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 030c 	and.w	r3, r3, #12
 800578e:	6862      	ldr	r2, [r4, #4]
 8005790:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005794:	d016      	beq.n	80057c4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005796:	f7fe fe39 	bl	800440c <HAL_GetTick>
 800579a:	1b80      	subs	r0, r0, r6
 800579c:	f241 3388 	movw	r3, #5000	; 0x1388
 80057a0:	4298      	cmp	r0, r3
 80057a2:	d9f0      	bls.n	8005786 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80057a4:	2003      	movs	r0, #3
 80057a6:	e042      	b.n	800582e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a8:	4a26      	ldr	r2, [pc, #152]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80057b0:	d1e0      	bne.n	8005774 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80057b2:	2001      	movs	r0, #1
 80057b4:	e03b      	b.n	800582e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b6:	4a23      	ldr	r2, [pc, #140]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80057be:	d1d9      	bne.n	8005774 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80057c0:	2001      	movs	r0, #1
 80057c2:	e034      	b.n	800582e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057c4:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <HAL_RCC_ClockConfig+0x14c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	42ab      	cmp	r3, r5
 80057ce:	d907      	bls.n	80057e0 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d0:	b2ea      	uxtb	r2, r5
 80057d2:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <HAL_RCC_ClockConfig+0x14c>)
 80057d4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0307 	and.w	r3, r3, #7
 80057dc:	42ab      	cmp	r3, r5
 80057de:	d12d      	bne.n	800583c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	f013 0f04 	tst.w	r3, #4
 80057e6:	d006      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 80057ea:	6893      	ldr	r3, [r2, #8]
 80057ec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80057f0:	68e1      	ldr	r1, [r4, #12]
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	f013 0f08 	tst.w	r3, #8
 80057fc:	d007      	beq.n	800580e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057fe:	4a11      	ldr	r2, [pc, #68]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 8005800:	6893      	ldr	r3, [r2, #8]
 8005802:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005806:	6921      	ldr	r1, [r4, #16]
 8005808:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800580c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800580e:	f7ff ff21 	bl	8005654 <HAL_RCC_GetSysClockFreq>
 8005812:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <HAL_RCC_ClockConfig+0x150>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800581a:	4a0b      	ldr	r2, [pc, #44]	; (8005848 <HAL_RCC_ClockConfig+0x154>)
 800581c:	5cd3      	ldrb	r3, [r2, r3]
 800581e:	40d8      	lsrs	r0, r3
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <HAL_RCC_ClockConfig+0x158>)
 8005822:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <HAL_RCC_ClockConfig+0x15c>)
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	f7fe fda4 	bl	8004374 <HAL_InitTick>
  return HAL_OK;
 800582c:	2000      	movs	r0, #0
}
 800582e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005830:	2001      	movs	r0, #1
}
 8005832:	4770      	bx	lr
      return HAL_ERROR;
 8005834:	2001      	movs	r0, #1
 8005836:	e7fa      	b.n	800582e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8005838:	2001      	movs	r0, #1
 800583a:	e7f8      	b.n	800582e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800583c:	2001      	movs	r0, #1
 800583e:	e7f6      	b.n	800582e <HAL_RCC_ClockConfig+0x13a>
 8005840:	40023c00 	.word	0x40023c00
 8005844:	40023800 	.word	0x40023800
 8005848:	0800c898 	.word	0x0800c898
 800584c:	20000020 	.word	0x20000020
 8005850:	20000028 	.word	0x20000028

08005854 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005854:	4b01      	ldr	r3, [pc, #4]	; (800585c <HAL_RCC_GetHCLKFreq+0x8>)
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	20000020 	.word	0x20000020

08005860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005860:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005862:	f7ff fff7 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 8005866:	4b04      	ldr	r3, [pc, #16]	; (8005878 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800586e:	4a03      	ldr	r2, [pc, #12]	; (800587c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005870:	5cd3      	ldrb	r3, [r2, r3]
}
 8005872:	40d8      	lsrs	r0, r3
 8005874:	bd08      	pop	{r3, pc}
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	0800c8a8 	.word	0x0800c8a8

08005880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005880:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005882:	f7ff ffe7 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 8005886:	4b04      	ldr	r3, [pc, #16]	; (8005898 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800588e:	4a03      	ldr	r2, [pc, #12]	; (800589c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005890:	5cd3      	ldrb	r3, [r2, r3]
}
 8005892:	40d8      	lsrs	r0, r3
 8005894:	bd08      	pop	{r3, pc}
 8005896:	bf00      	nop
 8005898:	40023800 	.word	0x40023800
 800589c:	0800c8a8 	.word	0x0800c8a8

080058a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058a0:	b530      	push	{r4, r5, lr}
 80058a2:	b083      	sub	sp, #12
 80058a4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058a6:	6803      	ldr	r3, [r0, #0]
 80058a8:	f013 0f05 	tst.w	r3, #5
 80058ac:	d10e      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	f013 0f02 	tst.w	r3, #2
 80058b4:	d136      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	f013 0f08 	tst.w	r3, #8
 80058bc:	f000 8099 	beq.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058c0:	7c22      	ldrb	r2, [r4, #16]
 80058c2:	4b4d      	ldr	r3, [pc, #308]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80058c4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80058c6:	2000      	movs	r0, #0
}
 80058c8:	b003      	add	sp, #12
 80058ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80058cc:	4b4b      	ldr	r3, [pc, #300]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80058d2:	f7fe fd9b 	bl	800440c <HAL_GetTick>
 80058d6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058d8:	4b49      	ldr	r3, [pc, #292]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80058e0:	d006      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058e2:	f7fe fd93 	bl	800440c <HAL_GetTick>
 80058e6:	1b43      	subs	r3, r0, r5
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d9f5      	bls.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 80058ec:	2003      	movs	r0, #3
 80058ee:	e7eb      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058f0:	6862      	ldr	r2, [r4, #4]
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	071b      	lsls	r3, r3, #28
 80058f6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80058fa:	4a41      	ldr	r2, [pc, #260]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005900:	4b3e      	ldr	r3, [pc, #248]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005906:	f7fe fd81 	bl	800440c <HAL_GetTick>
 800590a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800590c:	4b3c      	ldr	r3, [pc, #240]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005914:	d1cb      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005916:	f7fe fd79 	bl	800440c <HAL_GetTick>
 800591a:	1b40      	subs	r0, r0, r5
 800591c:	2802      	cmp	r0, #2
 800591e:	d9f5      	bls.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8005920:	2003      	movs	r0, #3
 8005922:	e7d1      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005924:	2300      	movs	r3, #0
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	4b35      	ldr	r3, [pc, #212]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800592a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800592c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800593c:	4a31      	ldr	r2, [pc, #196]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800593e:	6813      	ldr	r3, [r2, #0]
 8005940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005944:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005946:	f7fe fd61 	bl	800440c <HAL_GetTick>
 800594a:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800594c:	4b2d      	ldr	r3, [pc, #180]	; (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005954:	d106      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005956:	f7fe fd59 	bl	800440c <HAL_GetTick>
 800595a:	1b43      	subs	r3, r0, r5
 800595c:	2b02      	cmp	r3, #2
 800595e:	d9f5      	bls.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8005960:	2003      	movs	r0, #3
 8005962:	e7b1      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005964:	4b26      	ldr	r3, [pc, #152]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005968:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800596c:	d012      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800596e:	68e2      	ldr	r2, [r4, #12]
 8005970:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005974:	429a      	cmp	r2, r3
 8005976:	d00d      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005978:	4b21      	ldr	r3, [pc, #132]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800597a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800597c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005980:	4921      	ldr	r1, [pc, #132]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005982:	2001      	movs	r0, #1
 8005984:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005986:	2000      	movs	r0, #0
 8005988:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 800598a:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	f013 0f01 	tst.w	r3, #1
 8005992:	d112      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005994:	68e3      	ldr	r3, [r4, #12]
 8005996:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800599a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800599e:	d01d      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80059a0:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059a2:	6893      	ldr	r3, [r2, #8]
 80059a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059a8:	6093      	str	r3, [r2, #8]
 80059aa:	4915      	ldr	r1, [pc, #84]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ac:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80059ae:	68e2      	ldr	r2, [r4, #12]
 80059b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80059b4:	4313      	orrs	r3, r2
 80059b6:	670b      	str	r3, [r1, #112]	; 0x70
 80059b8:	e77d      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 80059ba:	f7fe fd27 	bl	800440c <HAL_GetTick>
 80059be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	f013 0f02 	tst.w	r3, #2
 80059c8:	d1e4      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ca:	f7fe fd1f 	bl	800440c <HAL_GetTick>
 80059ce:	1b40      	subs	r0, r0, r5
 80059d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80059d4:	4298      	cmp	r0, r3
 80059d6:	d9f3      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 80059d8:	2003      	movs	r0, #3
 80059da:	e775      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059dc:	4908      	ldr	r1, [pc, #32]	; (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059de:	688a      	ldr	r2, [r1, #8]
 80059e0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80059e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ec:	4313      	orrs	r3, r2
 80059ee:	608b      	str	r3, [r1, #8]
 80059f0:	e7db      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 80059f2:	2000      	movs	r0, #0
 80059f4:	e768      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80059f6:	bf00      	nop
 80059f8:	424711e0 	.word	0x424711e0
 80059fc:	42470068 	.word	0x42470068
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40007000 	.word	0x40007000
 8005a08:	42470e40 	.word	0x42470e40

08005a0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a10:	6802      	ldr	r2, [r0, #0]
 8005a12:	68d3      	ldr	r3, [r2, #12]
 8005a14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a18:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a1a:	f7fe fcf7 	bl	800440c <HAL_GetTick>
 8005a1e:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f013 0f20 	tst.w	r3, #32
 8005a28:	d107      	bne.n	8005a3a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a2a:	f7fe fcef 	bl	800440c <HAL_GetTick>
 8005a2e:	1b40      	subs	r0, r0, r5
 8005a30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005a34:	d9f4      	bls.n	8005a20 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8005a36:	2003      	movs	r0, #3
 8005a38:	e000      	b.n	8005a3c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8005a3a:	2000      	movs	r0, #0
}
 8005a3c:	bd38      	pop	{r3, r4, r5, pc}

08005a3e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005a3e:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a40:	6803      	ldr	r3, [r0, #0]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005a48:	d001      	beq.n	8005a4e <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005a4a:	2000      	movs	r0, #0
}
 8005a4c:	bd38      	pop	{r3, r4, r5, pc}
 8005a4e:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a50:	f04f 32ff 	mov.w	r2, #4294967295
 8005a54:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005a56:	f7fe fcd9 	bl	800440c <HAL_GetTick>
 8005a5a:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a64:	d107      	bne.n	8005a76 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a66:	f7fe fcd1 	bl	800440c <HAL_GetTick>
 8005a6a:	1b43      	subs	r3, r0, r5
 8005a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a70:	d9f4      	bls.n	8005a5c <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8005a72:	2003      	movs	r0, #3
 8005a74:	e7ea      	b.n	8005a4c <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8005a76:	2000      	movs	r0, #0
 8005a78:	e7e8      	b.n	8005a4c <RTC_EnterInitMode+0xe>

08005a7a <HAL_RTC_Init>:
{
 8005a7a:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d05c      	beq.n	8005b3a <HAL_RTC_Init+0xc0>
 8005a80:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005a82:	7f43      	ldrb	r3, [r0, #29]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d041      	beq.n	8005b0c <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	22ca      	movs	r2, #202	; 0xca
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	2253      	movs	r2, #83	; 0x53
 8005a96:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f7ff ffd0 	bl	8005a3e <RTC_EnterInitMode>
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d137      	bne.n	8005b14 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005aa4:	6822      	ldr	r2, [r4, #0]
 8005aa6:	6893      	ldr	r3, [r2, #8]
 8005aa8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab0:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ab2:	6821      	ldr	r1, [r4, #0]
 8005ab4:	688a      	ldr	r2, [r1, #8]
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	6920      	ldr	r0, [r4, #16]
 8005aba:	4303      	orrs	r3, r0
 8005abc:	6960      	ldr	r0, [r4, #20]
 8005abe:	4303      	orrs	r3, r0
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	68e2      	ldr	r2, [r4, #12]
 8005ac8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	6913      	ldr	r3, [r2, #16]
 8005ace:	68a1      	ldr	r1, [r4, #8]
 8005ad0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005ad4:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	68d3      	ldr	r3, [r2, #12]
 8005ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ade:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f013 0f20 	tst.w	r3, #32
 8005ae8:	d01b      	beq.n	8005b22 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005aea:	6822      	ldr	r2, [r4, #0]
 8005aec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af2:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005af4:	6822      	ldr	r2, [r4, #0]
 8005af6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005af8:	69a1      	ldr	r1, [r4, #24]
 8005afa:	430b      	orrs	r3, r1
 8005afc:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005b04:	2301      	movs	r3, #1
 8005b06:	7763      	strb	r3, [r4, #29]
}
 8005b08:	4628      	mov	r0, r5
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8005b0c:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005b0e:	f7fe f9d1 	bl	8003eb4 <HAL_RTC_MspInit>
 8005b12:	e7b9      	b.n	8005a88 <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	22ff      	movs	r2, #255	; 0xff
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b1a:	2304      	movs	r3, #4
 8005b1c:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8005b1e:	2501      	movs	r5, #1
 8005b20:	e7f2      	b.n	8005b08 <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b22:	4620      	mov	r0, r4
 8005b24:	f7ff ff72 	bl	8005a0c <HAL_RTC_WaitForSynchro>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d0de      	beq.n	8005aea <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	22ff      	movs	r2, #255	; 0xff
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b32:	2304      	movs	r3, #4
 8005b34:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8005b36:	2501      	movs	r5, #1
 8005b38:	e7e6      	b.n	8005b08 <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8005b3a:	2501      	movs	r5, #1
 8005b3c:	e7e4      	b.n	8005b08 <HAL_RTC_Init+0x8e>

08005b3e <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005b3e:	2300      	movs	r3, #0

  while(Value >= 10U)
 8005b40:	2809      	cmp	r0, #9
 8005b42:	d903      	bls.n	8005b4c <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8005b44:	3301      	adds	r3, #1
    Value -= 10U;
 8005b46:	380a      	subs	r0, #10
 8005b48:	b2c0      	uxtb	r0, r0
 8005b4a:	e7f9      	b.n	8005b40 <RTC_ByteToBcd2+0x2>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005b4c:	011b      	lsls	r3, r3, #4
 8005b4e:	b2db      	uxtb	r3, r3
}
 8005b50:	4318      	orrs	r0, r3
 8005b52:	4770      	bx	lr

08005b54 <HAL_RTC_SetTime>:
{
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005b56:	7f03      	ldrb	r3, [r0, #28]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d078      	beq.n	8005c4e <HAL_RTC_SetTime+0xfa>
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	460e      	mov	r6, r1
 8005b60:	2301      	movs	r3, #1
 8005b62:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b64:	2302      	movs	r3, #2
 8005b66:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8005b68:	2a00      	cmp	r2, #0
 8005b6a:	d147      	bne.n	8005bfc <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005b6c:	6803      	ldr	r3, [r0, #0]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b74:	d101      	bne.n	8005b7a <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005b7a:	7830      	ldrb	r0, [r6, #0]
 8005b7c:	f7ff ffdf 	bl	8005b3e <RTC_ByteToBcd2>
 8005b80:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005b82:	7870      	ldrb	r0, [r6, #1]
 8005b84:	f7ff ffdb 	bl	8005b3e <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005b88:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005b8c:	78b0      	ldrb	r0, [r6, #2]
 8005b8e:	f7ff ffd6 	bl	8005b3e <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005b92:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005b94:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005b96:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	22ca      	movs	r2, #202	; 0xca
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	2253      	movs	r2, #83	; 0x53
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f7ff ff49 	bl	8005a3e <RTC_EnterInitMode>
 8005bac:	4607      	mov	r7, r0
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d136      	bne.n	8005c20 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8005bb8:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8005bbc:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005bbe:	6822      	ldr	r2, [r4, #0]
 8005bc0:	6893      	ldr	r3, [r2, #8]
 8005bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bc6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005bc8:	6821      	ldr	r1, [r4, #0]
 8005bca:	688b      	ldr	r3, [r1, #8]
 8005bcc:	68f2      	ldr	r2, [r6, #12]
 8005bce:	6930      	ldr	r0, [r6, #16]
 8005bd0:	4302      	orrs	r2, r0
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	68d3      	ldr	r3, [r2, #12]
 8005bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bde:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f013 0f20 	tst.w	r3, #32
 8005be8:	d023      	beq.n	8005c32 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	22ff      	movs	r2, #255	; 0xff
 8005bee:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	7723      	strb	r3, [r4, #28]
}
 8005bf8:	4638      	mov	r0, r7
 8005bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005bfc:	6803      	ldr	r3, [r0, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c04:	d101      	bne.n	8005c0a <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c0a:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c0c:	7870      	ldrb	r0, [r6, #1]
 8005c0e:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c10:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8005c14:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005c16:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005c18:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005c1a:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8005c1e:	e7bc      	b.n	8005b9a <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	22ff      	movs	r2, #255	; 0xff
 8005c24:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005c26:	2304      	movs	r3, #4
 8005c28:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8005c2e:	2701      	movs	r7, #1
 8005c30:	e7e2      	b.n	8005bf8 <HAL_RTC_SetTime+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c32:	4620      	mov	r0, r4
 8005c34:	f7ff feea 	bl	8005a0c <HAL_RTC_WaitForSynchro>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d0d6      	beq.n	8005bea <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	22ff      	movs	r2, #255	; 0xff
 8005c40:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c42:	2304      	movs	r3, #4
 8005c44:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005c46:	2300      	movs	r3, #0
 8005c48:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8005c4a:	2701      	movs	r7, #1
 8005c4c:	e7d4      	b.n	8005bf8 <HAL_RTC_SetTime+0xa4>
  __HAL_LOCK(hrtc);
 8005c4e:	2702      	movs	r7, #2
 8005c50:	e7d2      	b.n	8005bf8 <HAL_RTC_SetTime+0xa4>

08005c52 <HAL_RTC_SetDate>:
{
 8005c52:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8005c54:	7f03      	ldrb	r3, [r0, #28]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d066      	beq.n	8005d28 <HAL_RTC_SetDate+0xd6>
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	460e      	mov	r6, r1
 8005c5e:	2301      	movs	r3, #1
 8005c60:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c62:	2302      	movs	r3, #2
 8005c64:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005c66:	b93a      	cbnz	r2, 8005c78 <HAL_RTC_SetDate+0x26>
 8005c68:	784b      	ldrb	r3, [r1, #1]
 8005c6a:	f013 0f10 	tst.w	r3, #16
 8005c6e:	d003      	beq.n	8005c78 <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005c70:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8005c74:	330a      	adds	r3, #10
 8005c76:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8005c78:	2a00      	cmp	r2, #0
 8005c7a:	d133      	bne.n	8005ce4 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c7c:	78f0      	ldrb	r0, [r6, #3]
 8005c7e:	f7ff ff5e 	bl	8005b3e <RTC_ByteToBcd2>
 8005c82:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c84:	7870      	ldrb	r0, [r6, #1]
 8005c86:	f7ff ff5a 	bl	8005b3e <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c8a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005c8e:	78b0      	ldrb	r0, [r6, #2]
 8005c90:	f7ff ff55 	bl	8005b3e <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005c94:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));
 8005c96:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005c98:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	22ca      	movs	r2, #202	; 0xca
 8005ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	2253      	movs	r2, #83	; 0x53
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f7ff fec8 	bl	8005a3e <RTC_EnterInitMode>
 8005cae:	4606      	mov	r6, r0
 8005cb0:	bb18      	cbnz	r0, 8005cfa <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8005cb8:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 8005cbc:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	68d3      	ldr	r3, [r2, #12]
 8005cc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc6:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f013 0f20 	tst.w	r3, #32
 8005cd0:	d01c      	beq.n	8005d0c <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	22ff      	movs	r2, #255	; 0xff
 8005cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	7723      	strb	r3, [r4, #28]
}
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005ce4:	78f5      	ldrb	r5, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005ce6:	7870      	ldrb	r0, [r6, #1]
 8005ce8:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005cea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 8005cee:	78b5      	ldrb	r5, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005cf0:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005cf2:	7835      	ldrb	r5, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005cf4:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 8005cf8:	e7d0      	b.n	8005c9c <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	22ff      	movs	r2, #255	; 0xff
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d00:	2304      	movs	r3, #4
 8005d02:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8005d04:	2300      	movs	r3, #0
 8005d06:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8005d08:	2601      	movs	r6, #1
 8005d0a:	e7e9      	b.n	8005ce0 <HAL_RTC_SetDate+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f7ff fe7d 	bl	8005a0c <HAL_RTC_WaitForSynchro>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0dd      	beq.n	8005cd2 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	22ff      	movs	r2, #255	; 0xff
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8005d20:	2300      	movs	r3, #0
 8005d22:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8005d24:	2601      	movs	r6, #1
 8005d26:	e7db      	b.n	8005ce0 <HAL_RTC_SetDate+0x8e>
 __HAL_LOCK(hrtc);
 8005d28:	2602      	movs	r6, #2
 8005d2a:	e7d9      	b.n	8005ce0 <HAL_RTC_SetDate+0x8e>

08005d2c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005d2c:	0903      	lsrs	r3, r0, #4
 8005d2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8005d32:	f000 000f 	and.w	r0, r0, #15
 8005d36:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8005d3a:	b2c0      	uxtb	r0, r0
 8005d3c:	4770      	bx	lr

08005d3e <HAL_RTC_GetTime>:
{
 8005d3e:	b570      	push	{r4, r5, r6, lr}
 8005d40:	460c      	mov	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005d42:	6803      	ldr	r3, [r0, #0]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005d48:	6803      	ldr	r3, [r0, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005d50:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005d52:	6803      	ldr	r3, [r0, #0]
 8005d54:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005d56:	f3c5 4106 	ubfx	r1, r5, #16, #7
 8005d5a:	f3c5 4005 	ubfx	r0, r5, #16, #6
 8005d5e:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005d60:	f3c5 2606 	ubfx	r6, r5, #8, #7
 8005d64:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005d66:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8005d6a:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005d6c:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8005d70:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8005d72:	b952      	cbnz	r2, 8005d8a <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005d74:	f7ff ffda 	bl	8005d2c <RTC_Bcd2ToByte>
 8005d78:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	f7ff ffd6 	bl	8005d2c <RTC_Bcd2ToByte>
 8005d80:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7ff ffd2 	bl	8005d2c <RTC_Bcd2ToByte>
 8005d88:	70a0      	strb	r0, [r4, #2]
}
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}

08005d8e <HAL_RTC_GetDate>:
{
 8005d8e:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005d90:	6803      	ldr	r3, [r0, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005d94:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8005d98:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005d9a:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8005d9e:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005da0:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8005da4:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005da6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005daa:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 8005dac:	b95a      	cbnz	r2, 8005dc6 <HAL_RTC_GetDate+0x38>
 8005dae:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005db0:	f7ff ffbc 	bl	8005d2c <RTC_Bcd2ToByte>
 8005db4:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005db6:	4630      	mov	r0, r6
 8005db8:	f7ff ffb8 	bl	8005d2c <RTC_Bcd2ToByte>
 8005dbc:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f7ff ffb4 	bl	8005d2c <RTC_Bcd2ToByte>
 8005dc4:	70a0      	strb	r0, [r4, #2]
}
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	bd70      	pop	{r4, r5, r6, pc}
	...

08005dcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	4688      	mov	r8, r1
 8005dd6:	4617      	mov	r7, r2
 8005dd8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dda:	f7fe fb17 	bl	800440c <HAL_GetTick>
 8005dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de0:	1a1b      	subs	r3, r3, r0
 8005de2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8005de6:	f7fe fb11 	bl	800440c <HAL_GetTick>
 8005dea:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dec:	4b2a      	ldr	r3, [pc, #168]	; (8005e98 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005df4:	fb09 f303 	mul.w	r3, r9, r3
 8005df8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dfa:	682b      	ldr	r3, [r5, #0]
 8005dfc:	689c      	ldr	r4, [r3, #8]
 8005dfe:	ea38 0304 	bics.w	r3, r8, r4
 8005e02:	bf0c      	ite	eq
 8005e04:	2401      	moveq	r4, #1
 8005e06:	2400      	movne	r4, #0
 8005e08:	42bc      	cmp	r4, r7
 8005e0a:	d040      	beq.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e0c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005e10:	d0f3      	beq.n	8005dfa <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e12:	f7fe fafb 	bl	800440c <HAL_GetTick>
 8005e16:	eba0 000a 	sub.w	r0, r0, sl
 8005e1a:	4548      	cmp	r0, r9
 8005e1c:	d20a      	bcs.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0x68>
 8005e1e:	f1b9 0f00 	cmp.w	r9, #0
 8005e22:	d007      	beq.n	8005e34 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e24:	9a01      	ldr	r2, [sp, #4]
 8005e26:	b102      	cbz	r2, 8005e2a <SPI_WaitFlagStateUntilTimeout+0x5e>
 8005e28:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	4691      	mov	r9, r2
 8005e32:	e7e2      	b.n	8005dfa <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e34:	682a      	ldr	r2, [r5, #0]
 8005e36:	6853      	ldr	r3, [r2, #4]
 8005e38:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005e3c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3e:	686b      	ldr	r3, [r5, #4]
 8005e40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e44:	d00b      	beq.n	8005e5e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e46:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e4c:	d014      	beq.n	8005e78 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005e54:	2300      	movs	r3, #0
 8005e56:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8005e5a:	2003      	movs	r0, #3
 8005e5c:	e018      	b.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e5e:	68ab      	ldr	r3, [r5, #8]
 8005e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e64:	d002      	beq.n	8005e6c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6a:	d1ec      	bne.n	8005e46 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8005e6c:	682a      	ldr	r2, [r5, #0]
 8005e6e:	6813      	ldr	r3, [r2, #0]
 8005e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e7e6      	b.n	8005e46 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8005e78:	682a      	ldr	r2, [r5, #0]
 8005e7a:	6813      	ldr	r3, [r2, #0]
 8005e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	682a      	ldr	r2, [r5, #0]
 8005e84:	6813      	ldr	r3, [r2, #0]
 8005e86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	e7df      	b.n	8005e4e <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8005e8e:	2000      	movs	r0, #0
}
 8005e90:	b002      	add	sp, #8
 8005e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e96:	bf00      	nop
 8005e98:	20000020 	.word	0x20000020

08005e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b530      	push	{r4, r5, lr}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ea2:	4b16      	ldr	r3, [pc, #88]	; (8005efc <SPI_EndRxTxTransaction+0x60>)
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	4b16      	ldr	r3, [pc, #88]	; (8005f00 <SPI_EndRxTxTransaction+0x64>)
 8005ea8:	fba3 3000 	umull	r3, r0, r3, r0
 8005eac:	0d40      	lsrs	r0, r0, #21
 8005eae:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8005eb2:	fb05 f000 	mul.w	r0, r5, r0
 8005eb6:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ebe:	d00b      	beq.n	8005ed8 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	b1bb      	cbz	r3, 8005ef4 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 8005ec4:	9b03      	ldr	r3, [sp, #12]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ed2:	d1f5      	bne.n	8005ec0 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	e00e      	b.n	8005ef6 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed8:	9200      	str	r2, [sp, #0]
 8005eda:	460b      	mov	r3, r1
 8005edc:	2200      	movs	r2, #0
 8005ede:	2180      	movs	r1, #128	; 0x80
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f7ff ff73 	bl	8005dcc <SPI_WaitFlagStateUntilTimeout>
 8005ee6:	b130      	cbz	r0, 8005ef6 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005eea:	f043 0320 	orr.w	r3, r3, #32
 8005eee:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ef0:	2003      	movs	r0, #3
 8005ef2:	e000      	b.n	8005ef6 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8005ef4:	2000      	movs	r0, #0
}
 8005ef6:	b005      	add	sp, #20
 8005ef8:	bd30      	pop	{r4, r5, pc}
 8005efa:	bf00      	nop
 8005efc:	20000020 	.word	0x20000020
 8005f00:	165e9f81 	.word	0x165e9f81

08005f04 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d05a      	beq.n	8005fbe <HAL_SPI_Init+0xba>
{
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f0e:	b933      	cbnz	r3, 8005f1e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f10:	6843      	ldr	r3, [r0, #4]
 8005f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f16:	d005      	beq.n	8005f24 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61c3      	str	r3, [r0, #28]
 8005f1c:	e002      	b.n	8005f24 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f22:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f24:	2300      	movs	r3, #0
 8005f26:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f28:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d040      	beq.n	8005fb2 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005f30:	2302      	movs	r3, #2
 8005f32:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8005f36:	6822      	ldr	r2, [r4, #0]
 8005f38:	6813      	ldr	r3, [r2, #0]
 8005f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f3e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f40:	6863      	ldr	r3, [r4, #4]
 8005f42:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005f46:	68a2      	ldr	r2, [r4, #8]
 8005f48:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	68e2      	ldr	r2, [r4, #12]
 8005f50:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005f54:	4313      	orrs	r3, r2
 8005f56:	6922      	ldr	r2, [r4, #16]
 8005f58:	f002 0202 	and.w	r2, r2, #2
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	6962      	ldr	r2, [r4, #20]
 8005f60:	f002 0201 	and.w	r2, r2, #1
 8005f64:	4313      	orrs	r3, r2
 8005f66:	69a2      	ldr	r2, [r4, #24]
 8005f68:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	69e2      	ldr	r2, [r4, #28]
 8005f70:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8005f74:	4313      	orrs	r3, r2
 8005f76:	6a22      	ldr	r2, [r4, #32]
 8005f78:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005f80:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005f84:	6821      	ldr	r1, [r4, #0]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f8a:	8b63      	ldrh	r3, [r4, #26]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f92:	f002 0210 	and.w	r2, r2, #16
 8005f96:	6821      	ldr	r1, [r4, #0]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	69d3      	ldr	r3, [r2, #28]
 8005fa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fa4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005faa:	2301      	movs	r3, #1
 8005fac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8005fb0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005fb2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f7fd ff9e 	bl	8003ef8 <HAL_SPI_MspInit>
 8005fbc:	e7b8      	b.n	8005f30 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8005fbe:	2001      	movs	r0, #1
}
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_SPI_Transmit>:
{
 8005fc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005fca:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	f000 80cc 	beq.w	800616c <HAL_SPI_Transmit+0x1aa>
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	4688      	mov	r8, r1
 8005fd8:	4691      	mov	r9, r2
 8005fda:	2301      	movs	r3, #1
 8005fdc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005fe0:	f7fe fa14 	bl	800440c <HAL_GetTick>
 8005fe4:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005fe6:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8005fea:	b2f6      	uxtb	r6, r6
 8005fec:	2e01      	cmp	r6, #1
 8005fee:	f040 80aa 	bne.w	8006146 <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 8005ff2:	f1b8 0f00 	cmp.w	r8, #0
 8005ff6:	f000 80a7 	beq.w	8006148 <HAL_SPI_Transmit+0x186>
 8005ffa:	f1b9 0f00 	cmp.w	r9, #0
 8005ffe:	f000 80a3 	beq.w	8006148 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006002:	2303      	movs	r3, #3
 8006004:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006008:	2300      	movs	r3, #0
 800600a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800600c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006010:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006014:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006018:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800601a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800601c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800601e:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006020:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006022:	68a3      	ldr	r3, [r4, #8]
 8006024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006028:	d01e      	beq.n	8006068 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006032:	d103      	bne.n	800603c <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800603a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800603c:	68e3      	ldr	r3, [r4, #12]
 800603e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006042:	d01c      	beq.n	800607e <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006044:	6863      	ldr	r3, [r4, #4]
 8006046:	b113      	cbz	r3, 800604e <HAL_SPI_Transmit+0x8c>
 8006048:	f1b9 0f01 	cmp.w	r9, #1
 800604c:	d152      	bne.n	80060f4 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800604e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	7812      	ldrb	r2, [r2, #0]
 8006054:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006056:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006058:	3301      	adds	r3, #1
 800605a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800605c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29b      	uxth	r3, r3
 8006064:	86e3      	strh	r3, [r4, #54]	; 0x36
 8006066:	e045      	b.n	80060f4 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8006068:	6822      	ldr	r2, [r4, #0]
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006070:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8006072:	6822      	ldr	r2, [r4, #0]
 8006074:	6813      	ldr	r3, [r2, #0]
 8006076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	e7d5      	b.n	800602a <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800607e:	6863      	ldr	r3, [r4, #4]
 8006080:	b113      	cbz	r3, 8006088 <HAL_SPI_Transmit+0xc6>
 8006082:	f1b9 0f01 	cmp.w	r9, #1
 8006086:	d116      	bne.n	80060b6 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006088:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	8812      	ldrh	r2, [r2, #0]
 800608e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006090:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006092:	3302      	adds	r3, #2
 8006094:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006096:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29b      	uxth	r3, r3
 800609e:	86e3      	strh	r3, [r4, #54]	; 0x36
 80060a0:	e009      	b.n	80060b6 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060a2:	f7fe f9b3 	bl	800440c <HAL_GetTick>
 80060a6:	1bc0      	subs	r0, r0, r7
 80060a8:	42a8      	cmp	r0, r5
 80060aa:	d302      	bcc.n	80060b2 <HAL_SPI_Transmit+0xf0>
 80060ac:	f1b5 3fff 	cmp.w	r5, #4294967295
 80060b0:	d154      	bne.n	800615c <HAL_SPI_Transmit+0x19a>
 80060b2:	2d00      	cmp	r5, #0
 80060b4:	d054      	beq.n	8006160 <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 80060b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d02e      	beq.n	800611c <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	f012 0f02 	tst.w	r2, #2
 80060c6:	d0ec      	beq.n	80060a2 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80060ca:	8812      	ldrh	r2, [r2, #0]
 80060cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060d0:	3302      	adds	r3, #2
 80060d2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80060d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29b      	uxth	r3, r3
 80060dc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80060de:	e7ea      	b.n	80060b6 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e0:	f7fe f994 	bl	800440c <HAL_GetTick>
 80060e4:	1bc0      	subs	r0, r0, r7
 80060e6:	42a8      	cmp	r0, r5
 80060e8:	d302      	bcc.n	80060f0 <HAL_SPI_Transmit+0x12e>
 80060ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 80060ee:	d139      	bne.n	8006164 <HAL_SPI_Transmit+0x1a2>
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	d039      	beq.n	8006168 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 80060f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	b183      	cbz	r3, 800611c <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	f012 0f02 	tst.w	r2, #2
 8006102:	d0ed      	beq.n	80060e0 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006104:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006106:	7812      	ldrb	r2, [r2, #0]
 8006108:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800610a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800610c:	3301      	adds	r3, #1
 800610e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006110:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006112:	b292      	uxth	r2, r2
 8006114:	3a01      	subs	r2, #1
 8006116:	b292      	uxth	r2, r2
 8006118:	86e2      	strh	r2, [r4, #54]	; 0x36
 800611a:	e7eb      	b.n	80060f4 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800611c:	463a      	mov	r2, r7
 800611e:	4629      	mov	r1, r5
 8006120:	4620      	mov	r0, r4
 8006122:	f7ff febb 	bl	8005e9c <SPI_EndRxTxTransaction>
 8006126:	b108      	cbz	r0, 800612c <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006128:	2320      	movs	r3, #32
 800612a:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800612c:	68a3      	ldr	r3, [r4, #8]
 800612e:	b933      	cbnz	r3, 800613e <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006130:	9301      	str	r3, [sp, #4]
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	68da      	ldr	r2, [r3, #12]
 8006136:	9201      	str	r2, [sp, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800613e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006140:	b913      	cbnz	r3, 8006148 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006142:	2600      	movs	r6, #0
 8006144:	e000      	b.n	8006148 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 8006146:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006148:	2301      	movs	r3, #1
 800614a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800614e:	2300      	movs	r3, #0
 8006150:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006154:	4630      	mov	r0, r6
 8006156:	b003      	add	sp, #12
 8006158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 800615c:	2603      	movs	r6, #3
 800615e:	e7f3      	b.n	8006148 <HAL_SPI_Transmit+0x186>
 8006160:	2603      	movs	r6, #3
 8006162:	e7f1      	b.n	8006148 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 8006164:	2603      	movs	r6, #3
 8006166:	e7ef      	b.n	8006148 <HAL_SPI_Transmit+0x186>
 8006168:	2603      	movs	r6, #3
 800616a:	e7ed      	b.n	8006148 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 800616c:	2602      	movs	r6, #2
 800616e:	e7f1      	b.n	8006154 <HAL_SPI_Transmit+0x192>

08006170 <HAL_SPI_TransmitReceive>:
{
 8006170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006174:	b083      	sub	sp, #12
 8006176:	461f      	mov	r7, r3
 8006178:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800617a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800617e:	2b01      	cmp	r3, #1
 8006180:	f000 8110 	beq.w	80063a4 <HAL_SPI_TransmitReceive+0x234>
 8006184:	4604      	mov	r4, r0
 8006186:	4688      	mov	r8, r1
 8006188:	4691      	mov	r9, r2
 800618a:	2301      	movs	r3, #1
 800618c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006190:	f7fe f93c 	bl	800440c <HAL_GetTick>
 8006194:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8006196:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800619a:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 800619c:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d00a      	beq.n	80061b8 <HAL_SPI_TransmitReceive+0x48>
 80061a2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80061a6:	f040 80e3 	bne.w	8006370 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80061aa:	68a2      	ldr	r2, [r4, #8]
 80061ac:	2a00      	cmp	r2, #0
 80061ae:	f040 80e9 	bne.w	8006384 <HAL_SPI_TransmitReceive+0x214>
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	f040 80e8 	bne.w	8006388 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80061b8:	f1b8 0f00 	cmp.w	r8, #0
 80061bc:	f000 80e6 	beq.w	800638c <HAL_SPI_TransmitReceive+0x21c>
 80061c0:	f1b9 0f00 	cmp.w	r9, #0
 80061c4:	f000 80e4 	beq.w	8006390 <HAL_SPI_TransmitReceive+0x220>
 80061c8:	2f00      	cmp	r7, #0
 80061ca:	f000 80e3 	beq.w	8006394 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061ce:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d002      	beq.n	80061de <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061d8:	2305      	movs	r3, #5
 80061da:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061de:	2300      	movs	r3, #0
 80061e0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061e2:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80061e6:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80061e8:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061ea:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80061ee:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80061f0:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80061f2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061f4:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	f012 0f40 	tst.w	r2, #64	; 0x40
 80061fe:	d103      	bne.n	8006208 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006206:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006208:	68e3      	ldr	r3, [r4, #12]
 800620a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620e:	d011      	beq.n	8006234 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006210:	6863      	ldr	r3, [r4, #4]
 8006212:	b10b      	cbz	r3, 8006218 <HAL_SPI_TransmitReceive+0xa8>
 8006214:	2f01      	cmp	r7, #1
 8006216:	d10b      	bne.n	8006230 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006218:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	7812      	ldrb	r2, [r2, #0]
 800621e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006220:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006222:	3301      	adds	r3, #1
 8006224:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006226:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29b      	uxth	r3, r3
 800622e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006230:	2701      	movs	r7, #1
 8006232:	e06b      	b.n	800630c <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006234:	6863      	ldr	r3, [r4, #4]
 8006236:	b10b      	cbz	r3, 800623c <HAL_SPI_TransmitReceive+0xcc>
 8006238:	2f01      	cmp	r7, #1
 800623a:	d10b      	bne.n	8006254 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800623c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	8812      	ldrh	r2, [r2, #0]
 8006242:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006244:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006246:	3302      	adds	r3, #2
 8006248:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800624a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800624c:	b29b      	uxth	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	b29b      	uxth	r3, r3
 8006252:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006254:	2701      	movs	r7, #1
 8006256:	e01c      	b.n	8006292 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	f012 0f01 	tst.w	r2, #1
 8006260:	d00e      	beq.n	8006280 <HAL_SPI_TransmitReceive+0x110>
 8006262:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006264:	b292      	uxth	r2, r2
 8006266:	b15a      	cbz	r2, 8006280 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800626c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800626e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006270:	3302      	adds	r3, #2
 8006272:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006274:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29b      	uxth	r3, r3
 800627c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800627e:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006280:	f7fe f8c4 	bl	800440c <HAL_GetTick>
 8006284:	1b80      	subs	r0, r0, r6
 8006286:	42a8      	cmp	r0, r5
 8006288:	d303      	bcc.n	8006292 <HAL_SPI_TransmitReceive+0x122>
 800628a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800628e:	f040 8083 	bne.w	8006398 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006292:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	b91b      	cbnz	r3, 80062a0 <HAL_SPI_TransmitReceive+0x130>
 8006298:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d053      	beq.n	8006348 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	f012 0f02 	tst.w	r2, #2
 80062a8:	d0d6      	beq.n	8006258 <HAL_SPI_TransmitReceive+0xe8>
 80062aa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80062ac:	b292      	uxth	r2, r2
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d0d2      	beq.n	8006258 <HAL_SPI_TransmitReceive+0xe8>
 80062b2:	2f00      	cmp	r7, #0
 80062b4:	d0d0      	beq.n	8006258 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80062b8:	8812      	ldrh	r2, [r2, #0]
 80062ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062be:	3302      	adds	r3, #2
 80062c0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80062c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80062cc:	2700      	movs	r7, #0
 80062ce:	e7c3      	b.n	8006258 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	f012 0f01 	tst.w	r2, #1
 80062d8:	d00e      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x188>
 80062da:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80062dc:	b292      	uxth	r2, r2
 80062de:	b15a      	cbz	r2, 80062f8 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062e8:	3301      	adds	r3, #1
 80062ea:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80062ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80062f6:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062f8:	f7fe f888 	bl	800440c <HAL_GetTick>
 80062fc:	1b83      	subs	r3, r0, r6
 80062fe:	42ab      	cmp	r3, r5
 8006300:	d302      	bcc.n	8006308 <HAL_SPI_TransmitReceive+0x198>
 8006302:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006306:	d149      	bne.n	800639c <HAL_SPI_TransmitReceive+0x22c>
 8006308:	2d00      	cmp	r5, #0
 800630a:	d049      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800630c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800630e:	b29b      	uxth	r3, r3
 8006310:	b913      	cbnz	r3, 8006318 <HAL_SPI_TransmitReceive+0x1a8>
 8006312:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006314:	b29b      	uxth	r3, r3
 8006316:	b1bb      	cbz	r3, 8006348 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	f012 0f02 	tst.w	r2, #2
 8006320:	d0d6      	beq.n	80062d0 <HAL_SPI_TransmitReceive+0x160>
 8006322:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006324:	b292      	uxth	r2, r2
 8006326:	2a00      	cmp	r2, #0
 8006328:	d0d2      	beq.n	80062d0 <HAL_SPI_TransmitReceive+0x160>
 800632a:	2f00      	cmp	r7, #0
 800632c:	d0d0      	beq.n	80062d0 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800632e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006330:	7812      	ldrb	r2, [r2, #0]
 8006332:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006334:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006336:	3301      	adds	r3, #1
 8006338:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800633a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29b      	uxth	r3, r3
 8006342:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006344:	2700      	movs	r7, #0
 8006346:	e7c3      	b.n	80062d0 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006348:	4632      	mov	r2, r6
 800634a:	4629      	mov	r1, r5
 800634c:	4620      	mov	r0, r4
 800634e:	f7ff fda5 	bl	8005e9c <SPI_EndRxTxTransaction>
 8006352:	b948      	cbnz	r0, 8006368 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006354:	68a3      	ldr	r3, [r4, #8]
 8006356:	b963      	cbnz	r3, 8006372 <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	9201      	str	r2, [sp, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	9301      	str	r3, [sp, #4]
 8006364:	9b01      	ldr	r3, [sp, #4]
 8006366:	e004      	b.n	8006372 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006368:	2320      	movs	r3, #32
 800636a:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800636c:	2001      	movs	r0, #1
    goto error;
 800636e:	e000      	b.n	8006372 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8006370:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006372:	2301      	movs	r3, #1
 8006374:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006378:	2300      	movs	r3, #0
 800637a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800637e:	b003      	add	sp, #12
 8006380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8006384:	2002      	movs	r0, #2
 8006386:	e7f4      	b.n	8006372 <HAL_SPI_TransmitReceive+0x202>
 8006388:	2002      	movs	r0, #2
 800638a:	e7f2      	b.n	8006372 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 800638c:	2001      	movs	r0, #1
 800638e:	e7f0      	b.n	8006372 <HAL_SPI_TransmitReceive+0x202>
 8006390:	2001      	movs	r0, #1
 8006392:	e7ee      	b.n	8006372 <HAL_SPI_TransmitReceive+0x202>
 8006394:	2001      	movs	r0, #1
 8006396:	e7ec      	b.n	8006372 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8006398:	2003      	movs	r0, #3
 800639a:	e7ea      	b.n	8006372 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 800639c:	2003      	movs	r0, #3
 800639e:	e7e8      	b.n	8006372 <HAL_SPI_TransmitReceive+0x202>
 80063a0:	2003      	movs	r0, #3
 80063a2:	e7e6      	b.n	8006372 <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80063a4:	2002      	movs	r0, #2
 80063a6:	e7ea      	b.n	800637e <HAL_SPI_TransmitReceive+0x20e>

080063a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063aa:	6a03      	ldr	r3, [r0, #32]
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b4:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063b6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063b8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063bc:	680c      	ldr	r4, [r1, #0]
 80063be:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063c2:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063c6:	688b      	ldr	r3, [r1, #8]
 80063c8:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063ca:	4c0d      	ldr	r4, [pc, #52]	; (8006400 <TIM_OC1_SetConfig+0x58>)
 80063cc:	42a0      	cmp	r0, r4
 80063ce:	d009      	beq.n	80063e4 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d0:	4c0b      	ldr	r4, [pc, #44]	; (8006400 <TIM_OC1_SetConfig+0x58>)
 80063d2:	42a0      	cmp	r0, r4
 80063d4:	d00d      	beq.n	80063f2 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d6:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063d8:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063da:	684a      	ldr	r2, [r1, #4]
 80063dc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063de:	6203      	str	r3, [r0, #32]
}
 80063e0:	bc70      	pop	{r4, r5, r6}
 80063e2:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80063e4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80063e8:	68ca      	ldr	r2, [r1, #12]
 80063ea:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 80063ec:	f023 0304 	bic.w	r3, r3, #4
 80063f0:	e7ee      	b.n	80063d0 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063f2:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80063f6:	694a      	ldr	r2, [r1, #20]
 80063f8:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80063fa:	698e      	ldr	r6, [r1, #24]
 80063fc:	4316      	orrs	r6, r2
 80063fe:	e7ea      	b.n	80063d6 <TIM_OC1_SetConfig+0x2e>
 8006400:	40010000 	.word	0x40010000

08006404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006406:	6a03      	ldr	r3, [r0, #32]
 8006408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800640c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006410:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006412:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006414:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006418:	680c      	ldr	r4, [r1, #0]
 800641a:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800641c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006420:	688c      	ldr	r4, [r1, #8]
 8006422:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006426:	4c0f      	ldr	r4, [pc, #60]	; (8006464 <TIM_OC3_SetConfig+0x60>)
 8006428:	42a0      	cmp	r0, r4
 800642a:	d009      	beq.n	8006440 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642c:	4c0d      	ldr	r4, [pc, #52]	; (8006464 <TIM_OC3_SetConfig+0x60>)
 800642e:	42a0      	cmp	r0, r4
 8006430:	d00e      	beq.n	8006450 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006432:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006434:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006436:	684a      	ldr	r2, [r1, #4]
 8006438:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643a:	6203      	str	r3, [r0, #32]
}
 800643c:	bc30      	pop	{r4, r5}
 800643e:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006440:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006444:	68cc      	ldr	r4, [r1, #12]
 8006446:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800644a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800644e:	e7ed      	b.n	800642c <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006450:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006454:	694c      	ldr	r4, [r1, #20]
 8006456:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800645a:	698c      	ldr	r4, [r1, #24]
 800645c:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8006460:	e7e7      	b.n	8006432 <TIM_OC3_SetConfig+0x2e>
 8006462:	bf00      	nop
 8006464:	40010000 	.word	0x40010000

08006468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006468:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800646a:	6a03      	ldr	r3, [r0, #32]
 800646c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006470:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006472:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006476:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006478:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800647c:	680d      	ldr	r5, [r1, #0]
 800647e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006486:	688d      	ldr	r5, [r1, #8]
 8006488:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	4d07      	ldr	r5, [pc, #28]	; (80064ac <TIM_OC4_SetConfig+0x44>)
 800648e:	42a8      	cmp	r0, r5
 8006490:	d006      	beq.n	80064a0 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006492:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006494:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006496:	684a      	ldr	r2, [r1, #4]
 8006498:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649a:	6203      	str	r3, [r0, #32]
}
 800649c:	bc30      	pop	{r4, r5}
 800649e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064a0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064a4:	694d      	ldr	r5, [r1, #20]
 80064a6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80064aa:	e7f2      	b.n	8006492 <TIM_OC4_SetConfig+0x2a>
 80064ac:	40010000 	.word	0x40010000

080064b0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80064b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d12f      	bne.n	800651a <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 80064ba:	2302      	movs	r3, #2
 80064bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064c0:	6802      	ldr	r2, [r0, #0]
 80064c2:	68d3      	ldr	r3, [r2, #12]
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ca:	6803      	ldr	r3, [r0, #0]
 80064cc:	4a15      	ldr	r2, [pc, #84]	; (8006524 <HAL_TIM_Base_Start_IT+0x74>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x54>
 80064d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d6:	d015      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x54>
 80064d8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80064dc:	4293      	cmp	r3, r2
 80064de:	d011      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x54>
 80064e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00d      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x54>
 80064e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x54>
 80064f0:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d005      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006500:	2000      	movs	r0, #0
 8006502:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650a:	2a06      	cmp	r2, #6
 800650c:	d007      	beq.n	800651e <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	f042 0201 	orr.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006516:	2000      	movs	r0, #0
 8006518:	4770      	bx	lr
    return HAL_ERROR;
 800651a:	2001      	movs	r0, #1
 800651c:	4770      	bx	lr
  return HAL_OK;
 800651e:	2000      	movs	r0, #0
}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40010000 	.word	0x40010000

08006528 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006528:	6802      	ldr	r2, [r0, #0]
 800652a:	68d3      	ldr	r3, [r2, #12]
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8006532:	6803      	ldr	r3, [r0, #0]
 8006534:	6a19      	ldr	r1, [r3, #32]
 8006536:	f241 1211 	movw	r2, #4369	; 0x1111
 800653a:	4211      	tst	r1, r2
 800653c:	d108      	bne.n	8006550 <HAL_TIM_Base_Stop_IT+0x28>
 800653e:	6a19      	ldr	r1, [r3, #32]
 8006540:	f240 4244 	movw	r2, #1092	; 0x444
 8006544:	4211      	tst	r1, r2
 8006546:	d103      	bne.n	8006550 <HAL_TIM_Base_Stop_IT+0x28>
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006550:	2301      	movs	r3, #1
 8006552:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8006556:	2000      	movs	r0, #0
 8006558:	4770      	bx	lr

0800655a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800655a:	4770      	bx	lr

0800655c <HAL_TIM_IC_CaptureCallback>:
}
 800655c:	4770      	bx	lr

0800655e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800655e:	4770      	bx	lr

08006560 <HAL_TIM_TriggerCallback>:
}
 8006560:	4770      	bx	lr

08006562 <HAL_TIM_IRQHandler>:
{
 8006562:	b510      	push	{r4, lr}
 8006564:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006566:	6803      	ldr	r3, [r0, #0]
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	f012 0f02 	tst.w	r2, #2
 800656e:	d011      	beq.n	8006594 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	f012 0f02 	tst.w	r2, #2
 8006576:	d00d      	beq.n	8006594 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006578:	f06f 0202 	mvn.w	r2, #2
 800657c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800657e:	2301      	movs	r3, #1
 8006580:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006582:	6803      	ldr	r3, [r0, #0]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	f013 0f03 	tst.w	r3, #3
 800658a:	d070      	beq.n	800666e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800658c:	f7ff ffe6 	bl	800655c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006590:	2300      	movs	r3, #0
 8006592:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	f012 0f04 	tst.w	r2, #4
 800659c:	d012      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800659e:	68da      	ldr	r2, [r3, #12]
 80065a0:	f012 0f04 	tst.w	r2, #4
 80065a4:	d00e      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065a6:	f06f 0204 	mvn.w	r2, #4
 80065aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ac:	2302      	movs	r3, #2
 80065ae:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80065b8:	d05f      	beq.n	800667a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80065ba:	4620      	mov	r0, r4
 80065bc:	f7ff ffce 	bl	800655c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c0:	2300      	movs	r3, #0
 80065c2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	691a      	ldr	r2, [r3, #16]
 80065c8:	f012 0f08 	tst.w	r2, #8
 80065cc:	d012      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	f012 0f08 	tst.w	r2, #8
 80065d4:	d00e      	beq.n	80065f4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d6:	f06f 0208 	mvn.w	r2, #8
 80065da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065dc:	2304      	movs	r3, #4
 80065de:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	f013 0f03 	tst.w	r3, #3
 80065e8:	d04e      	beq.n	8006688 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	4620      	mov	r0, r4
 80065ec:	f7ff ffb6 	bl	800655c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f0:	2300      	movs	r3, #0
 80065f2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	f012 0f10 	tst.w	r2, #16
 80065fc:	d012      	beq.n	8006624 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	f012 0f10 	tst.w	r2, #16
 8006604:	d00e      	beq.n	8006624 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006606:	f06f 0210 	mvn.w	r2, #16
 800660a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800660c:	2308      	movs	r3, #8
 800660e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006610:	6823      	ldr	r3, [r4, #0]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006618:	d03d      	beq.n	8006696 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800661a:	4620      	mov	r0, r4
 800661c:	f7ff ff9e 	bl	800655c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006620:	2300      	movs	r3, #0
 8006622:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	691a      	ldr	r2, [r3, #16]
 8006628:	f012 0f01 	tst.w	r2, #1
 800662c:	d003      	beq.n	8006636 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	f012 0f01 	tst.w	r2, #1
 8006634:	d136      	bne.n	80066a4 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800663e:	d003      	beq.n	8006648 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006646:	d134      	bne.n	80066b2 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006650:	d003      	beq.n	800665a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006658:	d132      	bne.n	80066c0 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	691a      	ldr	r2, [r3, #16]
 800665e:	f012 0f20 	tst.w	r2, #32
 8006662:	d003      	beq.n	800666c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	f012 0f20 	tst.w	r2, #32
 800666a:	d130      	bne.n	80066ce <HAL_TIM_IRQHandler+0x16c>
}
 800666c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800666e:	f7ff ff74 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006672:	4620      	mov	r0, r4
 8006674:	f7ff ff73 	bl	800655e <HAL_TIM_PWM_PulseFinishedCallback>
 8006678:	e78a      	b.n	8006590 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800667a:	4620      	mov	r0, r4
 800667c:	f7ff ff6d 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006680:	4620      	mov	r0, r4
 8006682:	f7ff ff6c 	bl	800655e <HAL_TIM_PWM_PulseFinishedCallback>
 8006686:	e79b      	b.n	80065c0 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006688:	4620      	mov	r0, r4
 800668a:	f7ff ff66 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668e:	4620      	mov	r0, r4
 8006690:	f7ff ff65 	bl	800655e <HAL_TIM_PWM_PulseFinishedCallback>
 8006694:	e7ac      	b.n	80065f0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006696:	4620      	mov	r0, r4
 8006698:	f7ff ff5f 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669c:	4620      	mov	r0, r4
 800669e:	f7ff ff5e 	bl	800655e <HAL_TIM_PWM_PulseFinishedCallback>
 80066a2:	e7bd      	b.n	8006620 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066a4:	f06f 0201 	mvn.w	r2, #1
 80066a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80066aa:	4620      	mov	r0, r4
 80066ac:	f7fc f8dc 	bl	8002868 <HAL_TIM_PeriodElapsedCallback>
 80066b0:	e7c1      	b.n	8006636 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 f954 	bl	8006966 <HAL_TIMEx_BreakCallback>
 80066be:	e7c3      	b.n	8006648 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7ff ff4a 	bl	8006560 <HAL_TIM_TriggerCallback>
 80066cc:	e7c5      	b.n	800665a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066ce:	f06f 0220 	mvn.w	r2, #32
 80066d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 f945 	bl	8006964 <HAL_TIMEx_CommutCallback>
}
 80066da:	e7c7      	b.n	800666c <HAL_TIM_IRQHandler+0x10a>

080066dc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80066dc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066de:	4a25      	ldr	r2, [pc, #148]	; (8006774 <TIM_Base_SetConfig+0x98>)
 80066e0:	4290      	cmp	r0, r2
 80066e2:	d00e      	beq.n	8006702 <TIM_Base_SetConfig+0x26>
 80066e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80066e8:	d00b      	beq.n	8006702 <TIM_Base_SetConfig+0x26>
 80066ea:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80066ee:	4290      	cmp	r0, r2
 80066f0:	d007      	beq.n	8006702 <TIM_Base_SetConfig+0x26>
 80066f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066f6:	4290      	cmp	r0, r2
 80066f8:	d003      	beq.n	8006702 <TIM_Base_SetConfig+0x26>
 80066fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80066fe:	4290      	cmp	r0, r2
 8006700:	d103      	bne.n	800670a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006706:	684a      	ldr	r2, [r1, #4]
 8006708:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800670a:	4a1a      	ldr	r2, [pc, #104]	; (8006774 <TIM_Base_SetConfig+0x98>)
 800670c:	4290      	cmp	r0, r2
 800670e:	d01a      	beq.n	8006746 <TIM_Base_SetConfig+0x6a>
 8006710:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006714:	d017      	beq.n	8006746 <TIM_Base_SetConfig+0x6a>
 8006716:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800671a:	4290      	cmp	r0, r2
 800671c:	d013      	beq.n	8006746 <TIM_Base_SetConfig+0x6a>
 800671e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006722:	4290      	cmp	r0, r2
 8006724:	d00f      	beq.n	8006746 <TIM_Base_SetConfig+0x6a>
 8006726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800672a:	4290      	cmp	r0, r2
 800672c:	d00b      	beq.n	8006746 <TIM_Base_SetConfig+0x6a>
 800672e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006732:	4290      	cmp	r0, r2
 8006734:	d007      	beq.n	8006746 <TIM_Base_SetConfig+0x6a>
 8006736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800673a:	4290      	cmp	r0, r2
 800673c:	d003      	beq.n	8006746 <TIM_Base_SetConfig+0x6a>
 800673e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006742:	4290      	cmp	r0, r2
 8006744:	d103      	bne.n	800674e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800674a:	68ca      	ldr	r2, [r1, #12]
 800674c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800674e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006752:	694a      	ldr	r2, [r1, #20]
 8006754:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006756:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006758:	688b      	ldr	r3, [r1, #8]
 800675a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800675c:	680b      	ldr	r3, [r1, #0]
 800675e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006760:	4b04      	ldr	r3, [pc, #16]	; (8006774 <TIM_Base_SetConfig+0x98>)
 8006762:	4298      	cmp	r0, r3
 8006764:	d002      	beq.n	800676c <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8006766:	2301      	movs	r3, #1
 8006768:	6143      	str	r3, [r0, #20]
}
 800676a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800676c:	690b      	ldr	r3, [r1, #16]
 800676e:	6303      	str	r3, [r0, #48]	; 0x30
 8006770:	e7f9      	b.n	8006766 <TIM_Base_SetConfig+0x8a>
 8006772:	bf00      	nop
 8006774:	40010000 	.word	0x40010000

08006778 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006778:	b340      	cbz	r0, 80067cc <HAL_TIM_Base_Init+0x54>
{
 800677a:	b510      	push	{r4, lr}
 800677c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800677e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006782:	b1f3      	cbz	r3, 80067c2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006784:	2302      	movs	r3, #2
 8006786:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800678a:	4621      	mov	r1, r4
 800678c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006790:	f7ff ffa4 	bl	80066dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006794:	2301      	movs	r3, #1
 8006796:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800679e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80067a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80067a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80067b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80067ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80067be:	2000      	movs	r0, #0
}
 80067c0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80067c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80067c6:	f7fd fc3b 	bl	8004040 <HAL_TIM_Base_MspInit>
 80067ca:	e7db      	b.n	8006784 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80067cc:	2001      	movs	r0, #1
}
 80067ce:	4770      	bx	lr

080067d0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80067d0:	b340      	cbz	r0, 8006824 <HAL_TIM_OC_Init+0x54>
{
 80067d2:	b510      	push	{r4, lr}
 80067d4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80067d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80067da:	b1f3      	cbz	r3, 800681a <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	2302      	movs	r3, #2
 80067de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80067e2:	4621      	mov	r1, r4
 80067e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80067e8:	f7ff ff78 	bl	80066dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80067f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80067fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80067fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006802:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800680a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800680e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006812:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006816:	2000      	movs	r0, #0
}
 8006818:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800681a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800681e:	f7fd fba3 	bl	8003f68 <HAL_TIM_OC_MspInit>
 8006822:	e7db      	b.n	80067dc <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8006824:	2001      	movs	r0, #1
}
 8006826:	4770      	bx	lr

08006828 <TIM_OC2_SetConfig>:
{
 8006828:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800682a:	6a03      	ldr	r3, [r0, #32]
 800682c:	f023 0310 	bic.w	r3, r3, #16
 8006830:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006832:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006834:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006836:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006838:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800683c:	680d      	ldr	r5, [r1, #0]
 800683e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006842:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006846:	688d      	ldr	r5, [r1, #8]
 8006848:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800684c:	4d0e      	ldr	r5, [pc, #56]	; (8006888 <TIM_OC2_SetConfig+0x60>)
 800684e:	42a8      	cmp	r0, r5
 8006850:	d009      	beq.n	8006866 <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006852:	4d0d      	ldr	r5, [pc, #52]	; (8006888 <TIM_OC2_SetConfig+0x60>)
 8006854:	42a8      	cmp	r0, r5
 8006856:	d00e      	beq.n	8006876 <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8006858:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800685a:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800685c:	684a      	ldr	r2, [r1, #4]
 800685e:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006860:	6203      	str	r3, [r0, #32]
}
 8006862:	bc30      	pop	{r4, r5}
 8006864:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800686a:	68cd      	ldr	r5, [r1, #12]
 800686c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006874:	e7ed      	b.n	8006852 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006876:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800687a:	694d      	ldr	r5, [r1, #20]
 800687c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006880:	698d      	ldr	r5, [r1, #24]
 8006882:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8006886:	e7e7      	b.n	8006858 <TIM_OC2_SetConfig+0x30>
 8006888:	40010000 	.word	0x40010000

0800688c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800688c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d028      	beq.n	80068e6 <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8006894:	b510      	push	{r4, lr}
 8006896:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006898:	2301      	movs	r3, #1
 800689a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800689e:	2a0c      	cmp	r2, #12
 80068a0:	d81c      	bhi.n	80068dc <HAL_TIM_OC_ConfigChannel+0x50>
 80068a2:	e8df f002 	tbb	[pc, r2]
 80068a6:	1b07      	.short	0x1b07
 80068a8:	1b0c1b1b 	.word	0x1b0c1b1b
 80068ac:	1b111b1b 	.word	0x1b111b1b
 80068b0:	1b1b      	.short	0x1b1b
 80068b2:	16          	.byte	0x16
 80068b3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068b4:	6800      	ldr	r0, [r0, #0]
 80068b6:	f7ff fd77 	bl	80063a8 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80068ba:	2000      	movs	r0, #0
      break;
 80068bc:	e00f      	b.n	80068de <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068be:	6800      	ldr	r0, [r0, #0]
 80068c0:	f7ff ffb2 	bl	8006828 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80068c4:	2000      	movs	r0, #0
      break;
 80068c6:	e00a      	b.n	80068de <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068c8:	6800      	ldr	r0, [r0, #0]
 80068ca:	f7ff fd9b 	bl	8006404 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80068ce:	2000      	movs	r0, #0
      break;
 80068d0:	e005      	b.n	80068de <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068d2:	6800      	ldr	r0, [r0, #0]
 80068d4:	f7ff fdc8 	bl	8006468 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80068d8:	2000      	movs	r0, #0
      break;
 80068da:	e000      	b.n	80068de <HAL_TIM_OC_ConfigChannel+0x52>
  __HAL_LOCK(htim);
 80068dc:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80068de:	2300      	movs	r3, #0
 80068e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80068e4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80068e6:	2002      	movs	r0, #2
}
 80068e8:	4770      	bx	lr
	...

080068ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d033      	beq.n	800695c <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 80068f4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80068f6:	2301      	movs	r3, #1
 80068f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	2302      	movs	r3, #2
 80068fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006902:	6803      	ldr	r3, [r0, #0]
 8006904:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006906:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006908:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800690c:	680a      	ldr	r2, [r1, #0]
 800690e:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006912:	6803      	ldr	r3, [r0, #0]
 8006914:	4a12      	ldr	r2, [pc, #72]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d012      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800691a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691e:	d00f      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006920:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006930:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006938:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800693c:	4293      	cmp	r3, r2
 800693e:	d104      	bne.n	800694a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006940:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006944:	684a      	ldr	r2, [r1, #4]
 8006946:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006948:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800694a:	2301      	movs	r3, #1
 800694c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006950:	2300      	movs	r3, #0
 8006952:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006956:	4618      	mov	r0, r3
}
 8006958:	bc30      	pop	{r4, r5}
 800695a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800695c:	2002      	movs	r0, #2
}
 800695e:	4770      	bx	lr
 8006960:	40010000 	.word	0x40010000

08006964 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006964:	4770      	bx	lr

08006966 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006966:	4770      	bx	lr

08006968 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006968:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	f102 030c 	add.w	r3, r2, #12
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	320c      	adds	r2, #12
 8006978:	e842 3100 	strex	r1, r3, [r2]
 800697c:	2900      	cmp	r1, #0
 800697e:	d1f3      	bne.n	8006968 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006980:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	f102 0314 	add.w	r3, r2, #20
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	3214      	adds	r2, #20
 8006990:	e842 3100 	strex	r1, r3, [r2]
 8006994:	2900      	cmp	r1, #0
 8006996:	d1f3      	bne.n	8006980 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006998:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800699a:	2b01      	cmp	r3, #1
 800699c:	d005      	beq.n	80069aa <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800699e:	2320      	movs	r3, #32
 80069a0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a4:	2300      	movs	r3, #0
 80069a6:	6303      	str	r3, [r0, #48]	; 0x30
}
 80069a8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069aa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	f102 030c 	add.w	r3, r2, #12
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	320c      	adds	r2, #12
 80069ba:	e842 3100 	strex	r1, r3, [r2]
 80069be:	2900      	cmp	r1, #0
 80069c0:	d1f3      	bne.n	80069aa <UART_EndRxTransfer+0x42>
 80069c2:	e7ec      	b.n	800699e <UART_EndRxTransfer+0x36>

080069c4 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b21      	cmp	r3, #33	; 0x21
 80069cc:	d001      	beq.n	80069d2 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80069ce:	2002      	movs	r0, #2
  }
}
 80069d0:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d2:	6883      	ldr	r3, [r0, #8]
 80069d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d8:	d017      	beq.n	8006a0a <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069da:	6a03      	ldr	r3, [r0, #32]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	6202      	str	r2, [r0, #32]
 80069e0:	781a      	ldrb	r2, [r3, #0]
 80069e2:	6803      	ldr	r3, [r0, #0]
 80069e4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80069e6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	84c3      	strh	r3, [r0, #38]	; 0x26
 80069f0:	b94b      	cbnz	r3, 8006a06 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069f2:	6802      	ldr	r2, [r0, #0]
 80069f4:	68d3      	ldr	r3, [r2, #12]
 80069f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fa:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069fc:	6802      	ldr	r2, [r0, #0]
 80069fe:	68d3      	ldr	r3, [r2, #12]
 8006a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a04:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8006a06:	2000      	movs	r0, #0
 8006a08:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0a:	6903      	ldr	r3, [r0, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e4      	bne.n	80069da <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a10:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	6802      	ldr	r2, [r0, #0]
 8006a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1a:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8006a1c:	6a03      	ldr	r3, [r0, #32]
 8006a1e:	3302      	adds	r3, #2
 8006a20:	6203      	str	r3, [r0, #32]
 8006a22:	e7e0      	b.n	80069e6 <UART_Transmit_IT+0x22>

08006a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a28:	6802      	ldr	r2, [r0, #0]
 8006a2a:	6913      	ldr	r3, [r2, #16]
 8006a2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a30:	68c1      	ldr	r1, [r0, #12]
 8006a32:	430b      	orrs	r3, r1
 8006a34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a36:	6883      	ldr	r3, [r0, #8]
 8006a38:	6902      	ldr	r2, [r0, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	6942      	ldr	r2, [r0, #20]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	69c2      	ldr	r2, [r0, #28]
 8006a42:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8006a44:	6801      	ldr	r1, [r0, #0]
 8006a46:	68cb      	ldr	r3, [r1, #12]
 8006a48:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006a4c:	f023 030c 	bic.w	r3, r3, #12
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a54:	6802      	ldr	r2, [r0, #0]
 8006a56:	6953      	ldr	r3, [r2, #20]
 8006a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a5c:	6981      	ldr	r1, [r0, #24]
 8006a5e:	430b      	orrs	r3, r1
 8006a60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a62:	6803      	ldr	r3, [r0, #0]
 8006a64:	4a34      	ldr	r2, [pc, #208]	; (8006b38 <UART_SetConfig+0x114>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d006      	beq.n	8006a78 <UART_SetConfig+0x54>
 8006a6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d002      	beq.n	8006a78 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a72:	f7fe fef5 	bl	8005860 <HAL_RCC_GetPCLK1Freq>
 8006a76:	e001      	b.n	8006a7c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a78:	f7fe ff02 	bl	8005880 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a7c:	69e3      	ldr	r3, [r4, #28]
 8006a7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a82:	d02a      	beq.n	8006ada <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a84:	2600      	movs	r6, #0
 8006a86:	1805      	adds	r5, r0, r0
 8006a88:	eb46 0106 	adc.w	r1, r6, r6
 8006a8c:	182d      	adds	r5, r5, r0
 8006a8e:	eb46 0101 	adc.w	r1, r6, r1
 8006a92:	00cb      	lsls	r3, r1, #3
 8006a94:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006a98:	00ea      	lsls	r2, r5, #3
 8006a9a:	4615      	mov	r5, r2
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	009a      	lsls	r2, r3, #2
 8006aa2:	0f9b      	lsrs	r3, r3, #30
 8006aa4:	1828      	adds	r0, r5, r0
 8006aa6:	eb46 0101 	adc.w	r1, r6, r1
 8006aaa:	f7fa f8a5 	bl	8000bf8 <__aeabi_uldivmod>
 8006aae:	4d23      	ldr	r5, [pc, #140]	; (8006b3c <UART_SetConfig+0x118>)
 8006ab0:	fba5 3200 	umull	r3, r2, r5, r0
 8006ab4:	0951      	lsrs	r1, r2, #5
 8006ab6:	2364      	movs	r3, #100	; 0x64
 8006ab8:	fb03 0311 	mls	r3, r3, r1, r0
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	3332      	adds	r3, #50	; 0x32
 8006ac0:	fba5 2303 	umull	r2, r3, r5, r3
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006aca:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	6821      	ldr	r1, [r4, #0]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	608b      	str	r3, [r1, #8]
  }
}
 8006ad8:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ada:	2600      	movs	r6, #0
 8006adc:	1805      	adds	r5, r0, r0
 8006ade:	eb46 0106 	adc.w	r1, r6, r6
 8006ae2:	182d      	adds	r5, r5, r0
 8006ae4:	eb46 0101 	adc.w	r1, r6, r1
 8006ae8:	00cb      	lsls	r3, r1, #3
 8006aea:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006aee:	00ea      	lsls	r2, r5, #3
 8006af0:	4615      	mov	r5, r2
 8006af2:	4619      	mov	r1, r3
 8006af4:	6862      	ldr	r2, [r4, #4]
 8006af6:	4633      	mov	r3, r6
 8006af8:	1892      	adds	r2, r2, r2
 8006afa:	eb46 0303 	adc.w	r3, r6, r3
 8006afe:	1828      	adds	r0, r5, r0
 8006b00:	eb46 0101 	adc.w	r1, r6, r1
 8006b04:	f7fa f878 	bl	8000bf8 <__aeabi_uldivmod>
 8006b08:	4d0c      	ldr	r5, [pc, #48]	; (8006b3c <UART_SetConfig+0x118>)
 8006b0a:	fba5 3200 	umull	r3, r2, r5, r0
 8006b0e:	0951      	lsrs	r1, r2, #5
 8006b10:	2364      	movs	r3, #100	; 0x64
 8006b12:	fb03 0311 	mls	r3, r3, r1, r0
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	3332      	adds	r3, #50	; 0x32
 8006b1a:	fba5 2303 	umull	r2, r3, r5, r3
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	005a      	lsls	r2, r3, #1
 8006b22:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006b26:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006b2a:	f003 0307 	and.w	r3, r3, #7
 8006b2e:	6821      	ldr	r1, [r4, #0]
 8006b30:	4413      	add	r3, r2
 8006b32:	608b      	str	r3, [r1, #8]
 8006b34:	e7d0      	b.n	8006ad8 <UART_SetConfig+0xb4>
 8006b36:	bf00      	nop
 8006b38:	40011000 	.word	0x40011000
 8006b3c:	51eb851f 	.word	0x51eb851f

08006b40 <HAL_UART_Init>:
  if (huart == NULL)
 8006b40:	b358      	cbz	r0, 8006b9a <HAL_UART_Init+0x5a>
{
 8006b42:	b510      	push	{r4, lr}
 8006b44:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006b46:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006b4a:	b30b      	cbz	r3, 8006b90 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006b4c:	2324      	movs	r3, #36	; 0x24
 8006b4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	68d3      	ldr	r3, [r2, #12]
 8006b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b5a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f7ff ff61 	bl	8006a24 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b62:	6822      	ldr	r2, [r4, #0]
 8006b64:	6913      	ldr	r3, [r2, #16]
 8006b66:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006b6a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b6c:	6822      	ldr	r2, [r4, #0]
 8006b6e:	6953      	ldr	r3, [r2, #20]
 8006b70:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006b74:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	68d3      	ldr	r3, [r2, #12]
 8006b7a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b7e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b80:	2000      	movs	r0, #0
 8006b82:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b84:	2320      	movs	r3, #32
 8006b86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8006b8e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006b90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006b94:	f7fd fa74 	bl	8004080 <HAL_UART_MspInit>
 8006b98:	e7d8      	b.n	8006b4c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006b9a:	2001      	movs	r0, #1
}
 8006b9c:	4770      	bx	lr

08006b9e <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8006b9e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d116      	bne.n	8006bd6 <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8006ba8:	b1b9      	cbz	r1, 8006bda <HAL_UART_Transmit_IT+0x3c>
 8006baa:	b1c2      	cbz	r2, 8006bde <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8006bac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d016      	beq.n	8006be2 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8006bb4:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8006bb6:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bb8:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bbe:	2221      	movs	r2, #33	; 0x21
 8006bc0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8006bc4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006bc8:	6801      	ldr	r1, [r0, #0]
 8006bca:	68ca      	ldr	r2, [r1, #12]
 8006bcc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bd0:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	4770      	bx	lr
    return HAL_BUSY;
 8006bd6:	2002      	movs	r0, #2
 8006bd8:	4770      	bx	lr
      return HAL_ERROR;
 8006bda:	2001      	movs	r0, #1
 8006bdc:	4770      	bx	lr
 8006bde:	2001      	movs	r0, #1
 8006be0:	4770      	bx	lr
    __HAL_LOCK(huart);
 8006be2:	2002      	movs	r0, #2
}
 8006be4:	4770      	bx	lr

08006be6 <HAL_UART_TxCpltCallback>:
}
 8006be6:	4770      	bx	lr

08006be8 <UART_EndTransmit_IT>:
{
 8006be8:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bea:	6801      	ldr	r1, [r0, #0]
 8006bec:	68ca      	ldr	r2, [r1, #12]
 8006bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf2:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8006bfa:	f7ff fff4 	bl	8006be6 <HAL_UART_TxCpltCallback>
}
 8006bfe:	2000      	movs	r0, #0
 8006c00:	bd08      	pop	{r3, pc}

08006c02 <UART_DMAAbortOnError>:
{
 8006c02:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c04:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c0a:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006c0c:	f7fc fc80 	bl	8003510 <HAL_UART_ErrorCallback>
}
 8006c10:	bd08      	pop	{r3, pc}

08006c12 <HAL_UARTEx_RxEventCallback>:
}
 8006c12:	4770      	bx	lr

08006c14 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c14:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b22      	cmp	r3, #34	; 0x22
 8006c1c:	d167      	bne.n	8006cee <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c1e:	6883      	ldr	r3, [r0, #8]
 8006c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c24:	d04d      	beq.n	8006cc2 <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c26:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2c:	d004      	beq.n	8006c38 <UART_Receive_IT+0x24>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d154      	bne.n	8006cdc <UART_Receive_IT+0xc8>
 8006c32:	6903      	ldr	r3, [r0, #16]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d151      	bne.n	8006cdc <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c38:	6803      	ldr	r3, [r0, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8006c3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006c40:	3301      	adds	r3, #1
 8006c42:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8006c44:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d14f      	bne.n	8006cf2 <UART_Receive_IT+0xde>
{
 8006c52:	b500      	push	{lr}
 8006c54:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c56:	6802      	ldr	r2, [r0, #0]
 8006c58:	68d3      	ldr	r3, [r2, #12]
 8006c5a:	f023 0320 	bic.w	r3, r3, #32
 8006c5e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c60:	6802      	ldr	r2, [r0, #0]
 8006c62:	68d3      	ldr	r3, [r2, #12]
 8006c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c68:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c6a:	6802      	ldr	r2, [r0, #0]
 8006c6c:	6953      	ldr	r3, [r2, #20]
 8006c6e:	f023 0301 	bic.w	r3, r3, #1
 8006c72:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006c74:	2320      	movs	r3, #32
 8006c76:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d133      	bne.n	8006ce8 <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c80:	2300      	movs	r3, #0
 8006c82:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c86:	f102 030c 	add.w	r3, r2, #12
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	320c      	adds	r2, #12
 8006c94:	e842 3100 	strex	r1, r3, [r2]
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	d1f3      	bne.n	8006c84 <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c9c:	6803      	ldr	r3, [r0, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	f012 0f10 	tst.w	r2, #16
 8006ca4:	d006      	beq.n	8006cb4 <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	9201      	str	r2, [sp, #4]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	9201      	str	r2, [sp, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cb4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006cb6:	f7ff ffac 	bl	8006c12 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8006cba:	2000      	movs	r0, #0
}
 8006cbc:	b003      	add	sp, #12
 8006cbe:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc2:	6902      	ldr	r2, [r0, #16]
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	d1ae      	bne.n	8006c26 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cc8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cca:	6803      	ldr	r3, [r0, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8006cd4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006cd6:	3302      	adds	r3, #2
 8006cd8:	6283      	str	r3, [r0, #40]	; 0x28
 8006cda:	e7b3      	b.n	8006c44 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cdc:	6803      	ldr	r3, [r0, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce4:	7013      	strb	r3, [r2, #0]
 8006ce6:	e7aa      	b.n	8006c3e <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8006ce8:	f7fc f8fe 	bl	8002ee8 <HAL_UART_RxCpltCallback>
 8006cec:	e7e5      	b.n	8006cba <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 8006cee:	2002      	movs	r0, #2
 8006cf0:	4770      	bx	lr
    return HAL_OK;
 8006cf2:	2000      	movs	r0, #0
}
 8006cf4:	4770      	bx	lr
	...

08006cf8 <HAL_UART_IRQHandler>:
{
 8006cf8:	b530      	push	{r4, r5, lr}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006cfe:	6802      	ldr	r2, [r0, #0]
 8006d00:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d02:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d04:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8006d06:	f013 050f 	ands.w	r5, r3, #15
 8006d0a:	d105      	bne.n	8006d18 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d0c:	f013 0f20 	tst.w	r3, #32
 8006d10:	d002      	beq.n	8006d18 <HAL_UART_IRQHandler+0x20>
 8006d12:	f010 0f20 	tst.w	r0, #32
 8006d16:	d119      	bne.n	8006d4c <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d18:	b12d      	cbz	r5, 8006d26 <HAL_UART_IRQHandler+0x2e>
 8006d1a:	f011 0101 	ands.w	r1, r1, #1
 8006d1e:	d119      	bne.n	8006d54 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d20:	f410 7f90 	tst.w	r0, #288	; 0x120
 8006d24:	d116      	bne.n	8006d54 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d28:	2901      	cmp	r1, #1
 8006d2a:	d07d      	beq.n	8006e28 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d30:	d003      	beq.n	8006d3a <HAL_UART_IRQHandler+0x42>
 8006d32:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006d36:	f040 8115 	bne.w	8006f64 <HAL_UART_IRQHandler+0x26c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d3a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d3e:	d003      	beq.n	8006d48 <HAL_UART_IRQHandler+0x50>
 8006d40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d44:	f040 8112 	bne.w	8006f6c <HAL_UART_IRQHandler+0x274>
}
 8006d48:	b003      	add	sp, #12
 8006d4a:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f7ff ff61 	bl	8006c14 <UART_Receive_IT>
      return;
 8006d52:	e7f9      	b.n	8006d48 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d54:	f013 0f01 	tst.w	r3, #1
 8006d58:	d006      	beq.n	8006d68 <HAL_UART_IRQHandler+0x70>
 8006d5a:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006d5e:	d003      	beq.n	8006d68 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d60:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d62:	f042 0201 	orr.w	r2, r2, #1
 8006d66:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d68:	f013 0f04 	tst.w	r3, #4
 8006d6c:	d004      	beq.n	8006d78 <HAL_UART_IRQHandler+0x80>
 8006d6e:	b119      	cbz	r1, 8006d78 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d70:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d72:	f042 0202 	orr.w	r2, r2, #2
 8006d76:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d78:	f013 0f02 	tst.w	r3, #2
 8006d7c:	d004      	beq.n	8006d88 <HAL_UART_IRQHandler+0x90>
 8006d7e:	b119      	cbz	r1, 8006d88 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d82:	f042 0204 	orr.w	r2, r2, #4
 8006d86:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d88:	f013 0f08 	tst.w	r3, #8
 8006d8c:	d007      	beq.n	8006d9e <HAL_UART_IRQHandler+0xa6>
 8006d8e:	f010 0f20 	tst.w	r0, #32
 8006d92:	d100      	bne.n	8006d96 <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d94:	b119      	cbz	r1, 8006d9e <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006d98:	f042 0208 	orr.w	r2, r2, #8
 8006d9c:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006da0:	2a00      	cmp	r2, #0
 8006da2:	d0d1      	beq.n	8006d48 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006da4:	f013 0f20 	tst.w	r3, #32
 8006da8:	d002      	beq.n	8006db0 <HAL_UART_IRQHandler+0xb8>
 8006daa:	f010 0f20 	tst.w	r0, #32
 8006dae:	d129      	bne.n	8006e04 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006db8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006dba:	f012 0f08 	tst.w	r2, #8
 8006dbe:	d100      	bne.n	8006dc2 <HAL_UART_IRQHandler+0xca>
 8006dc0:	b363      	cbz	r3, 8006e1c <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7ff fdd0 	bl	8006968 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006dd0:	d020      	beq.n	8006e14 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	f102 0314 	add.w	r3, r2, #20
 8006dd8:	e853 3f00 	ldrex	r3, [r3]
 8006ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	3214      	adds	r2, #20
 8006de2:	e842 3100 	strex	r1, r3, [r2]
 8006de6:	2900      	cmp	r1, #0
 8006de8:	d1f3      	bne.n	8006dd2 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 8006dea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006dec:	b173      	cbz	r3, 8006e0c <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dee:	4a61      	ldr	r2, [pc, #388]	; (8006f74 <HAL_UART_IRQHandler+0x27c>)
 8006df0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006df2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006df4:	f7fd fbd8 	bl	80045a8 <HAL_DMA_Abort_IT>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d0a5      	beq.n	8006d48 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dfc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006dfe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006e00:	4798      	blx	r3
 8006e02:	e7a1      	b.n	8006d48 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8006e04:	4620      	mov	r0, r4
 8006e06:	f7ff ff05 	bl	8006c14 <UART_Receive_IT>
 8006e0a:	e7d1      	b.n	8006db0 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f7fc fb7f 	bl	8003510 <HAL_UART_ErrorCallback>
 8006e12:	e799      	b.n	8006d48 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8006e14:	4620      	mov	r0, r4
 8006e16:	f7fc fb7b 	bl	8003510 <HAL_UART_ErrorCallback>
 8006e1a:	e795      	b.n	8006d48 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f7fc fb77 	bl	8003510 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8006e26:	e78f      	b.n	8006d48 <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e28:	f013 0f10 	tst.w	r3, #16
 8006e2c:	f43f af7e 	beq.w	8006d2c <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e30:	f010 0f10 	tst.w	r0, #16
 8006e34:	f43f af7a 	beq.w	8006d2c <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	6813      	ldr	r3, [r2, #0]
 8006e3e:	9301      	str	r3, [sp, #4]
 8006e40:	6853      	ldr	r3, [r2, #4]
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e46:	6953      	ldr	r3, [r2, #20]
 8006e48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e4c:	d050      	beq.n	8006ef0 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006e50:	6813      	ldr	r3, [r2, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f43f af76 	beq.w	8006d48 <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e5c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	f67f af72 	bls.w	8006d48 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8006e64:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e66:	69d3      	ldr	r3, [r2, #28]
 8006e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6c:	d037      	beq.n	8006ede <HAL_UART_IRQHandler+0x1e6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	f102 030c 	add.w	r3, r2, #12
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	320c      	adds	r2, #12
 8006e7e:	e842 3100 	strex	r1, r3, [r2]
 8006e82:	2900      	cmp	r1, #0
 8006e84:	d1f3      	bne.n	8006e6e <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e86:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	f102 0314 	add.w	r3, r2, #20
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	3214      	adds	r2, #20
 8006e96:	e842 3100 	strex	r1, r3, [r2]
 8006e9a:	2900      	cmp	r1, #0
 8006e9c:	d1f3      	bne.n	8006e86 <HAL_UART_IRQHandler+0x18e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea0:	f102 0314 	add.w	r3, r2, #20
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	3214      	adds	r2, #20
 8006eae:	e842 3100 	strex	r1, r3, [r2]
 8006eb2:	2900      	cmp	r1, #0
 8006eb4:	d1f3      	bne.n	8006e9e <HAL_UART_IRQHandler+0x1a6>
          huart->RxState = HAL_UART_STATE_READY;
 8006eb6:	2320      	movs	r3, #32
 8006eb8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	f102 030c 	add.w	r3, r2, #12
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ece:	320c      	adds	r2, #12
 8006ed0:	e842 3100 	strex	r1, r3, [r2]
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	d1f3      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ed8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006eda:	f7fd fb1b 	bl	8004514 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ede:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006ee0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	1ac9      	subs	r1, r1, r3
 8006ee6:	b289      	uxth	r1, r1
 8006ee8:	4620      	mov	r0, r4
 8006eea:	f7ff fe92 	bl	8006c12 <HAL_UARTEx_RxEventCallback>
      return;
 8006eee:	e72b      	b.n	8006d48 <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ef0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006ef2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	1ac9      	subs	r1, r1, r3
 8006ef8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8006efa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f43f af22 	beq.w	8006d48 <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 8006f04:	2900      	cmp	r1, #0
 8006f06:	f43f af1f 	beq.w	8006d48 <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f0a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	f102 030c 	add.w	r3, r2, #12
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f18:	320c      	adds	r2, #12
 8006f1a:	e842 3000 	strex	r0, r3, [r2]
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d1f3      	bne.n	8006f0a <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f22:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	f102 0314 	add.w	r3, r2, #20
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	3214      	adds	r2, #20
 8006f32:	e842 3000 	strex	r0, r3, [r2]
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d1f3      	bne.n	8006f22 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	2320      	movs	r3, #32
 8006f3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f40:	2300      	movs	r3, #0
 8006f42:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f44:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	f102 030c 	add.w	r3, r2, #12
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f52:	320c      	adds	r2, #12
 8006f54:	e842 3000 	strex	r0, r3, [r2]
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d1f3      	bne.n	8006f44 <HAL_UART_IRQHandler+0x24c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f7ff fe58 	bl	8006c12 <HAL_UARTEx_RxEventCallback>
      return;
 8006f62:	e6f1      	b.n	8006d48 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8006f64:	4620      	mov	r0, r4
 8006f66:	f7ff fd2d 	bl	80069c4 <UART_Transmit_IT>
    return;
 8006f6a:	e6ed      	b.n	8006d48 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f7ff fe3b 	bl	8006be8 <UART_EndTransmit_IT>
    return;
 8006f72:	e6e9      	b.n	8006d48 <HAL_UART_IRQHandler+0x50>
 8006f74:	08006c03 	.word	0x08006c03

08006f78 <UART_Start_Receive_IT>:
{
 8006f78:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 8006f7a:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f7c:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006f7e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	2000      	movs	r0, #0
 8006f82:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f84:	2222      	movs	r2, #34	; 0x22
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 8006f8a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f8e:	6819      	ldr	r1, [r3, #0]
 8006f90:	68ca      	ldr	r2, [r1, #12]
 8006f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f96:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f98:	6819      	ldr	r1, [r3, #0]
 8006f9a:	694a      	ldr	r2, [r1, #20]
 8006f9c:	f042 0201 	orr.w	r2, r2, #1
 8006fa0:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68d3      	ldr	r3, [r2, #12]
 8006fa6:	f043 0320 	orr.w	r3, r3, #32
 8006faa:	60d3      	str	r3, [r2, #12]
}
 8006fac:	4770      	bx	lr

08006fae <HAL_UART_Receive_IT>:
{
 8006fae:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fb0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	d10d      	bne.n	8006fd6 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 8006fba:	b171      	cbz	r1, 8006fda <HAL_UART_Receive_IT+0x2c>
 8006fbc:	b17a      	cbz	r2, 8006fde <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8006fbe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d00d      	beq.n	8006fe2 <HAL_UART_Receive_IT+0x34>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006fd0:	f7ff ffd2 	bl	8006f78 <UART_Start_Receive_IT>
 8006fd4:	e000      	b.n	8006fd8 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 8006fd6:	2002      	movs	r0, #2
}
 8006fd8:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 8006fda:	2001      	movs	r0, #1
 8006fdc:	e7fc      	b.n	8006fd8 <HAL_UART_Receive_IT+0x2a>
 8006fde:	2001      	movs	r0, #1
 8006fe0:	e7fa      	b.n	8006fd8 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8006fe2:	2002      	movs	r0, #2
 8006fe4:	e7f8      	b.n	8006fd8 <HAL_UART_Receive_IT+0x2a>
	...

08006fe8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006fe8:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006fea:	4903      	ldr	r1, [pc, #12]	; (8006ff8 <MX_FATFS_Init+0x10>)
 8006fec:	4803      	ldr	r0, [pc, #12]	; (8006ffc <MX_FATFS_Init+0x14>)
 8006fee:	f001 fc81 	bl	80088f4 <FATFS_LinkDriver>
 8006ff2:	4b03      	ldr	r3, [pc, #12]	; (8007000 <MX_FATFS_Init+0x18>)
 8006ff4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ff6:	bd08      	pop	{r3, pc}
 8006ff8:	20000d9c 	.word	0x20000d9c
 8006ffc:	2000002c 	.word	0x2000002c
 8007000:	20000da0 	.word	0x20000da0

08007004 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8007004:	2000      	movs	r0, #0
 8007006:	4770      	bx	lr

08007008 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007008:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 800700a:	f7fa ff13 	bl	8001e34 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800700e:	bd08      	pop	{r3, pc}

08007010 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007010:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8007012:	f7fa ffd1 	bl	8001fb8 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8007016:	bd08      	pop	{r3, pc}

08007018 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007018:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 800701a:	f7fa ffd7 	bl	8001fcc <SD_disk_read>
  /* USER CODE END READ */
}
 800701e:	bd08      	pop	{r3, pc}

08007020 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007020:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8007022:	f7fb f81f 	bl	8002064 <SD_disk_write>
  /* USER CODE END WRITE */
}
 8007026:	bd08      	pop	{r3, pc}

08007028 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007028:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 800702a:	f7fb f87d 	bl	8002128 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800702e:	bd08      	pop	{r3, pc}

08007030 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007030:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007032:	4b04      	ldr	r3, [pc, #16]	; (8007044 <disk_status+0x14>)
 8007034:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007038:	6852      	ldr	r2, [r2, #4]
 800703a:	6852      	ldr	r2, [r2, #4]
 800703c:	4403      	add	r3, r0
 800703e:	7a18      	ldrb	r0, [r3, #8]
 8007040:	4790      	blx	r2
  return stat;
}
 8007042:	bd08      	pop	{r3, pc}
 8007044:	20000264 	.word	0x20000264

08007048 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007048:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800704a:	4b08      	ldr	r3, [pc, #32]	; (800706c <disk_initialize+0x24>)
 800704c:	5c1b      	ldrb	r3, [r3, r0]
 800704e:	b953      	cbnz	r3, 8007066 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <disk_initialize+0x24>)
 8007052:	2201      	movs	r2, #1
 8007054:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007056:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800705a:	6852      	ldr	r2, [r2, #4]
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	4418      	add	r0, r3
 8007060:	7a00      	ldrb	r0, [r0, #8]
 8007062:	4790      	blx	r2
  }
  return stat;
}
 8007064:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8007066:	2000      	movs	r0, #0
 8007068:	e7fc      	b.n	8007064 <disk_initialize+0x1c>
 800706a:	bf00      	nop
 800706c:	20000264 	.word	0x20000264

08007070 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007070:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007072:	4c04      	ldr	r4, [pc, #16]	; (8007084 <disk_read+0x14>)
 8007074:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007078:	686d      	ldr	r5, [r5, #4]
 800707a:	68ad      	ldr	r5, [r5, #8]
 800707c:	4404      	add	r4, r0
 800707e:	7a20      	ldrb	r0, [r4, #8]
 8007080:	47a8      	blx	r5
  return res;
}
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20000264 	.word	0x20000264

08007088 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007088:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800708a:	4c04      	ldr	r4, [pc, #16]	; (800709c <disk_write+0x14>)
 800708c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007090:	686d      	ldr	r5, [r5, #4]
 8007092:	68ed      	ldr	r5, [r5, #12]
 8007094:	4404      	add	r4, r0
 8007096:	7a20      	ldrb	r0, [r4, #8]
 8007098:	47a8      	blx	r5
  return res;
}
 800709a:	bd38      	pop	{r3, r4, r5, pc}
 800709c:	20000264 	.word	0x20000264

080070a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80070a0:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80070a2:	4b04      	ldr	r3, [pc, #16]	; (80070b4 <disk_ioctl+0x14>)
 80070a4:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80070a8:	6864      	ldr	r4, [r4, #4]
 80070aa:	6924      	ldr	r4, [r4, #16]
 80070ac:	4403      	add	r3, r0
 80070ae:	7a18      	ldrb	r0, [r3, #8]
 80070b0:	47a0      	blx	r4
  return res;
}
 80070b2:	bd10      	pop	{r4, pc}
 80070b4:	20000264 	.word	0x20000264

080070b8 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80070b8:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80070ba:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80070bc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80070c0:	4770      	bx	lr

080070c2 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80070c2:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80070c4:	7883      	ldrb	r3, [r0, #2]
 80070c6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80070ca:	7843      	ldrb	r3, [r0, #1]
 80070cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80070d0:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80070d2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80070d6:	4770      	bx	lr

080070d8 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80070d8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80070da:	0a09      	lsrs	r1, r1, #8
 80070dc:	7041      	strb	r1, [r0, #1]
}
 80070de:	4770      	bx	lr

080070e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80070e0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80070e2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80070e6:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80070e8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80070ec:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80070ee:	0e09      	lsrs	r1, r1, #24
 80070f0:	70c1      	strb	r1, [r0, #3]
}
 80070f2:	4770      	bx	lr

080070f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80070f4:	b410      	push	{r4}
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 80070f6:	4614      	mov	r4, r2
 80070f8:	b12a      	cbz	r2, 8007106 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 80070fa:	780a      	ldrb	r2, [r1, #0]
 80070fc:	3101      	adds	r1, #1
 80070fe:	7002      	strb	r2, [r0, #0]
 8007100:	3001      	adds	r0, #1
		} while (--cnt);
 8007102:	3c01      	subs	r4, #1
 8007104:	d1f9      	bne.n	80070fa <mem_cpy+0x6>
	}
}
 8007106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800710a:	4770      	bx	lr

0800710c <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800710c:	7001      	strb	r1, [r0, #0]
 800710e:	3001      	adds	r0, #1
	} while (--cnt);
 8007110:	3a01      	subs	r2, #1
 8007112:	d1fb      	bne.n	800710c <mem_set>
}
 8007114:	4770      	bx	lr

08007116 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007116:	b410      	push	{r4}
 8007118:	4604      	mov	r4, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800711a:	7820      	ldrb	r0, [r4, #0]
 800711c:	3401      	adds	r4, #1
 800711e:	780b      	ldrb	r3, [r1, #0]
 8007120:	3101      	adds	r1, #1
 8007122:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8007124:	3a01      	subs	r2, #1
 8007126:	d001      	beq.n	800712c <mem_cmp+0x16>
 8007128:	2800      	cmp	r0, #0
 800712a:	d0f6      	beq.n	800711a <mem_cmp+0x4>

	return r;
}
 800712c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007130:	4770      	bx	lr

08007132 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007132:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8007134:	7818      	ldrb	r0, [r3, #0]
 8007136:	b118      	cbz	r0, 8007140 <chk_chr+0xe>
 8007138:	4288      	cmp	r0, r1
 800713a:	d001      	beq.n	8007140 <chk_chr+0xe>
 800713c:	3301      	adds	r3, #1
 800713e:	e7f9      	b.n	8007134 <chk_chr+0x2>
	return *str;
}
 8007140:	4770      	bx	lr
	...

08007144 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007144:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007146:	2500      	movs	r5, #0
 8007148:	462b      	mov	r3, r5
 800714a:	e001      	b.n	8007150 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800714c:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800714e:	3301      	adds	r3, #1
 8007150:	2b01      	cmp	r3, #1
 8007152:	d815      	bhi.n	8007180 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8007154:	011a      	lsls	r2, r3, #4
 8007156:	4c17      	ldr	r4, [pc, #92]	; (80071b4 <chk_lock+0x70>)
 8007158:	58a2      	ldr	r2, [r4, r2]
 800715a:	2a00      	cmp	r2, #0
 800715c:	d0f6      	beq.n	800714c <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800715e:	6804      	ldr	r4, [r0, #0]
 8007160:	42a2      	cmp	r2, r4
 8007162:	d1f4      	bne.n	800714e <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8007164:	4a13      	ldr	r2, [pc, #76]	; (80071b4 <chk_lock+0x70>)
 8007166:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800716a:	6854      	ldr	r4, [r2, #4]
 800716c:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800716e:	4294      	cmp	r4, r2
 8007170:	d1ed      	bne.n	800714e <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8007172:	4a10      	ldr	r2, [pc, #64]	; (80071b4 <chk_lock+0x70>)
 8007174:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007178:	6894      	ldr	r4, [r2, #8]
 800717a:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 800717c:	4294      	cmp	r4, r2
 800717e:	d1e6      	bne.n	800714e <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007180:	2b02      	cmp	r3, #2
 8007182:	d00a      	beq.n	800719a <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007184:	b9a1      	cbnz	r1, 80071b0 <chk_lock+0x6c>
 8007186:	4a0b      	ldr	r2, [pc, #44]	; (80071b4 <chk_lock+0x70>)
 8007188:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800718c:	899b      	ldrh	r3, [r3, #12]
 800718e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007192:	d00b      	beq.n	80071ac <chk_lock+0x68>
 8007194:	2000      	movs	r0, #0
}
 8007196:	bc30      	pop	{r4, r5}
 8007198:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800719a:	b92d      	cbnz	r5, 80071a8 <chk_lock+0x64>
 800719c:	2902      	cmp	r1, #2
 800719e:	d001      	beq.n	80071a4 <chk_lock+0x60>
 80071a0:	2012      	movs	r0, #18
 80071a2:	e7f8      	b.n	8007196 <chk_lock+0x52>
 80071a4:	2000      	movs	r0, #0
 80071a6:	e7f6      	b.n	8007196 <chk_lock+0x52>
 80071a8:	2000      	movs	r0, #0
 80071aa:	e7f4      	b.n	8007196 <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80071ac:	2010      	movs	r0, #16
 80071ae:	e7f2      	b.n	8007196 <chk_lock+0x52>
 80071b0:	2010      	movs	r0, #16
 80071b2:	e7f0      	b.n	8007196 <chk_lock+0x52>
 80071b4:	20000240 	.word	0x20000240

080071b8 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80071b8:	2000      	movs	r0, #0
 80071ba:	e000      	b.n	80071be <enq_lock+0x6>
 80071bc:	3001      	adds	r0, #1
 80071be:	2801      	cmp	r0, #1
 80071c0:	d804      	bhi.n	80071cc <enq_lock+0x14>
 80071c2:	0103      	lsls	r3, r0, #4
 80071c4:	4a03      	ldr	r2, [pc, #12]	; (80071d4 <enq_lock+0x1c>)
 80071c6:	58d3      	ldr	r3, [r2, r3]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1f7      	bne.n	80071bc <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 80071cc:	3802      	subs	r0, #2
 80071ce:	bf18      	it	ne
 80071d0:	2001      	movne	r0, #1
 80071d2:	4770      	bx	lr
 80071d4:	20000240 	.word	0x20000240

080071d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80071d8:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80071da:	2300      	movs	r3, #0
 80071dc:	e000      	b.n	80071e0 <inc_lock+0x8>
 80071de:	3301      	adds	r3, #1
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d813      	bhi.n	800720c <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 80071e4:	011a      	lsls	r2, r3, #4
 80071e6:	4c24      	ldr	r4, [pc, #144]	; (8007278 <inc_lock+0xa0>)
 80071e8:	58a4      	ldr	r4, [r4, r2]
 80071ea:	6802      	ldr	r2, [r0, #0]
 80071ec:	4294      	cmp	r4, r2
 80071ee:	d1f6      	bne.n	80071de <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 80071f0:	4a21      	ldr	r2, [pc, #132]	; (8007278 <inc_lock+0xa0>)
 80071f2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80071f6:	6854      	ldr	r4, [r2, #4]
 80071f8:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 80071fa:	4294      	cmp	r4, r2
 80071fc:	d1ef      	bne.n	80071de <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 80071fe:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <inc_lock+0xa0>)
 8007200:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007204:	6894      	ldr	r4, [r2, #8]
 8007206:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8007208:	4294      	cmp	r4, r2
 800720a:	d1e8      	bne.n	80071de <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800720c:	2b02      	cmp	r3, #2
 800720e:	d013      	beq.n	8007238 <inc_lock+0x60>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007210:	b121      	cbz	r1, 800721c <inc_lock+0x44>
 8007212:	4a19      	ldr	r2, [pc, #100]	; (8007278 <inc_lock+0xa0>)
 8007214:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007218:	8992      	ldrh	r2, [r2, #12]
 800721a:	bb52      	cbnz	r2, 8007272 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800721c:	bb21      	cbnz	r1, 8007268 <inc_lock+0x90>
 800721e:	4a16      	ldr	r2, [pc, #88]	; (8007278 <inc_lock+0xa0>)
 8007220:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007224:	8991      	ldrh	r1, [r2, #12]
 8007226:	3101      	adds	r1, #1
 8007228:	b289      	uxth	r1, r1
 800722a:	4a13      	ldr	r2, [pc, #76]	; (8007278 <inc_lock+0xa0>)
 800722c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007230:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8007232:	1c58      	adds	r0, r3, #1
}
 8007234:	bc70      	pop	{r4, r5, r6}
 8007236:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007238:	2300      	movs	r3, #0
 800723a:	2b01      	cmp	r3, #1
 800723c:	d805      	bhi.n	800724a <inc_lock+0x72>
 800723e:	011a      	lsls	r2, r3, #4
 8007240:	4c0d      	ldr	r4, [pc, #52]	; (8007278 <inc_lock+0xa0>)
 8007242:	58a2      	ldr	r2, [r4, r2]
 8007244:	b10a      	cbz	r2, 800724a <inc_lock+0x72>
 8007246:	3301      	adds	r3, #1
 8007248:	e7f7      	b.n	800723a <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800724a:	2b02      	cmp	r3, #2
 800724c:	d00f      	beq.n	800726e <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 800724e:	6806      	ldr	r6, [r0, #0]
 8007250:	4d09      	ldr	r5, [pc, #36]	; (8007278 <inc_lock+0xa0>)
 8007252:	011c      	lsls	r4, r3, #4
 8007254:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8007258:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800725a:	6884      	ldr	r4, [r0, #8]
 800725c:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 800725e:	6940      	ldr	r0, [r0, #20]
 8007260:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8007262:	2000      	movs	r0, #0
 8007264:	8190      	strh	r0, [r2, #12]
 8007266:	e7d3      	b.n	8007210 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007268:	f44f 7180 	mov.w	r1, #256	; 0x100
 800726c:	e7dd      	b.n	800722a <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800726e:	2000      	movs	r0, #0
 8007270:	e7e0      	b.n	8007234 <inc_lock+0x5c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007272:	2000      	movs	r0, #0
 8007274:	e7de      	b.n	8007234 <inc_lock+0x5c>
 8007276:	bf00      	nop
 8007278:	20000240 	.word	0x20000240

0800727c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800727c:	3801      	subs	r0, #1
 800727e:	2801      	cmp	r0, #1
 8007280:	d815      	bhi.n	80072ae <dec_lock+0x32>
		n = Files[i].ctr;
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <dec_lock+0x3c>)
 8007284:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007288:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800728a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728e:	d003      	beq.n	8007298 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8007290:	b11b      	cbz	r3, 800729a <dec_lock+0x1e>
 8007292:	3b01      	subs	r3, #1
 8007294:	b29b      	uxth	r3, r3
 8007296:	e000      	b.n	800729a <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007298:	2300      	movs	r3, #0
		Files[i].ctr = n;
 800729a:	4a07      	ldr	r2, [pc, #28]	; (80072b8 <dec_lock+0x3c>)
 800729c:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80072a0:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80072a2:	b933      	cbnz	r3, 80072b2 <dec_lock+0x36>
 80072a4:	0103      	lsls	r3, r0, #4
 80072a6:	2000      	movs	r0, #0
 80072a8:	4a03      	ldr	r2, [pc, #12]	; (80072b8 <dec_lock+0x3c>)
 80072aa:	50d0      	str	r0, [r2, r3]
 80072ac:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80072ae:	2002      	movs	r0, #2
 80072b0:	4770      	bx	lr
		res = FR_OK;
 80072b2:	2000      	movs	r0, #0
	}
	return res;
}
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	20000240 	.word	0x20000240

080072bc <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80072bc:	2300      	movs	r3, #0
 80072be:	e003      	b.n	80072c8 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 80072c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072c4:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 80072c6:	3301      	adds	r3, #1
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d811      	bhi.n	80072f0 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80072cc:	011a      	lsls	r2, r3, #4
 80072ce:	4909      	ldr	r1, [pc, #36]	; (80072f4 <clear_lock+0x38>)
 80072d0:	588a      	ldr	r2, [r1, r2]
 80072d2:	4282      	cmp	r2, r0
 80072d4:	d1f7      	bne.n	80072c6 <clear_lock+0xa>
{
 80072d6:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80072d8:	011a      	lsls	r2, r3, #4
 80072da:	2400      	movs	r4, #0
 80072dc:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 80072de:	3301      	adds	r3, #1
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d8ed      	bhi.n	80072c0 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80072e4:	011a      	lsls	r2, r3, #4
 80072e6:	4903      	ldr	r1, [pc, #12]	; (80072f4 <clear_lock+0x38>)
 80072e8:	588a      	ldr	r2, [r1, r2]
 80072ea:	4282      	cmp	r2, r0
 80072ec:	d1f7      	bne.n	80072de <clear_lock+0x22>
 80072ee:	e7f3      	b.n	80072d8 <clear_lock+0x1c>
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20000240 	.word	0x20000240

080072f8 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 80072f8:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80072fa:	6943      	ldr	r3, [r0, #20]
 80072fc:	3b02      	subs	r3, #2
 80072fe:	428b      	cmp	r3, r1
 8007300:	d904      	bls.n	800730c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8007302:	8943      	ldrh	r3, [r0, #10]
 8007304:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007306:	fb01 0003 	mla	r0, r1, r3, r0
 800730a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800730c:	2000      	movs	r0, #0
}
 800730e:	4770      	bx	lr

08007310 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007310:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007312:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007314:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007316:	0a49      	lsrs	r1, r1, #9
 8007318:	8952      	ldrh	r2, [r2, #10]
 800731a:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800731e:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007320:	b130      	cbz	r0, 8007330 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8007322:	4281      	cmp	r1, r0
 8007324:	d302      	bcc.n	800732c <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8007326:	1a09      	subs	r1, r1, r0
 8007328:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800732a:	e7f8      	b.n	800731e <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800732c:	6858      	ldr	r0, [r3, #4]
 800732e:	4408      	add	r0, r1
}
 8007330:	4770      	bx	lr

08007332 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007332:	b570      	push	{r4, r5, r6, lr}
 8007334:	4606      	mov	r6, r0
 8007336:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007338:	f101 001a 	add.w	r0, r1, #26
 800733c:	f7ff febc 	bl	80070b8 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8007340:	7833      	ldrb	r3, [r6, #0]
 8007342:	2b03      	cmp	r3, #3
 8007344:	d000      	beq.n	8007348 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800734a:	f105 0014 	add.w	r0, r5, #20
 800734e:	f7ff feb3 	bl	80070b8 <ld_word>
 8007352:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 8007356:	e7f6      	b.n	8007346 <ld_clust+0x14>

08007358 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007358:	b570      	push	{r4, r5, r6, lr}
 800735a:	4606      	mov	r6, r0
 800735c:	460c      	mov	r4, r1
 800735e:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007360:	b291      	uxth	r1, r2
 8007362:	f104 001a 	add.w	r0, r4, #26
 8007366:	f7ff feb7 	bl	80070d8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800736a:	7833      	ldrb	r3, [r6, #0]
 800736c:	2b03      	cmp	r3, #3
 800736e:	d000      	beq.n	8007372 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8007370:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007372:	0c29      	lsrs	r1, r5, #16
 8007374:	f104 0014 	add.w	r0, r4, #20
 8007378:	f7ff feae 	bl	80070d8 <st_word>
}
 800737c:	e7f8      	b.n	8007370 <st_clust+0x18>
	...

08007380 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	4681      	mov	r9, r0
 8007386:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007388:	680f      	ldr	r7, [r1, #0]
 800738a:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	mem_set(sfn, ' ', 11);
 800738e:	220b      	movs	r2, #11
 8007390:	2120      	movs	r1, #32
 8007392:	4658      	mov	r0, fp
 8007394:	f7ff feba 	bl	800710c <mem_set>
	si = i = 0; ni = 8;
 8007398:	2600      	movs	r6, #0
 800739a:	4633      	mov	r3, r6
 800739c:	f04f 0808 	mov.w	r8, #8
 80073a0:	e02c      	b.n	80073fc <create_name+0x7c>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80073a2:	3501      	adds	r5, #1
 80073a4:	5d7b      	ldrb	r3, [r7, r5]
 80073a6:	2b2f      	cmp	r3, #47	; 0x2f
 80073a8:	d0fb      	beq.n	80073a2 <create_name+0x22>
 80073aa:	2b5c      	cmp	r3, #92	; 0x5c
 80073ac:	d0f9      	beq.n	80073a2 <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80073ae:	443d      	add	r5, r7
 80073b0:	f8ca 5000 	str.w	r5, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80073b4:	2e00      	cmp	r6, #0
 80073b6:	d043      	beq.n	8007440 <create_name+0xc0>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80073b8:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 80073bc:	2be5      	cmp	r3, #229	; 0xe5
 80073be:	d035      	beq.n	800742c <create_name+0xac>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80073c0:	2c20      	cmp	r4, #32
 80073c2:	d837      	bhi.n	8007434 <create_name+0xb4>
 80073c4:	2304      	movs	r3, #4
 80073c6:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f

	return FR_OK;
 80073ca:	2000      	movs	r0, #0
 80073cc:	e028      	b.n	8007420 <create_name+0xa0>
			i = 8; ni = 11;				/* Goto extension */
 80073ce:	2608      	movs	r6, #8
 80073d0:	f04f 080b 	mov.w	r8, #11
 80073d4:	e011      	b.n	80073fa <create_name+0x7a>
		if (c >= 0x80) {				/* Extended character? */
 80073d6:	f014 0f80 	tst.w	r4, #128	; 0x80
 80073da:	d123      	bne.n	8007424 <create_name+0xa4>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80073dc:	4621      	mov	r1, r4
 80073de:	4819      	ldr	r0, [pc, #100]	; (8007444 <create_name+0xc4>)
 80073e0:	f7ff fea7 	bl	8007132 <chk_chr>
 80073e4:	bb50      	cbnz	r0, 800743c <create_name+0xbc>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80073e6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b19      	cmp	r3, #25
 80073ee:	d801      	bhi.n	80073f4 <create_name+0x74>
 80073f0:	3c20      	subs	r4, #32
 80073f2:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 80073f4:	f80b 4006 	strb.w	r4, [fp, r6]
 80073f8:	3601      	adds	r6, #1
			i = 8; ni = 11;				/* Goto extension */
 80073fa:	462b      	mov	r3, r5
		c = (BYTE)p[si++];
 80073fc:	1c5d      	adds	r5, r3, #1
 80073fe:	5cfc      	ldrb	r4, [r7, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007400:	2c20      	cmp	r4, #32
 8007402:	d9d4      	bls.n	80073ae <create_name+0x2e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007404:	2c2f      	cmp	r4, #47	; 0x2f
 8007406:	d0cd      	beq.n	80073a4 <create_name+0x24>
 8007408:	2c5c      	cmp	r4, #92	; 0x5c
 800740a:	d0cb      	beq.n	80073a4 <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800740c:	2c2e      	cmp	r4, #46	; 0x2e
 800740e:	d001      	beq.n	8007414 <create_name+0x94>
 8007410:	45b0      	cmp	r8, r6
 8007412:	d8e0      	bhi.n	80073d6 <create_name+0x56>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007414:	f1b8 0f0b 	cmp.w	r8, #11
 8007418:	d00e      	beq.n	8007438 <create_name+0xb8>
 800741a:	2c2e      	cmp	r4, #46	; 0x2e
 800741c:	d0d7      	beq.n	80073ce <create_name+0x4e>
 800741e:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 8007420:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007424:	3c80      	subs	r4, #128	; 0x80
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <create_name+0xc8>)
 8007428:	5d1c      	ldrb	r4, [r3, r4]
 800742a:	e7d7      	b.n	80073dc <create_name+0x5c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800742c:	2305      	movs	r3, #5
 800742e:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
 8007432:	e7c5      	b.n	80073c0 <create_name+0x40>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007434:	2300      	movs	r3, #0
 8007436:	e7c6      	b.n	80073c6 <create_name+0x46>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007438:	2006      	movs	r0, #6
 800743a:	e7f1      	b.n	8007420 <create_name+0xa0>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800743c:	2006      	movs	r0, #6
 800743e:	e7ef      	b.n	8007420 <create_name+0xa0>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007440:	2006      	movs	r0, #6
 8007442:	e7ed      	b.n	8007420 <create_name+0xa0>
 8007444:	0800c8b0 	.word	0x0800c8b0
 8007448:	0800c8c0 	.word	0x0800c8c0

0800744c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800744c:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800744e:	6800      	ldr	r0, [r0, #0]
 8007450:	b108      	cbz	r0, 8007456 <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007452:	4602      	mov	r2, r0
 8007454:	e003      	b.n	800745e <get_ldnumber+0x12>
	int vol = -1;
 8007456:	f04f 30ff 	mov.w	r0, #4294967295
 800745a:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800745c:	3201      	adds	r2, #1
 800745e:	7813      	ldrb	r3, [r2, #0]
 8007460:	2b20      	cmp	r3, #32
 8007462:	d901      	bls.n	8007468 <get_ldnumber+0x1c>
 8007464:	2b3a      	cmp	r3, #58	; 0x3a
 8007466:	d1f9      	bne.n	800745c <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007468:	2b3a      	cmp	r3, #58	; 0x3a
 800746a:	d001      	beq.n	8007470 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800746c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800746e:	4770      	bx	lr
{
 8007470:	b410      	push	{r4}
			i = *tp++ - '0';
 8007472:	4603      	mov	r3, r0
 8007474:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007478:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800747a:	2809      	cmp	r0, #9
 800747c:	d808      	bhi.n	8007490 <get_ldnumber+0x44>
 800747e:	429a      	cmp	r2, r3
 8007480:	d002      	beq.n	8007488 <get_ldnumber+0x3c>
	int vol = -1;
 8007482:	f04f 30ff 	mov.w	r0, #4294967295
 8007486:	e005      	b.n	8007494 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007488:	b938      	cbnz	r0, 800749a <get_ldnumber+0x4e>
					*path = ++tt;
 800748a:	3201      	adds	r2, #1
 800748c:	600a      	str	r2, [r1, #0]
 800748e:	e001      	b.n	8007494 <get_ldnumber+0x48>
	int vol = -1;
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007498:	4770      	bx	lr
	int vol = -1;
 800749a:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 800749e:	e7f9      	b.n	8007494 <get_ldnumber+0x48>

080074a0 <putc_init>:
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
 80074a0:	6001      	str	r1, [r0, #0]
	pb->nchr = pb->idx = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	6043      	str	r3, [r0, #4]
 80074a6:	6083      	str	r3, [r0, #8]
}
 80074a8:	4770      	bx	lr

080074aa <validate>:
{
 80074aa:	b538      	push	{r3, r4, r5, lr}
 80074ac:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80074ae:	4604      	mov	r4, r0
 80074b0:	b198      	cbz	r0, 80074da <validate+0x30>
 80074b2:	6803      	ldr	r3, [r0, #0]
 80074b4:	b19b      	cbz	r3, 80074de <validate+0x34>
 80074b6:	781a      	ldrb	r2, [r3, #0]
 80074b8:	b1a2      	cbz	r2, 80074e4 <validate+0x3a>
 80074ba:	8881      	ldrh	r1, [r0, #4]
 80074bc:	88da      	ldrh	r2, [r3, #6]
 80074be:	4291      	cmp	r1, r2
 80074c0:	d003      	beq.n	80074ca <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80074c2:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074c4:	2400      	movs	r4, #0
 80074c6:	602c      	str	r4, [r5, #0]
}
 80074c8:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80074ca:	7858      	ldrb	r0, [r3, #1]
 80074cc:	f7ff fdb0 	bl	8007030 <disk_status>
 80074d0:	f010 0001 	ands.w	r0, r0, #1
 80074d4:	d109      	bne.n	80074ea <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074d6:	6824      	ldr	r4, [r4, #0]
 80074d8:	e7f5      	b.n	80074c6 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80074da:	2009      	movs	r0, #9
 80074dc:	e7f3      	b.n	80074c6 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074de:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 80074e0:	2009      	movs	r0, #9
 80074e2:	e7f0      	b.n	80074c6 <validate+0x1c>
 80074e4:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074e6:	2400      	movs	r4, #0
 80074e8:	e7ed      	b.n	80074c6 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80074ea:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074ec:	2400      	movs	r4, #0
 80074ee:	e7ea      	b.n	80074c6 <validate+0x1c>

080074f0 <sync_window>:
{
 80074f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80074f4:	78c5      	ldrb	r5, [r0, #3]
 80074f6:	b915      	cbnz	r5, 80074fe <sync_window+0xe>
}
 80074f8:	4628      	mov	r0, r5
 80074fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074fe:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8007500:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007502:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007506:	2301      	movs	r3, #1
 8007508:	463a      	mov	r2, r7
 800750a:	4641      	mov	r1, r8
 800750c:	7840      	ldrb	r0, [r0, #1]
 800750e:	f7ff fdbb 	bl	8007088 <disk_write>
 8007512:	4605      	mov	r5, r0
 8007514:	b998      	cbnz	r0, 800753e <sync_window+0x4e>
			fs->wflag = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800751a:	6a23      	ldr	r3, [r4, #32]
 800751c:	1afb      	subs	r3, r7, r3
 800751e:	69a2      	ldr	r2, [r4, #24]
 8007520:	4293      	cmp	r3, r2
 8007522:	d2e9      	bcs.n	80074f8 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007524:	78a6      	ldrb	r6, [r4, #2]
 8007526:	2e01      	cmp	r6, #1
 8007528:	d9e6      	bls.n	80074f8 <sync_window+0x8>
					wsect += fs->fsize;
 800752a:	69a3      	ldr	r3, [r4, #24]
 800752c:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800752e:	2301      	movs	r3, #1
 8007530:	463a      	mov	r2, r7
 8007532:	4641      	mov	r1, r8
 8007534:	7860      	ldrb	r0, [r4, #1]
 8007536:	f7ff fda7 	bl	8007088 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800753a:	3e01      	subs	r6, #1
 800753c:	e7f3      	b.n	8007526 <sync_window+0x36>
			res = FR_DISK_ERR;
 800753e:	2501      	movs	r5, #1
 8007540:	e7da      	b.n	80074f8 <sync_window+0x8>

08007542 <move_window>:
{
 8007542:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007544:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007546:	428b      	cmp	r3, r1
 8007548:	d102      	bne.n	8007550 <move_window+0xe>
	FRESULT res = FR_OK;
 800754a:	2600      	movs	r6, #0
}
 800754c:	4630      	mov	r0, r6
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	4604      	mov	r4, r0
 8007552:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8007554:	f7ff ffcc 	bl	80074f0 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007558:	4606      	mov	r6, r0
 800755a:	2800      	cmp	r0, #0
 800755c:	d1f6      	bne.n	800754c <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800755e:	2301      	movs	r3, #1
 8007560:	462a      	mov	r2, r5
 8007562:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8007566:	7860      	ldrb	r0, [r4, #1]
 8007568:	f7ff fd82 	bl	8007070 <disk_read>
 800756c:	b110      	cbz	r0, 8007574 <move_window+0x32>
				res = FR_DISK_ERR;
 800756e:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007570:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8007574:	62e5      	str	r5, [r4, #44]	; 0x2c
 8007576:	e7e9      	b.n	800754c <move_window+0xa>

08007578 <check_fs>:
{
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800757c:	2300      	movs	r3, #0
 800757e:	70c3      	strb	r3, [r0, #3]
 8007580:	f04f 33ff 	mov.w	r3, #4294967295
 8007584:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007586:	f7ff ffdc 	bl	8007542 <move_window>
 800758a:	bb30      	cbnz	r0, 80075da <check_fs+0x62>
 800758c:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800758e:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8007592:	f7ff fd91 	bl	80070b8 <ld_word>
 8007596:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800759a:	4298      	cmp	r0, r3
 800759c:	d11f      	bne.n	80075de <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800759e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80075a2:	2be9      	cmp	r3, #233	; 0xe9
 80075a4:	d007      	beq.n	80075b6 <check_fs+0x3e>
 80075a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80075a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80075ac:	4a0d      	ldr	r2, [pc, #52]	; (80075e4 <check_fs+0x6c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d001      	beq.n	80075b6 <check_fs+0x3e>
	return 2;
 80075b2:	2502      	movs	r5, #2
 80075b4:	e014      	b.n	80075e0 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80075b6:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80075ba:	f7ff fd82 	bl	80070c2 <ld_dword>
 80075be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80075c2:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <check_fs+0x70>)
 80075c4:	4298      	cmp	r0, r3
 80075c6:	d00b      	beq.n	80075e0 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80075c8:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80075cc:	f7ff fd79 	bl	80070c2 <ld_dword>
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <check_fs+0x74>)
 80075d2:	4298      	cmp	r0, r3
 80075d4:	d004      	beq.n	80075e0 <check_fs+0x68>
	return 2;
 80075d6:	2502      	movs	r5, #2
 80075d8:	e002      	b.n	80075e0 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80075da:	2504      	movs	r5, #4
 80075dc:	e000      	b.n	80075e0 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80075de:	2503      	movs	r5, #3
}
 80075e0:	4628      	mov	r0, r5
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	009000eb 	.word	0x009000eb
 80075e8:	00544146 	.word	0x00544146
 80075ec:	33544146 	.word	0x33544146

080075f0 <find_volume>:
{
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	b085      	sub	sp, #20
 80075f6:	460d      	mov	r5, r1
 80075f8:	4616      	mov	r6, r2
	*rfs = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80075fe:	f7ff ff25 	bl	800744c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007602:	1e07      	subs	r7, r0, #0
 8007604:	f2c0 8144 	blt.w	8007890 <find_volume+0x2a0>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007608:	4bb5      	ldr	r3, [pc, #724]	; (80078e0 <find_volume+0x2f0>)
 800760a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800760e:	2c00      	cmp	r4, #0
 8007610:	f000 8143 	beq.w	800789a <find_volume+0x2aa>
	*rfs = fs;							/* Return pointer to the file system object */
 8007614:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007616:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800761a:	7823      	ldrb	r3, [r4, #0]
 800761c:	b173      	cbz	r3, 800763c <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800761e:	7860      	ldrb	r0, [r4, #1]
 8007620:	f7ff fd06 	bl	8007030 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007624:	f010 0501 	ands.w	r5, r0, #1
 8007628:	d108      	bne.n	800763c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800762a:	2e00      	cmp	r6, #0
 800762c:	f000 8131 	beq.w	8007892 <find_volume+0x2a2>
 8007630:	f010 0f04 	tst.w	r0, #4
 8007634:	f000 812d 	beq.w	8007892 <find_volume+0x2a2>
				return FR_WRITE_PROTECTED;
 8007638:	250a      	movs	r5, #10
 800763a:	e12a      	b.n	8007892 <find_volume+0x2a2>
	fs->fs_type = 0;					/* Clear the file system object */
 800763c:	2300      	movs	r3, #0
 800763e:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007640:	b2f8      	uxtb	r0, r7
 8007642:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007644:	f7ff fd00 	bl	8007048 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007648:	f010 0501 	ands.w	r5, r0, #1
 800764c:	f040 8127 	bne.w	800789e <find_volume+0x2ae>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007650:	b11e      	cbz	r6, 800765a <find_volume+0x6a>
 8007652:	f010 0f04 	tst.w	r0, #4
 8007656:	f040 8124 	bne.w	80078a2 <find_volume+0x2b2>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800765a:	2100      	movs	r1, #0
 800765c:	4620      	mov	r0, r4
 800765e:	f7ff ff8b 	bl	8007578 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007662:	2802      	cmp	r0, #2
 8007664:	f000 80b6 	beq.w	80077d4 <find_volume+0x1e4>
	bsect = 0;
 8007668:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800766a:	2804      	cmp	r0, #4
 800766c:	f000 811b 	beq.w	80078a6 <find_volume+0x2b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007670:	2801      	cmp	r0, #1
 8007672:	f200 811a 	bhi.w	80078aa <find_volume+0x2ba>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007676:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 800767a:	f7ff fd1d 	bl	80070b8 <ld_word>
 800767e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007682:	f040 8114 	bne.w	80078ae <find_volume+0x2be>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007686:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800768a:	f7ff fd15 	bl	80070b8 <ld_word>
 800768e:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007690:	b920      	cbnz	r0, 800769c <find_volume+0xac>
 8007692:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8007696:	f7ff fd14 	bl	80070c2 <ld_dword>
 800769a:	4606      	mov	r6, r0
		fs->fsize = fasize;
 800769c:	61a6      	str	r6, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800769e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80076a2:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80076a4:	1e53      	subs	r3, r2, #1
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	f200 8102 	bhi.w	80078b2 <find_volume+0x2c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80076ae:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80076b2:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 80076b6:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80076ba:	f1b9 0f00 	cmp.w	r9, #0
 80076be:	f000 80fa 	beq.w	80078b6 <find_volume+0x2c6>
 80076c2:	f109 33ff 	add.w	r3, r9, #4294967295
 80076c6:	ea19 0f03 	tst.w	r9, r3
 80076ca:	f040 80f6 	bne.w	80078ba <find_volume+0x2ca>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80076ce:	f104 0041 	add.w	r0, r4, #65	; 0x41
 80076d2:	f7ff fcf1 	bl	80070b8 <ld_word>
 80076d6:	4682      	mov	sl, r0
 80076d8:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80076da:	f010 0f0f 	tst.w	r0, #15
 80076de:	f040 80ee 	bne.w	80078be <find_volume+0x2ce>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80076e2:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80076e6:	f7ff fce7 	bl	80070b8 <ld_word>
 80076ea:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80076ec:	b920      	cbnz	r0, 80076f8 <find_volume+0x108>
 80076ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076f2:	f7ff fce6 	bl	80070c2 <ld_dword>
 80076f6:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80076f8:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 80076fc:	f7ff fcdc 	bl	80070b8 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007700:	4602      	mov	r2, r0
 8007702:	2800      	cmp	r0, #0
 8007704:	f000 80dd 	beq.w	80078c2 <find_volume+0x2d2>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007708:	eb00 0308 	add.w	r3, r0, r8
 800770c:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007710:	459b      	cmp	fp, r3
 8007712:	f0c0 80d8 	bcc.w	80078c6 <find_volume+0x2d6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007716:	ebab 0b03 	sub.w	fp, fp, r3
 800771a:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800771e:	45cb      	cmp	fp, r9
 8007720:	f0c0 80d3 	bcc.w	80078ca <find_volume+0x2da>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007724:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8007728:	4281      	cmp	r1, r0
 800772a:	d96b      	bls.n	8007804 <find_volume+0x214>
		fmt = FS_FAT32;
 800772c:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007730:	f640 70f5 	movw	r0, #4085	; 0xff5
 8007734:	4281      	cmp	r1, r0
 8007736:	d801      	bhi.n	800773c <find_volume+0x14c>
 8007738:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800773c:	f101 0902 	add.w	r9, r1, #2
 8007740:	f8c4 9014 	str.w	r9, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007744:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007746:	443a      	add	r2, r7
 8007748:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800774a:	443b      	add	r3, r7
 800774c:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800774e:	f1bb 0f03 	cmp.w	fp, #3
 8007752:	d05a      	beq.n	800780a <find_volume+0x21a>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007754:	f1ba 0f00 	cmp.w	sl, #0
 8007758:	f000 80bd 	beq.w	80078d6 <find_volume+0x2e6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800775c:	4442      	add	r2, r8
 800775e:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007760:	f1bb 0f02 	cmp.w	fp, #2
 8007764:	d062      	beq.n	800782c <find_volume+0x23c>
 8007766:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800776a:	f009 0901 	and.w	r9, r9, #1
 800776e:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007772:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 8007776:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
 800777a:	f0c0 80ae 	bcc.w	80078da <find_volume+0x2ea>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800777e:	f04f 33ff 	mov.w	r3, #4294967295
 8007782:	6123      	str	r3, [r4, #16]
 8007784:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8007786:	2380      	movs	r3, #128	; 0x80
 8007788:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800778a:	f1bb 0f03 	cmp.w	fp, #3
 800778e:	d050      	beq.n	8007832 <find_volume+0x242>
	fs->fs_type = fmt;		/* FAT sub-type */
 8007790:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8007794:	4a53      	ldr	r2, [pc, #332]	; (80078e4 <find_volume+0x2f4>)
 8007796:	8813      	ldrh	r3, [r2, #0]
 8007798:	3301      	adds	r3, #1
 800779a:	b29b      	uxth	r3, r3
 800779c:	8013      	strh	r3, [r2, #0]
 800779e:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 80077a0:	4620      	mov	r0, r4
 80077a2:	f7ff fd8b 	bl	80072bc <clear_lock>
	return FR_OK;
 80077a6:	e074      	b.n	8007892 <find_volume+0x2a2>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80077a8:	2000      	movs	r0, #0
 80077aa:	ab04      	add	r3, sp, #16
 80077ac:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80077b0:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077b4:	3601      	adds	r6, #1
 80077b6:	2e03      	cmp	r6, #3
 80077b8:	d80e      	bhi.n	80077d8 <find_volume+0x1e8>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80077ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80077be:	0133      	lsls	r3, r6, #4
 80077c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80077c4:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80077c6:	7903      	ldrb	r3, [r0, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d0ed      	beq.n	80077a8 <find_volume+0x1b8>
 80077cc:	3008      	adds	r0, #8
 80077ce:	f7ff fc78 	bl	80070c2 <ld_dword>
 80077d2:	e7ea      	b.n	80077aa <find_volume+0x1ba>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077d4:	2600      	movs	r6, #0
 80077d6:	e7ee      	b.n	80077b6 <find_volume+0x1c6>
 80077d8:	2600      	movs	r6, #0
 80077da:	e00a      	b.n	80077f2 <find_volume+0x202>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80077dc:	4639      	mov	r1, r7
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff feca 	bl	8007578 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80077e4:	2801      	cmp	r0, #1
 80077e6:	f67f af40 	bls.w	800766a <find_volume+0x7a>
 80077ea:	3601      	adds	r6, #1
 80077ec:	2e03      	cmp	r6, #3
 80077ee:	f63f af3c 	bhi.w	800766a <find_volume+0x7a>
			bsect = br[i];
 80077f2:	ab04      	add	r3, sp, #16
 80077f4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80077f8:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80077fc:	2f00      	cmp	r7, #0
 80077fe:	d1ed      	bne.n	80077dc <find_volume+0x1ec>
 8007800:	2003      	movs	r0, #3
 8007802:	e7f2      	b.n	80077ea <find_volume+0x1fa>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007804:	f04f 0b02 	mov.w	fp, #2
 8007808:	e792      	b.n	8007730 <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800780a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 800780e:	f7ff fc53 	bl	80070b8 <ld_word>
 8007812:	2800      	cmp	r0, #0
 8007814:	d15b      	bne.n	80078ce <find_volume+0x2de>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007816:	f1ba 0f00 	cmp.w	sl, #0
 800781a:	d15a      	bne.n	80078d2 <find_volume+0x2e2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800781c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007820:	f7ff fc4f 	bl	80070c2 <ld_dword>
 8007824:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007826:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800782a:	e7a2      	b.n	8007772 <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800782c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007830:	e79f      	b.n	8007772 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007832:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8007836:	f7ff fc3f 	bl	80070b8 <ld_word>
 800783a:	2801      	cmp	r0, #1
 800783c:	d1a8      	bne.n	8007790 <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800783e:	1c79      	adds	r1, r7, #1
 8007840:	4620      	mov	r0, r4
 8007842:	f7ff fe7e 	bl	8007542 <move_window>
 8007846:	2800      	cmp	r0, #0
 8007848:	d1a2      	bne.n	8007790 <find_volume+0x1a0>
			fs->fsi_flag = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800784e:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8007852:	f7ff fc31 	bl	80070b8 <ld_word>
 8007856:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800785a:	4298      	cmp	r0, r3
 800785c:	d198      	bne.n	8007790 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800785e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007862:	f7ff fc2e 	bl	80070c2 <ld_dword>
 8007866:	4b20      	ldr	r3, [pc, #128]	; (80078e8 <find_volume+0x2f8>)
 8007868:	4298      	cmp	r0, r3
 800786a:	d191      	bne.n	8007790 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800786c:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8007870:	f7ff fc27 	bl	80070c2 <ld_dword>
 8007874:	4b1d      	ldr	r3, [pc, #116]	; (80078ec <find_volume+0x2fc>)
 8007876:	4298      	cmp	r0, r3
 8007878:	d18a      	bne.n	8007790 <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800787a:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800787e:	f7ff fc20 	bl	80070c2 <ld_dword>
 8007882:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007884:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007888:	f7ff fc1b 	bl	80070c2 <ld_dword>
 800788c:	60e0      	str	r0, [r4, #12]
 800788e:	e77f      	b.n	8007790 <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007890:	250b      	movs	r5, #11
}
 8007892:	4628      	mov	r0, r5
 8007894:	b005      	add	sp, #20
 8007896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800789a:	250c      	movs	r5, #12
 800789c:	e7f9      	b.n	8007892 <find_volume+0x2a2>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800789e:	2503      	movs	r5, #3
 80078a0:	e7f7      	b.n	8007892 <find_volume+0x2a2>
		return FR_WRITE_PROTECTED;
 80078a2:	250a      	movs	r5, #10
 80078a4:	e7f5      	b.n	8007892 <find_volume+0x2a2>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80078a6:	2501      	movs	r5, #1
 80078a8:	e7f3      	b.n	8007892 <find_volume+0x2a2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80078aa:	250d      	movs	r5, #13
 80078ac:	e7f1      	b.n	8007892 <find_volume+0x2a2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80078ae:	250d      	movs	r5, #13
 80078b0:	e7ef      	b.n	8007892 <find_volume+0x2a2>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80078b2:	250d      	movs	r5, #13
 80078b4:	e7ed      	b.n	8007892 <find_volume+0x2a2>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80078b6:	250d      	movs	r5, #13
 80078b8:	e7eb      	b.n	8007892 <find_volume+0x2a2>
 80078ba:	250d      	movs	r5, #13
 80078bc:	e7e9      	b.n	8007892 <find_volume+0x2a2>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80078be:	250d      	movs	r5, #13
 80078c0:	e7e7      	b.n	8007892 <find_volume+0x2a2>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80078c2:	250d      	movs	r5, #13
 80078c4:	e7e5      	b.n	8007892 <find_volume+0x2a2>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80078c6:	250d      	movs	r5, #13
 80078c8:	e7e3      	b.n	8007892 <find_volume+0x2a2>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80078ca:	250d      	movs	r5, #13
 80078cc:	e7e1      	b.n	8007892 <find_volume+0x2a2>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80078ce:	250d      	movs	r5, #13
 80078d0:	e7df      	b.n	8007892 <find_volume+0x2a2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80078d2:	250d      	movs	r5, #13
 80078d4:	e7dd      	b.n	8007892 <find_volume+0x2a2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80078d6:	250d      	movs	r5, #13
 80078d8:	e7db      	b.n	8007892 <find_volume+0x2a2>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80078da:	250d      	movs	r5, #13
 80078dc:	e7d9      	b.n	8007892 <find_volume+0x2a2>
 80078de:	bf00      	nop
 80078e0:	2000023c 	.word	0x2000023c
 80078e4:	20000260 	.word	0x20000260
 80078e8:	41615252 	.word	0x41615252
 80078ec:	61417272 	.word	0x61417272

080078f0 <put_fat>:
{
 80078f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80078f4:	2901      	cmp	r1, #1
 80078f6:	d97e      	bls.n	80079f6 <put_fat+0x106>
 80078f8:	4607      	mov	r7, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	4616      	mov	r6, r2
 80078fe:	6943      	ldr	r3, [r0, #20]
 8007900:	428b      	cmp	r3, r1
 8007902:	d97a      	bls.n	80079fa <put_fat+0x10a>
		switch (fs->fs_type) {
 8007904:	7803      	ldrb	r3, [r0, #0]
 8007906:	2b02      	cmp	r3, #2
 8007908:	d045      	beq.n	8007996 <put_fat+0xa6>
 800790a:	2b03      	cmp	r3, #3
 800790c:	d057      	beq.n	80079be <put_fat+0xce>
 800790e:	2b01      	cmp	r3, #1
 8007910:	d003      	beq.n	800791a <put_fat+0x2a>
 8007912:	2502      	movs	r5, #2
}
 8007914:	4628      	mov	r0, r5
 8007916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 800791a:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800791e:	6a01      	ldr	r1, [r0, #32]
 8007920:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8007924:	f7ff fe0d 	bl	8007542 <move_window>
			if (res != FR_OK) break;
 8007928:	4605      	mov	r5, r0
 800792a:	2800      	cmp	r0, #0
 800792c:	d1f2      	bne.n	8007914 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 800792e:	f107 0a30 	add.w	sl, r7, #48	; 0x30
 8007932:	f108 0901 	add.w	r9, r8, #1
 8007936:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800793a:	f014 0401 	ands.w	r4, r4, #1
 800793e:	d01f      	beq.n	8007980 <put_fat+0x90>
 8007940:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	0132      	lsls	r2, r6, #4
 800794a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800794e:	4313      	orrs	r3, r2
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8007956:	2301      	movs	r3, #1
 8007958:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800795a:	6a39      	ldr	r1, [r7, #32]
 800795c:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8007960:	4638      	mov	r0, r7
 8007962:	f7ff fdee 	bl	8007542 <move_window>
			if (res != FR_OK) break;
 8007966:	4605      	mov	r5, r0
 8007968:	2800      	cmp	r0, #0
 800796a:	d1d3      	bne.n	8007914 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 800796c:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007970:	b144      	cbz	r4, 8007984 <put_fat+0x94>
 8007972:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8007976:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 800797a:	2301      	movs	r3, #1
 800797c:	70fb      	strb	r3, [r7, #3]
			break;
 800797e:	e7c9      	b.n	8007914 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007980:	b2f3      	uxtb	r3, r6
 8007982:	e7e6      	b.n	8007952 <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007984:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8007988:	f022 020f 	bic.w	r2, r2, #15
 800798c:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8007990:	4332      	orrs	r2, r6
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	e7ef      	b.n	8007976 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007996:	6a01      	ldr	r1, [r0, #32]
 8007998:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800799c:	f7ff fdd1 	bl	8007542 <move_window>
			if (res != FR_OK) break;
 80079a0:	4605      	mov	r5, r0
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d1b6      	bne.n	8007914 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80079a6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80079aa:	0064      	lsls	r4, r4, #1
 80079ac:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80079b0:	b2b1      	uxth	r1, r6
 80079b2:	4420      	add	r0, r4
 80079b4:	f7ff fb90 	bl	80070d8 <st_word>
			fs->wflag = 1;
 80079b8:	2301      	movs	r3, #1
 80079ba:	70fb      	strb	r3, [r7, #3]
			break;
 80079bc:	e7aa      	b.n	8007914 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80079be:	6a01      	ldr	r1, [r0, #32]
 80079c0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80079c4:	f7ff fdbd 	bl	8007542 <move_window>
			if (res != FR_OK) break;
 80079c8:	4605      	mov	r5, r0
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d1a2      	bne.n	8007914 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80079ce:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 80079d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079d6:	00a4      	lsls	r4, r4, #2
 80079d8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80079dc:	441c      	add	r4, r3
 80079de:	4620      	mov	r0, r4
 80079e0:	f7ff fb6f 	bl	80070c2 <ld_dword>
 80079e4:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80079e8:	4331      	orrs	r1, r6
 80079ea:	4620      	mov	r0, r4
 80079ec:	f7ff fb78 	bl	80070e0 <st_dword>
			fs->wflag = 1;
 80079f0:	2301      	movs	r3, #1
 80079f2:	70fb      	strb	r3, [r7, #3]
			break;
 80079f4:	e78e      	b.n	8007914 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 80079f6:	2502      	movs	r5, #2
 80079f8:	e78c      	b.n	8007914 <put_fat+0x24>
 80079fa:	2502      	movs	r5, #2
 80079fc:	e78a      	b.n	8007914 <put_fat+0x24>

080079fe <get_fat>:
{
 80079fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8007a00:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007a02:	2901      	cmp	r1, #1
 8007a04:	d956      	bls.n	8007ab4 <get_fat+0xb6>
 8007a06:	460c      	mov	r4, r1
 8007a08:	696b      	ldr	r3, [r5, #20]
 8007a0a:	428b      	cmp	r3, r1
 8007a0c:	d954      	bls.n	8007ab8 <get_fat+0xba>
		switch (fs->fs_type) {
 8007a0e:	782b      	ldrb	r3, [r5, #0]
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d02d      	beq.n	8007a70 <get_fat+0x72>
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d03b      	beq.n	8007a90 <get_fat+0x92>
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d001      	beq.n	8007a20 <get_fat+0x22>
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	e04a      	b.n	8007ab6 <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 8007a20:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a24:	6a29      	ldr	r1, [r5, #32]
 8007a26:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f7ff fd89 	bl	8007542 <move_window>
 8007a30:	b110      	cbz	r0, 8007a38 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007a32:	f04f 30ff 	mov.w	r0, #4294967295
 8007a36:	e03e      	b.n	8007ab6 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 8007a38:	1c77      	adds	r7, r6, #1
 8007a3a:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8007a3e:	442e      	add	r6, r5
 8007a40:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007a44:	6a29      	ldr	r1, [r5, #32]
 8007a46:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f7ff fd79 	bl	8007542 <move_window>
 8007a50:	bba0      	cbnz	r0, 8007abc <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007a52:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8007a56:	443d      	add	r5, r7
 8007a58:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8007a5c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007a60:	f014 0f01 	tst.w	r4, #1
 8007a64:	d001      	beq.n	8007a6a <get_fat+0x6c>
 8007a66:	0900      	lsrs	r0, r0, #4
 8007a68:	e025      	b.n	8007ab6 <get_fat+0xb8>
 8007a6a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007a6e:	e022      	b.n	8007ab6 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007a70:	6a29      	ldr	r1, [r5, #32]
 8007a72:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007a76:	4628      	mov	r0, r5
 8007a78:	f7ff fd63 	bl	8007542 <move_window>
 8007a7c:	bb08      	cbnz	r0, 8007ac2 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007a7e:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8007a82:	0064      	lsls	r4, r4, #1
 8007a84:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8007a88:	4420      	add	r0, r4
 8007a8a:	f7ff fb15 	bl	80070b8 <ld_word>
			break;
 8007a8e:	e012      	b.n	8007ab6 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007a90:	6a29      	ldr	r1, [r5, #32]
 8007a92:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007a96:	4628      	mov	r0, r5
 8007a98:	f7ff fd53 	bl	8007542 <move_window>
 8007a9c:	b9a0      	cbnz	r0, 8007ac8 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007a9e:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8007aa2:	00a4      	lsls	r4, r4, #2
 8007aa4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8007aa8:	4420      	add	r0, r4
 8007aaa:	f7ff fb0a 	bl	80070c2 <ld_dword>
 8007aae:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8007ab2:	e000      	b.n	8007ab6 <get_fat+0xb8>
		val = 1;	/* Internal error */
 8007ab4:	2001      	movs	r0, #1
}
 8007ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8007ab8:	2001      	movs	r0, #1
 8007aba:	e7fc      	b.n	8007ab6 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	e7f9      	b.n	8007ab6 <get_fat+0xb8>
 8007ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac6:	e7f6      	b.n	8007ab6 <get_fat+0xb8>
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8007acc:	e7f3      	b.n	8007ab6 <get_fat+0xb8>

08007ace <dir_sdi>:
{
 8007ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8007ad2:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007ad6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007ada:	d242      	bcs.n	8007b62 <dir_sdi+0x94>
 8007adc:	4606      	mov	r6, r0
 8007ade:	460f      	mov	r7, r1
 8007ae0:	f011 0f1f 	tst.w	r1, #31
 8007ae4:	d13f      	bne.n	8007b66 <dir_sdi+0x98>
	dp->dptr = ofs;				/* Set current offset */
 8007ae6:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007ae8:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007aea:	b92c      	cbnz	r4, 8007af8 <dir_sdi+0x2a>
 8007aec:	f898 3000 	ldrb.w	r3, [r8]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <dir_sdi+0x2a>
		clst = fs->dirbase;
 8007af4:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007af8:	b9b4      	cbnz	r4, 8007b28 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007afa:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007afe:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8007b02:	d932      	bls.n	8007b6a <dir_sdi+0x9c>
		dp->sect = fs->dirbase;
 8007b04:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8007b08:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8007b0a:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007b0c:	69f3      	ldr	r3, [r6, #28]
 8007b0e:	b393      	cbz	r3, 8007b76 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b10:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 8007b14:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b16:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8007b1a:	f3c7 0108 	ubfx	r1, r7, #0, #9
 8007b1e:	4419      	add	r1, r3
 8007b20:	6231      	str	r1, [r6, #32]
	return FR_OK;
 8007b22:	2000      	movs	r0, #0
}
 8007b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007b28:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8007b2c:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b2e:	e000      	b.n	8007b32 <dir_sdi+0x64>
			ofs -= csz;
 8007b30:	1b7f      	subs	r7, r7, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 8007b32:	42af      	cmp	r7, r5
 8007b34:	d30f      	bcc.n	8007b56 <dir_sdi+0x88>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007b36:	4621      	mov	r1, r4
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f7ff ff60 	bl	80079fe <get_fat>
 8007b3e:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b44:	d013      	beq.n	8007b6e <dir_sdi+0xa0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b46:	2801      	cmp	r0, #1
 8007b48:	d913      	bls.n	8007b72 <dir_sdi+0xa4>
 8007b4a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007b4e:	4283      	cmp	r3, r0
 8007b50:	d8ee      	bhi.n	8007b30 <dir_sdi+0x62>
 8007b52:	2002      	movs	r0, #2
 8007b54:	e7e6      	b.n	8007b24 <dir_sdi+0x56>
		dp->sect = clust2sect(fs, clst);
 8007b56:	4621      	mov	r1, r4
 8007b58:	4640      	mov	r0, r8
 8007b5a:	f7ff fbcd 	bl	80072f8 <clust2sect>
 8007b5e:	61f0      	str	r0, [r6, #28]
 8007b60:	e7d3      	b.n	8007b0a <dir_sdi+0x3c>
		return FR_INT_ERR;
 8007b62:	2002      	movs	r0, #2
 8007b64:	e7de      	b.n	8007b24 <dir_sdi+0x56>
 8007b66:	2002      	movs	r0, #2
 8007b68:	e7dc      	b.n	8007b24 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007b6a:	2002      	movs	r0, #2
 8007b6c:	e7da      	b.n	8007b24 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b6e:	2001      	movs	r0, #1
 8007b70:	e7d8      	b.n	8007b24 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007b72:	2002      	movs	r0, #2
 8007b74:	e7d6      	b.n	8007b24 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 8007b76:	2002      	movs	r0, #2
 8007b78:	e7d4      	b.n	8007b24 <dir_sdi+0x56>

08007b7a <create_chain>:
{
 8007b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7e:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8007b80:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8007b82:	460f      	mov	r7, r1
 8007b84:	b951      	cbnz	r1, 8007b9c <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007b86:	f8d6 800c 	ldr.w	r8, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007b8a:	f1b8 0f00 	cmp.w	r8, #0
 8007b8e:	d012      	beq.n	8007bb6 <create_chain+0x3c>
 8007b90:	6973      	ldr	r3, [r6, #20]
 8007b92:	4543      	cmp	r3, r8
 8007b94:	d811      	bhi.n	8007bba <create_chain+0x40>
 8007b96:	f04f 0801 	mov.w	r8, #1
 8007b9a:	e00e      	b.n	8007bba <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007b9c:	f7ff ff2f 	bl	80079fe <get_fat>
 8007ba0:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007ba2:	2801      	cmp	r0, #1
 8007ba4:	d947      	bls.n	8007c36 <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007ba6:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007baa:	d049      	beq.n	8007c40 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007bac:	6972      	ldr	r2, [r6, #20]
 8007bae:	4282      	cmp	r2, r0
 8007bb0:	d846      	bhi.n	8007c40 <create_chain+0xc6>
		scl = clst;
 8007bb2:	46b8      	mov	r8, r7
 8007bb4:	e001      	b.n	8007bba <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007bb6:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8007bba:	4644      	mov	r4, r8
 8007bbc:	e00c      	b.n	8007bd8 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f7ff ff1c 	bl	80079fe <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	b178      	cbz	r0, 8007bea <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007bca:	2801      	cmp	r0, #1
 8007bcc:	d038      	beq.n	8007c40 <create_chain+0xc6>
 8007bce:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007bd2:	d035      	beq.n	8007c40 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8007bd4:	4544      	cmp	r4, r8
 8007bd6:	d032      	beq.n	8007c3e <create_chain+0xc4>
			ncl++;							/* Next cluster */
 8007bd8:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007bda:	6973      	ldr	r3, [r6, #20]
 8007bdc:	42a3      	cmp	r3, r4
 8007bde:	d8ee      	bhi.n	8007bbe <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8007be0:	f1b8 0f01 	cmp.w	r8, #1
 8007be4:	d929      	bls.n	8007c3a <create_chain+0xc0>
				ncl = 2;
 8007be6:	2402      	movs	r4, #2
 8007be8:	e7e9      	b.n	8007bbe <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007bea:	f04f 32ff 	mov.w	r2, #4294967295
 8007bee:	4621      	mov	r1, r4
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	f7ff fe7d 	bl	80078f0 <put_fat>
		if (res == FR_OK && clst != 0) {
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	b900      	cbnz	r0, 8007bfc <create_chain+0x82>
 8007bfa:	b977      	cbnz	r7, 8007c1a <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007bfc:	b9a3      	cbnz	r3, 8007c28 <create_chain+0xae>
		fs->last_clst = ncl;
 8007bfe:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007c00:	6932      	ldr	r2, [r6, #16]
 8007c02:	6973      	ldr	r3, [r6, #20]
 8007c04:	3b02      	subs	r3, #2
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d801      	bhi.n	8007c0e <create_chain+0x94>
 8007c0a:	3a01      	subs	r2, #1
 8007c0c:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 8007c0e:	7933      	ldrb	r3, [r6, #4]
 8007c10:	f043 0301 	orr.w	r3, r3, #1
 8007c14:	7133      	strb	r3, [r6, #4]
 8007c16:	4623      	mov	r3, r4
 8007c18:	e012      	b.n	8007c40 <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007c1a:	4622      	mov	r2, r4
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7ff fe66 	bl	80078f0 <put_fat>
 8007c24:	4603      	mov	r3, r0
 8007c26:	e7e9      	b.n	8007bfc <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d001      	beq.n	8007c30 <create_chain+0xb6>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e007      	b.n	8007c40 <create_chain+0xc6>
 8007c30:	f04f 33ff 	mov.w	r3, #4294967295
 8007c34:	e004      	b.n	8007c40 <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007c36:	2301      	movs	r3, #1
 8007c38:	e002      	b.n	8007c40 <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e000      	b.n	8007c40 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c46 <remove_chain>:
{
 8007c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c48:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8007c4a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007c4c:	2901      	cmp	r1, #1
 8007c4e:	d92e      	bls.n	8007cae <remove_chain+0x68>
 8007c50:	4606      	mov	r6, r0
 8007c52:	4611      	mov	r1, r2
 8007c54:	696b      	ldr	r3, [r5, #20]
 8007c56:	42a3      	cmp	r3, r4
 8007c58:	d92b      	bls.n	8007cb2 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007c5a:	b14a      	cbz	r2, 8007c70 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c60:	4628      	mov	r0, r5
 8007c62:	f7ff fe45 	bl	80078f0 <put_fat>
		if (res != FR_OK) return res;
 8007c66:	4607      	mov	r7, r0
 8007c68:	b110      	cbz	r0, 8007c70 <remove_chain+0x2a>
 8007c6a:	e023      	b.n	8007cb4 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007c6c:	42a2      	cmp	r2, r4
 8007c6e:	d921      	bls.n	8007cb4 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007c70:	4627      	mov	r7, r4
 8007c72:	4621      	mov	r1, r4
 8007c74:	4630      	mov	r0, r6
 8007c76:	f7ff fec2 	bl	80079fe <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	b1e0      	cbz	r0, 8007cb8 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007c7e:	2801      	cmp	r0, #1
 8007c80:	d01c      	beq.n	8007cbc <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007c82:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c86:	d01b      	beq.n	8007cc0 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f7ff fe2f 	bl	80078f0 <put_fat>
			if (res != FR_OK) return res;
 8007c92:	4607      	mov	r7, r0
 8007c94:	b970      	cbnz	r0, 8007cb4 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007c96:	692b      	ldr	r3, [r5, #16]
 8007c98:	696a      	ldr	r2, [r5, #20]
 8007c9a:	1e91      	subs	r1, r2, #2
 8007c9c:	428b      	cmp	r3, r1
 8007c9e:	d2e5      	bcs.n	8007c6c <remove_chain+0x26>
			fs->free_clst++;
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8007ca4:	792b      	ldrb	r3, [r5, #4]
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	712b      	strb	r3, [r5, #4]
 8007cac:	e7de      	b.n	8007c6c <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007cae:	2702      	movs	r7, #2
 8007cb0:	e000      	b.n	8007cb4 <remove_chain+0x6e>
 8007cb2:	2702      	movs	r7, #2
}
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8007cb8:	2700      	movs	r7, #0
 8007cba:	e7fb      	b.n	8007cb4 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007cbc:	2702      	movs	r7, #2
 8007cbe:	e7f9      	b.n	8007cb4 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007cc0:	2701      	movs	r7, #1
 8007cc2:	e7f7      	b.n	8007cb4 <remove_chain+0x6e>

08007cc4 <dir_next>:
{
 8007cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 8007cc8:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007cca:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007ccc:	69c3      	ldr	r3, [r0, #28]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d06c      	beq.n	8007dac <dir_next+0xe8>
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	4688      	mov	r8, r1
 8007cd6:	3520      	adds	r5, #32
 8007cd8:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8007cdc:	d268      	bcs.n	8007db0 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007cde:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8007ce2:	b93f      	cbnz	r7, 8007cf4 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8007ce8:	6981      	ldr	r1, [r0, #24]
 8007cea:	b979      	cbnz	r1, 8007d0c <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007cec:	8933      	ldrh	r3, [r6, #8]
 8007cee:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8007cf2:	d907      	bls.n	8007d04 <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 8007cf4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007cf6:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8007cfa:	443b      	add	r3, r7
 8007cfc:	6223      	str	r3, [r4, #32]
	return FR_OK;
 8007cfe:	2000      	movs	r0, #0
}
 8007d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	61c3      	str	r3, [r0, #28]
 8007d08:	2004      	movs	r0, #4
 8007d0a:	e7f9      	b.n	8007d00 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007d0c:	8973      	ldrh	r3, [r6, #10]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8007d14:	d1ee      	bne.n	8007cf4 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007d16:	f7ff fe72 	bl	80079fe <get_fat>
 8007d1a:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007d1c:	2801      	cmp	r0, #1
 8007d1e:	d949      	bls.n	8007db4 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007d20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d24:	d048      	beq.n	8007db8 <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007d26:	6973      	ldr	r3, [r6, #20]
 8007d28:	4283      	cmp	r3, r0
 8007d2a:	d837      	bhi.n	8007d9c <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8007d2c:	f1b8 0f00 	cmp.w	r8, #0
 8007d30:	d011      	beq.n	8007d56 <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007d32:	69a1      	ldr	r1, [r4, #24]
 8007d34:	4620      	mov	r0, r4
 8007d36:	f7ff ff20 	bl	8007b7a <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d3a:	4682      	mov	sl, r0
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d03d      	beq.n	8007dbc <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007d40:	2801      	cmp	r0, #1
 8007d42:	d03d      	beq.n	8007dc0 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d48:	d03c      	beq.n	8007dc4 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f7ff fbd0 	bl	80074f0 <sync_window>
 8007d50:	b128      	cbz	r0, 8007d5e <dir_next+0x9a>
 8007d52:	2001      	movs	r0, #1
 8007d54:	e7d4      	b.n	8007d00 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	61e3      	str	r3, [r4, #28]
 8007d5a:	2004      	movs	r0, #4
 8007d5c:	e7d0      	b.n	8007d00 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d62:	2100      	movs	r1, #0
 8007d64:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8007d68:	f7ff f9d0 	bl	800710c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d6c:	4651      	mov	r1, sl
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f7ff fac2 	bl	80072f8 <clust2sect>
 8007d74:	62f0      	str	r0, [r6, #44]	; 0x2c
 8007d76:	8973      	ldrh	r3, [r6, #10]
 8007d78:	4599      	cmp	r9, r3
 8007d7a:	d20b      	bcs.n	8007d94 <dir_next+0xd0>
						fs->wflag = 1;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007d80:	4630      	mov	r0, r6
 8007d82:	f7ff fbb5 	bl	80074f0 <sync_window>
 8007d86:	b9f8      	cbnz	r0, 8007dc8 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d88:	f109 0901 	add.w	r9, r9, #1
 8007d8c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007d8e:	3301      	adds	r3, #1
 8007d90:	62f3      	str	r3, [r6, #44]	; 0x2c
 8007d92:	e7f0      	b.n	8007d76 <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 8007d94:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007d96:	eba3 0309 	sub.w	r3, r3, r9
 8007d9a:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8007d9c:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8007da0:	4651      	mov	r1, sl
 8007da2:	4630      	mov	r0, r6
 8007da4:	f7ff faa8 	bl	80072f8 <clust2sect>
 8007da8:	61e0      	str	r0, [r4, #28]
 8007daa:	e7a3      	b.n	8007cf4 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007dac:	2004      	movs	r0, #4
 8007dae:	e7a7      	b.n	8007d00 <dir_next+0x3c>
 8007db0:	2004      	movs	r0, #4
 8007db2:	e7a5      	b.n	8007d00 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007db4:	2002      	movs	r0, #2
 8007db6:	e7a3      	b.n	8007d00 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007db8:	2001      	movs	r0, #1
 8007dba:	e7a1      	b.n	8007d00 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007dbc:	2007      	movs	r0, #7
 8007dbe:	e79f      	b.n	8007d00 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007dc0:	2002      	movs	r0, #2
 8007dc2:	e79d      	b.n	8007d00 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	e79b      	b.n	8007d00 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007dc8:	2001      	movs	r0, #1
 8007dca:	e799      	b.n	8007d00 <dir_next+0x3c>

08007dcc <dir_find>:
{
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8007dd0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	f7ff fe7b 	bl	8007ace <dir_sdi>
	if (res != FR_OK) return res;
 8007dd8:	4605      	mov	r5, r0
 8007dda:	b140      	cbz	r0, 8007dee <dir_find+0x22>
}
 8007ddc:	4628      	mov	r0, r5
 8007dde:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 8007de0:	2100      	movs	r1, #0
 8007de2:	4620      	mov	r0, r4
 8007de4:	f7ff ff6e 	bl	8007cc4 <dir_next>
	} while (res == FR_OK);
 8007de8:	4605      	mov	r5, r0
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d1f6      	bne.n	8007ddc <dir_find+0x10>
		res = move_window(fs, dp->sect);
 8007dee:	69e1      	ldr	r1, [r4, #28]
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7ff fba6 	bl	8007542 <move_window>
		if (res != FR_OK) break;
 8007df6:	4605      	mov	r5, r0
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d1ef      	bne.n	8007ddc <dir_find+0x10>
		c = dp->dir[DIR_Name];
 8007dfc:	6a20      	ldr	r0, [r4, #32]
 8007dfe:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007e00:	b17b      	cbz	r3, 8007e22 <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007e02:	7ac3      	ldrb	r3, [r0, #11]
 8007e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e08:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e0a:	7ac3      	ldrb	r3, [r0, #11]
 8007e0c:	f013 0f08 	tst.w	r3, #8
 8007e10:	d1e6      	bne.n	8007de0 <dir_find+0x14>
 8007e12:	220b      	movs	r2, #11
 8007e14:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8007e18:	f7ff f97d 	bl	8007116 <mem_cmp>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d1df      	bne.n	8007de0 <dir_find+0x14>
 8007e20:	e7dc      	b.n	8007ddc <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007e22:	2504      	movs	r5, #4
 8007e24:	e7da      	b.n	8007ddc <dir_find+0x10>

08007e26 <follow_path>:
{
 8007e26:	b530      	push	{r4, r5, lr}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8007e2e:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007e30:	e001      	b.n	8007e36 <follow_path+0x10>
 8007e32:	3301      	adds	r3, #1
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	9b01      	ldr	r3, [sp, #4]
 8007e38:	781a      	ldrb	r2, [r3, #0]
 8007e3a:	2a2f      	cmp	r2, #47	; 0x2f
 8007e3c:	d0f9      	beq.n	8007e32 <follow_path+0xc>
 8007e3e:	2a5c      	cmp	r2, #92	; 0x5c
 8007e40:	d0f7      	beq.n	8007e32 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8007e42:	2200      	movs	r2, #0
 8007e44:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b1f      	cmp	r3, #31
 8007e4a:	d81b      	bhi.n	8007e84 <follow_path+0x5e>
		dp->fn[NSFLAG] = NS_NONAME;
 8007e4c:	2380      	movs	r3, #128	; 0x80
 8007e4e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007e52:	4611      	mov	r1, r2
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7ff fe3a 	bl	8007ace <dir_sdi>
 8007e5a:	4603      	mov	r3, r0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	b003      	add	sp, #12
 8007e60:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007e62:	2804      	cmp	r0, #4
 8007e64:	d1fa      	bne.n	8007e5c <follow_path+0x36>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007e66:	f012 0f04 	tst.w	r2, #4
 8007e6a:	d1f7      	bne.n	8007e5c <follow_path+0x36>
 8007e6c:	2305      	movs	r3, #5
 8007e6e:	e7f5      	b.n	8007e5c <follow_path+0x36>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007e70:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8007e74:	6963      	ldr	r3, [r4, #20]
 8007e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7a:	4419      	add	r1, r3
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f7ff fa58 	bl	8007332 <ld_clust>
 8007e82:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e84:	a901      	add	r1, sp, #4
 8007e86:	4620      	mov	r0, r4
 8007e88:	f7ff fa7a 	bl	8007380 <create_name>
			if (res != FR_OK) break;
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d1e4      	bne.n	8007e5c <follow_path+0x36>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007e92:	4620      	mov	r0, r4
 8007e94:	f7ff ff9a 	bl	8007dcc <dir_find>
			ns = dp->fn[NSFLAG];
 8007e98:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d1df      	bne.n	8007e62 <follow_path+0x3c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007ea2:	f012 0f04 	tst.w	r2, #4
 8007ea6:	d1d9      	bne.n	8007e5c <follow_path+0x36>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007ea8:	79a3      	ldrb	r3, [r4, #6]
 8007eaa:	f013 0f10 	tst.w	r3, #16
 8007eae:	d1df      	bne.n	8007e70 <follow_path+0x4a>
				res = FR_NO_PATH; break;
 8007eb0:	2305      	movs	r3, #5
 8007eb2:	e7d3      	b.n	8007e5c <follow_path+0x36>

08007eb4 <dir_alloc>:
{
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 8007eba:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	f7ff fe06 	bl	8007ace <dir_sdi>
	if (res == FR_OK) {
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	b9c0      	cbnz	r0, 8007ef8 <dir_alloc+0x44>
		n = 0;
 8007ec6:	2500      	movs	r5, #0
 8007ec8:	e008      	b.n	8007edc <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007eca:	3501      	adds	r5, #1
 8007ecc:	42b5      	cmp	r5, r6
 8007ece:	d013      	beq.n	8007ef8 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff fef6 	bl	8007cc4 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007ed8:	4602      	mov	r2, r0
 8007eda:	b968      	cbnz	r0, 8007ef8 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 8007edc:	69e1      	ldr	r1, [r4, #28]
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f7ff fb2f 	bl	8007542 <move_window>
			if (res != FR_OK) break;
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	b938      	cbnz	r0, 8007ef8 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007ee8:	6a23      	ldr	r3, [r4, #32]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2be5      	cmp	r3, #229	; 0xe5
 8007eee:	d0ec      	beq.n	8007eca <dir_alloc+0x16>
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0ea      	beq.n	8007eca <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 8007ef4:	2500      	movs	r5, #0
 8007ef6:	e7eb      	b.n	8007ed0 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007ef8:	2a04      	cmp	r2, #4
 8007efa:	d001      	beq.n	8007f00 <dir_alloc+0x4c>
}
 8007efc:	4610      	mov	r0, r2
 8007efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007f00:	2207      	movs	r2, #7
 8007f02:	e7fb      	b.n	8007efc <dir_alloc+0x48>

08007f04 <dir_register>:
{
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8007f08:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	f7ff ffd2 	bl	8007eb4 <dir_alloc>
	if (res == FR_OK) {
 8007f10:	4605      	mov	r5, r0
 8007f12:	b108      	cbz	r0, 8007f18 <dir_register+0x14>
}
 8007f14:	4628      	mov	r0, r5
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 8007f18:	69e1      	ldr	r1, [r4, #28]
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7ff fb11 	bl	8007542 <move_window>
		if (res == FR_OK) {
 8007f20:	4605      	mov	r5, r0
 8007f22:	2800      	cmp	r0, #0
 8007f24:	d1f6      	bne.n	8007f14 <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007f26:	2220      	movs	r2, #32
 8007f28:	2100      	movs	r1, #0
 8007f2a:	6a20      	ldr	r0, [r4, #32]
 8007f2c:	f7ff f8ee 	bl	800710c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007f30:	220b      	movs	r2, #11
 8007f32:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8007f36:	6a20      	ldr	r0, [r4, #32]
 8007f38:	f7ff f8dc 	bl	80070f4 <mem_cpy>
			fs->wflag = 1;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	70f3      	strb	r3, [r6, #3]
 8007f40:	e7e8      	b.n	8007f14 <dir_register+0x10>
	...

08007f44 <sync_fs>:
{
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	4604      	mov	r4, r0
	res = sync_window(fs);
 8007f48:	f7ff fad2 	bl	80074f0 <sync_window>
	if (res == FR_OK) {
 8007f4c:	4605      	mov	r5, r0
 8007f4e:	b948      	cbnz	r0, 8007f64 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007f50:	7823      	ldrb	r3, [r4, #0]
 8007f52:	2b03      	cmp	r3, #3
 8007f54:	d008      	beq.n	8007f68 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007f56:	2200      	movs	r2, #0
 8007f58:	4611      	mov	r1, r2
 8007f5a:	7860      	ldrb	r0, [r4, #1]
 8007f5c:	f7ff f8a0 	bl	80070a0 <disk_ioctl>
 8007f60:	b100      	cbz	r0, 8007f64 <sync_fs+0x20>
 8007f62:	2501      	movs	r5, #1
}
 8007f64:	4628      	mov	r0, r5
 8007f66:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007f68:	7923      	ldrb	r3, [r4, #4]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d1f3      	bne.n	8007f56 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8007f6e:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f76:	2100      	movs	r1, #0
 8007f78:	4630      	mov	r0, r6
 8007f7a:	f7ff f8c7 	bl	800710c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007f7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007f82:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8007f86:	f7ff f8a7 	bl	80070d8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007f8a:	490f      	ldr	r1, [pc, #60]	; (8007fc8 <sync_fs+0x84>)
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7ff f8a7 	bl	80070e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007f92:	490e      	ldr	r1, [pc, #56]	; (8007fcc <sync_fs+0x88>)
 8007f94:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8007f98:	f7ff f8a2 	bl	80070e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007f9c:	6921      	ldr	r1, [r4, #16]
 8007f9e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8007fa2:	f7ff f89d 	bl	80070e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007fa6:	68e1      	ldr	r1, [r4, #12]
 8007fa8:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007fac:	f7ff f898 	bl	80070e0 <st_dword>
			fs->winsect = fs->volbase + 1;
 8007fb0:	69e2      	ldr	r2, [r4, #28]
 8007fb2:	3201      	adds	r2, #1
 8007fb4:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4631      	mov	r1, r6
 8007fba:	7860      	ldrb	r0, [r4, #1]
 8007fbc:	f7ff f864 	bl	8007088 <disk_write>
			fs->fsi_flag = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	7123      	strb	r3, [r4, #4]
 8007fc4:	e7c7      	b.n	8007f56 <sync_fs+0x12>
 8007fc6:	bf00      	nop
 8007fc8:	41615252 	.word	0x41615252
 8007fcc:	61417272 	.word	0x61417272

08007fd0 <f_mount>:
{
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	9001      	str	r0, [sp, #4]
 8007fd6:	9100      	str	r1, [sp, #0]
 8007fd8:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 8007fda:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8007fdc:	a803      	add	r0, sp, #12
 8007fde:	f7ff fa35 	bl	800744c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fe2:	1e04      	subs	r4, r0, #0
 8007fe4:	db1c      	blt.n	8008020 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fe6:	4b10      	ldr	r3, [pc, #64]	; (8008028 <f_mount+0x58>)
 8007fe8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (cfs) {
 8007fec:	b125      	cbz	r5, 8007ff8 <f_mount+0x28>
		clear_lock(cfs);
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f7ff f964 	bl	80072bc <clear_lock>
		cfs->fs_type = 0;				/* Clear old fs object */
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	702b      	strb	r3, [r5, #0]
	if (fs) {
 8007ff8:	9b01      	ldr	r3, [sp, #4]
 8007ffa:	b10b      	cbz	r3, 8008000 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8008000:	9b01      	ldr	r3, [sp, #4]
 8008002:	4a09      	ldr	r2, [pc, #36]	; (8008028 <f_mount+0x58>)
 8008004:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008008:	b163      	cbz	r3, 8008024 <f_mount+0x54>
 800800a:	2e01      	cmp	r6, #1
 800800c:	d002      	beq.n	8008014 <f_mount+0x44>
 800800e:	2000      	movs	r0, #0
}
 8008010:	b004      	add	sp, #16
 8008012:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008014:	2200      	movs	r2, #0
 8008016:	a901      	add	r1, sp, #4
 8008018:	4668      	mov	r0, sp
 800801a:	f7ff fae9 	bl	80075f0 <find_volume>
	LEAVE_FF(fs, res);
 800801e:	e7f7      	b.n	8008010 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008020:	200b      	movs	r0, #11
 8008022:	e7f5      	b.n	8008010 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008024:	2000      	movs	r0, #0
 8008026:	e7f3      	b.n	8008010 <f_mount+0x40>
 8008028:	2000023c 	.word	0x2000023c

0800802c <f_open>:
{
 800802c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008030:	b091      	sub	sp, #68	; 0x44
 8008032:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8008034:	2800      	cmp	r0, #0
 8008036:	f000 810a 	beq.w	800824e <f_open+0x222>
 800803a:	4615      	mov	r5, r2
 800803c:	4606      	mov	r6, r0
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800803e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8008042:	463a      	mov	r2, r7
 8008044:	a903      	add	r1, sp, #12
 8008046:	a801      	add	r0, sp, #4
 8008048:	f7ff fad2 	bl	80075f0 <find_volume>
	if (res == FR_OK) {
 800804c:	4604      	mov	r4, r0
 800804e:	b130      	cbz	r0, 800805e <f_open+0x32>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008050:	b10c      	cbz	r4, 8008056 <f_open+0x2a>
 8008052:	2300      	movs	r3, #0
 8008054:	6033      	str	r3, [r6, #0]
}
 8008056:	4620      	mov	r0, r4
 8008058:	b011      	add	sp, #68	; 0x44
 800805a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008062:	9901      	ldr	r1, [sp, #4]
 8008064:	a804      	add	r0, sp, #16
 8008066:	f7ff fede 	bl	8007e26 <follow_path>
		if (res == FR_OK) {
 800806a:	4604      	mov	r4, r0
 800806c:	b960      	cbnz	r0, 8008088 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800806e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8008072:	2b00      	cmp	r3, #0
 8008074:	db50      	blt.n	8008118 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008076:	f037 0301 	bics.w	r3, r7, #1
 800807a:	bf14      	ite	ne
 800807c:	2101      	movne	r1, #1
 800807e:	2100      	moveq	r1, #0
 8008080:	a804      	add	r0, sp, #16
 8008082:	f7ff f85f 	bl	8007144 <chk_lock>
 8008086:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008088:	f015 0f1c 	tst.w	r5, #28
 800808c:	d05a      	beq.n	8008144 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 800808e:	2c00      	cmp	r4, #0
 8008090:	d04e      	beq.n	8008130 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008092:	2c04      	cmp	r4, #4
 8008094:	d042      	beq.n	800811c <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008096:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800809a:	2c00      	cmp	r4, #0
 800809c:	d161      	bne.n	8008162 <f_open+0x136>
 800809e:	f017 0f08 	tst.w	r7, #8
 80080a2:	d05e      	beq.n	8008162 <f_open+0x136>
				dw = GET_FATTIME();
 80080a4:	f7fe ffae 	bl	8007004 <get_fattime>
 80080a8:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80080aa:	4601      	mov	r1, r0
 80080ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80080ae:	300e      	adds	r0, #14
 80080b0:	f7ff f816 	bl	80070e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80080b4:	4629      	mov	r1, r5
 80080b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80080b8:	3016      	adds	r0, #22
 80080ba:	f7ff f811 	bl	80070e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80080be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c0:	2220      	movs	r2, #32
 80080c2:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80080c4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80080c8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80080cc:	4649      	mov	r1, r9
 80080ce:	4640      	mov	r0, r8
 80080d0:	f7ff f92f 	bl	8007332 <ld_clust>
 80080d4:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80080d6:	2200      	movs	r2, #0
 80080d8:	4649      	mov	r1, r9
 80080da:	4640      	mov	r0, r8
 80080dc:	f7ff f93c 	bl	8007358 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80080e0:	2100      	movs	r1, #0
 80080e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80080e4:	301c      	adds	r0, #28
 80080e6:	f7fe fffb 	bl	80070e0 <st_dword>
					fs->wflag = 1;
 80080ea:	9b03      	ldr	r3, [sp, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80080f0:	b3bd      	cbz	r5, 8008162 <f_open+0x136>
						dw = fs->winsect;
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80080f8:	2200      	movs	r2, #0
 80080fa:	4629      	mov	r1, r5
 80080fc:	a804      	add	r0, sp, #16
 80080fe:	f7ff fda2 	bl	8007c46 <remove_chain>
						if (res == FR_OK) {
 8008102:	4604      	mov	r4, r0
 8008104:	bb68      	cbnz	r0, 8008162 <f_open+0x136>
							res = move_window(fs, dw);
 8008106:	4641      	mov	r1, r8
 8008108:	9803      	ldr	r0, [sp, #12]
 800810a:	f7ff fa1a 	bl	8007542 <move_window>
 800810e:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008110:	3d01      	subs	r5, #1
 8008112:	9b03      	ldr	r3, [sp, #12]
 8008114:	60dd      	str	r5, [r3, #12]
 8008116:	e024      	b.n	8008162 <f_open+0x136>
				res = FR_INVALID_NAME;
 8008118:	2406      	movs	r4, #6
 800811a:	e7b5      	b.n	8008088 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800811c:	f7ff f84c 	bl	80071b8 <enq_lock>
 8008120:	b908      	cbnz	r0, 8008126 <f_open+0xfa>
 8008122:	2412      	movs	r4, #18
 8008124:	e7b7      	b.n	8008096 <f_open+0x6a>
 8008126:	a804      	add	r0, sp, #16
 8008128:	f7ff feec 	bl	8007f04 <dir_register>
 800812c:	4604      	mov	r4, r0
 800812e:	e7b2      	b.n	8008096 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008130:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008134:	f013 0f11 	tst.w	r3, #17
 8008138:	d112      	bne.n	8008160 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800813a:	f015 0f04 	tst.w	r5, #4
 800813e:	d0ac      	beq.n	800809a <f_open+0x6e>
 8008140:	2408      	movs	r4, #8
 8008142:	e00e      	b.n	8008162 <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 8008144:	b96c      	cbnz	r4, 8008162 <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008146:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800814a:	f013 0f10 	tst.w	r3, #16
 800814e:	d14c      	bne.n	80081ea <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008150:	f015 0f02 	tst.w	r5, #2
 8008154:	d005      	beq.n	8008162 <f_open+0x136>
 8008156:	f013 0f01 	tst.w	r3, #1
 800815a:	d002      	beq.n	8008162 <f_open+0x136>
						res = FR_DENIED;
 800815c:	2407      	movs	r4, #7
 800815e:	e016      	b.n	800818e <f_open+0x162>
					res = FR_DENIED;
 8008160:	2407      	movs	r4, #7
		if (res == FR_OK) {
 8008162:	b9a4      	cbnz	r4, 800818e <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008164:	f017 0f08 	tst.w	r7, #8
 8008168:	d001      	beq.n	800816e <f_open+0x142>
				mode |= FA_MODIFIED;
 800816a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008176:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008178:	f037 0301 	bics.w	r3, r7, #1
 800817c:	bf14      	ite	ne
 800817e:	2101      	movne	r1, #1
 8008180:	2100      	moveq	r1, #0
 8008182:	a804      	add	r0, sp, #16
 8008184:	f7ff f828 	bl	80071d8 <inc_lock>
 8008188:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800818a:	2800      	cmp	r0, #0
 800818c:	d05d      	beq.n	800824a <f_open+0x21e>
		if (res == FR_OK) {
 800818e:	2c00      	cmp	r4, #0
 8008190:	f47f af5e 	bne.w	8008050 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008194:	9d03      	ldr	r5, [sp, #12]
 8008196:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800819a:	4641      	mov	r1, r8
 800819c:	4628      	mov	r0, r5
 800819e:	f7ff f8c8 	bl	8007332 <ld_clust>
 80081a2:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80081a4:	f108 001c 	add.w	r0, r8, #28
 80081a8:	f7fe ff8b 	bl	80070c2 <ld_dword>
 80081ac:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80081ae:	2100      	movs	r1, #0
 80081b0:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 80081b2:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 80081b4:	88eb      	ldrh	r3, [r5, #6]
 80081b6:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 80081b8:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 80081ba:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80081bc:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80081be:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80081c0:	f106 0830 	add.w	r8, r6, #48	; 0x30
 80081c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081c8:	4640      	mov	r0, r8
 80081ca:	f7fe ff9f 	bl	800710c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80081ce:	f017 0f20 	tst.w	r7, #32
 80081d2:	f43f af3d 	beq.w	8008050 <f_open+0x24>
 80081d6:	68f5      	ldr	r5, [r6, #12]
 80081d8:	2d00      	cmp	r5, #0
 80081da:	f43f af39 	beq.w	8008050 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80081de:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	895f      	ldrh	r7, [r3, #10]
 80081e4:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80081e6:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081e8:	e005      	b.n	80081f6 <f_open+0x1ca>
					res = FR_NO_FILE;
 80081ea:	2404      	movs	r4, #4
 80081ec:	e7cf      	b.n	800818e <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80081ee:	f1b1 3fff 	cmp.w	r1, #4294967295
 80081f2:	d00b      	beq.n	800820c <f_open+0x1e0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80081f4:	1bed      	subs	r5, r5, r7
 80081f6:	b95c      	cbnz	r4, 8008210 <f_open+0x1e4>
 80081f8:	42bd      	cmp	r5, r7
 80081fa:	d909      	bls.n	8008210 <f_open+0x1e4>
					clst = get_fat(&fp->obj, clst);
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7ff fbfe 	bl	80079fe <get_fat>
 8008202:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8008204:	2801      	cmp	r0, #1
 8008206:	d8f2      	bhi.n	80081ee <f_open+0x1c2>
 8008208:	2402      	movs	r4, #2
 800820a:	e7f0      	b.n	80081ee <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800820c:	2401      	movs	r4, #1
 800820e:	e7f1      	b.n	80081f4 <f_open+0x1c8>
				fp->clust = clst;
 8008210:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008212:	2c00      	cmp	r4, #0
 8008214:	f47f af1c 	bne.w	8008050 <f_open+0x24>
 8008218:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800821c:	2b00      	cmp	r3, #0
 800821e:	f43f af17 	beq.w	8008050 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008222:	9f03      	ldr	r7, [sp, #12]
 8008224:	4638      	mov	r0, r7
 8008226:	f7ff f867 	bl	80072f8 <clust2sect>
 800822a:	b908      	cbnz	r0, 8008230 <f_open+0x204>
						res = FR_INT_ERR;
 800822c:	2402      	movs	r4, #2
 800822e:	e710      	b.n	8008052 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008230:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8008234:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008236:	2301      	movs	r3, #1
 8008238:	4641      	mov	r1, r8
 800823a:	7878      	ldrb	r0, [r7, #1]
 800823c:	f7fe ff18 	bl	8007070 <disk_read>
 8008240:	2800      	cmp	r0, #0
 8008242:	f43f af05 	beq.w	8008050 <f_open+0x24>
 8008246:	2401      	movs	r4, #1
 8008248:	e703      	b.n	8008052 <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800824a:	2402      	movs	r4, #2
 800824c:	e700      	b.n	8008050 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800824e:	2409      	movs	r4, #9
 8008250:	e701      	b.n	8008056 <f_open+0x2a>

08008252 <f_write>:
{
 8008252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008256:	b085      	sub	sp, #20
 8008258:	4604      	mov	r4, r0
 800825a:	460e      	mov	r6, r1
 800825c:	4615      	mov	r5, r2
 800825e:	4698      	mov	r8, r3
	*bw = 0;	/* Clear write byte counter */
 8008260:	2300      	movs	r3, #0
 8008262:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008266:	9001      	str	r0, [sp, #4]
 8008268:	a903      	add	r1, sp, #12
 800826a:	f7ff f91e 	bl	80074aa <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800826e:	9000      	str	r0, [sp, #0]
 8008270:	2800      	cmp	r0, #0
 8008272:	d14a      	bne.n	800830a <f_write+0xb8>
 8008274:	7d63      	ldrb	r3, [r4, #21]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d146      	bne.n	800830a <f_write+0xb8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800827c:	7d23      	ldrb	r3, [r4, #20]
 800827e:	f013 0f02 	tst.w	r3, #2
 8008282:	f000 80e3 	beq.w	800844c <f_write+0x1fa>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008286:	69a3      	ldr	r3, [r4, #24]
 8008288:	42eb      	cmn	r3, r5
 800828a:	f0c0 80b1 	bcc.w	80083f0 <f_write+0x19e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800828e:	43dd      	mvns	r5, r3
 8008290:	e0ae      	b.n	80083f0 <f_write+0x19e>
					if (fp->cltbl) {
 8008292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d03c      	beq.n	8008312 <f_write+0xc0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008298:	4620      	mov	r0, r4
 800829a:	f7ff f839 	bl	8007310 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800829e:	2800      	cmp	r0, #0
 80082a0:	f000 80cf 	beq.w	8008442 <f_write+0x1f0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80082a4:	2801      	cmp	r0, #1
 80082a6:	d039      	beq.n	800831c <f_write+0xca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80082a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082ac:	d03d      	beq.n	800832a <f_write+0xd8>
				fp->clust = clst;			/* Update current cluster */
 80082ae:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80082b0:	68a3      	ldr	r3, [r4, #8]
 80082b2:	b903      	cbnz	r3, 80082b6 <f_write+0x64>
 80082b4:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80082b6:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	db3c      	blt.n	8008338 <f_write+0xe6>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80082be:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80082c2:	69e1      	ldr	r1, [r4, #28]
 80082c4:	4658      	mov	r0, fp
 80082c6:	f7ff f817 	bl	80072f8 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80082ca:	4681      	mov	r9, r0
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d048      	beq.n	8008362 <f_write+0x110>
			sect += csect;
 80082d0:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80082d2:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 80082d6:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80082da:	d35e      	bcc.n	800839a <f_write+0x148>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80082dc:	eb07 030a 	add.w	r3, r7, sl
 80082e0:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d901      	bls.n	80082ec <f_write+0x9a>
					cc = fs->csize - csect;
 80082e8:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082ec:	4653      	mov	r3, sl
 80082ee:	464a      	mov	r2, r9
 80082f0:	4631      	mov	r1, r6
 80082f2:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80082f6:	f7fe fec7 	bl	8007088 <disk_write>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d038      	beq.n	8008370 <f_write+0x11e>
 80082fe:	f04f 0a01 	mov.w	sl, #1
 8008302:	f884 a015 	strb.w	sl, [r4, #21]
 8008306:	f8cd a000 	str.w	sl, [sp]
}
 800830a:	9800      	ldr	r0, [sp, #0]
 800830c:	b005      	add	sp, #20
 800830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008312:	69e1      	ldr	r1, [r4, #28]
 8008314:	9801      	ldr	r0, [sp, #4]
 8008316:	f7ff fc30 	bl	8007b7a <create_chain>
 800831a:	e7c0      	b.n	800829e <f_write+0x4c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800831c:	f04f 0a02 	mov.w	sl, #2
 8008320:	f884 a015 	strb.w	sl, [r4, #21]
 8008324:	f8cd a000 	str.w	sl, [sp]
 8008328:	e7ef      	b.n	800830a <f_write+0xb8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800832a:	f04f 0a01 	mov.w	sl, #1
 800832e:	f884 a015 	strb.w	sl, [r4, #21]
 8008332:	f8cd a000 	str.w	sl, [sp]
 8008336:	e7e8      	b.n	800830a <f_write+0xb8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008338:	2301      	movs	r3, #1
 800833a:	6a22      	ldr	r2, [r4, #32]
 800833c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008340:	9803      	ldr	r0, [sp, #12]
 8008342:	7840      	ldrb	r0, [r0, #1]
 8008344:	f7fe fea0 	bl	8007088 <disk_write>
 8008348:	b920      	cbnz	r0, 8008354 <f_write+0x102>
				fp->flag &= (BYTE)~FA_DIRTY;
 800834a:	7d23      	ldrb	r3, [r4, #20]
 800834c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008350:	7523      	strb	r3, [r4, #20]
 8008352:	e7b4      	b.n	80082be <f_write+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008354:	f04f 0a01 	mov.w	sl, #1
 8008358:	f884 a015 	strb.w	sl, [r4, #21]
 800835c:	f8cd a000 	str.w	sl, [sp]
 8008360:	e7d3      	b.n	800830a <f_write+0xb8>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008362:	f04f 0a02 	mov.w	sl, #2
 8008366:	f884 a015 	strb.w	sl, [r4, #21]
 800836a:	f8cd a000 	str.w	sl, [sp]
 800836e:	e7cc      	b.n	800830a <f_write+0xb8>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008370:	6a21      	ldr	r1, [r4, #32]
 8008372:	eba1 0109 	sub.w	r1, r1, r9
 8008376:	4551      	cmp	r1, sl
 8008378:	d302      	bcc.n	8008380 <f_write+0x12e>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800837a:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800837e:	e028      	b.n	80083d2 <f_write+0x180>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008384:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 8008388:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800838c:	f7fe feb2 	bl	80070f4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008390:	7d23      	ldrb	r3, [r4, #20]
 8008392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008396:	7523      	strb	r3, [r4, #20]
 8008398:	e7ef      	b.n	800837a <f_write+0x128>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800839a:	6a23      	ldr	r3, [r4, #32]
 800839c:	454b      	cmp	r3, r9
 800839e:	d003      	beq.n	80083a8 <f_write+0x156>
				fp->fptr < fp->obj.objsize &&
 80083a0:	69a2      	ldr	r2, [r4, #24]
 80083a2:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d33b      	bcc.n	8008420 <f_write+0x1ce>
			fp->sect = sect;
 80083a8:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80083ac:	69a3      	ldr	r3, [r4, #24]
 80083ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b2:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80083b6:	42bd      	cmp	r5, r7
 80083b8:	d200      	bcs.n	80083bc <f_write+0x16a>
 80083ba:	462f      	mov	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80083bc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80083c0:	463a      	mov	r2, r7
 80083c2:	4631      	mov	r1, r6
 80083c4:	4418      	add	r0, r3
 80083c6:	f7fe fe95 	bl	80070f4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80083ca:	7d23      	ldrb	r3, [r4, #20]
 80083cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80083d0:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80083d2:	443e      	add	r6, r7
 80083d4:	69a3      	ldr	r3, [r4, #24]
 80083d6:	443b      	add	r3, r7
 80083d8:	61a3      	str	r3, [r4, #24]
 80083da:	68e2      	ldr	r2, [r4, #12]
 80083dc:	4293      	cmp	r3, r2
 80083de:	bf38      	it	cc
 80083e0:	4613      	movcc	r3, r2
 80083e2:	60e3      	str	r3, [r4, #12]
 80083e4:	f8d8 3000 	ldr.w	r3, [r8]
 80083e8:	443b      	add	r3, r7
 80083ea:	f8c8 3000 	str.w	r3, [r8]
 80083ee:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 80083f0:	b33d      	cbz	r5, 8008442 <f_write+0x1f0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80083f2:	69a1      	ldr	r1, [r4, #24]
 80083f4:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1d7      	bne.n	80083ac <f_write+0x15a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	895f      	ldrh	r7, [r3, #10]
 8008400:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8008402:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8008406:	f47f af56 	bne.w	80082b6 <f_write+0x64>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800840a:	2900      	cmp	r1, #0
 800840c:	f47f af41 	bne.w	8008292 <f_write+0x40>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008410:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8008412:	2800      	cmp	r0, #0
 8008414:	f47f af43 	bne.w	800829e <f_write+0x4c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008418:	9801      	ldr	r0, [sp, #4]
 800841a:	f7ff fbae 	bl	8007b7a <create_chain>
 800841e:	e73e      	b.n	800829e <f_write+0x4c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008420:	2301      	movs	r3, #1
 8008422:	464a      	mov	r2, r9
 8008424:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008428:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800842c:	f7fe fe20 	bl	8007070 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8008430:	2800      	cmp	r0, #0
 8008432:	d0b9      	beq.n	80083a8 <f_write+0x156>
					ABORT(fs, FR_DISK_ERR);
 8008434:	f04f 0a01 	mov.w	sl, #1
 8008438:	f884 a015 	strb.w	sl, [r4, #21]
 800843c:	f8cd a000 	str.w	sl, [sp]
 8008440:	e763      	b.n	800830a <f_write+0xb8>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008442:	7d23      	ldrb	r3, [r4, #20]
 8008444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008448:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800844a:	e75e      	b.n	800830a <f_write+0xb8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800844c:	2307      	movs	r3, #7
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	e75b      	b.n	800830a <f_write+0xb8>

08008452 <putc_bfd>:
{
 8008452:	b570      	push	{r4, r5, r6, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	4604      	mov	r4, r0
 8008458:	460d      	mov	r5, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800845a:	290a      	cmp	r1, #10
 800845c:	d00d      	beq.n	800847a <putc_bfd+0x28>
	i = pb->idx;		/* Write index of pb->buf[] */
 800845e:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8008460:	2b00      	cmp	r3, #0
 8008462:	db08      	blt.n	8008476 <putc_bfd+0x24>
	pb->buf[i++] = (BYTE)c;
 8008464:	1c5e      	adds	r6, r3, #1
 8008466:	4423      	add	r3, r4
 8008468:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800846a:	2e3c      	cmp	r6, #60	; 0x3c
 800846c:	dc09      	bgt.n	8008482 <putc_bfd+0x30>
	pb->idx = i;
 800846e:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8008470:	68a3      	ldr	r3, [r4, #8]
 8008472:	3301      	adds	r3, #1
 8008474:	60a3      	str	r3, [r4, #8]
}
 8008476:	b002      	add	sp, #8
 8008478:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 800847a:	210d      	movs	r1, #13
 800847c:	f7ff ffe9 	bl	8008452 <putc_bfd>
 8008480:	e7ed      	b.n	800845e <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008482:	4621      	mov	r1, r4
 8008484:	f851 0b0c 	ldr.w	r0, [r1], #12
 8008488:	ab01      	add	r3, sp, #4
 800848a:	4632      	mov	r2, r6
 800848c:	f7ff fee1 	bl	8008252 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	429e      	cmp	r6, r3
 8008494:	d002      	beq.n	800849c <putc_bfd+0x4a>
 8008496:	f04f 36ff 	mov.w	r6, #4294967295
 800849a:	e7e8      	b.n	800846e <putc_bfd+0x1c>
 800849c:	2600      	movs	r6, #0
 800849e:	e7e6      	b.n	800846e <putc_bfd+0x1c>

080084a0 <putc_flush>:
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80084a0:	6842      	ldr	r2, [r0, #4]
 80084a2:	2a00      	cmp	r2, #0
 80084a4:	db10      	blt.n	80084c8 <putc_flush+0x28>
{
 80084a6:	b510      	push	{r4, lr}
 80084a8:	b082      	sub	sp, #8
 80084aa:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80084ac:	4601      	mov	r1, r0
 80084ae:	f851 0b0c 	ldr.w	r0, [r1], #12
 80084b2:	ab01      	add	r3, sp, #4
 80084b4:	f7ff fecd 	bl	8008252 <f_write>
 80084b8:	b948      	cbnz	r0, 80084ce <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	9b01      	ldr	r3, [sp, #4]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d108      	bne.n	80084d4 <putc_flush+0x34>
 80084c2:	68a0      	ldr	r0, [r4, #8]
}
 80084c4:	b002      	add	sp, #8
 80084c6:	bd10      	pop	{r4, pc}
	return EOF;
 80084c8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80084cc:	4770      	bx	lr
	return EOF;
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
 80084d2:	e7f7      	b.n	80084c4 <putc_flush+0x24>
 80084d4:	f04f 30ff 	mov.w	r0, #4294967295
 80084d8:	e7f4      	b.n	80084c4 <putc_flush+0x24>

080084da <f_sync>:
{
 80084da:	b570      	push	{r4, r5, r6, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80084e0:	a901      	add	r1, sp, #4
 80084e2:	f7fe ffe2 	bl	80074aa <validate>
	if (res == FR_OK) {
 80084e6:	b970      	cbnz	r0, 8008506 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80084e8:	7d23      	ldrb	r3, [r4, #20]
 80084ea:	f013 0f40 	tst.w	r3, #64	; 0x40
 80084ee:	d00a      	beq.n	8008506 <f_sync+0x2c>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80084f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80084f4:	d109      	bne.n	800850a <f_sync+0x30>
			tm = GET_FATTIME();				/* Modified time */
 80084f6:	f7fe fd85 	bl	8007004 <get_fattime>
 80084fa:	4605      	mov	r5, r0
				res = move_window(fs, fp->dir_sect);
 80084fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80084fe:	9801      	ldr	r0, [sp, #4]
 8008500:	f7ff f81f 	bl	8007542 <move_window>
				if (res == FR_OK) {
 8008504:	b178      	cbz	r0, 8008526 <f_sync+0x4c>
}
 8008506:	b002      	add	sp, #8
 8008508:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800850a:	2301      	movs	r3, #1
 800850c:	6a22      	ldr	r2, [r4, #32]
 800850e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008512:	9801      	ldr	r0, [sp, #4]
 8008514:	7840      	ldrb	r0, [r0, #1]
 8008516:	f7fe fdb7 	bl	8007088 <disk_write>
 800851a:	bb40      	cbnz	r0, 800856e <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 800851c:	7d23      	ldrb	r3, [r4, #20]
 800851e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008522:	7523      	strb	r3, [r4, #20]
 8008524:	e7e7      	b.n	80084f6 <f_sync+0x1c>
					dir = fp->dir_ptr;
 8008526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008528:	7af3      	ldrb	r3, [r6, #11]
 800852a:	f043 0320 	orr.w	r3, r3, #32
 800852e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008530:	68a2      	ldr	r2, [r4, #8]
 8008532:	4631      	mov	r1, r6
 8008534:	6820      	ldr	r0, [r4, #0]
 8008536:	f7fe ff0f 	bl	8007358 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800853a:	68e1      	ldr	r1, [r4, #12]
 800853c:	f106 001c 	add.w	r0, r6, #28
 8008540:	f7fe fdce 	bl	80070e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008544:	4629      	mov	r1, r5
 8008546:	f106 0016 	add.w	r0, r6, #22
 800854a:	f7fe fdc9 	bl	80070e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800854e:	2100      	movs	r1, #0
 8008550:	f106 0012 	add.w	r0, r6, #18
 8008554:	f7fe fdc0 	bl	80070d8 <st_word>
					fs->wflag = 1;
 8008558:	9b01      	ldr	r3, [sp, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800855e:	9801      	ldr	r0, [sp, #4]
 8008560:	f7ff fcf0 	bl	8007f44 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008564:	7d23      	ldrb	r3, [r4, #20]
 8008566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800856a:	7523      	strb	r3, [r4, #20]
 800856c:	e7cb      	b.n	8008506 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800856e:	2001      	movs	r0, #1
 8008570:	e7c9      	b.n	8008506 <f_sync+0x2c>

08008572 <f_close>:
{
 8008572:	b510      	push	{r4, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8008578:	f7ff ffaf 	bl	80084da <f_sync>
	if (res == FR_OK)
 800857c:	b108      	cbz	r0, 8008582 <f_close+0x10>
}
 800857e:	b002      	add	sp, #8
 8008580:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008582:	a901      	add	r1, sp, #4
 8008584:	4620      	mov	r0, r4
 8008586:	f7fe ff90 	bl	80074aa <validate>
		if (res == FR_OK) {
 800858a:	2800      	cmp	r0, #0
 800858c:	d1f7      	bne.n	800857e <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800858e:	6920      	ldr	r0, [r4, #16]
 8008590:	f7fe fe74 	bl	800727c <dec_lock>
			if (res == FR_OK)
 8008594:	2800      	cmp	r0, #0
 8008596:	d1f2      	bne.n	800857e <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 8008598:	6020      	str	r0, [r4, #0]
 800859a:	e7f0      	b.n	800857e <f_close+0xc>

0800859c <f_getfree>:
{
 800859c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a0:	b088      	sub	sp, #32
 80085a2:	9001      	str	r0, [sp, #4]
 80085a4:	4688      	mov	r8, r1
 80085a6:	4614      	mov	r4, r2
	res = find_volume(&path, &fs, 0);
 80085a8:	2200      	movs	r2, #0
 80085aa:	a907      	add	r1, sp, #28
 80085ac:	a801      	add	r0, sp, #4
 80085ae:	f7ff f81f 	bl	80075f0 <find_volume>
	if (res == FR_OK) {
 80085b2:	4681      	mov	r9, r0
 80085b4:	b940      	cbnz	r0, 80085c8 <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 80085b6:	9b07      	ldr	r3, [sp, #28]
 80085b8:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 80085ba:	691a      	ldr	r2, [r3, #16]
 80085bc:	695d      	ldr	r5, [r3, #20]
 80085be:	1ea9      	subs	r1, r5, #2
 80085c0:	428a      	cmp	r2, r1
 80085c2:	d805      	bhi.n	80085d0 <f_getfree+0x34>
			*nclst = fs->free_clst;
 80085c4:	f8c8 2000 	str.w	r2, [r8]
}
 80085c8:	4648      	mov	r0, r9
 80085ca:	b008      	add	sp, #32
 80085cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80085d0:	781e      	ldrb	r6, [r3, #0]
 80085d2:	2e01      	cmp	r6, #1
 80085d4:	d005      	beq.n	80085e2 <f_getfree+0x46>
					clst = fs->n_fatent; sect = fs->fatbase;
 80085d6:	f8d3 a020 	ldr.w	sl, [r3, #32]
					i = 0; p = 0;
 80085da:	2400      	movs	r4, #0
 80085dc:	4626      	mov	r6, r4
			nfree = 0;
 80085de:	4627      	mov	r7, r4
 80085e0:	e02f      	b.n	8008642 <f_getfree+0xa6>
				clst = 2; obj.fs = fs;
 80085e2:	9302      	str	r3, [sp, #8]
 80085e4:	2402      	movs	r4, #2
			nfree = 0;
 80085e6:	2700      	movs	r7, #0
 80085e8:	e004      	b.n	80085f4 <f_getfree+0x58>
				} while (++clst < fs->n_fatent);
 80085ea:	3401      	adds	r4, #1
 80085ec:	9b07      	ldr	r3, [sp, #28]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	42a3      	cmp	r3, r4
 80085f2:	d935      	bls.n	8008660 <f_getfree+0xc4>
					stat = get_fat(&obj, clst);
 80085f4:	4621      	mov	r1, r4
 80085f6:	a802      	add	r0, sp, #8
 80085f8:	f7ff fa01 	bl	80079fe <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80085fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008600:	d02d      	beq.n	800865e <f_getfree+0xc2>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008602:	2801      	cmp	r0, #1
 8008604:	d035      	beq.n	8008672 <f_getfree+0xd6>
					if (stat == 0) nfree++;
 8008606:	2800      	cmp	r0, #0
 8008608:	d1ef      	bne.n	80085ea <f_getfree+0x4e>
 800860a:	3701      	adds	r7, #1
 800860c:	e7ed      	b.n	80085ea <f_getfree+0x4e>
							res = move_window(fs, sect++);
 800860e:	f10a 0601 	add.w	r6, sl, #1
 8008612:	4651      	mov	r1, sl
 8008614:	9807      	ldr	r0, [sp, #28]
 8008616:	f7fe ff94 	bl	8007542 <move_window>
							if (res != FR_OK) break;
 800861a:	4681      	mov	r9, r0
 800861c:	bb00      	cbnz	r0, 8008660 <f_getfree+0xc4>
							p = fs->win;
 800861e:	9c07      	ldr	r4, [sp, #28]
 8008620:	3430      	adds	r4, #48	; 0x30
							res = move_window(fs, sect++);
 8008622:	46b2      	mov	sl, r6
							i = SS(fs);
 8008624:	f44f 7600 	mov.w	r6, #512	; 0x200
 8008628:	e00d      	b.n	8008646 <f_getfree+0xaa>
							if (ld_word(p) == 0) nfree++;
 800862a:	4620      	mov	r0, r4
 800862c:	f7fe fd44 	bl	80070b8 <ld_word>
 8008630:	b900      	cbnz	r0, 8008634 <f_getfree+0x98>
 8008632:	3701      	adds	r7, #1
							p += 2; i -= 2;
 8008634:	3402      	adds	r4, #2
 8008636:	3e02      	subs	r6, #2
 8008638:	e001      	b.n	800863e <f_getfree+0xa2>
							p += 4; i -= 4;
 800863a:	3404      	adds	r4, #4
 800863c:	3e04      	subs	r6, #4
					} while (--clst);
 800863e:	3d01      	subs	r5, #1
 8008640:	d00e      	beq.n	8008660 <f_getfree+0xc4>
						if (i == 0) {
 8008642:	2e00      	cmp	r6, #0
 8008644:	d0e3      	beq.n	800860e <f_getfree+0x72>
						if (fs->fs_type == FS_FAT16) {
 8008646:	9b07      	ldr	r3, [sp, #28]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	2b02      	cmp	r3, #2
 800864c:	d0ed      	beq.n	800862a <f_getfree+0x8e>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800864e:	4620      	mov	r0, r4
 8008650:	f7fe fd37 	bl	80070c2 <ld_dword>
 8008654:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 8008658:	d1ef      	bne.n	800863a <f_getfree+0x9e>
 800865a:	3701      	adds	r7, #1
 800865c:	e7ed      	b.n	800863a <f_getfree+0x9e>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800865e:	46b1      	mov	r9, r6
			*nclst = nfree;			/* Return the free clusters */
 8008660:	f8c8 7000 	str.w	r7, [r8]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008664:	9b07      	ldr	r3, [sp, #28]
 8008666:	611f      	str	r7, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008668:	791a      	ldrb	r2, [r3, #4]
 800866a:	f042 0201 	orr.w	r2, r2, #1
 800866e:	711a      	strb	r2, [r3, #4]
 8008670:	e7aa      	b.n	80085c8 <f_getfree+0x2c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008672:	f04f 0902 	mov.w	r9, #2
 8008676:	e7f3      	b.n	8008660 <f_getfree+0xc4>

08008678 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008678:	b40e      	push	{r1, r2, r3}
 800867a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800867e:	b09d      	sub	sp, #116	; 0x74
 8008680:	4601      	mov	r1, r0
 8008682:	ac25      	add	r4, sp, #148	; 0x94
 8008684:	f854 5b04 	ldr.w	r5, [r4], #4
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8008688:	a808      	add	r0, sp, #32
 800868a:	f7fe ff09 	bl	80074a0 <putc_init>

	va_start(arp, fmt);
 800868e:	941b      	str	r4, [sp, #108]	; 0x6c
 8008690:	e003      	b.n	800869a <f_printf+0x22>

	for (;;) {
		c = *fmt++;
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
 8008692:	a808      	add	r0, sp, #32
 8008694:	f7ff fedd 	bl	8008452 <putc_bfd>
		c = *fmt++;
 8008698:	4625      	mov	r5, r4
 800869a:	462c      	mov	r4, r5
 800869c:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (c == 0) break;			/* End of string */
 80086a0:	2900      	cmp	r1, #0
 80086a2:	f000 80fa 	beq.w	800889a <f_printf+0x222>
		if (c != '%') {				/* Non escape character */
 80086a6:	2925      	cmp	r1, #37	; 0x25
 80086a8:	d1f3      	bne.n	8008692 <f_printf+0x1a>
			continue;
		}
		w = f = 0;
		c = *fmt++;
 80086aa:	3502      	adds	r5, #2
 80086ac:	7821      	ldrb	r1, [r4, #0]
		if (c == '0') {				/* Flag: '0' padding */
 80086ae:	2930      	cmp	r1, #48	; 0x30
 80086b0:	d004      	beq.n	80086bc <f_printf+0x44>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 80086b2:	292d      	cmp	r1, #45	; 0x2d
 80086b4:	d006      	beq.n	80086c4 <f_printf+0x4c>
		w = f = 0;
 80086b6:	2700      	movs	r7, #0
 80086b8:	2400      	movs	r4, #0
 80086ba:	e00e      	b.n	80086da <f_printf+0x62>
			f = 1; c = *fmt++;
 80086bc:	1ca5      	adds	r5, r4, #2
 80086be:	7861      	ldrb	r1, [r4, #1]
 80086c0:	2701      	movs	r7, #1
 80086c2:	e7f9      	b.n	80086b8 <f_printf+0x40>
				f = 2; c = *fmt++;
 80086c4:	1ca5      	adds	r5, r4, #2
 80086c6:	7861      	ldrb	r1, [r4, #1]
 80086c8:	2702      	movs	r7, #2
 80086ca:	e7f5      	b.n	80086b8 <f_printf+0x40>
			}
		}
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
 80086cc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80086d0:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 80086d4:	3c30      	subs	r4, #48	; 0x30
			c = *fmt++;
 80086d6:	f815 1b01 	ldrb.w	r1, [r5], #1
		while (IsDigit(c)) {		/* Precision */
 80086da:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b09      	cmp	r3, #9
 80086e2:	d9f3      	bls.n	80086cc <f_printf+0x54>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80086e4:	296c      	cmp	r1, #108	; 0x6c
 80086e6:	d001      	beq.n	80086ec <f_printf+0x74>
 80086e8:	294c      	cmp	r1, #76	; 0x4c
 80086ea:	d103      	bne.n	80086f4 <f_printf+0x7c>
			f |= 4; c = *fmt++;
 80086ec:	f047 0704 	orr.w	r7, r7, #4
 80086f0:	f815 1b01 	ldrb.w	r1, [r5], #1
		}
		if (!c) break;
 80086f4:	2900      	cmp	r1, #0
 80086f6:	f000 80d0 	beq.w	800889a <f_printf+0x222>
		d = c;
		if (IsLower(d)) d -= 0x20;
 80086fa:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b19      	cmp	r3, #25
 8008702:	d803      	bhi.n	800870c <f_printf+0x94>
 8008704:	f1a1 0320 	sub.w	r3, r1, #32
 8008708:	b2db      	uxtb	r3, r3
 800870a:	e000      	b.n	800870e <f_printf+0x96>
		d = c;
 800870c:	460b      	mov	r3, r1
		switch (d) {				/* Type is... */
 800870e:	f1a3 0242 	sub.w	r2, r3, #66	; 0x42
 8008712:	2a16      	cmp	r2, #22
 8008714:	d853      	bhi.n	80087be <f_printf+0x146>
 8008716:	e8df f002 	tbb	[pc, r2]
 800871a:	3b56      	.short	0x3b56
 800871c:	52525243 	.word	0x52525243
 8008720:	52525252 	.word	0x52525252
 8008724:	58525252 	.word	0x58525252
 8008728:	0c525252 	.word	0x0c525252
 800872c:	52524352 	.word	0x52524352
 8008730:	50          	.byte	0x50
 8008731:	00          	.byte	0x00
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008732:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008734:	1d1a      	adds	r2, r3, #4
 8008736:	921b      	str	r2, [sp, #108]	; 0x6c
 8008738:	f8d3 8000 	ldr.w	r8, [r3]
			for (j = 0; p[j]; j++) ;
 800873c:	2600      	movs	r6, #0
 800873e:	e000      	b.n	8008742 <f_printf+0xca>
 8008740:	3601      	adds	r6, #1
 8008742:	f818 3006 	ldrb.w	r3, [r8, r6]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1fa      	bne.n	8008740 <f_printf+0xc8>
			if (!(f & 2)) {
 800874a:	f017 0f02 	tst.w	r7, #2
 800874e:	d110      	bne.n	8008772 <f_printf+0xfa>
 8008750:	e005      	b.n	800875e <f_printf+0xe6>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008752:	2120      	movs	r1, #32
 8008754:	eb0d 0001 	add.w	r0, sp, r1
 8008758:	f7ff fe7b 	bl	8008452 <putc_bfd>
 800875c:	463e      	mov	r6, r7
 800875e:	1c77      	adds	r7, r6, #1
 8008760:	42a6      	cmp	r6, r4
 8008762:	d3f6      	bcc.n	8008752 <f_printf+0xda>
 8008764:	463e      	mov	r6, r7
 8008766:	e004      	b.n	8008772 <f_printf+0xfa>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008768:	f108 0801 	add.w	r8, r8, #1
 800876c:	a808      	add	r0, sp, #32
 800876e:	f7ff fe70 	bl	8008452 <putc_bfd>
 8008772:	f898 1000 	ldrb.w	r1, [r8]
 8008776:	2900      	cmp	r1, #0
 8008778:	d1f6      	bne.n	8008768 <f_printf+0xf0>
 800877a:	e005      	b.n	8008788 <f_printf+0x110>
			while (j++ < w) putc_bfd(&pb, ' ');
 800877c:	2120      	movs	r1, #32
 800877e:	eb0d 0001 	add.w	r0, sp, r1
 8008782:	f7ff fe66 	bl	8008452 <putc_bfd>
 8008786:	463e      	mov	r6, r7
 8008788:	1c77      	adds	r7, r6, #1
 800878a:	42a6      	cmp	r6, r4
 800878c:	d3f6      	bcc.n	800877c <f_printf+0x104>
 800878e:	e784      	b.n	800869a <f_printf+0x22>
			continue;

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	921b      	str	r2, [sp, #108]	; 0x6c
 8008796:	7819      	ldrb	r1, [r3, #0]
 8008798:	a808      	add	r0, sp, #32
 800879a:	f7ff fe5a 	bl	8008452 <putc_bfd>
 800879e:	e77c      	b.n	800869a <f_printf+0x22>
		case 'O' :					/* Octal */
			r = 8; break;

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 80087a0:	200a      	movs	r0, #10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80087a2:	f017 0f04 	tst.w	r7, #4
 80087a6:	d012      	beq.n	80087ce <f_printf+0x156>
 80087a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80087aa:	1d16      	adds	r6, r2, #4
 80087ac:	961b      	str	r6, [sp, #108]	; 0x6c
 80087ae:	6812      	ldr	r2, [r2, #0]
		if (d == 'D' && (v & 0x80000000)) {
 80087b0:	2b44      	cmp	r3, #68	; 0x44
 80087b2:	d018      	beq.n	80087e6 <f_printf+0x16e>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
 80087b4:	f04f 0c00 	mov.w	ip, #0
 80087b8:	e02b      	b.n	8008812 <f_printf+0x19a>
			r = 16; break;
 80087ba:	2010      	movs	r0, #16
 80087bc:	e7f1      	b.n	80087a2 <f_printf+0x12a>
			putc_bfd(&pb, c); continue;
 80087be:	a808      	add	r0, sp, #32
 80087c0:	f7ff fe47 	bl	8008452 <putc_bfd>
 80087c4:	e769      	b.n	800869a <f_printf+0x22>
			r = 10; break;
 80087c6:	2002      	movs	r0, #2
 80087c8:	e7eb      	b.n	80087a2 <f_printf+0x12a>
			r = 8; break;
 80087ca:	2008      	movs	r0, #8
 80087cc:	e7e9      	b.n	80087a2 <f_printf+0x12a>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80087ce:	2b44      	cmp	r3, #68	; 0x44
 80087d0:	d004      	beq.n	80087dc <f_printf+0x164>
 80087d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80087d4:	1d16      	adds	r6, r2, #4
 80087d6:	961b      	str	r6, [sp, #108]	; 0x6c
 80087d8:	6812      	ldr	r2, [r2, #0]
 80087da:	e7e9      	b.n	80087b0 <f_printf+0x138>
 80087dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80087de:	1d16      	adds	r6, r2, #4
 80087e0:	961b      	str	r6, [sp, #108]	; 0x6c
 80087e2:	6812      	ldr	r2, [r2, #0]
 80087e4:	e7e4      	b.n	80087b0 <f_printf+0x138>
		if (d == 'D' && (v & 0x80000000)) {
 80087e6:	2a00      	cmp	r2, #0
 80087e8:	dae4      	bge.n	80087b4 <f_printf+0x13c>
			v = 0 - v;
 80087ea:	4252      	negs	r2, r2
			f |= 8;
 80087ec:	f047 0708 	orr.w	r7, r7, #8
 80087f0:	e7e0      	b.n	80087b4 <f_printf+0x13c>
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80087f2:	2627      	movs	r6, #39	; 0x27
 80087f4:	4433      	add	r3, r6
 80087f6:	b2db      	uxtb	r3, r3
			str[i++] = d + '0';
 80087f8:	f10c 0601 	add.w	r6, ip, #1
 80087fc:	3330      	adds	r3, #48	; 0x30
 80087fe:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 8008802:	44e1      	add	r9, ip
 8008804:	f809 3c70 	strb.w	r3, [r9, #-112]
		} while (v && i < sizeof str / sizeof str[0]);
 8008808:	45c6      	cmp	lr, r8
 800880a:	d810      	bhi.n	800882e <f_printf+0x1b6>
 800880c:	2e1f      	cmp	r6, #31
 800880e:	d80e      	bhi.n	800882e <f_printf+0x1b6>
			str[i++] = d + '0';
 8008810:	46b4      	mov	ip, r6
			d = (TCHAR)(v % r); v /= r;
 8008812:	4686      	mov	lr, r0
 8008814:	fbb2 f6f0 	udiv	r6, r2, r0
 8008818:	fb00 2316 	mls	r3, r0, r6, r2
 800881c:	b2db      	uxtb	r3, r3
 800881e:	4690      	mov	r8, r2
 8008820:	4632      	mov	r2, r6
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008822:	2b09      	cmp	r3, #9
 8008824:	d9e8      	bls.n	80087f8 <f_printf+0x180>
 8008826:	2978      	cmp	r1, #120	; 0x78
 8008828:	d0e3      	beq.n	80087f2 <f_printf+0x17a>
 800882a:	2607      	movs	r6, #7
 800882c:	e7e2      	b.n	80087f4 <f_printf+0x17c>
		if (f & 8) str[i++] = '-';
 800882e:	f017 0f08 	tst.w	r7, #8
 8008832:	d006      	beq.n	8008842 <f_printf+0x1ca>
 8008834:	ab1c      	add	r3, sp, #112	; 0x70
 8008836:	441e      	add	r6, r3
 8008838:	232d      	movs	r3, #45	; 0x2d
 800883a:	f806 3c70 	strb.w	r3, [r6, #-112]
 800883e:	f10c 0602 	add.w	r6, ip, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8008842:	f017 0f01 	tst.w	r7, #1
 8008846:	d003      	beq.n	8008850 <f_printf+0x1d8>
 8008848:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800884c:	46b0      	mov	r8, r6
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800884e:	e007      	b.n	8008860 <f_printf+0x1e8>
		j = i; d = (f & 1) ? '0' : ' ';
 8008850:	f04f 0a20 	mov.w	sl, #32
 8008854:	e7fa      	b.n	800884c <f_printf+0x1d4>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008856:	4651      	mov	r1, sl
 8008858:	a808      	add	r0, sp, #32
 800885a:	f7ff fdfa 	bl	8008452 <putc_bfd>
 800885e:	46c8      	mov	r8, r9
 8008860:	f017 0f02 	tst.w	r7, #2
 8008864:	d104      	bne.n	8008870 <f_printf+0x1f8>
 8008866:	f108 0901 	add.w	r9, r8, #1
 800886a:	45a0      	cmp	r8, r4
 800886c:	d3f3      	bcc.n	8008856 <f_printf+0x1de>
 800886e:	46c8      	mov	r8, r9
		do {
			putc_bfd(&pb, str[--i]);
 8008870:	3e01      	subs	r6, #1
 8008872:	ab1c      	add	r3, sp, #112	; 0x70
 8008874:	4433      	add	r3, r6
 8008876:	f813 1c70 	ldrb.w	r1, [r3, #-112]
 800887a:	a808      	add	r0, sp, #32
 800887c:	f7ff fde9 	bl	8008452 <putc_bfd>
		} while (i);
 8008880:	2e00      	cmp	r6, #0
 8008882:	d1f5      	bne.n	8008870 <f_printf+0x1f8>
		while (j++ < w) putc_bfd(&pb, d);
 8008884:	f108 0601 	add.w	r6, r8, #1
 8008888:	45a0      	cmp	r8, r4
 800888a:	f4bf af06 	bcs.w	800869a <f_printf+0x22>
 800888e:	4651      	mov	r1, sl
 8008890:	a808      	add	r0, sp, #32
 8008892:	f7ff fdde 	bl	8008452 <putc_bfd>
 8008896:	46b0      	mov	r8, r6
 8008898:	e7f4      	b.n	8008884 <f_printf+0x20c>
	}

	va_end(arp);

	return putc_flush(&pb);
 800889a:	a808      	add	r0, sp, #32
 800889c:	f7ff fe00 	bl	80084a0 <putc_flush>
}
 80088a0:	b01d      	add	sp, #116	; 0x74
 80088a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a6:	b003      	add	sp, #12
 80088a8:	4770      	bx	lr
	...

080088ac <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80088ac:	4b10      	ldr	r3, [pc, #64]	; (80088f0 <FATFS_LinkDriverEx+0x44>)
 80088ae:	7a5b      	ldrb	r3, [r3, #9]
 80088b0:	b9e3      	cbnz	r3, 80088ec <FATFS_LinkDriverEx+0x40>
{
 80088b2:	b470      	push	{r4, r5, r6}
 80088b4:	4604      	mov	r4, r0
 80088b6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 80088ba:	4b0d      	ldr	r3, [pc, #52]	; (80088f0 <FATFS_LinkDriverEx+0x44>)
 80088bc:	7a5d      	ldrb	r5, [r3, #9]
 80088be:	b2ed      	uxtb	r5, r5
 80088c0:	2600      	movs	r6, #0
 80088c2:	555e      	strb	r6, [r3, r5]
    disk.drv[disk.nbr] = drv;
 80088c4:	7a5d      	ldrb	r5, [r3, #9]
 80088c6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80088ca:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80088cc:	7a5c      	ldrb	r4, [r3, #9]
 80088ce:	441c      	add	r4, r3
 80088d0:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 80088d2:	7a5a      	ldrb	r2, [r3, #9]
 80088d4:	1c54      	adds	r4, r2, #1
 80088d6:	b2e4      	uxtb	r4, r4
 80088d8:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 80088da:	3230      	adds	r2, #48	; 0x30
 80088dc:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80088de:	233a      	movs	r3, #58	; 0x3a
 80088e0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80088e2:	232f      	movs	r3, #47	; 0x2f
 80088e4:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80088e6:	70ce      	strb	r6, [r1, #3]
    ret = 0;
  }

  return ret;
}
 80088e8:	bc70      	pop	{r4, r5, r6}
 80088ea:	4770      	bx	lr
  uint8_t ret = 1;
 80088ec:	2001      	movs	r0, #1
}
 80088ee:	4770      	bx	lr
 80088f0:	20000264 	.word	0x20000264

080088f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80088f4:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80088f6:	2200      	movs	r2, #0
 80088f8:	f7ff ffd8 	bl	80088ac <FATFS_LinkDriverEx>
}
 80088fc:	bd08      	pop	{r3, pc}
	...

08008900 <__errno>:
 8008900:	4b01      	ldr	r3, [pc, #4]	; (8008908 <__errno+0x8>)
 8008902:	6818      	ldr	r0, [r3, #0]
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	20000040 	.word	0x20000040

0800890c <__libc_init_array>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	4d0d      	ldr	r5, [pc, #52]	; (8008944 <__libc_init_array+0x38>)
 8008910:	4c0d      	ldr	r4, [pc, #52]	; (8008948 <__libc_init_array+0x3c>)
 8008912:	1b64      	subs	r4, r4, r5
 8008914:	10a4      	asrs	r4, r4, #2
 8008916:	2600      	movs	r6, #0
 8008918:	42a6      	cmp	r6, r4
 800891a:	d109      	bne.n	8008930 <__libc_init_array+0x24>
 800891c:	4d0b      	ldr	r5, [pc, #44]	; (800894c <__libc_init_array+0x40>)
 800891e:	4c0c      	ldr	r4, [pc, #48]	; (8008950 <__libc_init_array+0x44>)
 8008920:	f003 fe78 	bl	800c614 <_init>
 8008924:	1b64      	subs	r4, r4, r5
 8008926:	10a4      	asrs	r4, r4, #2
 8008928:	2600      	movs	r6, #0
 800892a:	42a6      	cmp	r6, r4
 800892c:	d105      	bne.n	800893a <__libc_init_array+0x2e>
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	f855 3b04 	ldr.w	r3, [r5], #4
 8008934:	4798      	blx	r3
 8008936:	3601      	adds	r6, #1
 8008938:	e7ee      	b.n	8008918 <__libc_init_array+0xc>
 800893a:	f855 3b04 	ldr.w	r3, [r5], #4
 800893e:	4798      	blx	r3
 8008940:	3601      	adds	r6, #1
 8008942:	e7f2      	b.n	800892a <__libc_init_array+0x1e>
 8008944:	0800cd70 	.word	0x0800cd70
 8008948:	0800cd70 	.word	0x0800cd70
 800894c:	0800cd70 	.word	0x0800cd70
 8008950:	0800cd74 	.word	0x0800cd74

08008954 <memcpy>:
 8008954:	440a      	add	r2, r1
 8008956:	4291      	cmp	r1, r2
 8008958:	f100 33ff 	add.w	r3, r0, #4294967295
 800895c:	d100      	bne.n	8008960 <memcpy+0xc>
 800895e:	4770      	bx	lr
 8008960:	b510      	push	{r4, lr}
 8008962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800896a:	4291      	cmp	r1, r2
 800896c:	d1f9      	bne.n	8008962 <memcpy+0xe>
 800896e:	bd10      	pop	{r4, pc}

08008970 <memset>:
 8008970:	4402      	add	r2, r0
 8008972:	4603      	mov	r3, r0
 8008974:	4293      	cmp	r3, r2
 8008976:	d100      	bne.n	800897a <memset+0xa>
 8008978:	4770      	bx	lr
 800897a:	f803 1b01 	strb.w	r1, [r3], #1
 800897e:	e7f9      	b.n	8008974 <memset+0x4>

08008980 <__cvt>:
 8008980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	ec55 4b10 	vmov	r4, r5, d0
 8008988:	2d00      	cmp	r5, #0
 800898a:	460e      	mov	r6, r1
 800898c:	4619      	mov	r1, r3
 800898e:	462b      	mov	r3, r5
 8008990:	bfbb      	ittet	lt
 8008992:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008996:	461d      	movlt	r5, r3
 8008998:	2300      	movge	r3, #0
 800899a:	232d      	movlt	r3, #45	; 0x2d
 800899c:	700b      	strb	r3, [r1, #0]
 800899e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80089a4:	4691      	mov	r9, r2
 80089a6:	f023 0820 	bic.w	r8, r3, #32
 80089aa:	bfbc      	itt	lt
 80089ac:	4622      	movlt	r2, r4
 80089ae:	4614      	movlt	r4, r2
 80089b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089b4:	d005      	beq.n	80089c2 <__cvt+0x42>
 80089b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80089ba:	d100      	bne.n	80089be <__cvt+0x3e>
 80089bc:	3601      	adds	r6, #1
 80089be:	2102      	movs	r1, #2
 80089c0:	e000      	b.n	80089c4 <__cvt+0x44>
 80089c2:	2103      	movs	r1, #3
 80089c4:	ab03      	add	r3, sp, #12
 80089c6:	9301      	str	r3, [sp, #4]
 80089c8:	ab02      	add	r3, sp, #8
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	ec45 4b10 	vmov	d0, r4, r5
 80089d0:	4653      	mov	r3, sl
 80089d2:	4632      	mov	r2, r6
 80089d4:	f000 fcf8 	bl	80093c8 <_dtoa_r>
 80089d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80089dc:	4607      	mov	r7, r0
 80089de:	d102      	bne.n	80089e6 <__cvt+0x66>
 80089e0:	f019 0f01 	tst.w	r9, #1
 80089e4:	d022      	beq.n	8008a2c <__cvt+0xac>
 80089e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80089ea:	eb07 0906 	add.w	r9, r7, r6
 80089ee:	d110      	bne.n	8008a12 <__cvt+0x92>
 80089f0:	783b      	ldrb	r3, [r7, #0]
 80089f2:	2b30      	cmp	r3, #48	; 0x30
 80089f4:	d10a      	bne.n	8008a0c <__cvt+0x8c>
 80089f6:	2200      	movs	r2, #0
 80089f8:	2300      	movs	r3, #0
 80089fa:	4620      	mov	r0, r4
 80089fc:	4629      	mov	r1, r5
 80089fe:	f7f8 f86b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a02:	b918      	cbnz	r0, 8008a0c <__cvt+0x8c>
 8008a04:	f1c6 0601 	rsb	r6, r6, #1
 8008a08:	f8ca 6000 	str.w	r6, [sl]
 8008a0c:	f8da 3000 	ldr.w	r3, [sl]
 8008a10:	4499      	add	r9, r3
 8008a12:	2200      	movs	r2, #0
 8008a14:	2300      	movs	r3, #0
 8008a16:	4620      	mov	r0, r4
 8008a18:	4629      	mov	r1, r5
 8008a1a:	f7f8 f85d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a1e:	b108      	cbz	r0, 8008a24 <__cvt+0xa4>
 8008a20:	f8cd 900c 	str.w	r9, [sp, #12]
 8008a24:	2230      	movs	r2, #48	; 0x30
 8008a26:	9b03      	ldr	r3, [sp, #12]
 8008a28:	454b      	cmp	r3, r9
 8008a2a:	d307      	bcc.n	8008a3c <__cvt+0xbc>
 8008a2c:	9b03      	ldr	r3, [sp, #12]
 8008a2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a30:	1bdb      	subs	r3, r3, r7
 8008a32:	4638      	mov	r0, r7
 8008a34:	6013      	str	r3, [r2, #0]
 8008a36:	b004      	add	sp, #16
 8008a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a3c:	1c59      	adds	r1, r3, #1
 8008a3e:	9103      	str	r1, [sp, #12]
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	e7f0      	b.n	8008a26 <__cvt+0xa6>

08008a44 <__exponent>:
 8008a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a46:	4603      	mov	r3, r0
 8008a48:	2900      	cmp	r1, #0
 8008a4a:	bfb8      	it	lt
 8008a4c:	4249      	neglt	r1, r1
 8008a4e:	f803 2b02 	strb.w	r2, [r3], #2
 8008a52:	bfb4      	ite	lt
 8008a54:	222d      	movlt	r2, #45	; 0x2d
 8008a56:	222b      	movge	r2, #43	; 0x2b
 8008a58:	2909      	cmp	r1, #9
 8008a5a:	7042      	strb	r2, [r0, #1]
 8008a5c:	dd2a      	ble.n	8008ab4 <__exponent+0x70>
 8008a5e:	f10d 0407 	add.w	r4, sp, #7
 8008a62:	46a4      	mov	ip, r4
 8008a64:	270a      	movs	r7, #10
 8008a66:	46a6      	mov	lr, r4
 8008a68:	460a      	mov	r2, r1
 8008a6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008a6e:	fb07 1516 	mls	r5, r7, r6, r1
 8008a72:	3530      	adds	r5, #48	; 0x30
 8008a74:	2a63      	cmp	r2, #99	; 0x63
 8008a76:	f104 34ff 	add.w	r4, r4, #4294967295
 8008a7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008a7e:	4631      	mov	r1, r6
 8008a80:	dcf1      	bgt.n	8008a66 <__exponent+0x22>
 8008a82:	3130      	adds	r1, #48	; 0x30
 8008a84:	f1ae 0502 	sub.w	r5, lr, #2
 8008a88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008a8c:	1c44      	adds	r4, r0, #1
 8008a8e:	4629      	mov	r1, r5
 8008a90:	4561      	cmp	r1, ip
 8008a92:	d30a      	bcc.n	8008aaa <__exponent+0x66>
 8008a94:	f10d 0209 	add.w	r2, sp, #9
 8008a98:	eba2 020e 	sub.w	r2, r2, lr
 8008a9c:	4565      	cmp	r5, ip
 8008a9e:	bf88      	it	hi
 8008aa0:	2200      	movhi	r2, #0
 8008aa2:	4413      	add	r3, r2
 8008aa4:	1a18      	subs	r0, r3, r0
 8008aa6:	b003      	add	sp, #12
 8008aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ab2:	e7ed      	b.n	8008a90 <__exponent+0x4c>
 8008ab4:	2330      	movs	r3, #48	; 0x30
 8008ab6:	3130      	adds	r1, #48	; 0x30
 8008ab8:	7083      	strb	r3, [r0, #2]
 8008aba:	70c1      	strb	r1, [r0, #3]
 8008abc:	1d03      	adds	r3, r0, #4
 8008abe:	e7f1      	b.n	8008aa4 <__exponent+0x60>

08008ac0 <_printf_float>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	ed2d 8b02 	vpush	{d8}
 8008ac8:	b08d      	sub	sp, #52	; 0x34
 8008aca:	460c      	mov	r4, r1
 8008acc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ad0:	4616      	mov	r6, r2
 8008ad2:	461f      	mov	r7, r3
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	f001 fa63 	bl	8009fa0 <_localeconv_r>
 8008ada:	f8d0 a000 	ldr.w	sl, [r0]
 8008ade:	4650      	mov	r0, sl
 8008ae0:	f7f7 fb7e 	bl	80001e0 <strlen>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	f8d8 3000 	ldr.w	r3, [r8]
 8008af0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008af4:	3307      	adds	r3, #7
 8008af6:	f023 0307 	bic.w	r3, r3, #7
 8008afa:	f103 0208 	add.w	r2, r3, #8
 8008afe:	f8c8 2000 	str.w	r2, [r8]
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008b0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008b0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008b12:	9307      	str	r3, [sp, #28]
 8008b14:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b18:	ee08 0a10 	vmov	s16, r0
 8008b1c:	4b9f      	ldr	r3, [pc, #636]	; (8008d9c <_printf_float+0x2dc>)
 8008b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b22:	f04f 32ff 	mov.w	r2, #4294967295
 8008b26:	f7f8 f809 	bl	8000b3c <__aeabi_dcmpun>
 8008b2a:	bb88      	cbnz	r0, 8008b90 <_printf_float+0xd0>
 8008b2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b30:	4b9a      	ldr	r3, [pc, #616]	; (8008d9c <_printf_float+0x2dc>)
 8008b32:	f04f 32ff 	mov.w	r2, #4294967295
 8008b36:	f7f7 ffe3 	bl	8000b00 <__aeabi_dcmple>
 8008b3a:	bb48      	cbnz	r0, 8008b90 <_printf_float+0xd0>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	4640      	mov	r0, r8
 8008b42:	4649      	mov	r1, r9
 8008b44:	f7f7 ffd2 	bl	8000aec <__aeabi_dcmplt>
 8008b48:	b110      	cbz	r0, 8008b50 <_printf_float+0x90>
 8008b4a:	232d      	movs	r3, #45	; 0x2d
 8008b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b50:	4b93      	ldr	r3, [pc, #588]	; (8008da0 <_printf_float+0x2e0>)
 8008b52:	4894      	ldr	r0, [pc, #592]	; (8008da4 <_printf_float+0x2e4>)
 8008b54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008b58:	bf94      	ite	ls
 8008b5a:	4698      	movls	r8, r3
 8008b5c:	4680      	movhi	r8, r0
 8008b5e:	2303      	movs	r3, #3
 8008b60:	6123      	str	r3, [r4, #16]
 8008b62:	9b05      	ldr	r3, [sp, #20]
 8008b64:	f023 0204 	bic.w	r2, r3, #4
 8008b68:	6022      	str	r2, [r4, #0]
 8008b6a:	f04f 0900 	mov.w	r9, #0
 8008b6e:	9700      	str	r7, [sp, #0]
 8008b70:	4633      	mov	r3, r6
 8008b72:	aa0b      	add	r2, sp, #44	; 0x2c
 8008b74:	4621      	mov	r1, r4
 8008b76:	4628      	mov	r0, r5
 8008b78:	f000 f9d8 	bl	8008f2c <_printf_common>
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f040 8090 	bne.w	8008ca2 <_printf_float+0x1e2>
 8008b82:	f04f 30ff 	mov.w	r0, #4294967295
 8008b86:	b00d      	add	sp, #52	; 0x34
 8008b88:	ecbd 8b02 	vpop	{d8}
 8008b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b90:	4642      	mov	r2, r8
 8008b92:	464b      	mov	r3, r9
 8008b94:	4640      	mov	r0, r8
 8008b96:	4649      	mov	r1, r9
 8008b98:	f7f7 ffd0 	bl	8000b3c <__aeabi_dcmpun>
 8008b9c:	b140      	cbz	r0, 8008bb0 <_printf_float+0xf0>
 8008b9e:	464b      	mov	r3, r9
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bfbc      	itt	lt
 8008ba4:	232d      	movlt	r3, #45	; 0x2d
 8008ba6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008baa:	487f      	ldr	r0, [pc, #508]	; (8008da8 <_printf_float+0x2e8>)
 8008bac:	4b7f      	ldr	r3, [pc, #508]	; (8008dac <_printf_float+0x2ec>)
 8008bae:	e7d1      	b.n	8008b54 <_printf_float+0x94>
 8008bb0:	6863      	ldr	r3, [r4, #4]
 8008bb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008bb6:	9206      	str	r2, [sp, #24]
 8008bb8:	1c5a      	adds	r2, r3, #1
 8008bba:	d13f      	bne.n	8008c3c <_printf_float+0x17c>
 8008bbc:	2306      	movs	r3, #6
 8008bbe:	6063      	str	r3, [r4, #4]
 8008bc0:	9b05      	ldr	r3, [sp, #20]
 8008bc2:	6861      	ldr	r1, [r4, #4]
 8008bc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	ab0a      	add	r3, sp, #40	; 0x28
 8008bce:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008bd2:	ab09      	add	r3, sp, #36	; 0x24
 8008bd4:	ec49 8b10 	vmov	d0, r8, r9
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	6022      	str	r2, [r4, #0]
 8008bdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008be0:	4628      	mov	r0, r5
 8008be2:	f7ff fecd 	bl	8008980 <__cvt>
 8008be6:	9b06      	ldr	r3, [sp, #24]
 8008be8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bea:	2b47      	cmp	r3, #71	; 0x47
 8008bec:	4680      	mov	r8, r0
 8008bee:	d108      	bne.n	8008c02 <_printf_float+0x142>
 8008bf0:	1cc8      	adds	r0, r1, #3
 8008bf2:	db02      	blt.n	8008bfa <_printf_float+0x13a>
 8008bf4:	6863      	ldr	r3, [r4, #4]
 8008bf6:	4299      	cmp	r1, r3
 8008bf8:	dd41      	ble.n	8008c7e <_printf_float+0x1be>
 8008bfa:	f1ab 0b02 	sub.w	fp, fp, #2
 8008bfe:	fa5f fb8b 	uxtb.w	fp, fp
 8008c02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008c06:	d820      	bhi.n	8008c4a <_printf_float+0x18a>
 8008c08:	3901      	subs	r1, #1
 8008c0a:	465a      	mov	r2, fp
 8008c0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c10:	9109      	str	r1, [sp, #36]	; 0x24
 8008c12:	f7ff ff17 	bl	8008a44 <__exponent>
 8008c16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c18:	1813      	adds	r3, r2, r0
 8008c1a:	2a01      	cmp	r2, #1
 8008c1c:	4681      	mov	r9, r0
 8008c1e:	6123      	str	r3, [r4, #16]
 8008c20:	dc02      	bgt.n	8008c28 <_printf_float+0x168>
 8008c22:	6822      	ldr	r2, [r4, #0]
 8008c24:	07d2      	lsls	r2, r2, #31
 8008c26:	d501      	bpl.n	8008c2c <_printf_float+0x16c>
 8008c28:	3301      	adds	r3, #1
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d09c      	beq.n	8008b6e <_printf_float+0xae>
 8008c34:	232d      	movs	r3, #45	; 0x2d
 8008c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c3a:	e798      	b.n	8008b6e <_printf_float+0xae>
 8008c3c:	9a06      	ldr	r2, [sp, #24]
 8008c3e:	2a47      	cmp	r2, #71	; 0x47
 8008c40:	d1be      	bne.n	8008bc0 <_printf_float+0x100>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1bc      	bne.n	8008bc0 <_printf_float+0x100>
 8008c46:	2301      	movs	r3, #1
 8008c48:	e7b9      	b.n	8008bbe <_printf_float+0xfe>
 8008c4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008c4e:	d118      	bne.n	8008c82 <_printf_float+0x1c2>
 8008c50:	2900      	cmp	r1, #0
 8008c52:	6863      	ldr	r3, [r4, #4]
 8008c54:	dd0b      	ble.n	8008c6e <_printf_float+0x1ae>
 8008c56:	6121      	str	r1, [r4, #16]
 8008c58:	b913      	cbnz	r3, 8008c60 <_printf_float+0x1a0>
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	07d0      	lsls	r0, r2, #31
 8008c5e:	d502      	bpl.n	8008c66 <_printf_float+0x1a6>
 8008c60:	3301      	adds	r3, #1
 8008c62:	440b      	add	r3, r1
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c68:	f04f 0900 	mov.w	r9, #0
 8008c6c:	e7de      	b.n	8008c2c <_printf_float+0x16c>
 8008c6e:	b913      	cbnz	r3, 8008c76 <_printf_float+0x1b6>
 8008c70:	6822      	ldr	r2, [r4, #0]
 8008c72:	07d2      	lsls	r2, r2, #31
 8008c74:	d501      	bpl.n	8008c7a <_printf_float+0x1ba>
 8008c76:	3302      	adds	r3, #2
 8008c78:	e7f4      	b.n	8008c64 <_printf_float+0x1a4>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e7f2      	b.n	8008c64 <_printf_float+0x1a4>
 8008c7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c84:	4299      	cmp	r1, r3
 8008c86:	db05      	blt.n	8008c94 <_printf_float+0x1d4>
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	6121      	str	r1, [r4, #16]
 8008c8c:	07d8      	lsls	r0, r3, #31
 8008c8e:	d5ea      	bpl.n	8008c66 <_printf_float+0x1a6>
 8008c90:	1c4b      	adds	r3, r1, #1
 8008c92:	e7e7      	b.n	8008c64 <_printf_float+0x1a4>
 8008c94:	2900      	cmp	r1, #0
 8008c96:	bfd4      	ite	le
 8008c98:	f1c1 0202 	rsble	r2, r1, #2
 8008c9c:	2201      	movgt	r2, #1
 8008c9e:	4413      	add	r3, r2
 8008ca0:	e7e0      	b.n	8008c64 <_printf_float+0x1a4>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	055a      	lsls	r2, r3, #21
 8008ca6:	d407      	bmi.n	8008cb8 <_printf_float+0x1f8>
 8008ca8:	6923      	ldr	r3, [r4, #16]
 8008caa:	4642      	mov	r2, r8
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d12c      	bne.n	8008d10 <_printf_float+0x250>
 8008cb6:	e764      	b.n	8008b82 <_printf_float+0xc2>
 8008cb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008cbc:	f240 80e0 	bls.w	8008e80 <_printf_float+0x3c0>
 8008cc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f7f7 ff06 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d034      	beq.n	8008d3a <_printf_float+0x27a>
 8008cd0:	4a37      	ldr	r2, [pc, #220]	; (8008db0 <_printf_float+0x2f0>)
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	47b8      	blx	r7
 8008cda:	3001      	adds	r0, #1
 8008cdc:	f43f af51 	beq.w	8008b82 <_printf_float+0xc2>
 8008ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	db02      	blt.n	8008cee <_printf_float+0x22e>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	07d8      	lsls	r0, r3, #31
 8008cec:	d510      	bpl.n	8008d10 <_printf_float+0x250>
 8008cee:	ee18 3a10 	vmov	r3, s16
 8008cf2:	4652      	mov	r2, sl
 8008cf4:	4631      	mov	r1, r6
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	47b8      	blx	r7
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	f43f af41 	beq.w	8008b82 <_printf_float+0xc2>
 8008d00:	f04f 0800 	mov.w	r8, #0
 8008d04:	f104 091a 	add.w	r9, r4, #26
 8008d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	4543      	cmp	r3, r8
 8008d0e:	dc09      	bgt.n	8008d24 <_printf_float+0x264>
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	079b      	lsls	r3, r3, #30
 8008d14:	f100 8105 	bmi.w	8008f22 <_printf_float+0x462>
 8008d18:	68e0      	ldr	r0, [r4, #12]
 8008d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d1c:	4298      	cmp	r0, r3
 8008d1e:	bfb8      	it	lt
 8008d20:	4618      	movlt	r0, r3
 8008d22:	e730      	b.n	8008b86 <_printf_float+0xc6>
 8008d24:	2301      	movs	r3, #1
 8008d26:	464a      	mov	r2, r9
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	47b8      	blx	r7
 8008d2e:	3001      	adds	r0, #1
 8008d30:	f43f af27 	beq.w	8008b82 <_printf_float+0xc2>
 8008d34:	f108 0801 	add.w	r8, r8, #1
 8008d38:	e7e6      	b.n	8008d08 <_printf_float+0x248>
 8008d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	dc39      	bgt.n	8008db4 <_printf_float+0x2f4>
 8008d40:	4a1b      	ldr	r2, [pc, #108]	; (8008db0 <_printf_float+0x2f0>)
 8008d42:	2301      	movs	r3, #1
 8008d44:	4631      	mov	r1, r6
 8008d46:	4628      	mov	r0, r5
 8008d48:	47b8      	blx	r7
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	f43f af19 	beq.w	8008b82 <_printf_float+0xc2>
 8008d50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d54:	4313      	orrs	r3, r2
 8008d56:	d102      	bne.n	8008d5e <_printf_float+0x29e>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	07d9      	lsls	r1, r3, #31
 8008d5c:	d5d8      	bpl.n	8008d10 <_printf_float+0x250>
 8008d5e:	ee18 3a10 	vmov	r3, s16
 8008d62:	4652      	mov	r2, sl
 8008d64:	4631      	mov	r1, r6
 8008d66:	4628      	mov	r0, r5
 8008d68:	47b8      	blx	r7
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	f43f af09 	beq.w	8008b82 <_printf_float+0xc2>
 8008d70:	f04f 0900 	mov.w	r9, #0
 8008d74:	f104 0a1a 	add.w	sl, r4, #26
 8008d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7a:	425b      	negs	r3, r3
 8008d7c:	454b      	cmp	r3, r9
 8008d7e:	dc01      	bgt.n	8008d84 <_printf_float+0x2c4>
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	e792      	b.n	8008caa <_printf_float+0x1ea>
 8008d84:	2301      	movs	r3, #1
 8008d86:	4652      	mov	r2, sl
 8008d88:	4631      	mov	r1, r6
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	47b8      	blx	r7
 8008d8e:	3001      	adds	r0, #1
 8008d90:	f43f aef7 	beq.w	8008b82 <_printf_float+0xc2>
 8008d94:	f109 0901 	add.w	r9, r9, #1
 8008d98:	e7ee      	b.n	8008d78 <_printf_float+0x2b8>
 8008d9a:	bf00      	nop
 8008d9c:	7fefffff 	.word	0x7fefffff
 8008da0:	0800c944 	.word	0x0800c944
 8008da4:	0800c948 	.word	0x0800c948
 8008da8:	0800c950 	.word	0x0800c950
 8008dac:	0800c94c 	.word	0x0800c94c
 8008db0:	0800c954 	.word	0x0800c954
 8008db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008db8:	429a      	cmp	r2, r3
 8008dba:	bfa8      	it	ge
 8008dbc:	461a      	movge	r2, r3
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	4691      	mov	r9, r2
 8008dc2:	dc37      	bgt.n	8008e34 <_printf_float+0x374>
 8008dc4:	f04f 0b00 	mov.w	fp, #0
 8008dc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dcc:	f104 021a 	add.w	r2, r4, #26
 8008dd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008dd2:	9305      	str	r3, [sp, #20]
 8008dd4:	eba3 0309 	sub.w	r3, r3, r9
 8008dd8:	455b      	cmp	r3, fp
 8008dda:	dc33      	bgt.n	8008e44 <_printf_float+0x384>
 8008ddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008de0:	429a      	cmp	r2, r3
 8008de2:	db3b      	blt.n	8008e5c <_printf_float+0x39c>
 8008de4:	6823      	ldr	r3, [r4, #0]
 8008de6:	07da      	lsls	r2, r3, #31
 8008de8:	d438      	bmi.n	8008e5c <_printf_float+0x39c>
 8008dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dec:	9b05      	ldr	r3, [sp, #20]
 8008dee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	eba2 0901 	sub.w	r9, r2, r1
 8008df6:	4599      	cmp	r9, r3
 8008df8:	bfa8      	it	ge
 8008dfa:	4699      	movge	r9, r3
 8008dfc:	f1b9 0f00 	cmp.w	r9, #0
 8008e00:	dc35      	bgt.n	8008e6e <_printf_float+0x3ae>
 8008e02:	f04f 0800 	mov.w	r8, #0
 8008e06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e0a:	f104 0a1a 	add.w	sl, r4, #26
 8008e0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	eba3 0309 	sub.w	r3, r3, r9
 8008e18:	4543      	cmp	r3, r8
 8008e1a:	f77f af79 	ble.w	8008d10 <_printf_float+0x250>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	4652      	mov	r2, sl
 8008e22:	4631      	mov	r1, r6
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b8      	blx	r7
 8008e28:	3001      	adds	r0, #1
 8008e2a:	f43f aeaa 	beq.w	8008b82 <_printf_float+0xc2>
 8008e2e:	f108 0801 	add.w	r8, r8, #1
 8008e32:	e7ec      	b.n	8008e0e <_printf_float+0x34e>
 8008e34:	4613      	mov	r3, r2
 8008e36:	4631      	mov	r1, r6
 8008e38:	4642      	mov	r2, r8
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	47b8      	blx	r7
 8008e3e:	3001      	adds	r0, #1
 8008e40:	d1c0      	bne.n	8008dc4 <_printf_float+0x304>
 8008e42:	e69e      	b.n	8008b82 <_printf_float+0xc2>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4631      	mov	r1, r6
 8008e48:	4628      	mov	r0, r5
 8008e4a:	9205      	str	r2, [sp, #20]
 8008e4c:	47b8      	blx	r7
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f43f ae97 	beq.w	8008b82 <_printf_float+0xc2>
 8008e54:	9a05      	ldr	r2, [sp, #20]
 8008e56:	f10b 0b01 	add.w	fp, fp, #1
 8008e5a:	e7b9      	b.n	8008dd0 <_printf_float+0x310>
 8008e5c:	ee18 3a10 	vmov	r3, s16
 8008e60:	4652      	mov	r2, sl
 8008e62:	4631      	mov	r1, r6
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b8      	blx	r7
 8008e68:	3001      	adds	r0, #1
 8008e6a:	d1be      	bne.n	8008dea <_printf_float+0x32a>
 8008e6c:	e689      	b.n	8008b82 <_printf_float+0xc2>
 8008e6e:	9a05      	ldr	r2, [sp, #20]
 8008e70:	464b      	mov	r3, r9
 8008e72:	4442      	add	r2, r8
 8008e74:	4631      	mov	r1, r6
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d1c1      	bne.n	8008e02 <_printf_float+0x342>
 8008e7e:	e680      	b.n	8008b82 <_printf_float+0xc2>
 8008e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e82:	2a01      	cmp	r2, #1
 8008e84:	dc01      	bgt.n	8008e8a <_printf_float+0x3ca>
 8008e86:	07db      	lsls	r3, r3, #31
 8008e88:	d538      	bpl.n	8008efc <_printf_float+0x43c>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	4642      	mov	r2, r8
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4628      	mov	r0, r5
 8008e92:	47b8      	blx	r7
 8008e94:	3001      	adds	r0, #1
 8008e96:	f43f ae74 	beq.w	8008b82 <_printf_float+0xc2>
 8008e9a:	ee18 3a10 	vmov	r3, s16
 8008e9e:	4652      	mov	r2, sl
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b8      	blx	r7
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	f43f ae6b 	beq.w	8008b82 <_printf_float+0xc2>
 8008eac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f7f7 fe10 	bl	8000ad8 <__aeabi_dcmpeq>
 8008eb8:	b9d8      	cbnz	r0, 8008ef2 <_printf_float+0x432>
 8008eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ebc:	f108 0201 	add.w	r2, r8, #1
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	47b8      	blx	r7
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d10e      	bne.n	8008eea <_printf_float+0x42a>
 8008ecc:	e659      	b.n	8008b82 <_printf_float+0xc2>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	47b8      	blx	r7
 8008ed8:	3001      	adds	r0, #1
 8008eda:	f43f ae52 	beq.w	8008b82 <_printf_float+0xc2>
 8008ede:	f108 0801 	add.w	r8, r8, #1
 8008ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	4543      	cmp	r3, r8
 8008ee8:	dcf1      	bgt.n	8008ece <_printf_float+0x40e>
 8008eea:	464b      	mov	r3, r9
 8008eec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ef0:	e6dc      	b.n	8008cac <_printf_float+0x1ec>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	f104 0a1a 	add.w	sl, r4, #26
 8008efa:	e7f2      	b.n	8008ee2 <_printf_float+0x422>
 8008efc:	2301      	movs	r3, #1
 8008efe:	4642      	mov	r2, r8
 8008f00:	e7df      	b.n	8008ec2 <_printf_float+0x402>
 8008f02:	2301      	movs	r3, #1
 8008f04:	464a      	mov	r2, r9
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	47b8      	blx	r7
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	f43f ae38 	beq.w	8008b82 <_printf_float+0xc2>
 8008f12:	f108 0801 	add.w	r8, r8, #1
 8008f16:	68e3      	ldr	r3, [r4, #12]
 8008f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f1a:	1a5b      	subs	r3, r3, r1
 8008f1c:	4543      	cmp	r3, r8
 8008f1e:	dcf0      	bgt.n	8008f02 <_printf_float+0x442>
 8008f20:	e6fa      	b.n	8008d18 <_printf_float+0x258>
 8008f22:	f04f 0800 	mov.w	r8, #0
 8008f26:	f104 0919 	add.w	r9, r4, #25
 8008f2a:	e7f4      	b.n	8008f16 <_printf_float+0x456>

08008f2c <_printf_common>:
 8008f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f30:	4616      	mov	r6, r2
 8008f32:	4699      	mov	r9, r3
 8008f34:	688a      	ldr	r2, [r1, #8]
 8008f36:	690b      	ldr	r3, [r1, #16]
 8008f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	bfb8      	it	lt
 8008f40:	4613      	movlt	r3, r2
 8008f42:	6033      	str	r3, [r6, #0]
 8008f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f48:	4607      	mov	r7, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	b10a      	cbz	r2, 8008f52 <_printf_common+0x26>
 8008f4e:	3301      	adds	r3, #1
 8008f50:	6033      	str	r3, [r6, #0]
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	0699      	lsls	r1, r3, #26
 8008f56:	bf42      	ittt	mi
 8008f58:	6833      	ldrmi	r3, [r6, #0]
 8008f5a:	3302      	addmi	r3, #2
 8008f5c:	6033      	strmi	r3, [r6, #0]
 8008f5e:	6825      	ldr	r5, [r4, #0]
 8008f60:	f015 0506 	ands.w	r5, r5, #6
 8008f64:	d106      	bne.n	8008f74 <_printf_common+0x48>
 8008f66:	f104 0a19 	add.w	sl, r4, #25
 8008f6a:	68e3      	ldr	r3, [r4, #12]
 8008f6c:	6832      	ldr	r2, [r6, #0]
 8008f6e:	1a9b      	subs	r3, r3, r2
 8008f70:	42ab      	cmp	r3, r5
 8008f72:	dc26      	bgt.n	8008fc2 <_printf_common+0x96>
 8008f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f78:	1e13      	subs	r3, r2, #0
 8008f7a:	6822      	ldr	r2, [r4, #0]
 8008f7c:	bf18      	it	ne
 8008f7e:	2301      	movne	r3, #1
 8008f80:	0692      	lsls	r2, r2, #26
 8008f82:	d42b      	bmi.n	8008fdc <_printf_common+0xb0>
 8008f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f88:	4649      	mov	r1, r9
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	47c0      	blx	r8
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d01e      	beq.n	8008fd0 <_printf_common+0xa4>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	68e5      	ldr	r5, [r4, #12]
 8008f96:	6832      	ldr	r2, [r6, #0]
 8008f98:	f003 0306 	and.w	r3, r3, #6
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	bf08      	it	eq
 8008fa0:	1aad      	subeq	r5, r5, r2
 8008fa2:	68a3      	ldr	r3, [r4, #8]
 8008fa4:	6922      	ldr	r2, [r4, #16]
 8008fa6:	bf0c      	ite	eq
 8008fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fac:	2500      	movne	r5, #0
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	bfc4      	itt	gt
 8008fb2:	1a9b      	subgt	r3, r3, r2
 8008fb4:	18ed      	addgt	r5, r5, r3
 8008fb6:	2600      	movs	r6, #0
 8008fb8:	341a      	adds	r4, #26
 8008fba:	42b5      	cmp	r5, r6
 8008fbc:	d11a      	bne.n	8008ff4 <_printf_common+0xc8>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e008      	b.n	8008fd4 <_printf_common+0xa8>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	4652      	mov	r2, sl
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	4638      	mov	r0, r7
 8008fca:	47c0      	blx	r8
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d103      	bne.n	8008fd8 <_printf_common+0xac>
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd8:	3501      	adds	r5, #1
 8008fda:	e7c6      	b.n	8008f6a <_printf_common+0x3e>
 8008fdc:	18e1      	adds	r1, r4, r3
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	2030      	movs	r0, #48	; 0x30
 8008fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fe6:	4422      	add	r2, r4
 8008fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ff0:	3302      	adds	r3, #2
 8008ff2:	e7c7      	b.n	8008f84 <_printf_common+0x58>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	4649      	mov	r1, r9
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	47c0      	blx	r8
 8008ffe:	3001      	adds	r0, #1
 8009000:	d0e6      	beq.n	8008fd0 <_printf_common+0xa4>
 8009002:	3601      	adds	r6, #1
 8009004:	e7d9      	b.n	8008fba <_printf_common+0x8e>
	...

08009008 <_printf_i>:
 8009008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800900c:	460c      	mov	r4, r1
 800900e:	4691      	mov	r9, r2
 8009010:	7e27      	ldrb	r7, [r4, #24]
 8009012:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009014:	2f78      	cmp	r7, #120	; 0x78
 8009016:	4680      	mov	r8, r0
 8009018:	469a      	mov	sl, r3
 800901a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800901e:	d807      	bhi.n	8009030 <_printf_i+0x28>
 8009020:	2f62      	cmp	r7, #98	; 0x62
 8009022:	d80a      	bhi.n	800903a <_printf_i+0x32>
 8009024:	2f00      	cmp	r7, #0
 8009026:	f000 80d8 	beq.w	80091da <_printf_i+0x1d2>
 800902a:	2f58      	cmp	r7, #88	; 0x58
 800902c:	f000 80a3 	beq.w	8009176 <_printf_i+0x16e>
 8009030:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009038:	e03a      	b.n	80090b0 <_printf_i+0xa8>
 800903a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800903e:	2b15      	cmp	r3, #21
 8009040:	d8f6      	bhi.n	8009030 <_printf_i+0x28>
 8009042:	a001      	add	r0, pc, #4	; (adr r0, 8009048 <_printf_i+0x40>)
 8009044:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009048:	080090a1 	.word	0x080090a1
 800904c:	080090b5 	.word	0x080090b5
 8009050:	08009031 	.word	0x08009031
 8009054:	08009031 	.word	0x08009031
 8009058:	08009031 	.word	0x08009031
 800905c:	08009031 	.word	0x08009031
 8009060:	080090b5 	.word	0x080090b5
 8009064:	08009031 	.word	0x08009031
 8009068:	08009031 	.word	0x08009031
 800906c:	08009031 	.word	0x08009031
 8009070:	08009031 	.word	0x08009031
 8009074:	080091c1 	.word	0x080091c1
 8009078:	080090e5 	.word	0x080090e5
 800907c:	080091a3 	.word	0x080091a3
 8009080:	08009031 	.word	0x08009031
 8009084:	08009031 	.word	0x08009031
 8009088:	080091e3 	.word	0x080091e3
 800908c:	08009031 	.word	0x08009031
 8009090:	080090e5 	.word	0x080090e5
 8009094:	08009031 	.word	0x08009031
 8009098:	08009031 	.word	0x08009031
 800909c:	080091ab 	.word	0x080091ab
 80090a0:	680b      	ldr	r3, [r1, #0]
 80090a2:	1d1a      	adds	r2, r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	600a      	str	r2, [r1, #0]
 80090a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090b0:	2301      	movs	r3, #1
 80090b2:	e0a3      	b.n	80091fc <_printf_i+0x1f4>
 80090b4:	6825      	ldr	r5, [r4, #0]
 80090b6:	6808      	ldr	r0, [r1, #0]
 80090b8:	062e      	lsls	r6, r5, #24
 80090ba:	f100 0304 	add.w	r3, r0, #4
 80090be:	d50a      	bpl.n	80090d6 <_printf_i+0xce>
 80090c0:	6805      	ldr	r5, [r0, #0]
 80090c2:	600b      	str	r3, [r1, #0]
 80090c4:	2d00      	cmp	r5, #0
 80090c6:	da03      	bge.n	80090d0 <_printf_i+0xc8>
 80090c8:	232d      	movs	r3, #45	; 0x2d
 80090ca:	426d      	negs	r5, r5
 80090cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d0:	485e      	ldr	r0, [pc, #376]	; (800924c <_printf_i+0x244>)
 80090d2:	230a      	movs	r3, #10
 80090d4:	e019      	b.n	800910a <_printf_i+0x102>
 80090d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80090da:	6805      	ldr	r5, [r0, #0]
 80090dc:	600b      	str	r3, [r1, #0]
 80090de:	bf18      	it	ne
 80090e0:	b22d      	sxthne	r5, r5
 80090e2:	e7ef      	b.n	80090c4 <_printf_i+0xbc>
 80090e4:	680b      	ldr	r3, [r1, #0]
 80090e6:	6825      	ldr	r5, [r4, #0]
 80090e8:	1d18      	adds	r0, r3, #4
 80090ea:	6008      	str	r0, [r1, #0]
 80090ec:	0628      	lsls	r0, r5, #24
 80090ee:	d501      	bpl.n	80090f4 <_printf_i+0xec>
 80090f0:	681d      	ldr	r5, [r3, #0]
 80090f2:	e002      	b.n	80090fa <_printf_i+0xf2>
 80090f4:	0669      	lsls	r1, r5, #25
 80090f6:	d5fb      	bpl.n	80090f0 <_printf_i+0xe8>
 80090f8:	881d      	ldrh	r5, [r3, #0]
 80090fa:	4854      	ldr	r0, [pc, #336]	; (800924c <_printf_i+0x244>)
 80090fc:	2f6f      	cmp	r7, #111	; 0x6f
 80090fe:	bf0c      	ite	eq
 8009100:	2308      	moveq	r3, #8
 8009102:	230a      	movne	r3, #10
 8009104:	2100      	movs	r1, #0
 8009106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800910a:	6866      	ldr	r6, [r4, #4]
 800910c:	60a6      	str	r6, [r4, #8]
 800910e:	2e00      	cmp	r6, #0
 8009110:	bfa2      	ittt	ge
 8009112:	6821      	ldrge	r1, [r4, #0]
 8009114:	f021 0104 	bicge.w	r1, r1, #4
 8009118:	6021      	strge	r1, [r4, #0]
 800911a:	b90d      	cbnz	r5, 8009120 <_printf_i+0x118>
 800911c:	2e00      	cmp	r6, #0
 800911e:	d04d      	beq.n	80091bc <_printf_i+0x1b4>
 8009120:	4616      	mov	r6, r2
 8009122:	fbb5 f1f3 	udiv	r1, r5, r3
 8009126:	fb03 5711 	mls	r7, r3, r1, r5
 800912a:	5dc7      	ldrb	r7, [r0, r7]
 800912c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009130:	462f      	mov	r7, r5
 8009132:	42bb      	cmp	r3, r7
 8009134:	460d      	mov	r5, r1
 8009136:	d9f4      	bls.n	8009122 <_printf_i+0x11a>
 8009138:	2b08      	cmp	r3, #8
 800913a:	d10b      	bne.n	8009154 <_printf_i+0x14c>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	07df      	lsls	r7, r3, #31
 8009140:	d508      	bpl.n	8009154 <_printf_i+0x14c>
 8009142:	6923      	ldr	r3, [r4, #16]
 8009144:	6861      	ldr	r1, [r4, #4]
 8009146:	4299      	cmp	r1, r3
 8009148:	bfde      	ittt	le
 800914a:	2330      	movle	r3, #48	; 0x30
 800914c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009150:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009154:	1b92      	subs	r2, r2, r6
 8009156:	6122      	str	r2, [r4, #16]
 8009158:	f8cd a000 	str.w	sl, [sp]
 800915c:	464b      	mov	r3, r9
 800915e:	aa03      	add	r2, sp, #12
 8009160:	4621      	mov	r1, r4
 8009162:	4640      	mov	r0, r8
 8009164:	f7ff fee2 	bl	8008f2c <_printf_common>
 8009168:	3001      	adds	r0, #1
 800916a:	d14c      	bne.n	8009206 <_printf_i+0x1fe>
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	b004      	add	sp, #16
 8009172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009176:	4835      	ldr	r0, [pc, #212]	; (800924c <_printf_i+0x244>)
 8009178:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	680e      	ldr	r6, [r1, #0]
 8009180:	061f      	lsls	r7, r3, #24
 8009182:	f856 5b04 	ldr.w	r5, [r6], #4
 8009186:	600e      	str	r6, [r1, #0]
 8009188:	d514      	bpl.n	80091b4 <_printf_i+0x1ac>
 800918a:	07d9      	lsls	r1, r3, #31
 800918c:	bf44      	itt	mi
 800918e:	f043 0320 	orrmi.w	r3, r3, #32
 8009192:	6023      	strmi	r3, [r4, #0]
 8009194:	b91d      	cbnz	r5, 800919e <_printf_i+0x196>
 8009196:	6823      	ldr	r3, [r4, #0]
 8009198:	f023 0320 	bic.w	r3, r3, #32
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	2310      	movs	r3, #16
 80091a0:	e7b0      	b.n	8009104 <_printf_i+0xfc>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	f043 0320 	orr.w	r3, r3, #32
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	2378      	movs	r3, #120	; 0x78
 80091ac:	4828      	ldr	r0, [pc, #160]	; (8009250 <_printf_i+0x248>)
 80091ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091b2:	e7e3      	b.n	800917c <_printf_i+0x174>
 80091b4:	065e      	lsls	r6, r3, #25
 80091b6:	bf48      	it	mi
 80091b8:	b2ad      	uxthmi	r5, r5
 80091ba:	e7e6      	b.n	800918a <_printf_i+0x182>
 80091bc:	4616      	mov	r6, r2
 80091be:	e7bb      	b.n	8009138 <_printf_i+0x130>
 80091c0:	680b      	ldr	r3, [r1, #0]
 80091c2:	6826      	ldr	r6, [r4, #0]
 80091c4:	6960      	ldr	r0, [r4, #20]
 80091c6:	1d1d      	adds	r5, r3, #4
 80091c8:	600d      	str	r5, [r1, #0]
 80091ca:	0635      	lsls	r5, r6, #24
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	d501      	bpl.n	80091d4 <_printf_i+0x1cc>
 80091d0:	6018      	str	r0, [r3, #0]
 80091d2:	e002      	b.n	80091da <_printf_i+0x1d2>
 80091d4:	0671      	lsls	r1, r6, #25
 80091d6:	d5fb      	bpl.n	80091d0 <_printf_i+0x1c8>
 80091d8:	8018      	strh	r0, [r3, #0]
 80091da:	2300      	movs	r3, #0
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	4616      	mov	r6, r2
 80091e0:	e7ba      	b.n	8009158 <_printf_i+0x150>
 80091e2:	680b      	ldr	r3, [r1, #0]
 80091e4:	1d1a      	adds	r2, r3, #4
 80091e6:	600a      	str	r2, [r1, #0]
 80091e8:	681e      	ldr	r6, [r3, #0]
 80091ea:	6862      	ldr	r2, [r4, #4]
 80091ec:	2100      	movs	r1, #0
 80091ee:	4630      	mov	r0, r6
 80091f0:	f7f6 fffe 	bl	80001f0 <memchr>
 80091f4:	b108      	cbz	r0, 80091fa <_printf_i+0x1f2>
 80091f6:	1b80      	subs	r0, r0, r6
 80091f8:	6060      	str	r0, [r4, #4]
 80091fa:	6863      	ldr	r3, [r4, #4]
 80091fc:	6123      	str	r3, [r4, #16]
 80091fe:	2300      	movs	r3, #0
 8009200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009204:	e7a8      	b.n	8009158 <_printf_i+0x150>
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	4632      	mov	r2, r6
 800920a:	4649      	mov	r1, r9
 800920c:	4640      	mov	r0, r8
 800920e:	47d0      	blx	sl
 8009210:	3001      	adds	r0, #1
 8009212:	d0ab      	beq.n	800916c <_printf_i+0x164>
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	079b      	lsls	r3, r3, #30
 8009218:	d413      	bmi.n	8009242 <_printf_i+0x23a>
 800921a:	68e0      	ldr	r0, [r4, #12]
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	4298      	cmp	r0, r3
 8009220:	bfb8      	it	lt
 8009222:	4618      	movlt	r0, r3
 8009224:	e7a4      	b.n	8009170 <_printf_i+0x168>
 8009226:	2301      	movs	r3, #1
 8009228:	4632      	mov	r2, r6
 800922a:	4649      	mov	r1, r9
 800922c:	4640      	mov	r0, r8
 800922e:	47d0      	blx	sl
 8009230:	3001      	adds	r0, #1
 8009232:	d09b      	beq.n	800916c <_printf_i+0x164>
 8009234:	3501      	adds	r5, #1
 8009236:	68e3      	ldr	r3, [r4, #12]
 8009238:	9903      	ldr	r1, [sp, #12]
 800923a:	1a5b      	subs	r3, r3, r1
 800923c:	42ab      	cmp	r3, r5
 800923e:	dcf2      	bgt.n	8009226 <_printf_i+0x21e>
 8009240:	e7eb      	b.n	800921a <_printf_i+0x212>
 8009242:	2500      	movs	r5, #0
 8009244:	f104 0619 	add.w	r6, r4, #25
 8009248:	e7f5      	b.n	8009236 <_printf_i+0x22e>
 800924a:	bf00      	nop
 800924c:	0800c956 	.word	0x0800c956
 8009250:	0800c967 	.word	0x0800c967

08009254 <siprintf>:
 8009254:	b40e      	push	{r1, r2, r3}
 8009256:	b500      	push	{lr}
 8009258:	b09c      	sub	sp, #112	; 0x70
 800925a:	ab1d      	add	r3, sp, #116	; 0x74
 800925c:	9002      	str	r0, [sp, #8]
 800925e:	9006      	str	r0, [sp, #24]
 8009260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009264:	4809      	ldr	r0, [pc, #36]	; (800928c <siprintf+0x38>)
 8009266:	9107      	str	r1, [sp, #28]
 8009268:	9104      	str	r1, [sp, #16]
 800926a:	4909      	ldr	r1, [pc, #36]	; (8009290 <siprintf+0x3c>)
 800926c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009270:	9105      	str	r1, [sp, #20]
 8009272:	6800      	ldr	r0, [r0, #0]
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	a902      	add	r1, sp, #8
 8009278:	f001 fb32 	bl	800a8e0 <_svfiprintf_r>
 800927c:	9b02      	ldr	r3, [sp, #8]
 800927e:	2200      	movs	r2, #0
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	b01c      	add	sp, #112	; 0x70
 8009284:	f85d eb04 	ldr.w	lr, [sp], #4
 8009288:	b003      	add	sp, #12
 800928a:	4770      	bx	lr
 800928c:	20000040 	.word	0x20000040
 8009290:	ffff0208 	.word	0xffff0208

08009294 <strcat>:
 8009294:	b510      	push	{r4, lr}
 8009296:	4602      	mov	r2, r0
 8009298:	7814      	ldrb	r4, [r2, #0]
 800929a:	4613      	mov	r3, r2
 800929c:	3201      	adds	r2, #1
 800929e:	2c00      	cmp	r4, #0
 80092a0:	d1fa      	bne.n	8009298 <strcat+0x4>
 80092a2:	3b01      	subs	r3, #1
 80092a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80092a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d1f9      	bne.n	80092a4 <strcat+0x10>
 80092b0:	bd10      	pop	{r4, pc}

080092b2 <quorem>:
 80092b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b6:	6903      	ldr	r3, [r0, #16]
 80092b8:	690c      	ldr	r4, [r1, #16]
 80092ba:	42a3      	cmp	r3, r4
 80092bc:	4607      	mov	r7, r0
 80092be:	f2c0 8081 	blt.w	80093c4 <quorem+0x112>
 80092c2:	3c01      	subs	r4, #1
 80092c4:	f101 0814 	add.w	r8, r1, #20
 80092c8:	f100 0514 	add.w	r5, r0, #20
 80092cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092d0:	9301      	str	r3, [sp, #4]
 80092d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092da:	3301      	adds	r3, #1
 80092dc:	429a      	cmp	r2, r3
 80092de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80092ea:	d331      	bcc.n	8009350 <quorem+0x9e>
 80092ec:	f04f 0e00 	mov.w	lr, #0
 80092f0:	4640      	mov	r0, r8
 80092f2:	46ac      	mov	ip, r5
 80092f4:	46f2      	mov	sl, lr
 80092f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80092fa:	b293      	uxth	r3, r2
 80092fc:	fb06 e303 	mla	r3, r6, r3, lr
 8009300:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009304:	b29b      	uxth	r3, r3
 8009306:	ebaa 0303 	sub.w	r3, sl, r3
 800930a:	0c12      	lsrs	r2, r2, #16
 800930c:	f8dc a000 	ldr.w	sl, [ip]
 8009310:	fb06 e202 	mla	r2, r6, r2, lr
 8009314:	fa13 f38a 	uxtah	r3, r3, sl
 8009318:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800931c:	fa1f fa82 	uxth.w	sl, r2
 8009320:	f8dc 2000 	ldr.w	r2, [ip]
 8009324:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800932c:	b29b      	uxth	r3, r3
 800932e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009332:	4581      	cmp	r9, r0
 8009334:	f84c 3b04 	str.w	r3, [ip], #4
 8009338:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800933c:	d2db      	bcs.n	80092f6 <quorem+0x44>
 800933e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009342:	b92b      	cbnz	r3, 8009350 <quorem+0x9e>
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	3b04      	subs	r3, #4
 8009348:	429d      	cmp	r5, r3
 800934a:	461a      	mov	r2, r3
 800934c:	d32e      	bcc.n	80093ac <quorem+0xfa>
 800934e:	613c      	str	r4, [r7, #16]
 8009350:	4638      	mov	r0, r7
 8009352:	f001 f8af 	bl	800a4b4 <__mcmp>
 8009356:	2800      	cmp	r0, #0
 8009358:	db24      	blt.n	80093a4 <quorem+0xf2>
 800935a:	3601      	adds	r6, #1
 800935c:	4628      	mov	r0, r5
 800935e:	f04f 0c00 	mov.w	ip, #0
 8009362:	f858 2b04 	ldr.w	r2, [r8], #4
 8009366:	f8d0 e000 	ldr.w	lr, [r0]
 800936a:	b293      	uxth	r3, r2
 800936c:	ebac 0303 	sub.w	r3, ip, r3
 8009370:	0c12      	lsrs	r2, r2, #16
 8009372:	fa13 f38e 	uxtah	r3, r3, lr
 8009376:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800937a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800937e:	b29b      	uxth	r3, r3
 8009380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009384:	45c1      	cmp	r9, r8
 8009386:	f840 3b04 	str.w	r3, [r0], #4
 800938a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800938e:	d2e8      	bcs.n	8009362 <quorem+0xb0>
 8009390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009394:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009398:	b922      	cbnz	r2, 80093a4 <quorem+0xf2>
 800939a:	3b04      	subs	r3, #4
 800939c:	429d      	cmp	r5, r3
 800939e:	461a      	mov	r2, r3
 80093a0:	d30a      	bcc.n	80093b8 <quorem+0x106>
 80093a2:	613c      	str	r4, [r7, #16]
 80093a4:	4630      	mov	r0, r6
 80093a6:	b003      	add	sp, #12
 80093a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ac:	6812      	ldr	r2, [r2, #0]
 80093ae:	3b04      	subs	r3, #4
 80093b0:	2a00      	cmp	r2, #0
 80093b2:	d1cc      	bne.n	800934e <quorem+0x9c>
 80093b4:	3c01      	subs	r4, #1
 80093b6:	e7c7      	b.n	8009348 <quorem+0x96>
 80093b8:	6812      	ldr	r2, [r2, #0]
 80093ba:	3b04      	subs	r3, #4
 80093bc:	2a00      	cmp	r2, #0
 80093be:	d1f0      	bne.n	80093a2 <quorem+0xf0>
 80093c0:	3c01      	subs	r4, #1
 80093c2:	e7eb      	b.n	800939c <quorem+0xea>
 80093c4:	2000      	movs	r0, #0
 80093c6:	e7ee      	b.n	80093a6 <quorem+0xf4>

080093c8 <_dtoa_r>:
 80093c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093cc:	ed2d 8b02 	vpush	{d8}
 80093d0:	ec57 6b10 	vmov	r6, r7, d0
 80093d4:	b095      	sub	sp, #84	; 0x54
 80093d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80093d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80093dc:	9105      	str	r1, [sp, #20]
 80093de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80093e2:	4604      	mov	r4, r0
 80093e4:	9209      	str	r2, [sp, #36]	; 0x24
 80093e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093e8:	b975      	cbnz	r5, 8009408 <_dtoa_r+0x40>
 80093ea:	2010      	movs	r0, #16
 80093ec:	f000 fddc 	bl	8009fa8 <malloc>
 80093f0:	4602      	mov	r2, r0
 80093f2:	6260      	str	r0, [r4, #36]	; 0x24
 80093f4:	b920      	cbnz	r0, 8009400 <_dtoa_r+0x38>
 80093f6:	4bb2      	ldr	r3, [pc, #712]	; (80096c0 <_dtoa_r+0x2f8>)
 80093f8:	21ea      	movs	r1, #234	; 0xea
 80093fa:	48b2      	ldr	r0, [pc, #712]	; (80096c4 <_dtoa_r+0x2fc>)
 80093fc:	f001 fb80 	bl	800ab00 <__assert_func>
 8009400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009404:	6005      	str	r5, [r0, #0]
 8009406:	60c5      	str	r5, [r0, #12]
 8009408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800940a:	6819      	ldr	r1, [r3, #0]
 800940c:	b151      	cbz	r1, 8009424 <_dtoa_r+0x5c>
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	604a      	str	r2, [r1, #4]
 8009412:	2301      	movs	r3, #1
 8009414:	4093      	lsls	r3, r2
 8009416:	608b      	str	r3, [r1, #8]
 8009418:	4620      	mov	r0, r4
 800941a:	f000 fe0d 	bl	800a038 <_Bfree>
 800941e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009420:	2200      	movs	r2, #0
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	1e3b      	subs	r3, r7, #0
 8009426:	bfb9      	ittee	lt
 8009428:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800942c:	9303      	strlt	r3, [sp, #12]
 800942e:	2300      	movge	r3, #0
 8009430:	f8c8 3000 	strge.w	r3, [r8]
 8009434:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009438:	4ba3      	ldr	r3, [pc, #652]	; (80096c8 <_dtoa_r+0x300>)
 800943a:	bfbc      	itt	lt
 800943c:	2201      	movlt	r2, #1
 800943e:	f8c8 2000 	strlt.w	r2, [r8]
 8009442:	ea33 0309 	bics.w	r3, r3, r9
 8009446:	d11b      	bne.n	8009480 <_dtoa_r+0xb8>
 8009448:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800944a:	f242 730f 	movw	r3, #9999	; 0x270f
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009454:	4333      	orrs	r3, r6
 8009456:	f000 857a 	beq.w	8009f4e <_dtoa_r+0xb86>
 800945a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800945c:	b963      	cbnz	r3, 8009478 <_dtoa_r+0xb0>
 800945e:	4b9b      	ldr	r3, [pc, #620]	; (80096cc <_dtoa_r+0x304>)
 8009460:	e024      	b.n	80094ac <_dtoa_r+0xe4>
 8009462:	4b9b      	ldr	r3, [pc, #620]	; (80096d0 <_dtoa_r+0x308>)
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	3308      	adds	r3, #8
 8009468:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	9800      	ldr	r0, [sp, #0]
 800946e:	b015      	add	sp, #84	; 0x54
 8009470:	ecbd 8b02 	vpop	{d8}
 8009474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009478:	4b94      	ldr	r3, [pc, #592]	; (80096cc <_dtoa_r+0x304>)
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	3303      	adds	r3, #3
 800947e:	e7f3      	b.n	8009468 <_dtoa_r+0xa0>
 8009480:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009484:	2200      	movs	r2, #0
 8009486:	ec51 0b17 	vmov	r0, r1, d7
 800948a:	2300      	movs	r3, #0
 800948c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009490:	f7f7 fb22 	bl	8000ad8 <__aeabi_dcmpeq>
 8009494:	4680      	mov	r8, r0
 8009496:	b158      	cbz	r0, 80094b0 <_dtoa_r+0xe8>
 8009498:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800949a:	2301      	movs	r3, #1
 800949c:	6013      	str	r3, [r2, #0]
 800949e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 8551 	beq.w	8009f48 <_dtoa_r+0xb80>
 80094a6:	488b      	ldr	r0, [pc, #556]	; (80096d4 <_dtoa_r+0x30c>)
 80094a8:	6018      	str	r0, [r3, #0]
 80094aa:	1e43      	subs	r3, r0, #1
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	e7dd      	b.n	800946c <_dtoa_r+0xa4>
 80094b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80094b4:	aa12      	add	r2, sp, #72	; 0x48
 80094b6:	a913      	add	r1, sp, #76	; 0x4c
 80094b8:	4620      	mov	r0, r4
 80094ba:	f001 f89f 	bl	800a5fc <__d2b>
 80094be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094c2:	4683      	mov	fp, r0
 80094c4:	2d00      	cmp	r5, #0
 80094c6:	d07c      	beq.n	80095c2 <_dtoa_r+0x1fa>
 80094c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80094ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80094d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80094da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80094de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80094e2:	4b7d      	ldr	r3, [pc, #500]	; (80096d8 <_dtoa_r+0x310>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	4630      	mov	r0, r6
 80094e8:	4639      	mov	r1, r7
 80094ea:	f7f6 fed5 	bl	8000298 <__aeabi_dsub>
 80094ee:	a36e      	add	r3, pc, #440	; (adr r3, 80096a8 <_dtoa_r+0x2e0>)
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	f7f7 f888 	bl	8000608 <__aeabi_dmul>
 80094f8:	a36d      	add	r3, pc, #436	; (adr r3, 80096b0 <_dtoa_r+0x2e8>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	f7f6 fecd 	bl	800029c <__adddf3>
 8009502:	4606      	mov	r6, r0
 8009504:	4628      	mov	r0, r5
 8009506:	460f      	mov	r7, r1
 8009508:	f7f7 f814 	bl	8000534 <__aeabi_i2d>
 800950c:	a36a      	add	r3, pc, #424	; (adr r3, 80096b8 <_dtoa_r+0x2f0>)
 800950e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009512:	f7f7 f879 	bl	8000608 <__aeabi_dmul>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4630      	mov	r0, r6
 800951c:	4639      	mov	r1, r7
 800951e:	f7f6 febd 	bl	800029c <__adddf3>
 8009522:	4606      	mov	r6, r0
 8009524:	460f      	mov	r7, r1
 8009526:	f7f7 fb1f 	bl	8000b68 <__aeabi_d2iz>
 800952a:	2200      	movs	r2, #0
 800952c:	4682      	mov	sl, r0
 800952e:	2300      	movs	r3, #0
 8009530:	4630      	mov	r0, r6
 8009532:	4639      	mov	r1, r7
 8009534:	f7f7 fada 	bl	8000aec <__aeabi_dcmplt>
 8009538:	b148      	cbz	r0, 800954e <_dtoa_r+0x186>
 800953a:	4650      	mov	r0, sl
 800953c:	f7f6 fffa 	bl	8000534 <__aeabi_i2d>
 8009540:	4632      	mov	r2, r6
 8009542:	463b      	mov	r3, r7
 8009544:	f7f7 fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009548:	b908      	cbnz	r0, 800954e <_dtoa_r+0x186>
 800954a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800954e:	f1ba 0f16 	cmp.w	sl, #22
 8009552:	d854      	bhi.n	80095fe <_dtoa_r+0x236>
 8009554:	4b61      	ldr	r3, [pc, #388]	; (80096dc <_dtoa_r+0x314>)
 8009556:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009562:	f7f7 fac3 	bl	8000aec <__aeabi_dcmplt>
 8009566:	2800      	cmp	r0, #0
 8009568:	d04b      	beq.n	8009602 <_dtoa_r+0x23a>
 800956a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800956e:	2300      	movs	r3, #0
 8009570:	930e      	str	r3, [sp, #56]	; 0x38
 8009572:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009574:	1b5d      	subs	r5, r3, r5
 8009576:	1e6b      	subs	r3, r5, #1
 8009578:	9304      	str	r3, [sp, #16]
 800957a:	bf43      	ittte	mi
 800957c:	2300      	movmi	r3, #0
 800957e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009582:	9304      	strmi	r3, [sp, #16]
 8009584:	f04f 0800 	movpl.w	r8, #0
 8009588:	f1ba 0f00 	cmp.w	sl, #0
 800958c:	db3b      	blt.n	8009606 <_dtoa_r+0x23e>
 800958e:	9b04      	ldr	r3, [sp, #16]
 8009590:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009594:	4453      	add	r3, sl
 8009596:	9304      	str	r3, [sp, #16]
 8009598:	2300      	movs	r3, #0
 800959a:	9306      	str	r3, [sp, #24]
 800959c:	9b05      	ldr	r3, [sp, #20]
 800959e:	2b09      	cmp	r3, #9
 80095a0:	d869      	bhi.n	8009676 <_dtoa_r+0x2ae>
 80095a2:	2b05      	cmp	r3, #5
 80095a4:	bfc4      	itt	gt
 80095a6:	3b04      	subgt	r3, #4
 80095a8:	9305      	strgt	r3, [sp, #20]
 80095aa:	9b05      	ldr	r3, [sp, #20]
 80095ac:	f1a3 0302 	sub.w	r3, r3, #2
 80095b0:	bfcc      	ite	gt
 80095b2:	2500      	movgt	r5, #0
 80095b4:	2501      	movle	r5, #1
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d869      	bhi.n	800968e <_dtoa_r+0x2c6>
 80095ba:	e8df f003 	tbb	[pc, r3]
 80095be:	4e2c      	.short	0x4e2c
 80095c0:	5a4c      	.short	0x5a4c
 80095c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80095c6:	441d      	add	r5, r3
 80095c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80095cc:	2b20      	cmp	r3, #32
 80095ce:	bfc1      	itttt	gt
 80095d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80095d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80095dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80095e0:	bfda      	itte	le
 80095e2:	f1c3 0320 	rsble	r3, r3, #32
 80095e6:	fa06 f003 	lslle.w	r0, r6, r3
 80095ea:	4318      	orrgt	r0, r3
 80095ec:	f7f6 ff92 	bl	8000514 <__aeabi_ui2d>
 80095f0:	2301      	movs	r3, #1
 80095f2:	4606      	mov	r6, r0
 80095f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80095f8:	3d01      	subs	r5, #1
 80095fa:	9310      	str	r3, [sp, #64]	; 0x40
 80095fc:	e771      	b.n	80094e2 <_dtoa_r+0x11a>
 80095fe:	2301      	movs	r3, #1
 8009600:	e7b6      	b.n	8009570 <_dtoa_r+0x1a8>
 8009602:	900e      	str	r0, [sp, #56]	; 0x38
 8009604:	e7b5      	b.n	8009572 <_dtoa_r+0x1aa>
 8009606:	f1ca 0300 	rsb	r3, sl, #0
 800960a:	9306      	str	r3, [sp, #24]
 800960c:	2300      	movs	r3, #0
 800960e:	eba8 080a 	sub.w	r8, r8, sl
 8009612:	930d      	str	r3, [sp, #52]	; 0x34
 8009614:	e7c2      	b.n	800959c <_dtoa_r+0x1d4>
 8009616:	2300      	movs	r3, #0
 8009618:	9308      	str	r3, [sp, #32]
 800961a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800961c:	2b00      	cmp	r3, #0
 800961e:	dc39      	bgt.n	8009694 <_dtoa_r+0x2cc>
 8009620:	f04f 0901 	mov.w	r9, #1
 8009624:	f8cd 9004 	str.w	r9, [sp, #4]
 8009628:	464b      	mov	r3, r9
 800962a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800962e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009630:	2200      	movs	r2, #0
 8009632:	6042      	str	r2, [r0, #4]
 8009634:	2204      	movs	r2, #4
 8009636:	f102 0614 	add.w	r6, r2, #20
 800963a:	429e      	cmp	r6, r3
 800963c:	6841      	ldr	r1, [r0, #4]
 800963e:	d92f      	bls.n	80096a0 <_dtoa_r+0x2d8>
 8009640:	4620      	mov	r0, r4
 8009642:	f000 fcb9 	bl	8009fb8 <_Balloc>
 8009646:	9000      	str	r0, [sp, #0]
 8009648:	2800      	cmp	r0, #0
 800964a:	d14b      	bne.n	80096e4 <_dtoa_r+0x31c>
 800964c:	4b24      	ldr	r3, [pc, #144]	; (80096e0 <_dtoa_r+0x318>)
 800964e:	4602      	mov	r2, r0
 8009650:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009654:	e6d1      	b.n	80093fa <_dtoa_r+0x32>
 8009656:	2301      	movs	r3, #1
 8009658:	e7de      	b.n	8009618 <_dtoa_r+0x250>
 800965a:	2300      	movs	r3, #0
 800965c:	9308      	str	r3, [sp, #32]
 800965e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009660:	eb0a 0903 	add.w	r9, sl, r3
 8009664:	f109 0301 	add.w	r3, r9, #1
 8009668:	2b01      	cmp	r3, #1
 800966a:	9301      	str	r3, [sp, #4]
 800966c:	bfb8      	it	lt
 800966e:	2301      	movlt	r3, #1
 8009670:	e7dd      	b.n	800962e <_dtoa_r+0x266>
 8009672:	2301      	movs	r3, #1
 8009674:	e7f2      	b.n	800965c <_dtoa_r+0x294>
 8009676:	2501      	movs	r5, #1
 8009678:	2300      	movs	r3, #0
 800967a:	9305      	str	r3, [sp, #20]
 800967c:	9508      	str	r5, [sp, #32]
 800967e:	f04f 39ff 	mov.w	r9, #4294967295
 8009682:	2200      	movs	r2, #0
 8009684:	f8cd 9004 	str.w	r9, [sp, #4]
 8009688:	2312      	movs	r3, #18
 800968a:	9209      	str	r2, [sp, #36]	; 0x24
 800968c:	e7cf      	b.n	800962e <_dtoa_r+0x266>
 800968e:	2301      	movs	r3, #1
 8009690:	9308      	str	r3, [sp, #32]
 8009692:	e7f4      	b.n	800967e <_dtoa_r+0x2b6>
 8009694:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009698:	f8cd 9004 	str.w	r9, [sp, #4]
 800969c:	464b      	mov	r3, r9
 800969e:	e7c6      	b.n	800962e <_dtoa_r+0x266>
 80096a0:	3101      	adds	r1, #1
 80096a2:	6041      	str	r1, [r0, #4]
 80096a4:	0052      	lsls	r2, r2, #1
 80096a6:	e7c6      	b.n	8009636 <_dtoa_r+0x26e>
 80096a8:	636f4361 	.word	0x636f4361
 80096ac:	3fd287a7 	.word	0x3fd287a7
 80096b0:	8b60c8b3 	.word	0x8b60c8b3
 80096b4:	3fc68a28 	.word	0x3fc68a28
 80096b8:	509f79fb 	.word	0x509f79fb
 80096bc:	3fd34413 	.word	0x3fd34413
 80096c0:	0800c985 	.word	0x0800c985
 80096c4:	0800c99c 	.word	0x0800c99c
 80096c8:	7ff00000 	.word	0x7ff00000
 80096cc:	0800c981 	.word	0x0800c981
 80096d0:	0800c978 	.word	0x0800c978
 80096d4:	0800c955 	.word	0x0800c955
 80096d8:	3ff80000 	.word	0x3ff80000
 80096dc:	0800ca98 	.word	0x0800ca98
 80096e0:	0800c9fb 	.word	0x0800c9fb
 80096e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096e6:	9a00      	ldr	r2, [sp, #0]
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	9b01      	ldr	r3, [sp, #4]
 80096ec:	2b0e      	cmp	r3, #14
 80096ee:	f200 80ad 	bhi.w	800984c <_dtoa_r+0x484>
 80096f2:	2d00      	cmp	r5, #0
 80096f4:	f000 80aa 	beq.w	800984c <_dtoa_r+0x484>
 80096f8:	f1ba 0f00 	cmp.w	sl, #0
 80096fc:	dd36      	ble.n	800976c <_dtoa_r+0x3a4>
 80096fe:	4ac3      	ldr	r2, [pc, #780]	; (8009a0c <_dtoa_r+0x644>)
 8009700:	f00a 030f 	and.w	r3, sl, #15
 8009704:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009708:	ed93 7b00 	vldr	d7, [r3]
 800970c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009710:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009714:	eeb0 8a47 	vmov.f32	s16, s14
 8009718:	eef0 8a67 	vmov.f32	s17, s15
 800971c:	d016      	beq.n	800974c <_dtoa_r+0x384>
 800971e:	4bbc      	ldr	r3, [pc, #752]	; (8009a10 <_dtoa_r+0x648>)
 8009720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009728:	f7f7 f898 	bl	800085c <__aeabi_ddiv>
 800972c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009730:	f007 070f 	and.w	r7, r7, #15
 8009734:	2503      	movs	r5, #3
 8009736:	4eb6      	ldr	r6, [pc, #728]	; (8009a10 <_dtoa_r+0x648>)
 8009738:	b957      	cbnz	r7, 8009750 <_dtoa_r+0x388>
 800973a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800973e:	ec53 2b18 	vmov	r2, r3, d8
 8009742:	f7f7 f88b 	bl	800085c <__aeabi_ddiv>
 8009746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800974a:	e029      	b.n	80097a0 <_dtoa_r+0x3d8>
 800974c:	2502      	movs	r5, #2
 800974e:	e7f2      	b.n	8009736 <_dtoa_r+0x36e>
 8009750:	07f9      	lsls	r1, r7, #31
 8009752:	d508      	bpl.n	8009766 <_dtoa_r+0x39e>
 8009754:	ec51 0b18 	vmov	r0, r1, d8
 8009758:	e9d6 2300 	ldrd	r2, r3, [r6]
 800975c:	f7f6 ff54 	bl	8000608 <__aeabi_dmul>
 8009760:	ec41 0b18 	vmov	d8, r0, r1
 8009764:	3501      	adds	r5, #1
 8009766:	107f      	asrs	r7, r7, #1
 8009768:	3608      	adds	r6, #8
 800976a:	e7e5      	b.n	8009738 <_dtoa_r+0x370>
 800976c:	f000 80a6 	beq.w	80098bc <_dtoa_r+0x4f4>
 8009770:	f1ca 0600 	rsb	r6, sl, #0
 8009774:	4ba5      	ldr	r3, [pc, #660]	; (8009a0c <_dtoa_r+0x644>)
 8009776:	4fa6      	ldr	r7, [pc, #664]	; (8009a10 <_dtoa_r+0x648>)
 8009778:	f006 020f 	and.w	r2, r6, #15
 800977c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009788:	f7f6 ff3e 	bl	8000608 <__aeabi_dmul>
 800978c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009790:	1136      	asrs	r6, r6, #4
 8009792:	2300      	movs	r3, #0
 8009794:	2502      	movs	r5, #2
 8009796:	2e00      	cmp	r6, #0
 8009798:	f040 8085 	bne.w	80098a6 <_dtoa_r+0x4de>
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1d2      	bne.n	8009746 <_dtoa_r+0x37e>
 80097a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f000 808c 	beq.w	80098c0 <_dtoa_r+0x4f8>
 80097a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097ac:	4b99      	ldr	r3, [pc, #612]	; (8009a14 <_dtoa_r+0x64c>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f7 f99a 	bl	8000aec <__aeabi_dcmplt>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	f000 8081 	beq.w	80098c0 <_dtoa_r+0x4f8>
 80097be:	9b01      	ldr	r3, [sp, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d07d      	beq.n	80098c0 <_dtoa_r+0x4f8>
 80097c4:	f1b9 0f00 	cmp.w	r9, #0
 80097c8:	dd3c      	ble.n	8009844 <_dtoa_r+0x47c>
 80097ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80097ce:	9307      	str	r3, [sp, #28]
 80097d0:	2200      	movs	r2, #0
 80097d2:	4b91      	ldr	r3, [pc, #580]	; (8009a18 <_dtoa_r+0x650>)
 80097d4:	4630      	mov	r0, r6
 80097d6:	4639      	mov	r1, r7
 80097d8:	f7f6 ff16 	bl	8000608 <__aeabi_dmul>
 80097dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097e0:	3501      	adds	r5, #1
 80097e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80097e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80097ea:	4628      	mov	r0, r5
 80097ec:	f7f6 fea2 	bl	8000534 <__aeabi_i2d>
 80097f0:	4632      	mov	r2, r6
 80097f2:	463b      	mov	r3, r7
 80097f4:	f7f6 ff08 	bl	8000608 <__aeabi_dmul>
 80097f8:	4b88      	ldr	r3, [pc, #544]	; (8009a1c <_dtoa_r+0x654>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	f7f6 fd4e 	bl	800029c <__adddf3>
 8009800:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009808:	9303      	str	r3, [sp, #12]
 800980a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800980c:	2b00      	cmp	r3, #0
 800980e:	d15c      	bne.n	80098ca <_dtoa_r+0x502>
 8009810:	4b83      	ldr	r3, [pc, #524]	; (8009a20 <_dtoa_r+0x658>)
 8009812:	2200      	movs	r2, #0
 8009814:	4630      	mov	r0, r6
 8009816:	4639      	mov	r1, r7
 8009818:	f7f6 fd3e 	bl	8000298 <__aeabi_dsub>
 800981c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009820:	4606      	mov	r6, r0
 8009822:	460f      	mov	r7, r1
 8009824:	f7f7 f980 	bl	8000b28 <__aeabi_dcmpgt>
 8009828:	2800      	cmp	r0, #0
 800982a:	f040 8296 	bne.w	8009d5a <_dtoa_r+0x992>
 800982e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009832:	4630      	mov	r0, r6
 8009834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009838:	4639      	mov	r1, r7
 800983a:	f7f7 f957 	bl	8000aec <__aeabi_dcmplt>
 800983e:	2800      	cmp	r0, #0
 8009840:	f040 8288 	bne.w	8009d54 <_dtoa_r+0x98c>
 8009844:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009848:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800984c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800984e:	2b00      	cmp	r3, #0
 8009850:	f2c0 8158 	blt.w	8009b04 <_dtoa_r+0x73c>
 8009854:	f1ba 0f0e 	cmp.w	sl, #14
 8009858:	f300 8154 	bgt.w	8009b04 <_dtoa_r+0x73c>
 800985c:	4b6b      	ldr	r3, [pc, #428]	; (8009a0c <_dtoa_r+0x644>)
 800985e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009862:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009868:	2b00      	cmp	r3, #0
 800986a:	f280 80e3 	bge.w	8009a34 <_dtoa_r+0x66c>
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	f300 80df 	bgt.w	8009a34 <_dtoa_r+0x66c>
 8009876:	f040 826d 	bne.w	8009d54 <_dtoa_r+0x98c>
 800987a:	4b69      	ldr	r3, [pc, #420]	; (8009a20 <_dtoa_r+0x658>)
 800987c:	2200      	movs	r2, #0
 800987e:	4640      	mov	r0, r8
 8009880:	4649      	mov	r1, r9
 8009882:	f7f6 fec1 	bl	8000608 <__aeabi_dmul>
 8009886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800988a:	f7f7 f943 	bl	8000b14 <__aeabi_dcmpge>
 800988e:	9e01      	ldr	r6, [sp, #4]
 8009890:	4637      	mov	r7, r6
 8009892:	2800      	cmp	r0, #0
 8009894:	f040 8243 	bne.w	8009d1e <_dtoa_r+0x956>
 8009898:	9d00      	ldr	r5, [sp, #0]
 800989a:	2331      	movs	r3, #49	; 0x31
 800989c:	f805 3b01 	strb.w	r3, [r5], #1
 80098a0:	f10a 0a01 	add.w	sl, sl, #1
 80098a4:	e23f      	b.n	8009d26 <_dtoa_r+0x95e>
 80098a6:	07f2      	lsls	r2, r6, #31
 80098a8:	d505      	bpl.n	80098b6 <_dtoa_r+0x4ee>
 80098aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098ae:	f7f6 feab 	bl	8000608 <__aeabi_dmul>
 80098b2:	3501      	adds	r5, #1
 80098b4:	2301      	movs	r3, #1
 80098b6:	1076      	asrs	r6, r6, #1
 80098b8:	3708      	adds	r7, #8
 80098ba:	e76c      	b.n	8009796 <_dtoa_r+0x3ce>
 80098bc:	2502      	movs	r5, #2
 80098be:	e76f      	b.n	80097a0 <_dtoa_r+0x3d8>
 80098c0:	9b01      	ldr	r3, [sp, #4]
 80098c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80098c6:	930c      	str	r3, [sp, #48]	; 0x30
 80098c8:	e78d      	b.n	80097e6 <_dtoa_r+0x41e>
 80098ca:	9900      	ldr	r1, [sp, #0]
 80098cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80098ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098d0:	4b4e      	ldr	r3, [pc, #312]	; (8009a0c <_dtoa_r+0x644>)
 80098d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098d6:	4401      	add	r1, r0
 80098d8:	9102      	str	r1, [sp, #8]
 80098da:	9908      	ldr	r1, [sp, #32]
 80098dc:	eeb0 8a47 	vmov.f32	s16, s14
 80098e0:	eef0 8a67 	vmov.f32	s17, s15
 80098e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098ec:	2900      	cmp	r1, #0
 80098ee:	d045      	beq.n	800997c <_dtoa_r+0x5b4>
 80098f0:	494c      	ldr	r1, [pc, #304]	; (8009a24 <_dtoa_r+0x65c>)
 80098f2:	2000      	movs	r0, #0
 80098f4:	f7f6 ffb2 	bl	800085c <__aeabi_ddiv>
 80098f8:	ec53 2b18 	vmov	r2, r3, d8
 80098fc:	f7f6 fccc 	bl	8000298 <__aeabi_dsub>
 8009900:	9d00      	ldr	r5, [sp, #0]
 8009902:	ec41 0b18 	vmov	d8, r0, r1
 8009906:	4639      	mov	r1, r7
 8009908:	4630      	mov	r0, r6
 800990a:	f7f7 f92d 	bl	8000b68 <__aeabi_d2iz>
 800990e:	900c      	str	r0, [sp, #48]	; 0x30
 8009910:	f7f6 fe10 	bl	8000534 <__aeabi_i2d>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	4630      	mov	r0, r6
 800991a:	4639      	mov	r1, r7
 800991c:	f7f6 fcbc 	bl	8000298 <__aeabi_dsub>
 8009920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009922:	3330      	adds	r3, #48	; 0x30
 8009924:	f805 3b01 	strb.w	r3, [r5], #1
 8009928:	ec53 2b18 	vmov	r2, r3, d8
 800992c:	4606      	mov	r6, r0
 800992e:	460f      	mov	r7, r1
 8009930:	f7f7 f8dc 	bl	8000aec <__aeabi_dcmplt>
 8009934:	2800      	cmp	r0, #0
 8009936:	d165      	bne.n	8009a04 <_dtoa_r+0x63c>
 8009938:	4632      	mov	r2, r6
 800993a:	463b      	mov	r3, r7
 800993c:	4935      	ldr	r1, [pc, #212]	; (8009a14 <_dtoa_r+0x64c>)
 800993e:	2000      	movs	r0, #0
 8009940:	f7f6 fcaa 	bl	8000298 <__aeabi_dsub>
 8009944:	ec53 2b18 	vmov	r2, r3, d8
 8009948:	f7f7 f8d0 	bl	8000aec <__aeabi_dcmplt>
 800994c:	2800      	cmp	r0, #0
 800994e:	f040 80b9 	bne.w	8009ac4 <_dtoa_r+0x6fc>
 8009952:	9b02      	ldr	r3, [sp, #8]
 8009954:	429d      	cmp	r5, r3
 8009956:	f43f af75 	beq.w	8009844 <_dtoa_r+0x47c>
 800995a:	4b2f      	ldr	r3, [pc, #188]	; (8009a18 <_dtoa_r+0x650>)
 800995c:	ec51 0b18 	vmov	r0, r1, d8
 8009960:	2200      	movs	r2, #0
 8009962:	f7f6 fe51 	bl	8000608 <__aeabi_dmul>
 8009966:	4b2c      	ldr	r3, [pc, #176]	; (8009a18 <_dtoa_r+0x650>)
 8009968:	ec41 0b18 	vmov	d8, r0, r1
 800996c:	2200      	movs	r2, #0
 800996e:	4630      	mov	r0, r6
 8009970:	4639      	mov	r1, r7
 8009972:	f7f6 fe49 	bl	8000608 <__aeabi_dmul>
 8009976:	4606      	mov	r6, r0
 8009978:	460f      	mov	r7, r1
 800997a:	e7c4      	b.n	8009906 <_dtoa_r+0x53e>
 800997c:	ec51 0b17 	vmov	r0, r1, d7
 8009980:	f7f6 fe42 	bl	8000608 <__aeabi_dmul>
 8009984:	9b02      	ldr	r3, [sp, #8]
 8009986:	9d00      	ldr	r5, [sp, #0]
 8009988:	930c      	str	r3, [sp, #48]	; 0x30
 800998a:	ec41 0b18 	vmov	d8, r0, r1
 800998e:	4639      	mov	r1, r7
 8009990:	4630      	mov	r0, r6
 8009992:	f7f7 f8e9 	bl	8000b68 <__aeabi_d2iz>
 8009996:	9011      	str	r0, [sp, #68]	; 0x44
 8009998:	f7f6 fdcc 	bl	8000534 <__aeabi_i2d>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4630      	mov	r0, r6
 80099a2:	4639      	mov	r1, r7
 80099a4:	f7f6 fc78 	bl	8000298 <__aeabi_dsub>
 80099a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099aa:	3330      	adds	r3, #48	; 0x30
 80099ac:	f805 3b01 	strb.w	r3, [r5], #1
 80099b0:	9b02      	ldr	r3, [sp, #8]
 80099b2:	429d      	cmp	r5, r3
 80099b4:	4606      	mov	r6, r0
 80099b6:	460f      	mov	r7, r1
 80099b8:	f04f 0200 	mov.w	r2, #0
 80099bc:	d134      	bne.n	8009a28 <_dtoa_r+0x660>
 80099be:	4b19      	ldr	r3, [pc, #100]	; (8009a24 <_dtoa_r+0x65c>)
 80099c0:	ec51 0b18 	vmov	r0, r1, d8
 80099c4:	f7f6 fc6a 	bl	800029c <__adddf3>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4630      	mov	r0, r6
 80099ce:	4639      	mov	r1, r7
 80099d0:	f7f7 f8aa 	bl	8000b28 <__aeabi_dcmpgt>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d175      	bne.n	8009ac4 <_dtoa_r+0x6fc>
 80099d8:	ec53 2b18 	vmov	r2, r3, d8
 80099dc:	4911      	ldr	r1, [pc, #68]	; (8009a24 <_dtoa_r+0x65c>)
 80099de:	2000      	movs	r0, #0
 80099e0:	f7f6 fc5a 	bl	8000298 <__aeabi_dsub>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4630      	mov	r0, r6
 80099ea:	4639      	mov	r1, r7
 80099ec:	f7f7 f87e 	bl	8000aec <__aeabi_dcmplt>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	f43f af27 	beq.w	8009844 <_dtoa_r+0x47c>
 80099f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099f8:	1e6b      	subs	r3, r5, #1
 80099fa:	930c      	str	r3, [sp, #48]	; 0x30
 80099fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a00:	2b30      	cmp	r3, #48	; 0x30
 8009a02:	d0f8      	beq.n	80099f6 <_dtoa_r+0x62e>
 8009a04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009a08:	e04a      	b.n	8009aa0 <_dtoa_r+0x6d8>
 8009a0a:	bf00      	nop
 8009a0c:	0800ca98 	.word	0x0800ca98
 8009a10:	0800ca70 	.word	0x0800ca70
 8009a14:	3ff00000 	.word	0x3ff00000
 8009a18:	40240000 	.word	0x40240000
 8009a1c:	401c0000 	.word	0x401c0000
 8009a20:	40140000 	.word	0x40140000
 8009a24:	3fe00000 	.word	0x3fe00000
 8009a28:	4baf      	ldr	r3, [pc, #700]	; (8009ce8 <_dtoa_r+0x920>)
 8009a2a:	f7f6 fded 	bl	8000608 <__aeabi_dmul>
 8009a2e:	4606      	mov	r6, r0
 8009a30:	460f      	mov	r7, r1
 8009a32:	e7ac      	b.n	800998e <_dtoa_r+0x5c6>
 8009a34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009a38:	9d00      	ldr	r5, [sp, #0]
 8009a3a:	4642      	mov	r2, r8
 8009a3c:	464b      	mov	r3, r9
 8009a3e:	4630      	mov	r0, r6
 8009a40:	4639      	mov	r1, r7
 8009a42:	f7f6 ff0b 	bl	800085c <__aeabi_ddiv>
 8009a46:	f7f7 f88f 	bl	8000b68 <__aeabi_d2iz>
 8009a4a:	9002      	str	r0, [sp, #8]
 8009a4c:	f7f6 fd72 	bl	8000534 <__aeabi_i2d>
 8009a50:	4642      	mov	r2, r8
 8009a52:	464b      	mov	r3, r9
 8009a54:	f7f6 fdd8 	bl	8000608 <__aeabi_dmul>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	4639      	mov	r1, r7
 8009a60:	f7f6 fc1a 	bl	8000298 <__aeabi_dsub>
 8009a64:	9e02      	ldr	r6, [sp, #8]
 8009a66:	9f01      	ldr	r7, [sp, #4]
 8009a68:	3630      	adds	r6, #48	; 0x30
 8009a6a:	f805 6b01 	strb.w	r6, [r5], #1
 8009a6e:	9e00      	ldr	r6, [sp, #0]
 8009a70:	1bae      	subs	r6, r5, r6
 8009a72:	42b7      	cmp	r7, r6
 8009a74:	4602      	mov	r2, r0
 8009a76:	460b      	mov	r3, r1
 8009a78:	d137      	bne.n	8009aea <_dtoa_r+0x722>
 8009a7a:	f7f6 fc0f 	bl	800029c <__adddf3>
 8009a7e:	4642      	mov	r2, r8
 8009a80:	464b      	mov	r3, r9
 8009a82:	4606      	mov	r6, r0
 8009a84:	460f      	mov	r7, r1
 8009a86:	f7f7 f84f 	bl	8000b28 <__aeabi_dcmpgt>
 8009a8a:	b9c8      	cbnz	r0, 8009ac0 <_dtoa_r+0x6f8>
 8009a8c:	4642      	mov	r2, r8
 8009a8e:	464b      	mov	r3, r9
 8009a90:	4630      	mov	r0, r6
 8009a92:	4639      	mov	r1, r7
 8009a94:	f7f7 f820 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a98:	b110      	cbz	r0, 8009aa0 <_dtoa_r+0x6d8>
 8009a9a:	9b02      	ldr	r3, [sp, #8]
 8009a9c:	07d9      	lsls	r1, r3, #31
 8009a9e:	d40f      	bmi.n	8009ac0 <_dtoa_r+0x6f8>
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	4659      	mov	r1, fp
 8009aa4:	f000 fac8 	bl	800a038 <_Bfree>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	702b      	strb	r3, [r5, #0]
 8009aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aae:	f10a 0001 	add.w	r0, sl, #1
 8009ab2:	6018      	str	r0, [r3, #0]
 8009ab4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f43f acd8 	beq.w	800946c <_dtoa_r+0xa4>
 8009abc:	601d      	str	r5, [r3, #0]
 8009abe:	e4d5      	b.n	800946c <_dtoa_r+0xa4>
 8009ac0:	f8cd a01c 	str.w	sl, [sp, #28]
 8009ac4:	462b      	mov	r3, r5
 8009ac6:	461d      	mov	r5, r3
 8009ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009acc:	2a39      	cmp	r2, #57	; 0x39
 8009ace:	d108      	bne.n	8009ae2 <_dtoa_r+0x71a>
 8009ad0:	9a00      	ldr	r2, [sp, #0]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d1f7      	bne.n	8009ac6 <_dtoa_r+0x6fe>
 8009ad6:	9a07      	ldr	r2, [sp, #28]
 8009ad8:	9900      	ldr	r1, [sp, #0]
 8009ada:	3201      	adds	r2, #1
 8009adc:	9207      	str	r2, [sp, #28]
 8009ade:	2230      	movs	r2, #48	; 0x30
 8009ae0:	700a      	strb	r2, [r1, #0]
 8009ae2:	781a      	ldrb	r2, [r3, #0]
 8009ae4:	3201      	adds	r2, #1
 8009ae6:	701a      	strb	r2, [r3, #0]
 8009ae8:	e78c      	b.n	8009a04 <_dtoa_r+0x63c>
 8009aea:	4b7f      	ldr	r3, [pc, #508]	; (8009ce8 <_dtoa_r+0x920>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	f7f6 fd8b 	bl	8000608 <__aeabi_dmul>
 8009af2:	2200      	movs	r2, #0
 8009af4:	2300      	movs	r3, #0
 8009af6:	4606      	mov	r6, r0
 8009af8:	460f      	mov	r7, r1
 8009afa:	f7f6 ffed 	bl	8000ad8 <__aeabi_dcmpeq>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d09b      	beq.n	8009a3a <_dtoa_r+0x672>
 8009b02:	e7cd      	b.n	8009aa0 <_dtoa_r+0x6d8>
 8009b04:	9a08      	ldr	r2, [sp, #32]
 8009b06:	2a00      	cmp	r2, #0
 8009b08:	f000 80c4 	beq.w	8009c94 <_dtoa_r+0x8cc>
 8009b0c:	9a05      	ldr	r2, [sp, #20]
 8009b0e:	2a01      	cmp	r2, #1
 8009b10:	f300 80a8 	bgt.w	8009c64 <_dtoa_r+0x89c>
 8009b14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b16:	2a00      	cmp	r2, #0
 8009b18:	f000 80a0 	beq.w	8009c5c <_dtoa_r+0x894>
 8009b1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b20:	9e06      	ldr	r6, [sp, #24]
 8009b22:	4645      	mov	r5, r8
 8009b24:	9a04      	ldr	r2, [sp, #16]
 8009b26:	2101      	movs	r1, #1
 8009b28:	441a      	add	r2, r3
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	4498      	add	r8, r3
 8009b2e:	9204      	str	r2, [sp, #16]
 8009b30:	f000 fb3e 	bl	800a1b0 <__i2b>
 8009b34:	4607      	mov	r7, r0
 8009b36:	2d00      	cmp	r5, #0
 8009b38:	dd0b      	ble.n	8009b52 <_dtoa_r+0x78a>
 8009b3a:	9b04      	ldr	r3, [sp, #16]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	dd08      	ble.n	8009b52 <_dtoa_r+0x78a>
 8009b40:	42ab      	cmp	r3, r5
 8009b42:	9a04      	ldr	r2, [sp, #16]
 8009b44:	bfa8      	it	ge
 8009b46:	462b      	movge	r3, r5
 8009b48:	eba8 0803 	sub.w	r8, r8, r3
 8009b4c:	1aed      	subs	r5, r5, r3
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	9b06      	ldr	r3, [sp, #24]
 8009b54:	b1fb      	cbz	r3, 8009b96 <_dtoa_r+0x7ce>
 8009b56:	9b08      	ldr	r3, [sp, #32]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 809f 	beq.w	8009c9c <_dtoa_r+0x8d4>
 8009b5e:	2e00      	cmp	r6, #0
 8009b60:	dd11      	ble.n	8009b86 <_dtoa_r+0x7be>
 8009b62:	4639      	mov	r1, r7
 8009b64:	4632      	mov	r2, r6
 8009b66:	4620      	mov	r0, r4
 8009b68:	f000 fbde 	bl	800a328 <__pow5mult>
 8009b6c:	465a      	mov	r2, fp
 8009b6e:	4601      	mov	r1, r0
 8009b70:	4607      	mov	r7, r0
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fb32 	bl	800a1dc <__multiply>
 8009b78:	4659      	mov	r1, fp
 8009b7a:	9007      	str	r0, [sp, #28]
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f000 fa5b 	bl	800a038 <_Bfree>
 8009b82:	9b07      	ldr	r3, [sp, #28]
 8009b84:	469b      	mov	fp, r3
 8009b86:	9b06      	ldr	r3, [sp, #24]
 8009b88:	1b9a      	subs	r2, r3, r6
 8009b8a:	d004      	beq.n	8009b96 <_dtoa_r+0x7ce>
 8009b8c:	4659      	mov	r1, fp
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 fbca 	bl	800a328 <__pow5mult>
 8009b94:	4683      	mov	fp, r0
 8009b96:	2101      	movs	r1, #1
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f000 fb09 	bl	800a1b0 <__i2b>
 8009b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	dd7c      	ble.n	8009ca0 <_dtoa_r+0x8d8>
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	4601      	mov	r1, r0
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 fbbc 	bl	800a328 <__pow5mult>
 8009bb0:	9b05      	ldr	r3, [sp, #20]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	4606      	mov	r6, r0
 8009bb6:	dd76      	ble.n	8009ca6 <_dtoa_r+0x8de>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	9306      	str	r3, [sp, #24]
 8009bbc:	6933      	ldr	r3, [r6, #16]
 8009bbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009bc2:	6918      	ldr	r0, [r3, #16]
 8009bc4:	f000 faa4 	bl	800a110 <__hi0bits>
 8009bc8:	f1c0 0020 	rsb	r0, r0, #32
 8009bcc:	9b04      	ldr	r3, [sp, #16]
 8009bce:	4418      	add	r0, r3
 8009bd0:	f010 001f 	ands.w	r0, r0, #31
 8009bd4:	f000 8086 	beq.w	8009ce4 <_dtoa_r+0x91c>
 8009bd8:	f1c0 0320 	rsb	r3, r0, #32
 8009bdc:	2b04      	cmp	r3, #4
 8009bde:	dd7f      	ble.n	8009ce0 <_dtoa_r+0x918>
 8009be0:	f1c0 001c 	rsb	r0, r0, #28
 8009be4:	9b04      	ldr	r3, [sp, #16]
 8009be6:	4403      	add	r3, r0
 8009be8:	4480      	add	r8, r0
 8009bea:	4405      	add	r5, r0
 8009bec:	9304      	str	r3, [sp, #16]
 8009bee:	f1b8 0f00 	cmp.w	r8, #0
 8009bf2:	dd05      	ble.n	8009c00 <_dtoa_r+0x838>
 8009bf4:	4659      	mov	r1, fp
 8009bf6:	4642      	mov	r2, r8
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f000 fbef 	bl	800a3dc <__lshift>
 8009bfe:	4683      	mov	fp, r0
 8009c00:	9b04      	ldr	r3, [sp, #16]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	dd05      	ble.n	8009c12 <_dtoa_r+0x84a>
 8009c06:	4631      	mov	r1, r6
 8009c08:	461a      	mov	r2, r3
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 fbe6 	bl	800a3dc <__lshift>
 8009c10:	4606      	mov	r6, r0
 8009c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d069      	beq.n	8009cec <_dtoa_r+0x924>
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4658      	mov	r0, fp
 8009c1c:	f000 fc4a 	bl	800a4b4 <__mcmp>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	da63      	bge.n	8009cec <_dtoa_r+0x924>
 8009c24:	2300      	movs	r3, #0
 8009c26:	4659      	mov	r1, fp
 8009c28:	220a      	movs	r2, #10
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 fa26 	bl	800a07c <__multadd>
 8009c30:	9b08      	ldr	r3, [sp, #32]
 8009c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c36:	4683      	mov	fp, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	f000 818f 	beq.w	8009f5c <_dtoa_r+0xb94>
 8009c3e:	4639      	mov	r1, r7
 8009c40:	2300      	movs	r3, #0
 8009c42:	220a      	movs	r2, #10
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 fa19 	bl	800a07c <__multadd>
 8009c4a:	f1b9 0f00 	cmp.w	r9, #0
 8009c4e:	4607      	mov	r7, r0
 8009c50:	f300 808e 	bgt.w	8009d70 <_dtoa_r+0x9a8>
 8009c54:	9b05      	ldr	r3, [sp, #20]
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	dc50      	bgt.n	8009cfc <_dtoa_r+0x934>
 8009c5a:	e089      	b.n	8009d70 <_dtoa_r+0x9a8>
 8009c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c62:	e75d      	b.n	8009b20 <_dtoa_r+0x758>
 8009c64:	9b01      	ldr	r3, [sp, #4]
 8009c66:	1e5e      	subs	r6, r3, #1
 8009c68:	9b06      	ldr	r3, [sp, #24]
 8009c6a:	42b3      	cmp	r3, r6
 8009c6c:	bfbf      	itttt	lt
 8009c6e:	9b06      	ldrlt	r3, [sp, #24]
 8009c70:	9606      	strlt	r6, [sp, #24]
 8009c72:	1af2      	sublt	r2, r6, r3
 8009c74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009c76:	bfb6      	itet	lt
 8009c78:	189b      	addlt	r3, r3, r2
 8009c7a:	1b9e      	subge	r6, r3, r6
 8009c7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	bfb8      	it	lt
 8009c82:	2600      	movlt	r6, #0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	bfb5      	itete	lt
 8009c88:	eba8 0503 	sublt.w	r5, r8, r3
 8009c8c:	9b01      	ldrge	r3, [sp, #4]
 8009c8e:	2300      	movlt	r3, #0
 8009c90:	4645      	movge	r5, r8
 8009c92:	e747      	b.n	8009b24 <_dtoa_r+0x75c>
 8009c94:	9e06      	ldr	r6, [sp, #24]
 8009c96:	9f08      	ldr	r7, [sp, #32]
 8009c98:	4645      	mov	r5, r8
 8009c9a:	e74c      	b.n	8009b36 <_dtoa_r+0x76e>
 8009c9c:	9a06      	ldr	r2, [sp, #24]
 8009c9e:	e775      	b.n	8009b8c <_dtoa_r+0x7c4>
 8009ca0:	9b05      	ldr	r3, [sp, #20]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	dc18      	bgt.n	8009cd8 <_dtoa_r+0x910>
 8009ca6:	9b02      	ldr	r3, [sp, #8]
 8009ca8:	b9b3      	cbnz	r3, 8009cd8 <_dtoa_r+0x910>
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cb0:	b9a3      	cbnz	r3, 8009cdc <_dtoa_r+0x914>
 8009cb2:	9b03      	ldr	r3, [sp, #12]
 8009cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cb8:	0d1b      	lsrs	r3, r3, #20
 8009cba:	051b      	lsls	r3, r3, #20
 8009cbc:	b12b      	cbz	r3, 8009cca <_dtoa_r+0x902>
 8009cbe:	9b04      	ldr	r3, [sp, #16]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	9304      	str	r3, [sp, #16]
 8009cc4:	f108 0801 	add.w	r8, r8, #1
 8009cc8:	2301      	movs	r3, #1
 8009cca:	9306      	str	r3, [sp, #24]
 8009ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f47f af74 	bne.w	8009bbc <_dtoa_r+0x7f4>
 8009cd4:	2001      	movs	r0, #1
 8009cd6:	e779      	b.n	8009bcc <_dtoa_r+0x804>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e7f6      	b.n	8009cca <_dtoa_r+0x902>
 8009cdc:	9b02      	ldr	r3, [sp, #8]
 8009cde:	e7f4      	b.n	8009cca <_dtoa_r+0x902>
 8009ce0:	d085      	beq.n	8009bee <_dtoa_r+0x826>
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	301c      	adds	r0, #28
 8009ce6:	e77d      	b.n	8009be4 <_dtoa_r+0x81c>
 8009ce8:	40240000 	.word	0x40240000
 8009cec:	9b01      	ldr	r3, [sp, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dc38      	bgt.n	8009d64 <_dtoa_r+0x99c>
 8009cf2:	9b05      	ldr	r3, [sp, #20]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	dd35      	ble.n	8009d64 <_dtoa_r+0x99c>
 8009cf8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009cfc:	f1b9 0f00 	cmp.w	r9, #0
 8009d00:	d10d      	bne.n	8009d1e <_dtoa_r+0x956>
 8009d02:	4631      	mov	r1, r6
 8009d04:	464b      	mov	r3, r9
 8009d06:	2205      	movs	r2, #5
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f000 f9b7 	bl	800a07c <__multadd>
 8009d0e:	4601      	mov	r1, r0
 8009d10:	4606      	mov	r6, r0
 8009d12:	4658      	mov	r0, fp
 8009d14:	f000 fbce 	bl	800a4b4 <__mcmp>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	f73f adbd 	bgt.w	8009898 <_dtoa_r+0x4d0>
 8009d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d20:	9d00      	ldr	r5, [sp, #0]
 8009d22:	ea6f 0a03 	mvn.w	sl, r3
 8009d26:	f04f 0800 	mov.w	r8, #0
 8009d2a:	4631      	mov	r1, r6
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 f983 	bl	800a038 <_Bfree>
 8009d32:	2f00      	cmp	r7, #0
 8009d34:	f43f aeb4 	beq.w	8009aa0 <_dtoa_r+0x6d8>
 8009d38:	f1b8 0f00 	cmp.w	r8, #0
 8009d3c:	d005      	beq.n	8009d4a <_dtoa_r+0x982>
 8009d3e:	45b8      	cmp	r8, r7
 8009d40:	d003      	beq.n	8009d4a <_dtoa_r+0x982>
 8009d42:	4641      	mov	r1, r8
 8009d44:	4620      	mov	r0, r4
 8009d46:	f000 f977 	bl	800a038 <_Bfree>
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 f973 	bl	800a038 <_Bfree>
 8009d52:	e6a5      	b.n	8009aa0 <_dtoa_r+0x6d8>
 8009d54:	2600      	movs	r6, #0
 8009d56:	4637      	mov	r7, r6
 8009d58:	e7e1      	b.n	8009d1e <_dtoa_r+0x956>
 8009d5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009d5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009d60:	4637      	mov	r7, r6
 8009d62:	e599      	b.n	8009898 <_dtoa_r+0x4d0>
 8009d64:	9b08      	ldr	r3, [sp, #32]
 8009d66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 80fd 	beq.w	8009f6a <_dtoa_r+0xba2>
 8009d70:	2d00      	cmp	r5, #0
 8009d72:	dd05      	ble.n	8009d80 <_dtoa_r+0x9b8>
 8009d74:	4639      	mov	r1, r7
 8009d76:	462a      	mov	r2, r5
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f000 fb2f 	bl	800a3dc <__lshift>
 8009d7e:	4607      	mov	r7, r0
 8009d80:	9b06      	ldr	r3, [sp, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d05c      	beq.n	8009e40 <_dtoa_r+0xa78>
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 f915 	bl	8009fb8 <_Balloc>
 8009d8e:	4605      	mov	r5, r0
 8009d90:	b928      	cbnz	r0, 8009d9e <_dtoa_r+0x9d6>
 8009d92:	4b80      	ldr	r3, [pc, #512]	; (8009f94 <_dtoa_r+0xbcc>)
 8009d94:	4602      	mov	r2, r0
 8009d96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d9a:	f7ff bb2e 	b.w	80093fa <_dtoa_r+0x32>
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	3202      	adds	r2, #2
 8009da2:	0092      	lsls	r2, r2, #2
 8009da4:	f107 010c 	add.w	r1, r7, #12
 8009da8:	300c      	adds	r0, #12
 8009daa:	f7fe fdd3 	bl	8008954 <memcpy>
 8009dae:	2201      	movs	r2, #1
 8009db0:	4629      	mov	r1, r5
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 fb12 	bl	800a3dc <__lshift>
 8009db8:	9b00      	ldr	r3, [sp, #0]
 8009dba:	3301      	adds	r3, #1
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	444b      	add	r3, r9
 8009dc2:	9307      	str	r3, [sp, #28]
 8009dc4:	9b02      	ldr	r3, [sp, #8]
 8009dc6:	f003 0301 	and.w	r3, r3, #1
 8009dca:	46b8      	mov	r8, r7
 8009dcc:	9306      	str	r3, [sp, #24]
 8009dce:	4607      	mov	r7, r0
 8009dd0:	9b01      	ldr	r3, [sp, #4]
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	4658      	mov	r0, fp
 8009dd8:	9302      	str	r3, [sp, #8]
 8009dda:	f7ff fa6a 	bl	80092b2 <quorem>
 8009dde:	4603      	mov	r3, r0
 8009de0:	3330      	adds	r3, #48	; 0x30
 8009de2:	9004      	str	r0, [sp, #16]
 8009de4:	4641      	mov	r1, r8
 8009de6:	4658      	mov	r0, fp
 8009de8:	9308      	str	r3, [sp, #32]
 8009dea:	f000 fb63 	bl	800a4b4 <__mcmp>
 8009dee:	463a      	mov	r2, r7
 8009df0:	4681      	mov	r9, r0
 8009df2:	4631      	mov	r1, r6
 8009df4:	4620      	mov	r0, r4
 8009df6:	f000 fb79 	bl	800a4ec <__mdiff>
 8009dfa:	68c2      	ldr	r2, [r0, #12]
 8009dfc:	9b08      	ldr	r3, [sp, #32]
 8009dfe:	4605      	mov	r5, r0
 8009e00:	bb02      	cbnz	r2, 8009e44 <_dtoa_r+0xa7c>
 8009e02:	4601      	mov	r1, r0
 8009e04:	4658      	mov	r0, fp
 8009e06:	f000 fb55 	bl	800a4b4 <__mcmp>
 8009e0a:	9b08      	ldr	r3, [sp, #32]
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4620      	mov	r0, r4
 8009e12:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009e16:	f000 f90f 	bl	800a038 <_Bfree>
 8009e1a:	9b05      	ldr	r3, [sp, #20]
 8009e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e1e:	9d01      	ldr	r5, [sp, #4]
 8009e20:	ea43 0102 	orr.w	r1, r3, r2
 8009e24:	9b06      	ldr	r3, [sp, #24]
 8009e26:	430b      	orrs	r3, r1
 8009e28:	9b08      	ldr	r3, [sp, #32]
 8009e2a:	d10d      	bne.n	8009e48 <_dtoa_r+0xa80>
 8009e2c:	2b39      	cmp	r3, #57	; 0x39
 8009e2e:	d029      	beq.n	8009e84 <_dtoa_r+0xabc>
 8009e30:	f1b9 0f00 	cmp.w	r9, #0
 8009e34:	dd01      	ble.n	8009e3a <_dtoa_r+0xa72>
 8009e36:	9b04      	ldr	r3, [sp, #16]
 8009e38:	3331      	adds	r3, #49	; 0x31
 8009e3a:	9a02      	ldr	r2, [sp, #8]
 8009e3c:	7013      	strb	r3, [r2, #0]
 8009e3e:	e774      	b.n	8009d2a <_dtoa_r+0x962>
 8009e40:	4638      	mov	r0, r7
 8009e42:	e7b9      	b.n	8009db8 <_dtoa_r+0x9f0>
 8009e44:	2201      	movs	r2, #1
 8009e46:	e7e2      	b.n	8009e0e <_dtoa_r+0xa46>
 8009e48:	f1b9 0f00 	cmp.w	r9, #0
 8009e4c:	db06      	blt.n	8009e5c <_dtoa_r+0xa94>
 8009e4e:	9905      	ldr	r1, [sp, #20]
 8009e50:	ea41 0909 	orr.w	r9, r1, r9
 8009e54:	9906      	ldr	r1, [sp, #24]
 8009e56:	ea59 0101 	orrs.w	r1, r9, r1
 8009e5a:	d120      	bne.n	8009e9e <_dtoa_r+0xad6>
 8009e5c:	2a00      	cmp	r2, #0
 8009e5e:	ddec      	ble.n	8009e3a <_dtoa_r+0xa72>
 8009e60:	4659      	mov	r1, fp
 8009e62:	2201      	movs	r2, #1
 8009e64:	4620      	mov	r0, r4
 8009e66:	9301      	str	r3, [sp, #4]
 8009e68:	f000 fab8 	bl	800a3dc <__lshift>
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4683      	mov	fp, r0
 8009e70:	f000 fb20 	bl	800a4b4 <__mcmp>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	9b01      	ldr	r3, [sp, #4]
 8009e78:	dc02      	bgt.n	8009e80 <_dtoa_r+0xab8>
 8009e7a:	d1de      	bne.n	8009e3a <_dtoa_r+0xa72>
 8009e7c:	07da      	lsls	r2, r3, #31
 8009e7e:	d5dc      	bpl.n	8009e3a <_dtoa_r+0xa72>
 8009e80:	2b39      	cmp	r3, #57	; 0x39
 8009e82:	d1d8      	bne.n	8009e36 <_dtoa_r+0xa6e>
 8009e84:	9a02      	ldr	r2, [sp, #8]
 8009e86:	2339      	movs	r3, #57	; 0x39
 8009e88:	7013      	strb	r3, [r2, #0]
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	461d      	mov	r5, r3
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e94:	2a39      	cmp	r2, #57	; 0x39
 8009e96:	d050      	beq.n	8009f3a <_dtoa_r+0xb72>
 8009e98:	3201      	adds	r2, #1
 8009e9a:	701a      	strb	r2, [r3, #0]
 8009e9c:	e745      	b.n	8009d2a <_dtoa_r+0x962>
 8009e9e:	2a00      	cmp	r2, #0
 8009ea0:	dd03      	ble.n	8009eaa <_dtoa_r+0xae2>
 8009ea2:	2b39      	cmp	r3, #57	; 0x39
 8009ea4:	d0ee      	beq.n	8009e84 <_dtoa_r+0xabc>
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	e7c7      	b.n	8009e3a <_dtoa_r+0xa72>
 8009eaa:	9a01      	ldr	r2, [sp, #4]
 8009eac:	9907      	ldr	r1, [sp, #28]
 8009eae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009eb2:	428a      	cmp	r2, r1
 8009eb4:	d02a      	beq.n	8009f0c <_dtoa_r+0xb44>
 8009eb6:	4659      	mov	r1, fp
 8009eb8:	2300      	movs	r3, #0
 8009eba:	220a      	movs	r2, #10
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 f8dd 	bl	800a07c <__multadd>
 8009ec2:	45b8      	cmp	r8, r7
 8009ec4:	4683      	mov	fp, r0
 8009ec6:	f04f 0300 	mov.w	r3, #0
 8009eca:	f04f 020a 	mov.w	r2, #10
 8009ece:	4641      	mov	r1, r8
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	d107      	bne.n	8009ee4 <_dtoa_r+0xb1c>
 8009ed4:	f000 f8d2 	bl	800a07c <__multadd>
 8009ed8:	4680      	mov	r8, r0
 8009eda:	4607      	mov	r7, r0
 8009edc:	9b01      	ldr	r3, [sp, #4]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	9301      	str	r3, [sp, #4]
 8009ee2:	e775      	b.n	8009dd0 <_dtoa_r+0xa08>
 8009ee4:	f000 f8ca 	bl	800a07c <__multadd>
 8009ee8:	4639      	mov	r1, r7
 8009eea:	4680      	mov	r8, r0
 8009eec:	2300      	movs	r3, #0
 8009eee:	220a      	movs	r2, #10
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f000 f8c3 	bl	800a07c <__multadd>
 8009ef6:	4607      	mov	r7, r0
 8009ef8:	e7f0      	b.n	8009edc <_dtoa_r+0xb14>
 8009efa:	f1b9 0f00 	cmp.w	r9, #0
 8009efe:	9a00      	ldr	r2, [sp, #0]
 8009f00:	bfcc      	ite	gt
 8009f02:	464d      	movgt	r5, r9
 8009f04:	2501      	movle	r5, #1
 8009f06:	4415      	add	r5, r2
 8009f08:	f04f 0800 	mov.w	r8, #0
 8009f0c:	4659      	mov	r1, fp
 8009f0e:	2201      	movs	r2, #1
 8009f10:	4620      	mov	r0, r4
 8009f12:	9301      	str	r3, [sp, #4]
 8009f14:	f000 fa62 	bl	800a3dc <__lshift>
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4683      	mov	fp, r0
 8009f1c:	f000 faca 	bl	800a4b4 <__mcmp>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	dcb2      	bgt.n	8009e8a <_dtoa_r+0xac2>
 8009f24:	d102      	bne.n	8009f2c <_dtoa_r+0xb64>
 8009f26:	9b01      	ldr	r3, [sp, #4]
 8009f28:	07db      	lsls	r3, r3, #31
 8009f2a:	d4ae      	bmi.n	8009e8a <_dtoa_r+0xac2>
 8009f2c:	462b      	mov	r3, r5
 8009f2e:	461d      	mov	r5, r3
 8009f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f34:	2a30      	cmp	r2, #48	; 0x30
 8009f36:	d0fa      	beq.n	8009f2e <_dtoa_r+0xb66>
 8009f38:	e6f7      	b.n	8009d2a <_dtoa_r+0x962>
 8009f3a:	9a00      	ldr	r2, [sp, #0]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d1a5      	bne.n	8009e8c <_dtoa_r+0xac4>
 8009f40:	f10a 0a01 	add.w	sl, sl, #1
 8009f44:	2331      	movs	r3, #49	; 0x31
 8009f46:	e779      	b.n	8009e3c <_dtoa_r+0xa74>
 8009f48:	4b13      	ldr	r3, [pc, #76]	; (8009f98 <_dtoa_r+0xbd0>)
 8009f4a:	f7ff baaf 	b.w	80094ac <_dtoa_r+0xe4>
 8009f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f47f aa86 	bne.w	8009462 <_dtoa_r+0x9a>
 8009f56:	4b11      	ldr	r3, [pc, #68]	; (8009f9c <_dtoa_r+0xbd4>)
 8009f58:	f7ff baa8 	b.w	80094ac <_dtoa_r+0xe4>
 8009f5c:	f1b9 0f00 	cmp.w	r9, #0
 8009f60:	dc03      	bgt.n	8009f6a <_dtoa_r+0xba2>
 8009f62:	9b05      	ldr	r3, [sp, #20]
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	f73f aec9 	bgt.w	8009cfc <_dtoa_r+0x934>
 8009f6a:	9d00      	ldr	r5, [sp, #0]
 8009f6c:	4631      	mov	r1, r6
 8009f6e:	4658      	mov	r0, fp
 8009f70:	f7ff f99f 	bl	80092b2 <quorem>
 8009f74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f78:	f805 3b01 	strb.w	r3, [r5], #1
 8009f7c:	9a00      	ldr	r2, [sp, #0]
 8009f7e:	1aaa      	subs	r2, r5, r2
 8009f80:	4591      	cmp	r9, r2
 8009f82:	ddba      	ble.n	8009efa <_dtoa_r+0xb32>
 8009f84:	4659      	mov	r1, fp
 8009f86:	2300      	movs	r3, #0
 8009f88:	220a      	movs	r2, #10
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 f876 	bl	800a07c <__multadd>
 8009f90:	4683      	mov	fp, r0
 8009f92:	e7eb      	b.n	8009f6c <_dtoa_r+0xba4>
 8009f94:	0800c9fb 	.word	0x0800c9fb
 8009f98:	0800c954 	.word	0x0800c954
 8009f9c:	0800c978 	.word	0x0800c978

08009fa0 <_localeconv_r>:
 8009fa0:	4800      	ldr	r0, [pc, #0]	; (8009fa4 <_localeconv_r+0x4>)
 8009fa2:	4770      	bx	lr
 8009fa4:	20000194 	.word	0x20000194

08009fa8 <malloc>:
 8009fa8:	4b02      	ldr	r3, [pc, #8]	; (8009fb4 <malloc+0xc>)
 8009faa:	4601      	mov	r1, r0
 8009fac:	6818      	ldr	r0, [r3, #0]
 8009fae:	f000 bbe1 	b.w	800a774 <_malloc_r>
 8009fb2:	bf00      	nop
 8009fb4:	20000040 	.word	0x20000040

08009fb8 <_Balloc>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	460d      	mov	r5, r1
 8009fc0:	b976      	cbnz	r6, 8009fe0 <_Balloc+0x28>
 8009fc2:	2010      	movs	r0, #16
 8009fc4:	f7ff fff0 	bl	8009fa8 <malloc>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	6260      	str	r0, [r4, #36]	; 0x24
 8009fcc:	b920      	cbnz	r0, 8009fd8 <_Balloc+0x20>
 8009fce:	4b18      	ldr	r3, [pc, #96]	; (800a030 <_Balloc+0x78>)
 8009fd0:	4818      	ldr	r0, [pc, #96]	; (800a034 <_Balloc+0x7c>)
 8009fd2:	2166      	movs	r1, #102	; 0x66
 8009fd4:	f000 fd94 	bl	800ab00 <__assert_func>
 8009fd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fdc:	6006      	str	r6, [r0, #0]
 8009fde:	60c6      	str	r6, [r0, #12]
 8009fe0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009fe2:	68f3      	ldr	r3, [r6, #12]
 8009fe4:	b183      	cbz	r3, 800a008 <_Balloc+0x50>
 8009fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fee:	b9b8      	cbnz	r0, 800a020 <_Balloc+0x68>
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ff6:	1d72      	adds	r2, r6, #5
 8009ff8:	0092      	lsls	r2, r2, #2
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f000 fb5a 	bl	800a6b4 <_calloc_r>
 800a000:	b160      	cbz	r0, 800a01c <_Balloc+0x64>
 800a002:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a006:	e00e      	b.n	800a026 <_Balloc+0x6e>
 800a008:	2221      	movs	r2, #33	; 0x21
 800a00a:	2104      	movs	r1, #4
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 fb51 	bl	800a6b4 <_calloc_r>
 800a012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a014:	60f0      	str	r0, [r6, #12]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d1e4      	bne.n	8009fe6 <_Balloc+0x2e>
 800a01c:	2000      	movs	r0, #0
 800a01e:	bd70      	pop	{r4, r5, r6, pc}
 800a020:	6802      	ldr	r2, [r0, #0]
 800a022:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a026:	2300      	movs	r3, #0
 800a028:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a02c:	e7f7      	b.n	800a01e <_Balloc+0x66>
 800a02e:	bf00      	nop
 800a030:	0800c985 	.word	0x0800c985
 800a034:	0800ca0c 	.word	0x0800ca0c

0800a038 <_Bfree>:
 800a038:	b570      	push	{r4, r5, r6, lr}
 800a03a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a03c:	4605      	mov	r5, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	b976      	cbnz	r6, 800a060 <_Bfree+0x28>
 800a042:	2010      	movs	r0, #16
 800a044:	f7ff ffb0 	bl	8009fa8 <malloc>
 800a048:	4602      	mov	r2, r0
 800a04a:	6268      	str	r0, [r5, #36]	; 0x24
 800a04c:	b920      	cbnz	r0, 800a058 <_Bfree+0x20>
 800a04e:	4b09      	ldr	r3, [pc, #36]	; (800a074 <_Bfree+0x3c>)
 800a050:	4809      	ldr	r0, [pc, #36]	; (800a078 <_Bfree+0x40>)
 800a052:	218a      	movs	r1, #138	; 0x8a
 800a054:	f000 fd54 	bl	800ab00 <__assert_func>
 800a058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a05c:	6006      	str	r6, [r0, #0]
 800a05e:	60c6      	str	r6, [r0, #12]
 800a060:	b13c      	cbz	r4, 800a072 <_Bfree+0x3a>
 800a062:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a064:	6862      	ldr	r2, [r4, #4]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a06c:	6021      	str	r1, [r4, #0]
 800a06e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	0800c985 	.word	0x0800c985
 800a078:	0800ca0c 	.word	0x0800ca0c

0800a07c <__multadd>:
 800a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a080:	690e      	ldr	r6, [r1, #16]
 800a082:	4607      	mov	r7, r0
 800a084:	4698      	mov	r8, r3
 800a086:	460c      	mov	r4, r1
 800a088:	f101 0014 	add.w	r0, r1, #20
 800a08c:	2300      	movs	r3, #0
 800a08e:	6805      	ldr	r5, [r0, #0]
 800a090:	b2a9      	uxth	r1, r5
 800a092:	fb02 8101 	mla	r1, r2, r1, r8
 800a096:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a09a:	0c2d      	lsrs	r5, r5, #16
 800a09c:	fb02 c505 	mla	r5, r2, r5, ip
 800a0a0:	b289      	uxth	r1, r1
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a0a8:	429e      	cmp	r6, r3
 800a0aa:	f840 1b04 	str.w	r1, [r0], #4
 800a0ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a0b2:	dcec      	bgt.n	800a08e <__multadd+0x12>
 800a0b4:	f1b8 0f00 	cmp.w	r8, #0
 800a0b8:	d022      	beq.n	800a100 <__multadd+0x84>
 800a0ba:	68a3      	ldr	r3, [r4, #8]
 800a0bc:	42b3      	cmp	r3, r6
 800a0be:	dc19      	bgt.n	800a0f4 <__multadd+0x78>
 800a0c0:	6861      	ldr	r1, [r4, #4]
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	3101      	adds	r1, #1
 800a0c6:	f7ff ff77 	bl	8009fb8 <_Balloc>
 800a0ca:	4605      	mov	r5, r0
 800a0cc:	b928      	cbnz	r0, 800a0da <__multadd+0x5e>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	4b0d      	ldr	r3, [pc, #52]	; (800a108 <__multadd+0x8c>)
 800a0d2:	480e      	ldr	r0, [pc, #56]	; (800a10c <__multadd+0x90>)
 800a0d4:	21b5      	movs	r1, #181	; 0xb5
 800a0d6:	f000 fd13 	bl	800ab00 <__assert_func>
 800a0da:	6922      	ldr	r2, [r4, #16]
 800a0dc:	3202      	adds	r2, #2
 800a0de:	f104 010c 	add.w	r1, r4, #12
 800a0e2:	0092      	lsls	r2, r2, #2
 800a0e4:	300c      	adds	r0, #12
 800a0e6:	f7fe fc35 	bl	8008954 <memcpy>
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	f7ff ffa3 	bl	800a038 <_Bfree>
 800a0f2:	462c      	mov	r4, r5
 800a0f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a0f8:	3601      	adds	r6, #1
 800a0fa:	f8c3 8014 	str.w	r8, [r3, #20]
 800a0fe:	6126      	str	r6, [r4, #16]
 800a100:	4620      	mov	r0, r4
 800a102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a106:	bf00      	nop
 800a108:	0800c9fb 	.word	0x0800c9fb
 800a10c:	0800ca0c 	.word	0x0800ca0c

0800a110 <__hi0bits>:
 800a110:	0c03      	lsrs	r3, r0, #16
 800a112:	041b      	lsls	r3, r3, #16
 800a114:	b9d3      	cbnz	r3, 800a14c <__hi0bits+0x3c>
 800a116:	0400      	lsls	r0, r0, #16
 800a118:	2310      	movs	r3, #16
 800a11a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a11e:	bf04      	itt	eq
 800a120:	0200      	lsleq	r0, r0, #8
 800a122:	3308      	addeq	r3, #8
 800a124:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a128:	bf04      	itt	eq
 800a12a:	0100      	lsleq	r0, r0, #4
 800a12c:	3304      	addeq	r3, #4
 800a12e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a132:	bf04      	itt	eq
 800a134:	0080      	lsleq	r0, r0, #2
 800a136:	3302      	addeq	r3, #2
 800a138:	2800      	cmp	r0, #0
 800a13a:	db05      	blt.n	800a148 <__hi0bits+0x38>
 800a13c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a140:	f103 0301 	add.w	r3, r3, #1
 800a144:	bf08      	it	eq
 800a146:	2320      	moveq	r3, #32
 800a148:	4618      	mov	r0, r3
 800a14a:	4770      	bx	lr
 800a14c:	2300      	movs	r3, #0
 800a14e:	e7e4      	b.n	800a11a <__hi0bits+0xa>

0800a150 <__lo0bits>:
 800a150:	6803      	ldr	r3, [r0, #0]
 800a152:	f013 0207 	ands.w	r2, r3, #7
 800a156:	4601      	mov	r1, r0
 800a158:	d00b      	beq.n	800a172 <__lo0bits+0x22>
 800a15a:	07da      	lsls	r2, r3, #31
 800a15c:	d424      	bmi.n	800a1a8 <__lo0bits+0x58>
 800a15e:	0798      	lsls	r0, r3, #30
 800a160:	bf49      	itett	mi
 800a162:	085b      	lsrmi	r3, r3, #1
 800a164:	089b      	lsrpl	r3, r3, #2
 800a166:	2001      	movmi	r0, #1
 800a168:	600b      	strmi	r3, [r1, #0]
 800a16a:	bf5c      	itt	pl
 800a16c:	600b      	strpl	r3, [r1, #0]
 800a16e:	2002      	movpl	r0, #2
 800a170:	4770      	bx	lr
 800a172:	b298      	uxth	r0, r3
 800a174:	b9b0      	cbnz	r0, 800a1a4 <__lo0bits+0x54>
 800a176:	0c1b      	lsrs	r3, r3, #16
 800a178:	2010      	movs	r0, #16
 800a17a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a17e:	bf04      	itt	eq
 800a180:	0a1b      	lsreq	r3, r3, #8
 800a182:	3008      	addeq	r0, #8
 800a184:	071a      	lsls	r2, r3, #28
 800a186:	bf04      	itt	eq
 800a188:	091b      	lsreq	r3, r3, #4
 800a18a:	3004      	addeq	r0, #4
 800a18c:	079a      	lsls	r2, r3, #30
 800a18e:	bf04      	itt	eq
 800a190:	089b      	lsreq	r3, r3, #2
 800a192:	3002      	addeq	r0, #2
 800a194:	07da      	lsls	r2, r3, #31
 800a196:	d403      	bmi.n	800a1a0 <__lo0bits+0x50>
 800a198:	085b      	lsrs	r3, r3, #1
 800a19a:	f100 0001 	add.w	r0, r0, #1
 800a19e:	d005      	beq.n	800a1ac <__lo0bits+0x5c>
 800a1a0:	600b      	str	r3, [r1, #0]
 800a1a2:	4770      	bx	lr
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	e7e8      	b.n	800a17a <__lo0bits+0x2a>
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	4770      	bx	lr
 800a1ac:	2020      	movs	r0, #32
 800a1ae:	4770      	bx	lr

0800a1b0 <__i2b>:
 800a1b0:	b510      	push	{r4, lr}
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	f7ff feff 	bl	8009fb8 <_Balloc>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	b928      	cbnz	r0, 800a1ca <__i2b+0x1a>
 800a1be:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <__i2b+0x24>)
 800a1c0:	4805      	ldr	r0, [pc, #20]	; (800a1d8 <__i2b+0x28>)
 800a1c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a1c6:	f000 fc9b 	bl	800ab00 <__assert_func>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	6144      	str	r4, [r0, #20]
 800a1ce:	6103      	str	r3, [r0, #16]
 800a1d0:	bd10      	pop	{r4, pc}
 800a1d2:	bf00      	nop
 800a1d4:	0800c9fb 	.word	0x0800c9fb
 800a1d8:	0800ca0c 	.word	0x0800ca0c

0800a1dc <__multiply>:
 800a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	4614      	mov	r4, r2
 800a1e2:	690a      	ldr	r2, [r1, #16]
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	bfb8      	it	lt
 800a1ea:	460b      	movlt	r3, r1
 800a1ec:	460d      	mov	r5, r1
 800a1ee:	bfbc      	itt	lt
 800a1f0:	4625      	movlt	r5, r4
 800a1f2:	461c      	movlt	r4, r3
 800a1f4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a1f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a1fc:	68ab      	ldr	r3, [r5, #8]
 800a1fe:	6869      	ldr	r1, [r5, #4]
 800a200:	eb0a 0709 	add.w	r7, sl, r9
 800a204:	42bb      	cmp	r3, r7
 800a206:	b085      	sub	sp, #20
 800a208:	bfb8      	it	lt
 800a20a:	3101      	addlt	r1, #1
 800a20c:	f7ff fed4 	bl	8009fb8 <_Balloc>
 800a210:	b930      	cbnz	r0, 800a220 <__multiply+0x44>
 800a212:	4602      	mov	r2, r0
 800a214:	4b42      	ldr	r3, [pc, #264]	; (800a320 <__multiply+0x144>)
 800a216:	4843      	ldr	r0, [pc, #268]	; (800a324 <__multiply+0x148>)
 800a218:	f240 115d 	movw	r1, #349	; 0x15d
 800a21c:	f000 fc70 	bl	800ab00 <__assert_func>
 800a220:	f100 0614 	add.w	r6, r0, #20
 800a224:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a228:	4633      	mov	r3, r6
 800a22a:	2200      	movs	r2, #0
 800a22c:	4543      	cmp	r3, r8
 800a22e:	d31e      	bcc.n	800a26e <__multiply+0x92>
 800a230:	f105 0c14 	add.w	ip, r5, #20
 800a234:	f104 0314 	add.w	r3, r4, #20
 800a238:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a23c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a240:	9202      	str	r2, [sp, #8]
 800a242:	ebac 0205 	sub.w	r2, ip, r5
 800a246:	3a15      	subs	r2, #21
 800a248:	f022 0203 	bic.w	r2, r2, #3
 800a24c:	3204      	adds	r2, #4
 800a24e:	f105 0115 	add.w	r1, r5, #21
 800a252:	458c      	cmp	ip, r1
 800a254:	bf38      	it	cc
 800a256:	2204      	movcc	r2, #4
 800a258:	9201      	str	r2, [sp, #4]
 800a25a:	9a02      	ldr	r2, [sp, #8]
 800a25c:	9303      	str	r3, [sp, #12]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d808      	bhi.n	800a274 <__multiply+0x98>
 800a262:	2f00      	cmp	r7, #0
 800a264:	dc55      	bgt.n	800a312 <__multiply+0x136>
 800a266:	6107      	str	r7, [r0, #16]
 800a268:	b005      	add	sp, #20
 800a26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26e:	f843 2b04 	str.w	r2, [r3], #4
 800a272:	e7db      	b.n	800a22c <__multiply+0x50>
 800a274:	f8b3 a000 	ldrh.w	sl, [r3]
 800a278:	f1ba 0f00 	cmp.w	sl, #0
 800a27c:	d020      	beq.n	800a2c0 <__multiply+0xe4>
 800a27e:	f105 0e14 	add.w	lr, r5, #20
 800a282:	46b1      	mov	r9, r6
 800a284:	2200      	movs	r2, #0
 800a286:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a28a:	f8d9 b000 	ldr.w	fp, [r9]
 800a28e:	b2a1      	uxth	r1, r4
 800a290:	fa1f fb8b 	uxth.w	fp, fp
 800a294:	fb0a b101 	mla	r1, sl, r1, fp
 800a298:	4411      	add	r1, r2
 800a29a:	f8d9 2000 	ldr.w	r2, [r9]
 800a29e:	0c24      	lsrs	r4, r4, #16
 800a2a0:	0c12      	lsrs	r2, r2, #16
 800a2a2:	fb0a 2404 	mla	r4, sl, r4, r2
 800a2a6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a2aa:	b289      	uxth	r1, r1
 800a2ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a2b0:	45f4      	cmp	ip, lr
 800a2b2:	f849 1b04 	str.w	r1, [r9], #4
 800a2b6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a2ba:	d8e4      	bhi.n	800a286 <__multiply+0xaa>
 800a2bc:	9901      	ldr	r1, [sp, #4]
 800a2be:	5072      	str	r2, [r6, r1]
 800a2c0:	9a03      	ldr	r2, [sp, #12]
 800a2c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	f1b9 0f00 	cmp.w	r9, #0
 800a2cc:	d01f      	beq.n	800a30e <__multiply+0x132>
 800a2ce:	6834      	ldr	r4, [r6, #0]
 800a2d0:	f105 0114 	add.w	r1, r5, #20
 800a2d4:	46b6      	mov	lr, r6
 800a2d6:	f04f 0a00 	mov.w	sl, #0
 800a2da:	880a      	ldrh	r2, [r1, #0]
 800a2dc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a2e0:	fb09 b202 	mla	r2, r9, r2, fp
 800a2e4:	4492      	add	sl, r2
 800a2e6:	b2a4      	uxth	r4, r4
 800a2e8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a2ec:	f84e 4b04 	str.w	r4, [lr], #4
 800a2f0:	f851 4b04 	ldr.w	r4, [r1], #4
 800a2f4:	f8be 2000 	ldrh.w	r2, [lr]
 800a2f8:	0c24      	lsrs	r4, r4, #16
 800a2fa:	fb09 2404 	mla	r4, r9, r4, r2
 800a2fe:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a302:	458c      	cmp	ip, r1
 800a304:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a308:	d8e7      	bhi.n	800a2da <__multiply+0xfe>
 800a30a:	9a01      	ldr	r2, [sp, #4]
 800a30c:	50b4      	str	r4, [r6, r2]
 800a30e:	3604      	adds	r6, #4
 800a310:	e7a3      	b.n	800a25a <__multiply+0x7e>
 800a312:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1a5      	bne.n	800a266 <__multiply+0x8a>
 800a31a:	3f01      	subs	r7, #1
 800a31c:	e7a1      	b.n	800a262 <__multiply+0x86>
 800a31e:	bf00      	nop
 800a320:	0800c9fb 	.word	0x0800c9fb
 800a324:	0800ca0c 	.word	0x0800ca0c

0800a328 <__pow5mult>:
 800a328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a32c:	4615      	mov	r5, r2
 800a32e:	f012 0203 	ands.w	r2, r2, #3
 800a332:	4606      	mov	r6, r0
 800a334:	460f      	mov	r7, r1
 800a336:	d007      	beq.n	800a348 <__pow5mult+0x20>
 800a338:	4c25      	ldr	r4, [pc, #148]	; (800a3d0 <__pow5mult+0xa8>)
 800a33a:	3a01      	subs	r2, #1
 800a33c:	2300      	movs	r3, #0
 800a33e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a342:	f7ff fe9b 	bl	800a07c <__multadd>
 800a346:	4607      	mov	r7, r0
 800a348:	10ad      	asrs	r5, r5, #2
 800a34a:	d03d      	beq.n	800a3c8 <__pow5mult+0xa0>
 800a34c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a34e:	b97c      	cbnz	r4, 800a370 <__pow5mult+0x48>
 800a350:	2010      	movs	r0, #16
 800a352:	f7ff fe29 	bl	8009fa8 <malloc>
 800a356:	4602      	mov	r2, r0
 800a358:	6270      	str	r0, [r6, #36]	; 0x24
 800a35a:	b928      	cbnz	r0, 800a368 <__pow5mult+0x40>
 800a35c:	4b1d      	ldr	r3, [pc, #116]	; (800a3d4 <__pow5mult+0xac>)
 800a35e:	481e      	ldr	r0, [pc, #120]	; (800a3d8 <__pow5mult+0xb0>)
 800a360:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a364:	f000 fbcc 	bl	800ab00 <__assert_func>
 800a368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a36c:	6004      	str	r4, [r0, #0]
 800a36e:	60c4      	str	r4, [r0, #12]
 800a370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a378:	b94c      	cbnz	r4, 800a38e <__pow5mult+0x66>
 800a37a:	f240 2171 	movw	r1, #625	; 0x271
 800a37e:	4630      	mov	r0, r6
 800a380:	f7ff ff16 	bl	800a1b0 <__i2b>
 800a384:	2300      	movs	r3, #0
 800a386:	f8c8 0008 	str.w	r0, [r8, #8]
 800a38a:	4604      	mov	r4, r0
 800a38c:	6003      	str	r3, [r0, #0]
 800a38e:	f04f 0900 	mov.w	r9, #0
 800a392:	07eb      	lsls	r3, r5, #31
 800a394:	d50a      	bpl.n	800a3ac <__pow5mult+0x84>
 800a396:	4639      	mov	r1, r7
 800a398:	4622      	mov	r2, r4
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7ff ff1e 	bl	800a1dc <__multiply>
 800a3a0:	4639      	mov	r1, r7
 800a3a2:	4680      	mov	r8, r0
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f7ff fe47 	bl	800a038 <_Bfree>
 800a3aa:	4647      	mov	r7, r8
 800a3ac:	106d      	asrs	r5, r5, #1
 800a3ae:	d00b      	beq.n	800a3c8 <__pow5mult+0xa0>
 800a3b0:	6820      	ldr	r0, [r4, #0]
 800a3b2:	b938      	cbnz	r0, 800a3c4 <__pow5mult+0x9c>
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff ff0f 	bl	800a1dc <__multiply>
 800a3be:	6020      	str	r0, [r4, #0]
 800a3c0:	f8c0 9000 	str.w	r9, [r0]
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	e7e4      	b.n	800a392 <__pow5mult+0x6a>
 800a3c8:	4638      	mov	r0, r7
 800a3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	bf00      	nop
 800a3d0:	0800cb60 	.word	0x0800cb60
 800a3d4:	0800c985 	.word	0x0800c985
 800a3d8:	0800ca0c 	.word	0x0800ca0c

0800a3dc <__lshift>:
 800a3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e0:	460c      	mov	r4, r1
 800a3e2:	6849      	ldr	r1, [r1, #4]
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3ea:	68a3      	ldr	r3, [r4, #8]
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	4691      	mov	r9, r2
 800a3f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3f4:	f108 0601 	add.w	r6, r8, #1
 800a3f8:	42b3      	cmp	r3, r6
 800a3fa:	db0b      	blt.n	800a414 <__lshift+0x38>
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f7ff fddb 	bl	8009fb8 <_Balloc>
 800a402:	4605      	mov	r5, r0
 800a404:	b948      	cbnz	r0, 800a41a <__lshift+0x3e>
 800a406:	4602      	mov	r2, r0
 800a408:	4b28      	ldr	r3, [pc, #160]	; (800a4ac <__lshift+0xd0>)
 800a40a:	4829      	ldr	r0, [pc, #164]	; (800a4b0 <__lshift+0xd4>)
 800a40c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a410:	f000 fb76 	bl	800ab00 <__assert_func>
 800a414:	3101      	adds	r1, #1
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	e7ee      	b.n	800a3f8 <__lshift+0x1c>
 800a41a:	2300      	movs	r3, #0
 800a41c:	f100 0114 	add.w	r1, r0, #20
 800a420:	f100 0210 	add.w	r2, r0, #16
 800a424:	4618      	mov	r0, r3
 800a426:	4553      	cmp	r3, sl
 800a428:	db33      	blt.n	800a492 <__lshift+0xb6>
 800a42a:	6920      	ldr	r0, [r4, #16]
 800a42c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a430:	f104 0314 	add.w	r3, r4, #20
 800a434:	f019 091f 	ands.w	r9, r9, #31
 800a438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a43c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a440:	d02b      	beq.n	800a49a <__lshift+0xbe>
 800a442:	f1c9 0e20 	rsb	lr, r9, #32
 800a446:	468a      	mov	sl, r1
 800a448:	2200      	movs	r2, #0
 800a44a:	6818      	ldr	r0, [r3, #0]
 800a44c:	fa00 f009 	lsl.w	r0, r0, r9
 800a450:	4302      	orrs	r2, r0
 800a452:	f84a 2b04 	str.w	r2, [sl], #4
 800a456:	f853 2b04 	ldr.w	r2, [r3], #4
 800a45a:	459c      	cmp	ip, r3
 800a45c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a460:	d8f3      	bhi.n	800a44a <__lshift+0x6e>
 800a462:	ebac 0304 	sub.w	r3, ip, r4
 800a466:	3b15      	subs	r3, #21
 800a468:	f023 0303 	bic.w	r3, r3, #3
 800a46c:	3304      	adds	r3, #4
 800a46e:	f104 0015 	add.w	r0, r4, #21
 800a472:	4584      	cmp	ip, r0
 800a474:	bf38      	it	cc
 800a476:	2304      	movcc	r3, #4
 800a478:	50ca      	str	r2, [r1, r3]
 800a47a:	b10a      	cbz	r2, 800a480 <__lshift+0xa4>
 800a47c:	f108 0602 	add.w	r6, r8, #2
 800a480:	3e01      	subs	r6, #1
 800a482:	4638      	mov	r0, r7
 800a484:	612e      	str	r6, [r5, #16]
 800a486:	4621      	mov	r1, r4
 800a488:	f7ff fdd6 	bl	800a038 <_Bfree>
 800a48c:	4628      	mov	r0, r5
 800a48e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a492:	f842 0f04 	str.w	r0, [r2, #4]!
 800a496:	3301      	adds	r3, #1
 800a498:	e7c5      	b.n	800a426 <__lshift+0x4a>
 800a49a:	3904      	subs	r1, #4
 800a49c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4a4:	459c      	cmp	ip, r3
 800a4a6:	d8f9      	bhi.n	800a49c <__lshift+0xc0>
 800a4a8:	e7ea      	b.n	800a480 <__lshift+0xa4>
 800a4aa:	bf00      	nop
 800a4ac:	0800c9fb 	.word	0x0800c9fb
 800a4b0:	0800ca0c 	.word	0x0800ca0c

0800a4b4 <__mcmp>:
 800a4b4:	b530      	push	{r4, r5, lr}
 800a4b6:	6902      	ldr	r2, [r0, #16]
 800a4b8:	690c      	ldr	r4, [r1, #16]
 800a4ba:	1b12      	subs	r2, r2, r4
 800a4bc:	d10e      	bne.n	800a4dc <__mcmp+0x28>
 800a4be:	f100 0314 	add.w	r3, r0, #20
 800a4c2:	3114      	adds	r1, #20
 800a4c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a4c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a4cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a4d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4d4:	42a5      	cmp	r5, r4
 800a4d6:	d003      	beq.n	800a4e0 <__mcmp+0x2c>
 800a4d8:	d305      	bcc.n	800a4e6 <__mcmp+0x32>
 800a4da:	2201      	movs	r2, #1
 800a4dc:	4610      	mov	r0, r2
 800a4de:	bd30      	pop	{r4, r5, pc}
 800a4e0:	4283      	cmp	r3, r0
 800a4e2:	d3f3      	bcc.n	800a4cc <__mcmp+0x18>
 800a4e4:	e7fa      	b.n	800a4dc <__mcmp+0x28>
 800a4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ea:	e7f7      	b.n	800a4dc <__mcmp+0x28>

0800a4ec <__mdiff>:
 800a4ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	4606      	mov	r6, r0
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4617      	mov	r7, r2
 800a4fa:	f7ff ffdb 	bl	800a4b4 <__mcmp>
 800a4fe:	1e05      	subs	r5, r0, #0
 800a500:	d110      	bne.n	800a524 <__mdiff+0x38>
 800a502:	4629      	mov	r1, r5
 800a504:	4630      	mov	r0, r6
 800a506:	f7ff fd57 	bl	8009fb8 <_Balloc>
 800a50a:	b930      	cbnz	r0, 800a51a <__mdiff+0x2e>
 800a50c:	4b39      	ldr	r3, [pc, #228]	; (800a5f4 <__mdiff+0x108>)
 800a50e:	4602      	mov	r2, r0
 800a510:	f240 2132 	movw	r1, #562	; 0x232
 800a514:	4838      	ldr	r0, [pc, #224]	; (800a5f8 <__mdiff+0x10c>)
 800a516:	f000 faf3 	bl	800ab00 <__assert_func>
 800a51a:	2301      	movs	r3, #1
 800a51c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a524:	bfa4      	itt	ge
 800a526:	463b      	movge	r3, r7
 800a528:	4627      	movge	r7, r4
 800a52a:	4630      	mov	r0, r6
 800a52c:	6879      	ldr	r1, [r7, #4]
 800a52e:	bfa6      	itte	ge
 800a530:	461c      	movge	r4, r3
 800a532:	2500      	movge	r5, #0
 800a534:	2501      	movlt	r5, #1
 800a536:	f7ff fd3f 	bl	8009fb8 <_Balloc>
 800a53a:	b920      	cbnz	r0, 800a546 <__mdiff+0x5a>
 800a53c:	4b2d      	ldr	r3, [pc, #180]	; (800a5f4 <__mdiff+0x108>)
 800a53e:	4602      	mov	r2, r0
 800a540:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a544:	e7e6      	b.n	800a514 <__mdiff+0x28>
 800a546:	693e      	ldr	r6, [r7, #16]
 800a548:	60c5      	str	r5, [r0, #12]
 800a54a:	6925      	ldr	r5, [r4, #16]
 800a54c:	f107 0114 	add.w	r1, r7, #20
 800a550:	f104 0914 	add.w	r9, r4, #20
 800a554:	f100 0e14 	add.w	lr, r0, #20
 800a558:	f107 0210 	add.w	r2, r7, #16
 800a55c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a560:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a564:	46f2      	mov	sl, lr
 800a566:	2700      	movs	r7, #0
 800a568:	f859 3b04 	ldr.w	r3, [r9], #4
 800a56c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a570:	fa1f f883 	uxth.w	r8, r3
 800a574:	fa17 f78b 	uxtah	r7, r7, fp
 800a578:	0c1b      	lsrs	r3, r3, #16
 800a57a:	eba7 0808 	sub.w	r8, r7, r8
 800a57e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a582:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a586:	fa1f f888 	uxth.w	r8, r8
 800a58a:	141f      	asrs	r7, r3, #16
 800a58c:	454d      	cmp	r5, r9
 800a58e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a592:	f84a 3b04 	str.w	r3, [sl], #4
 800a596:	d8e7      	bhi.n	800a568 <__mdiff+0x7c>
 800a598:	1b2b      	subs	r3, r5, r4
 800a59a:	3b15      	subs	r3, #21
 800a59c:	f023 0303 	bic.w	r3, r3, #3
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	3415      	adds	r4, #21
 800a5a4:	42a5      	cmp	r5, r4
 800a5a6:	bf38      	it	cc
 800a5a8:	2304      	movcc	r3, #4
 800a5aa:	4419      	add	r1, r3
 800a5ac:	4473      	add	r3, lr
 800a5ae:	469e      	mov	lr, r3
 800a5b0:	460d      	mov	r5, r1
 800a5b2:	4565      	cmp	r5, ip
 800a5b4:	d30e      	bcc.n	800a5d4 <__mdiff+0xe8>
 800a5b6:	f10c 0203 	add.w	r2, ip, #3
 800a5ba:	1a52      	subs	r2, r2, r1
 800a5bc:	f022 0203 	bic.w	r2, r2, #3
 800a5c0:	3903      	subs	r1, #3
 800a5c2:	458c      	cmp	ip, r1
 800a5c4:	bf38      	it	cc
 800a5c6:	2200      	movcc	r2, #0
 800a5c8:	441a      	add	r2, r3
 800a5ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a5ce:	b17b      	cbz	r3, 800a5f0 <__mdiff+0x104>
 800a5d0:	6106      	str	r6, [r0, #16]
 800a5d2:	e7a5      	b.n	800a520 <__mdiff+0x34>
 800a5d4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a5d8:	fa17 f488 	uxtah	r4, r7, r8
 800a5dc:	1422      	asrs	r2, r4, #16
 800a5de:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a5e2:	b2a4      	uxth	r4, r4
 800a5e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a5e8:	f84e 4b04 	str.w	r4, [lr], #4
 800a5ec:	1417      	asrs	r7, r2, #16
 800a5ee:	e7e0      	b.n	800a5b2 <__mdiff+0xc6>
 800a5f0:	3e01      	subs	r6, #1
 800a5f2:	e7ea      	b.n	800a5ca <__mdiff+0xde>
 800a5f4:	0800c9fb 	.word	0x0800c9fb
 800a5f8:	0800ca0c 	.word	0x0800ca0c

0800a5fc <__d2b>:
 800a5fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a600:	4689      	mov	r9, r1
 800a602:	2101      	movs	r1, #1
 800a604:	ec57 6b10 	vmov	r6, r7, d0
 800a608:	4690      	mov	r8, r2
 800a60a:	f7ff fcd5 	bl	8009fb8 <_Balloc>
 800a60e:	4604      	mov	r4, r0
 800a610:	b930      	cbnz	r0, 800a620 <__d2b+0x24>
 800a612:	4602      	mov	r2, r0
 800a614:	4b25      	ldr	r3, [pc, #148]	; (800a6ac <__d2b+0xb0>)
 800a616:	4826      	ldr	r0, [pc, #152]	; (800a6b0 <__d2b+0xb4>)
 800a618:	f240 310a 	movw	r1, #778	; 0x30a
 800a61c:	f000 fa70 	bl	800ab00 <__assert_func>
 800a620:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a624:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a628:	bb35      	cbnz	r5, 800a678 <__d2b+0x7c>
 800a62a:	2e00      	cmp	r6, #0
 800a62c:	9301      	str	r3, [sp, #4]
 800a62e:	d028      	beq.n	800a682 <__d2b+0x86>
 800a630:	4668      	mov	r0, sp
 800a632:	9600      	str	r6, [sp, #0]
 800a634:	f7ff fd8c 	bl	800a150 <__lo0bits>
 800a638:	9900      	ldr	r1, [sp, #0]
 800a63a:	b300      	cbz	r0, 800a67e <__d2b+0x82>
 800a63c:	9a01      	ldr	r2, [sp, #4]
 800a63e:	f1c0 0320 	rsb	r3, r0, #32
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	430b      	orrs	r3, r1
 800a648:	40c2      	lsrs	r2, r0
 800a64a:	6163      	str	r3, [r4, #20]
 800a64c:	9201      	str	r2, [sp, #4]
 800a64e:	9b01      	ldr	r3, [sp, #4]
 800a650:	61a3      	str	r3, [r4, #24]
 800a652:	2b00      	cmp	r3, #0
 800a654:	bf14      	ite	ne
 800a656:	2202      	movne	r2, #2
 800a658:	2201      	moveq	r2, #1
 800a65a:	6122      	str	r2, [r4, #16]
 800a65c:	b1d5      	cbz	r5, 800a694 <__d2b+0x98>
 800a65e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a662:	4405      	add	r5, r0
 800a664:	f8c9 5000 	str.w	r5, [r9]
 800a668:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a66c:	f8c8 0000 	str.w	r0, [r8]
 800a670:	4620      	mov	r0, r4
 800a672:	b003      	add	sp, #12
 800a674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a67c:	e7d5      	b.n	800a62a <__d2b+0x2e>
 800a67e:	6161      	str	r1, [r4, #20]
 800a680:	e7e5      	b.n	800a64e <__d2b+0x52>
 800a682:	a801      	add	r0, sp, #4
 800a684:	f7ff fd64 	bl	800a150 <__lo0bits>
 800a688:	9b01      	ldr	r3, [sp, #4]
 800a68a:	6163      	str	r3, [r4, #20]
 800a68c:	2201      	movs	r2, #1
 800a68e:	6122      	str	r2, [r4, #16]
 800a690:	3020      	adds	r0, #32
 800a692:	e7e3      	b.n	800a65c <__d2b+0x60>
 800a694:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a698:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a69c:	f8c9 0000 	str.w	r0, [r9]
 800a6a0:	6918      	ldr	r0, [r3, #16]
 800a6a2:	f7ff fd35 	bl	800a110 <__hi0bits>
 800a6a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6aa:	e7df      	b.n	800a66c <__d2b+0x70>
 800a6ac:	0800c9fb 	.word	0x0800c9fb
 800a6b0:	0800ca0c 	.word	0x0800ca0c

0800a6b4 <_calloc_r>:
 800a6b4:	b513      	push	{r0, r1, r4, lr}
 800a6b6:	434a      	muls	r2, r1
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	9201      	str	r2, [sp, #4]
 800a6bc:	f000 f85a 	bl	800a774 <_malloc_r>
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	b118      	cbz	r0, 800a6cc <_calloc_r+0x18>
 800a6c4:	9a01      	ldr	r2, [sp, #4]
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	f7fe f952 	bl	8008970 <memset>
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	b002      	add	sp, #8
 800a6d0:	bd10      	pop	{r4, pc}
	...

0800a6d4 <_free_r>:
 800a6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6d6:	2900      	cmp	r1, #0
 800a6d8:	d048      	beq.n	800a76c <_free_r+0x98>
 800a6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6de:	9001      	str	r0, [sp, #4]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f1a1 0404 	sub.w	r4, r1, #4
 800a6e6:	bfb8      	it	lt
 800a6e8:	18e4      	addlt	r4, r4, r3
 800a6ea:	f000 fa65 	bl	800abb8 <__malloc_lock>
 800a6ee:	4a20      	ldr	r2, [pc, #128]	; (800a770 <_free_r+0x9c>)
 800a6f0:	9801      	ldr	r0, [sp, #4]
 800a6f2:	6813      	ldr	r3, [r2, #0]
 800a6f4:	4615      	mov	r5, r2
 800a6f6:	b933      	cbnz	r3, 800a706 <_free_r+0x32>
 800a6f8:	6063      	str	r3, [r4, #4]
 800a6fa:	6014      	str	r4, [r2, #0]
 800a6fc:	b003      	add	sp, #12
 800a6fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a702:	f000 ba5f 	b.w	800abc4 <__malloc_unlock>
 800a706:	42a3      	cmp	r3, r4
 800a708:	d90b      	bls.n	800a722 <_free_r+0x4e>
 800a70a:	6821      	ldr	r1, [r4, #0]
 800a70c:	1862      	adds	r2, r4, r1
 800a70e:	4293      	cmp	r3, r2
 800a710:	bf04      	itt	eq
 800a712:	681a      	ldreq	r2, [r3, #0]
 800a714:	685b      	ldreq	r3, [r3, #4]
 800a716:	6063      	str	r3, [r4, #4]
 800a718:	bf04      	itt	eq
 800a71a:	1852      	addeq	r2, r2, r1
 800a71c:	6022      	streq	r2, [r4, #0]
 800a71e:	602c      	str	r4, [r5, #0]
 800a720:	e7ec      	b.n	800a6fc <_free_r+0x28>
 800a722:	461a      	mov	r2, r3
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	b10b      	cbz	r3, 800a72c <_free_r+0x58>
 800a728:	42a3      	cmp	r3, r4
 800a72a:	d9fa      	bls.n	800a722 <_free_r+0x4e>
 800a72c:	6811      	ldr	r1, [r2, #0]
 800a72e:	1855      	adds	r5, r2, r1
 800a730:	42a5      	cmp	r5, r4
 800a732:	d10b      	bne.n	800a74c <_free_r+0x78>
 800a734:	6824      	ldr	r4, [r4, #0]
 800a736:	4421      	add	r1, r4
 800a738:	1854      	adds	r4, r2, r1
 800a73a:	42a3      	cmp	r3, r4
 800a73c:	6011      	str	r1, [r2, #0]
 800a73e:	d1dd      	bne.n	800a6fc <_free_r+0x28>
 800a740:	681c      	ldr	r4, [r3, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	6053      	str	r3, [r2, #4]
 800a746:	4421      	add	r1, r4
 800a748:	6011      	str	r1, [r2, #0]
 800a74a:	e7d7      	b.n	800a6fc <_free_r+0x28>
 800a74c:	d902      	bls.n	800a754 <_free_r+0x80>
 800a74e:	230c      	movs	r3, #12
 800a750:	6003      	str	r3, [r0, #0]
 800a752:	e7d3      	b.n	800a6fc <_free_r+0x28>
 800a754:	6825      	ldr	r5, [r4, #0]
 800a756:	1961      	adds	r1, r4, r5
 800a758:	428b      	cmp	r3, r1
 800a75a:	bf04      	itt	eq
 800a75c:	6819      	ldreq	r1, [r3, #0]
 800a75e:	685b      	ldreq	r3, [r3, #4]
 800a760:	6063      	str	r3, [r4, #4]
 800a762:	bf04      	itt	eq
 800a764:	1949      	addeq	r1, r1, r5
 800a766:	6021      	streq	r1, [r4, #0]
 800a768:	6054      	str	r4, [r2, #4]
 800a76a:	e7c7      	b.n	800a6fc <_free_r+0x28>
 800a76c:	b003      	add	sp, #12
 800a76e:	bd30      	pop	{r4, r5, pc}
 800a770:	20000270 	.word	0x20000270

0800a774 <_malloc_r>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	1ccd      	adds	r5, r1, #3
 800a778:	f025 0503 	bic.w	r5, r5, #3
 800a77c:	3508      	adds	r5, #8
 800a77e:	2d0c      	cmp	r5, #12
 800a780:	bf38      	it	cc
 800a782:	250c      	movcc	r5, #12
 800a784:	2d00      	cmp	r5, #0
 800a786:	4606      	mov	r6, r0
 800a788:	db01      	blt.n	800a78e <_malloc_r+0x1a>
 800a78a:	42a9      	cmp	r1, r5
 800a78c:	d903      	bls.n	800a796 <_malloc_r+0x22>
 800a78e:	230c      	movs	r3, #12
 800a790:	6033      	str	r3, [r6, #0]
 800a792:	2000      	movs	r0, #0
 800a794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a796:	f000 fa0f 	bl	800abb8 <__malloc_lock>
 800a79a:	4921      	ldr	r1, [pc, #132]	; (800a820 <_malloc_r+0xac>)
 800a79c:	680a      	ldr	r2, [r1, #0]
 800a79e:	4614      	mov	r4, r2
 800a7a0:	b99c      	cbnz	r4, 800a7ca <_malloc_r+0x56>
 800a7a2:	4f20      	ldr	r7, [pc, #128]	; (800a824 <_malloc_r+0xb0>)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	b923      	cbnz	r3, 800a7b2 <_malloc_r+0x3e>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f000 f998 	bl	800aae0 <_sbrk_r>
 800a7b0:	6038      	str	r0, [r7, #0]
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f000 f993 	bl	800aae0 <_sbrk_r>
 800a7ba:	1c43      	adds	r3, r0, #1
 800a7bc:	d123      	bne.n	800a806 <_malloc_r+0x92>
 800a7be:	230c      	movs	r3, #12
 800a7c0:	6033      	str	r3, [r6, #0]
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f000 f9fe 	bl	800abc4 <__malloc_unlock>
 800a7c8:	e7e3      	b.n	800a792 <_malloc_r+0x1e>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	1b5b      	subs	r3, r3, r5
 800a7ce:	d417      	bmi.n	800a800 <_malloc_r+0x8c>
 800a7d0:	2b0b      	cmp	r3, #11
 800a7d2:	d903      	bls.n	800a7dc <_malloc_r+0x68>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	441c      	add	r4, r3
 800a7d8:	6025      	str	r5, [r4, #0]
 800a7da:	e004      	b.n	800a7e6 <_malloc_r+0x72>
 800a7dc:	6863      	ldr	r3, [r4, #4]
 800a7de:	42a2      	cmp	r2, r4
 800a7e0:	bf0c      	ite	eq
 800a7e2:	600b      	streq	r3, [r1, #0]
 800a7e4:	6053      	strne	r3, [r2, #4]
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f000 f9ec 	bl	800abc4 <__malloc_unlock>
 800a7ec:	f104 000b 	add.w	r0, r4, #11
 800a7f0:	1d23      	adds	r3, r4, #4
 800a7f2:	f020 0007 	bic.w	r0, r0, #7
 800a7f6:	1ac2      	subs	r2, r0, r3
 800a7f8:	d0cc      	beq.n	800a794 <_malloc_r+0x20>
 800a7fa:	1a1b      	subs	r3, r3, r0
 800a7fc:	50a3      	str	r3, [r4, r2]
 800a7fe:	e7c9      	b.n	800a794 <_malloc_r+0x20>
 800a800:	4622      	mov	r2, r4
 800a802:	6864      	ldr	r4, [r4, #4]
 800a804:	e7cc      	b.n	800a7a0 <_malloc_r+0x2c>
 800a806:	1cc4      	adds	r4, r0, #3
 800a808:	f024 0403 	bic.w	r4, r4, #3
 800a80c:	42a0      	cmp	r0, r4
 800a80e:	d0e3      	beq.n	800a7d8 <_malloc_r+0x64>
 800a810:	1a21      	subs	r1, r4, r0
 800a812:	4630      	mov	r0, r6
 800a814:	f000 f964 	bl	800aae0 <_sbrk_r>
 800a818:	3001      	adds	r0, #1
 800a81a:	d1dd      	bne.n	800a7d8 <_malloc_r+0x64>
 800a81c:	e7cf      	b.n	800a7be <_malloc_r+0x4a>
 800a81e:	bf00      	nop
 800a820:	20000270 	.word	0x20000270
 800a824:	20000274 	.word	0x20000274

0800a828 <__ssputs_r>:
 800a828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a82c:	688e      	ldr	r6, [r1, #8]
 800a82e:	429e      	cmp	r6, r3
 800a830:	4682      	mov	sl, r0
 800a832:	460c      	mov	r4, r1
 800a834:	4690      	mov	r8, r2
 800a836:	461f      	mov	r7, r3
 800a838:	d838      	bhi.n	800a8ac <__ssputs_r+0x84>
 800a83a:	898a      	ldrh	r2, [r1, #12]
 800a83c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a840:	d032      	beq.n	800a8a8 <__ssputs_r+0x80>
 800a842:	6825      	ldr	r5, [r4, #0]
 800a844:	6909      	ldr	r1, [r1, #16]
 800a846:	eba5 0901 	sub.w	r9, r5, r1
 800a84a:	6965      	ldr	r5, [r4, #20]
 800a84c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a850:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a854:	3301      	adds	r3, #1
 800a856:	444b      	add	r3, r9
 800a858:	106d      	asrs	r5, r5, #1
 800a85a:	429d      	cmp	r5, r3
 800a85c:	bf38      	it	cc
 800a85e:	461d      	movcc	r5, r3
 800a860:	0553      	lsls	r3, r2, #21
 800a862:	d531      	bpl.n	800a8c8 <__ssputs_r+0xa0>
 800a864:	4629      	mov	r1, r5
 800a866:	f7ff ff85 	bl	800a774 <_malloc_r>
 800a86a:	4606      	mov	r6, r0
 800a86c:	b950      	cbnz	r0, 800a884 <__ssputs_r+0x5c>
 800a86e:	230c      	movs	r3, #12
 800a870:	f8ca 3000 	str.w	r3, [sl]
 800a874:	89a3      	ldrh	r3, [r4, #12]
 800a876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a87a:	81a3      	strh	r3, [r4, #12]
 800a87c:	f04f 30ff 	mov.w	r0, #4294967295
 800a880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a884:	6921      	ldr	r1, [r4, #16]
 800a886:	464a      	mov	r2, r9
 800a888:	f7fe f864 	bl	8008954 <memcpy>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a896:	81a3      	strh	r3, [r4, #12]
 800a898:	6126      	str	r6, [r4, #16]
 800a89a:	6165      	str	r5, [r4, #20]
 800a89c:	444e      	add	r6, r9
 800a89e:	eba5 0509 	sub.w	r5, r5, r9
 800a8a2:	6026      	str	r6, [r4, #0]
 800a8a4:	60a5      	str	r5, [r4, #8]
 800a8a6:	463e      	mov	r6, r7
 800a8a8:	42be      	cmp	r6, r7
 800a8aa:	d900      	bls.n	800a8ae <__ssputs_r+0x86>
 800a8ac:	463e      	mov	r6, r7
 800a8ae:	4632      	mov	r2, r6
 800a8b0:	6820      	ldr	r0, [r4, #0]
 800a8b2:	4641      	mov	r1, r8
 800a8b4:	f000 f966 	bl	800ab84 <memmove>
 800a8b8:	68a3      	ldr	r3, [r4, #8]
 800a8ba:	6822      	ldr	r2, [r4, #0]
 800a8bc:	1b9b      	subs	r3, r3, r6
 800a8be:	4432      	add	r2, r6
 800a8c0:	60a3      	str	r3, [r4, #8]
 800a8c2:	6022      	str	r2, [r4, #0]
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e7db      	b.n	800a880 <__ssputs_r+0x58>
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	f000 f981 	bl	800abd0 <_realloc_r>
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d1e1      	bne.n	800a898 <__ssputs_r+0x70>
 800a8d4:	6921      	ldr	r1, [r4, #16]
 800a8d6:	4650      	mov	r0, sl
 800a8d8:	f7ff fefc 	bl	800a6d4 <_free_r>
 800a8dc:	e7c7      	b.n	800a86e <__ssputs_r+0x46>
	...

0800a8e0 <_svfiprintf_r>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	4698      	mov	r8, r3
 800a8e6:	898b      	ldrh	r3, [r1, #12]
 800a8e8:	061b      	lsls	r3, r3, #24
 800a8ea:	b09d      	sub	sp, #116	; 0x74
 800a8ec:	4607      	mov	r7, r0
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	d50e      	bpl.n	800a912 <_svfiprintf_r+0x32>
 800a8f4:	690b      	ldr	r3, [r1, #16]
 800a8f6:	b963      	cbnz	r3, 800a912 <_svfiprintf_r+0x32>
 800a8f8:	2140      	movs	r1, #64	; 0x40
 800a8fa:	f7ff ff3b 	bl	800a774 <_malloc_r>
 800a8fe:	6028      	str	r0, [r5, #0]
 800a900:	6128      	str	r0, [r5, #16]
 800a902:	b920      	cbnz	r0, 800a90e <_svfiprintf_r+0x2e>
 800a904:	230c      	movs	r3, #12
 800a906:	603b      	str	r3, [r7, #0]
 800a908:	f04f 30ff 	mov.w	r0, #4294967295
 800a90c:	e0d1      	b.n	800aab2 <_svfiprintf_r+0x1d2>
 800a90e:	2340      	movs	r3, #64	; 0x40
 800a910:	616b      	str	r3, [r5, #20]
 800a912:	2300      	movs	r3, #0
 800a914:	9309      	str	r3, [sp, #36]	; 0x24
 800a916:	2320      	movs	r3, #32
 800a918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a91c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a920:	2330      	movs	r3, #48	; 0x30
 800a922:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aacc <_svfiprintf_r+0x1ec>
 800a926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a92a:	f04f 0901 	mov.w	r9, #1
 800a92e:	4623      	mov	r3, r4
 800a930:	469a      	mov	sl, r3
 800a932:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a936:	b10a      	cbz	r2, 800a93c <_svfiprintf_r+0x5c>
 800a938:	2a25      	cmp	r2, #37	; 0x25
 800a93a:	d1f9      	bne.n	800a930 <_svfiprintf_r+0x50>
 800a93c:	ebba 0b04 	subs.w	fp, sl, r4
 800a940:	d00b      	beq.n	800a95a <_svfiprintf_r+0x7a>
 800a942:	465b      	mov	r3, fp
 800a944:	4622      	mov	r2, r4
 800a946:	4629      	mov	r1, r5
 800a948:	4638      	mov	r0, r7
 800a94a:	f7ff ff6d 	bl	800a828 <__ssputs_r>
 800a94e:	3001      	adds	r0, #1
 800a950:	f000 80aa 	beq.w	800aaa8 <_svfiprintf_r+0x1c8>
 800a954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a956:	445a      	add	r2, fp
 800a958:	9209      	str	r2, [sp, #36]	; 0x24
 800a95a:	f89a 3000 	ldrb.w	r3, [sl]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 80a2 	beq.w	800aaa8 <_svfiprintf_r+0x1c8>
 800a964:	2300      	movs	r3, #0
 800a966:	f04f 32ff 	mov.w	r2, #4294967295
 800a96a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a96e:	f10a 0a01 	add.w	sl, sl, #1
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	9307      	str	r3, [sp, #28]
 800a976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a97a:	931a      	str	r3, [sp, #104]	; 0x68
 800a97c:	4654      	mov	r4, sl
 800a97e:	2205      	movs	r2, #5
 800a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a984:	4851      	ldr	r0, [pc, #324]	; (800aacc <_svfiprintf_r+0x1ec>)
 800a986:	f7f5 fc33 	bl	80001f0 <memchr>
 800a98a:	9a04      	ldr	r2, [sp, #16]
 800a98c:	b9d8      	cbnz	r0, 800a9c6 <_svfiprintf_r+0xe6>
 800a98e:	06d0      	lsls	r0, r2, #27
 800a990:	bf44      	itt	mi
 800a992:	2320      	movmi	r3, #32
 800a994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a998:	0711      	lsls	r1, r2, #28
 800a99a:	bf44      	itt	mi
 800a99c:	232b      	movmi	r3, #43	; 0x2b
 800a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9a8:	d015      	beq.n	800a9d6 <_svfiprintf_r+0xf6>
 800a9aa:	9a07      	ldr	r2, [sp, #28]
 800a9ac:	4654      	mov	r4, sl
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	f04f 0c0a 	mov.w	ip, #10
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ba:	3b30      	subs	r3, #48	; 0x30
 800a9bc:	2b09      	cmp	r3, #9
 800a9be:	d94e      	bls.n	800aa5e <_svfiprintf_r+0x17e>
 800a9c0:	b1b0      	cbz	r0, 800a9f0 <_svfiprintf_r+0x110>
 800a9c2:	9207      	str	r2, [sp, #28]
 800a9c4:	e014      	b.n	800a9f0 <_svfiprintf_r+0x110>
 800a9c6:	eba0 0308 	sub.w	r3, r0, r8
 800a9ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	46a2      	mov	sl, r4
 800a9d4:	e7d2      	b.n	800a97c <_svfiprintf_r+0x9c>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	1d19      	adds	r1, r3, #4
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	9103      	str	r1, [sp, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bfbb      	ittet	lt
 800a9e2:	425b      	neglt	r3, r3
 800a9e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a9e8:	9307      	strge	r3, [sp, #28]
 800a9ea:	9307      	strlt	r3, [sp, #28]
 800a9ec:	bfb8      	it	lt
 800a9ee:	9204      	strlt	r2, [sp, #16]
 800a9f0:	7823      	ldrb	r3, [r4, #0]
 800a9f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f4:	d10c      	bne.n	800aa10 <_svfiprintf_r+0x130>
 800a9f6:	7863      	ldrb	r3, [r4, #1]
 800a9f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fa:	d135      	bne.n	800aa68 <_svfiprintf_r+0x188>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	1d1a      	adds	r2, r3, #4
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	9203      	str	r2, [sp, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bfb8      	it	lt
 800aa08:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa0c:	3402      	adds	r4, #2
 800aa0e:	9305      	str	r3, [sp, #20]
 800aa10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aadc <_svfiprintf_r+0x1fc>
 800aa14:	7821      	ldrb	r1, [r4, #0]
 800aa16:	2203      	movs	r2, #3
 800aa18:	4650      	mov	r0, sl
 800aa1a:	f7f5 fbe9 	bl	80001f0 <memchr>
 800aa1e:	b140      	cbz	r0, 800aa32 <_svfiprintf_r+0x152>
 800aa20:	2340      	movs	r3, #64	; 0x40
 800aa22:	eba0 000a 	sub.w	r0, r0, sl
 800aa26:	fa03 f000 	lsl.w	r0, r3, r0
 800aa2a:	9b04      	ldr	r3, [sp, #16]
 800aa2c:	4303      	orrs	r3, r0
 800aa2e:	3401      	adds	r4, #1
 800aa30:	9304      	str	r3, [sp, #16]
 800aa32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa36:	4826      	ldr	r0, [pc, #152]	; (800aad0 <_svfiprintf_r+0x1f0>)
 800aa38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa3c:	2206      	movs	r2, #6
 800aa3e:	f7f5 fbd7 	bl	80001f0 <memchr>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d038      	beq.n	800aab8 <_svfiprintf_r+0x1d8>
 800aa46:	4b23      	ldr	r3, [pc, #140]	; (800aad4 <_svfiprintf_r+0x1f4>)
 800aa48:	bb1b      	cbnz	r3, 800aa92 <_svfiprintf_r+0x1b2>
 800aa4a:	9b03      	ldr	r3, [sp, #12]
 800aa4c:	3307      	adds	r3, #7
 800aa4e:	f023 0307 	bic.w	r3, r3, #7
 800aa52:	3308      	adds	r3, #8
 800aa54:	9303      	str	r3, [sp, #12]
 800aa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa58:	4433      	add	r3, r6
 800aa5a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5c:	e767      	b.n	800a92e <_svfiprintf_r+0x4e>
 800aa5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa62:	460c      	mov	r4, r1
 800aa64:	2001      	movs	r0, #1
 800aa66:	e7a5      	b.n	800a9b4 <_svfiprintf_r+0xd4>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	3401      	adds	r4, #1
 800aa6c:	9305      	str	r3, [sp, #20]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	f04f 0c0a 	mov.w	ip, #10
 800aa74:	4620      	mov	r0, r4
 800aa76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa7a:	3a30      	subs	r2, #48	; 0x30
 800aa7c:	2a09      	cmp	r2, #9
 800aa7e:	d903      	bls.n	800aa88 <_svfiprintf_r+0x1a8>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d0c5      	beq.n	800aa10 <_svfiprintf_r+0x130>
 800aa84:	9105      	str	r1, [sp, #20]
 800aa86:	e7c3      	b.n	800aa10 <_svfiprintf_r+0x130>
 800aa88:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e7f0      	b.n	800aa74 <_svfiprintf_r+0x194>
 800aa92:	ab03      	add	r3, sp, #12
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	462a      	mov	r2, r5
 800aa98:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <_svfiprintf_r+0x1f8>)
 800aa9a:	a904      	add	r1, sp, #16
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	f7fe f80f 	bl	8008ac0 <_printf_float>
 800aaa2:	1c42      	adds	r2, r0, #1
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	d1d6      	bne.n	800aa56 <_svfiprintf_r+0x176>
 800aaa8:	89ab      	ldrh	r3, [r5, #12]
 800aaaa:	065b      	lsls	r3, r3, #25
 800aaac:	f53f af2c 	bmi.w	800a908 <_svfiprintf_r+0x28>
 800aab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab2:	b01d      	add	sp, #116	; 0x74
 800aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aab8:	ab03      	add	r3, sp, #12
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	462a      	mov	r2, r5
 800aabe:	4b06      	ldr	r3, [pc, #24]	; (800aad8 <_svfiprintf_r+0x1f8>)
 800aac0:	a904      	add	r1, sp, #16
 800aac2:	4638      	mov	r0, r7
 800aac4:	f7fe faa0 	bl	8009008 <_printf_i>
 800aac8:	e7eb      	b.n	800aaa2 <_svfiprintf_r+0x1c2>
 800aaca:	bf00      	nop
 800aacc:	0800cb6c 	.word	0x0800cb6c
 800aad0:	0800cb76 	.word	0x0800cb76
 800aad4:	08008ac1 	.word	0x08008ac1
 800aad8:	0800a829 	.word	0x0800a829
 800aadc:	0800cb72 	.word	0x0800cb72

0800aae0 <_sbrk_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d06      	ldr	r5, [pc, #24]	; (800aafc <_sbrk_r+0x1c>)
 800aae4:	2300      	movs	r3, #0
 800aae6:	4604      	mov	r4, r0
 800aae8:	4608      	mov	r0, r1
 800aaea:	602b      	str	r3, [r5, #0]
 800aaec:	f7f9 fbea 	bl	80042c4 <_sbrk>
 800aaf0:	1c43      	adds	r3, r0, #1
 800aaf2:	d102      	bne.n	800aafa <_sbrk_r+0x1a>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	b103      	cbz	r3, 800aafa <_sbrk_r+0x1a>
 800aaf8:	6023      	str	r3, [r4, #0]
 800aafa:	bd38      	pop	{r3, r4, r5, pc}
 800aafc:	20001204 	.word	0x20001204

0800ab00 <__assert_func>:
 800ab00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab02:	4614      	mov	r4, r2
 800ab04:	461a      	mov	r2, r3
 800ab06:	4b09      	ldr	r3, [pc, #36]	; (800ab2c <__assert_func+0x2c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	68d8      	ldr	r0, [r3, #12]
 800ab0e:	b14c      	cbz	r4, 800ab24 <__assert_func+0x24>
 800ab10:	4b07      	ldr	r3, [pc, #28]	; (800ab30 <__assert_func+0x30>)
 800ab12:	9100      	str	r1, [sp, #0]
 800ab14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab18:	4906      	ldr	r1, [pc, #24]	; (800ab34 <__assert_func+0x34>)
 800ab1a:	462b      	mov	r3, r5
 800ab1c:	f000 f80e 	bl	800ab3c <fiprintf>
 800ab20:	f000 faa4 	bl	800b06c <abort>
 800ab24:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <__assert_func+0x38>)
 800ab26:	461c      	mov	r4, r3
 800ab28:	e7f3      	b.n	800ab12 <__assert_func+0x12>
 800ab2a:	bf00      	nop
 800ab2c:	20000040 	.word	0x20000040
 800ab30:	0800cb7d 	.word	0x0800cb7d
 800ab34:	0800cb8a 	.word	0x0800cb8a
 800ab38:	0800cbb8 	.word	0x0800cbb8

0800ab3c <fiprintf>:
 800ab3c:	b40e      	push	{r1, r2, r3}
 800ab3e:	b503      	push	{r0, r1, lr}
 800ab40:	4601      	mov	r1, r0
 800ab42:	ab03      	add	r3, sp, #12
 800ab44:	4805      	ldr	r0, [pc, #20]	; (800ab5c <fiprintf+0x20>)
 800ab46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab4a:	6800      	ldr	r0, [r0, #0]
 800ab4c:	9301      	str	r3, [sp, #4]
 800ab4e:	f000 f88f 	bl	800ac70 <_vfiprintf_r>
 800ab52:	b002      	add	sp, #8
 800ab54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab58:	b003      	add	sp, #12
 800ab5a:	4770      	bx	lr
 800ab5c:	20000040 	.word	0x20000040

0800ab60 <__ascii_mbtowc>:
 800ab60:	b082      	sub	sp, #8
 800ab62:	b901      	cbnz	r1, 800ab66 <__ascii_mbtowc+0x6>
 800ab64:	a901      	add	r1, sp, #4
 800ab66:	b142      	cbz	r2, 800ab7a <__ascii_mbtowc+0x1a>
 800ab68:	b14b      	cbz	r3, 800ab7e <__ascii_mbtowc+0x1e>
 800ab6a:	7813      	ldrb	r3, [r2, #0]
 800ab6c:	600b      	str	r3, [r1, #0]
 800ab6e:	7812      	ldrb	r2, [r2, #0]
 800ab70:	1e10      	subs	r0, r2, #0
 800ab72:	bf18      	it	ne
 800ab74:	2001      	movne	r0, #1
 800ab76:	b002      	add	sp, #8
 800ab78:	4770      	bx	lr
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	e7fb      	b.n	800ab76 <__ascii_mbtowc+0x16>
 800ab7e:	f06f 0001 	mvn.w	r0, #1
 800ab82:	e7f8      	b.n	800ab76 <__ascii_mbtowc+0x16>

0800ab84 <memmove>:
 800ab84:	4288      	cmp	r0, r1
 800ab86:	b510      	push	{r4, lr}
 800ab88:	eb01 0402 	add.w	r4, r1, r2
 800ab8c:	d902      	bls.n	800ab94 <memmove+0x10>
 800ab8e:	4284      	cmp	r4, r0
 800ab90:	4623      	mov	r3, r4
 800ab92:	d807      	bhi.n	800aba4 <memmove+0x20>
 800ab94:	1e43      	subs	r3, r0, #1
 800ab96:	42a1      	cmp	r1, r4
 800ab98:	d008      	beq.n	800abac <memmove+0x28>
 800ab9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aba2:	e7f8      	b.n	800ab96 <memmove+0x12>
 800aba4:	4402      	add	r2, r0
 800aba6:	4601      	mov	r1, r0
 800aba8:	428a      	cmp	r2, r1
 800abaa:	d100      	bne.n	800abae <memmove+0x2a>
 800abac:	bd10      	pop	{r4, pc}
 800abae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abb6:	e7f7      	b.n	800aba8 <memmove+0x24>

0800abb8 <__malloc_lock>:
 800abb8:	4801      	ldr	r0, [pc, #4]	; (800abc0 <__malloc_lock+0x8>)
 800abba:	f000 bc17 	b.w	800b3ec <__retarget_lock_acquire_recursive>
 800abbe:	bf00      	nop
 800abc0:	2000120c 	.word	0x2000120c

0800abc4 <__malloc_unlock>:
 800abc4:	4801      	ldr	r0, [pc, #4]	; (800abcc <__malloc_unlock+0x8>)
 800abc6:	f000 bc12 	b.w	800b3ee <__retarget_lock_release_recursive>
 800abca:	bf00      	nop
 800abcc:	2000120c 	.word	0x2000120c

0800abd0 <_realloc_r>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	4607      	mov	r7, r0
 800abd4:	4614      	mov	r4, r2
 800abd6:	460e      	mov	r6, r1
 800abd8:	b921      	cbnz	r1, 800abe4 <_realloc_r+0x14>
 800abda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800abde:	4611      	mov	r1, r2
 800abe0:	f7ff bdc8 	b.w	800a774 <_malloc_r>
 800abe4:	b922      	cbnz	r2, 800abf0 <_realloc_r+0x20>
 800abe6:	f7ff fd75 	bl	800a6d4 <_free_r>
 800abea:	4625      	mov	r5, r4
 800abec:	4628      	mov	r0, r5
 800abee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf0:	f000 fc62 	bl	800b4b8 <_malloc_usable_size_r>
 800abf4:	42a0      	cmp	r0, r4
 800abf6:	d20f      	bcs.n	800ac18 <_realloc_r+0x48>
 800abf8:	4621      	mov	r1, r4
 800abfa:	4638      	mov	r0, r7
 800abfc:	f7ff fdba 	bl	800a774 <_malloc_r>
 800ac00:	4605      	mov	r5, r0
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d0f2      	beq.n	800abec <_realloc_r+0x1c>
 800ac06:	4631      	mov	r1, r6
 800ac08:	4622      	mov	r2, r4
 800ac0a:	f7fd fea3 	bl	8008954 <memcpy>
 800ac0e:	4631      	mov	r1, r6
 800ac10:	4638      	mov	r0, r7
 800ac12:	f7ff fd5f 	bl	800a6d4 <_free_r>
 800ac16:	e7e9      	b.n	800abec <_realloc_r+0x1c>
 800ac18:	4635      	mov	r5, r6
 800ac1a:	e7e7      	b.n	800abec <_realloc_r+0x1c>

0800ac1c <__sfputc_r>:
 800ac1c:	6893      	ldr	r3, [r2, #8]
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	b410      	push	{r4}
 800ac24:	6093      	str	r3, [r2, #8]
 800ac26:	da08      	bge.n	800ac3a <__sfputc_r+0x1e>
 800ac28:	6994      	ldr	r4, [r2, #24]
 800ac2a:	42a3      	cmp	r3, r4
 800ac2c:	db01      	blt.n	800ac32 <__sfputc_r+0x16>
 800ac2e:	290a      	cmp	r1, #10
 800ac30:	d103      	bne.n	800ac3a <__sfputc_r+0x1e>
 800ac32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac36:	f000 b94b 	b.w	800aed0 <__swbuf_r>
 800ac3a:	6813      	ldr	r3, [r2, #0]
 800ac3c:	1c58      	adds	r0, r3, #1
 800ac3e:	6010      	str	r0, [r2, #0]
 800ac40:	7019      	strb	r1, [r3, #0]
 800ac42:	4608      	mov	r0, r1
 800ac44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <__sfputs_r>:
 800ac4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4c:	4606      	mov	r6, r0
 800ac4e:	460f      	mov	r7, r1
 800ac50:	4614      	mov	r4, r2
 800ac52:	18d5      	adds	r5, r2, r3
 800ac54:	42ac      	cmp	r4, r5
 800ac56:	d101      	bne.n	800ac5c <__sfputs_r+0x12>
 800ac58:	2000      	movs	r0, #0
 800ac5a:	e007      	b.n	800ac6c <__sfputs_r+0x22>
 800ac5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac60:	463a      	mov	r2, r7
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7ff ffda 	bl	800ac1c <__sfputc_r>
 800ac68:	1c43      	adds	r3, r0, #1
 800ac6a:	d1f3      	bne.n	800ac54 <__sfputs_r+0xa>
 800ac6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac70 <_vfiprintf_r>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	460d      	mov	r5, r1
 800ac76:	b09d      	sub	sp, #116	; 0x74
 800ac78:	4614      	mov	r4, r2
 800ac7a:	4698      	mov	r8, r3
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	b118      	cbz	r0, 800ac88 <_vfiprintf_r+0x18>
 800ac80:	6983      	ldr	r3, [r0, #24]
 800ac82:	b90b      	cbnz	r3, 800ac88 <_vfiprintf_r+0x18>
 800ac84:	f000 fb14 	bl	800b2b0 <__sinit>
 800ac88:	4b89      	ldr	r3, [pc, #548]	; (800aeb0 <_vfiprintf_r+0x240>)
 800ac8a:	429d      	cmp	r5, r3
 800ac8c:	d11b      	bne.n	800acc6 <_vfiprintf_r+0x56>
 800ac8e:	6875      	ldr	r5, [r6, #4]
 800ac90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac92:	07d9      	lsls	r1, r3, #31
 800ac94:	d405      	bmi.n	800aca2 <_vfiprintf_r+0x32>
 800ac96:	89ab      	ldrh	r3, [r5, #12]
 800ac98:	059a      	lsls	r2, r3, #22
 800ac9a:	d402      	bmi.n	800aca2 <_vfiprintf_r+0x32>
 800ac9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac9e:	f000 fba5 	bl	800b3ec <__retarget_lock_acquire_recursive>
 800aca2:	89ab      	ldrh	r3, [r5, #12]
 800aca4:	071b      	lsls	r3, r3, #28
 800aca6:	d501      	bpl.n	800acac <_vfiprintf_r+0x3c>
 800aca8:	692b      	ldr	r3, [r5, #16]
 800acaa:	b9eb      	cbnz	r3, 800ace8 <_vfiprintf_r+0x78>
 800acac:	4629      	mov	r1, r5
 800acae:	4630      	mov	r0, r6
 800acb0:	f000 f96e 	bl	800af90 <__swsetup_r>
 800acb4:	b1c0      	cbz	r0, 800ace8 <_vfiprintf_r+0x78>
 800acb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acb8:	07dc      	lsls	r4, r3, #31
 800acba:	d50e      	bpl.n	800acda <_vfiprintf_r+0x6a>
 800acbc:	f04f 30ff 	mov.w	r0, #4294967295
 800acc0:	b01d      	add	sp, #116	; 0x74
 800acc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc6:	4b7b      	ldr	r3, [pc, #492]	; (800aeb4 <_vfiprintf_r+0x244>)
 800acc8:	429d      	cmp	r5, r3
 800acca:	d101      	bne.n	800acd0 <_vfiprintf_r+0x60>
 800accc:	68b5      	ldr	r5, [r6, #8]
 800acce:	e7df      	b.n	800ac90 <_vfiprintf_r+0x20>
 800acd0:	4b79      	ldr	r3, [pc, #484]	; (800aeb8 <_vfiprintf_r+0x248>)
 800acd2:	429d      	cmp	r5, r3
 800acd4:	bf08      	it	eq
 800acd6:	68f5      	ldreq	r5, [r6, #12]
 800acd8:	e7da      	b.n	800ac90 <_vfiprintf_r+0x20>
 800acda:	89ab      	ldrh	r3, [r5, #12]
 800acdc:	0598      	lsls	r0, r3, #22
 800acde:	d4ed      	bmi.n	800acbc <_vfiprintf_r+0x4c>
 800ace0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ace2:	f000 fb84 	bl	800b3ee <__retarget_lock_release_recursive>
 800ace6:	e7e9      	b.n	800acbc <_vfiprintf_r+0x4c>
 800ace8:	2300      	movs	r3, #0
 800acea:	9309      	str	r3, [sp, #36]	; 0x24
 800acec:	2320      	movs	r3, #32
 800acee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800acf6:	2330      	movs	r3, #48	; 0x30
 800acf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aebc <_vfiprintf_r+0x24c>
 800acfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad00:	f04f 0901 	mov.w	r9, #1
 800ad04:	4623      	mov	r3, r4
 800ad06:	469a      	mov	sl, r3
 800ad08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad0c:	b10a      	cbz	r2, 800ad12 <_vfiprintf_r+0xa2>
 800ad0e:	2a25      	cmp	r2, #37	; 0x25
 800ad10:	d1f9      	bne.n	800ad06 <_vfiprintf_r+0x96>
 800ad12:	ebba 0b04 	subs.w	fp, sl, r4
 800ad16:	d00b      	beq.n	800ad30 <_vfiprintf_r+0xc0>
 800ad18:	465b      	mov	r3, fp
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f7ff ff93 	bl	800ac4a <__sfputs_r>
 800ad24:	3001      	adds	r0, #1
 800ad26:	f000 80aa 	beq.w	800ae7e <_vfiprintf_r+0x20e>
 800ad2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad2c:	445a      	add	r2, fp
 800ad2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ad30:	f89a 3000 	ldrb.w	r3, [sl]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 80a2 	beq.w	800ae7e <_vfiprintf_r+0x20e>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad44:	f10a 0a01 	add.w	sl, sl, #1
 800ad48:	9304      	str	r3, [sp, #16]
 800ad4a:	9307      	str	r3, [sp, #28]
 800ad4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad50:	931a      	str	r3, [sp, #104]	; 0x68
 800ad52:	4654      	mov	r4, sl
 800ad54:	2205      	movs	r2, #5
 800ad56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5a:	4858      	ldr	r0, [pc, #352]	; (800aebc <_vfiprintf_r+0x24c>)
 800ad5c:	f7f5 fa48 	bl	80001f0 <memchr>
 800ad60:	9a04      	ldr	r2, [sp, #16]
 800ad62:	b9d8      	cbnz	r0, 800ad9c <_vfiprintf_r+0x12c>
 800ad64:	06d1      	lsls	r1, r2, #27
 800ad66:	bf44      	itt	mi
 800ad68:	2320      	movmi	r3, #32
 800ad6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad6e:	0713      	lsls	r3, r2, #28
 800ad70:	bf44      	itt	mi
 800ad72:	232b      	movmi	r3, #43	; 0x2b
 800ad74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad78:	f89a 3000 	ldrb.w	r3, [sl]
 800ad7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad7e:	d015      	beq.n	800adac <_vfiprintf_r+0x13c>
 800ad80:	9a07      	ldr	r2, [sp, #28]
 800ad82:	4654      	mov	r4, sl
 800ad84:	2000      	movs	r0, #0
 800ad86:	f04f 0c0a 	mov.w	ip, #10
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad90:	3b30      	subs	r3, #48	; 0x30
 800ad92:	2b09      	cmp	r3, #9
 800ad94:	d94e      	bls.n	800ae34 <_vfiprintf_r+0x1c4>
 800ad96:	b1b0      	cbz	r0, 800adc6 <_vfiprintf_r+0x156>
 800ad98:	9207      	str	r2, [sp, #28]
 800ad9a:	e014      	b.n	800adc6 <_vfiprintf_r+0x156>
 800ad9c:	eba0 0308 	sub.w	r3, r0, r8
 800ada0:	fa09 f303 	lsl.w	r3, r9, r3
 800ada4:	4313      	orrs	r3, r2
 800ada6:	9304      	str	r3, [sp, #16]
 800ada8:	46a2      	mov	sl, r4
 800adaa:	e7d2      	b.n	800ad52 <_vfiprintf_r+0xe2>
 800adac:	9b03      	ldr	r3, [sp, #12]
 800adae:	1d19      	adds	r1, r3, #4
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	9103      	str	r1, [sp, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	bfbb      	ittet	lt
 800adb8:	425b      	neglt	r3, r3
 800adba:	f042 0202 	orrlt.w	r2, r2, #2
 800adbe:	9307      	strge	r3, [sp, #28]
 800adc0:	9307      	strlt	r3, [sp, #28]
 800adc2:	bfb8      	it	lt
 800adc4:	9204      	strlt	r2, [sp, #16]
 800adc6:	7823      	ldrb	r3, [r4, #0]
 800adc8:	2b2e      	cmp	r3, #46	; 0x2e
 800adca:	d10c      	bne.n	800ade6 <_vfiprintf_r+0x176>
 800adcc:	7863      	ldrb	r3, [r4, #1]
 800adce:	2b2a      	cmp	r3, #42	; 0x2a
 800add0:	d135      	bne.n	800ae3e <_vfiprintf_r+0x1ce>
 800add2:	9b03      	ldr	r3, [sp, #12]
 800add4:	1d1a      	adds	r2, r3, #4
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	9203      	str	r2, [sp, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	bfb8      	it	lt
 800adde:	f04f 33ff 	movlt.w	r3, #4294967295
 800ade2:	3402      	adds	r4, #2
 800ade4:	9305      	str	r3, [sp, #20]
 800ade6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aecc <_vfiprintf_r+0x25c>
 800adea:	7821      	ldrb	r1, [r4, #0]
 800adec:	2203      	movs	r2, #3
 800adee:	4650      	mov	r0, sl
 800adf0:	f7f5 f9fe 	bl	80001f0 <memchr>
 800adf4:	b140      	cbz	r0, 800ae08 <_vfiprintf_r+0x198>
 800adf6:	2340      	movs	r3, #64	; 0x40
 800adf8:	eba0 000a 	sub.w	r0, r0, sl
 800adfc:	fa03 f000 	lsl.w	r0, r3, r0
 800ae00:	9b04      	ldr	r3, [sp, #16]
 800ae02:	4303      	orrs	r3, r0
 800ae04:	3401      	adds	r4, #1
 800ae06:	9304      	str	r3, [sp, #16]
 800ae08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae0c:	482c      	ldr	r0, [pc, #176]	; (800aec0 <_vfiprintf_r+0x250>)
 800ae0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae12:	2206      	movs	r2, #6
 800ae14:	f7f5 f9ec 	bl	80001f0 <memchr>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d03f      	beq.n	800ae9c <_vfiprintf_r+0x22c>
 800ae1c:	4b29      	ldr	r3, [pc, #164]	; (800aec4 <_vfiprintf_r+0x254>)
 800ae1e:	bb1b      	cbnz	r3, 800ae68 <_vfiprintf_r+0x1f8>
 800ae20:	9b03      	ldr	r3, [sp, #12]
 800ae22:	3307      	adds	r3, #7
 800ae24:	f023 0307 	bic.w	r3, r3, #7
 800ae28:	3308      	adds	r3, #8
 800ae2a:	9303      	str	r3, [sp, #12]
 800ae2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2e:	443b      	add	r3, r7
 800ae30:	9309      	str	r3, [sp, #36]	; 0x24
 800ae32:	e767      	b.n	800ad04 <_vfiprintf_r+0x94>
 800ae34:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae38:	460c      	mov	r4, r1
 800ae3a:	2001      	movs	r0, #1
 800ae3c:	e7a5      	b.n	800ad8a <_vfiprintf_r+0x11a>
 800ae3e:	2300      	movs	r3, #0
 800ae40:	3401      	adds	r4, #1
 800ae42:	9305      	str	r3, [sp, #20]
 800ae44:	4619      	mov	r1, r3
 800ae46:	f04f 0c0a 	mov.w	ip, #10
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae50:	3a30      	subs	r2, #48	; 0x30
 800ae52:	2a09      	cmp	r2, #9
 800ae54:	d903      	bls.n	800ae5e <_vfiprintf_r+0x1ee>
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d0c5      	beq.n	800ade6 <_vfiprintf_r+0x176>
 800ae5a:	9105      	str	r1, [sp, #20]
 800ae5c:	e7c3      	b.n	800ade6 <_vfiprintf_r+0x176>
 800ae5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae62:	4604      	mov	r4, r0
 800ae64:	2301      	movs	r3, #1
 800ae66:	e7f0      	b.n	800ae4a <_vfiprintf_r+0x1da>
 800ae68:	ab03      	add	r3, sp, #12
 800ae6a:	9300      	str	r3, [sp, #0]
 800ae6c:	462a      	mov	r2, r5
 800ae6e:	4b16      	ldr	r3, [pc, #88]	; (800aec8 <_vfiprintf_r+0x258>)
 800ae70:	a904      	add	r1, sp, #16
 800ae72:	4630      	mov	r0, r6
 800ae74:	f7fd fe24 	bl	8008ac0 <_printf_float>
 800ae78:	4607      	mov	r7, r0
 800ae7a:	1c78      	adds	r0, r7, #1
 800ae7c:	d1d6      	bne.n	800ae2c <_vfiprintf_r+0x1bc>
 800ae7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae80:	07d9      	lsls	r1, r3, #31
 800ae82:	d405      	bmi.n	800ae90 <_vfiprintf_r+0x220>
 800ae84:	89ab      	ldrh	r3, [r5, #12]
 800ae86:	059a      	lsls	r2, r3, #22
 800ae88:	d402      	bmi.n	800ae90 <_vfiprintf_r+0x220>
 800ae8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae8c:	f000 faaf 	bl	800b3ee <__retarget_lock_release_recursive>
 800ae90:	89ab      	ldrh	r3, [r5, #12]
 800ae92:	065b      	lsls	r3, r3, #25
 800ae94:	f53f af12 	bmi.w	800acbc <_vfiprintf_r+0x4c>
 800ae98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae9a:	e711      	b.n	800acc0 <_vfiprintf_r+0x50>
 800ae9c:	ab03      	add	r3, sp, #12
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	462a      	mov	r2, r5
 800aea2:	4b09      	ldr	r3, [pc, #36]	; (800aec8 <_vfiprintf_r+0x258>)
 800aea4:	a904      	add	r1, sp, #16
 800aea6:	4630      	mov	r0, r6
 800aea8:	f7fe f8ae 	bl	8009008 <_printf_i>
 800aeac:	e7e4      	b.n	800ae78 <_vfiprintf_r+0x208>
 800aeae:	bf00      	nop
 800aeb0:	0800cce4 	.word	0x0800cce4
 800aeb4:	0800cd04 	.word	0x0800cd04
 800aeb8:	0800ccc4 	.word	0x0800ccc4
 800aebc:	0800cb6c 	.word	0x0800cb6c
 800aec0:	0800cb76 	.word	0x0800cb76
 800aec4:	08008ac1 	.word	0x08008ac1
 800aec8:	0800ac4b 	.word	0x0800ac4b
 800aecc:	0800cb72 	.word	0x0800cb72

0800aed0 <__swbuf_r>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	460e      	mov	r6, r1
 800aed4:	4614      	mov	r4, r2
 800aed6:	4605      	mov	r5, r0
 800aed8:	b118      	cbz	r0, 800aee2 <__swbuf_r+0x12>
 800aeda:	6983      	ldr	r3, [r0, #24]
 800aedc:	b90b      	cbnz	r3, 800aee2 <__swbuf_r+0x12>
 800aede:	f000 f9e7 	bl	800b2b0 <__sinit>
 800aee2:	4b21      	ldr	r3, [pc, #132]	; (800af68 <__swbuf_r+0x98>)
 800aee4:	429c      	cmp	r4, r3
 800aee6:	d12b      	bne.n	800af40 <__swbuf_r+0x70>
 800aee8:	686c      	ldr	r4, [r5, #4]
 800aeea:	69a3      	ldr	r3, [r4, #24]
 800aeec:	60a3      	str	r3, [r4, #8]
 800aeee:	89a3      	ldrh	r3, [r4, #12]
 800aef0:	071a      	lsls	r2, r3, #28
 800aef2:	d52f      	bpl.n	800af54 <__swbuf_r+0x84>
 800aef4:	6923      	ldr	r3, [r4, #16]
 800aef6:	b36b      	cbz	r3, 800af54 <__swbuf_r+0x84>
 800aef8:	6923      	ldr	r3, [r4, #16]
 800aefa:	6820      	ldr	r0, [r4, #0]
 800aefc:	1ac0      	subs	r0, r0, r3
 800aefe:	6963      	ldr	r3, [r4, #20]
 800af00:	b2f6      	uxtb	r6, r6
 800af02:	4283      	cmp	r3, r0
 800af04:	4637      	mov	r7, r6
 800af06:	dc04      	bgt.n	800af12 <__swbuf_r+0x42>
 800af08:	4621      	mov	r1, r4
 800af0a:	4628      	mov	r0, r5
 800af0c:	f000 f93c 	bl	800b188 <_fflush_r>
 800af10:	bb30      	cbnz	r0, 800af60 <__swbuf_r+0x90>
 800af12:	68a3      	ldr	r3, [r4, #8]
 800af14:	3b01      	subs	r3, #1
 800af16:	60a3      	str	r3, [r4, #8]
 800af18:	6823      	ldr	r3, [r4, #0]
 800af1a:	1c5a      	adds	r2, r3, #1
 800af1c:	6022      	str	r2, [r4, #0]
 800af1e:	701e      	strb	r6, [r3, #0]
 800af20:	6963      	ldr	r3, [r4, #20]
 800af22:	3001      	adds	r0, #1
 800af24:	4283      	cmp	r3, r0
 800af26:	d004      	beq.n	800af32 <__swbuf_r+0x62>
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	07db      	lsls	r3, r3, #31
 800af2c:	d506      	bpl.n	800af3c <__swbuf_r+0x6c>
 800af2e:	2e0a      	cmp	r6, #10
 800af30:	d104      	bne.n	800af3c <__swbuf_r+0x6c>
 800af32:	4621      	mov	r1, r4
 800af34:	4628      	mov	r0, r5
 800af36:	f000 f927 	bl	800b188 <_fflush_r>
 800af3a:	b988      	cbnz	r0, 800af60 <__swbuf_r+0x90>
 800af3c:	4638      	mov	r0, r7
 800af3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af40:	4b0a      	ldr	r3, [pc, #40]	; (800af6c <__swbuf_r+0x9c>)
 800af42:	429c      	cmp	r4, r3
 800af44:	d101      	bne.n	800af4a <__swbuf_r+0x7a>
 800af46:	68ac      	ldr	r4, [r5, #8]
 800af48:	e7cf      	b.n	800aeea <__swbuf_r+0x1a>
 800af4a:	4b09      	ldr	r3, [pc, #36]	; (800af70 <__swbuf_r+0xa0>)
 800af4c:	429c      	cmp	r4, r3
 800af4e:	bf08      	it	eq
 800af50:	68ec      	ldreq	r4, [r5, #12]
 800af52:	e7ca      	b.n	800aeea <__swbuf_r+0x1a>
 800af54:	4621      	mov	r1, r4
 800af56:	4628      	mov	r0, r5
 800af58:	f000 f81a 	bl	800af90 <__swsetup_r>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d0cb      	beq.n	800aef8 <__swbuf_r+0x28>
 800af60:	f04f 37ff 	mov.w	r7, #4294967295
 800af64:	e7ea      	b.n	800af3c <__swbuf_r+0x6c>
 800af66:	bf00      	nop
 800af68:	0800cce4 	.word	0x0800cce4
 800af6c:	0800cd04 	.word	0x0800cd04
 800af70:	0800ccc4 	.word	0x0800ccc4

0800af74 <__ascii_wctomb>:
 800af74:	b149      	cbz	r1, 800af8a <__ascii_wctomb+0x16>
 800af76:	2aff      	cmp	r2, #255	; 0xff
 800af78:	bf85      	ittet	hi
 800af7a:	238a      	movhi	r3, #138	; 0x8a
 800af7c:	6003      	strhi	r3, [r0, #0]
 800af7e:	700a      	strbls	r2, [r1, #0]
 800af80:	f04f 30ff 	movhi.w	r0, #4294967295
 800af84:	bf98      	it	ls
 800af86:	2001      	movls	r0, #1
 800af88:	4770      	bx	lr
 800af8a:	4608      	mov	r0, r1
 800af8c:	4770      	bx	lr
	...

0800af90 <__swsetup_r>:
 800af90:	4b32      	ldr	r3, [pc, #200]	; (800b05c <__swsetup_r+0xcc>)
 800af92:	b570      	push	{r4, r5, r6, lr}
 800af94:	681d      	ldr	r5, [r3, #0]
 800af96:	4606      	mov	r6, r0
 800af98:	460c      	mov	r4, r1
 800af9a:	b125      	cbz	r5, 800afa6 <__swsetup_r+0x16>
 800af9c:	69ab      	ldr	r3, [r5, #24]
 800af9e:	b913      	cbnz	r3, 800afa6 <__swsetup_r+0x16>
 800afa0:	4628      	mov	r0, r5
 800afa2:	f000 f985 	bl	800b2b0 <__sinit>
 800afa6:	4b2e      	ldr	r3, [pc, #184]	; (800b060 <__swsetup_r+0xd0>)
 800afa8:	429c      	cmp	r4, r3
 800afaa:	d10f      	bne.n	800afcc <__swsetup_r+0x3c>
 800afac:	686c      	ldr	r4, [r5, #4]
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afb4:	0719      	lsls	r1, r3, #28
 800afb6:	d42c      	bmi.n	800b012 <__swsetup_r+0x82>
 800afb8:	06dd      	lsls	r5, r3, #27
 800afba:	d411      	bmi.n	800afe0 <__swsetup_r+0x50>
 800afbc:	2309      	movs	r3, #9
 800afbe:	6033      	str	r3, [r6, #0]
 800afc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afc4:	81a3      	strh	r3, [r4, #12]
 800afc6:	f04f 30ff 	mov.w	r0, #4294967295
 800afca:	e03e      	b.n	800b04a <__swsetup_r+0xba>
 800afcc:	4b25      	ldr	r3, [pc, #148]	; (800b064 <__swsetup_r+0xd4>)
 800afce:	429c      	cmp	r4, r3
 800afd0:	d101      	bne.n	800afd6 <__swsetup_r+0x46>
 800afd2:	68ac      	ldr	r4, [r5, #8]
 800afd4:	e7eb      	b.n	800afae <__swsetup_r+0x1e>
 800afd6:	4b24      	ldr	r3, [pc, #144]	; (800b068 <__swsetup_r+0xd8>)
 800afd8:	429c      	cmp	r4, r3
 800afda:	bf08      	it	eq
 800afdc:	68ec      	ldreq	r4, [r5, #12]
 800afde:	e7e6      	b.n	800afae <__swsetup_r+0x1e>
 800afe0:	0758      	lsls	r0, r3, #29
 800afe2:	d512      	bpl.n	800b00a <__swsetup_r+0x7a>
 800afe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afe6:	b141      	cbz	r1, 800affa <__swsetup_r+0x6a>
 800afe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afec:	4299      	cmp	r1, r3
 800afee:	d002      	beq.n	800aff6 <__swsetup_r+0x66>
 800aff0:	4630      	mov	r0, r6
 800aff2:	f7ff fb6f 	bl	800a6d4 <_free_r>
 800aff6:	2300      	movs	r3, #0
 800aff8:	6363      	str	r3, [r4, #52]	; 0x34
 800affa:	89a3      	ldrh	r3, [r4, #12]
 800affc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b000:	81a3      	strh	r3, [r4, #12]
 800b002:	2300      	movs	r3, #0
 800b004:	6063      	str	r3, [r4, #4]
 800b006:	6923      	ldr	r3, [r4, #16]
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	f043 0308 	orr.w	r3, r3, #8
 800b010:	81a3      	strh	r3, [r4, #12]
 800b012:	6923      	ldr	r3, [r4, #16]
 800b014:	b94b      	cbnz	r3, 800b02a <__swsetup_r+0x9a>
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b01c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b020:	d003      	beq.n	800b02a <__swsetup_r+0x9a>
 800b022:	4621      	mov	r1, r4
 800b024:	4630      	mov	r0, r6
 800b026:	f000 fa07 	bl	800b438 <__smakebuf_r>
 800b02a:	89a0      	ldrh	r0, [r4, #12]
 800b02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b030:	f010 0301 	ands.w	r3, r0, #1
 800b034:	d00a      	beq.n	800b04c <__swsetup_r+0xbc>
 800b036:	2300      	movs	r3, #0
 800b038:	60a3      	str	r3, [r4, #8]
 800b03a:	6963      	ldr	r3, [r4, #20]
 800b03c:	425b      	negs	r3, r3
 800b03e:	61a3      	str	r3, [r4, #24]
 800b040:	6923      	ldr	r3, [r4, #16]
 800b042:	b943      	cbnz	r3, 800b056 <__swsetup_r+0xc6>
 800b044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b048:	d1ba      	bne.n	800afc0 <__swsetup_r+0x30>
 800b04a:	bd70      	pop	{r4, r5, r6, pc}
 800b04c:	0781      	lsls	r1, r0, #30
 800b04e:	bf58      	it	pl
 800b050:	6963      	ldrpl	r3, [r4, #20]
 800b052:	60a3      	str	r3, [r4, #8]
 800b054:	e7f4      	b.n	800b040 <__swsetup_r+0xb0>
 800b056:	2000      	movs	r0, #0
 800b058:	e7f7      	b.n	800b04a <__swsetup_r+0xba>
 800b05a:	bf00      	nop
 800b05c:	20000040 	.word	0x20000040
 800b060:	0800cce4 	.word	0x0800cce4
 800b064:	0800cd04 	.word	0x0800cd04
 800b068:	0800ccc4 	.word	0x0800ccc4

0800b06c <abort>:
 800b06c:	b508      	push	{r3, lr}
 800b06e:	2006      	movs	r0, #6
 800b070:	f000 fa52 	bl	800b518 <raise>
 800b074:	2001      	movs	r0, #1
 800b076:	f7f9 f8f5 	bl	8004264 <_exit>
	...

0800b07c <__sflush_r>:
 800b07c:	898a      	ldrh	r2, [r1, #12]
 800b07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b082:	4605      	mov	r5, r0
 800b084:	0710      	lsls	r0, r2, #28
 800b086:	460c      	mov	r4, r1
 800b088:	d458      	bmi.n	800b13c <__sflush_r+0xc0>
 800b08a:	684b      	ldr	r3, [r1, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	dc05      	bgt.n	800b09c <__sflush_r+0x20>
 800b090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b092:	2b00      	cmp	r3, #0
 800b094:	dc02      	bgt.n	800b09c <__sflush_r+0x20>
 800b096:	2000      	movs	r0, #0
 800b098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b09c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b09e:	2e00      	cmp	r6, #0
 800b0a0:	d0f9      	beq.n	800b096 <__sflush_r+0x1a>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0a8:	682f      	ldr	r7, [r5, #0]
 800b0aa:	602b      	str	r3, [r5, #0]
 800b0ac:	d032      	beq.n	800b114 <__sflush_r+0x98>
 800b0ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0b0:	89a3      	ldrh	r3, [r4, #12]
 800b0b2:	075a      	lsls	r2, r3, #29
 800b0b4:	d505      	bpl.n	800b0c2 <__sflush_r+0x46>
 800b0b6:	6863      	ldr	r3, [r4, #4]
 800b0b8:	1ac0      	subs	r0, r0, r3
 800b0ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0bc:	b10b      	cbz	r3, 800b0c2 <__sflush_r+0x46>
 800b0be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0c0:	1ac0      	subs	r0, r0, r3
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0c8:	6a21      	ldr	r1, [r4, #32]
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	47b0      	blx	r6
 800b0ce:	1c43      	adds	r3, r0, #1
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	d106      	bne.n	800b0e2 <__sflush_r+0x66>
 800b0d4:	6829      	ldr	r1, [r5, #0]
 800b0d6:	291d      	cmp	r1, #29
 800b0d8:	d82c      	bhi.n	800b134 <__sflush_r+0xb8>
 800b0da:	4a2a      	ldr	r2, [pc, #168]	; (800b184 <__sflush_r+0x108>)
 800b0dc:	40ca      	lsrs	r2, r1
 800b0de:	07d6      	lsls	r6, r2, #31
 800b0e0:	d528      	bpl.n	800b134 <__sflush_r+0xb8>
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	6062      	str	r2, [r4, #4]
 800b0e6:	04d9      	lsls	r1, r3, #19
 800b0e8:	6922      	ldr	r2, [r4, #16]
 800b0ea:	6022      	str	r2, [r4, #0]
 800b0ec:	d504      	bpl.n	800b0f8 <__sflush_r+0x7c>
 800b0ee:	1c42      	adds	r2, r0, #1
 800b0f0:	d101      	bne.n	800b0f6 <__sflush_r+0x7a>
 800b0f2:	682b      	ldr	r3, [r5, #0]
 800b0f4:	b903      	cbnz	r3, 800b0f8 <__sflush_r+0x7c>
 800b0f6:	6560      	str	r0, [r4, #84]	; 0x54
 800b0f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0fa:	602f      	str	r7, [r5, #0]
 800b0fc:	2900      	cmp	r1, #0
 800b0fe:	d0ca      	beq.n	800b096 <__sflush_r+0x1a>
 800b100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b104:	4299      	cmp	r1, r3
 800b106:	d002      	beq.n	800b10e <__sflush_r+0x92>
 800b108:	4628      	mov	r0, r5
 800b10a:	f7ff fae3 	bl	800a6d4 <_free_r>
 800b10e:	2000      	movs	r0, #0
 800b110:	6360      	str	r0, [r4, #52]	; 0x34
 800b112:	e7c1      	b.n	800b098 <__sflush_r+0x1c>
 800b114:	6a21      	ldr	r1, [r4, #32]
 800b116:	2301      	movs	r3, #1
 800b118:	4628      	mov	r0, r5
 800b11a:	47b0      	blx	r6
 800b11c:	1c41      	adds	r1, r0, #1
 800b11e:	d1c7      	bne.n	800b0b0 <__sflush_r+0x34>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d0c4      	beq.n	800b0b0 <__sflush_r+0x34>
 800b126:	2b1d      	cmp	r3, #29
 800b128:	d001      	beq.n	800b12e <__sflush_r+0xb2>
 800b12a:	2b16      	cmp	r3, #22
 800b12c:	d101      	bne.n	800b132 <__sflush_r+0xb6>
 800b12e:	602f      	str	r7, [r5, #0]
 800b130:	e7b1      	b.n	800b096 <__sflush_r+0x1a>
 800b132:	89a3      	ldrh	r3, [r4, #12]
 800b134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b138:	81a3      	strh	r3, [r4, #12]
 800b13a:	e7ad      	b.n	800b098 <__sflush_r+0x1c>
 800b13c:	690f      	ldr	r7, [r1, #16]
 800b13e:	2f00      	cmp	r7, #0
 800b140:	d0a9      	beq.n	800b096 <__sflush_r+0x1a>
 800b142:	0793      	lsls	r3, r2, #30
 800b144:	680e      	ldr	r6, [r1, #0]
 800b146:	bf08      	it	eq
 800b148:	694b      	ldreq	r3, [r1, #20]
 800b14a:	600f      	str	r7, [r1, #0]
 800b14c:	bf18      	it	ne
 800b14e:	2300      	movne	r3, #0
 800b150:	eba6 0807 	sub.w	r8, r6, r7
 800b154:	608b      	str	r3, [r1, #8]
 800b156:	f1b8 0f00 	cmp.w	r8, #0
 800b15a:	dd9c      	ble.n	800b096 <__sflush_r+0x1a>
 800b15c:	6a21      	ldr	r1, [r4, #32]
 800b15e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b160:	4643      	mov	r3, r8
 800b162:	463a      	mov	r2, r7
 800b164:	4628      	mov	r0, r5
 800b166:	47b0      	blx	r6
 800b168:	2800      	cmp	r0, #0
 800b16a:	dc06      	bgt.n	800b17a <__sflush_r+0xfe>
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	f04f 30ff 	mov.w	r0, #4294967295
 800b178:	e78e      	b.n	800b098 <__sflush_r+0x1c>
 800b17a:	4407      	add	r7, r0
 800b17c:	eba8 0800 	sub.w	r8, r8, r0
 800b180:	e7e9      	b.n	800b156 <__sflush_r+0xda>
 800b182:	bf00      	nop
 800b184:	20400001 	.word	0x20400001

0800b188 <_fflush_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	690b      	ldr	r3, [r1, #16]
 800b18c:	4605      	mov	r5, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	b913      	cbnz	r3, 800b198 <_fflush_r+0x10>
 800b192:	2500      	movs	r5, #0
 800b194:	4628      	mov	r0, r5
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	b118      	cbz	r0, 800b1a2 <_fflush_r+0x1a>
 800b19a:	6983      	ldr	r3, [r0, #24]
 800b19c:	b90b      	cbnz	r3, 800b1a2 <_fflush_r+0x1a>
 800b19e:	f000 f887 	bl	800b2b0 <__sinit>
 800b1a2:	4b14      	ldr	r3, [pc, #80]	; (800b1f4 <_fflush_r+0x6c>)
 800b1a4:	429c      	cmp	r4, r3
 800b1a6:	d11b      	bne.n	800b1e0 <_fflush_r+0x58>
 800b1a8:	686c      	ldr	r4, [r5, #4]
 800b1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d0ef      	beq.n	800b192 <_fflush_r+0xa>
 800b1b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1b4:	07d0      	lsls	r0, r2, #31
 800b1b6:	d404      	bmi.n	800b1c2 <_fflush_r+0x3a>
 800b1b8:	0599      	lsls	r1, r3, #22
 800b1ba:	d402      	bmi.n	800b1c2 <_fflush_r+0x3a>
 800b1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1be:	f000 f915 	bl	800b3ec <__retarget_lock_acquire_recursive>
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	f7ff ff59 	bl	800b07c <__sflush_r>
 800b1ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1cc:	07da      	lsls	r2, r3, #31
 800b1ce:	4605      	mov	r5, r0
 800b1d0:	d4e0      	bmi.n	800b194 <_fflush_r+0xc>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	059b      	lsls	r3, r3, #22
 800b1d6:	d4dd      	bmi.n	800b194 <_fflush_r+0xc>
 800b1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1da:	f000 f908 	bl	800b3ee <__retarget_lock_release_recursive>
 800b1de:	e7d9      	b.n	800b194 <_fflush_r+0xc>
 800b1e0:	4b05      	ldr	r3, [pc, #20]	; (800b1f8 <_fflush_r+0x70>)
 800b1e2:	429c      	cmp	r4, r3
 800b1e4:	d101      	bne.n	800b1ea <_fflush_r+0x62>
 800b1e6:	68ac      	ldr	r4, [r5, #8]
 800b1e8:	e7df      	b.n	800b1aa <_fflush_r+0x22>
 800b1ea:	4b04      	ldr	r3, [pc, #16]	; (800b1fc <_fflush_r+0x74>)
 800b1ec:	429c      	cmp	r4, r3
 800b1ee:	bf08      	it	eq
 800b1f0:	68ec      	ldreq	r4, [r5, #12]
 800b1f2:	e7da      	b.n	800b1aa <_fflush_r+0x22>
 800b1f4:	0800cce4 	.word	0x0800cce4
 800b1f8:	0800cd04 	.word	0x0800cd04
 800b1fc:	0800ccc4 	.word	0x0800ccc4

0800b200 <std>:
 800b200:	2300      	movs	r3, #0
 800b202:	b510      	push	{r4, lr}
 800b204:	4604      	mov	r4, r0
 800b206:	e9c0 3300 	strd	r3, r3, [r0]
 800b20a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b20e:	6083      	str	r3, [r0, #8]
 800b210:	8181      	strh	r1, [r0, #12]
 800b212:	6643      	str	r3, [r0, #100]	; 0x64
 800b214:	81c2      	strh	r2, [r0, #14]
 800b216:	6183      	str	r3, [r0, #24]
 800b218:	4619      	mov	r1, r3
 800b21a:	2208      	movs	r2, #8
 800b21c:	305c      	adds	r0, #92	; 0x5c
 800b21e:	f7fd fba7 	bl	8008970 <memset>
 800b222:	4b05      	ldr	r3, [pc, #20]	; (800b238 <std+0x38>)
 800b224:	6263      	str	r3, [r4, #36]	; 0x24
 800b226:	4b05      	ldr	r3, [pc, #20]	; (800b23c <std+0x3c>)
 800b228:	62a3      	str	r3, [r4, #40]	; 0x28
 800b22a:	4b05      	ldr	r3, [pc, #20]	; (800b240 <std+0x40>)
 800b22c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b22e:	4b05      	ldr	r3, [pc, #20]	; (800b244 <std+0x44>)
 800b230:	6224      	str	r4, [r4, #32]
 800b232:	6323      	str	r3, [r4, #48]	; 0x30
 800b234:	bd10      	pop	{r4, pc}
 800b236:	bf00      	nop
 800b238:	0800b551 	.word	0x0800b551
 800b23c:	0800b573 	.word	0x0800b573
 800b240:	0800b5ab 	.word	0x0800b5ab
 800b244:	0800b5cf 	.word	0x0800b5cf

0800b248 <_cleanup_r>:
 800b248:	4901      	ldr	r1, [pc, #4]	; (800b250 <_cleanup_r+0x8>)
 800b24a:	f000 b8af 	b.w	800b3ac <_fwalk_reent>
 800b24e:	bf00      	nop
 800b250:	0800b189 	.word	0x0800b189

0800b254 <__sfmoreglue>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	1e4a      	subs	r2, r1, #1
 800b258:	2568      	movs	r5, #104	; 0x68
 800b25a:	4355      	muls	r5, r2
 800b25c:	460e      	mov	r6, r1
 800b25e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b262:	f7ff fa87 	bl	800a774 <_malloc_r>
 800b266:	4604      	mov	r4, r0
 800b268:	b140      	cbz	r0, 800b27c <__sfmoreglue+0x28>
 800b26a:	2100      	movs	r1, #0
 800b26c:	e9c0 1600 	strd	r1, r6, [r0]
 800b270:	300c      	adds	r0, #12
 800b272:	60a0      	str	r0, [r4, #8]
 800b274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b278:	f7fd fb7a 	bl	8008970 <memset>
 800b27c:	4620      	mov	r0, r4
 800b27e:	bd70      	pop	{r4, r5, r6, pc}

0800b280 <__sfp_lock_acquire>:
 800b280:	4801      	ldr	r0, [pc, #4]	; (800b288 <__sfp_lock_acquire+0x8>)
 800b282:	f000 b8b3 	b.w	800b3ec <__retarget_lock_acquire_recursive>
 800b286:	bf00      	nop
 800b288:	20001210 	.word	0x20001210

0800b28c <__sfp_lock_release>:
 800b28c:	4801      	ldr	r0, [pc, #4]	; (800b294 <__sfp_lock_release+0x8>)
 800b28e:	f000 b8ae 	b.w	800b3ee <__retarget_lock_release_recursive>
 800b292:	bf00      	nop
 800b294:	20001210 	.word	0x20001210

0800b298 <__sinit_lock_acquire>:
 800b298:	4801      	ldr	r0, [pc, #4]	; (800b2a0 <__sinit_lock_acquire+0x8>)
 800b29a:	f000 b8a7 	b.w	800b3ec <__retarget_lock_acquire_recursive>
 800b29e:	bf00      	nop
 800b2a0:	2000120b 	.word	0x2000120b

0800b2a4 <__sinit_lock_release>:
 800b2a4:	4801      	ldr	r0, [pc, #4]	; (800b2ac <__sinit_lock_release+0x8>)
 800b2a6:	f000 b8a2 	b.w	800b3ee <__retarget_lock_release_recursive>
 800b2aa:	bf00      	nop
 800b2ac:	2000120b 	.word	0x2000120b

0800b2b0 <__sinit>:
 800b2b0:	b510      	push	{r4, lr}
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	f7ff fff0 	bl	800b298 <__sinit_lock_acquire>
 800b2b8:	69a3      	ldr	r3, [r4, #24]
 800b2ba:	b11b      	cbz	r3, 800b2c4 <__sinit+0x14>
 800b2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2c0:	f7ff bff0 	b.w	800b2a4 <__sinit_lock_release>
 800b2c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b2c8:	6523      	str	r3, [r4, #80]	; 0x50
 800b2ca:	4b13      	ldr	r3, [pc, #76]	; (800b318 <__sinit+0x68>)
 800b2cc:	4a13      	ldr	r2, [pc, #76]	; (800b31c <__sinit+0x6c>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800b2d2:	42a3      	cmp	r3, r4
 800b2d4:	bf04      	itt	eq
 800b2d6:	2301      	moveq	r3, #1
 800b2d8:	61a3      	streq	r3, [r4, #24]
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 f820 	bl	800b320 <__sfp>
 800b2e0:	6060      	str	r0, [r4, #4]
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f000 f81c 	bl	800b320 <__sfp>
 800b2e8:	60a0      	str	r0, [r4, #8]
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 f818 	bl	800b320 <__sfp>
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	60e0      	str	r0, [r4, #12]
 800b2f4:	2104      	movs	r1, #4
 800b2f6:	6860      	ldr	r0, [r4, #4]
 800b2f8:	f7ff ff82 	bl	800b200 <std>
 800b2fc:	68a0      	ldr	r0, [r4, #8]
 800b2fe:	2201      	movs	r2, #1
 800b300:	2109      	movs	r1, #9
 800b302:	f7ff ff7d 	bl	800b200 <std>
 800b306:	68e0      	ldr	r0, [r4, #12]
 800b308:	2202      	movs	r2, #2
 800b30a:	2112      	movs	r1, #18
 800b30c:	f7ff ff78 	bl	800b200 <std>
 800b310:	2301      	movs	r3, #1
 800b312:	61a3      	str	r3, [r4, #24]
 800b314:	e7d2      	b.n	800b2bc <__sinit+0xc>
 800b316:	bf00      	nop
 800b318:	0800c940 	.word	0x0800c940
 800b31c:	0800b249 	.word	0x0800b249

0800b320 <__sfp>:
 800b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b322:	4607      	mov	r7, r0
 800b324:	f7ff ffac 	bl	800b280 <__sfp_lock_acquire>
 800b328:	4b1e      	ldr	r3, [pc, #120]	; (800b3a4 <__sfp+0x84>)
 800b32a:	681e      	ldr	r6, [r3, #0]
 800b32c:	69b3      	ldr	r3, [r6, #24]
 800b32e:	b913      	cbnz	r3, 800b336 <__sfp+0x16>
 800b330:	4630      	mov	r0, r6
 800b332:	f7ff ffbd 	bl	800b2b0 <__sinit>
 800b336:	3648      	adds	r6, #72	; 0x48
 800b338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b33c:	3b01      	subs	r3, #1
 800b33e:	d503      	bpl.n	800b348 <__sfp+0x28>
 800b340:	6833      	ldr	r3, [r6, #0]
 800b342:	b30b      	cbz	r3, 800b388 <__sfp+0x68>
 800b344:	6836      	ldr	r6, [r6, #0]
 800b346:	e7f7      	b.n	800b338 <__sfp+0x18>
 800b348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b34c:	b9d5      	cbnz	r5, 800b384 <__sfp+0x64>
 800b34e:	4b16      	ldr	r3, [pc, #88]	; (800b3a8 <__sfp+0x88>)
 800b350:	60e3      	str	r3, [r4, #12]
 800b352:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b356:	6665      	str	r5, [r4, #100]	; 0x64
 800b358:	f000 f847 	bl	800b3ea <__retarget_lock_init_recursive>
 800b35c:	f7ff ff96 	bl	800b28c <__sfp_lock_release>
 800b360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b368:	6025      	str	r5, [r4, #0]
 800b36a:	61a5      	str	r5, [r4, #24]
 800b36c:	2208      	movs	r2, #8
 800b36e:	4629      	mov	r1, r5
 800b370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b374:	f7fd fafc 	bl	8008970 <memset>
 800b378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b37c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b380:	4620      	mov	r0, r4
 800b382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b384:	3468      	adds	r4, #104	; 0x68
 800b386:	e7d9      	b.n	800b33c <__sfp+0x1c>
 800b388:	2104      	movs	r1, #4
 800b38a:	4638      	mov	r0, r7
 800b38c:	f7ff ff62 	bl	800b254 <__sfmoreglue>
 800b390:	4604      	mov	r4, r0
 800b392:	6030      	str	r0, [r6, #0]
 800b394:	2800      	cmp	r0, #0
 800b396:	d1d5      	bne.n	800b344 <__sfp+0x24>
 800b398:	f7ff ff78 	bl	800b28c <__sfp_lock_release>
 800b39c:	230c      	movs	r3, #12
 800b39e:	603b      	str	r3, [r7, #0]
 800b3a0:	e7ee      	b.n	800b380 <__sfp+0x60>
 800b3a2:	bf00      	nop
 800b3a4:	0800c940 	.word	0x0800c940
 800b3a8:	ffff0001 	.word	0xffff0001

0800b3ac <_fwalk_reent>:
 800b3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b0:	4606      	mov	r6, r0
 800b3b2:	4688      	mov	r8, r1
 800b3b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b3b8:	2700      	movs	r7, #0
 800b3ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3be:	f1b9 0901 	subs.w	r9, r9, #1
 800b3c2:	d505      	bpl.n	800b3d0 <_fwalk_reent+0x24>
 800b3c4:	6824      	ldr	r4, [r4, #0]
 800b3c6:	2c00      	cmp	r4, #0
 800b3c8:	d1f7      	bne.n	800b3ba <_fwalk_reent+0xe>
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3d0:	89ab      	ldrh	r3, [r5, #12]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d907      	bls.n	800b3e6 <_fwalk_reent+0x3a>
 800b3d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	d003      	beq.n	800b3e6 <_fwalk_reent+0x3a>
 800b3de:	4629      	mov	r1, r5
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	47c0      	blx	r8
 800b3e4:	4307      	orrs	r7, r0
 800b3e6:	3568      	adds	r5, #104	; 0x68
 800b3e8:	e7e9      	b.n	800b3be <_fwalk_reent+0x12>

0800b3ea <__retarget_lock_init_recursive>:
 800b3ea:	4770      	bx	lr

0800b3ec <__retarget_lock_acquire_recursive>:
 800b3ec:	4770      	bx	lr

0800b3ee <__retarget_lock_release_recursive>:
 800b3ee:	4770      	bx	lr

0800b3f0 <__swhatbuf_r>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	460e      	mov	r6, r1
 800b3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f8:	2900      	cmp	r1, #0
 800b3fa:	b096      	sub	sp, #88	; 0x58
 800b3fc:	4614      	mov	r4, r2
 800b3fe:	461d      	mov	r5, r3
 800b400:	da07      	bge.n	800b412 <__swhatbuf_r+0x22>
 800b402:	2300      	movs	r3, #0
 800b404:	602b      	str	r3, [r5, #0]
 800b406:	89b3      	ldrh	r3, [r6, #12]
 800b408:	061a      	lsls	r2, r3, #24
 800b40a:	d410      	bmi.n	800b42e <__swhatbuf_r+0x3e>
 800b40c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b410:	e00e      	b.n	800b430 <__swhatbuf_r+0x40>
 800b412:	466a      	mov	r2, sp
 800b414:	f000 f902 	bl	800b61c <_fstat_r>
 800b418:	2800      	cmp	r0, #0
 800b41a:	dbf2      	blt.n	800b402 <__swhatbuf_r+0x12>
 800b41c:	9a01      	ldr	r2, [sp, #4]
 800b41e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b422:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b426:	425a      	negs	r2, r3
 800b428:	415a      	adcs	r2, r3
 800b42a:	602a      	str	r2, [r5, #0]
 800b42c:	e7ee      	b.n	800b40c <__swhatbuf_r+0x1c>
 800b42e:	2340      	movs	r3, #64	; 0x40
 800b430:	2000      	movs	r0, #0
 800b432:	6023      	str	r3, [r4, #0]
 800b434:	b016      	add	sp, #88	; 0x58
 800b436:	bd70      	pop	{r4, r5, r6, pc}

0800b438 <__smakebuf_r>:
 800b438:	898b      	ldrh	r3, [r1, #12]
 800b43a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b43c:	079d      	lsls	r5, r3, #30
 800b43e:	4606      	mov	r6, r0
 800b440:	460c      	mov	r4, r1
 800b442:	d507      	bpl.n	800b454 <__smakebuf_r+0x1c>
 800b444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b448:	6023      	str	r3, [r4, #0]
 800b44a:	6123      	str	r3, [r4, #16]
 800b44c:	2301      	movs	r3, #1
 800b44e:	6163      	str	r3, [r4, #20]
 800b450:	b002      	add	sp, #8
 800b452:	bd70      	pop	{r4, r5, r6, pc}
 800b454:	ab01      	add	r3, sp, #4
 800b456:	466a      	mov	r2, sp
 800b458:	f7ff ffca 	bl	800b3f0 <__swhatbuf_r>
 800b45c:	9900      	ldr	r1, [sp, #0]
 800b45e:	4605      	mov	r5, r0
 800b460:	4630      	mov	r0, r6
 800b462:	f7ff f987 	bl	800a774 <_malloc_r>
 800b466:	b948      	cbnz	r0, 800b47c <__smakebuf_r+0x44>
 800b468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b46c:	059a      	lsls	r2, r3, #22
 800b46e:	d4ef      	bmi.n	800b450 <__smakebuf_r+0x18>
 800b470:	f023 0303 	bic.w	r3, r3, #3
 800b474:	f043 0302 	orr.w	r3, r3, #2
 800b478:	81a3      	strh	r3, [r4, #12]
 800b47a:	e7e3      	b.n	800b444 <__smakebuf_r+0xc>
 800b47c:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <__smakebuf_r+0x7c>)
 800b47e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b480:	89a3      	ldrh	r3, [r4, #12]
 800b482:	6020      	str	r0, [r4, #0]
 800b484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b488:	81a3      	strh	r3, [r4, #12]
 800b48a:	9b00      	ldr	r3, [sp, #0]
 800b48c:	6163      	str	r3, [r4, #20]
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	6120      	str	r0, [r4, #16]
 800b492:	b15b      	cbz	r3, 800b4ac <__smakebuf_r+0x74>
 800b494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b498:	4630      	mov	r0, r6
 800b49a:	f000 f8d1 	bl	800b640 <_isatty_r>
 800b49e:	b128      	cbz	r0, 800b4ac <__smakebuf_r+0x74>
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	f023 0303 	bic.w	r3, r3, #3
 800b4a6:	f043 0301 	orr.w	r3, r3, #1
 800b4aa:	81a3      	strh	r3, [r4, #12]
 800b4ac:	89a0      	ldrh	r0, [r4, #12]
 800b4ae:	4305      	orrs	r5, r0
 800b4b0:	81a5      	strh	r5, [r4, #12]
 800b4b2:	e7cd      	b.n	800b450 <__smakebuf_r+0x18>
 800b4b4:	0800b249 	.word	0x0800b249

0800b4b8 <_malloc_usable_size_r>:
 800b4b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4bc:	1f18      	subs	r0, r3, #4
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bfbc      	itt	lt
 800b4c2:	580b      	ldrlt	r3, [r1, r0]
 800b4c4:	18c0      	addlt	r0, r0, r3
 800b4c6:	4770      	bx	lr

0800b4c8 <_raise_r>:
 800b4c8:	291f      	cmp	r1, #31
 800b4ca:	b538      	push	{r3, r4, r5, lr}
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	460d      	mov	r5, r1
 800b4d0:	d904      	bls.n	800b4dc <_raise_r+0x14>
 800b4d2:	2316      	movs	r3, #22
 800b4d4:	6003      	str	r3, [r0, #0]
 800b4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4de:	b112      	cbz	r2, 800b4e6 <_raise_r+0x1e>
 800b4e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4e4:	b94b      	cbnz	r3, 800b4fa <_raise_r+0x32>
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f000 f830 	bl	800b54c <_getpid_r>
 800b4ec:	462a      	mov	r2, r5
 800b4ee:	4601      	mov	r1, r0
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4f6:	f000 b817 	b.w	800b528 <_kill_r>
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d00a      	beq.n	800b514 <_raise_r+0x4c>
 800b4fe:	1c59      	adds	r1, r3, #1
 800b500:	d103      	bne.n	800b50a <_raise_r+0x42>
 800b502:	2316      	movs	r3, #22
 800b504:	6003      	str	r3, [r0, #0]
 800b506:	2001      	movs	r0, #1
 800b508:	e7e7      	b.n	800b4da <_raise_r+0x12>
 800b50a:	2400      	movs	r4, #0
 800b50c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b510:	4628      	mov	r0, r5
 800b512:	4798      	blx	r3
 800b514:	2000      	movs	r0, #0
 800b516:	e7e0      	b.n	800b4da <_raise_r+0x12>

0800b518 <raise>:
 800b518:	4b02      	ldr	r3, [pc, #8]	; (800b524 <raise+0xc>)
 800b51a:	4601      	mov	r1, r0
 800b51c:	6818      	ldr	r0, [r3, #0]
 800b51e:	f7ff bfd3 	b.w	800b4c8 <_raise_r>
 800b522:	bf00      	nop
 800b524:	20000040 	.word	0x20000040

0800b528 <_kill_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	4d07      	ldr	r5, [pc, #28]	; (800b548 <_kill_r+0x20>)
 800b52c:	2300      	movs	r3, #0
 800b52e:	4604      	mov	r4, r0
 800b530:	4608      	mov	r0, r1
 800b532:	4611      	mov	r1, r2
 800b534:	602b      	str	r3, [r5, #0]
 800b536:	f7f8 fe8d 	bl	8004254 <_kill>
 800b53a:	1c43      	adds	r3, r0, #1
 800b53c:	d102      	bne.n	800b544 <_kill_r+0x1c>
 800b53e:	682b      	ldr	r3, [r5, #0]
 800b540:	b103      	cbz	r3, 800b544 <_kill_r+0x1c>
 800b542:	6023      	str	r3, [r4, #0]
 800b544:	bd38      	pop	{r3, r4, r5, pc}
 800b546:	bf00      	nop
 800b548:	20001204 	.word	0x20001204

0800b54c <_getpid_r>:
 800b54c:	f7f8 be80 	b.w	8004250 <_getpid>

0800b550 <__sread>:
 800b550:	b510      	push	{r4, lr}
 800b552:	460c      	mov	r4, r1
 800b554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b558:	f000 f894 	bl	800b684 <_read_r>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	bfab      	itete	ge
 800b560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b562:	89a3      	ldrhlt	r3, [r4, #12]
 800b564:	181b      	addge	r3, r3, r0
 800b566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b56a:	bfac      	ite	ge
 800b56c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b56e:	81a3      	strhlt	r3, [r4, #12]
 800b570:	bd10      	pop	{r4, pc}

0800b572 <__swrite>:
 800b572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b576:	461f      	mov	r7, r3
 800b578:	898b      	ldrh	r3, [r1, #12]
 800b57a:	05db      	lsls	r3, r3, #23
 800b57c:	4605      	mov	r5, r0
 800b57e:	460c      	mov	r4, r1
 800b580:	4616      	mov	r6, r2
 800b582:	d505      	bpl.n	800b590 <__swrite+0x1e>
 800b584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b588:	2302      	movs	r3, #2
 800b58a:	2200      	movs	r2, #0
 800b58c:	f000 f868 	bl	800b660 <_lseek_r>
 800b590:	89a3      	ldrh	r3, [r4, #12]
 800b592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b59a:	81a3      	strh	r3, [r4, #12]
 800b59c:	4632      	mov	r2, r6
 800b59e:	463b      	mov	r3, r7
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a6:	f000 b817 	b.w	800b5d8 <_write_r>

0800b5aa <__sseek>:
 800b5aa:	b510      	push	{r4, lr}
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b2:	f000 f855 	bl	800b660 <_lseek_r>
 800b5b6:	1c43      	adds	r3, r0, #1
 800b5b8:	89a3      	ldrh	r3, [r4, #12]
 800b5ba:	bf15      	itete	ne
 800b5bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5c6:	81a3      	strheq	r3, [r4, #12]
 800b5c8:	bf18      	it	ne
 800b5ca:	81a3      	strhne	r3, [r4, #12]
 800b5cc:	bd10      	pop	{r4, pc}

0800b5ce <__sclose>:
 800b5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d2:	f000 b813 	b.w	800b5fc <_close_r>
	...

0800b5d8 <_write_r>:
 800b5d8:	b538      	push	{r3, r4, r5, lr}
 800b5da:	4d07      	ldr	r5, [pc, #28]	; (800b5f8 <_write_r+0x20>)
 800b5dc:	4604      	mov	r4, r0
 800b5de:	4608      	mov	r0, r1
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	602a      	str	r2, [r5, #0]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	f7f8 fe52 	bl	8004290 <_write>
 800b5ec:	1c43      	adds	r3, r0, #1
 800b5ee:	d102      	bne.n	800b5f6 <_write_r+0x1e>
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	b103      	cbz	r3, 800b5f6 <_write_r+0x1e>
 800b5f4:	6023      	str	r3, [r4, #0]
 800b5f6:	bd38      	pop	{r3, r4, r5, pc}
 800b5f8:	20001204 	.word	0x20001204

0800b5fc <_close_r>:
 800b5fc:	b538      	push	{r3, r4, r5, lr}
 800b5fe:	4d06      	ldr	r5, [pc, #24]	; (800b618 <_close_r+0x1c>)
 800b600:	2300      	movs	r3, #0
 800b602:	4604      	mov	r4, r0
 800b604:	4608      	mov	r0, r1
 800b606:	602b      	str	r3, [r5, #0]
 800b608:	f7f8 fe50 	bl	80042ac <_close>
 800b60c:	1c43      	adds	r3, r0, #1
 800b60e:	d102      	bne.n	800b616 <_close_r+0x1a>
 800b610:	682b      	ldr	r3, [r5, #0]
 800b612:	b103      	cbz	r3, 800b616 <_close_r+0x1a>
 800b614:	6023      	str	r3, [r4, #0]
 800b616:	bd38      	pop	{r3, r4, r5, pc}
 800b618:	20001204 	.word	0x20001204

0800b61c <_fstat_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4d07      	ldr	r5, [pc, #28]	; (800b63c <_fstat_r+0x20>)
 800b620:	2300      	movs	r3, #0
 800b622:	4604      	mov	r4, r0
 800b624:	4608      	mov	r0, r1
 800b626:	4611      	mov	r1, r2
 800b628:	602b      	str	r3, [r5, #0]
 800b62a:	f7f8 fe42 	bl	80042b2 <_fstat>
 800b62e:	1c43      	adds	r3, r0, #1
 800b630:	d102      	bne.n	800b638 <_fstat_r+0x1c>
 800b632:	682b      	ldr	r3, [r5, #0]
 800b634:	b103      	cbz	r3, 800b638 <_fstat_r+0x1c>
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	bd38      	pop	{r3, r4, r5, pc}
 800b63a:	bf00      	nop
 800b63c:	20001204 	.word	0x20001204

0800b640 <_isatty_r>:
 800b640:	b538      	push	{r3, r4, r5, lr}
 800b642:	4d06      	ldr	r5, [pc, #24]	; (800b65c <_isatty_r+0x1c>)
 800b644:	2300      	movs	r3, #0
 800b646:	4604      	mov	r4, r0
 800b648:	4608      	mov	r0, r1
 800b64a:	602b      	str	r3, [r5, #0]
 800b64c:	f7f8 fe36 	bl	80042bc <_isatty>
 800b650:	1c43      	adds	r3, r0, #1
 800b652:	d102      	bne.n	800b65a <_isatty_r+0x1a>
 800b654:	682b      	ldr	r3, [r5, #0]
 800b656:	b103      	cbz	r3, 800b65a <_isatty_r+0x1a>
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	bd38      	pop	{r3, r4, r5, pc}
 800b65c:	20001204 	.word	0x20001204

0800b660 <_lseek_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4d07      	ldr	r5, [pc, #28]	; (800b680 <_lseek_r+0x20>)
 800b664:	4604      	mov	r4, r0
 800b666:	4608      	mov	r0, r1
 800b668:	4611      	mov	r1, r2
 800b66a:	2200      	movs	r2, #0
 800b66c:	602a      	str	r2, [r5, #0]
 800b66e:	461a      	mov	r2, r3
 800b670:	f7f8 fe26 	bl	80042c0 <_lseek>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d102      	bne.n	800b67e <_lseek_r+0x1e>
 800b678:	682b      	ldr	r3, [r5, #0]
 800b67a:	b103      	cbz	r3, 800b67e <_lseek_r+0x1e>
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	20001204 	.word	0x20001204

0800b684 <_read_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4d07      	ldr	r5, [pc, #28]	; (800b6a4 <_read_r+0x20>)
 800b688:	4604      	mov	r4, r0
 800b68a:	4608      	mov	r0, r1
 800b68c:	4611      	mov	r1, r2
 800b68e:	2200      	movs	r2, #0
 800b690:	602a      	str	r2, [r5, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	f7f8 fdec 	bl	8004270 <_read>
 800b698:	1c43      	adds	r3, r0, #1
 800b69a:	d102      	bne.n	800b6a2 <_read_r+0x1e>
 800b69c:	682b      	ldr	r3, [r5, #0]
 800b69e:	b103      	cbz	r3, 800b6a2 <_read_r+0x1e>
 800b6a0:	6023      	str	r3, [r4, #0]
 800b6a2:	bd38      	pop	{r3, r4, r5, pc}
 800b6a4:	20001204 	.word	0x20001204

0800b6a8 <pow>:
 800b6a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ac:	ec59 8b10 	vmov	r8, r9, d0
 800b6b0:	ec57 6b11 	vmov	r6, r7, d1
 800b6b4:	f000 f8a8 	bl	800b808 <__ieee754_pow>
 800b6b8:	4b4e      	ldr	r3, [pc, #312]	; (800b7f4 <pow+0x14c>)
 800b6ba:	f993 3000 	ldrsb.w	r3, [r3]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	ec55 4b10 	vmov	r4, r5, d0
 800b6c4:	d015      	beq.n	800b6f2 <pow+0x4a>
 800b6c6:	4632      	mov	r2, r6
 800b6c8:	463b      	mov	r3, r7
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	4639      	mov	r1, r7
 800b6ce:	f7f5 fa35 	bl	8000b3c <__aeabi_dcmpun>
 800b6d2:	b970      	cbnz	r0, 800b6f2 <pow+0x4a>
 800b6d4:	4642      	mov	r2, r8
 800b6d6:	464b      	mov	r3, r9
 800b6d8:	4640      	mov	r0, r8
 800b6da:	4649      	mov	r1, r9
 800b6dc:	f7f5 fa2e 	bl	8000b3c <__aeabi_dcmpun>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	b148      	cbz	r0, 800b6fa <pow+0x52>
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	f7f5 f9f5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d17d      	bne.n	800b7ee <pow+0x146>
 800b6f2:	ec45 4b10 	vmov	d0, r4, r5
 800b6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	f7f5 f9eb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b702:	b1e0      	cbz	r0, 800b73e <pow+0x96>
 800b704:	2200      	movs	r2, #0
 800b706:	2300      	movs	r3, #0
 800b708:	4630      	mov	r0, r6
 800b70a:	4639      	mov	r1, r7
 800b70c:	f7f5 f9e4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b710:	2800      	cmp	r0, #0
 800b712:	d16c      	bne.n	800b7ee <pow+0x146>
 800b714:	ec47 6b10 	vmov	d0, r6, r7
 800b718:	f000 fe55 	bl	800c3c6 <finite>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d0e8      	beq.n	800b6f2 <pow+0x4a>
 800b720:	2200      	movs	r2, #0
 800b722:	2300      	movs	r3, #0
 800b724:	4630      	mov	r0, r6
 800b726:	4639      	mov	r1, r7
 800b728:	f7f5 f9e0 	bl	8000aec <__aeabi_dcmplt>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d0e0      	beq.n	800b6f2 <pow+0x4a>
 800b730:	f7fd f8e6 	bl	8008900 <__errno>
 800b734:	2321      	movs	r3, #33	; 0x21
 800b736:	6003      	str	r3, [r0, #0]
 800b738:	2400      	movs	r4, #0
 800b73a:	4d2f      	ldr	r5, [pc, #188]	; (800b7f8 <pow+0x150>)
 800b73c:	e7d9      	b.n	800b6f2 <pow+0x4a>
 800b73e:	ec45 4b10 	vmov	d0, r4, r5
 800b742:	f000 fe40 	bl	800c3c6 <finite>
 800b746:	bbb8      	cbnz	r0, 800b7b8 <pow+0x110>
 800b748:	ec49 8b10 	vmov	d0, r8, r9
 800b74c:	f000 fe3b 	bl	800c3c6 <finite>
 800b750:	b390      	cbz	r0, 800b7b8 <pow+0x110>
 800b752:	ec47 6b10 	vmov	d0, r6, r7
 800b756:	f000 fe36 	bl	800c3c6 <finite>
 800b75a:	b368      	cbz	r0, 800b7b8 <pow+0x110>
 800b75c:	4622      	mov	r2, r4
 800b75e:	462b      	mov	r3, r5
 800b760:	4620      	mov	r0, r4
 800b762:	4629      	mov	r1, r5
 800b764:	f7f5 f9ea 	bl	8000b3c <__aeabi_dcmpun>
 800b768:	b160      	cbz	r0, 800b784 <pow+0xdc>
 800b76a:	f7fd f8c9 	bl	8008900 <__errno>
 800b76e:	2321      	movs	r3, #33	; 0x21
 800b770:	6003      	str	r3, [r0, #0]
 800b772:	2200      	movs	r2, #0
 800b774:	2300      	movs	r3, #0
 800b776:	4610      	mov	r0, r2
 800b778:	4619      	mov	r1, r3
 800b77a:	f7f5 f86f 	bl	800085c <__aeabi_ddiv>
 800b77e:	4604      	mov	r4, r0
 800b780:	460d      	mov	r5, r1
 800b782:	e7b6      	b.n	800b6f2 <pow+0x4a>
 800b784:	f7fd f8bc 	bl	8008900 <__errno>
 800b788:	2322      	movs	r3, #34	; 0x22
 800b78a:	6003      	str	r3, [r0, #0]
 800b78c:	2200      	movs	r2, #0
 800b78e:	2300      	movs	r3, #0
 800b790:	4640      	mov	r0, r8
 800b792:	4649      	mov	r1, r9
 800b794:	f7f5 f9aa 	bl	8000aec <__aeabi_dcmplt>
 800b798:	2400      	movs	r4, #0
 800b79a:	b158      	cbz	r0, 800b7b4 <pow+0x10c>
 800b79c:	ec47 6b10 	vmov	d0, r6, r7
 800b7a0:	f000 fe26 	bl	800c3f0 <rint>
 800b7a4:	4632      	mov	r2, r6
 800b7a6:	ec51 0b10 	vmov	r0, r1, d0
 800b7aa:	463b      	mov	r3, r7
 800b7ac:	f7f5 f994 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d0c2      	beq.n	800b73a <pow+0x92>
 800b7b4:	4d11      	ldr	r5, [pc, #68]	; (800b7fc <pow+0x154>)
 800b7b6:	e79c      	b.n	800b6f2 <pow+0x4a>
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	4620      	mov	r0, r4
 800b7be:	4629      	mov	r1, r5
 800b7c0:	f7f5 f98a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d094      	beq.n	800b6f2 <pow+0x4a>
 800b7c8:	ec49 8b10 	vmov	d0, r8, r9
 800b7cc:	f000 fdfb 	bl	800c3c6 <finite>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	d08e      	beq.n	800b6f2 <pow+0x4a>
 800b7d4:	ec47 6b10 	vmov	d0, r6, r7
 800b7d8:	f000 fdf5 	bl	800c3c6 <finite>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d088      	beq.n	800b6f2 <pow+0x4a>
 800b7e0:	f7fd f88e 	bl	8008900 <__errno>
 800b7e4:	2322      	movs	r3, #34	; 0x22
 800b7e6:	6003      	str	r3, [r0, #0]
 800b7e8:	2400      	movs	r4, #0
 800b7ea:	2500      	movs	r5, #0
 800b7ec:	e781      	b.n	800b6f2 <pow+0x4a>
 800b7ee:	4d04      	ldr	r5, [pc, #16]	; (800b800 <pow+0x158>)
 800b7f0:	2400      	movs	r4, #0
 800b7f2:	e77e      	b.n	800b6f2 <pow+0x4a>
 800b7f4:	20000210 	.word	0x20000210
 800b7f8:	fff00000 	.word	0xfff00000
 800b7fc:	7ff00000 	.word	0x7ff00000
 800b800:	3ff00000 	.word	0x3ff00000
 800b804:	00000000 	.word	0x00000000

0800b808 <__ieee754_pow>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	ed2d 8b06 	vpush	{d8-d10}
 800b810:	b08d      	sub	sp, #52	; 0x34
 800b812:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b816:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800b81a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800b81e:	ea56 0100 	orrs.w	r1, r6, r0
 800b822:	ec53 2b10 	vmov	r2, r3, d0
 800b826:	f000 84d1 	beq.w	800c1cc <__ieee754_pow+0x9c4>
 800b82a:	497f      	ldr	r1, [pc, #508]	; (800ba28 <__ieee754_pow+0x220>)
 800b82c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b830:	428c      	cmp	r4, r1
 800b832:	ee10 8a10 	vmov	r8, s0
 800b836:	4699      	mov	r9, r3
 800b838:	dc09      	bgt.n	800b84e <__ieee754_pow+0x46>
 800b83a:	d103      	bne.n	800b844 <__ieee754_pow+0x3c>
 800b83c:	b97a      	cbnz	r2, 800b85e <__ieee754_pow+0x56>
 800b83e:	42a6      	cmp	r6, r4
 800b840:	dd02      	ble.n	800b848 <__ieee754_pow+0x40>
 800b842:	e00c      	b.n	800b85e <__ieee754_pow+0x56>
 800b844:	428e      	cmp	r6, r1
 800b846:	dc02      	bgt.n	800b84e <__ieee754_pow+0x46>
 800b848:	428e      	cmp	r6, r1
 800b84a:	d110      	bne.n	800b86e <__ieee754_pow+0x66>
 800b84c:	b178      	cbz	r0, 800b86e <__ieee754_pow+0x66>
 800b84e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b852:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b856:	ea54 0308 	orrs.w	r3, r4, r8
 800b85a:	f000 84b7 	beq.w	800c1cc <__ieee754_pow+0x9c4>
 800b85e:	4873      	ldr	r0, [pc, #460]	; (800ba2c <__ieee754_pow+0x224>)
 800b860:	b00d      	add	sp, #52	; 0x34
 800b862:	ecbd 8b06 	vpop	{d8-d10}
 800b866:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86a:	f000 bdb9 	b.w	800c3e0 <nan>
 800b86e:	f1b9 0f00 	cmp.w	r9, #0
 800b872:	da36      	bge.n	800b8e2 <__ieee754_pow+0xda>
 800b874:	496e      	ldr	r1, [pc, #440]	; (800ba30 <__ieee754_pow+0x228>)
 800b876:	428e      	cmp	r6, r1
 800b878:	dc51      	bgt.n	800b91e <__ieee754_pow+0x116>
 800b87a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800b87e:	428e      	cmp	r6, r1
 800b880:	f340 84af 	ble.w	800c1e2 <__ieee754_pow+0x9da>
 800b884:	1531      	asrs	r1, r6, #20
 800b886:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b88a:	2914      	cmp	r1, #20
 800b88c:	dd0f      	ble.n	800b8ae <__ieee754_pow+0xa6>
 800b88e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800b892:	fa20 fc01 	lsr.w	ip, r0, r1
 800b896:	fa0c f101 	lsl.w	r1, ip, r1
 800b89a:	4281      	cmp	r1, r0
 800b89c:	f040 84a1 	bne.w	800c1e2 <__ieee754_pow+0x9da>
 800b8a0:	f00c 0c01 	and.w	ip, ip, #1
 800b8a4:	f1cc 0102 	rsb	r1, ip, #2
 800b8a8:	9100      	str	r1, [sp, #0]
 800b8aa:	b180      	cbz	r0, 800b8ce <__ieee754_pow+0xc6>
 800b8ac:	e059      	b.n	800b962 <__ieee754_pow+0x15a>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d155      	bne.n	800b95e <__ieee754_pow+0x156>
 800b8b2:	f1c1 0114 	rsb	r1, r1, #20
 800b8b6:	fa46 fc01 	asr.w	ip, r6, r1
 800b8ba:	fa0c f101 	lsl.w	r1, ip, r1
 800b8be:	42b1      	cmp	r1, r6
 800b8c0:	f040 848c 	bne.w	800c1dc <__ieee754_pow+0x9d4>
 800b8c4:	f00c 0c01 	and.w	ip, ip, #1
 800b8c8:	f1cc 0102 	rsb	r1, ip, #2
 800b8cc:	9100      	str	r1, [sp, #0]
 800b8ce:	4959      	ldr	r1, [pc, #356]	; (800ba34 <__ieee754_pow+0x22c>)
 800b8d0:	428e      	cmp	r6, r1
 800b8d2:	d12d      	bne.n	800b930 <__ieee754_pow+0x128>
 800b8d4:	2f00      	cmp	r7, #0
 800b8d6:	da79      	bge.n	800b9cc <__ieee754_pow+0x1c4>
 800b8d8:	4956      	ldr	r1, [pc, #344]	; (800ba34 <__ieee754_pow+0x22c>)
 800b8da:	2000      	movs	r0, #0
 800b8dc:	f7f4 ffbe 	bl	800085c <__aeabi_ddiv>
 800b8e0:	e016      	b.n	800b910 <__ieee754_pow+0x108>
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	9100      	str	r1, [sp, #0]
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d13b      	bne.n	800b962 <__ieee754_pow+0x15a>
 800b8ea:	494f      	ldr	r1, [pc, #316]	; (800ba28 <__ieee754_pow+0x220>)
 800b8ec:	428e      	cmp	r6, r1
 800b8ee:	d1ee      	bne.n	800b8ce <__ieee754_pow+0xc6>
 800b8f0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b8f4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b8f8:	ea53 0308 	orrs.w	r3, r3, r8
 800b8fc:	f000 8466 	beq.w	800c1cc <__ieee754_pow+0x9c4>
 800b900:	4b4d      	ldr	r3, [pc, #308]	; (800ba38 <__ieee754_pow+0x230>)
 800b902:	429c      	cmp	r4, r3
 800b904:	dd0d      	ble.n	800b922 <__ieee754_pow+0x11a>
 800b906:	2f00      	cmp	r7, #0
 800b908:	f280 8464 	bge.w	800c1d4 <__ieee754_pow+0x9cc>
 800b90c:	2000      	movs	r0, #0
 800b90e:	2100      	movs	r1, #0
 800b910:	ec41 0b10 	vmov	d0, r0, r1
 800b914:	b00d      	add	sp, #52	; 0x34
 800b916:	ecbd 8b06 	vpop	{d8-d10}
 800b91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b91e:	2102      	movs	r1, #2
 800b920:	e7e0      	b.n	800b8e4 <__ieee754_pow+0xdc>
 800b922:	2f00      	cmp	r7, #0
 800b924:	daf2      	bge.n	800b90c <__ieee754_pow+0x104>
 800b926:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800b92a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b92e:	e7ef      	b.n	800b910 <__ieee754_pow+0x108>
 800b930:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800b934:	d104      	bne.n	800b940 <__ieee754_pow+0x138>
 800b936:	4610      	mov	r0, r2
 800b938:	4619      	mov	r1, r3
 800b93a:	f7f4 fe65 	bl	8000608 <__aeabi_dmul>
 800b93e:	e7e7      	b.n	800b910 <__ieee754_pow+0x108>
 800b940:	493e      	ldr	r1, [pc, #248]	; (800ba3c <__ieee754_pow+0x234>)
 800b942:	428f      	cmp	r7, r1
 800b944:	d10d      	bne.n	800b962 <__ieee754_pow+0x15a>
 800b946:	f1b9 0f00 	cmp.w	r9, #0
 800b94a:	db0a      	blt.n	800b962 <__ieee754_pow+0x15a>
 800b94c:	ec43 2b10 	vmov	d0, r2, r3
 800b950:	b00d      	add	sp, #52	; 0x34
 800b952:	ecbd 8b06 	vpop	{d8-d10}
 800b956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95a:	f000 bc77 	b.w	800c24c <__ieee754_sqrt>
 800b95e:	2100      	movs	r1, #0
 800b960:	9100      	str	r1, [sp, #0]
 800b962:	ec43 2b10 	vmov	d0, r2, r3
 800b966:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b96a:	f000 fd23 	bl	800c3b4 <fabs>
 800b96e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b972:	ec51 0b10 	vmov	r0, r1, d0
 800b976:	f1b8 0f00 	cmp.w	r8, #0
 800b97a:	d12a      	bne.n	800b9d2 <__ieee754_pow+0x1ca>
 800b97c:	b12c      	cbz	r4, 800b98a <__ieee754_pow+0x182>
 800b97e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800ba34 <__ieee754_pow+0x22c>
 800b982:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b986:	45e6      	cmp	lr, ip
 800b988:	d123      	bne.n	800b9d2 <__ieee754_pow+0x1ca>
 800b98a:	2f00      	cmp	r7, #0
 800b98c:	da05      	bge.n	800b99a <__ieee754_pow+0x192>
 800b98e:	4602      	mov	r2, r0
 800b990:	460b      	mov	r3, r1
 800b992:	2000      	movs	r0, #0
 800b994:	4927      	ldr	r1, [pc, #156]	; (800ba34 <__ieee754_pow+0x22c>)
 800b996:	f7f4 ff61 	bl	800085c <__aeabi_ddiv>
 800b99a:	f1b9 0f00 	cmp.w	r9, #0
 800b99e:	dab7      	bge.n	800b910 <__ieee754_pow+0x108>
 800b9a0:	9b00      	ldr	r3, [sp, #0]
 800b9a2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b9a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b9aa:	4323      	orrs	r3, r4
 800b9ac:	d108      	bne.n	800b9c0 <__ieee754_pow+0x1b8>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	f7f4 fc6f 	bl	8000298 <__aeabi_dsub>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	460b      	mov	r3, r1
 800b9be:	e78d      	b.n	800b8dc <__ieee754_pow+0xd4>
 800b9c0:	9b00      	ldr	r3, [sp, #0]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d1a4      	bne.n	800b910 <__ieee754_pow+0x108>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	e79e      	b.n	800b910 <__ieee754_pow+0x108>
 800b9d2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b9d6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800b9da:	950a      	str	r5, [sp, #40]	; 0x28
 800b9dc:	9d00      	ldr	r5, [sp, #0]
 800b9de:	46ac      	mov	ip, r5
 800b9e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b9e2:	ea5c 0505 	orrs.w	r5, ip, r5
 800b9e6:	d0e4      	beq.n	800b9b2 <__ieee754_pow+0x1aa>
 800b9e8:	4b15      	ldr	r3, [pc, #84]	; (800ba40 <__ieee754_pow+0x238>)
 800b9ea:	429e      	cmp	r6, r3
 800b9ec:	f340 80fc 	ble.w	800bbe8 <__ieee754_pow+0x3e0>
 800b9f0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b9f4:	429e      	cmp	r6, r3
 800b9f6:	4b10      	ldr	r3, [pc, #64]	; (800ba38 <__ieee754_pow+0x230>)
 800b9f8:	dd07      	ble.n	800ba0a <__ieee754_pow+0x202>
 800b9fa:	429c      	cmp	r4, r3
 800b9fc:	dc0a      	bgt.n	800ba14 <__ieee754_pow+0x20c>
 800b9fe:	2f00      	cmp	r7, #0
 800ba00:	da84      	bge.n	800b90c <__ieee754_pow+0x104>
 800ba02:	a307      	add	r3, pc, #28	; (adr r3, 800ba20 <__ieee754_pow+0x218>)
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	e795      	b.n	800b936 <__ieee754_pow+0x12e>
 800ba0a:	429c      	cmp	r4, r3
 800ba0c:	dbf7      	blt.n	800b9fe <__ieee754_pow+0x1f6>
 800ba0e:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <__ieee754_pow+0x22c>)
 800ba10:	429c      	cmp	r4, r3
 800ba12:	dd17      	ble.n	800ba44 <__ieee754_pow+0x23c>
 800ba14:	2f00      	cmp	r7, #0
 800ba16:	dcf4      	bgt.n	800ba02 <__ieee754_pow+0x1fa>
 800ba18:	e778      	b.n	800b90c <__ieee754_pow+0x104>
 800ba1a:	bf00      	nop
 800ba1c:	f3af 8000 	nop.w
 800ba20:	8800759c 	.word	0x8800759c
 800ba24:	7e37e43c 	.word	0x7e37e43c
 800ba28:	7ff00000 	.word	0x7ff00000
 800ba2c:	0800cbb8 	.word	0x0800cbb8
 800ba30:	433fffff 	.word	0x433fffff
 800ba34:	3ff00000 	.word	0x3ff00000
 800ba38:	3fefffff 	.word	0x3fefffff
 800ba3c:	3fe00000 	.word	0x3fe00000
 800ba40:	41e00000 	.word	0x41e00000
 800ba44:	4b64      	ldr	r3, [pc, #400]	; (800bbd8 <__ieee754_pow+0x3d0>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	f7f4 fc26 	bl	8000298 <__aeabi_dsub>
 800ba4c:	a356      	add	r3, pc, #344	; (adr r3, 800bba8 <__ieee754_pow+0x3a0>)
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	4604      	mov	r4, r0
 800ba54:	460d      	mov	r5, r1
 800ba56:	f7f4 fdd7 	bl	8000608 <__aeabi_dmul>
 800ba5a:	a355      	add	r3, pc, #340	; (adr r3, 800bbb0 <__ieee754_pow+0x3a8>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	4606      	mov	r6, r0
 800ba62:	460f      	mov	r7, r1
 800ba64:	4620      	mov	r0, r4
 800ba66:	4629      	mov	r1, r5
 800ba68:	f7f4 fdce 	bl	8000608 <__aeabi_dmul>
 800ba6c:	4b5b      	ldr	r3, [pc, #364]	; (800bbdc <__ieee754_pow+0x3d4>)
 800ba6e:	4682      	mov	sl, r0
 800ba70:	468b      	mov	fp, r1
 800ba72:	2200      	movs	r2, #0
 800ba74:	4620      	mov	r0, r4
 800ba76:	4629      	mov	r1, r5
 800ba78:	f7f4 fdc6 	bl	8000608 <__aeabi_dmul>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	a14d      	add	r1, pc, #308	; (adr r1, 800bbb8 <__ieee754_pow+0x3b0>)
 800ba82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba86:	f7f4 fc07 	bl	8000298 <__aeabi_dsub>
 800ba8a:	4622      	mov	r2, r4
 800ba8c:	462b      	mov	r3, r5
 800ba8e:	f7f4 fdbb 	bl	8000608 <__aeabi_dmul>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	2000      	movs	r0, #0
 800ba98:	4951      	ldr	r1, [pc, #324]	; (800bbe0 <__ieee754_pow+0x3d8>)
 800ba9a:	f7f4 fbfd 	bl	8000298 <__aeabi_dsub>
 800ba9e:	4622      	mov	r2, r4
 800baa0:	4680      	mov	r8, r0
 800baa2:	4689      	mov	r9, r1
 800baa4:	462b      	mov	r3, r5
 800baa6:	4620      	mov	r0, r4
 800baa8:	4629      	mov	r1, r5
 800baaa:	f7f4 fdad 	bl	8000608 <__aeabi_dmul>
 800baae:	4602      	mov	r2, r0
 800bab0:	460b      	mov	r3, r1
 800bab2:	4640      	mov	r0, r8
 800bab4:	4649      	mov	r1, r9
 800bab6:	f7f4 fda7 	bl	8000608 <__aeabi_dmul>
 800baba:	a341      	add	r3, pc, #260	; (adr r3, 800bbc0 <__ieee754_pow+0x3b8>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	f7f4 fda2 	bl	8000608 <__aeabi_dmul>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	4650      	mov	r0, sl
 800baca:	4659      	mov	r1, fp
 800bacc:	f7f4 fbe4 	bl	8000298 <__aeabi_dsub>
 800bad0:	4602      	mov	r2, r0
 800bad2:	460b      	mov	r3, r1
 800bad4:	4680      	mov	r8, r0
 800bad6:	4689      	mov	r9, r1
 800bad8:	4630      	mov	r0, r6
 800bada:	4639      	mov	r1, r7
 800badc:	f7f4 fbde 	bl	800029c <__adddf3>
 800bae0:	2400      	movs	r4, #0
 800bae2:	4632      	mov	r2, r6
 800bae4:	463b      	mov	r3, r7
 800bae6:	4620      	mov	r0, r4
 800bae8:	460d      	mov	r5, r1
 800baea:	f7f4 fbd5 	bl	8000298 <__aeabi_dsub>
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	4640      	mov	r0, r8
 800baf4:	4649      	mov	r1, r9
 800baf6:	f7f4 fbcf 	bl	8000298 <__aeabi_dsub>
 800bafa:	9b00      	ldr	r3, [sp, #0]
 800bafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bafe:	3b01      	subs	r3, #1
 800bb00:	4313      	orrs	r3, r2
 800bb02:	4682      	mov	sl, r0
 800bb04:	468b      	mov	fp, r1
 800bb06:	f040 81f1 	bne.w	800beec <__ieee754_pow+0x6e4>
 800bb0a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bbc8 <__ieee754_pow+0x3c0>
 800bb0e:	eeb0 8a47 	vmov.f32	s16, s14
 800bb12:	eef0 8a67 	vmov.f32	s17, s15
 800bb16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bb1a:	2600      	movs	r6, #0
 800bb1c:	4632      	mov	r2, r6
 800bb1e:	463b      	mov	r3, r7
 800bb20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb24:	f7f4 fbb8 	bl	8000298 <__aeabi_dsub>
 800bb28:	4622      	mov	r2, r4
 800bb2a:	462b      	mov	r3, r5
 800bb2c:	f7f4 fd6c 	bl	8000608 <__aeabi_dmul>
 800bb30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb34:	4680      	mov	r8, r0
 800bb36:	4689      	mov	r9, r1
 800bb38:	4650      	mov	r0, sl
 800bb3a:	4659      	mov	r1, fp
 800bb3c:	f7f4 fd64 	bl	8000608 <__aeabi_dmul>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	4640      	mov	r0, r8
 800bb46:	4649      	mov	r1, r9
 800bb48:	f7f4 fba8 	bl	800029c <__adddf3>
 800bb4c:	4632      	mov	r2, r6
 800bb4e:	463b      	mov	r3, r7
 800bb50:	4680      	mov	r8, r0
 800bb52:	4689      	mov	r9, r1
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7f4 fd56 	bl	8000608 <__aeabi_dmul>
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4604      	mov	r4, r0
 800bb60:	460d      	mov	r5, r1
 800bb62:	4602      	mov	r2, r0
 800bb64:	4649      	mov	r1, r9
 800bb66:	4640      	mov	r0, r8
 800bb68:	f7f4 fb98 	bl	800029c <__adddf3>
 800bb6c:	4b1d      	ldr	r3, [pc, #116]	; (800bbe4 <__ieee754_pow+0x3dc>)
 800bb6e:	4299      	cmp	r1, r3
 800bb70:	ec45 4b19 	vmov	d9, r4, r5
 800bb74:	4606      	mov	r6, r0
 800bb76:	460f      	mov	r7, r1
 800bb78:	468b      	mov	fp, r1
 800bb7a:	f340 82fe 	ble.w	800c17a <__ieee754_pow+0x972>
 800bb7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bb82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bb86:	4303      	orrs	r3, r0
 800bb88:	f000 81f0 	beq.w	800bf6c <__ieee754_pow+0x764>
 800bb8c:	a310      	add	r3, pc, #64	; (adr r3, 800bbd0 <__ieee754_pow+0x3c8>)
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	ec51 0b18 	vmov	r0, r1, d8
 800bb96:	f7f4 fd37 	bl	8000608 <__aeabi_dmul>
 800bb9a:	a30d      	add	r3, pc, #52	; (adr r3, 800bbd0 <__ieee754_pow+0x3c8>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	e6cb      	b.n	800b93a <__ieee754_pow+0x132>
 800bba2:	bf00      	nop
 800bba4:	f3af 8000 	nop.w
 800bba8:	60000000 	.word	0x60000000
 800bbac:	3ff71547 	.word	0x3ff71547
 800bbb0:	f85ddf44 	.word	0xf85ddf44
 800bbb4:	3e54ae0b 	.word	0x3e54ae0b
 800bbb8:	55555555 	.word	0x55555555
 800bbbc:	3fd55555 	.word	0x3fd55555
 800bbc0:	652b82fe 	.word	0x652b82fe
 800bbc4:	3ff71547 	.word	0x3ff71547
 800bbc8:	00000000 	.word	0x00000000
 800bbcc:	bff00000 	.word	0xbff00000
 800bbd0:	8800759c 	.word	0x8800759c
 800bbd4:	7e37e43c 	.word	0x7e37e43c
 800bbd8:	3ff00000 	.word	0x3ff00000
 800bbdc:	3fd00000 	.word	0x3fd00000
 800bbe0:	3fe00000 	.word	0x3fe00000
 800bbe4:	408fffff 	.word	0x408fffff
 800bbe8:	4bd7      	ldr	r3, [pc, #860]	; (800bf48 <__ieee754_pow+0x740>)
 800bbea:	ea03 0309 	and.w	r3, r3, r9
 800bbee:	2200      	movs	r2, #0
 800bbf0:	b92b      	cbnz	r3, 800bbfe <__ieee754_pow+0x3f6>
 800bbf2:	4bd6      	ldr	r3, [pc, #856]	; (800bf4c <__ieee754_pow+0x744>)
 800bbf4:	f7f4 fd08 	bl	8000608 <__aeabi_dmul>
 800bbf8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	1523      	asrs	r3, r4, #20
 800bc00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc04:	4413      	add	r3, r2
 800bc06:	9309      	str	r3, [sp, #36]	; 0x24
 800bc08:	4bd1      	ldr	r3, [pc, #836]	; (800bf50 <__ieee754_pow+0x748>)
 800bc0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bc12:	429c      	cmp	r4, r3
 800bc14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc18:	dd08      	ble.n	800bc2c <__ieee754_pow+0x424>
 800bc1a:	4bce      	ldr	r3, [pc, #824]	; (800bf54 <__ieee754_pow+0x74c>)
 800bc1c:	429c      	cmp	r4, r3
 800bc1e:	f340 8163 	ble.w	800bee8 <__ieee754_pow+0x6e0>
 800bc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc24:	3301      	adds	r3, #1
 800bc26:	9309      	str	r3, [sp, #36]	; 0x24
 800bc28:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bc2c:	2400      	movs	r4, #0
 800bc2e:	00e3      	lsls	r3, r4, #3
 800bc30:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc32:	4bc9      	ldr	r3, [pc, #804]	; (800bf58 <__ieee754_pow+0x750>)
 800bc34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc38:	ed93 7b00 	vldr	d7, [r3]
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	ec53 2b17 	vmov	r2, r3, d7
 800bc42:	eeb0 8a47 	vmov.f32	s16, s14
 800bc46:	eef0 8a67 	vmov.f32	s17, s15
 800bc4a:	4682      	mov	sl, r0
 800bc4c:	f7f4 fb24 	bl	8000298 <__aeabi_dsub>
 800bc50:	4652      	mov	r2, sl
 800bc52:	4606      	mov	r6, r0
 800bc54:	460f      	mov	r7, r1
 800bc56:	462b      	mov	r3, r5
 800bc58:	ec51 0b18 	vmov	r0, r1, d8
 800bc5c:	f7f4 fb1e 	bl	800029c <__adddf3>
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	2000      	movs	r0, #0
 800bc66:	49bd      	ldr	r1, [pc, #756]	; (800bf5c <__ieee754_pow+0x754>)
 800bc68:	f7f4 fdf8 	bl	800085c <__aeabi_ddiv>
 800bc6c:	ec41 0b19 	vmov	d9, r0, r1
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4630      	mov	r0, r6
 800bc76:	4639      	mov	r1, r7
 800bc78:	f7f4 fcc6 	bl	8000608 <__aeabi_dmul>
 800bc7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc88:	2300      	movs	r3, #0
 800bc8a:	9304      	str	r3, [sp, #16]
 800bc8c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bc90:	46ab      	mov	fp, r5
 800bc92:	106d      	asrs	r5, r5, #1
 800bc94:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bc98:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bc9c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bca0:	2200      	movs	r2, #0
 800bca2:	4640      	mov	r0, r8
 800bca4:	4649      	mov	r1, r9
 800bca6:	4614      	mov	r4, r2
 800bca8:	461d      	mov	r5, r3
 800bcaa:	f7f4 fcad 	bl	8000608 <__aeabi_dmul>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	4630      	mov	r0, r6
 800bcb4:	4639      	mov	r1, r7
 800bcb6:	f7f4 faef 	bl	8000298 <__aeabi_dsub>
 800bcba:	ec53 2b18 	vmov	r2, r3, d8
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	460f      	mov	r7, r1
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	f7f4 fae7 	bl	8000298 <__aeabi_dsub>
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	4650      	mov	r0, sl
 800bcd0:	4659      	mov	r1, fp
 800bcd2:	f7f4 fae1 	bl	8000298 <__aeabi_dsub>
 800bcd6:	4642      	mov	r2, r8
 800bcd8:	464b      	mov	r3, r9
 800bcda:	f7f4 fc95 	bl	8000608 <__aeabi_dmul>
 800bcde:	4602      	mov	r2, r0
 800bce0:	460b      	mov	r3, r1
 800bce2:	4630      	mov	r0, r6
 800bce4:	4639      	mov	r1, r7
 800bce6:	f7f4 fad7 	bl	8000298 <__aeabi_dsub>
 800bcea:	ec53 2b19 	vmov	r2, r3, d9
 800bcee:	f7f4 fc8b 	bl	8000608 <__aeabi_dmul>
 800bcf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcf6:	ec41 0b18 	vmov	d8, r0, r1
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	f7f4 fc83 	bl	8000608 <__aeabi_dmul>
 800bd02:	a37d      	add	r3, pc, #500	; (adr r3, 800bef8 <__ieee754_pow+0x6f0>)
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	4604      	mov	r4, r0
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	f7f4 fc7c 	bl	8000608 <__aeabi_dmul>
 800bd10:	a37b      	add	r3, pc, #492	; (adr r3, 800bf00 <__ieee754_pow+0x6f8>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	f7f4 fac1 	bl	800029c <__adddf3>
 800bd1a:	4622      	mov	r2, r4
 800bd1c:	462b      	mov	r3, r5
 800bd1e:	f7f4 fc73 	bl	8000608 <__aeabi_dmul>
 800bd22:	a379      	add	r3, pc, #484	; (adr r3, 800bf08 <__ieee754_pow+0x700>)
 800bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd28:	f7f4 fab8 	bl	800029c <__adddf3>
 800bd2c:	4622      	mov	r2, r4
 800bd2e:	462b      	mov	r3, r5
 800bd30:	f7f4 fc6a 	bl	8000608 <__aeabi_dmul>
 800bd34:	a376      	add	r3, pc, #472	; (adr r3, 800bf10 <__ieee754_pow+0x708>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f7f4 faaf 	bl	800029c <__adddf3>
 800bd3e:	4622      	mov	r2, r4
 800bd40:	462b      	mov	r3, r5
 800bd42:	f7f4 fc61 	bl	8000608 <__aeabi_dmul>
 800bd46:	a374      	add	r3, pc, #464	; (adr r3, 800bf18 <__ieee754_pow+0x710>)
 800bd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4c:	f7f4 faa6 	bl	800029c <__adddf3>
 800bd50:	4622      	mov	r2, r4
 800bd52:	462b      	mov	r3, r5
 800bd54:	f7f4 fc58 	bl	8000608 <__aeabi_dmul>
 800bd58:	a371      	add	r3, pc, #452	; (adr r3, 800bf20 <__ieee754_pow+0x718>)
 800bd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5e:	f7f4 fa9d 	bl	800029c <__adddf3>
 800bd62:	4622      	mov	r2, r4
 800bd64:	4606      	mov	r6, r0
 800bd66:	460f      	mov	r7, r1
 800bd68:	462b      	mov	r3, r5
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	f7f4 fc4b 	bl	8000608 <__aeabi_dmul>
 800bd72:	4602      	mov	r2, r0
 800bd74:	460b      	mov	r3, r1
 800bd76:	4630      	mov	r0, r6
 800bd78:	4639      	mov	r1, r7
 800bd7a:	f7f4 fc45 	bl	8000608 <__aeabi_dmul>
 800bd7e:	4642      	mov	r2, r8
 800bd80:	4604      	mov	r4, r0
 800bd82:	460d      	mov	r5, r1
 800bd84:	464b      	mov	r3, r9
 800bd86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd8a:	f7f4 fa87 	bl	800029c <__adddf3>
 800bd8e:	ec53 2b18 	vmov	r2, r3, d8
 800bd92:	f7f4 fc39 	bl	8000608 <__aeabi_dmul>
 800bd96:	4622      	mov	r2, r4
 800bd98:	462b      	mov	r3, r5
 800bd9a:	f7f4 fa7f 	bl	800029c <__adddf3>
 800bd9e:	4642      	mov	r2, r8
 800bda0:	4682      	mov	sl, r0
 800bda2:	468b      	mov	fp, r1
 800bda4:	464b      	mov	r3, r9
 800bda6:	4640      	mov	r0, r8
 800bda8:	4649      	mov	r1, r9
 800bdaa:	f7f4 fc2d 	bl	8000608 <__aeabi_dmul>
 800bdae:	4b6c      	ldr	r3, [pc, #432]	; (800bf60 <__ieee754_pow+0x758>)
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	4606      	mov	r6, r0
 800bdb4:	460f      	mov	r7, r1
 800bdb6:	f7f4 fa71 	bl	800029c <__adddf3>
 800bdba:	4652      	mov	r2, sl
 800bdbc:	465b      	mov	r3, fp
 800bdbe:	f7f4 fa6d 	bl	800029c <__adddf3>
 800bdc2:	9c04      	ldr	r4, [sp, #16]
 800bdc4:	460d      	mov	r5, r1
 800bdc6:	4622      	mov	r2, r4
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4640      	mov	r0, r8
 800bdcc:	4649      	mov	r1, r9
 800bdce:	f7f4 fc1b 	bl	8000608 <__aeabi_dmul>
 800bdd2:	4b63      	ldr	r3, [pc, #396]	; (800bf60 <__ieee754_pow+0x758>)
 800bdd4:	4680      	mov	r8, r0
 800bdd6:	4689      	mov	r9, r1
 800bdd8:	2200      	movs	r2, #0
 800bdda:	4620      	mov	r0, r4
 800bddc:	4629      	mov	r1, r5
 800bdde:	f7f4 fa5b 	bl	8000298 <__aeabi_dsub>
 800bde2:	4632      	mov	r2, r6
 800bde4:	463b      	mov	r3, r7
 800bde6:	f7f4 fa57 	bl	8000298 <__aeabi_dsub>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4650      	mov	r0, sl
 800bdf0:	4659      	mov	r1, fp
 800bdf2:	f7f4 fa51 	bl	8000298 <__aeabi_dsub>
 800bdf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdfa:	f7f4 fc05 	bl	8000608 <__aeabi_dmul>
 800bdfe:	4622      	mov	r2, r4
 800be00:	4606      	mov	r6, r0
 800be02:	460f      	mov	r7, r1
 800be04:	462b      	mov	r3, r5
 800be06:	ec51 0b18 	vmov	r0, r1, d8
 800be0a:	f7f4 fbfd 	bl	8000608 <__aeabi_dmul>
 800be0e:	4602      	mov	r2, r0
 800be10:	460b      	mov	r3, r1
 800be12:	4630      	mov	r0, r6
 800be14:	4639      	mov	r1, r7
 800be16:	f7f4 fa41 	bl	800029c <__adddf3>
 800be1a:	4606      	mov	r6, r0
 800be1c:	460f      	mov	r7, r1
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	4640      	mov	r0, r8
 800be24:	4649      	mov	r1, r9
 800be26:	f7f4 fa39 	bl	800029c <__adddf3>
 800be2a:	9c04      	ldr	r4, [sp, #16]
 800be2c:	a33e      	add	r3, pc, #248	; (adr r3, 800bf28 <__ieee754_pow+0x720>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	4620      	mov	r0, r4
 800be34:	460d      	mov	r5, r1
 800be36:	f7f4 fbe7 	bl	8000608 <__aeabi_dmul>
 800be3a:	4642      	mov	r2, r8
 800be3c:	ec41 0b18 	vmov	d8, r0, r1
 800be40:	464b      	mov	r3, r9
 800be42:	4620      	mov	r0, r4
 800be44:	4629      	mov	r1, r5
 800be46:	f7f4 fa27 	bl	8000298 <__aeabi_dsub>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4630      	mov	r0, r6
 800be50:	4639      	mov	r1, r7
 800be52:	f7f4 fa21 	bl	8000298 <__aeabi_dsub>
 800be56:	a336      	add	r3, pc, #216	; (adr r3, 800bf30 <__ieee754_pow+0x728>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	f7f4 fbd4 	bl	8000608 <__aeabi_dmul>
 800be60:	a335      	add	r3, pc, #212	; (adr r3, 800bf38 <__ieee754_pow+0x730>)
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	4606      	mov	r6, r0
 800be68:	460f      	mov	r7, r1
 800be6a:	4620      	mov	r0, r4
 800be6c:	4629      	mov	r1, r5
 800be6e:	f7f4 fbcb 	bl	8000608 <__aeabi_dmul>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4630      	mov	r0, r6
 800be78:	4639      	mov	r1, r7
 800be7a:	f7f4 fa0f 	bl	800029c <__adddf3>
 800be7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be80:	4b38      	ldr	r3, [pc, #224]	; (800bf64 <__ieee754_pow+0x75c>)
 800be82:	4413      	add	r3, r2
 800be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be88:	f7f4 fa08 	bl	800029c <__adddf3>
 800be8c:	4682      	mov	sl, r0
 800be8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be90:	468b      	mov	fp, r1
 800be92:	f7f4 fb4f 	bl	8000534 <__aeabi_i2d>
 800be96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be98:	4b33      	ldr	r3, [pc, #204]	; (800bf68 <__ieee754_pow+0x760>)
 800be9a:	4413      	add	r3, r2
 800be9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bea0:	4606      	mov	r6, r0
 800bea2:	460f      	mov	r7, r1
 800bea4:	4652      	mov	r2, sl
 800bea6:	465b      	mov	r3, fp
 800bea8:	ec51 0b18 	vmov	r0, r1, d8
 800beac:	f7f4 f9f6 	bl	800029c <__adddf3>
 800beb0:	4642      	mov	r2, r8
 800beb2:	464b      	mov	r3, r9
 800beb4:	f7f4 f9f2 	bl	800029c <__adddf3>
 800beb8:	4632      	mov	r2, r6
 800beba:	463b      	mov	r3, r7
 800bebc:	f7f4 f9ee 	bl	800029c <__adddf3>
 800bec0:	9c04      	ldr	r4, [sp, #16]
 800bec2:	4632      	mov	r2, r6
 800bec4:	463b      	mov	r3, r7
 800bec6:	4620      	mov	r0, r4
 800bec8:	460d      	mov	r5, r1
 800beca:	f7f4 f9e5 	bl	8000298 <__aeabi_dsub>
 800bece:	4642      	mov	r2, r8
 800bed0:	464b      	mov	r3, r9
 800bed2:	f7f4 f9e1 	bl	8000298 <__aeabi_dsub>
 800bed6:	ec53 2b18 	vmov	r2, r3, d8
 800beda:	f7f4 f9dd 	bl	8000298 <__aeabi_dsub>
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	4650      	mov	r0, sl
 800bee4:	4659      	mov	r1, fp
 800bee6:	e606      	b.n	800baf6 <__ieee754_pow+0x2ee>
 800bee8:	2401      	movs	r4, #1
 800beea:	e6a0      	b.n	800bc2e <__ieee754_pow+0x426>
 800beec:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bf40 <__ieee754_pow+0x738>
 800bef0:	e60d      	b.n	800bb0e <__ieee754_pow+0x306>
 800bef2:	bf00      	nop
 800bef4:	f3af 8000 	nop.w
 800bef8:	4a454eef 	.word	0x4a454eef
 800befc:	3fca7e28 	.word	0x3fca7e28
 800bf00:	93c9db65 	.word	0x93c9db65
 800bf04:	3fcd864a 	.word	0x3fcd864a
 800bf08:	a91d4101 	.word	0xa91d4101
 800bf0c:	3fd17460 	.word	0x3fd17460
 800bf10:	518f264d 	.word	0x518f264d
 800bf14:	3fd55555 	.word	0x3fd55555
 800bf18:	db6fabff 	.word	0xdb6fabff
 800bf1c:	3fdb6db6 	.word	0x3fdb6db6
 800bf20:	33333303 	.word	0x33333303
 800bf24:	3fe33333 	.word	0x3fe33333
 800bf28:	e0000000 	.word	0xe0000000
 800bf2c:	3feec709 	.word	0x3feec709
 800bf30:	dc3a03fd 	.word	0xdc3a03fd
 800bf34:	3feec709 	.word	0x3feec709
 800bf38:	145b01f5 	.word	0x145b01f5
 800bf3c:	be3e2fe0 	.word	0xbe3e2fe0
 800bf40:	00000000 	.word	0x00000000
 800bf44:	3ff00000 	.word	0x3ff00000
 800bf48:	7ff00000 	.word	0x7ff00000
 800bf4c:	43400000 	.word	0x43400000
 800bf50:	0003988e 	.word	0x0003988e
 800bf54:	000bb679 	.word	0x000bb679
 800bf58:	0800cd28 	.word	0x0800cd28
 800bf5c:	3ff00000 	.word	0x3ff00000
 800bf60:	40080000 	.word	0x40080000
 800bf64:	0800cd48 	.word	0x0800cd48
 800bf68:	0800cd38 	.word	0x0800cd38
 800bf6c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c244 <__ieee754_pow+0xa3c>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	4640      	mov	r0, r8
 800bf74:	4649      	mov	r1, r9
 800bf76:	f7f4 f991 	bl	800029c <__adddf3>
 800bf7a:	4622      	mov	r2, r4
 800bf7c:	ec41 0b1a 	vmov	d10, r0, r1
 800bf80:	462b      	mov	r3, r5
 800bf82:	4630      	mov	r0, r6
 800bf84:	4639      	mov	r1, r7
 800bf86:	f7f4 f987 	bl	8000298 <__aeabi_dsub>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	ec51 0b1a 	vmov	r0, r1, d10
 800bf92:	f7f4 fdc9 	bl	8000b28 <__aeabi_dcmpgt>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	f47f adf8 	bne.w	800bb8c <__ieee754_pow+0x384>
 800bf9c:	4aa4      	ldr	r2, [pc, #656]	; (800c230 <__ieee754_pow+0xa28>)
 800bf9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	f340 810b 	ble.w	800c1be <__ieee754_pow+0x9b6>
 800bfa8:	151b      	asrs	r3, r3, #20
 800bfaa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bfae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bfb2:	fa4a f303 	asr.w	r3, sl, r3
 800bfb6:	445b      	add	r3, fp
 800bfb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bfbc:	4e9d      	ldr	r6, [pc, #628]	; (800c234 <__ieee754_pow+0xa2c>)
 800bfbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bfc2:	4116      	asrs	r6, r2
 800bfc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bfc8:	2000      	movs	r0, #0
 800bfca:	ea23 0106 	bic.w	r1, r3, r6
 800bfce:	f1c2 0214 	rsb	r2, r2, #20
 800bfd2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bfd6:	fa4a fa02 	asr.w	sl, sl, r2
 800bfda:	f1bb 0f00 	cmp.w	fp, #0
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	bfb8      	it	lt
 800bfe8:	f1ca 0a00 	rsblt	sl, sl, #0
 800bfec:	f7f4 f954 	bl	8000298 <__aeabi_dsub>
 800bff0:	ec41 0b19 	vmov	d9, r0, r1
 800bff4:	4642      	mov	r2, r8
 800bff6:	464b      	mov	r3, r9
 800bff8:	ec51 0b19 	vmov	r0, r1, d9
 800bffc:	f7f4 f94e 	bl	800029c <__adddf3>
 800c000:	2400      	movs	r4, #0
 800c002:	a379      	add	r3, pc, #484	; (adr r3, 800c1e8 <__ieee754_pow+0x9e0>)
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	4620      	mov	r0, r4
 800c00a:	460d      	mov	r5, r1
 800c00c:	f7f4 fafc 	bl	8000608 <__aeabi_dmul>
 800c010:	ec53 2b19 	vmov	r2, r3, d9
 800c014:	4606      	mov	r6, r0
 800c016:	460f      	mov	r7, r1
 800c018:	4620      	mov	r0, r4
 800c01a:	4629      	mov	r1, r5
 800c01c:	f7f4 f93c 	bl	8000298 <__aeabi_dsub>
 800c020:	4602      	mov	r2, r0
 800c022:	460b      	mov	r3, r1
 800c024:	4640      	mov	r0, r8
 800c026:	4649      	mov	r1, r9
 800c028:	f7f4 f936 	bl	8000298 <__aeabi_dsub>
 800c02c:	a370      	add	r3, pc, #448	; (adr r3, 800c1f0 <__ieee754_pow+0x9e8>)
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f7f4 fae9 	bl	8000608 <__aeabi_dmul>
 800c036:	a370      	add	r3, pc, #448	; (adr r3, 800c1f8 <__ieee754_pow+0x9f0>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	4680      	mov	r8, r0
 800c03e:	4689      	mov	r9, r1
 800c040:	4620      	mov	r0, r4
 800c042:	4629      	mov	r1, r5
 800c044:	f7f4 fae0 	bl	8000608 <__aeabi_dmul>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	4640      	mov	r0, r8
 800c04e:	4649      	mov	r1, r9
 800c050:	f7f4 f924 	bl	800029c <__adddf3>
 800c054:	4604      	mov	r4, r0
 800c056:	460d      	mov	r5, r1
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	4630      	mov	r0, r6
 800c05e:	4639      	mov	r1, r7
 800c060:	f7f4 f91c 	bl	800029c <__adddf3>
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	4680      	mov	r8, r0
 800c06a:	4689      	mov	r9, r1
 800c06c:	f7f4 f914 	bl	8000298 <__aeabi_dsub>
 800c070:	4602      	mov	r2, r0
 800c072:	460b      	mov	r3, r1
 800c074:	4620      	mov	r0, r4
 800c076:	4629      	mov	r1, r5
 800c078:	f7f4 f90e 	bl	8000298 <__aeabi_dsub>
 800c07c:	4642      	mov	r2, r8
 800c07e:	4606      	mov	r6, r0
 800c080:	460f      	mov	r7, r1
 800c082:	464b      	mov	r3, r9
 800c084:	4640      	mov	r0, r8
 800c086:	4649      	mov	r1, r9
 800c088:	f7f4 fabe 	bl	8000608 <__aeabi_dmul>
 800c08c:	a35c      	add	r3, pc, #368	; (adr r3, 800c200 <__ieee754_pow+0x9f8>)
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	4604      	mov	r4, r0
 800c094:	460d      	mov	r5, r1
 800c096:	f7f4 fab7 	bl	8000608 <__aeabi_dmul>
 800c09a:	a35b      	add	r3, pc, #364	; (adr r3, 800c208 <__ieee754_pow+0xa00>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	f7f4 f8fa 	bl	8000298 <__aeabi_dsub>
 800c0a4:	4622      	mov	r2, r4
 800c0a6:	462b      	mov	r3, r5
 800c0a8:	f7f4 faae 	bl	8000608 <__aeabi_dmul>
 800c0ac:	a358      	add	r3, pc, #352	; (adr r3, 800c210 <__ieee754_pow+0xa08>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	f7f4 f8f3 	bl	800029c <__adddf3>
 800c0b6:	4622      	mov	r2, r4
 800c0b8:	462b      	mov	r3, r5
 800c0ba:	f7f4 faa5 	bl	8000608 <__aeabi_dmul>
 800c0be:	a356      	add	r3, pc, #344	; (adr r3, 800c218 <__ieee754_pow+0xa10>)
 800c0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c4:	f7f4 f8e8 	bl	8000298 <__aeabi_dsub>
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	462b      	mov	r3, r5
 800c0cc:	f7f4 fa9c 	bl	8000608 <__aeabi_dmul>
 800c0d0:	a353      	add	r3, pc, #332	; (adr r3, 800c220 <__ieee754_pow+0xa18>)
 800c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d6:	f7f4 f8e1 	bl	800029c <__adddf3>
 800c0da:	4622      	mov	r2, r4
 800c0dc:	462b      	mov	r3, r5
 800c0de:	f7f4 fa93 	bl	8000608 <__aeabi_dmul>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	4640      	mov	r0, r8
 800c0e8:	4649      	mov	r1, r9
 800c0ea:	f7f4 f8d5 	bl	8000298 <__aeabi_dsub>
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	460d      	mov	r5, r1
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4640      	mov	r0, r8
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	f7f4 fa85 	bl	8000608 <__aeabi_dmul>
 800c0fe:	2200      	movs	r2, #0
 800c100:	ec41 0b19 	vmov	d9, r0, r1
 800c104:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c108:	4620      	mov	r0, r4
 800c10a:	4629      	mov	r1, r5
 800c10c:	f7f4 f8c4 	bl	8000298 <__aeabi_dsub>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	ec51 0b19 	vmov	r0, r1, d9
 800c118:	f7f4 fba0 	bl	800085c <__aeabi_ddiv>
 800c11c:	4632      	mov	r2, r6
 800c11e:	4604      	mov	r4, r0
 800c120:	460d      	mov	r5, r1
 800c122:	463b      	mov	r3, r7
 800c124:	4640      	mov	r0, r8
 800c126:	4649      	mov	r1, r9
 800c128:	f7f4 fa6e 	bl	8000608 <__aeabi_dmul>
 800c12c:	4632      	mov	r2, r6
 800c12e:	463b      	mov	r3, r7
 800c130:	f7f4 f8b4 	bl	800029c <__adddf3>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	4620      	mov	r0, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	f7f4 f8ac 	bl	8000298 <__aeabi_dsub>
 800c140:	4642      	mov	r2, r8
 800c142:	464b      	mov	r3, r9
 800c144:	f7f4 f8a8 	bl	8000298 <__aeabi_dsub>
 800c148:	460b      	mov	r3, r1
 800c14a:	4602      	mov	r2, r0
 800c14c:	493a      	ldr	r1, [pc, #232]	; (800c238 <__ieee754_pow+0xa30>)
 800c14e:	2000      	movs	r0, #0
 800c150:	f7f4 f8a2 	bl	8000298 <__aeabi_dsub>
 800c154:	e9cd 0100 	strd	r0, r1, [sp]
 800c158:	9b01      	ldr	r3, [sp, #4]
 800c15a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c15e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c162:	da2f      	bge.n	800c1c4 <__ieee754_pow+0x9bc>
 800c164:	4650      	mov	r0, sl
 800c166:	ed9d 0b00 	vldr	d0, [sp]
 800c16a:	f000 f9cd 	bl	800c508 <scalbn>
 800c16e:	ec51 0b10 	vmov	r0, r1, d0
 800c172:	ec53 2b18 	vmov	r2, r3, d8
 800c176:	f7ff bbe0 	b.w	800b93a <__ieee754_pow+0x132>
 800c17a:	4b30      	ldr	r3, [pc, #192]	; (800c23c <__ieee754_pow+0xa34>)
 800c17c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c180:	429e      	cmp	r6, r3
 800c182:	f77f af0b 	ble.w	800bf9c <__ieee754_pow+0x794>
 800c186:	4b2e      	ldr	r3, [pc, #184]	; (800c240 <__ieee754_pow+0xa38>)
 800c188:	440b      	add	r3, r1
 800c18a:	4303      	orrs	r3, r0
 800c18c:	d00b      	beq.n	800c1a6 <__ieee754_pow+0x99e>
 800c18e:	a326      	add	r3, pc, #152	; (adr r3, 800c228 <__ieee754_pow+0xa20>)
 800c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c194:	ec51 0b18 	vmov	r0, r1, d8
 800c198:	f7f4 fa36 	bl	8000608 <__aeabi_dmul>
 800c19c:	a322      	add	r3, pc, #136	; (adr r3, 800c228 <__ieee754_pow+0xa20>)
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	f7ff bbca 	b.w	800b93a <__ieee754_pow+0x132>
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	462b      	mov	r3, r5
 800c1aa:	f7f4 f875 	bl	8000298 <__aeabi_dsub>
 800c1ae:	4642      	mov	r2, r8
 800c1b0:	464b      	mov	r3, r9
 800c1b2:	f7f4 fcaf 	bl	8000b14 <__aeabi_dcmpge>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	f43f aef0 	beq.w	800bf9c <__ieee754_pow+0x794>
 800c1bc:	e7e7      	b.n	800c18e <__ieee754_pow+0x986>
 800c1be:	f04f 0a00 	mov.w	sl, #0
 800c1c2:	e717      	b.n	800bff4 <__ieee754_pow+0x7ec>
 800c1c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	e7d2      	b.n	800c172 <__ieee754_pow+0x96a>
 800c1cc:	491a      	ldr	r1, [pc, #104]	; (800c238 <__ieee754_pow+0xa30>)
 800c1ce:	2000      	movs	r0, #0
 800c1d0:	f7ff bb9e 	b.w	800b910 <__ieee754_pow+0x108>
 800c1d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1d8:	f7ff bb9a 	b.w	800b910 <__ieee754_pow+0x108>
 800c1dc:	9000      	str	r0, [sp, #0]
 800c1de:	f7ff bb76 	b.w	800b8ce <__ieee754_pow+0xc6>
 800c1e2:	2100      	movs	r1, #0
 800c1e4:	f7ff bb60 	b.w	800b8a8 <__ieee754_pow+0xa0>
 800c1e8:	00000000 	.word	0x00000000
 800c1ec:	3fe62e43 	.word	0x3fe62e43
 800c1f0:	fefa39ef 	.word	0xfefa39ef
 800c1f4:	3fe62e42 	.word	0x3fe62e42
 800c1f8:	0ca86c39 	.word	0x0ca86c39
 800c1fc:	be205c61 	.word	0xbe205c61
 800c200:	72bea4d0 	.word	0x72bea4d0
 800c204:	3e663769 	.word	0x3e663769
 800c208:	c5d26bf1 	.word	0xc5d26bf1
 800c20c:	3ebbbd41 	.word	0x3ebbbd41
 800c210:	af25de2c 	.word	0xaf25de2c
 800c214:	3f11566a 	.word	0x3f11566a
 800c218:	16bebd93 	.word	0x16bebd93
 800c21c:	3f66c16c 	.word	0x3f66c16c
 800c220:	5555553e 	.word	0x5555553e
 800c224:	3fc55555 	.word	0x3fc55555
 800c228:	c2f8f359 	.word	0xc2f8f359
 800c22c:	01a56e1f 	.word	0x01a56e1f
 800c230:	3fe00000 	.word	0x3fe00000
 800c234:	000fffff 	.word	0x000fffff
 800c238:	3ff00000 	.word	0x3ff00000
 800c23c:	4090cbff 	.word	0x4090cbff
 800c240:	3f6f3400 	.word	0x3f6f3400
 800c244:	652b82fe 	.word	0x652b82fe
 800c248:	3c971547 	.word	0x3c971547

0800c24c <__ieee754_sqrt>:
 800c24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c250:	ec55 4b10 	vmov	r4, r5, d0
 800c254:	4e56      	ldr	r6, [pc, #344]	; (800c3b0 <__ieee754_sqrt+0x164>)
 800c256:	43ae      	bics	r6, r5
 800c258:	ee10 0a10 	vmov	r0, s0
 800c25c:	ee10 3a10 	vmov	r3, s0
 800c260:	4629      	mov	r1, r5
 800c262:	462a      	mov	r2, r5
 800c264:	d110      	bne.n	800c288 <__ieee754_sqrt+0x3c>
 800c266:	ee10 2a10 	vmov	r2, s0
 800c26a:	462b      	mov	r3, r5
 800c26c:	f7f4 f9cc 	bl	8000608 <__aeabi_dmul>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4620      	mov	r0, r4
 800c276:	4629      	mov	r1, r5
 800c278:	f7f4 f810 	bl	800029c <__adddf3>
 800c27c:	4604      	mov	r4, r0
 800c27e:	460d      	mov	r5, r1
 800c280:	ec45 4b10 	vmov	d0, r4, r5
 800c284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c288:	2d00      	cmp	r5, #0
 800c28a:	dc10      	bgt.n	800c2ae <__ieee754_sqrt+0x62>
 800c28c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c290:	4330      	orrs	r0, r6
 800c292:	d0f5      	beq.n	800c280 <__ieee754_sqrt+0x34>
 800c294:	b15d      	cbz	r5, 800c2ae <__ieee754_sqrt+0x62>
 800c296:	ee10 2a10 	vmov	r2, s0
 800c29a:	462b      	mov	r3, r5
 800c29c:	ee10 0a10 	vmov	r0, s0
 800c2a0:	f7f3 fffa 	bl	8000298 <__aeabi_dsub>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	f7f4 fad8 	bl	800085c <__aeabi_ddiv>
 800c2ac:	e7e6      	b.n	800c27c <__ieee754_sqrt+0x30>
 800c2ae:	1509      	asrs	r1, r1, #20
 800c2b0:	d076      	beq.n	800c3a0 <__ieee754_sqrt+0x154>
 800c2b2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c2b6:	07ce      	lsls	r6, r1, #31
 800c2b8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c2bc:	bf5e      	ittt	pl
 800c2be:	0fda      	lsrpl	r2, r3, #31
 800c2c0:	005b      	lslpl	r3, r3, #1
 800c2c2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c2c6:	0fda      	lsrs	r2, r3, #31
 800c2c8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c2cc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	106d      	asrs	r5, r5, #1
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	f04f 0e16 	mov.w	lr, #22
 800c2da:	4684      	mov	ip, r0
 800c2dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2e0:	eb0c 0401 	add.w	r4, ip, r1
 800c2e4:	4294      	cmp	r4, r2
 800c2e6:	bfde      	ittt	le
 800c2e8:	1b12      	suble	r2, r2, r4
 800c2ea:	eb04 0c01 	addle.w	ip, r4, r1
 800c2ee:	1840      	addle	r0, r0, r1
 800c2f0:	0052      	lsls	r2, r2, #1
 800c2f2:	f1be 0e01 	subs.w	lr, lr, #1
 800c2f6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c2fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c2fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c302:	d1ed      	bne.n	800c2e0 <__ieee754_sqrt+0x94>
 800c304:	4671      	mov	r1, lr
 800c306:	2720      	movs	r7, #32
 800c308:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c30c:	4562      	cmp	r2, ip
 800c30e:	eb04 060e 	add.w	r6, r4, lr
 800c312:	dc02      	bgt.n	800c31a <__ieee754_sqrt+0xce>
 800c314:	d113      	bne.n	800c33e <__ieee754_sqrt+0xf2>
 800c316:	429e      	cmp	r6, r3
 800c318:	d811      	bhi.n	800c33e <__ieee754_sqrt+0xf2>
 800c31a:	2e00      	cmp	r6, #0
 800c31c:	eb06 0e04 	add.w	lr, r6, r4
 800c320:	da43      	bge.n	800c3aa <__ieee754_sqrt+0x15e>
 800c322:	f1be 0f00 	cmp.w	lr, #0
 800c326:	db40      	blt.n	800c3aa <__ieee754_sqrt+0x15e>
 800c328:	f10c 0801 	add.w	r8, ip, #1
 800c32c:	eba2 020c 	sub.w	r2, r2, ip
 800c330:	429e      	cmp	r6, r3
 800c332:	bf88      	it	hi
 800c334:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c338:	1b9b      	subs	r3, r3, r6
 800c33a:	4421      	add	r1, r4
 800c33c:	46c4      	mov	ip, r8
 800c33e:	0052      	lsls	r2, r2, #1
 800c340:	3f01      	subs	r7, #1
 800c342:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c346:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c34a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c34e:	d1dd      	bne.n	800c30c <__ieee754_sqrt+0xc0>
 800c350:	4313      	orrs	r3, r2
 800c352:	d006      	beq.n	800c362 <__ieee754_sqrt+0x116>
 800c354:	1c4c      	adds	r4, r1, #1
 800c356:	bf13      	iteet	ne
 800c358:	3101      	addne	r1, #1
 800c35a:	3001      	addeq	r0, #1
 800c35c:	4639      	moveq	r1, r7
 800c35e:	f021 0101 	bicne.w	r1, r1, #1
 800c362:	1043      	asrs	r3, r0, #1
 800c364:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c368:	0849      	lsrs	r1, r1, #1
 800c36a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c36e:	07c2      	lsls	r2, r0, #31
 800c370:	bf48      	it	mi
 800c372:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c376:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c37a:	460c      	mov	r4, r1
 800c37c:	463d      	mov	r5, r7
 800c37e:	e77f      	b.n	800c280 <__ieee754_sqrt+0x34>
 800c380:	0ada      	lsrs	r2, r3, #11
 800c382:	3815      	subs	r0, #21
 800c384:	055b      	lsls	r3, r3, #21
 800c386:	2a00      	cmp	r2, #0
 800c388:	d0fa      	beq.n	800c380 <__ieee754_sqrt+0x134>
 800c38a:	02d7      	lsls	r7, r2, #11
 800c38c:	d50a      	bpl.n	800c3a4 <__ieee754_sqrt+0x158>
 800c38e:	f1c1 0420 	rsb	r4, r1, #32
 800c392:	fa23 f404 	lsr.w	r4, r3, r4
 800c396:	1e4d      	subs	r5, r1, #1
 800c398:	408b      	lsls	r3, r1
 800c39a:	4322      	orrs	r2, r4
 800c39c:	1b41      	subs	r1, r0, r5
 800c39e:	e788      	b.n	800c2b2 <__ieee754_sqrt+0x66>
 800c3a0:	4608      	mov	r0, r1
 800c3a2:	e7f0      	b.n	800c386 <__ieee754_sqrt+0x13a>
 800c3a4:	0052      	lsls	r2, r2, #1
 800c3a6:	3101      	adds	r1, #1
 800c3a8:	e7ef      	b.n	800c38a <__ieee754_sqrt+0x13e>
 800c3aa:	46e0      	mov	r8, ip
 800c3ac:	e7be      	b.n	800c32c <__ieee754_sqrt+0xe0>
 800c3ae:	bf00      	nop
 800c3b0:	7ff00000 	.word	0x7ff00000

0800c3b4 <fabs>:
 800c3b4:	ec51 0b10 	vmov	r0, r1, d0
 800c3b8:	ee10 2a10 	vmov	r2, s0
 800c3bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c3c0:	ec43 2b10 	vmov	d0, r2, r3
 800c3c4:	4770      	bx	lr

0800c3c6 <finite>:
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	ed8d 0b00 	vstr	d0, [sp]
 800c3cc:	9801      	ldr	r0, [sp, #4]
 800c3ce:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c3d2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c3d6:	0fc0      	lsrs	r0, r0, #31
 800c3d8:	b002      	add	sp, #8
 800c3da:	4770      	bx	lr
 800c3dc:	0000      	movs	r0, r0
	...

0800c3e0 <nan>:
 800c3e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c3e8 <nan+0x8>
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	00000000 	.word	0x00000000
 800c3ec:	7ff80000 	.word	0x7ff80000

0800c3f0 <rint>:
 800c3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3f2:	ec51 0b10 	vmov	r0, r1, d0
 800c3f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c3fa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c3fe:	2e13      	cmp	r6, #19
 800c400:	ee10 4a10 	vmov	r4, s0
 800c404:	460b      	mov	r3, r1
 800c406:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c40a:	dc58      	bgt.n	800c4be <rint+0xce>
 800c40c:	2e00      	cmp	r6, #0
 800c40e:	da2b      	bge.n	800c468 <rint+0x78>
 800c410:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c414:	4302      	orrs	r2, r0
 800c416:	d023      	beq.n	800c460 <rint+0x70>
 800c418:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c41c:	4302      	orrs	r2, r0
 800c41e:	4254      	negs	r4, r2
 800c420:	4314      	orrs	r4, r2
 800c422:	0c4b      	lsrs	r3, r1, #17
 800c424:	0b24      	lsrs	r4, r4, #12
 800c426:	045b      	lsls	r3, r3, #17
 800c428:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c42c:	ea44 0103 	orr.w	r1, r4, r3
 800c430:	4b32      	ldr	r3, [pc, #200]	; (800c4fc <rint+0x10c>)
 800c432:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c436:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4630      	mov	r0, r6
 800c440:	4639      	mov	r1, r7
 800c442:	f7f3 ff2b 	bl	800029c <__adddf3>
 800c446:	e9cd 0100 	strd	r0, r1, [sp]
 800c44a:	463b      	mov	r3, r7
 800c44c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c450:	4632      	mov	r2, r6
 800c452:	f7f3 ff21 	bl	8000298 <__aeabi_dsub>
 800c456:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c45a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c45e:	4639      	mov	r1, r7
 800c460:	ec41 0b10 	vmov	d0, r0, r1
 800c464:	b003      	add	sp, #12
 800c466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c468:	4a25      	ldr	r2, [pc, #148]	; (800c500 <rint+0x110>)
 800c46a:	4132      	asrs	r2, r6
 800c46c:	ea01 0702 	and.w	r7, r1, r2
 800c470:	4307      	orrs	r7, r0
 800c472:	d0f5      	beq.n	800c460 <rint+0x70>
 800c474:	0851      	lsrs	r1, r2, #1
 800c476:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c47a:	4314      	orrs	r4, r2
 800c47c:	d00c      	beq.n	800c498 <rint+0xa8>
 800c47e:	ea23 0201 	bic.w	r2, r3, r1
 800c482:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c486:	2e13      	cmp	r6, #19
 800c488:	fa43 f606 	asr.w	r6, r3, r6
 800c48c:	bf0c      	ite	eq
 800c48e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c492:	2400      	movne	r4, #0
 800c494:	ea42 0306 	orr.w	r3, r2, r6
 800c498:	4918      	ldr	r1, [pc, #96]	; (800c4fc <rint+0x10c>)
 800c49a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c49e:	4622      	mov	r2, r4
 800c4a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	f7f3 fef8 	bl	800029c <__adddf3>
 800c4ac:	e9cd 0100 	strd	r0, r1, [sp]
 800c4b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4b4:	4622      	mov	r2, r4
 800c4b6:	462b      	mov	r3, r5
 800c4b8:	f7f3 feee 	bl	8000298 <__aeabi_dsub>
 800c4bc:	e7d0      	b.n	800c460 <rint+0x70>
 800c4be:	2e33      	cmp	r6, #51	; 0x33
 800c4c0:	dd07      	ble.n	800c4d2 <rint+0xe2>
 800c4c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c4c6:	d1cb      	bne.n	800c460 <rint+0x70>
 800c4c8:	ee10 2a10 	vmov	r2, s0
 800c4cc:	f7f3 fee6 	bl	800029c <__adddf3>
 800c4d0:	e7c6      	b.n	800c460 <rint+0x70>
 800c4d2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c4d6:	f04f 36ff 	mov.w	r6, #4294967295
 800c4da:	40d6      	lsrs	r6, r2
 800c4dc:	4230      	tst	r0, r6
 800c4de:	d0bf      	beq.n	800c460 <rint+0x70>
 800c4e0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800c4e4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800c4e8:	bf1f      	itttt	ne
 800c4ea:	ea24 0101 	bicne.w	r1, r4, r1
 800c4ee:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c4f2:	fa44 f202 	asrne.w	r2, r4, r2
 800c4f6:	ea41 0402 	orrne.w	r4, r1, r2
 800c4fa:	e7cd      	b.n	800c498 <rint+0xa8>
 800c4fc:	0800cd58 	.word	0x0800cd58
 800c500:	000fffff 	.word	0x000fffff
 800c504:	00000000 	.word	0x00000000

0800c508 <scalbn>:
 800c508:	b570      	push	{r4, r5, r6, lr}
 800c50a:	ec55 4b10 	vmov	r4, r5, d0
 800c50e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c512:	4606      	mov	r6, r0
 800c514:	462b      	mov	r3, r5
 800c516:	b99a      	cbnz	r2, 800c540 <scalbn+0x38>
 800c518:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c51c:	4323      	orrs	r3, r4
 800c51e:	d036      	beq.n	800c58e <scalbn+0x86>
 800c520:	4b39      	ldr	r3, [pc, #228]	; (800c608 <scalbn+0x100>)
 800c522:	4629      	mov	r1, r5
 800c524:	ee10 0a10 	vmov	r0, s0
 800c528:	2200      	movs	r2, #0
 800c52a:	f7f4 f86d 	bl	8000608 <__aeabi_dmul>
 800c52e:	4b37      	ldr	r3, [pc, #220]	; (800c60c <scalbn+0x104>)
 800c530:	429e      	cmp	r6, r3
 800c532:	4604      	mov	r4, r0
 800c534:	460d      	mov	r5, r1
 800c536:	da10      	bge.n	800c55a <scalbn+0x52>
 800c538:	a32b      	add	r3, pc, #172	; (adr r3, 800c5e8 <scalbn+0xe0>)
 800c53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53e:	e03a      	b.n	800c5b6 <scalbn+0xae>
 800c540:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c544:	428a      	cmp	r2, r1
 800c546:	d10c      	bne.n	800c562 <scalbn+0x5a>
 800c548:	ee10 2a10 	vmov	r2, s0
 800c54c:	4620      	mov	r0, r4
 800c54e:	4629      	mov	r1, r5
 800c550:	f7f3 fea4 	bl	800029c <__adddf3>
 800c554:	4604      	mov	r4, r0
 800c556:	460d      	mov	r5, r1
 800c558:	e019      	b.n	800c58e <scalbn+0x86>
 800c55a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c55e:	460b      	mov	r3, r1
 800c560:	3a36      	subs	r2, #54	; 0x36
 800c562:	4432      	add	r2, r6
 800c564:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c568:	428a      	cmp	r2, r1
 800c56a:	dd08      	ble.n	800c57e <scalbn+0x76>
 800c56c:	2d00      	cmp	r5, #0
 800c56e:	a120      	add	r1, pc, #128	; (adr r1, 800c5f0 <scalbn+0xe8>)
 800c570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c574:	da1c      	bge.n	800c5b0 <scalbn+0xa8>
 800c576:	a120      	add	r1, pc, #128	; (adr r1, 800c5f8 <scalbn+0xf0>)
 800c578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c57c:	e018      	b.n	800c5b0 <scalbn+0xa8>
 800c57e:	2a00      	cmp	r2, #0
 800c580:	dd08      	ble.n	800c594 <scalbn+0x8c>
 800c582:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c586:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c58a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c58e:	ec45 4b10 	vmov	d0, r4, r5
 800c592:	bd70      	pop	{r4, r5, r6, pc}
 800c594:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c598:	da19      	bge.n	800c5ce <scalbn+0xc6>
 800c59a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c59e:	429e      	cmp	r6, r3
 800c5a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c5a4:	dd0a      	ble.n	800c5bc <scalbn+0xb4>
 800c5a6:	a112      	add	r1, pc, #72	; (adr r1, 800c5f0 <scalbn+0xe8>)
 800c5a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e2      	bne.n	800c576 <scalbn+0x6e>
 800c5b0:	a30f      	add	r3, pc, #60	; (adr r3, 800c5f0 <scalbn+0xe8>)
 800c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b6:	f7f4 f827 	bl	8000608 <__aeabi_dmul>
 800c5ba:	e7cb      	b.n	800c554 <scalbn+0x4c>
 800c5bc:	a10a      	add	r1, pc, #40	; (adr r1, 800c5e8 <scalbn+0xe0>)
 800c5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d0b8      	beq.n	800c538 <scalbn+0x30>
 800c5c6:	a10e      	add	r1, pc, #56	; (adr r1, 800c600 <scalbn+0xf8>)
 800c5c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5cc:	e7b4      	b.n	800c538 <scalbn+0x30>
 800c5ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5d2:	3236      	adds	r2, #54	; 0x36
 800c5d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c5dc:	4620      	mov	r0, r4
 800c5de:	4b0c      	ldr	r3, [pc, #48]	; (800c610 <scalbn+0x108>)
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	e7e8      	b.n	800c5b6 <scalbn+0xae>
 800c5e4:	f3af 8000 	nop.w
 800c5e8:	c2f8f359 	.word	0xc2f8f359
 800c5ec:	01a56e1f 	.word	0x01a56e1f
 800c5f0:	8800759c 	.word	0x8800759c
 800c5f4:	7e37e43c 	.word	0x7e37e43c
 800c5f8:	8800759c 	.word	0x8800759c
 800c5fc:	fe37e43c 	.word	0xfe37e43c
 800c600:	c2f8f359 	.word	0xc2f8f359
 800c604:	81a56e1f 	.word	0x81a56e1f
 800c608:	43500000 	.word	0x43500000
 800c60c:	ffff3cb0 	.word	0xffff3cb0
 800c610:	3c900000 	.word	0x3c900000

0800c614 <_init>:
 800c614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c616:	bf00      	nop
 800c618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c61a:	bc08      	pop	{r3}
 800c61c:	469e      	mov	lr, r3
 800c61e:	4770      	bx	lr

0800c620 <_fini>:
 800c620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c622:	bf00      	nop
 800c624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c626:	bc08      	pop	{r3}
 800c628:	469e      	mov	lr, r3
 800c62a:	4770      	bx	lr
