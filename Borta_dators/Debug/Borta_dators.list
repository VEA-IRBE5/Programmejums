
Borta_dators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c80c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  0800c9b0  0800c9b0  0001c9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0d0  0800d0d0  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0d0  0800d0d0  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0d8  0800d0d8  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0d8  0800d0d8  0001d0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0dc  0800d0dc  0001d0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800d0e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf0  20000210  0800d2f0  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e00  0800d2f0  00020e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026a15  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dae  00000000  00000000  00046c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001c5ba  00000000  00000000  0004aa03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  00066fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001820  00000000  00000000  000687d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b17e  00000000  00000000  00069ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029fe1  00000000  00000000  0008516e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c122  00000000  00000000  000af14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b271  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c60  00000000  00000000  0014b2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000210 	.word	0x20000210
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c994 	.word	0x0800c994

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000214 	.word	0x20000214
 80001dc:	0800c994 	.word	0x0800c994

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <BME280_Init>:

extern struct BME280_Calib_Data_struct BME280_internal_Calib_Data;
extern struct BME280_Calib_Data_struct BME280_external_Calib_Data;

HAL_StatusTypeDef BME280_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 8000efc:	b084      	sub	sp, #16
 8000efe:	b510      	push	{r4, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	ac08      	add	r4, sp, #32
 8000f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f08:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
	HAL_StatusTypeDef status;
	uint8_t data;

	// RESET
	data = 0xB6;
 8000f0c:	23b6      	movs	r3, #182	; 0xb6
 8000f0e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_reset, 1, &data, 1, Timeout);
 8000f12:	9402      	str	r4, [sp, #8]
 8000f14:	2301      	movs	r3, #1
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f10d 0217 	add.w	r2, sp, #23
 8000f1c:	9200      	str	r2, [sp, #0]
 8000f1e:	22e0      	movs	r2, #224	; 0xe0
 8000f20:	21ec      	movs	r1, #236	; 0xec
 8000f22:	a808      	add	r0, sp, #32
 8000f24:	f004 f976 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b128      	cbz	r0, 8000f38 <BME280_Init+0x3c>

	// Temperature/Pressure measure settings
	data = 0b10001111;
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_meas, 1, &data, 1, Timeout);
	return status;
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	b006      	add	sp, #24
 8000f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr
	data = 0b10000000;
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_config, 1, &data, 1, Timeout);
 8000f3e:	9402      	str	r4, [sp, #8]
 8000f40:	2301      	movs	r3, #1
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	f10d 0217 	add.w	r2, sp, #23
 8000f48:	9200      	str	r2, [sp, #0]
 8000f4a:	22f5      	movs	r2, #245	; 0xf5
 8000f4c:	21ec      	movs	r1, #236	; 0xec
 8000f4e:	a808      	add	r0, sp, #32
 8000f50:	f004 f960 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8000f54:	4603      	mov	r3, r0
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d1e8      	bne.n	8000f2c <BME280_Init+0x30>
	data = 0b00000011;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_hum, 1, &data, 1, Timeout);
 8000f60:	9402      	str	r4, [sp, #8]
 8000f62:	2301      	movs	r3, #1
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	f10d 0217 	add.w	r2, sp, #23
 8000f6a:	9200      	str	r2, [sp, #0]
 8000f6c:	22f2      	movs	r2, #242	; 0xf2
 8000f6e:	21ec      	movs	r1, #236	; 0xec
 8000f70:	a808      	add	r0, sp, #32
 8000f72:	f004 f94f 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8000f76:	4603      	mov	r3, r0
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	d1d7      	bne.n	8000f2c <BME280_Init+0x30>
	data = 0b10001111;
 8000f7c:	238f      	movs	r3, #143	; 0x8f
 8000f7e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_meas, 1, &data, 1, Timeout);
 8000f82:	9402      	str	r4, [sp, #8]
 8000f84:	2301      	movs	r3, #1
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	f10d 0217 	add.w	r2, sp, #23
 8000f8c:	9200      	str	r2, [sp, #0]
 8000f8e:	22f4      	movs	r2, #244	; 0xf4
 8000f90:	21ec      	movs	r1, #236	; 0xec
 8000f92:	a808      	add	r0, sp, #32
 8000f94:	f004 f93e 	bl	8005214 <HAL_I2C_Mem_Write>
 8000f98:	4603      	mov	r3, r0
	return status;
 8000f9a:	e7c7      	b.n	8000f2c <BME280_Init+0x30>

08000f9c <BME280_Get_ID>:


HAL_StatusTypeDef BME280_Get_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 8000f9c:	b084      	sub	sp, #16
 8000f9e:	b500      	push	{lr}
 8000fa0:	b085      	sub	sp, #20
 8000fa2:	f10d 0c18 	add.w	ip, sp, #24
 8000fa6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	return HAL_I2C_Mem_Read(&handle, BME280_address, BME280_ID, 1, ptr_ID, 1, Timeout);
 8000faa:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000fb6:	9200      	str	r2, [sp, #0]
 8000fb8:	22d0      	movs	r2, #208	; 0xd0
 8000fba:	21ec      	movs	r1, #236	; 0xec
 8000fbc:	4660      	mov	r0, ip
 8000fbe:	f004 f9db 	bl	8005378 <HAL_I2C_Mem_Read>
}
 8000fc2:	b005      	add	sp, #20
 8000fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000fc8:	b004      	add	sp, #16
 8000fca:	4770      	bx	lr

08000fcc <BME280_Calib_Read>:


HAL_StatusTypeDef BME280_Calib_Read(I2C_HandleTypeDef handle, BME280_Calib_Data_struct *Calib_data, uint16_t Timeout)
{
 8000fcc:	b084      	sub	sp, #16
 8000fce:	b530      	push	{r4, r5, lr}
 8000fd0:	b091      	sub	sp, #68	; 0x44
 8000fd2:	ac14      	add	r4, sp, #80	; 0x50
 8000fd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fd8:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8000fda:	f8bd 50a8 	ldrh.w	r5, [sp, #168]	; 0xa8
	HAL_StatusTypeDef status;
	uint8_t calib0[26];
	uint8_t calib1[16];

	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_calib1, 1, calib0, 26, Timeout);
 8000fde:	9502      	str	r5, [sp, #8]
 8000fe0:	231a      	movs	r3, #26
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	ab09      	add	r3, sp, #36	; 0x24
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	2288      	movs	r2, #136	; 0x88
 8000fec:	21ec      	movs	r1, #236	; 0xec
 8000fee:	a814      	add	r0, sp, #80	; 0x50
 8000ff0:	f004 f9c2 	bl	8005378 <HAL_I2C_Mem_Read>
	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_calib2, 1, calib1, 16, Timeout);
 8000ff4:	9502      	str	r5, [sp, #8]
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	ab05      	add	r3, sp, #20
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2301      	movs	r3, #1
 8001000:	22e1      	movs	r2, #225	; 0xe1
 8001002:	21ec      	movs	r1, #236	; 0xec
 8001004:	a814      	add	r0, sp, #80	; 0x50
 8001006:	f004 f9b7 	bl	8005378 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 800100a:	4601      	mov	r1, r0
 800100c:	2800      	cmp	r0, #0
 800100e:	f040 8083 	bne.w	8001118 <BME280_Calib_Read+0x14c>
		return status;

	Calib_data->dig_T1 = calib0[0];
 8001012:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8001016:	8023      	strh	r3, [r4, #0]
	Calib_data->dig_T1 += calib0[1] << 8;
 8001018:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800101c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001020:	8023      	strh	r3, [r4, #0]

	Calib_data->dig_T2 = calib0[2];
 8001022:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8001026:	8063      	strh	r3, [r4, #2]
	Calib_data->dig_T2 += calib0[3] << 8;
 8001028:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 800102c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001030:	8063      	strh	r3, [r4, #2]

	Calib_data->dig_T3 = calib0[4];
 8001032:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8001036:	80a3      	strh	r3, [r4, #4]
	Calib_data->dig_T3 += calib0[5] << 8;
 8001038:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 800103c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001040:	80a3      	strh	r3, [r4, #4]

	Calib_data->dig_P1 = calib0[6];
 8001042:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8001046:	80e3      	strh	r3, [r4, #6]
	Calib_data->dig_P1 += calib0[7] << 8;
 8001048:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 800104c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001050:	80e3      	strh	r3, [r4, #6]

	Calib_data->dig_P2 = calib0[8];
 8001052:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8001056:	8123      	strh	r3, [r4, #8]
	Calib_data->dig_P2 += calib0[9] << 8;
 8001058:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 800105c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001060:	8123      	strh	r3, [r4, #8]

	Calib_data->dig_P3 = calib0[10];
 8001062:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8001066:	8163      	strh	r3, [r4, #10]
	Calib_data->dig_P3 += calib0[11] << 8;
 8001068:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800106c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001070:	8163      	strh	r3, [r4, #10]

	Calib_data->dig_P4 = calib0[12];
 8001072:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8001076:	81a3      	strh	r3, [r4, #12]
	Calib_data->dig_P4 += calib0[13] << 8;
 8001078:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800107c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001080:	81a3      	strh	r3, [r4, #12]

	Calib_data->dig_P5 = calib0[14];
 8001082:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
 8001086:	81e3      	strh	r3, [r4, #14]
	Calib_data->dig_P5 += calib0[15] << 8;
 8001088:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800108c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001090:	81e3      	strh	r3, [r4, #14]

	Calib_data->dig_P6 = calib0[16];
 8001092:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8001096:	8223      	strh	r3, [r4, #16]
	Calib_data->dig_P6 += calib0[17] << 8;
 8001098:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800109c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80010a0:	8223      	strh	r3, [r4, #16]

	Calib_data->dig_P7 = calib0[18];
 80010a2:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 80010a6:	8263      	strh	r3, [r4, #18]
	Calib_data->dig_P7 += calib0[19] << 8;
 80010a8:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 80010ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80010b0:	8263      	strh	r3, [r4, #18]

	Calib_data->dig_P8 = calib0[20];
 80010b2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80010b6:	82a3      	strh	r3, [r4, #20]
	Calib_data->dig_P8 += calib0[21] << 8;
 80010b8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80010bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80010c0:	82a3      	strh	r3, [r4, #20]

	Calib_data->dig_P9 = calib0[22];
 80010c2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 80010c6:	82e3      	strh	r3, [r4, #22]
	Calib_data->dig_P9 += calib0[23] << 8;
 80010c8:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80010cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80010d0:	82e3      	strh	r3, [r4, #22]

	Calib_data->dig_H1 = calib0[25];
 80010d2:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 80010d6:	7623      	strb	r3, [r4, #24]

	Calib_data->dig_H2 = calib1[0];
 80010d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80010dc:	8363      	strh	r3, [r4, #26]
	Calib_data->dig_H2 += calib1[1] << 8;
 80010de:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80010e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80010e6:	8363      	strh	r3, [r4, #26]

	Calib_data->dig_H3 = calib1[2];
 80010e8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80010ec:	7723      	strb	r3, [r4, #28]

	Calib_data->dig_H4 = calib1[3] << 4;
 80010ee:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	83e2      	strh	r2, [r4, #30]
	Calib_data->dig_H4 += calib1[4] & 0b00001111;
 80010f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80010fa:	f003 000f 	and.w	r0, r3, #15
 80010fe:	4402      	add	r2, r0
 8001100:	83e2      	strh	r2, [r4, #30]

	Calib_data->dig_H5 = calib1[4] >> 4;
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	8423      	strh	r3, [r4, #32]
	Calib_data->dig_H5 += calib1[5] << 4;
 8001106:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800110a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800110e:	8423      	strh	r3, [r4, #32]

	Calib_data->dig_H6 = calib1[6];
 8001110:	f99d 301a 	ldrsb.w	r3, [sp, #26]
 8001114:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

	return status;
}
 8001118:	4608      	mov	r0, r1
 800111a:	b011      	add	sp, #68	; 0x44
 800111c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001120:	b004      	add	sp, #16
 8001122:	4770      	bx	lr

08001124 <BME280_Get_All>:


HAL_StatusTypeDef BME280_Get_All(I2C_HandleTypeDef handle, uint16_t Timeout){
 8001124:	b084      	sub	sp, #16
 8001126:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800112a:	b087      	sub	sp, #28
 800112c:	ac0e      	add	r4, sp, #56	; 0x38
 800112e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t measure[8];

	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_press, 1, measure, 8, Timeout);
 8001132:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2308      	movs	r3, #8
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	ab04      	add	r3, sp, #16
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	22f7      	movs	r2, #247	; 0xf7
 8001144:	21ec      	movs	r1, #236	; 0xec
 8001146:	4620      	mov	r0, r4
 8001148:	f004 f916 	bl	8005378 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 800114c:	bb68      	cbnz	r0, 80011aa <BME280_Get_All+0x86>
		return status;

	Pressure_Data.press_msb = measure[0];
 800114e:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8001152:	4c18      	ldr	r4, [pc, #96]	; (80011b4 <BME280_Get_All+0x90>)
 8001154:	7027      	strb	r7, [r4, #0]
	Pressure_Data.press_lsb = measure[1];
 8001156:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800115a:	7063      	strb	r3, [r4, #1]
	Pressure_Data.press_xlsb = measure[2];
 800115c:	f89d e012 	ldrb.w	lr, [sp, #18]
 8001160:	f884 e002 	strb.w	lr, [r4, #2]

	Temperature_Data.temp_msb = measure[3];
 8001164:	f89d 9013 	ldrb.w	r9, [sp, #19]
 8001168:	4d13      	ldr	r5, [pc, #76]	; (80011b8 <BME280_Get_All+0x94>)
 800116a:	f885 9000 	strb.w	r9, [r5]
	Temperature_Data.temp_lsb = measure[4];
 800116e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001172:	706a      	strb	r2, [r5, #1]
	Temperature_Data.temp_xlsb = measure[5];
 8001174:	f89d 8015 	ldrb.w	r8, [sp, #21]
 8001178:	f885 8002 	strb.w	r8, [r5, #2]

	Humidity_Data.hum_msb = measure[6];
 800117c:	f89d c016 	ldrb.w	ip, [sp, #22]
 8001180:	4e0e      	ldr	r6, [pc, #56]	; (80011bc <BME280_Get_All+0x98>)
 8001182:	f886 c000 	strb.w	ip, [r6]
	Humidity_Data.hum_lsb = measure[7];
 8001186:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800118a:	7071      	strb	r1, [r6, #1]

	Temperature_Data.ADC_T = ((uint32_t)Temperature_Data.temp_msb << 12) | ((uint32_t)Temperature_Data.temp_lsb << 4) | ((uint32_t)Temperature_Data.temp_xlsb >> 4);
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
 8001192:	ea42 1218 	orr.w	r2, r2, r8, lsr #4
 8001196:	606a      	str	r2, [r5, #4]
	Pressure_Data.ADC_P = ((uint32_t)Pressure_Data.press_msb << 12) | ((uint32_t)Pressure_Data.press_lsb << 4) | ((uint32_t)Pressure_Data.press_xlsb >> 4);
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
 800119e:	ea43 131e 	orr.w	r3, r3, lr, lsr #4
 80011a2:	6063      	str	r3, [r4, #4]
	Humidity_Data.ADC_H = ((uint32_t)Humidity_Data.hum_msb << 8) | ((uint32_t)Humidity_Data.hum_lsb);
 80011a4:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
 80011a8:	6071      	str	r1, [r6, #4]
	return status;
}
 80011aa:	b007      	add	sp, #28
 80011ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011b0:	b004      	add	sp, #16
 80011b2:	4770      	bx	lr
 80011b4:	20000234 	.word	0x20000234
 80011b8:	2000023c 	.word	0x2000023c
 80011bc:	2000022c 	.word	0x2000022c

080011c0 <BME280_T_Double>:
	return status;
}


double BME280_T_Double (BME280_Calib_Data_struct *Calib_data)
{
 80011c0:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
 80011c4:	4604      	mov	r4, r0
//	BME280_Temperature(handle);
	double var1, var2, t;

	var1 = (((double) Temperature_Data.ADC_T)/16384.0 - ((double) Calib_data->dig_T1)/1024.0) * ((double) Calib_data->dig_T2);
 80011c6:	4b31      	ldr	r3, [pc, #196]	; (800128c <BME280_T_Double+0xcc>)
 80011c8:	6858      	ldr	r0, [r3, #4]
 80011ca:	f7ff f9a3 	bl	8000514 <__aeabi_ui2d>
 80011ce:	4606      	mov	r6, r0
 80011d0:	460f      	mov	r7, r1
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <BME280_T_Double+0xd0>)
 80011d6:	f7ff fa17 	bl	8000608 <__aeabi_dmul>
 80011da:	4680      	mov	r8, r0
 80011dc:	4689      	mov	r9, r1
 80011de:	8820      	ldrh	r0, [r4, #0]
 80011e0:	f7ff f998 	bl	8000514 <__aeabi_ui2d>
 80011e4:	4682      	mov	sl, r0
 80011e6:	468b      	mov	fp, r1
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b2a      	ldr	r3, [pc, #168]	; (8001294 <BME280_T_Double+0xd4>)
 80011ec:	f7ff fa0c 	bl	8000608 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4640      	mov	r0, r8
 80011f6:	4649      	mov	r1, r9
 80011f8:	f7ff f84e 	bl	8000298 <__aeabi_dsub>
 80011fc:	4680      	mov	r8, r0
 80011fe:	4689      	mov	r9, r1
 8001200:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8001204:	f7ff f996 	bl	8000534 <__aeabi_i2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4640      	mov	r0, r8
 800120e:	4649      	mov	r1, r9
 8001210:	f7ff f9fa 	bl	8000608 <__aeabi_dmul>
 8001214:	4680      	mov	r8, r0
 8001216:	4689      	mov	r9, r1
	var2 = ((((double) Temperature_Data.ADC_T)/131072.0 - ((double) Calib_data->dig_T1)/8192.0) * (((double) Temperature_Data.ADC_T)/131072.0 - ((double) Calib_data->dig_T1)/8192.0)) * ((double) Calib_data->dig_T3);
 8001218:	2200      	movs	r2, #0
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <BME280_T_Double+0xd8>)
 800121c:	4630      	mov	r0, r6
 800121e:	4639      	mov	r1, r7
 8001220:	f7ff f9f2 	bl	8000608 <__aeabi_dmul>
 8001224:	4606      	mov	r6, r0
 8001226:	460f      	mov	r7, r1
 8001228:	2200      	movs	r2, #0
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <BME280_T_Double+0xdc>)
 800122c:	4650      	mov	r0, sl
 800122e:	4659      	mov	r1, fp
 8001230:	f7ff f9ea 	bl	8000608 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4630      	mov	r0, r6
 800123a:	4639      	mov	r1, r7
 800123c:	f7ff f82c 	bl	8000298 <__aeabi_dsub>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	f7ff f9e0 	bl	8000608 <__aeabi_dmul>
 8001248:	4606      	mov	r6, r0
 800124a:	460f      	mov	r7, r1
 800124c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8001250:	f7ff f970 	bl	8000534 <__aeabi_i2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4630      	mov	r0, r6
 800125a:	4639      	mov	r1, r7
 800125c:	f7ff f9d4 	bl	8000608 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1

	t_fine =  (var1 + var2);
 8001264:	4640      	mov	r0, r8
 8001266:	4649      	mov	r1, r9
 8001268:	f7ff f818 	bl	800029c <__adddf3>
 800126c:	4606      	mov	r6, r0
 800126e:	460f      	mov	r7, r1
 8001270:	f7ff fc7a 	bl	8000b68 <__aeabi_d2iz>
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <BME280_T_Double+0xe0>)
 8001276:	6018      	str	r0, [r3, #0]
	t = (var1 + var2)/5120.0;
 8001278:	2200      	movs	r2, #0
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <BME280_T_Double+0xe4>)
 800127c:	4630      	mov	r0, r6
 800127e:	4639      	mov	r1, r7
 8001280:	f7ff faec 	bl	800085c <__aeabi_ddiv>

	return t;
}
 8001284:	ec41 0b10 	vmov	d0, r0, r1
 8001288:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 800128c:	2000023c 	.word	0x2000023c
 8001290:	3f100000 	.word	0x3f100000
 8001294:	3f500000 	.word	0x3f500000
 8001298:	3ee00000 	.word	0x3ee00000
 800129c:	3f200000 	.word	0x3f200000
 80012a0:	20000244 	.word	0x20000244
 80012a4:	40b40000 	.word	0x40b40000

080012a8 <BME280_P_Double>:

double BME280_P_Double(BME280_Calib_Data_struct *Calib_data)
{
 80012a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012ac:	4682      	mov	sl, r0
//	BME280_Pressure(handle);
	double var1, var2, p;

	var1 = ((double)t_fine/2.0) - 64000.0;
 80012ae:	4b82      	ldr	r3, [pc, #520]	; (80014b8 <BME280_P_Double+0x210>)
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	f7ff f93f 	bl	8000534 <__aeabi_i2d>
 80012b6:	2200      	movs	r2, #0
 80012b8:	4b80      	ldr	r3, [pc, #512]	; (80014bc <BME280_P_Double+0x214>)
 80012ba:	f7ff f9a5 	bl	8000608 <__aeabi_dmul>
 80012be:	2200      	movs	r2, #0
 80012c0:	4b7f      	ldr	r3, [pc, #508]	; (80014c0 <BME280_P_Double+0x218>)
 80012c2:	f7fe ffe9 	bl	8000298 <__aeabi_dsub>
 80012c6:	4604      	mov	r4, r0
 80012c8:	460d      	mov	r5, r1
	var2 = var1 * var1 * ((double) Calib_data->dig_P6) / 32768.0;
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	f7ff f99b 	bl	8000608 <__aeabi_dmul>
 80012d2:	4606      	mov	r6, r0
 80012d4:	460f      	mov	r7, r1
 80012d6:	f9ba 0010 	ldrsh.w	r0, [sl, #16]
 80012da:	f7ff f92b 	bl	8000534 <__aeabi_i2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4630      	mov	r0, r6
 80012e4:	4639      	mov	r1, r7
 80012e6:	f7ff f98f 	bl	8000608 <__aeabi_dmul>
 80012ea:	2200      	movs	r2, #0
 80012ec:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80012f0:	f7ff f98a 	bl	8000608 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
	var2 = var2 + var1 + ((double) Calib_data->dig_P5) * 2.0;
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ffce 	bl	800029c <__adddf3>
 8001300:	4606      	mov	r6, r0
 8001302:	460f      	mov	r7, r1
 8001304:	f9ba 000e 	ldrsh.w	r0, [sl, #14]
 8001308:	f7ff f914 	bl	8000534 <__aeabi_i2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	f7fe ffc4 	bl	800029c <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4630      	mov	r0, r6
 800131a:	4639      	mov	r1, r7
 800131c:	f7fe ffbe 	bl	800029c <__adddf3>
	var2 = (var2/4.0) + (((double) Calib_data->dig_P4) * 65536.0);
 8001320:	2200      	movs	r2, #0
 8001322:	4b68      	ldr	r3, [pc, #416]	; (80014c4 <BME280_P_Double+0x21c>)
 8001324:	f7ff f970 	bl	8000608 <__aeabi_dmul>
 8001328:	4606      	mov	r6, r0
 800132a:	460f      	mov	r7, r1
 800132c:	f9ba 000c 	ldrsh.w	r0, [sl, #12]
 8001330:	f7ff f900 	bl	8000534 <__aeabi_i2d>
 8001334:	2200      	movs	r2, #0
 8001336:	4b64      	ldr	r3, [pc, #400]	; (80014c8 <BME280_P_Double+0x220>)
 8001338:	f7ff f966 	bl	8000608 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4630      	mov	r0, r6
 8001342:	4639      	mov	r1, r7
 8001344:	f7fe ffaa 	bl	800029c <__adddf3>
 8001348:	4680      	mov	r8, r0
 800134a:	4689      	mov	r9, r1
	var1 = (((double) Calib_data->dig_P3) * var1 * var1 / 524288.0 + ((double) Calib_data->dig_P2) * var1) / 524288.0;
 800134c:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
 8001350:	f7ff f8f0 	bl	8000534 <__aeabi_i2d>
 8001354:	4622      	mov	r2, r4
 8001356:	462b      	mov	r3, r5
 8001358:	f7ff f956 	bl	8000608 <__aeabi_dmul>
 800135c:	4622      	mov	r2, r4
 800135e:	462b      	mov	r3, r5
 8001360:	f7ff f952 	bl	8000608 <__aeabi_dmul>
 8001364:	2200      	movs	r2, #0
 8001366:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 800136a:	f7ff f94d 	bl	8000608 <__aeabi_dmul>
 800136e:	4606      	mov	r6, r0
 8001370:	460f      	mov	r7, r1
 8001372:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
 8001376:	f7ff f8dd 	bl	8000534 <__aeabi_i2d>
 800137a:	4622      	mov	r2, r4
 800137c:	462b      	mov	r3, r5
 800137e:	f7ff f943 	bl	8000608 <__aeabi_dmul>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4630      	mov	r0, r6
 8001388:	4639      	mov	r1, r7
 800138a:	f7fe ff87 	bl	800029c <__adddf3>
 800138e:	2200      	movs	r2, #0
 8001390:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8001394:	f7ff f938 	bl	8000608 <__aeabi_dmul>
	var1 = (1.0 + var1 / 32768.0)*((double) Calib_data->dig_P1);
 8001398:	2200      	movs	r2, #0
 800139a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800139e:	f7ff f933 	bl	8000608 <__aeabi_dmul>
 80013a2:	2200      	movs	r2, #0
 80013a4:	4b49      	ldr	r3, [pc, #292]	; (80014cc <BME280_P_Double+0x224>)
 80013a6:	f7fe ff79 	bl	800029c <__adddf3>
 80013aa:	4604      	mov	r4, r0
 80013ac:	460d      	mov	r5, r1
 80013ae:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80013b2:	f7ff f8af 	bl	8000514 <__aeabi_ui2d>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4620      	mov	r0, r4
 80013bc:	4629      	mov	r1, r5
 80013be:	f7ff f923 	bl	8000608 <__aeabi_dmul>
 80013c2:	4604      	mov	r4, r0
 80013c4:	460d      	mov	r5, r1

	if (var1 == 0.0)
 80013c6:	2200      	movs	r2, #0
 80013c8:	2300      	movs	r3, #0
 80013ca:	f7ff fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d164      	bne.n	800149c <BME280_P_Double+0x1f4>
	{
		return 0; // avoid exception caused by division by zero
	}

	p = 1048576.0 - (double) Pressure_Data.ADC_P;
 80013d2:	4b3f      	ldr	r3, [pc, #252]	; (80014d0 <BME280_P_Double+0x228>)
 80013d4:	6858      	ldr	r0, [r3, #4]
 80013d6:	f7ff f89d 	bl	8000514 <__aeabi_ui2d>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	2000      	movs	r0, #0
 80013e0:	493c      	ldr	r1, [pc, #240]	; (80014d4 <BME280_P_Double+0x22c>)
 80013e2:	f7fe ff59 	bl	8000298 <__aeabi_dsub>
 80013e6:	4606      	mov	r6, r0
 80013e8:	460f      	mov	r7, r1
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 80013ea:	2200      	movs	r2, #0
 80013ec:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <BME280_P_Double+0x230>)
 80013ee:	4640      	mov	r0, r8
 80013f0:	4649      	mov	r1, r9
 80013f2:	f7ff f909 	bl	8000608 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4630      	mov	r0, r6
 80013fc:	4639      	mov	r1, r7
 80013fe:	f7fe ff4b 	bl	8000298 <__aeabi_dsub>
 8001402:	a329      	add	r3, pc, #164	; (adr r3, 80014a8 <BME280_P_Double+0x200>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	f7ff f8fe 	bl	8000608 <__aeabi_dmul>
 800140c:	4622      	mov	r2, r4
 800140e:	462b      	mov	r3, r5
 8001410:	f7ff fa24 	bl	800085c <__aeabi_ddiv>
 8001414:	4604      	mov	r4, r0
 8001416:	460d      	mov	r5, r1

	var1 = ((double) Calib_data->dig_P9) * p* p / 2147483648.0;
 8001418:	f9ba 0016 	ldrsh.w	r0, [sl, #22]
 800141c:	f7ff f88a 	bl	8000534 <__aeabi_i2d>
 8001420:	4622      	mov	r2, r4
 8001422:	462b      	mov	r3, r5
 8001424:	f7ff f8f0 	bl	8000608 <__aeabi_dmul>
 8001428:	4622      	mov	r2, r4
 800142a:	462b      	mov	r3, r5
 800142c:	f7ff f8ec 	bl	8000608 <__aeabi_dmul>
 8001430:	2200      	movs	r2, #0
 8001432:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8001436:	f7ff f8e7 	bl	8000608 <__aeabi_dmul>
 800143a:	4606      	mov	r6, r0
 800143c:	460f      	mov	r7, r1
	var2 = p * ((double) Calib_data->dig_P8) / 32768.0;
 800143e:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
 8001442:	f7ff f877 	bl	8000534 <__aeabi_i2d>
 8001446:	4622      	mov	r2, r4
 8001448:	462b      	mov	r3, r5
 800144a:	f7ff f8dd 	bl	8000608 <__aeabi_dmul>
 800144e:	2200      	movs	r2, #0
 8001450:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001454:	f7ff f8d8 	bl	8000608 <__aeabi_dmul>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1

	p = p + (var1 + var2 + ((double) Calib_data->dig_P7)) / 16.0;
 800145c:	4630      	mov	r0, r6
 800145e:	4639      	mov	r1, r7
 8001460:	f7fe ff1c 	bl	800029c <__adddf3>
 8001464:	4606      	mov	r6, r0
 8001466:	460f      	mov	r7, r1
 8001468:	f9ba 0012 	ldrsh.w	r0, [sl, #18]
 800146c:	f7ff f862 	bl	8000534 <__aeabi_i2d>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4630      	mov	r0, r6
 8001476:	4639      	mov	r1, r7
 8001478:	f7fe ff10 	bl	800029c <__adddf3>
 800147c:	2200      	movs	r2, #0
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <BME280_P_Double+0x234>)
 8001480:	f7ff f8c2 	bl	8000608 <__aeabi_dmul>
 8001484:	4622      	mov	r2, r4
 8001486:	462b      	mov	r3, r5
 8001488:	f7fe ff08 	bl	800029c <__adddf3>
	p = (p/1000);
 800148c:	2200      	movs	r2, #0
 800148e:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <BME280_P_Double+0x238>)
 8001490:	f7ff f9e4 	bl	800085c <__aeabi_ddiv>
 8001494:	ec41 0b10 	vmov	d0, r0, r1

	return p;
}
 8001498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0; // avoid exception caused by division by zero
 800149c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80014b0 <BME280_P_Double+0x208>
 80014a0:	e7fa      	b.n	8001498 <BME280_P_Double+0x1f0>
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	00000000 	.word	0x00000000
 80014ac:	40b86a00 	.word	0x40b86a00
	...
 80014b8:	20000244 	.word	0x20000244
 80014bc:	3fe00000 	.word	0x3fe00000
 80014c0:	40ef4000 	.word	0x40ef4000
 80014c4:	3fd00000 	.word	0x3fd00000
 80014c8:	40f00000 	.word	0x40f00000
 80014cc:	3ff00000 	.word	0x3ff00000
 80014d0:	20000234 	.word	0x20000234
 80014d4:	41300000 	.word	0x41300000
 80014d8:	3f300000 	.word	0x3f300000
 80014dc:	3fb00000 	.word	0x3fb00000
 80014e0:	408f4000 	.word	0x408f4000
 80014e4:	00000000 	.word	0x00000000

080014e8 <BME280_H_Double>:

double BME280_H_Double(BME280_Calib_Data_struct *Calib_data)
{
 80014e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014ec:	ed2d 8b02 	vpush	{d8}
 80014f0:	b082      	sub	sp, #8
 80014f2:	4682      	mov	sl, r0
//	BME280_Humidity(handle);
	long double var_H;

	var_H = (((double) t_fine) - 76800.0);
 80014f4:	4b58      	ldr	r3, [pc, #352]	; (8001658 <BME280_H_Double+0x170>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	f7ff f81c 	bl	8000534 <__aeabi_i2d>
 80014fc:	2200      	movs	r2, #0
 80014fe:	4b57      	ldr	r3, [pc, #348]	; (800165c <BME280_H_Double+0x174>)
 8001500:	f7fe feca 	bl	8000298 <__aeabi_dsub>
 8001504:	4604      	mov	r4, r0
 8001506:	460d      	mov	r5, r1
	var_H = (((double) Humidity_Data.ADC_H) - (((double)Calib_data->dig_H4)*64.0 + ((double)Calib_data->dig_H5)/16384.0*var_H)) *
 8001508:	4b55      	ldr	r3, [pc, #340]	; (8001660 <BME280_H_Double+0x178>)
 800150a:	6858      	ldr	r0, [r3, #4]
 800150c:	f7ff f802 	bl	8000514 <__aeabi_ui2d>
 8001510:	4606      	mov	r6, r0
 8001512:	460f      	mov	r7, r1
 8001514:	f9ba 001e 	ldrsh.w	r0, [sl, #30]
 8001518:	f7ff f80c 	bl	8000534 <__aeabi_i2d>
 800151c:	2200      	movs	r2, #0
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <BME280_H_Double+0x17c>)
 8001520:	f7ff f872 	bl	8000608 <__aeabi_dmul>
 8001524:	4680      	mov	r8, r0
 8001526:	4689      	mov	r9, r1
 8001528:	f9ba 0020 	ldrsh.w	r0, [sl, #32]
 800152c:	f7ff f802 	bl	8000534 <__aeabi_i2d>
 8001530:	2200      	movs	r2, #0
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <BME280_H_Double+0x180>)
 8001534:	f7ff f868 	bl	8000608 <__aeabi_dmul>
 8001538:	4622      	mov	r2, r4
 800153a:	462b      	mov	r3, r5
 800153c:	f7ff f864 	bl	8000608 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4640      	mov	r0, r8
 8001546:	4649      	mov	r1, r9
 8001548:	f7fe fea8 	bl	800029c <__adddf3>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4630      	mov	r0, r6
 8001552:	4639      	mov	r1, r7
 8001554:	f7fe fea0 	bl	8000298 <__aeabi_dsub>
 8001558:	e9cd 0100 	strd	r0, r1, [sp]
			(((double) Calib_data->dig_H2)/65536.0 * (1.0 + ((double) Calib_data->dig_H6) / 67108864.0*var_H * (1.0 + ((double) Calib_data->dig_H3)/67108864.0*var_H)));
 800155c:	f9ba 001a 	ldrsh.w	r0, [sl, #26]
 8001560:	f7fe ffe8 	bl	8000534 <__aeabi_i2d>
 8001564:	2200      	movs	r2, #0
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <BME280_H_Double+0x184>)
 8001568:	f7ff f84e 	bl	8000608 <__aeabi_dmul>
 800156c:	4680      	mov	r8, r0
 800156e:	4689      	mov	r9, r1
 8001570:	f99a 0022 	ldrsb.w	r0, [sl, #34]	; 0x22
 8001574:	f7fe ffde 	bl	8000534 <__aeabi_i2d>
 8001578:	2200      	movs	r2, #0
 800157a:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <BME280_H_Double+0x188>)
 800157c:	f7ff f844 	bl	8000608 <__aeabi_dmul>
 8001580:	4622      	mov	r2, r4
 8001582:	462b      	mov	r3, r5
 8001584:	f7ff f840 	bl	8000608 <__aeabi_dmul>
 8001588:	4606      	mov	r6, r0
 800158a:	460f      	mov	r7, r1
 800158c:	f89a 001c 	ldrb.w	r0, [sl, #28]
 8001590:	f7fe ffc0 	bl	8000514 <__aeabi_ui2d>
 8001594:	2200      	movs	r2, #0
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <BME280_H_Double+0x188>)
 8001598:	f7ff f836 	bl	8000608 <__aeabi_dmul>
 800159c:	4622      	mov	r2, r4
 800159e:	462b      	mov	r3, r5
 80015a0:	f7ff f832 	bl	8000608 <__aeabi_dmul>
 80015a4:	2200      	movs	r2, #0
 80015a6:	4b33      	ldr	r3, [pc, #204]	; (8001674 <BME280_H_Double+0x18c>)
 80015a8:	f7fe fe78 	bl	800029c <__adddf3>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4630      	mov	r0, r6
 80015b2:	4639      	mov	r1, r7
 80015b4:	f7ff f828 	bl	8000608 <__aeabi_dmul>
 80015b8:	2200      	movs	r2, #0
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <BME280_H_Double+0x18c>)
 80015bc:	f7fe fe6e 	bl	800029c <__adddf3>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4640      	mov	r0, r8
 80015c6:	4649      	mov	r1, r9
 80015c8:	f7ff f81e 	bl	8000608 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
	var_H = (((double) Humidity_Data.ADC_H) - (((double)Calib_data->dig_H4)*64.0 + ((double)Calib_data->dig_H5)/16384.0*var_H)) *
 80015d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80015d4:	f7ff f818 	bl	8000608 <__aeabi_dmul>
 80015d8:	4604      	mov	r4, r0
 80015da:	460d      	mov	r5, r1
	var_H *= (1.0 - ((double)Calib_data->dig_H1)*var_H/524288.0);
 80015dc:	f89a 0018 	ldrb.w	r0, [sl, #24]
 80015e0:	f7fe ff98 	bl	8000514 <__aeabi_ui2d>
 80015e4:	4622      	mov	r2, r4
 80015e6:	462b      	mov	r3, r5
 80015e8:	f7ff f80e 	bl	8000608 <__aeabi_dmul>
 80015ec:	2200      	movs	r2, #0
 80015ee:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80015f2:	f7ff f809 	bl	8000608 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	2000      	movs	r0, #0
 80015fc:	491d      	ldr	r1, [pc, #116]	; (8001674 <BME280_H_Double+0x18c>)
 80015fe:	f7fe fe4b 	bl	8000298 <__aeabi_dsub>
 8001602:	4622      	mov	r2, r4
 8001604:	462b      	mov	r3, r5
 8001606:	f7fe ffff 	bl	8000608 <__aeabi_dmul>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	ec43 2b18 	vmov	d8, r2, r3

	if (var_H > 100.0){
 8001612:	2200      	movs	r2, #0
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <BME280_H_Double+0x190>)
 8001616:	f7ff fa87 	bl	8000b28 <__aeabi_dcmpgt>
 800161a:	b948      	cbnz	r0, 8001630 <BME280_H_Double+0x148>
		var_H = 100.0;
	}
	else if (var_H < 0.0){
 800161c:	2200      	movs	r2, #0
 800161e:	2300      	movs	r3, #0
 8001620:	ec51 0b18 	vmov	r0, r1, d8
 8001624:	f7ff fa62 	bl	8000aec <__aeabi_dcmplt>
 8001628:	b120      	cbz	r0, 8001634 <BME280_H_Double+0x14c>
		var_H = 0.0;
 800162a:	ed9f 8b07 	vldr	d8, [pc, #28]	; 8001648 <BME280_H_Double+0x160>
	}

	return var_H;
 800162e:	e001      	b.n	8001634 <BME280_H_Double+0x14c>
		var_H = 100.0;
 8001630:	ed9f 8b07 	vldr	d8, [pc, #28]	; 8001650 <BME280_H_Double+0x168>
}
 8001634:	eeb0 0a48 	vmov.f32	s0, s16
 8001638:	eef0 0a68 	vmov.f32	s1, s17
 800163c:	b002      	add	sp, #8
 800163e:	ecbd 8b02 	vpop	{d8}
 8001642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001646:	bf00      	nop
	...
 8001654:	40590000 	.word	0x40590000
 8001658:	20000244 	.word	0x20000244
 800165c:	40f2c000 	.word	0x40f2c000
 8001660:	2000022c 	.word	0x2000022c
 8001664:	40500000 	.word	0x40500000
 8001668:	3f100000 	.word	0x3f100000
 800166c:	3ef00000 	.word	0x3ef00000
 8001670:	3e500000 	.word	0x3e500000
 8001674:	3ff00000 	.word	0x3ff00000
 8001678:	40590000 	.word	0x40590000
 800167c:	00000000 	.word	0x00000000

08001680 <BME280_Altitude_Double>:


double BME280_Altitude_Double(double Pressure, double Pressure_ref)
{
 8001680:	b508      	push	{r3, lr}
 8001682:	ec51 0b10 	vmov	r0, r1, d0
 8001686:	ec53 2b11 	vmov	r2, r3, d1
	long double var1;
	var1 = pow(Pressure/Pressure_ref, 1/5.255);
 800168a:	f7ff f8e7 	bl	800085c <__aeabi_ddiv>
 800168e:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80016b8 <BME280_Altitude_Double+0x38>
 8001692:	ec41 0b10 	vmov	d0, r0, r1
 8001696:	f00a fa61 	bl	800bb5c <pow>
 800169a:	ec53 2b10 	vmov	r2, r3, d0
	return 44330*(1-var1);
 800169e:	2000      	movs	r0, #0
 80016a0:	4909      	ldr	r1, [pc, #36]	; (80016c8 <BME280_Altitude_Double+0x48>)
 80016a2:	f7fe fdf9 	bl	8000298 <__aeabi_dsub>
 80016a6:	a306      	add	r3, pc, #24	; (adr r3, 80016c0 <BME280_Altitude_Double+0x40>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe ffac 	bl	8000608 <__aeabi_dmul>
}
 80016b0:	ec41 0b10 	vmov	d0, r0, r1
 80016b4:	bd08      	pop	{r3, pc}
 80016b6:	bf00      	nop
 80016b8:	ccd9456c 	.word	0xccd9456c
 80016bc:	3fc85b95 	.word	0x3fc85b95
 80016c0:	00000000 	.word	0x00000000
 80016c4:	40e5a540 	.word	0x40e5a540
 80016c8:	3ff00000 	.word	0x3ff00000

080016cc <MPU6050_Init>:
int16_t Temperature_raw;



HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 80016cc:	b084      	sub	sp, #16
 80016ce:	b510      	push	{r4, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	ac08      	add	r4, sp, #32
 80016d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016d8:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
	HAL_StatusTypeDef status;
	uint8_t data;

	// Config register complete reset (everything to 0, except sleep enable and ID)
	data = 0x80;
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_PWR_MGMT_1, 1, &data, 1, Timeout);
 80016e2:	9402      	str	r4, [sp, #8]
 80016e4:	2301      	movs	r3, #1
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	f10d 0217 	add.w	r2, sp, #23
 80016ec:	9200      	str	r2, [sp, #0]
 80016ee:	226b      	movs	r2, #107	; 0x6b
 80016f0:	21d0      	movs	r1, #208	; 0xd0
 80016f2:	a808      	add	r0, sp, #32
 80016f4:	f003 fd8e 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80016f8:	b120      	cbz	r0, 8001704 <MPU6050_Init+0x38>

	// Set sample rate to 8kHz/(1+19)=400Hz
	data = 0x13;
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_SMPLRT_DIV, 1, &data, 1, Timeout);
	return status;
}
 80016fa:	b006      	add	sp, #24
 80016fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001700:	b004      	add	sp, #16
 8001702:	4770      	bx	lr
	HAL_Delay(100);
 8001704:	2064      	movs	r0, #100	; 0x64
 8001706:	f003 f879 	bl	80047fc <HAL_Delay>
	data = 0x01;
 800170a:	2301      	movs	r3, #1
 800170c:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_USER_CTRL, 1, &data, 1, Timeout);
 8001710:	9402      	str	r4, [sp, #8]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	f10d 0217 	add.w	r2, sp, #23
 8001718:	9200      	str	r2, [sp, #0]
 800171a:	226a      	movs	r2, #106	; 0x6a
 800171c:	21d0      	movs	r1, #208	; 0xd0
 800171e:	a808      	add	r0, sp, #32
 8001720:	f003 fd78 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001724:	2800      	cmp	r0, #0
 8001726:	d1e8      	bne.n	80016fa <MPU6050_Init+0x2e>
	HAL_Delay(100);
 8001728:	2064      	movs	r0, #100	; 0x64
 800172a:	f003 f867 	bl	80047fc <HAL_Delay>
	data = 0x01;
 800172e:	2301      	movs	r3, #1
 8001730:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_PWR_MGMT_1, 1, &data, 1, Timeout);
 8001734:	9402      	str	r4, [sp, #8]
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	f10d 0217 	add.w	r2, sp, #23
 800173c:	9200      	str	r2, [sp, #0]
 800173e:	226b      	movs	r2, #107	; 0x6b
 8001740:	21d0      	movs	r1, #208	; 0xd0
 8001742:	a808      	add	r0, sp, #32
 8001744:	f003 fd66 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001748:	2800      	cmp	r0, #0
 800174a:	d1d6      	bne.n	80016fa <MPU6050_Init+0x2e>
	data = 0x08;
 800174c:	2308      	movs	r3, #8
 800174e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_ACCEL_CONFIG, 1, &data, 1, Timeout);
 8001752:	9402      	str	r4, [sp, #8]
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	f10d 0217 	add.w	r2, sp, #23
 800175c:	9200      	str	r2, [sp, #0]
 800175e:	221c      	movs	r2, #28
 8001760:	21d0      	movs	r1, #208	; 0xd0
 8001762:	a808      	add	r0, sp, #32
 8001764:	f003 fd56 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001768:	2800      	cmp	r0, #0
 800176a:	d1c6      	bne.n	80016fa <MPU6050_Init+0x2e>
	data = 0x08;
 800176c:	2308      	movs	r3, #8
 800176e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_GYRO_CONFIG, 1, &data, 1, Timeout);
 8001772:	9402      	str	r4, [sp, #8]
 8001774:	2301      	movs	r3, #1
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	f10d 0217 	add.w	r2, sp, #23
 800177c:	9200      	str	r2, [sp, #0]
 800177e:	221b      	movs	r2, #27
 8001780:	21d0      	movs	r1, #208	; 0xd0
 8001782:	a808      	add	r0, sp, #32
 8001784:	f003 fd46 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001788:	2800      	cmp	r0, #0
 800178a:	d1b6      	bne.n	80016fa <MPU6050_Init+0x2e>
	data = 0x13;
 800178c:	2313      	movs	r3, #19
 800178e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_SMPLRT_DIV, 1, &data, 1, Timeout);
 8001792:	9402      	str	r4, [sp, #8]
 8001794:	2301      	movs	r3, #1
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	f10d 0217 	add.w	r2, sp, #23
 800179c:	9200      	str	r2, [sp, #0]
 800179e:	2219      	movs	r2, #25
 80017a0:	21d0      	movs	r1, #208	; 0xd0
 80017a2:	a808      	add	r0, sp, #32
 80017a4:	f003 fd36 	bl	8005214 <HAL_I2C_Mem_Write>
	return status;
 80017a8:	e7a7      	b.n	80016fa <MPU6050_Init+0x2e>

080017aa <MPU6050_read_ID>:



HAL_StatusTypeDef MPU6050_read_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 80017aa:	b084      	sub	sp, #16
 80017ac:	b500      	push	{lr}
 80017ae:	b085      	sub	sp, #20
 80017b0:	f10d 0c18 	add.w	ip, sp, #24
 80017b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	return HAL_I2C_Mem_Read(&handle, MPU6050_Address, MPU6050_WHO_AM_I, 1, ptr_ID, 1, Timeout);
 80017b8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2301      	movs	r3, #1
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80017c4:	9200      	str	r2, [sp, #0]
 80017c6:	2275      	movs	r2, #117	; 0x75
 80017c8:	21d0      	movs	r1, #208	; 0xd0
 80017ca:	4660      	mov	r0, ip
 80017cc:	f003 fdd4 	bl	8005378 <HAL_I2C_Mem_Read>
}
 80017d0:	b005      	add	sp, #20
 80017d2:	f85d eb04 	ldr.w	lr, [sp], #4
 80017d6:	b004      	add	sp, #16
 80017d8:	4770      	bx	lr
	...

080017dc <MPU6050_read_All>:



HAL_StatusTypeDef MPU6050_read_All(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 80017dc:	b084      	sub	sp, #16
 80017de:	b500      	push	{lr}
 80017e0:	b089      	sub	sp, #36	; 0x24
 80017e2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80017e6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t data[14];

	status = HAL_I2C_Mem_Read(&handle, MPU6050_Address, MPU6050_ACCEL_XOUT_H, 1, data, 14, Timeout);
 80017ea:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	230e      	movs	r3, #14
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	ab04      	add	r3, sp, #16
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2301      	movs	r3, #1
 80017fa:	223b      	movs	r2, #59	; 0x3b
 80017fc:	21d0      	movs	r1, #208	; 0xd0
 80017fe:	4660      	mov	r0, ip
 8001800:	f003 fdba 	bl	8005378 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8001804:	bb98      	cbnz	r0, 800186e <MPU6050_read_All+0x92>
		return status;

	MPU6050_Accel_raw.xdata = data[0] << 8 | data[1];
 8001806:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800180a:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800180e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MPU6050_read_All+0x9c>)
 8001814:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_raw.ydata = data[2] << 8 | data[3];
 8001816:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800181a:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800181e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001822:	805a      	strh	r2, [r3, #2]
	MPU6050_Accel_raw.zdata = data[4] << 8 | data[5];
 8001824:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8001828:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800182c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001830:	809a      	strh	r2, [r3, #4]

	Temperature_raw = data[6] << 8 | data[7];
 8001832:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001836:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800183a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <MPU6050_read_All+0xa0>)
 8001840:	8013      	strh	r3, [r2, #0]

	MPU6050_Gyro_raw.xdata = data[8] << 8 | data[9];
 8001842:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001846:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800184a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MPU6050_read_All+0xa4>)
 8001850:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_raw.ydata = data[10] << 8 | data[11];
 8001852:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8001856:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800185a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800185e:	805a      	strh	r2, [r3, #2]
	MPU6050_Gyro_raw.zdata = data[12] << 8 | data[13];
 8001860:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8001864:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8001868:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800186c:	809a      	strh	r2, [r3, #4]

	return status;
}
 800186e:	b009      	add	sp, #36	; 0x24
 8001870:	f85d eb04 	ldr.w	lr, [sp], #4
 8001874:	b004      	add	sp, #16
 8001876:	4770      	bx	lr
 8001878:	20000248 	.word	0x20000248
 800187c:	20000256 	.word	0x20000256
 8001880:	20000250 	.word	0x20000250

08001884 <MPU6050_Accel_double>:
}



void MPU6050_Accel_double(MPU6050_struct *pMPU6050)
{
 8001884:	b538      	push	{r3, r4, r5, lr}
 8001886:	4604      	mov	r4, r0
	pMPU6050->Accel_X = (double)MPU6050_Accel_raw.xdata / 8192.0;
 8001888:	4d0f      	ldr	r5, [pc, #60]	; (80018c8 <MPU6050_Accel_double+0x44>)
 800188a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800188e:	f7fe fe51 	bl	8000534 <__aeabi_i2d>
 8001892:	2200      	movs	r2, #0
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <MPU6050_Accel_double+0x48>)
 8001896:	f7fe feb7 	bl	8000608 <__aeabi_dmul>
 800189a:	e9c4 0102 	strd	r0, r1, [r4, #8]
	pMPU6050->Accel_Y = (double)MPU6050_Accel_raw.ydata / 8192.0;
 800189e:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 80018a2:	f7fe fe47 	bl	8000534 <__aeabi_i2d>
 80018a6:	2200      	movs	r2, #0
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MPU6050_Accel_double+0x48>)
 80018aa:	f7fe fead 	bl	8000608 <__aeabi_dmul>
 80018ae:	e9c4 0104 	strd	r0, r1, [r4, #16]
	pMPU6050->Accel_Z = (double)MPU6050_Accel_raw.zdata / 8192.0;
 80018b2:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 80018b6:	f7fe fe3d 	bl	8000534 <__aeabi_i2d>
 80018ba:	2200      	movs	r2, #0
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <MPU6050_Accel_double+0x48>)
 80018be:	f7fe fea3 	bl	8000608 <__aeabi_dmul>
 80018c2:	e9c4 0106 	strd	r0, r1, [r4, #24]
}
 80018c6:	bd38      	pop	{r3, r4, r5, pc}
 80018c8:	20000248 	.word	0x20000248
 80018cc:	3f200000 	.word	0x3f200000

080018d0 <MPU6050_Temp_double>:

void MPU6050_Temp_double(MPU6050_struct *pMPU6050)
{
 80018d0:	b510      	push	{r4, lr}
 80018d2:	4604      	mov	r4, r0
	pMPU6050->Temperature = (double)Temperature_raw / 340 + 36.53;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MPU6050_Temp_double+0x30>)
 80018d6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80018da:	f7fe fe2b 	bl	8000534 <__aeabi_i2d>
 80018de:	2200      	movs	r2, #0
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MPU6050_Temp_double+0x34>)
 80018e2:	f7fe ffbb 	bl	800085c <__aeabi_ddiv>
 80018e6:	a304      	add	r3, pc, #16	; (adr r3, 80018f8 <MPU6050_Temp_double+0x28>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fcd6 	bl	800029c <__adddf3>
 80018f0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
 80018f4:	bd10      	pop	{r4, pc}
 80018f6:	bf00      	nop
 80018f8:	0a3d70a4 	.word	0x0a3d70a4
 80018fc:	404243d7 	.word	0x404243d7
 8001900:	20000256 	.word	0x20000256
 8001904:	40754000 	.word	0x40754000

08001908 <MPU6050_Gyro_double>:

void MPU6050_Gyro_double(MPU6050_struct *pMPU6050)
{
 8001908:	b538      	push	{r3, r4, r5, lr}
 800190a:	4604      	mov	r4, r0
	pMPU6050->Gyro_X = (double)MPU6050_Gyro_raw.xdata / 65.5;
 800190c:	4d14      	ldr	r5, [pc, #80]	; (8001960 <MPU6050_Gyro_double+0x58>)
 800190e:	f9b5 0000 	ldrsh.w	r0, [r5]
 8001912:	f7fe fe0f 	bl	8000534 <__aeabi_i2d>
 8001916:	a310      	add	r3, pc, #64	; (adr r3, 8001958 <MPU6050_Gyro_double+0x50>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe ff9e 	bl	800085c <__aeabi_ddiv>
 8001920:	e9c4 0108 	strd	r0, r1, [r4, #32]
	pMPU6050->Gyro_Y = (double)MPU6050_Gyro_raw.ydata / 65.5;
 8001924:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8001928:	f7fe fe04 	bl	8000534 <__aeabi_i2d>
 800192c:	a30a      	add	r3, pc, #40	; (adr r3, 8001958 <MPU6050_Gyro_double+0x50>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe ff93 	bl	800085c <__aeabi_ddiv>
 8001936:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
	pMPU6050->Gyro_Z = (double)MPU6050_Gyro_raw.zdata / 65.5;
 800193a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 800193e:	f7fe fdf9 	bl	8000534 <__aeabi_i2d>
 8001942:	a305      	add	r3, pc, #20	; (adr r3, 8001958 <MPU6050_Gyro_double+0x50>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe ff88 	bl	800085c <__aeabi_ddiv>
 800194c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
}
 8001950:	bd38      	pop	{r3, r4, r5, pc}
 8001952:	bf00      	nop
 8001954:	f3af 8000 	nop.w
 8001958:	00000000 	.word	0x00000000
 800195c:	40506000 	.word	0x40506000
 8001960:	20000250 	.word	0x20000250

08001964 <SI1145_Init>:
uint8_t Calib_data[12];	// Unused

struct SI1145_read SI1145_raw_data;

HAL_StatusTypeDef SI1145_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 8001964:	b084      	sub	sp, #16
 8001966:	b570      	push	{r4, r5, r6, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	ac0a      	add	r4, sp, #40	; 0x28
 800196c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001970:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
	HAL_StatusTypeDef status;
	uint8_t data[2];


	// Mandatory before any I2C operations with this sensor
	data[0] = 0x17;
 8001974:	2317      	movs	r3, #23
 8001976:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_HW_KEY, 1, data, 1, Timeout);
 800197a:	9402      	str	r4, [sp, #8]
 800197c:	2301      	movs	r3, #1
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	aa05      	add	r2, sp, #20
 8001982:	9200      	str	r2, [sp, #0]
 8001984:	2207      	movs	r2, #7
 8001986:	21c0      	movs	r1, #192	; 0xc0
 8001988:	a80a      	add	r0, sp, #40	; 0x28
 800198a:	f003 fc43 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 800198e:	b120      	cbz	r0, 800199a <SI1145_Init+0x36>

	// Start autorun measurement
	data[0] = SI1145_ALS_AUTO;
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
	return status;
}
 8001990:	b006      	add	sp, #24
 8001992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001996:	b004      	add	sp, #16
 8001998:	4770      	bx	lr
	data[0] = SI1145_CMD_RESET;
 800199a:	2501      	movs	r5, #1
 800199c:	f88d 5014 	strb.w	r5, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 80019a0:	9402      	str	r4, [sp, #8]
 80019a2:	9501      	str	r5, [sp, #4]
 80019a4:	ae05      	add	r6, sp, #20
 80019a6:	9600      	str	r6, [sp, #0]
 80019a8:	462b      	mov	r3, r5
 80019aa:	2218      	movs	r2, #24
 80019ac:	21c0      	movs	r1, #192	; 0xc0
 80019ae:	a80a      	add	r0, sp, #40	; 0x28
 80019b0:	f003 fc30 	bl	8005214 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 80019b4:	201e      	movs	r0, #30
 80019b6:	f002 ff21 	bl	80047fc <HAL_Delay>
	data[0] = 0x17;
 80019ba:	2317      	movs	r3, #23
 80019bc:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_HW_KEY, 1, data, 1, Timeout);
 80019c0:	9402      	str	r4, [sp, #8]
 80019c2:	9501      	str	r5, [sp, #4]
 80019c4:	9600      	str	r6, [sp, #0]
 80019c6:	462b      	mov	r3, r5
 80019c8:	2207      	movs	r2, #7
 80019ca:	21c0      	movs	r1, #192	; 0xc0
 80019cc:	a80a      	add	r0, sp, #40	; 0x28
 80019ce:	f003 fc21 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80019d2:	2800      	cmp	r0, #0
 80019d4:	d1dc      	bne.n	8001990 <SI1145_Init+0x2c>
	data[0] = 224;	//LSB
 80019d6:	23e0      	movs	r3, #224	; 0xe0
 80019d8:	f88d 3014 	strb.w	r3, [sp, #20]
	data[1] = 124;	//MSB
 80019dc:	237c      	movs	r3, #124	; 0x7c
 80019de:	f88d 3015 	strb.w	r3, [sp, #21]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_MEAS_RATE_L, 1, data, 4, Timeout);
 80019e2:	9402      	str	r4, [sp, #8]
 80019e4:	2304      	movs	r3, #4
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	9600      	str	r6, [sp, #0]
 80019ea:	462b      	mov	r3, r5
 80019ec:	2208      	movs	r2, #8
 80019ee:	21c0      	movs	r1, #192	; 0xc0
 80019f0:	a80a      	add	r0, sp, #40	; 0x28
 80019f2:	f003 fc0f 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d1ca      	bne.n	8001990 <SI1145_Init+0x2c>
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_UCOEF0, 1, UCOEF, 4, Timeout*2);
 80019fa:	fa04 f305 	lsl.w	r3, r4, r5
 80019fe:	9302      	str	r3, [sp, #8]
 8001a00:	2304      	movs	r3, #4
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <SI1145_Init+0x1a4>)
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	462b      	mov	r3, r5
 8001a0a:	2213      	movs	r2, #19
 8001a0c:	21c0      	movs	r1, #192	; 0xc0
 8001a0e:	a80a      	add	r0, sp, #40	; 0x28
 8001a10:	f003 fc00 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d1bb      	bne.n	8001990 <SI1145_Init+0x2c>
	data[0] = 0b00100000;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_PARAM_WR, 1, data, 1, Timeout);
 8001a1e:	9402      	str	r4, [sp, #8]
 8001a20:	9501      	str	r5, [sp, #4]
 8001a22:	9600      	str	r6, [sp, #0]
 8001a24:	462b      	mov	r3, r5
 8001a26:	2217      	movs	r2, #23
 8001a28:	21c0      	movs	r1, #192	; 0xc0
 8001a2a:	a80a      	add	r0, sp, #40	; 0x28
 8001a2c:	f003 fbf2 	bl	8005214 <HAL_I2C_Mem_Write>
	data[0] = SI1145_CMD_writeRAM | SI1145_RAM_VIS_ADC_MISC;
 8001a30:	23b2      	movs	r3, #178	; 0xb2
 8001a32:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001a36:	9402      	str	r4, [sp, #8]
 8001a38:	9501      	str	r5, [sp, #4]
 8001a3a:	9600      	str	r6, [sp, #0]
 8001a3c:	462b      	mov	r3, r5
 8001a3e:	2218      	movs	r2, #24
 8001a40:	21c0      	movs	r1, #192	; 0xc0
 8001a42:	a80a      	add	r0, sp, #40	; 0x28
 8001a44:	f003 fbe6 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d1a1      	bne.n	8001990 <SI1145_Init+0x2c>
	data[0] = 0b00000000;
 8001a4c:	f88d 0014 	strb.w	r0, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_PARAM_WR, 1, data, 1, Timeout);
 8001a50:	9402      	str	r4, [sp, #8]
 8001a52:	9501      	str	r5, [sp, #4]
 8001a54:	9600      	str	r6, [sp, #0]
 8001a56:	462b      	mov	r3, r5
 8001a58:	2217      	movs	r2, #23
 8001a5a:	21c0      	movs	r1, #192	; 0xc0
 8001a5c:	a80a      	add	r0, sp, #40	; 0x28
 8001a5e:	f003 fbd9 	bl	8005214 <HAL_I2C_Mem_Write>
	data[0] = SI1145_CMD_writeRAM | SI1145_RAM_IR_ADC_MISC;
 8001a62:	23bf      	movs	r3, #191	; 0xbf
 8001a64:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001a68:	9402      	str	r4, [sp, #8]
 8001a6a:	9501      	str	r5, [sp, #4]
 8001a6c:	9600      	str	r6, [sp, #0]
 8001a6e:	462b      	mov	r3, r5
 8001a70:	2218      	movs	r2, #24
 8001a72:	21c0      	movs	r1, #192	; 0xc0
 8001a74:	a80a      	add	r0, sp, #40	; 0x28
 8001a76:	f003 fbcd 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d188      	bne.n	8001990 <SI1145_Init+0x2c>
	data[0] = SI1145_CMD_GET_CAL;
 8001a7e:	2312      	movs	r3, #18
 8001a80:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001a84:	9402      	str	r4, [sp, #8]
 8001a86:	9501      	str	r5, [sp, #4]
 8001a88:	9600      	str	r6, [sp, #0]
 8001a8a:	462b      	mov	r3, r5
 8001a8c:	2218      	movs	r2, #24
 8001a8e:	21c0      	movs	r1, #192	; 0xc0
 8001a90:	a80a      	add	r0, sp, #40	; 0x28
 8001a92:	f003 fbbf 	bl	8005214 <HAL_I2C_Mem_Write>
	status = HAL_I2C_Mem_Read(&handle, SI1145_Address, SI1145_VIS_DATA_L , 1, Calib_data, 12, Timeout*6);
 8001a96:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001a9a:	40ab      	lsls	r3, r5
 8001a9c:	9302      	str	r3, [sp, #8]
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <SI1145_Init+0x1a8>)
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	462b      	mov	r3, r5
 8001aa8:	2222      	movs	r2, #34	; 0x22
 8001aaa:	21c0      	movs	r1, #192	; 0xc0
 8001aac:	a80a      	add	r0, sp, #40	; 0x28
 8001aae:	f003 fc63 	bl	8005378 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	f47f af6c 	bne.w	8001990 <SI1145_Init+0x2c>
	data[0] = 0b10110000;
 8001ab8:	23b0      	movs	r3, #176	; 0xb0
 8001aba:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_PARAM_WR, 1, data, 1, Timeout);
 8001abe:	9402      	str	r4, [sp, #8]
 8001ac0:	9501      	str	r5, [sp, #4]
 8001ac2:	9600      	str	r6, [sp, #0]
 8001ac4:	462b      	mov	r3, r5
 8001ac6:	2217      	movs	r2, #23
 8001ac8:	21c0      	movs	r1, #192	; 0xc0
 8001aca:	a80a      	add	r0, sp, #40	; 0x28
 8001acc:	f003 fba2 	bl	8005214 <HAL_I2C_Mem_Write>
	data[0] = SI1145_CMD_writeRAM | SI1145_RAM_CHLIST;
 8001ad0:	23a1      	movs	r3, #161	; 0xa1
 8001ad2:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001ad6:	9402      	str	r4, [sp, #8]
 8001ad8:	9501      	str	r5, [sp, #4]
 8001ada:	9600      	str	r6, [sp, #0]
 8001adc:	462b      	mov	r3, r5
 8001ade:	2218      	movs	r2, #24
 8001ae0:	21c0      	movs	r1, #192	; 0xc0
 8001ae2:	a80a      	add	r0, sp, #40	; 0x28
 8001ae4:	f003 fb96 	bl	8005214 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	f47f af51 	bne.w	8001990 <SI1145_Init+0x2c>
	data[0] = SI1145_ALS_AUTO;
 8001aee:	230e      	movs	r3, #14
 8001af0:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001af4:	9402      	str	r4, [sp, #8]
 8001af6:	462b      	mov	r3, r5
 8001af8:	9501      	str	r5, [sp, #4]
 8001afa:	9600      	str	r6, [sp, #0]
 8001afc:	2218      	movs	r2, #24
 8001afe:	21c0      	movs	r1, #192	; 0xc0
 8001b00:	a80a      	add	r0, sp, #40	; 0x28
 8001b02:	f003 fb87 	bl	8005214 <HAL_I2C_Mem_Write>
	return status;
 8001b06:	e743      	b.n	8001990 <SI1145_Init+0x2c>
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000258 	.word	0x20000258

08001b10 <SI1145_read_ID>:



HAL_StatusTypeDef SI1145_read_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 8001b10:	b084      	sub	sp, #16
 8001b12:	b500      	push	{lr}
 8001b14:	b085      	sub	sp, #20
 8001b16:	f10d 0c18 	add.w	ip, sp, #24
 8001b1a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	return HAL_I2C_Mem_Read(&handle, SI1145_Address, SI1145_PART_ID, 1, ptr_ID, 1, Timeout);
 8001b1e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	2301      	movs	r3, #1
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001b2a:	9200      	str	r2, [sp, #0]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	21c0      	movs	r1, #192	; 0xc0
 8001b30:	4660      	mov	r0, ip
 8001b32:	f003 fc21 	bl	8005378 <HAL_I2C_Mem_Read>
}
 8001b36:	b005      	add	sp, #20
 8001b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b3c:	b004      	add	sp, #16
 8001b3e:	4770      	bx	lr

08001b40 <SI1145_Read_Data>:



HAL_StatusTypeDef SI1145_Read_Data(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 8001b40:	b084      	sub	sp, #16
 8001b42:	b500      	push	{lr}
 8001b44:	b089      	sub	sp, #36	; 0x24
 8001b46:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001b4a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t data[12];

	status = HAL_I2C_Mem_Read(&handle, SI1145_Address, SI1145_VIS_DATA_L , 1, data, 12, Timeout);
 8001b4e:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8001b52:	9302      	str	r3, [sp, #8]
 8001b54:	230c      	movs	r3, #12
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	ab05      	add	r3, sp, #20
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	2222      	movs	r2, #34	; 0x22
 8001b60:	21c0      	movs	r1, #192	; 0xc0
 8001b62:	4660      	mov	r0, ip
 8001b64:	f003 fc08 	bl	8005378 <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8001b68:	b9a8      	cbnz	r0, 8001b96 <SI1145_Read_Data+0x56>
		return status;

	SI1145_raw_data.VIS = data[1] << 8 | data[0];
 8001b6a:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001b6e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001b72:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <SI1145_Read_Data+0x60>)
 8001b78:	809a      	strh	r2, [r3, #4]
	SI1145_raw_data.IR = data[3] << 8 | data[2];
 8001b7a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8001b7e:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001b82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b86:	805a      	strh	r2, [r3, #2]
	SI1145_raw_data.UV = data[11] << 8 | data[10];
 8001b88:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8001b8c:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8001b90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b94:	801a      	strh	r2, [r3, #0]

	return status;
}
 8001b96:	b009      	add	sp, #36	; 0x24
 8001b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b9c:	b004      	add	sp, #16
 8001b9e:	4770      	bx	lr
 8001ba0:	20000264 	.word	0x20000264

08001ba4 <SI1145_IR_raw>:


uint16_t SI1145_IR_raw()
{
	return SI1145_raw_data.IR;
}
 8001ba4:	4b01      	ldr	r3, [pc, #4]	; (8001bac <SI1145_IR_raw+0x8>)
 8001ba6:	8858      	ldrh	r0, [r3, #2]
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000264 	.word	0x20000264

08001bb0 <SI1145_VIS_raw>:


uint16_t SI1145_VIS_raw()
{
	return SI1145_raw_data.VIS;
}
 8001bb0:	4b01      	ldr	r3, [pc, #4]	; (8001bb8 <SI1145_VIS_raw+0x8>)
 8001bb2:	8898      	ldrh	r0, [r3, #4]
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000264 	.word	0x20000264

08001bbc <SI1145_UV_double>:


double SI1145_UV_double()
{
 8001bbc:	b508      	push	{r3, lr}
	return (double)SI1145_raw_data.UV / 100;
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <SI1145_UV_double+0x18>)
 8001bc0:	8818      	ldrh	r0, [r3, #0]
 8001bc2:	f7fe fca7 	bl	8000514 <__aeabi_ui2d>
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <SI1145_UV_double+0x1c>)
 8001bca:	f7fe fe47 	bl	800085c <__aeabi_ddiv>
}
 8001bce:	ec41 0b10 	vmov	d0, r0, r1
 8001bd2:	bd08      	pop	{r3, pc}
 8001bd4:	20000264 	.word	0x20000264
 8001bd8:	40590000 	.word	0x40590000

08001bdc <SD_PowerOff>:
}

/* power off */
static void SD_PowerOff(void) 
{
	PowerFlag = 0;
 8001bdc:	4b01      	ldr	r3, [pc, #4]	; (8001be4 <SD_PowerOff+0x8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
}
 8001be2:	4770      	bx	lr
 8001be4:	2000026b 	.word	0x2000026b

08001be8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
	return PowerFlag;
}
 8001be8:	4b01      	ldr	r3, [pc, #4]	; (8001bf0 <SD_CheckPower+0x8>)
 8001bea:	7818      	ldrb	r0, [r3, #0]
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000026b 	.word	0x2000026b

08001bf4 <SPI_TxBuffer>:
{
 8001bf4:	b508      	push	{r3, lr}
 8001bf6:	460a      	mov	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SPI_TxBuffer+0x1c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f013 0f02 	tst.w	r3, #2
 8001c02:	d0f9      	beq.n	8001bf8 <SPI_TxBuffer+0x4>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	4601      	mov	r1, r0
 8001c08:	4801      	ldr	r0, [pc, #4]	; (8001c10 <SPI_TxBuffer+0x1c>)
 8001c0a:	f004 fbde 	bl	80063ca <HAL_SPI_Transmit>
}
 8001c0e:	bd08      	pop	{r3, pc}
 8001c10:	20000b0c 	.word	0x20000b0c

08001c14 <SPI_TxByte>:
{
 8001c14:	b500      	push	{lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <SPI_TxByte+0x28>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f013 0f02 	tst.w	r3, #2
 8001c26:	d0f9      	beq.n	8001c1c <SPI_TxByte+0x8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001c28:	2364      	movs	r3, #100	; 0x64
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f10d 0107 	add.w	r1, sp, #7
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <SPI_TxByte+0x28>)
 8001c32:	f004 fbca 	bl	80063ca <HAL_SPI_Transmit>
}
 8001c36:	b003      	add	sp, #12
 8001c38:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c3c:	20000b0c 	.word	0x20000b0c

08001c40 <SELECT>:
{
 8001c40:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2110      	movs	r1, #16
 8001c46:	4803      	ldr	r0, [pc, #12]	; (8001c54 <SELECT+0x14>)
 8001c48:	f002 ff9d 	bl	8004b86 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f002 fdd5 	bl	80047fc <HAL_Delay>
}
 8001c52:	bd08      	pop	{r3, pc}
 8001c54:	40020000 	.word	0x40020000

08001c58 <DESELECT>:
{
 8001c58:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2110      	movs	r1, #16
 8001c5e:	4803      	ldr	r0, [pc, #12]	; (8001c6c <DESELECT+0x14>)
 8001c60:	f002 ff91 	bl	8004b86 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f002 fdc9 	bl	80047fc <HAL_Delay>
}
 8001c6a:	bd08      	pop	{r3, pc}
 8001c6c:	40020000 	.word	0x40020000

08001c70 <SPI_RxByte>:
{
 8001c70:	b500      	push	{lr}
 8001c72:	b085      	sub	sp, #20
	dummy = 0xFF;
 8001c74:	23ff      	movs	r3, #255	; 0xff
 8001c76:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <SPI_RxByte+0x34>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f013 0f02 	tst.w	r3, #2
 8001c84:	d0f9      	beq.n	8001c7a <SPI_RxByte+0xa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c86:	2364      	movs	r3, #100	; 0x64
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f10d 020e 	add.w	r2, sp, #14
 8001c90:	f10d 010f 	add.w	r1, sp, #15
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <SPI_RxByte+0x34>)
 8001c96:	f004 fc74 	bl	8006582 <HAL_SPI_TransmitReceive>
}
 8001c9a:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001c9e:	b005      	add	sp, #20
 8001ca0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ca4:	20000b0c 	.word	0x20000b0c

08001ca8 <SD_PowerOn>:
{
 8001ca8:	b510      	push	{r4, lr}
 8001caa:	b082      	sub	sp, #8
	DESELECT();
 8001cac:	f7ff ffd4 	bl	8001c58 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001cb0:	2400      	movs	r4, #0
 8001cb2:	e003      	b.n	8001cbc <SD_PowerOn+0x14>
		SPI_TxByte(0xFF);
 8001cb4:	20ff      	movs	r0, #255	; 0xff
 8001cb6:	f7ff ffad 	bl	8001c14 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001cba:	3401      	adds	r4, #1
 8001cbc:	2c09      	cmp	r4, #9
 8001cbe:	ddf9      	ble.n	8001cb4 <SD_PowerOn+0xc>
	SELECT();
 8001cc0:	f7ff ffbe 	bl	8001c40 <SELECT>
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001cc4:	2340      	movs	r3, #64	; 0x40
 8001cc6:	f88d 3000 	strb.w	r3, [sp]
	args[1] = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f88d 3001 	strb.w	r3, [sp, #1]
	args[2] = 0;
 8001cd0:	f88d 3002 	strb.w	r3, [sp, #2]
	args[3] = 0;
 8001cd4:	f88d 3003 	strb.w	r3, [sp, #3]
	args[4] = 0;
 8001cd8:	f88d 3004 	strb.w	r3, [sp, #4]
	args[5] = 0x95;		/* CRC */
 8001cdc:	2395      	movs	r3, #149	; 0x95
 8001cde:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxBuffer(args, sizeof(args));
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	4668      	mov	r0, sp
 8001ce6:	f7ff ff85 	bl	8001bf4 <SPI_TxBuffer>
	uint32_t cnt = 0x1FFF;
 8001cea:	f641 74ff 	movw	r4, #8191	; 0x1fff
	while ((SPI_RxByte() != 0x01) && cnt)
 8001cee:	f7ff ffbf 	bl	8001c70 <SPI_RxByte>
 8001cf2:	2801      	cmp	r0, #1
 8001cf4:	d002      	beq.n	8001cfc <SD_PowerOn+0x54>
 8001cf6:	b10c      	cbz	r4, 8001cfc <SD_PowerOn+0x54>
		cnt--;
 8001cf8:	3c01      	subs	r4, #1
 8001cfa:	e7f8      	b.n	8001cee <SD_PowerOn+0x46>
	DESELECT();
 8001cfc:	f7ff ffac 	bl	8001c58 <DESELECT>
	SPI_TxByte(0XFF);
 8001d00:	20ff      	movs	r0, #255	; 0xff
 8001d02:	f7ff ff87 	bl	8001c14 <SPI_TxByte>
	PowerFlag = 1;
 8001d06:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <SD_PowerOn+0x68>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
}
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd10      	pop	{r4, pc}
 8001d10:	2000026b 	.word	0x2000026b

08001d14 <SD_ReadyWait>:
{
 8001d14:	b538      	push	{r3, r4, r5, lr}
	tickstart = HAL_GetTick();
 8001d16:	f002 fd6b 	bl	80047f0 <HAL_GetTick>
 8001d1a:	4605      	mov	r5, r0
		res = SPI_RxByte();
 8001d1c:	f7ff ffa8 	bl	8001c70 <SPI_RxByte>
 8001d20:	4604      	mov	r4, r0
	} while ((res != 0xFF) && ((HAL_GetTick() - tickstart) < SD_ReadyWait_TIMEOUT));
 8001d22:	28ff      	cmp	r0, #255	; 0xff
 8001d24:	d005      	beq.n	8001d32 <SD_ReadyWait+0x1e>
 8001d26:	f002 fd63 	bl	80047f0 <HAL_GetTick>
 8001d2a:	1b40      	subs	r0, r0, r5
 8001d2c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001d30:	d3f4      	bcc.n	8001d1c <SD_ReadyWait+0x8>
}
 8001d32:	4620      	mov	r0, r4
 8001d34:	bd38      	pop	{r3, r4, r5, pc}

08001d36 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001d36:	b538      	push	{r3, r4, r5, lr}
 8001d38:	4605      	mov	r5, r0
 8001d3a:	460c      	mov	r4, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001d3c:	f7ff ffea 	bl	8001d14 <SD_ReadyWait>
 8001d40:	28ff      	cmp	r0, #255	; 0xff
 8001d42:	d001      	beq.n	8001d48 <SD_SendCmd+0x12>
 8001d44:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(cmd); 					/* Command */
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f7ff ff63 	bl	8001c14 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001d4e:	0e20      	lsrs	r0, r4, #24
 8001d50:	f7ff ff60 	bl	8001c14 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001d54:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001d58:	f7ff ff5c 	bl	8001c14 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001d5c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001d60:	f7ff ff58 	bl	8001c14 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001d64:	b2e0      	uxtb	r0, r4
 8001d66:	f7ff ff55 	bl	8001c14 <SPI_TxByte>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001d6a:	2d40      	cmp	r5, #64	; 0x40
 8001d6c:	d013      	beq.n	8001d96 <SD_SendCmd+0x60>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d6e:	2d48      	cmp	r5, #72	; 0x48
 8001d70:	d00f      	beq.n	8001d92 <SD_SendCmd+0x5c>
	else crc = 1;
 8001d72:	2001      	movs	r0, #1
	SPI_TxByte(crc);
 8001d74:	f7ff ff4e 	bl	8001c14 <SPI_TxByte>
	if (cmd == CMD12) SPI_RxByte();
 8001d78:	2d4c      	cmp	r5, #76	; 0x4c
 8001d7a:	d00e      	beq.n	8001d9a <SD_SendCmd+0x64>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d7c:	240a      	movs	r4, #10
		res = SPI_RxByte();
 8001d7e:	f7ff ff77 	bl	8001c70 <SPI_RxByte>
	} while ((res & 0x80) && --n);
 8001d82:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d86:	d0de      	beq.n	8001d46 <SD_SendCmd+0x10>
 8001d88:	1e63      	subs	r3, r4, #1
 8001d8a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001d8e:	d1f6      	bne.n	8001d7e <SD_SendCmd+0x48>
 8001d90:	e7d9      	b.n	8001d46 <SD_SendCmd+0x10>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d92:	2087      	movs	r0, #135	; 0x87
 8001d94:	e7ee      	b.n	8001d74 <SD_SendCmd+0x3e>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001d96:	2095      	movs	r0, #149	; 0x95
 8001d98:	e7ec      	b.n	8001d74 <SD_SendCmd+0x3e>
	if (cmd == CMD12) SPI_RxByte();
 8001d9a:	f7ff ff69 	bl	8001c70 <SPI_RxByte>
 8001d9e:	e7ed      	b.n	8001d7c <SD_SendCmd+0x46>

08001da0 <SPI_RxBytePtr>:
{
 8001da0:	b510      	push	{r4, lr}
 8001da2:	4604      	mov	r4, r0
	*buff = SPI_RxByte();
 8001da4:	f7ff ff64 	bl	8001c70 <SPI_RxByte>
 8001da8:	7020      	strb	r0, [r4, #0]
}
 8001daa:	bd10      	pop	{r4, pc}

08001dac <SD_RxDataBlock>:
{
 8001dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dae:	4605      	mov	r5, r0
 8001db0:	460e      	mov	r6, r1
	tickstart = HAL_GetTick();
 8001db2:	f002 fd1d 	bl	80047f0 <HAL_GetTick>
 8001db6:	4607      	mov	r7, r0
		token = SPI_RxByte();
 8001db8:	f7ff ff5a 	bl	8001c70 <SPI_RxByte>
 8001dbc:	4604      	mov	r4, r0
	} while((token == 0xFF) && ((HAL_GetTick() - tickstart) < SD_RxDataBlock_TIMEOUT));
 8001dbe:	28ff      	cmp	r0, #255	; 0xff
 8001dc0:	d104      	bne.n	8001dcc <SD_RxDataBlock+0x20>
 8001dc2:	f002 fd15 	bl	80047f0 <HAL_GetTick>
 8001dc6:	1bc0      	subs	r0, r0, r7
 8001dc8:	28c7      	cmp	r0, #199	; 0xc7
 8001dca:	d9f5      	bls.n	8001db8 <SD_RxDataBlock+0xc>
	if(token != 0xFE) return FALSE;
 8001dcc:	2cfe      	cmp	r4, #254	; 0xfe
 8001dce:	d10d      	bne.n	8001dec <SD_RxDataBlock+0x40>
		SPI_RxBytePtr(buff++);
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	3501      	adds	r5, #1
 8001dd4:	f7ff ffe4 	bl	8001da0 <SPI_RxBytePtr>
	} while(len--);
 8001dd8:	4633      	mov	r3, r6
 8001dda:	3e01      	subs	r6, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f7      	bne.n	8001dd0 <SD_RxDataBlock+0x24>
	SPI_RxByte();
 8001de0:	f7ff ff46 	bl	8001c70 <SPI_RxByte>
	SPI_RxByte();
 8001de4:	f7ff ff44 	bl	8001c70 <SPI_RxByte>
	return TRUE;
 8001de8:	2001      	movs	r0, #1
}
 8001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(token != 0xFE) return FALSE;
 8001dec:	2000      	movs	r0, #0
 8001dee:	e7fc      	b.n	8001dea <SD_RxDataBlock+0x3e>

08001df0 <SD_TxDataBlock>:
{
 8001df0:	b538      	push	{r3, r4, r5, lr}
 8001df2:	4605      	mov	r5, r0
 8001df4:	460c      	mov	r4, r1
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001df6:	f7ff ff8d 	bl	8001d14 <SD_ReadyWait>
 8001dfa:	28ff      	cmp	r0, #255	; 0xff
 8001dfc:	d001      	beq.n	8001e02 <SD_TxDataBlock+0x12>
 8001dfe:	2000      	movs	r0, #0
}
 8001e00:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(token);
 8001e02:	4620      	mov	r0, r4
 8001e04:	f7ff ff06 	bl	8001c14 <SPI_TxByte>
	if (token != 0xFD)
 8001e08:	2cfd      	cmp	r4, #253	; 0xfd
 8001e0a:	d106      	bne.n	8001e1a <SD_TxDataBlock+0x2a>
	uint8_t resp = 0;
 8001e0c:	2500      	movs	r5, #0
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001e0e:	f005 051f 	and.w	r5, r5, #31
 8001e12:	2d05      	cmp	r5, #5
 8001e14:	d01d      	beq.n	8001e52 <SD_TxDataBlock+0x62>
	return FALSE;
 8001e16:	2000      	movs	r0, #0
 8001e18:	e7f2      	b.n	8001e00 <SD_TxDataBlock+0x10>
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f7ff fee8 	bl	8001bf4 <SPI_TxBuffer>
		SPI_RxByte();
 8001e24:	f7ff ff24 	bl	8001c70 <SPI_RxByte>
		SPI_RxByte();
 8001e28:	f7ff ff22 	bl	8001c70 <SPI_RxByte>
	uint8_t i = 0;
 8001e2c:	2400      	movs	r4, #0
	uint8_t resp = 0;
 8001e2e:	4625      	mov	r5, r4
		while (i <= 64)
 8001e30:	e001      	b.n	8001e36 <SD_TxDataBlock+0x46>
			i++;
 8001e32:	3401      	adds	r4, #1
 8001e34:	b2e4      	uxtb	r4, r4
		while (i <= 64)
 8001e36:	2c40      	cmp	r4, #64	; 0x40
 8001e38:	d806      	bhi.n	8001e48 <SD_TxDataBlock+0x58>
			resp = SPI_RxByte();
 8001e3a:	f7ff ff19 	bl	8001c70 <SPI_RxByte>
 8001e3e:	4605      	mov	r5, r0
			if ((resp & 0x1F) == 0x05) break;
 8001e40:	f000 031f 	and.w	r3, r0, #31
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d1f4      	bne.n	8001e32 <SD_TxDataBlock+0x42>
		while (SPI_RxByte() == 0);
 8001e48:	f7ff ff12 	bl	8001c70 <SPI_RxByte>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d0fb      	beq.n	8001e48 <SD_TxDataBlock+0x58>
 8001e50:	e7dd      	b.n	8001e0e <SD_TxDataBlock+0x1e>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001e52:	2001      	movs	r0, #1
 8001e54:	e7d4      	b.n	8001e00 <SD_TxDataBlock+0x10>
	...

08001e58 <SD_disk_initialize>:
	uint8_t n, type, ocr[4];
	uint32_t tickstart;


	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	f040 80bb 	bne.w	8001fd4 <SD_disk_initialize+0x17c>
{
 8001e5e:	b570      	push	{r4, r5, r6, lr}
 8001e60:	b082      	sub	sp, #8

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001e62:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <SD_disk_initialize+0x180>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	f013 0402 	ands.w	r4, r3, #2
 8001e6a:	d004      	beq.n	8001e76 <SD_disk_initialize+0x1e>
 8001e6c:	4b5a      	ldr	r3, [pc, #360]	; (8001fd8 <SD_disk_initialize+0x180>)
 8001e6e:	7818      	ldrb	r0, [r3, #0]
 8001e70:	b2c0      	uxtb	r0, r0
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
}
 8001e72:	b002      	add	sp, #8
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
	SD_PowerOn();
 8001e76:	f7ff ff17 	bl	8001ca8 <SD_PowerOn>
	SELECT();
 8001e7a:	f7ff fee1 	bl	8001c40 <SELECT>
	if (SD_SendCmd(CMD0, 0) == 1)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2040      	movs	r0, #64	; 0x40
 8001e82:	f7ff ff58 	bl	8001d36 <SD_SendCmd>
 8001e86:	4605      	mov	r5, r0
 8001e88:	2801      	cmp	r0, #1
 8001e8a:	d011      	beq.n	8001eb0 <SD_disk_initialize+0x58>
	CardType = type;
 8001e8c:	4b53      	ldr	r3, [pc, #332]	; (8001fdc <SD_disk_initialize+0x184>)
 8001e8e:	701c      	strb	r4, [r3, #0]
	DESELECT();
 8001e90:	f7ff fee2 	bl	8001c58 <DESELECT>
	SPI_RxByte();
 8001e94:	f7ff feec 	bl	8001c70 <SPI_RxByte>
	if (type)
 8001e98:	2c00      	cmp	r4, #0
 8001e9a:	f000 8098 	beq.w	8001fce <SD_disk_initialize+0x176>
		Stat &= ~STA_NOINIT;
 8001e9e:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <SD_disk_initialize+0x180>)
 8001ea0:	7813      	ldrb	r3, [r2, #0]
 8001ea2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001ea6:	7013      	strb	r3, [r2, #0]
	return Stat;
 8001ea8:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <SD_disk_initialize+0x180>)
 8001eaa:	7818      	ldrb	r0, [r3, #0]
 8001eac:	b2c0      	uxtb	r0, r0
 8001eae:	e7e0      	b.n	8001e72 <SD_disk_initialize+0x1a>
		tickstart = HAL_GetTick();
 8001eb0:	f002 fc9e 	bl	80047f0 <HAL_GetTick>
 8001eb4:	4606      	mov	r6, r0
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001eb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001eba:	2048      	movs	r0, #72	; 0x48
 8001ebc:	f7ff ff3b 	bl	8001d36 <SD_SendCmd>
 8001ec0:	2801      	cmp	r0, #1
 8001ec2:	d148      	bne.n	8001f56 <SD_disk_initialize+0xfe>
			for (n = 0; n < 4; n++)
 8001ec4:	4625      	mov	r5, r4
 8001ec6:	e008      	b.n	8001eda <SD_disk_initialize+0x82>
				ocr[n] = SPI_RxByte();
 8001ec8:	f7ff fed2 	bl	8001c70 <SPI_RxByte>
 8001ecc:	f105 0308 	add.w	r3, r5, #8
 8001ed0:	446b      	add	r3, sp
 8001ed2:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++)
 8001ed6:	3501      	adds	r5, #1
 8001ed8:	b2ed      	uxtb	r5, r5
 8001eda:	2d03      	cmp	r5, #3
 8001edc:	d9f4      	bls.n	8001ec8 <SD_disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001ede:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d1d2      	bne.n	8001e8c <SD_disk_initialize+0x34>
 8001ee6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001eea:	2baa      	cmp	r3, #170	; 0xaa
 8001eec:	d1ce      	bne.n	8001e8c <SD_disk_initialize+0x34>
 8001eee:	e005      	b.n	8001efc <SD_disk_initialize+0xa4>
				} while ((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT);
 8001ef0:	f002 fc7e 	bl	80047f0 <HAL_GetTick>
 8001ef4:	1b80      	subs	r0, r0, r6
 8001ef6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001efa:	d20c      	bcs.n	8001f16 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001efc:	2100      	movs	r1, #0
 8001efe:	2077      	movs	r0, #119	; 0x77
 8001f00:	f7ff ff19 	bl	8001d36 <SD_SendCmd>
 8001f04:	2801      	cmp	r0, #1
 8001f06:	d8f3      	bhi.n	8001ef0 <SD_disk_initialize+0x98>
 8001f08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f0c:	2069      	movs	r0, #105	; 0x69
 8001f0e:	f7ff ff12 	bl	8001d36 <SD_SendCmd>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	d1ec      	bne.n	8001ef0 <SD_disk_initialize+0x98>
				if (((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT) && SD_SendCmd(CMD58, 0) == 0)
 8001f16:	f002 fc6b 	bl	80047f0 <HAL_GetTick>
 8001f1a:	1b86      	subs	r6, r0, r6
 8001f1c:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 8001f20:	d2b4      	bcs.n	8001e8c <SD_disk_initialize+0x34>
 8001f22:	2100      	movs	r1, #0
 8001f24:	207a      	movs	r0, #122	; 0x7a
 8001f26:	f7ff ff06 	bl	8001d36 <SD_SendCmd>
 8001f2a:	4605      	mov	r5, r0
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	d1ad      	bne.n	8001e8c <SD_disk_initialize+0x34>
					for (n = 0; n < 4; n++)
 8001f30:	2d03      	cmp	r5, #3
 8001f32:	d809      	bhi.n	8001f48 <SD_disk_initialize+0xf0>
						ocr[n] = SPI_RxByte();
 8001f34:	f7ff fe9c 	bl	8001c70 <SPI_RxByte>
 8001f38:	f105 0308 	add.w	r3, r5, #8
 8001f3c:	446b      	add	r3, sp
 8001f3e:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)
 8001f42:	3501      	adds	r5, #1
 8001f44:	b2ed      	uxtb	r5, r5
 8001f46:	e7f3      	b.n	8001f30 <SD_disk_initialize+0xd8>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001f48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f50:	d03b      	beq.n	8001fca <SD_disk_initialize+0x172>
 8001f52:	240c      	movs	r4, #12
 8001f54:	e79a      	b.n	8001e8c <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001f56:	2100      	movs	r1, #0
 8001f58:	2077      	movs	r0, #119	; 0x77
 8001f5a:	f7ff feec 	bl	8001d36 <SD_SendCmd>
 8001f5e:	2801      	cmp	r0, #1
 8001f60:	d813      	bhi.n	8001f8a <SD_disk_initialize+0x132>
 8001f62:	2100      	movs	r1, #0
 8001f64:	2069      	movs	r0, #105	; 0x69
 8001f66:	f7ff fee6 	bl	8001d36 <SD_SendCmd>
 8001f6a:	2801      	cmp	r0, #1
 8001f6c:	d80d      	bhi.n	8001f8a <SD_disk_initialize+0x132>
 8001f6e:	2502      	movs	r5, #2
 8001f70:	e00b      	b.n	8001f8a <SD_disk_initialize+0x132>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001f72:	2100      	movs	r1, #0
 8001f74:	2077      	movs	r0, #119	; 0x77
 8001f76:	f7ff fede 	bl	8001d36 <SD_SendCmd>
 8001f7a:	2801      	cmp	r0, #1
 8001f7c:	d91e      	bls.n	8001fbc <SD_disk_initialize+0x164>
			} while ((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT);
 8001f7e:	f002 fc37 	bl	80047f0 <HAL_GetTick>
 8001f82:	1b83      	subs	r3, r0, r6
 8001f84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f88:	d207      	bcs.n	8001f9a <SD_disk_initialize+0x142>
				if (type == CT_SD1)
 8001f8a:	2d02      	cmp	r5, #2
 8001f8c:	d0f1      	beq.n	8001f72 <SD_disk_initialize+0x11a>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2041      	movs	r0, #65	; 0x41
 8001f92:	f7ff fed0 	bl	8001d36 <SD_SendCmd>
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d1f1      	bne.n	8001f7e <SD_disk_initialize+0x126>
			if (((HAL_GetTick() - tickstart) >= SD_disk_init_TIMEOUT) || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001f9a:	f002 fc29 	bl	80047f0 <HAL_GetTick>
 8001f9e:	1b86      	subs	r6, r0, r6
 8001fa0:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 8001fa4:	f4bf af72 	bcs.w	8001e8c <SD_disk_initialize+0x34>
 8001fa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fac:	2050      	movs	r0, #80	; 0x50
 8001fae:	f7ff fec2 	bl	8001d36 <SD_SendCmd>
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	f47f af6a 	bne.w	8001e8c <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001fb8:	462c      	mov	r4, r5
 8001fba:	e767      	b.n	8001e8c <SD_disk_initialize+0x34>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2069      	movs	r0, #105	; 0x69
 8001fc0:	f7ff feb9 	bl	8001d36 <SD_SendCmd>
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d1da      	bne.n	8001f7e <SD_disk_initialize+0x126>
 8001fc8:	e7e7      	b.n	8001f9a <SD_disk_initialize+0x142>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001fca:	2404      	movs	r4, #4
 8001fcc:	e75e      	b.n	8001e8c <SD_disk_initialize+0x34>
		SD_PowerOff();
 8001fce:	f7ff fe05 	bl	8001bdc <SD_PowerOff>
 8001fd2:	e769      	b.n	8001ea8 <SD_disk_initialize+0x50>
	if(drv) return STA_NOINIT;
 8001fd4:	2001      	movs	r0, #1
}
 8001fd6:	4770      	bx	lr
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	2000026a 	.word	0x2000026a

08001fe0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 8001fe0:	b918      	cbnz	r0, 8001fea <SD_disk_status+0xa>
	return Stat;
 8001fe2:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <SD_disk_status+0x10>)
 8001fe4:	7818      	ldrb	r0, [r3, #0]
 8001fe6:	b2c0      	uxtb	r0, r0
 8001fe8:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8001fea:	2001      	movs	r0, #1
}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	d13e      	bne.n	8002076 <SD_disk_read+0x82>
{
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	460d      	mov	r5, r1
 8001ffc:	4616      	mov	r6, r2
 8001ffe:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8002000:	2b00      	cmp	r3, #0
 8002002:	d03a      	beq.n	800207a <SD_disk_read+0x86>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <SD_disk_read+0x90>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f013 0f01 	tst.w	r3, #1
 800200c:	d137      	bne.n	800207e <SD_disk_read+0x8a>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <SD_disk_read+0x94>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	f013 0f04 	tst.w	r3, #4
 8002016:	d100      	bne.n	800201a <SD_disk_read+0x26>
 8002018:	0256      	lsls	r6, r2, #9

	SELECT();
 800201a:	f7ff fe11 	bl	8001c40 <SELECT>

	if (count == 1)
 800201e:	2c01      	cmp	r4, #1
 8002020:	d01a      	beq.n	8002058 <SD_disk_read+0x64>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8002022:	4631      	mov	r1, r6
 8002024:	2052      	movs	r0, #82	; 0x52
 8002026:	f7ff fe86 	bl	8001d36 <SD_SendCmd>
 800202a:	b968      	cbnz	r0, 8002048 <SD_disk_read+0x54>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800202c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002030:	4628      	mov	r0, r5
 8002032:	f7ff febb 	bl	8001dac <SD_RxDataBlock>
 8002036:	b118      	cbz	r0, 8002040 <SD_disk_read+0x4c>
				buff += 512;
 8002038:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 800203c:	3c01      	subs	r4, #1
 800203e:	d1f5      	bne.n	800202c <SD_disk_read+0x38>

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002040:	2100      	movs	r1, #0
 8002042:	204c      	movs	r0, #76	; 0x4c
 8002044:	f7ff fe77 	bl	8001d36 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002048:	f7ff fe06 	bl	8001c58 <DESELECT>
	SPI_RxByte();
 800204c:	f7ff fe10 	bl	8001c70 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002050:	1e20      	subs	r0, r4, #0
 8002052:	bf18      	it	ne
 8002054:	2001      	movne	r0, #1
}
 8002056:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002058:	4631      	mov	r1, r6
 800205a:	2051      	movs	r0, #81	; 0x51
 800205c:	f7ff fe6b 	bl	8001d36 <SD_SendCmd>
 8002060:	2800      	cmp	r0, #0
 8002062:	d1f1      	bne.n	8002048 <SD_disk_read+0x54>
 8002064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002068:	4628      	mov	r0, r5
 800206a:	f7ff fe9f 	bl	8001dac <SD_RxDataBlock>
 800206e:	2800      	cmp	r0, #0
 8002070:	d0ea      	beq.n	8002048 <SD_disk_read+0x54>
 8002072:	2400      	movs	r4, #0
 8002074:	e7e8      	b.n	8002048 <SD_disk_read+0x54>
	if (pdrv || !count) return RES_PARERR;
 8002076:	2004      	movs	r0, #4
}
 8002078:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 800207a:	2004      	movs	r0, #4
 800207c:	e7eb      	b.n	8002056 <SD_disk_read+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800207e:	2003      	movs	r0, #3
 8002080:	e7e9      	b.n	8002056 <SD_disk_read+0x62>
 8002082:	bf00      	nop
 8002084:	20000004 	.word	0x20000004
 8002088:	2000026a 	.word	0x2000026a

0800208c <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800208c:	2800      	cmp	r0, #0
 800208e:	d152      	bne.n	8002136 <SD_disk_write+0xaa>
{
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	460d      	mov	r5, r1
 8002094:	4616      	mov	r6, r2
 8002096:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8002098:	2b00      	cmp	r3, #0
 800209a:	d04e      	beq.n	800213a <SD_disk_write+0xae>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <SD_disk_write+0xbc>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	f013 0f01 	tst.w	r3, #1
 80020a4:	d14b      	bne.n	800213e <SD_disk_write+0xb2>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <SD_disk_write+0xbc>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	f013 0f04 	tst.w	r3, #4
 80020ae:	d148      	bne.n	8002142 <SD_disk_write+0xb6>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80020b0:	4b26      	ldr	r3, [pc, #152]	; (800214c <SD_disk_write+0xc0>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	f013 0f04 	tst.w	r3, #4
 80020b8:	d100      	bne.n	80020bc <SD_disk_write+0x30>
 80020ba:	0256      	lsls	r6, r2, #9

	SELECT();
 80020bc:	f7ff fdc0 	bl	8001c40 <SELECT>

	if (count == 1)
 80020c0:	2c01      	cmp	r4, #1
 80020c2:	d01f      	beq.n	8002104 <SD_disk_write+0x78>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80020c4:	4b21      	ldr	r3, [pc, #132]	; (800214c <SD_disk_write+0xc0>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	f013 0f02 	tst.w	r3, #2
 80020cc:	d128      	bne.n	8002120 <SD_disk_write+0x94>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80020ce:	4631      	mov	r1, r6
 80020d0:	2059      	movs	r0, #89	; 0x59
 80020d2:	f7ff fe30 	bl	8001d36 <SD_SendCmd>
 80020d6:	b968      	cbnz	r0, 80020f4 <SD_disk_write+0x68>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80020d8:	21fc      	movs	r1, #252	; 0xfc
 80020da:	4628      	mov	r0, r5
 80020dc:	f7ff fe88 	bl	8001df0 <SD_TxDataBlock>
 80020e0:	b118      	cbz	r0, 80020ea <SD_disk_write+0x5e>
				buff += 512;
 80020e2:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80020e6:	3c01      	subs	r4, #1
 80020e8:	d1f6      	bne.n	80020d8 <SD_disk_write+0x4c>

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80020ea:	21fd      	movs	r1, #253	; 0xfd
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7ff fe7f 	bl	8001df0 <SD_TxDataBlock>
 80020f2:	b1f0      	cbz	r0, 8002132 <SD_disk_write+0xa6>
			}
		}
	}

	/* Idle */
	DESELECT();
 80020f4:	f7ff fdb0 	bl	8001c58 <DESELECT>
	SPI_RxByte();
 80020f8:	f7ff fdba 	bl	8001c70 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80020fc:	1e20      	subs	r0, r4, #0
 80020fe:	bf18      	it	ne
 8002100:	2001      	movne	r0, #1
}
 8002102:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002104:	4631      	mov	r1, r6
 8002106:	2058      	movs	r0, #88	; 0x58
 8002108:	f7ff fe15 	bl	8001d36 <SD_SendCmd>
 800210c:	2800      	cmp	r0, #0
 800210e:	d1f1      	bne.n	80020f4 <SD_disk_write+0x68>
 8002110:	21fe      	movs	r1, #254	; 0xfe
 8002112:	4628      	mov	r0, r5
 8002114:	f7ff fe6c 	bl	8001df0 <SD_TxDataBlock>
 8002118:	2800      	cmp	r0, #0
 800211a:	d0eb      	beq.n	80020f4 <SD_disk_write+0x68>
			count = 0;
 800211c:	2400      	movs	r4, #0
 800211e:	e7e9      	b.n	80020f4 <SD_disk_write+0x68>
			SD_SendCmd(CMD55, 0);
 8002120:	2100      	movs	r1, #0
 8002122:	2077      	movs	r0, #119	; 0x77
 8002124:	f7ff fe07 	bl	8001d36 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002128:	4621      	mov	r1, r4
 800212a:	2057      	movs	r0, #87	; 0x57
 800212c:	f7ff fe03 	bl	8001d36 <SD_SendCmd>
 8002130:	e7cd      	b.n	80020ce <SD_disk_write+0x42>
				count = 1;
 8002132:	2401      	movs	r4, #1
 8002134:	e7de      	b.n	80020f4 <SD_disk_write+0x68>
	if (pdrv || !count) return RES_PARERR;
 8002136:	2004      	movs	r0, #4
}
 8002138:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 800213a:	2004      	movs	r0, #4
 800213c:	e7e1      	b.n	8002102 <SD_disk_write+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800213e:	2003      	movs	r0, #3
 8002140:	e7df      	b.n	8002102 <SD_disk_write+0x76>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002142:	2002      	movs	r0, #2
 8002144:	e7dd      	b.n	8002102 <SD_disk_write+0x76>
 8002146:	bf00      	nop
 8002148:	20000004 	.word	0x20000004
 800214c:	2000026a 	.word	0x2000026a

08002150 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002152:	b085      	sub	sp, #20
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002154:	2800      	cmp	r0, #0
 8002156:	f040 80b2 	bne.w	80022be <SD_disk_ioctl+0x16e>
 800215a:	460d      	mov	r5, r1
 800215c:	4616      	mov	r6, r2
 800215e:	4607      	mov	r7, r0
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8002160:	2905      	cmp	r1, #5
 8002162:	d013      	beq.n	800218c <SD_disk_ioctl+0x3c>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002164:	4b58      	ldr	r3, [pc, #352]	; (80022c8 <SD_disk_ioctl+0x178>)
 8002166:	781c      	ldrb	r4, [r3, #0]
 8002168:	f014 0401 	ands.w	r4, r4, #1
 800216c:	f040 80a9 	bne.w	80022c2 <SD_disk_ioctl+0x172>

		SELECT();
 8002170:	f7ff fd66 	bl	8001c40 <SELECT>

		switch (ctrl)
 8002174:	2d0d      	cmp	r5, #13
 8002176:	f200 8096 	bhi.w	80022a6 <SD_disk_ioctl+0x156>
 800217a:	e8df f005 	tbb	[pc, r5]
 800217e:	1b5e      	.short	0x1b5e
 8002180:	9494945a 	.word	0x9494945a
 8002184:	94949494 	.word	0x94949494
 8002188:	82736494 	.word	0x82736494
		switch (*ptr)
 800218c:	7814      	ldrb	r4, [r2, #0]
 800218e:	2c01      	cmp	r4, #1
 8002190:	d007      	beq.n	80021a2 <SD_disk_ioctl+0x52>
 8002192:	2c02      	cmp	r4, #2
 8002194:	d009      	beq.n	80021aa <SD_disk_ioctl+0x5a>
 8002196:	b10c      	cbz	r4, 800219c <SD_disk_ioctl+0x4c>
 8002198:	2404      	movs	r4, #4
 800219a:	e089      	b.n	80022b0 <SD_disk_ioctl+0x160>
			SD_PowerOff();		/* Power Off */
 800219c:	f7ff fd1e 	bl	8001bdc <SD_PowerOff>
			break;
 80021a0:	e086      	b.n	80022b0 <SD_disk_ioctl+0x160>
			SD_PowerOn();		/* Power On */
 80021a2:	f7ff fd81 	bl	8001ca8 <SD_PowerOn>
			res = RES_OK;
 80021a6:	463c      	mov	r4, r7
			break;
 80021a8:	e082      	b.n	80022b0 <SD_disk_ioctl+0x160>
			*(ptr + 1) = SD_CheckPower();
 80021aa:	f7ff fd1d 	bl	8001be8 <SD_CheckPower>
 80021ae:	7070      	strb	r0, [r6, #1]
			res = RES_OK;		/* Power Check */
 80021b0:	463c      	mov	r4, r7
			break;
 80021b2:	e07d      	b.n	80022b0 <SD_disk_ioctl+0x160>
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80021b4:	2100      	movs	r1, #0
 80021b6:	2049      	movs	r0, #73	; 0x49
 80021b8:	f7ff fdbd 	bl	8001d36 <SD_SendCmd>
 80021bc:	4604      	mov	r4, r0
 80021be:	b108      	cbz	r0, 80021c4 <SD_disk_ioctl+0x74>
	res = RES_ERROR;
 80021c0:	462c      	mov	r4, r5
 80021c2:	e071      	b.n	80022a8 <SD_disk_ioctl+0x158>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80021c4:	2110      	movs	r1, #16
 80021c6:	4668      	mov	r0, sp
 80021c8:	f7ff fdf0 	bl	8001dac <SD_RxDataBlock>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d072      	beq.n	80022b6 <SD_disk_ioctl+0x166>
			{
				if ((csd[0] >> 6) == 1)
 80021d0:	f89d 3000 	ldrb.w	r3, [sp]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d01f      	beq.n	800221a <SD_disk_ioctl+0xca>
					*(DWORD*) buff = (DWORD) csize << 10;
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80021da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80021de:	f002 020f 	and.w	r2, r2, #15
 80021e2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80021e6:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 80021ea:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	f003 0306 	and.w	r3, r3, #6
 80021f4:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80021f6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80021fa:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80021fe:	099b      	lsrs	r3, r3, #6
 8002200:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002204:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8002208:	0289      	lsls	r1, r1, #10
 800220a:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 800220e:	440b      	add	r3, r1
 8002210:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002212:	3a07      	subs	r2, #7
 8002214:	4093      	lsls	r3, r2
 8002216:	6033      	str	r3, [r6, #0]
 8002218:	e046      	b.n	80022a8 <SD_disk_ioctl+0x158>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800221a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800221e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002222:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002226:	b29b      	uxth	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	b29b      	uxth	r3, r3
					*(DWORD*) buff = (DWORD) csize << 10;
 800222c:	029b      	lsls	r3, r3, #10
 800222e:	6033      	str	r3, [r6, #0]
 8002230:	e03a      	b.n	80022a8 <SD_disk_ioctl+0x158>
				}
				res = RES_OK;
			}
			break;
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8002232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002236:	8033      	strh	r3, [r6, #0]
			res = RES_OK;
			break;
 8002238:	e036      	b.n	80022a8 <SD_disk_ioctl+0x158>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800223a:	f7ff fd6b 	bl	8001d14 <SD_ReadyWait>
 800223e:	28ff      	cmp	r0, #255	; 0xff
 8002240:	d03b      	beq.n	80022ba <SD_disk_ioctl+0x16a>
	res = RES_ERROR;
 8002242:	2401      	movs	r4, #1
 8002244:	e030      	b.n	80022a8 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002246:	2100      	movs	r1, #0
 8002248:	2049      	movs	r0, #73	; 0x49
 800224a:	f7ff fd74 	bl	8001d36 <SD_SendCmd>
 800224e:	4604      	mov	r4, r0
 8002250:	b108      	cbz	r0, 8002256 <SD_disk_ioctl+0x106>
	res = RES_ERROR;
 8002252:	2401      	movs	r4, #1
 8002254:	e028      	b.n	80022a8 <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002256:	2110      	movs	r1, #16
 8002258:	4630      	mov	r0, r6
 800225a:	f7ff fda7 	bl	8001dac <SD_RxDataBlock>
 800225e:	bb18      	cbnz	r0, 80022a8 <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 8002260:	2401      	movs	r4, #1
 8002262:	e021      	b.n	80022a8 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002264:	2100      	movs	r1, #0
 8002266:	204a      	movs	r0, #74	; 0x4a
 8002268:	f7ff fd65 	bl	8001d36 <SD_SendCmd>
 800226c:	4604      	mov	r4, r0
 800226e:	b108      	cbz	r0, 8002274 <SD_disk_ioctl+0x124>
	res = RES_ERROR;
 8002270:	2401      	movs	r4, #1
 8002272:	e019      	b.n	80022a8 <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002274:	2110      	movs	r1, #16
 8002276:	4630      	mov	r0, r6
 8002278:	f7ff fd98 	bl	8001dac <SD_RxDataBlock>
 800227c:	b9a0      	cbnz	r0, 80022a8 <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 800227e:	2401      	movs	r4, #1
 8002280:	e012      	b.n	80022a8 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002282:	2100      	movs	r1, #0
 8002284:	207a      	movs	r0, #122	; 0x7a
 8002286:	f7ff fd56 	bl	8001d36 <SD_SendCmd>
 800228a:	4604      	mov	r4, r0
 800228c:	b138      	cbz	r0, 800229e <SD_disk_ioctl+0x14e>
					*ptr++ = SPI_RxByte();
				}
				res = RES_OK;
			}
		default:
			res = RES_PARERR;
 800228e:	2404      	movs	r4, #4
 8002290:	e00a      	b.n	80022a8 <SD_disk_ioctl+0x158>
					*ptr++ = SPI_RxByte();
 8002292:	f7ff fced 	bl	8001c70 <SPI_RxByte>
 8002296:	f806 0b01 	strb.w	r0, [r6], #1
				for (n = 0; n < 4; n++)
 800229a:	3401      	adds	r4, #1
 800229c:	b2e4      	uxtb	r4, r4
 800229e:	2c03      	cmp	r4, #3
 80022a0:	d9f7      	bls.n	8002292 <SD_disk_ioctl+0x142>
			res = RES_PARERR;
 80022a2:	2404      	movs	r4, #4
 80022a4:	e000      	b.n	80022a8 <SD_disk_ioctl+0x158>
		switch (ctrl)
 80022a6:	2404      	movs	r4, #4
		}

		DESELECT();
 80022a8:	f7ff fcd6 	bl	8001c58 <DESELECT>
		SPI_RxByte();
 80022ac:	f7ff fce0 	bl	8001c70 <SPI_RxByte>
	}

	return res;
}
 80022b0:	4620      	mov	r0, r4
 80022b2:	b005      	add	sp, #20
 80022b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = RES_ERROR;
 80022b6:	462c      	mov	r4, r5
 80022b8:	e7f6      	b.n	80022a8 <SD_disk_ioctl+0x158>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80022ba:	462c      	mov	r4, r5
 80022bc:	e7f4      	b.n	80022a8 <SD_disk_ioctl+0x158>
	if (drv) return RES_PARERR;
 80022be:	2404      	movs	r4, #4
 80022c0:	e7f6      	b.n	80022b0 <SD_disk_ioctl+0x160>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80022c2:	2403      	movs	r4, #3
 80022c4:	e7f4      	b.n	80022b0 <SD_disk_ioctl+0x160>
 80022c6:	bf00      	nop
 80022c8:	20000004 	.word	0x20000004

080022cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	2400      	movs	r4, #0
 80022d2:	9403      	str	r4, [sp, #12]
 80022d4:	9404      	str	r4, [sp, #16]
 80022d6:	9405      	str	r4, [sp, #20]
 80022d8:	9406      	str	r4, [sp, #24]
 80022da:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	9401      	str	r4, [sp, #4]
 80022de:	4b39      	ldr	r3, [pc, #228]	; (80023c4 <MX_GPIO_Init+0xf8>)
 80022e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e2:	f042 0201 	orr.w	r2, r2, #1
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
 80022e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ea:	f002 0201 	and.w	r2, r2, #1
 80022ee:	9201      	str	r2, [sp, #4]
 80022f0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	9402      	str	r4, [sp, #8]
 80022f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022f6:	f042 0202 	orr.w	r2, r2, #2
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROPE_CUT_EN_Pin|SD_CS_Pin|USER_LED1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002306:	4f30      	ldr	r7, [pc, #192]	; (80023c8 <MX_GPIO_Init+0xfc>)
 8002308:	4622      	mov	r2, r4
 800230a:	f248 1112 	movw	r1, #33042	; 0x8112
 800230e:	4638      	mov	r0, r7
 8002310:	f002 fc39 	bl	8004b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAM2_OK_Pin|CAM1_OK_Pin, GPIO_PIN_SET);
 8002314:	4e2d      	ldr	r6, [pc, #180]	; (80023cc <MX_GPIO_Init+0x100>)
 8002316:	2201      	movs	r2, #1
 8002318:	2106      	movs	r1, #6
 800231a:	4630      	mov	r0, r6
 800231c:	f002 fc33 	bl	8004b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED3_Pin|USER_LED5_Pin|USER_LED2_Pin|USER_LED4_Pin
 8002320:	4622      	mov	r2, r4
 8002322:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 8002326:	4630      	mov	r0, r6
 8002328:	f002 fc2d 	bl	8004b86 <HAL_GPIO_WritePin>
                          |CAM2_ON_Pin|CAM1_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUS_SEL_1_Pin|BUS_SEL_2_Pin, GPIO_PIN_SET);
 800232c:	2201      	movs	r2, #1
 800232e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002332:	4638      	mov	r0, r7
 8002334:	f002 fc27 	bl	8004b86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROPE_CUT_EN_Pin SD_CS_Pin USER_LED1_Pin BUS_SEL_1_Pin
                           BUS_SEL_2_Pin */
  GPIO_InitStruct.Pin = ROPE_CUT_EN_Pin|SD_CS_Pin|USER_LED1_Pin|BUS_SEL_1_Pin
 8002338:	f641 1312 	movw	r3, #6418	; 0x1912
 800233c:	9303      	str	r3, [sp, #12]
                          |BUS_SEL_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233e:	2501      	movs	r5, #1
 8002340:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	a903      	add	r1, sp, #12
 8002348:	4638      	mov	r0, r7
 800234a:	f002 fb35 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM2_OK_Pin CAM1_OK_Pin */
  GPIO_InitStruct.Pin = CAM2_OK_Pin|CAM1_OK_Pin;
 800234e:	2306      	movs	r3, #6
 8002350:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002352:	2311      	movs	r3, #17
 8002354:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235a:	a903      	add	r1, sp, #12
 800235c:	4630      	mov	r0, r6
 800235e:	f002 fb2b 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED3_Pin USER_LED5_Pin USER_LED2_Pin USER_LED4_Pin
                           CAM2_ON_Pin CAM1_ON_Pin */
  GPIO_InitStruct.Pin = USER_LED3_Pin|USER_LED5_Pin|USER_LED2_Pin|USER_LED4_Pin
 8002362:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 8002366:	9303      	str	r3, [sp, #12]
                          |CAM2_ON_Pin|CAM1_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	a903      	add	r1, sp, #12
 8002370:	4630      	mov	r0, r6
 8002372:	f002 fb21 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800237e:	2302      	movs	r3, #2
 8002380:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002384:	a903      	add	r1, sp, #12
 8002386:	4638      	mov	r0, r7
 8002388:	f002 fb16 	bl	80049b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM2_START_Pin CAM1_START_Pin */
  GPIO_InitStruct.Pin = CAM2_START_Pin|CAM1_START_Pin;
 800238c:	2330      	movs	r3, #48	; 0x30
 800238e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002390:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002394:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002396:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002398:	a903      	add	r1, sp, #12
 800239a:	4630      	mov	r0, r6
 800239c:	f002 fb0c 	bl	80049b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80023a0:	4622      	mov	r2, r4
 80023a2:	4629      	mov	r1, r5
 80023a4:	200a      	movs	r0, #10
 80023a6:	f002 fa4f 	bl	8004848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80023aa:	200a      	movs	r0, #10
 80023ac:	f002 fa84 	bl	80048b8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80023b0:	4622      	mov	r2, r4
 80023b2:	4629      	mov	r1, r5
 80023b4:	2017      	movs	r0, #23
 80023b6:	f002 fa47 	bl	8004848 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023ba:	2017      	movs	r0, #23
 80023bc:	f002 fa7c 	bl	80048b8 <HAL_NVIC_EnableIRQ>

}
 80023c0:	b009      	add	sp, #36	; 0x24
 80023c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000
 80023cc:	40020400 	.word	0x40020400

080023d0 <get_check_sum>:
{
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	4606      	mov	r6, r0
	for(uint8_t i = 0; string[i] != '*' && i < strlen(string); i++)
 80023d4:	2400      	movs	r4, #0
	uint8_t XOR = 0;
 80023d6:	4627      	mov	r7, r4
	for(uint8_t i = 0; string[i] != '*' && i < strlen(string); i++)
 80023d8:	e002      	b.n	80023e0 <get_check_sum+0x10>
		XOR = XOR ^ string[i];
 80023da:	406f      	eors	r7, r5
	for(uint8_t i = 0; string[i] != '*' && i < strlen(string); i++)
 80023dc:	3401      	adds	r4, #1
 80023de:	b2e4      	uxtb	r4, r4
 80023e0:	5d35      	ldrb	r5, [r6, r4]
 80023e2:	2d2a      	cmp	r5, #42	; 0x2a
 80023e4:	d004      	beq.n	80023f0 <get_check_sum+0x20>
 80023e6:	4630      	mov	r0, r6
 80023e8:	f7fd fefa 	bl	80001e0 <strlen>
 80023ec:	4284      	cmp	r4, r0
 80023ee:	d3f4      	bcc.n	80023da <get_check_sum+0xa>
}
 80023f0:	4638      	mov	r0, r7
 80023f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080023f4 <Get_System_Status>:
	if(Is_asleep == 1)
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <Get_System_Status+0x5c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
	if(Sensors.BME280_Internal.Status == HAL_OK)
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <Get_System_Status+0x60>)
 80023fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023fe:	b1fb      	cbz	r3, 8002440 <Get_System_Status+0x4c>
 8002400:	2000      	movs	r0, #0
	if(Sensors.BME280_External.Status == HAL_OK)
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <Get_System_Status+0x60>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b90b      	cbnz	r3, 800240c <Get_System_Status+0x18>
		status |= 1 << 5;
 8002408:	f040 0020 	orr.w	r0, r0, #32
	if(Sensors.MPU650.Status == HAL_OK)
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <Get_System_Status+0x60>)
 800240e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002412:	b90b      	cbnz	r3, 8002418 <Get_System_Status+0x24>
		status |= 1 << 4;
 8002414:	f040 0010 	orr.w	r0, r0, #16
	if(Sensors.SI1145.Status == HAL_OK)
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <Get_System_Status+0x60>)
 800241a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800241e:	b90b      	cbnz	r3, 8002424 <Get_System_Status+0x30>
		status |= 1 << 3;
 8002420:	f040 0008 	orr.w	r0, r0, #8
	if(sd_status == FR_OK)
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <Get_System_Status+0x64>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b90b      	cbnz	r3, 800242e <Get_System_Status+0x3a>
		status |= 1 << 2;
 800242a:	f040 0004 	orr.w	r0, r0, #4
	if(CAM_1.REC_STATUS == CAM_REC)
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <Get_System_Status+0x68>)
 8002430:	7f1b      	ldrb	r3, [r3, #28]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d006      	beq.n	8002444 <Get_System_Status+0x50>
	if(CAM_2.REC_STATUS == CAM_REC)
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <Get_System_Status+0x6c>)
 8002438:	7f1b      	ldrb	r3, [r3, #28]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d005      	beq.n	800244a <Get_System_Status+0x56>
}
 800243e:	4770      	bx	lr
		status |= 1 << 6;
 8002440:	2040      	movs	r0, #64	; 0x40
 8002442:	e7de      	b.n	8002402 <Get_System_Status+0xe>
		status |= 1 << 1;
 8002444:	f040 0002 	orr.w	r0, r0, #2
 8002448:	e7f5      	b.n	8002436 <Get_System_Status+0x42>
		status |= 1;
 800244a:	f040 0001 	orr.w	r0, r0, #1
 800244e:	e7f6      	b.n	800243e <Get_System_Status+0x4a>
 8002450:	200003ac 	.word	0x200003ac
 8002454:	200003b0 	.word	0x200003b0
 8002458:	20000da3 	.word	0x20000da3
 800245c:	20000310 	.word	0x20000310
 8002460:	20000330 	.word	0x20000330

08002464 <I2C_Select_bus>:
{
 8002464:	b510      	push	{r4, lr}
	switch(select)
 8002466:	b178      	cbz	r0, 8002488 <I2C_Select_bus+0x24>
 8002468:	2801      	cmp	r0, #1
 800246a:	d01b      	beq.n	80024a4 <I2C_Select_bus+0x40>
		HAL_GPIO_WritePin(BUS_SEL_1_GPIO_Port, BUS_SEL_1_Pin, GPIO_PIN_SET);
 800246c:	4c14      	ldr	r4, [pc, #80]	; (80024c0 <I2C_Select_bus+0x5c>)
 800246e:	2201      	movs	r2, #1
 8002470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002474:	4620      	mov	r0, r4
 8002476:	f002 fb86 	bl	8004b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUS_SEL_2_GPIO_Port, BUS_SEL_2_Pin, GPIO_PIN_SET);
 800247a:	2201      	movs	r2, #1
 800247c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002480:	4620      	mov	r0, r4
 8002482:	f002 fb80 	bl	8004b86 <HAL_GPIO_WritePin>
}
 8002486:	e00c      	b.n	80024a2 <I2C_Select_bus+0x3e>
		HAL_GPIO_WritePin(BUS_SEL_1_GPIO_Port, BUS_SEL_1_Pin, GPIO_PIN_SET);
 8002488:	4c0d      	ldr	r4, [pc, #52]	; (80024c0 <I2C_Select_bus+0x5c>)
 800248a:	2201      	movs	r2, #1
 800248c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002490:	4620      	mov	r0, r4
 8002492:	f002 fb78 	bl	8004b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUS_SEL_2_GPIO_Port, BUS_SEL_2_Pin, GPIO_PIN_RESET);
 8002496:	2200      	movs	r2, #0
 8002498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800249c:	4620      	mov	r0, r4
 800249e:	f002 fb72 	bl	8004b86 <HAL_GPIO_WritePin>
}
 80024a2:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(BUS_SEL_2_GPIO_Port, BUS_SEL_2_Pin, GPIO_PIN_SET);
 80024a4:	4c06      	ldr	r4, [pc, #24]	; (80024c0 <I2C_Select_bus+0x5c>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ac:	4620      	mov	r0, r4
 80024ae:	f002 fb6a 	bl	8004b86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUS_SEL_1_GPIO_Port, BUS_SEL_1_Pin, GPIO_PIN_RESET);
 80024b2:	2200      	movs	r2, #0
 80024b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024b8:	4620      	mov	r0, r4
 80024ba:	f002 fb64 	bl	8004b86 <HAL_GPIO_WritePin>
		break;
 80024be:	e7f0      	b.n	80024a2 <I2C_Select_bus+0x3e>
 80024c0:	40020000 	.word	0x40020000

080024c4 <Get_BME280_in_all_readings>:
{
 80024c4:	b530      	push	{r4, r5, lr}
 80024c6:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7ff ffcb 	bl	8002464 <I2C_Select_bus>
	if(Sensors.BME280_Internal.Status != HAL_OK)
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <Get_BME280_in_all_readings+0xe8>)
 80024d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d140      	bne.n	800255a <Get_BME280_in_all_readings+0x96>
	Sensors.BME280_Internal.Status = BME280_Get_ID(I2C_handle_BME_in__MPU, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 80024d8:	4c35      	ldr	r4, [pc, #212]	; (80025b0 <Get_BME280_in_all_readings+0xec>)
 80024da:	2314      	movs	r3, #20
 80024dc:	9312      	str	r3, [sp, #72]	; 0x48
 80024de:	4d33      	ldr	r5, [pc, #204]	; (80025ac <Get_BME280_in_all_readings+0xe8>)
 80024e0:	f105 0331 	add.w	r3, r5, #49	; 0x31
 80024e4:	9311      	str	r3, [sp, #68]	; 0x44
 80024e6:	2244      	movs	r2, #68	; 0x44
 80024e8:	f104 0110 	add.w	r1, r4, #16
 80024ec:	4668      	mov	r0, sp
 80024ee:	f006 fc3d 	bl	8008d6c <memcpy>
 80024f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024f6:	f7fe fd51 	bl	8000f9c <BME280_Get_ID>
 80024fa:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
	if(Sensors.BME280_Internal.Status != HAL_OK)
 80024fe:	2800      	cmp	r0, #0
 8002500:	d14f      	bne.n	80025a2 <Get_BME280_in_all_readings+0xde>
	Sensors.BME280_Internal.Status = BME280_Get_All(I2C_handle_BME_in__MPU, I2C_long_timeout);
 8002502:	4c2b      	ldr	r4, [pc, #172]	; (80025b0 <Get_BME280_in_all_readings+0xec>)
 8002504:	23c8      	movs	r3, #200	; 0xc8
 8002506:	9311      	str	r3, [sp, #68]	; 0x44
 8002508:	2244      	movs	r2, #68	; 0x44
 800250a:	f104 0110 	add.w	r1, r4, #16
 800250e:	4668      	mov	r0, sp
 8002510:	f006 fc2c 	bl	8008d6c <memcpy>
 8002514:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002518:	f7fe fe04 	bl	8001124 <BME280_Get_All>
 800251c:	4b23      	ldr	r3, [pc, #140]	; (80025ac <Get_BME280_in_all_readings+0xe8>)
 800251e:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	if(Sensors.BME280_Internal.Status != HAL_OK)
 8002522:	2800      	cmp	r0, #0
 8002524:	d140      	bne.n	80025a8 <Get_BME280_in_all_readings+0xe4>
	Sensors.BME280_Internal.Temperature = BME280_T_Double(&BME280_internal_Calib_Data);
 8002526:	4d23      	ldr	r5, [pc, #140]	; (80025b4 <Get_BME280_in_all_readings+0xf0>)
 8002528:	4628      	mov	r0, r5
 800252a:	f7fe fe49 	bl	80011c0 <BME280_T_Double>
 800252e:	4c1f      	ldr	r4, [pc, #124]	; (80025ac <Get_BME280_in_all_readings+0xe8>)
 8002530:	ed84 0b0e 	vstr	d0, [r4, #56]	; 0x38
	Sensors.BME280_Internal.Pressure = BME280_P_Double(&BME280_internal_Calib_Data);
 8002534:	4628      	mov	r0, r5
 8002536:	f7fe feb7 	bl	80012a8 <BME280_P_Double>
 800253a:	ed84 0b10 	vstr	d0, [r4, #64]	; 0x40
	Sensors.BME280_Internal.Humidity = BME280_H_Double(&BME280_internal_Calib_Data);
 800253e:	4628      	mov	r0, r5
 8002540:	f7fe ffd2 	bl	80014e8 <BME280_H_Double>
 8002544:	ed84 0b14 	vstr	d0, [r4, #80]	; 0x50
	Sensors.BME280_Internal.Altitude = BME280_Altitude_Double(Sensors.BME280_Internal.Pressure, Sensors.BME280_Internal.Pressure_ref);
 8002548:	ed94 1b12 	vldr	d1, [r4, #72]	; 0x48
 800254c:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8002550:	f7ff f896 	bl	8001680 <BME280_Altitude_Double>
 8002554:	ed84 0b16 	vstr	d0, [r4, #88]	; 0x58
 8002558:	e026      	b.n	80025a8 <Get_BME280_in_all_readings+0xe4>
		Sensors.BME280_Internal.Status = BME280_Get_ID(I2C_handle_BME_in__MPU, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 800255a:	4c15      	ldr	r4, [pc, #84]	; (80025b0 <Get_BME280_in_all_readings+0xec>)
 800255c:	2314      	movs	r3, #20
 800255e:	9312      	str	r3, [sp, #72]	; 0x48
 8002560:	4d12      	ldr	r5, [pc, #72]	; (80025ac <Get_BME280_in_all_readings+0xe8>)
 8002562:	f105 0331 	add.w	r3, r5, #49	; 0x31
 8002566:	9311      	str	r3, [sp, #68]	; 0x44
 8002568:	2244      	movs	r2, #68	; 0x44
 800256a:	f104 0110 	add.w	r1, r4, #16
 800256e:	4668      	mov	r0, sp
 8002570:	f006 fbfc 	bl	8008d6c <memcpy>
 8002574:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002578:	f7fe fd10 	bl	8000f9c <BME280_Get_ID>
 800257c:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
		if (Sensors.BME280_Internal.Status == HAL_OK)
 8002580:	2800      	cmp	r0, #0
 8002582:	d1a9      	bne.n	80024d8 <Get_BME280_in_all_readings+0x14>
			Sensors.BME280_Internal.Status = BME280_Init(I2C_handle_BME_in__MPU, I2C_short_timeout);
 8002584:	2314      	movs	r3, #20
 8002586:	9311      	str	r3, [sp, #68]	; 0x44
 8002588:	2244      	movs	r2, #68	; 0x44
 800258a:	f104 0110 	add.w	r1, r4, #16
 800258e:	4668      	mov	r0, sp
 8002590:	f006 fbec 	bl	8008d6c <memcpy>
 8002594:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002598:	f7fe fcb0 	bl	8000efc <BME280_Init>
 800259c:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
 80025a0:	e79a      	b.n	80024d8 <Get_BME280_in_all_readings+0x14>
		HAL_I2C_Init(&I2C_handle_BME_in__MPU);
 80025a2:	4620      	mov	r0, r4
 80025a4:	f002 fd58 	bl	8005058 <HAL_I2C_Init>
}
 80025a8:	b015      	add	sp, #84	; 0x54
 80025aa:	bd30      	pop	{r4, r5, pc}
 80025ac:	200003b0 	.word	0x200003b0
 80025b0:	20000a98 	.word	0x20000a98
 80025b4:	200002ec 	.word	0x200002ec

080025b8 <Get_BME280_ex_all_readings>:
{
 80025b8:	b530      	push	{r4, r5, lr}
 80025ba:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff ff51 	bl	8002464 <I2C_Select_bus>
	if(Sensors.BME280_External.Status != HAL_OK)
 80025c2:	4b34      	ldr	r3, [pc, #208]	; (8002694 <Get_BME280_ex_all_readings+0xdc>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d13d      	bne.n	8002646 <Get_BME280_ex_all_readings+0x8e>
	Sensors.BME280_External.Status = BME280_Get_ID(I2C_handle_BME_ex__SI, &Sensors.BME280_External.ID, I2C_short_timeout);
 80025ca:	4c33      	ldr	r4, [pc, #204]	; (8002698 <Get_BME280_ex_all_readings+0xe0>)
 80025cc:	2314      	movs	r3, #20
 80025ce:	9312      	str	r3, [sp, #72]	; 0x48
 80025d0:	4d30      	ldr	r5, [pc, #192]	; (8002694 <Get_BME280_ex_all_readings+0xdc>)
 80025d2:	1c6b      	adds	r3, r5, #1
 80025d4:	9311      	str	r3, [sp, #68]	; 0x44
 80025d6:	2244      	movs	r2, #68	; 0x44
 80025d8:	f104 0110 	add.w	r1, r4, #16
 80025dc:	4668      	mov	r0, sp
 80025de:	f006 fbc5 	bl	8008d6c <memcpy>
 80025e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025e6:	f7fe fcd9 	bl	8000f9c <BME280_Get_ID>
 80025ea:	7028      	strb	r0, [r5, #0]
	if(Sensors.BME280_External.Status != HAL_OK)
 80025ec:	2800      	cmp	r0, #0
 80025ee:	d14b      	bne.n	8002688 <Get_BME280_ex_all_readings+0xd0>
	Sensors.BME280_External.Status = BME280_Get_All(I2C_handle_BME_ex__SI, I2C_long_timeout);
 80025f0:	4c29      	ldr	r4, [pc, #164]	; (8002698 <Get_BME280_ex_all_readings+0xe0>)
 80025f2:	23c8      	movs	r3, #200	; 0xc8
 80025f4:	9311      	str	r3, [sp, #68]	; 0x44
 80025f6:	2244      	movs	r2, #68	; 0x44
 80025f8:	f104 0110 	add.w	r1, r4, #16
 80025fc:	4668      	mov	r0, sp
 80025fe:	f006 fbb5 	bl	8008d6c <memcpy>
 8002602:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002606:	f7fe fd8d 	bl	8001124 <BME280_Get_All>
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <Get_BME280_ex_all_readings+0xdc>)
 800260c:	7018      	strb	r0, [r3, #0]
	if(Sensors.BME280_External.Status != HAL_OK)
 800260e:	2800      	cmp	r0, #0
 8002610:	d13d      	bne.n	800268e <Get_BME280_ex_all_readings+0xd6>
	Sensors.BME280_External.Temperature = BME280_T_Double(&BME280_external_Calib_Data);
 8002612:	4d22      	ldr	r5, [pc, #136]	; (800269c <Get_BME280_ex_all_readings+0xe4>)
 8002614:	4628      	mov	r0, r5
 8002616:	f7fe fdd3 	bl	80011c0 <BME280_T_Double>
 800261a:	4c1e      	ldr	r4, [pc, #120]	; (8002694 <Get_BME280_ex_all_readings+0xdc>)
 800261c:	ed84 0b02 	vstr	d0, [r4, #8]
	Sensors.BME280_External.Pressure = BME280_P_Double(&BME280_external_Calib_Data);
 8002620:	4628      	mov	r0, r5
 8002622:	f7fe fe41 	bl	80012a8 <BME280_P_Double>
 8002626:	ed84 0b04 	vstr	d0, [r4, #16]
	Sensors.BME280_External.Humidity = BME280_H_Double(&BME280_external_Calib_Data);
 800262a:	4628      	mov	r0, r5
 800262c:	f7fe ff5c 	bl	80014e8 <BME280_H_Double>
 8002630:	ed84 0b08 	vstr	d0, [r4, #32]
	Sensors.BME280_External.Altitude = BME280_Altitude_Double(Sensors.BME280_External.Pressure, Sensors.BME280_External.Pressure_ref);
 8002634:	ed94 1b06 	vldr	d1, [r4, #24]
 8002638:	ed94 0b04 	vldr	d0, [r4, #16]
 800263c:	f7ff f820 	bl	8001680 <BME280_Altitude_Double>
 8002640:	ed84 0b0a 	vstr	d0, [r4, #40]	; 0x28
 8002644:	e023      	b.n	800268e <Get_BME280_ex_all_readings+0xd6>
		Sensors.BME280_External.Status = BME280_Get_ID(I2C_handle_BME_ex__SI, &Sensors.BME280_External.ID, I2C_short_timeout);
 8002646:	4c14      	ldr	r4, [pc, #80]	; (8002698 <Get_BME280_ex_all_readings+0xe0>)
 8002648:	2314      	movs	r3, #20
 800264a:	9312      	str	r3, [sp, #72]	; 0x48
 800264c:	4d11      	ldr	r5, [pc, #68]	; (8002694 <Get_BME280_ex_all_readings+0xdc>)
 800264e:	1c6b      	adds	r3, r5, #1
 8002650:	9311      	str	r3, [sp, #68]	; 0x44
 8002652:	2244      	movs	r2, #68	; 0x44
 8002654:	f104 0110 	add.w	r1, r4, #16
 8002658:	4668      	mov	r0, sp
 800265a:	f006 fb87 	bl	8008d6c <memcpy>
 800265e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002662:	f7fe fc9b 	bl	8000f9c <BME280_Get_ID>
 8002666:	7028      	strb	r0, [r5, #0]
		if (Sensors.BME280_External.Status == HAL_OK)
 8002668:	2800      	cmp	r0, #0
 800266a:	d1ae      	bne.n	80025ca <Get_BME280_ex_all_readings+0x12>
			Sensors.BME280_External.Status = BME280_Init(I2C_handle_BME_ex__SI, I2C_short_timeout);
 800266c:	2314      	movs	r3, #20
 800266e:	9311      	str	r3, [sp, #68]	; 0x44
 8002670:	2244      	movs	r2, #68	; 0x44
 8002672:	f104 0110 	add.w	r1, r4, #16
 8002676:	4668      	mov	r0, sp
 8002678:	f006 fb78 	bl	8008d6c <memcpy>
 800267c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002680:	f7fe fc3c 	bl	8000efc <BME280_Init>
 8002684:	7028      	strb	r0, [r5, #0]
 8002686:	e7a0      	b.n	80025ca <Get_BME280_ex_all_readings+0x12>
		HAL_I2C_Init(&I2C_handle_BME_ex__SI);
 8002688:	4620      	mov	r0, r4
 800268a:	f002 fce5 	bl	8005058 <HAL_I2C_Init>
}
 800268e:	b015      	add	sp, #84	; 0x54
 8002690:	bd30      	pop	{r4, r5, pc}
 8002692:	bf00      	nop
 8002694:	200003b0 	.word	0x200003b0
 8002698:	20000a44 	.word	0x20000a44
 800269c:	200002c8 	.word	0x200002c8

080026a0 <Get_MPU6050_all_readings>:
{
 80026a0:	b530      	push	{r4, r5, lr}
 80026a2:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7ff fedd 	bl	8002464 <I2C_Select_bus>
	if(Sensors.MPU650.Status != HAL_OK)
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <Get_MPU6050_all_readings+0xc8>)
 80026ac:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80026b0:	bb8b      	cbnz	r3, 8002716 <Get_MPU6050_all_readings+0x76>
	Sensors.MPU650.Status = MPU6050_read_ID(I2C_handle_BME_in__MPU, &Sensors.MPU650.ID, I2C_short_timeout);
 80026b2:	4c2e      	ldr	r4, [pc, #184]	; (800276c <Get_MPU6050_all_readings+0xcc>)
 80026b4:	2314      	movs	r3, #20
 80026b6:	9312      	str	r3, [sp, #72]	; 0x48
 80026b8:	4d2b      	ldr	r5, [pc, #172]	; (8002768 <Get_MPU6050_all_readings+0xc8>)
 80026ba:	f105 0361 	add.w	r3, r5, #97	; 0x61
 80026be:	9311      	str	r3, [sp, #68]	; 0x44
 80026c0:	2244      	movs	r2, #68	; 0x44
 80026c2:	f104 0110 	add.w	r1, r4, #16
 80026c6:	4668      	mov	r0, sp
 80026c8:	f006 fb50 	bl	8008d6c <memcpy>
 80026cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026d0:	f7ff f86b 	bl	80017aa <MPU6050_read_ID>
 80026d4:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
	if(Sensors.MPU650.Status != HAL_OK)
 80026d8:	2800      	cmp	r0, #0
 80026da:	d140      	bne.n	800275e <Get_MPU6050_all_readings+0xbe>
	Sensors.MPU650.Status = MPU6050_read_All(I2C_handle_BME_in__MPU, I2C_long_timeout);
 80026dc:	4c23      	ldr	r4, [pc, #140]	; (800276c <Get_MPU6050_all_readings+0xcc>)
 80026de:	23c8      	movs	r3, #200	; 0xc8
 80026e0:	9311      	str	r3, [sp, #68]	; 0x44
 80026e2:	2244      	movs	r2, #68	; 0x44
 80026e4:	f104 0110 	add.w	r1, r4, #16
 80026e8:	4668      	mov	r0, sp
 80026ea:	f006 fb3f 	bl	8008d6c <memcpy>
 80026ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026f2:	f7ff f873 	bl	80017dc <MPU6050_read_All>
 80026f6:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <Get_MPU6050_all_readings+0xc8>)
 80026f8:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
	if(Sensors.MPU650.Status != HAL_OK)
 80026fc:	bb90      	cbnz	r0, 8002764 <Get_MPU6050_all_readings+0xc4>
	MPU6050_Accel_double(&Sensors.MPU650);
 80026fe:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002702:	4620      	mov	r0, r4
 8002704:	f7ff f8be 	bl	8001884 <MPU6050_Accel_double>
	MPU6050_Gyro_double(&Sensors.MPU650);
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff f8fd 	bl	8001908 <MPU6050_Gyro_double>
	MPU6050_Temp_double(&Sensors.MPU650);
 800270e:	4620      	mov	r0, r4
 8002710:	f7ff f8de 	bl	80018d0 <MPU6050_Temp_double>
 8002714:	e026      	b.n	8002764 <Get_MPU6050_all_readings+0xc4>
		Sensors.MPU650.Status = MPU6050_read_ID(I2C_handle_BME_in__MPU, &Sensors.MPU650.ID, I2C_short_timeout);
 8002716:	4c15      	ldr	r4, [pc, #84]	; (800276c <Get_MPU6050_all_readings+0xcc>)
 8002718:	2314      	movs	r3, #20
 800271a:	9312      	str	r3, [sp, #72]	; 0x48
 800271c:	4d12      	ldr	r5, [pc, #72]	; (8002768 <Get_MPU6050_all_readings+0xc8>)
 800271e:	f105 0361 	add.w	r3, r5, #97	; 0x61
 8002722:	9311      	str	r3, [sp, #68]	; 0x44
 8002724:	2244      	movs	r2, #68	; 0x44
 8002726:	f104 0110 	add.w	r1, r4, #16
 800272a:	4668      	mov	r0, sp
 800272c:	f006 fb1e 	bl	8008d6c <memcpy>
 8002730:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002734:	f7ff f839 	bl	80017aa <MPU6050_read_ID>
 8002738:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
		if (Sensors.MPU650.Status == HAL_OK)
 800273c:	2800      	cmp	r0, #0
 800273e:	d1b8      	bne.n	80026b2 <Get_MPU6050_all_readings+0x12>
			Sensors.MPU650.Status = MPU6050_Init(I2C_handle_BME_in__MPU, I2C_short_timeout);
 8002740:	2314      	movs	r3, #20
 8002742:	9311      	str	r3, [sp, #68]	; 0x44
 8002744:	2244      	movs	r2, #68	; 0x44
 8002746:	f104 0110 	add.w	r1, r4, #16
 800274a:	4668      	mov	r0, sp
 800274c:	f006 fb0e 	bl	8008d6c <memcpy>
 8002750:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002754:	f7fe ffba 	bl	80016cc <MPU6050_Init>
 8002758:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
 800275c:	e7a9      	b.n	80026b2 <Get_MPU6050_all_readings+0x12>
		HAL_I2C_Init(&I2C_handle_BME_in__MPU);
 800275e:	4620      	mov	r0, r4
 8002760:	f002 fc7a 	bl	8005058 <HAL_I2C_Init>
}
 8002764:	b015      	add	sp, #84	; 0x54
 8002766:	bd30      	pop	{r4, r5, pc}
 8002768:	200003b0 	.word	0x200003b0
 800276c:	20000a98 	.word	0x20000a98

08002770 <Get_SI1145_all_readings>:
{
 8002770:	b530      	push	{r4, r5, lr}
 8002772:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 8002774:	2001      	movs	r0, #1
 8002776:	f7ff fe75 	bl	8002464 <I2C_Select_bus>
	if(Sensors.SI1145.Status != HAL_OK)
 800277a:	4b26      	ldr	r3, [pc, #152]	; (8002814 <Get_SI1145_all_readings+0xa4>)
 800277c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002780:	bb93      	cbnz	r3, 80027e8 <Get_SI1145_all_readings+0x78>
	Sensors.SI1145.Status = SI1145_read_ID(I2C_handle_BME_ex__SI, &Sensors.SI1145.ID, I2C_short_timeout);
 8002782:	4c25      	ldr	r4, [pc, #148]	; (8002818 <Get_SI1145_all_readings+0xa8>)
 8002784:	2314      	movs	r3, #20
 8002786:	9312      	str	r3, [sp, #72]	; 0x48
 8002788:	4d22      	ldr	r5, [pc, #136]	; (8002814 <Get_SI1145_all_readings+0xa4>)
 800278a:	f105 03a1 	add.w	r3, r5, #161	; 0xa1
 800278e:	9311      	str	r3, [sp, #68]	; 0x44
 8002790:	2244      	movs	r2, #68	; 0x44
 8002792:	f104 0110 	add.w	r1, r4, #16
 8002796:	4668      	mov	r0, sp
 8002798:	f006 fae8 	bl	8008d6c <memcpy>
 800279c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027a0:	f7ff f9b6 	bl	8001b10 <SI1145_read_ID>
 80027a4:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0
	if(Sensors.SI1145.Status != HAL_OK)
 80027a8:	bb78      	cbnz	r0, 800280a <Get_SI1145_all_readings+0x9a>
	Sensors.SI1145.Status = SI1145_Read_Data(I2C_handle_BME_ex__SI, I2C_long_timeout);
 80027aa:	4c1b      	ldr	r4, [pc, #108]	; (8002818 <Get_SI1145_all_readings+0xa8>)
 80027ac:	23c8      	movs	r3, #200	; 0xc8
 80027ae:	9311      	str	r3, [sp, #68]	; 0x44
 80027b0:	2244      	movs	r2, #68	; 0x44
 80027b2:	f104 0110 	add.w	r1, r4, #16
 80027b6:	4668      	mov	r0, sp
 80027b8:	f006 fad8 	bl	8008d6c <memcpy>
 80027bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027c0:	f7ff f9be 	bl	8001b40 <SI1145_Read_Data>
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <Get_SI1145_all_readings+0xa4>)
 80027c6:	f883 00a0 	strb.w	r0, [r3, #160]	; 0xa0
	if(Sensors.SI1145.Status != HAL_OK)
 80027ca:	bb08      	cbnz	r0, 8002810 <Get_SI1145_all_readings+0xa0>
	Sensors.SI1145.VIS = SI1145_VIS_raw();
 80027cc:	f7ff f9f0 	bl	8001bb0 <SI1145_VIS_raw>
 80027d0:	4c10      	ldr	r4, [pc, #64]	; (8002814 <Get_SI1145_all_readings+0xa4>)
 80027d2:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
	Sensors.SI1145.IR = SI1145_IR_raw();
 80027d6:	f7ff f9e5 	bl	8001ba4 <SI1145_IR_raw>
 80027da:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
	Sensors.SI1145.UV = SI1145_UV_double();
 80027de:	f7ff f9ed 	bl	8001bbc <SI1145_UV_double>
 80027e2:	ed84 0b2a 	vstr	d0, [r4, #168]	; 0xa8
 80027e6:	e013      	b.n	8002810 <Get_SI1145_all_readings+0xa0>
		Sensors.SI1145.Status = SI1145_Init(I2C_handle_BME_ex__SI, I2C_short_timeout);
 80027e8:	4c0b      	ldr	r4, [pc, #44]	; (8002818 <Get_SI1145_all_readings+0xa8>)
 80027ea:	2314      	movs	r3, #20
 80027ec:	9311      	str	r3, [sp, #68]	; 0x44
 80027ee:	2244      	movs	r2, #68	; 0x44
 80027f0:	f104 0110 	add.w	r1, r4, #16
 80027f4:	4668      	mov	r0, sp
 80027f6:	f006 fab9 	bl	8008d6c <memcpy>
 80027fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027fe:	f7ff f8b1 	bl	8001964 <SI1145_Init>
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <Get_SI1145_all_readings+0xa4>)
 8002804:	f883 00a0 	strb.w	r0, [r3, #160]	; 0xa0
 8002808:	e7bb      	b.n	8002782 <Get_SI1145_all_readings+0x12>
		HAL_I2C_Init(&I2C_handle_BME_ex__SI);
 800280a:	4620      	mov	r0, r4
 800280c:	f002 fc24 	bl	8005058 <HAL_I2C_Init>
}
 8002810:	b015      	add	sp, #84	; 0x54
 8002812:	bd30      	pop	{r4, r5, pc}
 8002814:	200003b0 	.word	0x200003b0
 8002818:	20000a44 	.word	0x20000a44

0800281c <Mount_open_SD_Card>:
{
 800281c:	b510      	push	{r4, lr}
	sd_mounting_status = f_mount(&fs, "", 1);
 800281e:	2201      	movs	r2, #1
 8002820:	4932      	ldr	r1, [pc, #200]	; (80028ec <Mount_open_SD_Card+0xd0>)
 8002822:	4833      	ldr	r0, [pc, #204]	; (80028f0 <Mount_open_SD_Card+0xd4>)
 8002824:	f005 fdd8 	bl	80083d8 <f_mount>
	if(sd_mounting_status != FR_OK)
 8002828:	4603      	mov	r3, r0
 800282a:	b108      	cbz	r0, 8002830 <Mount_open_SD_Card+0x14>
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd10      	pop	{r4, pc}
	sd_mounting_status = f_open(&fil, "Data0.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8002830:	2212      	movs	r2, #18
 8002832:	4930      	ldr	r1, [pc, #192]	; (80028f4 <Mount_open_SD_Card+0xd8>)
 8002834:	4830      	ldr	r0, [pc, #192]	; (80028f8 <Mount_open_SD_Card+0xdc>)
 8002836:	f005 fdfd 	bl	8008434 <f_open>
	if(sd_mounting_status != FR_OK)
 800283a:	4603      	mov	r3, r0
 800283c:	2800      	cmp	r0, #0
 800283e:	d1f5      	bne.n	800282c <Mount_open_SD_Card+0x10>
	sd_mounting_status = f_getfree("", &fre_clust, &pfs);
 8002840:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <Mount_open_SD_Card+0xe0>)
 8002842:	492f      	ldr	r1, [pc, #188]	; (8002900 <Mount_open_SD_Card+0xe4>)
 8002844:	4829      	ldr	r0, [pc, #164]	; (80028ec <Mount_open_SD_Card+0xd0>)
 8002846:	f006 f8ab 	bl	80089a0 <f_getfree>
	if(sd_mounting_status != FR_OK)
 800284a:	4603      	mov	r3, r0
 800284c:	2800      	cmp	r0, #0
 800284e:	d1ed      	bne.n	800282c <Mount_open_SD_Card+0x10>
	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002850:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <Mount_open_SD_Card+0xe0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6958      	ldr	r0, [r3, #20]
 8002856:	3802      	subs	r0, #2
 8002858:	895c      	ldrh	r4, [r3, #10]
 800285a:	fb04 f000 	mul.w	r0, r4, r0
 800285e:	f7fd fe59 	bl	8000514 <__aeabi_ui2d>
 8002862:	2200      	movs	r2, #0
 8002864:	4b27      	ldr	r3, [pc, #156]	; (8002904 <Mount_open_SD_Card+0xe8>)
 8002866:	f7fd fecf 	bl	8000608 <__aeabi_dmul>
 800286a:	f7fe f9a5 	bl	8000bb8 <__aeabi_d2uiz>
 800286e:	4b26      	ldr	r3, [pc, #152]	; (8002908 <Mount_open_SD_Card+0xec>)
 8002870:	6018      	str	r0, [r3, #0]
	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <Mount_open_SD_Card+0xe4>)
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	fb04 f000 	mul.w	r0, r4, r0
 800287a:	f7fd fe4b 	bl	8000514 <__aeabi_ui2d>
 800287e:	2200      	movs	r2, #0
 8002880:	4b20      	ldr	r3, [pc, #128]	; (8002904 <Mount_open_SD_Card+0xe8>)
 8002882:	f7fd fec1 	bl	8000608 <__aeabi_dmul>
 8002886:	f7fe f997 	bl	8000bb8 <__aeabi_d2uiz>
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <Mount_open_SD_Card+0xf0>)
 800288c:	6018      	str	r0, [r3, #0]
	if(freeSpace < 1)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b34b      	cbz	r3, 80028e6 <Mount_open_SD_Card+0xca>
	f_printf(&fil, "STM32 SD Card data logger\n");
 8002892:	4c19      	ldr	r4, [pc, #100]	; (80028f8 <Mount_open_SD_Card+0xdc>)
 8002894:	491e      	ldr	r1, [pc, #120]	; (8002910 <Mount_open_SD_Card+0xf4>)
 8002896:	4620      	mov	r0, r4
 8002898:	f006 f8f1 	bl	8008a7e <f_printf>
	f_printf(&fil, "RTC time and sensor readings (SI VIS and SI IR are raw values)\n");
 800289c:	491d      	ldr	r1, [pc, #116]	; (8002914 <Mount_open_SD_Card+0xf8>)
 800289e:	4620      	mov	r0, r4
 80028a0:	f006 f8ed 	bl	8008a7e <f_printf>
	f_printf(&fil, "SD-CARD-MEMORY = %d \n SD-CARD-FREE-MEMORY = %d\n", totalSpace, freeSpace);
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <Mount_open_SD_Card+0xec>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <Mount_open_SD_Card+0xf0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	491a      	ldr	r1, [pc, #104]	; (8002918 <Mount_open_SD_Card+0xfc>)
 80028ae:	4620      	mov	r0, r4
 80028b0:	f006 f8e5 	bl	8008a7e <f_printf>
	f_printf(&fil, "| Dt | Hr | Mn | Sc |");
 80028b4:	4919      	ldr	r1, [pc, #100]	; (800291c <Mount_open_SD_Card+0x100>)
 80028b6:	4620      	mov	r0, r4
 80028b8:	f006 f8e1 	bl	8008a7e <f_printf>
	f_printf(&fil, " BME_in T | BME_in P | BME_in H | BME_in A |");
 80028bc:	4918      	ldr	r1, [pc, #96]	; (8002920 <Mount_open_SD_Card+0x104>)
 80028be:	4620      	mov	r0, r4
 80028c0:	f006 f8dd 	bl	8008a7e <f_printf>
	f_printf(&fil, " BME_ex T | BME_ex P | BME_ex H | BME_in A |");
 80028c4:	4917      	ldr	r1, [pc, #92]	; (8002924 <Mount_open_SD_Card+0x108>)
 80028c6:	4620      	mov	r0, r4
 80028c8:	f006 f8d9 	bl	8008a7e <f_printf>
	f_printf(&fil, " MPU Acc_X | MPU Acc_Y | MPU Acc_Z | MPU Gyr_X | MPU Gyr_Y | MPU Gyr_Z | MPU Tmpr  |");
 80028cc:	4916      	ldr	r1, [pc, #88]	; (8002928 <Mount_open_SD_Card+0x10c>)
 80028ce:	4620      	mov	r0, r4
 80028d0:	f006 f8d5 	bl	8008a7e <f_printf>
	f_printf(&fil, " SI VIS | SI IR  | SI UV  |\n");
 80028d4:	4915      	ldr	r1, [pc, #84]	; (800292c <Mount_open_SD_Card+0x110>)
 80028d6:	4620      	mov	r0, r4
 80028d8:	f006 f8d1 	bl	8008a7e <f_printf>
	sd_mounting_status = f_sync(&fil);
 80028dc:	4620      	mov	r0, r4
 80028de:	f005 fffe 	bl	80088de <f_sync>
 80028e2:	4603      	mov	r3, r0
	return sd_mounting_status;
 80028e4:	e7a2      	b.n	800282c <Mount_open_SD_Card+0x10>
		return sd_mounting_status;
 80028e6:	23df      	movs	r3, #223	; 0xdf
 80028e8:	e7a0      	b.n	800282c <Mount_open_SD_Card+0x10>
 80028ea:	bf00      	nop
 80028ec:	0800cb34 	.word	0x0800cb34
 80028f0:	20000814 	.word	0x20000814
 80028f4:	0800c9b0 	.word	0x0800c9b0
 80028f8:	200005dc 	.word	0x200005dc
 80028fc:	20000d9c 	.word	0x20000d9c
 8002900:	2000080c 	.word	0x2000080c
 8002904:	3fe00000 	.word	0x3fe00000
 8002908:	20000da4 	.word	0x20000da4
 800290c:	20000810 	.word	0x20000810
 8002910:	0800c9bc 	.word	0x0800c9bc
 8002914:	0800c9d8 	.word	0x0800c9d8
 8002918:	0800ca18 	.word	0x0800ca18
 800291c:	0800ca48 	.word	0x0800ca48
 8002920:	0800ca60 	.word	0x0800ca60
 8002924:	0800ca90 	.word	0x0800ca90
 8002928:	0800cac0 	.word	0x0800cac0
 800292c:	0800cb18 	.word	0x0800cb18

08002930 <CAM_ON>:
{
 8002930:	b510      	push	{r4, lr}
 8002932:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 0)
 8002934:	8981      	ldrh	r1, [r0, #12]
 8002936:	6880      	ldr	r0, [r0, #8]
 8002938:	f002 f91e 	bl	8004b78 <HAL_GPIO_ReadPin>
 800293c:	b110      	cbz	r0, 8002944 <CAM_ON+0x14>
	CAM->Do_EXTI = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	77a3      	strb	r3, [r4, #30]
}
 8002942:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CAM->ON_PORT, CAM->ON_PIN, GPIO_PIN_SET);
 8002944:	2201      	movs	r2, #1
 8002946:	88a1      	ldrh	r1, [r4, #4]
 8002948:	6820      	ldr	r0, [r4, #0]
 800294a:	f002 f91c 	bl	8004b86 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800294e:	2064      	movs	r0, #100	; 0x64
 8002950:	f001 ff54 	bl	80047fc <HAL_Delay>
		HAL_GPIO_WritePin(CAM->ON_PORT, CAM->ON_PIN, GPIO_PIN_RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	88a1      	ldrh	r1, [r4, #4]
 8002958:	6820      	ldr	r0, [r4, #0]
 800295a:	f002 f914 	bl	8004b86 <HAL_GPIO_WritePin>
		CAM->Startup_delay = CAM_STARTUP_TIME;
 800295e:	2306      	movs	r3, #6
 8002960:	77e3      	strb	r3, [r4, #31]
 8002962:	e7ec      	b.n	800293e <CAM_ON+0xe>

08002964 <CAM_START>:
{
 8002964:	b510      	push	{r4, lr}
 8002966:	4604      	mov	r4, r0
	if((CAM->REC_STATUS == CAM_NREC) && (HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 1) && (CAM->Startup_delay == 0))
 8002968:	7f03      	ldrb	r3, [r0, #28]
 800296a:	b13b      	cbz	r3, 800297c <CAM_START+0x18>
	if(HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 0)
 800296c:	89a1      	ldrh	r1, [r4, #12]
 800296e:	68a0      	ldr	r0, [r4, #8]
 8002970:	f002 f902 	bl	8004b78 <HAL_GPIO_ReadPin>
 8002974:	b1c8      	cbz	r0, 80029aa <CAM_START+0x46>
	CAM->Do_Restart = 1;
 8002976:	2301      	movs	r3, #1
 8002978:	7763      	strb	r3, [r4, #29]
}
 800297a:	bd10      	pop	{r4, pc}
	if((CAM->REC_STATUS == CAM_NREC) && (HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 1) && (CAM->Startup_delay == 0))
 800297c:	8981      	ldrh	r1, [r0, #12]
 800297e:	6880      	ldr	r0, [r0, #8]
 8002980:	f002 f8fa 	bl	8004b78 <HAL_GPIO_ReadPin>
 8002984:	2801      	cmp	r0, #1
 8002986:	d1f1      	bne.n	800296c <CAM_START+0x8>
 8002988:	7fe3      	ldrb	r3, [r4, #31]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ee      	bne.n	800296c <CAM_START+0x8>
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_RESET);
 800298e:	2200      	movs	r2, #0
 8002990:	89a1      	ldrh	r1, [r4, #12]
 8002992:	68a0      	ldr	r0, [r4, #8]
 8002994:	f002 f8f7 	bl	8004b86 <HAL_GPIO_WritePin>
		HAL_Delay(30);
 8002998:	201e      	movs	r0, #30
 800299a:	f001 ff2f 	bl	80047fc <HAL_Delay>
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_SET);
 800299e:	2201      	movs	r2, #1
 80029a0:	89a1      	ldrh	r1, [r4, #12]
 80029a2:	68a0      	ldr	r0, [r4, #8]
 80029a4:	f002 f8ef 	bl	8004b86 <HAL_GPIO_WritePin>
 80029a8:	e7e0      	b.n	800296c <CAM_START+0x8>
		CAM_ON(CAM);
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff ffc0 	bl	8002930 <CAM_ON>
 80029b0:	e7e1      	b.n	8002976 <CAM_START+0x12>

080029b2 <CAM_STOP>:
{
 80029b2:	b510      	push	{r4, lr}
 80029b4:	4604      	mov	r4, r0
	if(CAM->REC_STATUS == CAM_REC)
 80029b6:	7f03      	ldrb	r3, [r0, #28]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d002      	beq.n	80029c2 <CAM_STOP+0x10>
	CAM->Do_Restart = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	7763      	strb	r3, [r4, #29]
}
 80029c0:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	8981      	ldrh	r1, [r0, #12]
 80029c6:	6880      	ldr	r0, [r0, #8]
 80029c8:	f002 f8dd 	bl	8004b86 <HAL_GPIO_WritePin>
		HAL_Delay(30);
 80029cc:	201e      	movs	r0, #30
 80029ce:	f001 ff15 	bl	80047fc <HAL_Delay>
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_SET);
 80029d2:	2201      	movs	r2, #1
 80029d4:	89a1      	ldrh	r1, [r4, #12]
 80029d6:	68a0      	ldr	r0, [r4, #8]
 80029d8:	f002 f8d5 	bl	8004b86 <HAL_GPIO_WritePin>
		CAM->REC_STATUS = CAM_NREC;
 80029dc:	2300      	movs	r3, #0
 80029de:	7723      	strb	r3, [r4, #28]
 80029e0:	e7ec      	b.n	80029bc <CAM_STOP+0xa>
 80029e2:	0000      	movs	r0, r0
 80029e4:	0000      	movs	r0, r0
	...

080029e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ec:	ed2d 8b02 	vpush	{d8}
 80029f0:	b0a0      	sub	sp, #128	; 0x80
 80029f2:	4605      	mov	r5, r0

	// Core cycle, runs every 1s
	if (htim == &htim3)
 80029f4:	4ba6      	ldr	r3, [pc, #664]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80029f6:	4298      	cmp	r0, r3
 80029f8:	d01a      	beq.n	8002a30 <HAL_TIM_PeriodElapsedCallback+0x48>
	}



	// LED flasher
	if (htim == &htim4)
 80029fa:	4ba6      	ldr	r3, [pc, #664]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80029fc:	429d      	cmp	r5, r3
 80029fe:	f000 82c5 	beq.w	8002f8c <HAL_TIM_PeriodElapsedCallback+0x5a4>
	}



	// Camera_1 recording restart
	if (htim == CAM_1.TIM)
 8002a02:	4ba5      	ldr	r3, [pc, #660]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	42ab      	cmp	r3, r5
 8002a08:	f000 8314 	beq.w	8003034 <HAL_TIM_PeriodElapsedCallback+0x64c>
		if(CAM_1.Do_Restart)
			CAM_START(&CAM_1);
	}

	// Camera_2 recording restart
	if (htim == CAM_2.TIM)
 8002a0c:	4ba3      	ldr	r3, [pc, #652]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	42ab      	cmp	r3, r5
 8002a12:	f000 8320 	beq.w	8003056 <HAL_TIM_PeriodElapsedCallback+0x66e>
			CAM_START(&CAM_2);
	}


	// Buzzer control
	if (htim == &htim10)
 8002a16:	4ba2      	ldr	r3, [pc, #648]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002a18:	429d      	cmp	r5, r3
 8002a1a:	f000 832d 	beq.w	8003078 <HAL_TIM_PeriodElapsedCallback+0x690>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}


	// UART2 management
	if (htim == &htim11)
 8002a1e:	4ba1      	ldr	r3, [pc, #644]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002a20:	429d      	cmp	r5, r3
 8002a22:	f000 833c 	beq.w	800309e <HAL_TIM_PeriodElapsedCallback+0x6b6>

			UART2_Send_Sensor_Data = 0;
		}

	}
}
 8002a26:	b020      	add	sp, #128	; 0x80
 8002a28:	ecbd 8b02 	vpop	{d8}
 8002a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t tickstart = HAL_GetTick();
 8002a30:	f001 fede 	bl	80047f0 <HAL_GetTick>
 8002a34:	fa1f fa80 	uxth.w	sl, r0
		HAL_RTC_GetTime(&hrtc, &Current_Time, RTC_FORMAT_BIN);
 8002a38:	4c9b      	ldr	r4, [pc, #620]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	499b      	ldr	r1, [pc, #620]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f003 fb7f 	bl	8006142 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Current_Date, RTC_FORMAT_BIN);
 8002a44:	2200      	movs	r2, #0
 8002a46:	499a      	ldr	r1, [pc, #616]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f003 fba2 	bl	8006192 <HAL_RTC_GetDate>
		Get_BME280_in_all_readings();
 8002a4e:	f7ff fd39 	bl	80024c4 <Get_BME280_in_all_readings>
		Get_BME280_ex_all_readings();
 8002a52:	f7ff fdb1 	bl	80025b8 <Get_BME280_ex_all_readings>
		Get_MPU6050_all_readings();
 8002a56:	f7ff fe23 	bl	80026a0 <Get_MPU6050_all_readings>
		Get_SI1145_all_readings();
 8002a5a:	f7ff fe89 	bl	8002770 <Get_SI1145_all_readings>
		for(uint8_t i = 0; i < ALTITUDE_BUFFER_SIZE; i++)
 8002a5e:	2400      	movs	r4, #0
		double Altitude_last_sum = 0;
 8002a60:	2000      	movs	r0, #0
 8002a62:	2100      	movs	r1, #0
		for(uint8_t i = 0; i < ALTITUDE_BUFFER_SIZE; i++)
 8002a64:	e008      	b.n	8002a78 <HAL_TIM_PeriodElapsedCallback+0x90>
			Altitude_last_sum += Altitude_last[i];
 8002a66:	4b93      	ldr	r3, [pc, #588]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002a68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fc14 	bl	800029c <__adddf3>
		for(uint8_t i = 0; i < ALTITUDE_BUFFER_SIZE; i++)
 8002a74:	3401      	adds	r4, #1
 8002a76:	b2e4      	uxtb	r4, r4
 8002a78:	2c09      	cmp	r4, #9
 8002a7a:	d9f4      	bls.n	8002a66 <HAL_TIM_PeriodElapsedCallback+0x7e>
		double Altitude_last_avrg = Altitude_last_sum/ALTITUDE_BUFFER_SIZE;
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4b8e      	ldr	r3, [pc, #568]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a80:	f7fd feec 	bl	800085c <__aeabi_ddiv>
 8002a84:	4606      	mov	r6, r0
 8002a86:	460f      	mov	r7, r1
		double Altitude_read = Sensors.BME280_External.Altitude;
 8002a88:	4b8c      	ldr	r3, [pc, #560]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002a8a:	ed93 8b0a 	vldr	d8, [r3, #40]	; 0x28
		if((abs(Altitude_read - Altitude_last_avrg) < VERTICAL_SPEED_MAX) && (Sensors.BME280_External.Status == HAL_OK))
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	ec51 0b18 	vmov	r0, r1, d8
 8002a96:	f7fd fbff 	bl	8000298 <__aeabi_dsub>
 8002a9a:	4680      	mov	r8, r0
 8002a9c:	4689      	mov	r9, r1
 8002a9e:	f7fe f863 	bl	8000b68 <__aeabi_d2iz>
 8002aa2:	3063      	adds	r0, #99	; 0x63
 8002aa4:	28c6      	cmp	r0, #198	; 0xc6
 8002aa6:	d812      	bhi.n	8002ace <HAL_TIM_PeriodElapsedCallback+0xe6>
 8002aa8:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b97b      	cbnz	r3, 8002ace <HAL_TIM_PeriodElapsedCallback+0xe6>
			Altitude_last[Altitude_index] = Altitude_read;
 8002aae:	4a84      	ldr	r2, [pc, #528]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002ab0:	7811      	ldrb	r1, [r2, #0]
 8002ab2:	4b80      	ldr	r3, [pc, #512]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002ab4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002ab8:	ed83 8b00 	vstr	d8, [r3]
			if(Altitude_index < (ALTITUDE_BUFFER_SIZE-1))
 8002abc:	7813      	ldrb	r3, [r2, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	f200 80a7 	bhi.w	8002c14 <HAL_TIM_PeriodElapsedCallback+0x22c>
				Altitude_index++;
 8002ac6:	7813      	ldrb	r3, [r2, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	7013      	strb	r3, [r2, #0]
		if(((Altitude_read - Altitude_last_avrg) < ASCENDING_SPEED_MAX) && (Altitude_read > Altitude_max))
 8002ace:	2200      	movs	r2, #0
 8002ad0:	4b7c      	ldr	r3, [pc, #496]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002ad2:	4640      	mov	r0, r8
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	f7fe f809 	bl	8000aec <__aeabi_dcmplt>
 8002ada:	b150      	cbz	r0, 8002af2 <HAL_TIM_PeriodElapsedCallback+0x10a>
 8002adc:	ec53 2b18 	vmov	r2, r3, d8
 8002ae0:	4979      	ldr	r1, [pc, #484]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ae6:	f7fe f801 	bl	8000aec <__aeabi_dcmplt>
 8002aea:	b110      	cbz	r0, 8002af2 <HAL_TIM_PeriodElapsedCallback+0x10a>
			Altitude_max = Altitude_read;
 8002aec:	4b76      	ldr	r3, [pc, #472]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002aee:	ed83 8b00 	vstr	d8, [r3]
		if((Altitude_max > LOWER_ALTITUDE_LIMIT+200) && (Altitude_last_avrg < LOWER_ALTITUDE_LIMIT))
 8002af2:	2200      	movs	r2, #0
 8002af4:	4b75      	ldr	r3, [pc, #468]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002af6:	4974      	ldr	r1, [pc, #464]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002afc:	f7fe f814 	bl	8000b28 <__aeabi_dcmpgt>
 8002b00:	b140      	cbz	r0, 8002b14 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8002b02:	2200      	movs	r2, #0
 8002b04:	4b72      	ldr	r3, [pc, #456]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002b06:	4630      	mov	r0, r6
 8002b08:	4639      	mov	r1, r7
 8002b0a:	f7fd ffef 	bl	8000aec <__aeabi_dcmplt>
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	f040 8084 	bne.w	8002c1c <HAL_TIM_PeriodElapsedCallback+0x234>
		if((Altitude_last_avrg > UPPER_ALTITUDE_LIMIT) && (Rope_cut_status != ROPE_CUTTING))
 8002b14:	a35c      	add	r3, pc, #368	; (adr r3, 8002c88 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	4639      	mov	r1, r7
 8002b1e:	f7fe f803 	bl	8000b28 <__aeabi_dcmpgt>
 8002b22:	b150      	cbz	r0, 8002b3a <HAL_TIM_PeriodElapsedCallback+0x152>
 8002b24:	4b6b      	ldr	r3, [pc, #428]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_TIM_PeriodElapsedCallback+0x152>
			Rope_cut_status = ROPE_CUTTING;
 8002b2e:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
			Rope_cut_delay = ROPE_CUT_TIME;
 8002b34:	4b68      	ldr	r3, [pc, #416]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002b36:	220a      	movs	r2, #10
 8002b38:	701a      	strb	r2, [r3, #0]
		if(Rope_cut_status == ROPE_CUTTING)
 8002b3a:	4b66      	ldr	r3, [pc, #408]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d075      	beq.n	8002c30 <HAL_TIM_PeriodElapsedCallback+0x248>
		memset(Data_to_send, 0, sizeof(Data_to_send));
 8002b44:	4c65      	ldr	r4, [pc, #404]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002b46:	223c      	movs	r2, #60	; 0x3c
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f006 f91c 	bl	8008d88 <memset>
		Data_to_send[0] = ',';
 8002b50:	232c      	movs	r3, #44	; 0x2c
 8002b52:	7023      	strb	r3, [r4, #0]
		if(Sensors.BME280_Internal.Status == HAL_OK)
 8002b54:	4b59      	ldr	r3, [pc, #356]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d17f      	bne.n	8002c5e <HAL_TIM_PeriodElapsedCallback+0x276>
			sprintf(TempStr, "%.2f", Sensors.BME280_Internal.Temperature);
 8002b5e:	4b57      	ldr	r3, [pc, #348]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002b60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b64:	495e      	ldr	r1, [pc, #376]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002b66:	a807      	add	r0, sp, #28
 8002b68:	f006 fd80 	bl	800966c <siprintf>
			strcat(Data_to_send, TempStr);
 8002b6c:	a907      	add	r1, sp, #28
 8002b6e:	4620      	mov	r0, r4
 8002b70:	f006 fd9c 	bl	80096ac <strcat>
		if(Sensors.BME280_External.Status == HAL_OK)
 8002b74:	4b51      	ldr	r3, [pc, #324]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d177      	bne.n	8002c6c <HAL_TIM_PeriodElapsedCallback+0x284>
			sprintf(TempStr, ",%.2f,%d", Sensors.BME280_External.Temperature, (int16_t)Sensors.BME280_External.Altitude);
 8002b7c:	4c4f      	ldr	r4, [pc, #316]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002b7e:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002b82:	f7fd fff1 	bl	8000b68 <__aeabi_d2iz>
 8002b86:	b200      	sxth	r0, r0
 8002b88:	9000      	str	r0, [sp, #0]
 8002b8a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002b8e:	4955      	ldr	r1, [pc, #340]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002b90:	a807      	add	r0, sp, #28
 8002b92:	f006 fd6b 	bl	800966c <siprintf>
			strcat(Data_to_send, TempStr);
 8002b96:	a907      	add	r1, sp, #28
 8002b98:	4850      	ldr	r0, [pc, #320]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002b9a:	f006 fd87 	bl	80096ac <strcat>
		if(Sensors.SI1145.Status == HAL_OK)
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002ba0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 80b5 	bne.w	8002d14 <HAL_TIM_PeriodElapsedCallback+0x32c>
			sprintf(TempStr, ",%.2f", Sensors.SI1145.UV);
 8002baa:	4b44      	ldr	r3, [pc, #272]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002bac:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8002bb0:	494d      	ldr	r1, [pc, #308]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002bb2:	a807      	add	r0, sp, #28
 8002bb4:	f006 fd5a 	bl	800966c <siprintf>
			strcat(Data_to_send, TempStr);
 8002bb8:	a907      	add	r1, sp, #28
 8002bba:	4848      	ldr	r0, [pc, #288]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002bbc:	f006 fd76 	bl	80096ac <strcat>
		if((sd_mounted == 1) && (sd_status == FR_OK))
 8002bc0:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	f000 80ad 	beq.w	8002d26 <HAL_TIM_PeriodElapsedCallback+0x33e>
		if((sd_status != FR_OK) && (sd_error_cnt <= SD_MAX_RETRIES))
 8002bcc:	4b48      	ldr	r3, [pc, #288]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b12b      	cbz	r3, 8002bde <HAL_TIM_PeriodElapsedCallback+0x1f6>
 8002bd2:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	f240 8167 	bls.w	8002eac <HAL_TIM_PeriodElapsedCallback+0x4c4>
		uint16_t Cycle_runtime = HAL_GetTick() - tickstart;
 8002bde:	f001 fe07 	bl	80047f0 <HAL_GetTick>
 8002be2:	b280      	uxth	r0, r0
 8002be4:	eba0 0a0a 	sub.w	sl, r0, sl
 8002be8:	fa1f fa8a 	uxth.w	sl, sl
		if(Cycle_runtime > Cycle_runtime_max)
 8002bec:	4b42      	ldr	r3, [pc, #264]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	4553      	cmp	r3, sl
 8002bf4:	d202      	bcs.n	8002bfc <HAL_TIM_PeriodElapsedCallback+0x214>
			Cycle_runtime_max = Cycle_runtime;
 8002bf6:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002bf8:	f8a3 a000 	strh.w	sl, [r3]
		if(Cycle_runtime < Cycle_runtime_min)
 8002bfc:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002bfe:	881b      	ldrh	r3, [r3, #0]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	4553      	cmp	r3, sl
 8002c04:	d902      	bls.n	8002c0c <HAL_TIM_PeriodElapsedCallback+0x224>
			Cycle_runtime_min = Cycle_runtime;
 8002c06:	4b3d      	ldr	r3, [pc, #244]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002c08:	f8a3 a000 	strh.w	sl, [r3]
		Cycle_runtime_last = Cycle_runtime;
 8002c0c:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002c0e:	f8a3 a000 	strh.w	sl, [r3]
 8002c12:	e6f2      	b.n	80029fa <HAL_TIM_PeriodElapsedCallback+0x12>
				Altitude_index = 0;
 8002c14:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e758      	b.n	8002ace <HAL_TIM_PeriodElapsedCallback+0xe6>
			HAL_TIM_Base_Stop_IT(&htim3);
 8002c1c:	481c      	ldr	r0, [pc, #112]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002c1e:	f003 fe8d 	bl	800693c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim10);
 8002c22:	481f      	ldr	r0, [pc, #124]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002c24:	f003 fe4e 	bl	80068c4 <HAL_TIM_Base_Start_IT>
			Is_asleep = 1;
 8002c28:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	e771      	b.n	8002b14 <HAL_TIM_PeriodElapsedCallback+0x12c>
			if(Rope_cut_delay > 0)
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	b153      	cbz	r3, 8002c4c <HAL_TIM_PeriodElapsedCallback+0x264>
				Rope_cut_delay--;
 8002c36:	4a28      	ldr	r2, [pc, #160]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002c38:	7813      	ldrb	r3, [r2, #0]
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(ROPE_CUT_EN_GPIO_Port, ROPE_CUT_EN_Pin, GPIO_PIN_SET);
 8002c40:	2201      	movs	r2, #1
 8002c42:	2102      	movs	r1, #2
 8002c44:	4830      	ldr	r0, [pc, #192]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002c46:	f001 ff9e 	bl	8004b86 <HAL_GPIO_WritePin>
 8002c4a:	e77b      	b.n	8002b44 <HAL_TIM_PeriodElapsedCallback+0x15c>
				HAL_GPIO_WritePin(ROPE_CUT_EN_GPIO_Port, ROPE_CUT_EN_Pin, GPIO_PIN_RESET);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2102      	movs	r1, #2
 8002c50:	482d      	ldr	r0, [pc, #180]	; (8002d08 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002c52:	f001 ff98 	bl	8004b86 <HAL_GPIO_WritePin>
				Rope_cut_status = ROPE_CUT_DONE;
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002c58:	2202      	movs	r2, #2
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e772      	b.n	8002b44 <HAL_TIM_PeriodElapsedCallback+0x15c>
			sprintf(Data_to_send, "00");
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002c60:	4b2a      	ldr	r3, [pc, #168]	; (8002d0c <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	8013      	strh	r3, [r2, #0]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	7093      	strb	r3, [r2, #2]
 8002c6a:	e783      	b.n	8002b74 <HAL_TIM_PeriodElapsedCallback+0x18c>
			strcat(Data_to_send, ",00,00");
 8002c6c:	4c1b      	ldr	r4, [pc, #108]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7fd fab6 	bl	80001e0 <strlen>
 8002c74:	4603      	mov	r3, r0
 8002c76:	1821      	adds	r1, r4, r0
 8002c78:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002c7a:	6810      	ldr	r0, [r2, #0]
 8002c7c:	50e0      	str	r0, [r4, r3]
 8002c7e:	8890      	ldrh	r0, [r2, #4]
 8002c80:	7993      	ldrb	r3, [r2, #6]
 8002c82:	8088      	strh	r0, [r1, #4]
 8002c84:	718b      	strb	r3, [r1, #6]
 8002c86:	e78a      	b.n	8002b9e <HAL_TIM_PeriodElapsedCallback+0x1b6>
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	40db5800 	.word	0x40db5800
 8002c90:	20000bf4 	.word	0x20000bf4
 8002c94:	20000c3c 	.word	0x20000c3c
 8002c98:	20000310 	.word	0x20000310
 8002c9c:	20000330 	.word	0x20000330
 8002ca0:	20000b64 	.word	0x20000b64
 8002ca4:	20000bac 	.word	0x20000bac
 8002ca8:	20000aec 	.word	0x20000aec
 8002cac:	20000354 	.word	0x20000354
 8002cb0:	20000350 	.word	0x20000350
 8002cb4:	20000270 	.word	0x20000270
 8002cb8:	40240000 	.word	0x40240000
 8002cbc:	200003b0 	.word	0x200003b0
 8002cc0:	2000026c 	.word	0x2000026c
 8002cc4:	40340000 	.word	0x40340000
 8002cc8:	200002c0 	.word	0x200002c0
 8002ccc:	4092c000 	.word	0x4092c000
 8002cd0:	408f4000 	.word	0x408f4000
 8002cd4:	200003ae 	.word	0x200003ae
 8002cd8:	200003ad 	.word	0x200003ad
 8002cdc:	20000370 	.word	0x20000370
 8002ce0:	0800cb38 	.word	0x0800cb38
 8002ce4:	0800cb40 	.word	0x0800cb40
 8002ce8:	0800cb54 	.word	0x0800cb54
 8002cec:	20000da2 	.word	0x20000da2
 8002cf0:	20000da3 	.word	0x20000da3
 8002cf4:	20000da0 	.word	0x20000da0
 8002cf8:	2000036a 	.word	0x2000036a
 8002cfc:	2000036c 	.word	0x2000036c
 8002d00:	20000368 	.word	0x20000368
 8002d04:	200003ac 	.word	0x200003ac
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	0800cb50 	.word	0x0800cb50
 8002d10:	0800cb4c 	.word	0x0800cb4c
			strcat(Data_to_send, ",00");
 8002d14:	4c85      	ldr	r4, [pc, #532]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002d16:	4620      	mov	r0, r4
 8002d18:	f7fd fa62 	bl	80001e0 <strlen>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4a84      	ldr	r2, [pc, #528]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002d20:	6810      	ldr	r0, [r2, #0]
 8002d22:	50e0      	str	r0, [r4, r3]
 8002d24:	e74c      	b.n	8002bc0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
		if((sd_mounted == 1) && (sd_status == FR_OK))
 8002d26:	4b83      	ldr	r3, [pc, #524]	; (8002f34 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f47f af4c 	bne.w	8002bcc <HAL_TIM_PeriodElapsedCallback+0x1e4>
			sd_error_cnt = 0;
 8002d34:	4b80      	ldr	r3, [pc, #512]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
			f_printf(&fil, "| %2u | %2u | %2u | %2u |", Current_Date.Date, Current_Time.Hours, Current_Time.Minutes, Current_Time.Seconds);
 8002d3a:	4b80      	ldr	r3, [pc, #512]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002d3c:	785a      	ldrb	r2, [r3, #1]
 8002d3e:	7899      	ldrb	r1, [r3, #2]
 8002d40:	9101      	str	r1, [sp, #4]
 8002d42:	9200      	str	r2, [sp, #0]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4a7e      	ldr	r2, [pc, #504]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002d48:	7892      	ldrb	r2, [r2, #2]
 8002d4a:	497e      	ldr	r1, [pc, #504]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002d4c:	487e      	ldr	r0, [pc, #504]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002d4e:	f005 fe96 	bl	8008a7e <f_printf>
			if(Sensors.BME280_Internal.Status == HAL_OK)
 8002d52:	4b7e      	ldr	r3, [pc, #504]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002d54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d58:	b10b      	cbz	r3, 8002d5e <HAL_TIM_PeriodElapsedCallback+0x376>
				for(uint8_t i = 0; i < 3; i++)
 8002d5a:	4634      	mov	r4, r6
 8002d5c:	e01d      	b.n	8002d9a <HAL_TIM_PeriodElapsedCallback+0x3b2>
				sprintf(TempStr, " %8.3f | %8.3f | %8.3f | %8.1f |", Sensors.BME280_Internal.Temperature, Sensors.BME280_Internal.Pressure, Sensors.BME280_Internal.Humidity, Sensors.BME280_Internal.Altitude);
 8002d5e:	4b7b      	ldr	r3, [pc, #492]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002d60:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002d68:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d70:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002d74:	e9cd 0100 	strd	r0, r1, [sp]
 8002d78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d7c:	4974      	ldr	r1, [pc, #464]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002d7e:	a807      	add	r0, sp, #28
 8002d80:	f006 fc74 	bl	800966c <siprintf>
				f_printf(&fil, TempStr);
 8002d84:	a907      	add	r1, sp, #28
 8002d86:	4870      	ldr	r0, [pc, #448]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002d88:	f005 fe79 	bl	8008a7e <f_printf>
 8002d8c:	e007      	b.n	8002d9e <HAL_TIM_PeriodElapsedCallback+0x3b6>
					f_printf(&fil, "    N/A    |");
 8002d8e:	4971      	ldr	r1, [pc, #452]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002d90:	486d      	ldr	r0, [pc, #436]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002d92:	f005 fe74 	bl	8008a7e <f_printf>
				for(uint8_t i = 0; i < 3; i++)
 8002d96:	3401      	adds	r4, #1
 8002d98:	b2e4      	uxtb	r4, r4
 8002d9a:	2c02      	cmp	r4, #2
 8002d9c:	d9f7      	bls.n	8002d8e <HAL_TIM_PeriodElapsedCallback+0x3a6>
			if(Sensors.BME280_External.Status == HAL_OK)
 8002d9e:	4b6b      	ldr	r3, [pc, #428]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b10b      	cbz	r3, 8002da8 <HAL_TIM_PeriodElapsedCallback+0x3c0>
				for(uint8_t i = 0; i < 3; i++)
 8002da4:	4634      	mov	r4, r6
 8002da6:	e01d      	b.n	8002de4 <HAL_TIM_PeriodElapsedCallback+0x3fc>
				sprintf(TempStr, " %8.3f | %8.3f | %8.3f | %8.1f |", Sensors.BME280_External.Temperature, Sensors.BME280_External.Pressure, Sensors.BME280_External.Humidity, Sensors.BME280_External.Altitude);
 8002da8:	4b68      	ldr	r3, [pc, #416]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002daa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002db2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002dbe:	e9cd 0100 	strd	r0, r1, [sp]
 8002dc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002dc6:	4962      	ldr	r1, [pc, #392]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002dc8:	a807      	add	r0, sp, #28
 8002dca:	f006 fc4f 	bl	800966c <siprintf>
				f_printf(&fil, TempStr);
 8002dce:	a907      	add	r1, sp, #28
 8002dd0:	485d      	ldr	r0, [pc, #372]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002dd2:	f005 fe54 	bl	8008a7e <f_printf>
 8002dd6:	e007      	b.n	8002de8 <HAL_TIM_PeriodElapsedCallback+0x400>
					f_printf(&fil, "    N/A    |");
 8002dd8:	495e      	ldr	r1, [pc, #376]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002dda:	485b      	ldr	r0, [pc, #364]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002ddc:	f005 fe4f 	bl	8008a7e <f_printf>
				for(uint8_t i = 0; i < 3; i++)
 8002de0:	3401      	adds	r4, #1
 8002de2:	b2e4      	uxtb	r4, r4
 8002de4:	2c02      	cmp	r4, #2
 8002de6:	d9f7      	bls.n	8002dd8 <HAL_TIM_PeriodElapsedCallback+0x3f0>
			if(Sensors.MPU650.Status == HAL_OK)
 8002de8:	4b58      	ldr	r3, [pc, #352]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002dea:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002dee:	b10b      	cbz	r3, 8002df4 <HAL_TIM_PeriodElapsedCallback+0x40c>
				for(uint8_t i = 0; i < 7; i++)
 8002df0:	4634      	mov	r4, r6
 8002df2:	e030      	b.n	8002e56 <HAL_TIM_PeriodElapsedCallback+0x46e>
				sprintf(TempStr, " %9.3f | %9.3f | %9.3f |", Sensors.MPU650.Accel_X, Sensors.MPU650.Accel_Y, Sensors.MPU650.Accel_Z);
 8002df4:	4c55      	ldr	r4, [pc, #340]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002df6:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
 8002dfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002dfe:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 8002e02:	e9cd 2300 	strd	r2, r3, [sp]
 8002e06:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8002e0a:	4953      	ldr	r1, [pc, #332]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002e0c:	a807      	add	r0, sp, #28
 8002e0e:	f006 fc2d 	bl	800966c <siprintf>
				f_printf(&fil, TempStr);
 8002e12:	4f4d      	ldr	r7, [pc, #308]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002e14:	a907      	add	r1, sp, #28
 8002e16:	4638      	mov	r0, r7
 8002e18:	f005 fe31 	bl	8008a7e <f_printf>
				sprintf(TempStr, " %9.3f | %9.3f | %9.3f | %9.3f |", Sensors.MPU650.Gyro_X, Sensors.MPU650.Gyro_Y, Sensors.MPU650.Gyro_Z, Sensors.MPU650.Temperature);
 8002e1c:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
 8002e20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e24:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
 8002e28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e2c:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 8002e30:	e9cd 2300 	strd	r2, r3, [sp]
 8002e34:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
 8002e38:	4948      	ldr	r1, [pc, #288]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002e3a:	a807      	add	r0, sp, #28
 8002e3c:	f006 fc16 	bl	800966c <siprintf>
				f_printf(&fil, TempStr);
 8002e40:	a907      	add	r1, sp, #28
 8002e42:	4638      	mov	r0, r7
 8002e44:	f005 fe1b 	bl	8008a7e <f_printf>
 8002e48:	e007      	b.n	8002e5a <HAL_TIM_PeriodElapsedCallback+0x472>
					f_printf(&fil, "      N/A     |");
 8002e4a:	4945      	ldr	r1, [pc, #276]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002e4c:	483e      	ldr	r0, [pc, #248]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002e4e:	f005 fe16 	bl	8008a7e <f_printf>
				for(uint8_t i = 0; i < 7; i++)
 8002e52:	3401      	adds	r4, #1
 8002e54:	b2e4      	uxtb	r4, r4
 8002e56:	2c06      	cmp	r4, #6
 8002e58:	d9f7      	bls.n	8002e4a <HAL_TIM_PeriodElapsedCallback+0x462>
			if(Sensors.SI1145.Status == HAL_OK)
 8002e5a:	4b3c      	ldr	r3, [pc, #240]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002e5c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e60:	b9bb      	cbnz	r3, 8002e92 <HAL_TIM_PeriodElapsedCallback+0x4aa>
				sprintf(TempStr, " %6d | %6d | %6.2f |", Sensors.SI1145.VIS, Sensors.SI1145.IR, Sensors.SI1145.UV);
 8002e62:	4a3a      	ldr	r2, [pc, #232]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002e64:	e9d2 012a 	ldrd	r0, r1, [r2, #168]	; 0xa8
 8002e68:	e9cd 0100 	strd	r0, r1, [sp]
 8002e6c:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8002e70:	f8b2 20b2 	ldrh.w	r2, [r2, #178]	; 0xb2
 8002e74:	493b      	ldr	r1, [pc, #236]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002e76:	a807      	add	r0, sp, #28
 8002e78:	f006 fbf8 	bl	800966c <siprintf>
				f_printf(&fil, TempStr);
 8002e7c:	a907      	add	r1, sp, #28
 8002e7e:	4832      	ldr	r0, [pc, #200]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002e80:	f005 fdfd 	bl	8008a7e <f_printf>
 8002e84:	e007      	b.n	8002e96 <HAL_TIM_PeriodElapsedCallback+0x4ae>
					f_printf(&fil, "  N/A   |");
 8002e86:	4938      	ldr	r1, [pc, #224]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002e88:	482f      	ldr	r0, [pc, #188]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002e8a:	f005 fdf8 	bl	8008a7e <f_printf>
				for(uint8_t i = 0; i < 3; i++)
 8002e8e:	3601      	adds	r6, #1
 8002e90:	b2f6      	uxtb	r6, r6
 8002e92:	2e02      	cmp	r6, #2
 8002e94:	d9f7      	bls.n	8002e86 <HAL_TIM_PeriodElapsedCallback+0x49e>
			f_printf(&fil, "\n");
 8002e96:	4c2c      	ldr	r4, [pc, #176]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002e98:	4934      	ldr	r1, [pc, #208]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f005 fdef 	bl	8008a7e <f_printf>
			sd_status = f_sync(&fil);
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	f005 fd1c 	bl	80088de <f_sync>
 8002ea6:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002ea8:	7018      	strb	r0, [r3, #0]
 8002eaa:	e68f      	b.n	8002bcc <HAL_TIM_PeriodElapsedCallback+0x1e4>
			sd_status = f_mount(NULL, "", 1);
 8002eac:	4e30      	ldr	r6, [pc, #192]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	4631      	mov	r1, r6
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f005 fa90 	bl	80083d8 <f_mount>
 8002eb8:	4c1e      	ldr	r4, [pc, #120]	; (8002f34 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002eba:	7020      	strb	r0, [r4, #0]
			sd_status = f_mount(&fs, "", 1);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	4631      	mov	r1, r6
 8002ec0:	482c      	ldr	r0, [pc, #176]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002ec2:	f005 fa89 	bl	80083d8 <f_mount>
 8002ec6:	7020      	strb	r0, [r4, #0]
			if(sd_status == FR_OK)
 8002ec8:	7823      	ldrb	r3, [r4, #0]
 8002eca:	b1c3      	cbz	r3, 8002efe <HAL_TIM_PeriodElapsedCallback+0x516>
				sd_error_cnt++;
 8002ecc:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002ece:	7813      	ldrb	r3, [r2, #0]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	7013      	strb	r3, [r2, #0]
			if(sd_error_cnt > SD_MAX_RETRIES)
 8002ed6:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	f67f ae7e 	bls.w	8002bde <HAL_TIM_PeriodElapsedCallback+0x1f6>
				UART1_TxBuf[0] = 0xD0;
 8002ee2:	4925      	ldr	r1, [pc, #148]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002ee4:	23d0      	movs	r3, #208	; 0xd0
 8002ee6:	700b      	strb	r3, [r1, #0]
				UART1_TxBuf[1] = sd_status;
 8002ee8:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	704b      	strb	r3, [r1, #1]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8002eee:	2202      	movs	r2, #2
 8002ef0:	4822      	ldr	r0, [pc, #136]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002ef2:	f004 f85a 	bl	8006faa <HAL_UART_Transmit_IT>
				sd_mounted = 0;
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	701a      	strb	r2, [r3, #0]
 8002efc:	e66f      	b.n	8002bde <HAL_TIM_PeriodElapsedCallback+0x1f6>
				sd_error_cnt = 0;
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
				sd_mounted = 1;
 8002f04:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
				sd_file_cnt++;
 8002f0a:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002f0c:	7813      	ldrb	r3, [r2, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	7013      	strb	r3, [r2, #0]
				sprintf(TempStr, "Data%d.txt", sd_file_cnt);
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	491c      	ldr	r1, [pc, #112]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8002f18:	a807      	add	r0, sp, #28
 8002f1a:	f006 fba7 	bl	800966c <siprintf>
				sd_status = f_open(&fil, TempStr, FA_OPEN_ALWAYS | FA_WRITE);
 8002f1e:	2212      	movs	r2, #18
 8002f20:	a907      	add	r1, sp, #28
 8002f22:	4809      	ldr	r0, [pc, #36]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002f24:	f005 fa86 	bl	8008434 <f_open>
 8002f28:	7020      	strb	r0, [r4, #0]
 8002f2a:	e7d4      	b.n	8002ed6 <HAL_TIM_PeriodElapsedCallback+0x4ee>
 8002f2c:	20000370 	.word	0x20000370
 8002f30:	0800cb5c 	.word	0x0800cb5c
 8002f34:	20000da3 	.word	0x20000da3
 8002f38:	20000da0 	.word	0x20000da0
 8002f3c:	20000354 	.word	0x20000354
 8002f40:	20000350 	.word	0x20000350
 8002f44:	0800cb60 	.word	0x0800cb60
 8002f48:	200005dc 	.word	0x200005dc
 8002f4c:	200003b0 	.word	0x200003b0
 8002f50:	0800cb7c 	.word	0x0800cb7c
 8002f54:	0800cba0 	.word	0x0800cba0
 8002f58:	0800cbb8 	.word	0x0800cbb8
 8002f5c:	0800cbb0 	.word	0x0800cbb0
 8002f60:	0800cbd4 	.word	0x0800cbd4
 8002f64:	0800cbe4 	.word	0x0800cbe4
 8002f68:	0800cbfc 	.word	0x0800cbfc
 8002f6c:	0800cc08 	.word	0x0800cc08
 8002f70:	0800cb34 	.word	0x0800cb34
 8002f74:	20000814 	.word	0x20000814
 8002f78:	200004e4 	.word	0x200004e4
 8002f7c:	20000d14 	.word	0x20000d14
 8002f80:	20000da2 	.word	0x20000da2
 8002f84:	20000da1 	.word	0x20000da1
 8002f88:	0800cc0c 	.word	0x0800cc0c
		  if((sd_mounted == 1) && (sd_status == FR_OK))
 8002f8c:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d102      	bne.n	8002f9c <HAL_TIM_PeriodElapsedCallback+0x5b4>
 8002f96:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b34b      	cbz	r3, 8002ff0 <HAL_TIM_PeriodElapsedCallback+0x608>
			  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fa2:	4859      	ldr	r0, [pc, #356]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8002fa4:	f001 fdef 	bl	8004b86 <HAL_GPIO_WritePin>
		  if(Sensors.BME280_Internal.Status == HAL_OK)
 8002fa8:	4b58      	ldr	r3, [pc, #352]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002faa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fae:	bb2b      	cbnz	r3, 8002ffc <HAL_TIM_PeriodElapsedCallback+0x614>
			  HAL_GPIO_TogglePin(USER_LED4_GPIO_Port, USER_LED4_Pin);
 8002fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fb4:	4856      	ldr	r0, [pc, #344]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8002fb6:	f001 fdec 	bl	8004b92 <HAL_GPIO_TogglePin>
		  if(Sensors.BME280_External.Status == HAL_OK)
 8002fba:	4b54      	ldr	r3, [pc, #336]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	bb23      	cbnz	r3, 800300a <HAL_TIM_PeriodElapsedCallback+0x622>
			  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 8002fc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fc4:	4852      	ldr	r0, [pc, #328]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8002fc6:	f001 fde4 	bl	8004b92 <HAL_GPIO_TogglePin>
		  if(Sensors.MPU650.Status == HAL_OK)
 8002fca:	4b50      	ldr	r3, [pc, #320]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002fcc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002fd0:	bb13      	cbnz	r3, 8003018 <HAL_TIM_PeriodElapsedCallback+0x630>
			  HAL_GPIO_TogglePin(USER_LED5_GPIO_Port, USER_LED5_Pin);
 8002fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fd6:	484e      	ldr	r0, [pc, #312]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8002fd8:	f001 fddb 	bl	8004b92 <HAL_GPIO_TogglePin>
		  if(Sensors.SI1145.Status == HAL_OK)
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002fde:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002fe2:	bb03      	cbnz	r3, 8003026 <HAL_TIM_PeriodElapsedCallback+0x63e>
			  HAL_GPIO_TogglePin(USER_LED3_GPIO_Port, USER_LED3_Pin);
 8002fe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fe8:	4849      	ldr	r0, [pc, #292]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8002fea:	f001 fdd2 	bl	8004b92 <HAL_GPIO_TogglePin>
 8002fee:	e508      	b.n	8002a02 <HAL_TIM_PeriodElapsedCallback+0x1a>
			  HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8002ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ff4:	4844      	ldr	r0, [pc, #272]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8002ff6:	f001 fdcc 	bl	8004b92 <HAL_GPIO_TogglePin>
 8002ffa:	e7d5      	b.n	8002fa8 <HAL_TIM_PeriodElapsedCallback+0x5c0>
			  HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, GPIO_PIN_RESET);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003002:	4843      	ldr	r0, [pc, #268]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003004:	f001 fdbf 	bl	8004b86 <HAL_GPIO_WritePin>
 8003008:	e7d7      	b.n	8002fba <HAL_TIM_PeriodElapsedCallback+0x5d2>
			  HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, GPIO_PIN_RESET);
 800300a:	2200      	movs	r2, #0
 800300c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003010:	483f      	ldr	r0, [pc, #252]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003012:	f001 fdb8 	bl	8004b86 <HAL_GPIO_WritePin>
 8003016:	e7d8      	b.n	8002fca <HAL_TIM_PeriodElapsedCallback+0x5e2>
			  HAL_GPIO_WritePin(USER_LED5_GPIO_Port, USER_LED5_Pin, GPIO_PIN_RESET);
 8003018:	2200      	movs	r2, #0
 800301a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800301e:	483c      	ldr	r0, [pc, #240]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003020:	f001 fdb1 	bl	8004b86 <HAL_GPIO_WritePin>
 8003024:	e7da      	b.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x5f4>
			  HAL_GPIO_WritePin(USER_LED3_GPIO_Port, USER_LED3_Pin, GPIO_PIN_RESET);
 8003026:	2200      	movs	r2, #0
 8003028:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800302c:	4838      	ldr	r0, [pc, #224]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0x728>)
 800302e:	f001 fdaa 	bl	8004b86 <HAL_GPIO_WritePin>
 8003032:	e4e6      	b.n	8002a02 <HAL_TIM_PeriodElapsedCallback+0x1a>
		CAM_1.REC_STATUS = CAM_NREC;
 8003034:	4b37      	ldr	r3, [pc, #220]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003036:	2200      	movs	r2, #0
 8003038:	771a      	strb	r2, [r3, #28]
		if(CAM_1.Startup_delay > 0)
 800303a:	7fdb      	ldrb	r3, [r3, #31]
 800303c:	b113      	cbz	r3, 8003044 <HAL_TIM_PeriodElapsedCallback+0x65c>
			CAM_1.Startup_delay--;
 800303e:	3b01      	subs	r3, #1
 8003040:	4a34      	ldr	r2, [pc, #208]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003042:	77d3      	strb	r3, [r2, #31]
		if(CAM_1.Do_Restart)
 8003044:	4b33      	ldr	r3, [pc, #204]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003046:	7f5b      	ldrb	r3, [r3, #29]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f43f acdf 	beq.w	8002a0c <HAL_TIM_PeriodElapsedCallback+0x24>
			CAM_START(&CAM_1);
 800304e:	4831      	ldr	r0, [pc, #196]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003050:	f7ff fc88 	bl	8002964 <CAM_START>
 8003054:	e4da      	b.n	8002a0c <HAL_TIM_PeriodElapsedCallback+0x24>
		CAM_2.REC_STATUS = CAM_NREC;
 8003056:	4b30      	ldr	r3, [pc, #192]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
		if(CAM_2.Startup_delay > 0)
 800305c:	7fdb      	ldrb	r3, [r3, #31]
 800305e:	b113      	cbz	r3, 8003066 <HAL_TIM_PeriodElapsedCallback+0x67e>
			CAM_2.Startup_delay--;
 8003060:	3b01      	subs	r3, #1
 8003062:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003064:	77d3      	strb	r3, [r2, #31]
		if(CAM_2.Do_Restart)
 8003066:	4b2c      	ldr	r3, [pc, #176]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003068:	7f5b      	ldrb	r3, [r3, #29]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f43f acd3 	beq.w	8002a16 <HAL_TIM_PeriodElapsedCallback+0x2e>
			CAM_START(&CAM_2);
 8003070:	4829      	ldr	r0, [pc, #164]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8003072:	f7ff fc77 	bl	8002964 <CAM_START>
 8003076:	e4ce      	b.n	8002a16 <HAL_TIM_PeriodElapsedCallback+0x2e>
		if((Current_Time.Seconds == 30) || (Current_Time.Seconds == 0))
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_TIM_PeriodElapsedCallback+0x734>)
 800307a:	789b      	ldrb	r3, [r3, #2]
 800307c:	2b1e      	cmp	r3, #30
 800307e:	d000      	beq.n	8003082 <HAL_TIM_PeriodElapsedCallback+0x69a>
 8003080:	b933      	cbnz	r3, 8003090 <HAL_TIM_PeriodElapsedCallback+0x6a8>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003082:	2201      	movs	r2, #1
 8003084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003088:	481f      	ldr	r0, [pc, #124]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x720>)
 800308a:	f001 fd7c 	bl	8004b86 <HAL_GPIO_WritePin>
 800308e:	e4c6      	b.n	8002a1e <HAL_TIM_PeriodElapsedCallback+0x36>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003090:	2200      	movs	r2, #0
 8003092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003096:	481c      	ldr	r0, [pc, #112]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003098:	f001 fd75 	bl	8004b86 <HAL_GPIO_WritePin>
 800309c:	e4bf      	b.n	8002a1e <HAL_TIM_PeriodElapsedCallback+0x36>
		if(UART2_Reset_Countdown > 300)	// 10ms * 300 = 3s
 800309e:	4a20      	ldr	r2, [pc, #128]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0x738>)
 80030a0:	7813      	ldrb	r3, [r2, #0]
			UART2_Reset_Countdown++;
 80030a2:	7813      	ldrb	r3, [r2, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	7013      	strb	r3, [r2, #0]
		if(UART2_Send_Sensor_Data == 1)
 80030aa:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	f47f acb8 	bne.w	8002a26 <HAL_TIM_PeriodElapsedCallback+0x3e>
			uint8_t buffer_len = strlen(Data_to_send) - 1;	// Ignore first symbol in string (which always is ',')
 80030b6:	481c      	ldr	r0, [pc, #112]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80030b8:	f7fd f892 	bl	80001e0 <strlen>
 80030bc:	b2c4      	uxtb	r4, r0
 80030be:	3c01      	subs	r4, #1
 80030c0:	b2e4      	uxtb	r4, r4
			for(uint8_t i = 0; i < buffer_len; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_PeriodElapsedCallback+0x6ea>
				UART2_TxBuf[i] = Data_to_send[i+1];
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	4917      	ldr	r1, [pc, #92]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80030ca:	5c88      	ldrb	r0, [r1, r2]
 80030cc:	4917      	ldr	r1, [pc, #92]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x744>)
 80030ce:	54c8      	strb	r0, [r1, r3]
			for(uint8_t i = 0; i < buffer_len; i++)
 80030d0:	b2d3      	uxtb	r3, r2
 80030d2:	42a3      	cmp	r3, r4
 80030d4:	d3f7      	bcc.n	80030c6 <HAL_TIM_PeriodElapsedCallback+0x6de>
			uint8_t checksum = get_check_sum((char *)UART2_TxBuf);
 80030d6:	4d15      	ldr	r5, [pc, #84]	; (800312c <HAL_TIM_PeriodElapsedCallback+0x744>)
 80030d8:	4628      	mov	r0, r5
 80030da:	f7ff f979 	bl	80023d0 <get_check_sum>
			UART2_TxBuf[buffer_len] = '*';
 80030de:	232a      	movs	r3, #42	; 0x2a
 80030e0:	552b      	strb	r3, [r5, r4]
			UART2_TxBuf[buffer_len+1] = checksum;
 80030e2:	3401      	adds	r4, #1
 80030e4:	5528      	strb	r0, [r5, r4]
			HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, strlen((char *)UART2_TxBuf));
 80030e6:	4628      	mov	r0, r5
 80030e8:	f7fd f87a 	bl	80001e0 <strlen>
 80030ec:	b282      	uxth	r2, r0
 80030ee:	4629      	mov	r1, r5
 80030f0:	480f      	ldr	r0, [pc, #60]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80030f2:	f003 ff5a 	bl	8006faa <HAL_UART_Transmit_IT>
			UART2_Send_Sensor_Data = 0;
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
}
 80030fc:	e493      	b.n	8002a26 <HAL_TIM_PeriodElapsedCallback+0x3e>
 80030fe:	bf00      	nop
 8003100:	20000da2 	.word	0x20000da2
 8003104:	20000da3 	.word	0x20000da3
 8003108:	40020000 	.word	0x40020000
 800310c:	200003b0 	.word	0x200003b0
 8003110:	40020400 	.word	0x40020400
 8003114:	20000310 	.word	0x20000310
 8003118:	20000330 	.word	0x20000330
 800311c:	20000354 	.word	0x20000354
 8003120:	2000055c 	.word	0x2000055c
 8003124:	2000059e 	.word	0x2000059e
 8003128:	20000370 	.word	0x20000370
 800312c:	200005a0 	.word	0x200005a0
 8003130:	20000d58 	.word	0x20000d58

08003134 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	4604      	mov	r4, r0
	if((GPIO_PIN == CAM1_START_Pin) && CAM_1.Do_EXTI && (CAM_1.Startup_delay == 0))
 8003138:	2820      	cmp	r0, #32
 800313a:	d002      	beq.n	8003142 <HAL_GPIO_EXTI_Callback+0xe>
		HAL_TIM_Base_Stop_IT(CAM_1.TIM);
		__HAL_TIM_SET_COUNTER(CAM_1.TIM, 1);
		HAL_TIM_Base_Start_IT(CAM_1.TIM);
	}

	if((GPIO_PIN == CAM2_START_Pin) && CAM_2.Do_EXTI && (CAM_2.Startup_delay == 0))
 800313c:	2c10      	cmp	r4, #16
 800313e:	d014      	beq.n	800316a <HAL_GPIO_EXTI_Callback+0x36>
		CAM_2.REC_STATUS = CAM_REC;
		HAL_TIM_Base_Stop_IT(CAM_2.TIM);
		__HAL_TIM_SET_COUNTER(CAM_2.TIM, 1);
		HAL_TIM_Base_Start_IT(CAM_2.TIM);
	}
}
 8003140:	bd70      	pop	{r4, r5, r6, pc}
	if((GPIO_PIN == CAM1_START_Pin) && CAM_1.Do_EXTI && (CAM_1.Startup_delay == 0))
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_GPIO_EXTI_Callback+0x60>)
 8003144:	7f9b      	ldrb	r3, [r3, #30]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0f8      	beq.n	800313c <HAL_GPIO_EXTI_Callback+0x8>
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_GPIO_EXTI_Callback+0x60>)
 800314c:	7fdb      	ldrb	r3, [r3, #31]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f4      	bne.n	800313c <HAL_GPIO_EXTI_Callback+0x8>
		CAM_1.REC_STATUS = CAM_REC;
 8003152:	4d10      	ldr	r5, [pc, #64]	; (8003194 <HAL_GPIO_EXTI_Callback+0x60>)
 8003154:	2601      	movs	r6, #1
 8003156:	772e      	strb	r6, [r5, #28]
		HAL_TIM_Base_Stop_IT(CAM_1.TIM);
 8003158:	69a8      	ldr	r0, [r5, #24]
 800315a:	f003 fbef 	bl	800693c <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(CAM_1.TIM, 1);
 800315e:	69a8      	ldr	r0, [r5, #24]
 8003160:	6803      	ldr	r3, [r0, #0]
 8003162:	625e      	str	r6, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(CAM_1.TIM);
 8003164:	f003 fbae 	bl	80068c4 <HAL_TIM_Base_Start_IT>
 8003168:	e7e8      	b.n	800313c <HAL_GPIO_EXTI_Callback+0x8>
	if((GPIO_PIN == CAM2_START_Pin) && CAM_2.Do_EXTI && (CAM_2.Startup_delay == 0))
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_GPIO_EXTI_Callback+0x64>)
 800316c:	7f9b      	ldrb	r3, [r3, #30]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0e6      	beq.n	8003140 <HAL_GPIO_EXTI_Callback+0xc>
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_GPIO_EXTI_Callback+0x64>)
 8003174:	7fdb      	ldrb	r3, [r3, #31]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e2      	bne.n	8003140 <HAL_GPIO_EXTI_Callback+0xc>
		CAM_2.REC_STATUS = CAM_REC;
 800317a:	4c07      	ldr	r4, [pc, #28]	; (8003198 <HAL_GPIO_EXTI_Callback+0x64>)
 800317c:	2501      	movs	r5, #1
 800317e:	7725      	strb	r5, [r4, #28]
		HAL_TIM_Base_Stop_IT(CAM_2.TIM);
 8003180:	69a0      	ldr	r0, [r4, #24]
 8003182:	f003 fbdb 	bl	800693c <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(CAM_2.TIM, 1);
 8003186:	69a0      	ldr	r0, [r4, #24]
 8003188:	6803      	ldr	r3, [r0, #0]
 800318a:	625d      	str	r5, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(CAM_2.TIM);
 800318c:	f003 fb9a 	bl	80068c4 <HAL_TIM_Base_Start_IT>
}
 8003190:	e7d6      	b.n	8003140 <HAL_GPIO_EXTI_Callback+0xc>
 8003192:	bf00      	nop
 8003194:	20000310 	.word	0x20000310
 8003198:	20000330 	.word	0x20000330

0800319c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800319c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	4604      	mov	r4, r0

	// UART1 connects to the bluetooth module for debugging
	if (huart == &huart1)
 80031a2:	4ba2      	ldr	r3, [pc, #648]	; (800342c <HAL_UART_RxCpltCallback+0x290>)
 80031a4:	4298      	cmp	r0, r3
 80031a6:	d005      	beq.n	80031b4 <HAL_UART_RxCpltCallback+0x18>
		memset(UART1_RxBuf, 0, UART_Buffer_size);
	}


	// UART2 connects to the COM computer
	if (huart == &huart2)
 80031a8:	4ba1      	ldr	r3, [pc, #644]	; (8003430 <HAL_UART_RxCpltCallback+0x294>)
 80031aa:	429c      	cmp	r4, r3
 80031ac:	f000 8213 	beq.w	80035d6 <HAL_UART_RxCpltCallback+0x43a>
			memset(UART2_RxBuf, 0, UART_Buffer_size);
		}

		HAL_UART_Receive_IT(&huart2, UART2_RxBuf, UART2_RxBytes);
	}
}
 80031b0:	b009      	add	sp, #36	; 0x24
 80031b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (UART1_RxIsData == 1)
 80031b4:	4b9f      	ldr	r3, [pc, #636]	; (8003434 <HAL_UART_RxCpltCallback+0x298>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d04e      	beq.n	800325c <HAL_UART_RxCpltCallback+0xc0>
			volatile uint8_t Command = UART1_RxBuf[0];
 80031be:	4b9e      	ldr	r3, [pc, #632]	; (8003438 <HAL_UART_RxCpltCallback+0x29c>)
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	f88d 2004 	strb.w	r2, [sp, #4]
			volatile uint8_t Parameter = UART1_RxBuf[1];
 80031c6:	785b      	ldrb	r3, [r3, #1]
 80031c8:	f88d 3005 	strb.w	r3, [sp, #5]
			if(Command != 0x02)
 80031cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d144      	bne.n	8003260 <HAL_UART_RxCpltCallback+0xc4>
			memset(UART1_TxBuf, 0, UART_Buffer_size);
 80031d6:	223c      	movs	r2, #60	; 0x3c
 80031d8:	2100      	movs	r1, #0
 80031da:	4898      	ldr	r0, [pc, #608]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 80031dc:	f005 fdd4 	bl	8008d88 <memset>
			switch(Command)
 80031e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2bcb      	cmp	r3, #203	; 0xcb
 80031e8:	d832      	bhi.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
 80031ea:	2bc0      	cmp	r3, #192	; 0xc0
 80031ec:	d340      	bcc.n	8003270 <HAL_UART_RxCpltCallback+0xd4>
 80031ee:	3bc0      	subs	r3, #192	; 0xc0
 80031f0:	2b0b      	cmp	r3, #11
 80031f2:	d82d      	bhi.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
 80031f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80031f8:	00d700cd 	.word	0x00d700cd
 80031fc:	00fe00f3 	.word	0x00fe00f3
 8003200:	015a0136 	.word	0x015a0136
 8003204:	019e019b 	.word	0x019e019b
 8003208:	01cf01b2 	.word	0x01cf01b2
 800320c:	01e801e1 	.word	0x01e801e1
				UART1_DataBuf[i] = UART1_RxBuf[i];
 8003210:	4a89      	ldr	r2, [pc, #548]	; (8003438 <HAL_UART_RxCpltCallback+0x29c>)
 8003212:	5cd1      	ldrb	r1, [r2, r3]
 8003214:	4a8a      	ldr	r2, [pc, #552]	; (8003440 <HAL_UART_RxCpltCallback+0x2a4>)
 8003216:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < UART1_RxBytes; i++)
 8003218:	3301      	adds	r3, #1
 800321a:	b2db      	uxtb	r3, r3
 800321c:	4a89      	ldr	r2, [pc, #548]	; (8003444 <HAL_UART_RxCpltCallback+0x2a8>)
 800321e:	7812      	ldrb	r2, [r2, #0]
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	429a      	cmp	r2, r3
 8003224:	d8f4      	bhi.n	8003210 <HAL_UART_RxCpltCallback+0x74>
			UART1_TxBuf[0] = 0x00;
 8003226:	4d85      	ldr	r5, [pc, #532]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 8003228:	2700      	movs	r7, #0
 800322a:	702f      	strb	r7, [r5, #0]
			UART1_TxBuf[1] = Get_System_Status();
 800322c:	f7ff f8e2 	bl	80023f4 <Get_System_Status>
 8003230:	7068      	strb	r0, [r5, #1]
			HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003232:	4e7e      	ldr	r6, [pc, #504]	; (800342c <HAL_UART_RxCpltCallback+0x290>)
 8003234:	2202      	movs	r2, #2
 8003236:	4629      	mov	r1, r5
 8003238:	4630      	mov	r0, r6
 800323a:	f003 feb6 	bl	8006faa <HAL_UART_Transmit_IT>
			UART1_RxIsData = 0;
 800323e:	4b7d      	ldr	r3, [pc, #500]	; (8003434 <HAL_UART_RxCpltCallback+0x298>)
 8003240:	701f      	strb	r7, [r3, #0]
			UART1_RxBytes = 2;
 8003242:	2202      	movs	r2, #2
 8003244:	4b7f      	ldr	r3, [pc, #508]	; (8003444 <HAL_UART_RxCpltCallback+0x2a8>)
 8003246:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 8003248:	497b      	ldr	r1, [pc, #492]	; (8003438 <HAL_UART_RxCpltCallback+0x29c>)
 800324a:	4630      	mov	r0, r6
 800324c:	f004 f8b7 	bl	80073be <HAL_UART_Receive_IT>
		memset(UART1_RxBuf, 0, UART_Buffer_size);
 8003250:	223c      	movs	r2, #60	; 0x3c
 8003252:	2100      	movs	r1, #0
 8003254:	4878      	ldr	r0, [pc, #480]	; (8003438 <HAL_UART_RxCpltCallback+0x29c>)
 8003256:	f005 fd97 	bl	8008d88 <memset>
 800325a:	e7a5      	b.n	80031a8 <HAL_UART_RxCpltCallback+0xc>
			for (uint8_t i = 0; i < UART1_RxBytes; i++)
 800325c:	2300      	movs	r3, #0
 800325e:	e7dd      	b.n	800321c <HAL_UART_RxCpltCallback+0x80>
				UART1_RxBytes = 2;
 8003260:	2202      	movs	r2, #2
 8003262:	4b78      	ldr	r3, [pc, #480]	; (8003444 <HAL_UART_RxCpltCallback+0x2a8>)
 8003264:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 8003266:	4974      	ldr	r1, [pc, #464]	; (8003438 <HAL_UART_RxCpltCallback+0x29c>)
 8003268:	4870      	ldr	r0, [pc, #448]	; (800342c <HAL_UART_RxCpltCallback+0x290>)
 800326a:	f004 f8a8 	bl	80073be <HAL_UART_Receive_IT>
 800326e:	e7b2      	b.n	80031d6 <HAL_UART_RxCpltCallback+0x3a>
			switch(Command)
 8003270:	2b41      	cmp	r3, #65	; 0x41
 8003272:	d069      	beq.n	8003348 <HAL_UART_RxCpltCallback+0x1ac>
 8003274:	d914      	bls.n	80032a0 <HAL_UART_RxCpltCallback+0x104>
 8003276:	2b42      	cmp	r3, #66	; 0x42
 8003278:	d06c      	beq.n	8003354 <HAL_UART_RxCpltCallback+0x1b8>
 800327a:	2b4f      	cmp	r3, #79	; 0x4f
 800327c:	d1e8      	bne.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				if((Parameter == 0xCC) && (Rope_cut_status != ROPE_CUTTING))
 800327e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2bcc      	cmp	r3, #204	; 0xcc
 8003286:	d1e3      	bne.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
 8003288:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_UART_RxCpltCallback+0x2ac>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d0de      	beq.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
					Rope_cut_status = ROPE_CUTTING;
 8003292:	4b6d      	ldr	r3, [pc, #436]	; (8003448 <HAL_UART_RxCpltCallback+0x2ac>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
					Rope_cut_delay = ROPE_CUT_TIME;
 8003298:	4b6c      	ldr	r3, [pc, #432]	; (800344c <HAL_UART_RxCpltCallback+0x2b0>)
 800329a:	220a      	movs	r2, #10
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e7d7      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
			switch(Command)
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d017      	beq.n	80032d4 <HAL_UART_RxCpltCallback+0x138>
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d10a      	bne.n	80032be <HAL_UART_RxCpltCallback+0x122>
				if (Parameter == 0)
 80032a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80032ac:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80032b0:	bb72      	cbnz	r2, 8003310 <HAL_UART_RxCpltCallback+0x174>
					UART1_TxBuf[0] = 0x02;
 80032b2:	4a62      	ldr	r2, [pc, #392]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 80032b4:	2102      	movs	r1, #2
 80032b6:	7011      	strb	r1, [r2, #0]
					UART1_TxBuf[1] = temp;
 80032b8:	2117      	movs	r1, #23
 80032ba:	7051      	strb	r1, [r2, #1]
					for(uint8_t i = 0; i < temp; i++)
 80032bc:	e020      	b.n	8003300 <HAL_UART_RxCpltCallback+0x164>
			switch(Command)
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d1c6      	bne.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				UART1_TxBuf[1] = Get_System_Status();
 80032c2:	f7ff f897 	bl	80023f4 <Get_System_Status>
 80032c6:	495d      	ldr	r1, [pc, #372]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 80032c8:	7048      	strb	r0, [r1, #1]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80032ca:	2202      	movs	r2, #2
 80032cc:	4857      	ldr	r0, [pc, #348]	; (800342c <HAL_UART_RxCpltCallback+0x290>)
 80032ce:	f003 fe6c 	bl	8006faa <HAL_UART_Transmit_IT>
			break;
 80032d2:	e7bd      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				UART1_RxIsData = 1;
 80032d4:	4b57      	ldr	r3, [pc, #348]	; (8003434 <HAL_UART_RxCpltCallback+0x298>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
				UART1_RxBytes = Parameter;
 80032da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	4a58      	ldr	r2, [pc, #352]	; (8003444 <HAL_UART_RxCpltCallback+0x2a8>)
 80032e2:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_IT(&huart1, UART1_RxBuf, Parameter);
 80032e4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80032e8:	4953      	ldr	r1, [pc, #332]	; (8003438 <HAL_UART_RxCpltCallback+0x29c>)
 80032ea:	4850      	ldr	r0, [pc, #320]	; (800342c <HAL_UART_RxCpltCallback+0x290>)
 80032ec:	f004 f867 	bl	80073be <HAL_UART_Receive_IT>
			break;
 80032f0:	e7ae      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
						UART1_TxBuf[2+i] = message[i];
 80032f2:	1c9a      	adds	r2, r3, #2
 80032f4:	4956      	ldr	r1, [pc, #344]	; (8003450 <HAL_UART_RxCpltCallback+0x2b4>)
 80032f6:	5cc8      	ldrb	r0, [r1, r3]
 80032f8:	4950      	ldr	r1, [pc, #320]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 80032fa:	5488      	strb	r0, [r1, r2]
					for(uint8_t i = 0; i < temp; i++)
 80032fc:	3301      	adds	r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b16      	cmp	r3, #22
 8003302:	d9f6      	bls.n	80032f2 <HAL_UART_RxCpltCallback+0x156>
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2+temp);
 8003304:	2219      	movs	r2, #25
 8003306:	494d      	ldr	r1, [pc, #308]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 8003308:	4848      	ldr	r0, [pc, #288]	; (800342c <HAL_UART_RxCpltCallback+0x290>)
 800330a:	f003 fe4e 	bl	8006faa <HAL_UART_Transmit_IT>
 800330e:	e79f      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
					UART1_TxBuf[0] = 0x02;
 8003310:	4b4a      	ldr	r3, [pc, #296]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 8003312:	2202      	movs	r2, #2
 8003314:	701a      	strb	r2, [r3, #0]
					UART1_TxBuf[1] = Parameter;
 8003316:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800331a:	705a      	strb	r2, [r3, #1]
					for(uint8_t i = 0; i < Parameter; i++)
 800331c:	2300      	movs	r3, #0
 800331e:	e006      	b.n	800332e <HAL_UART_RxCpltCallback+0x192>
						UART1_TxBuf[2+i] = UART1_DataBuf[i];
 8003320:	1c9a      	adds	r2, r3, #2
 8003322:	4947      	ldr	r1, [pc, #284]	; (8003440 <HAL_UART_RxCpltCallback+0x2a4>)
 8003324:	5cc8      	ldrb	r0, [r1, r3]
 8003326:	4945      	ldr	r1, [pc, #276]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 8003328:	5488      	strb	r0, [r1, r2]
					for(uint8_t i = 0; i < Parameter; i++)
 800332a:	3301      	adds	r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	429a      	cmp	r2, r3
 8003336:	d8f3      	bhi.n	8003320 <HAL_UART_RxCpltCallback+0x184>
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2+Parameter);
 8003338:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800333c:	3202      	adds	r2, #2
 800333e:	493f      	ldr	r1, [pc, #252]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 8003340:	483a      	ldr	r0, [pc, #232]	; (800342c <HAL_UART_RxCpltCallback+0x290>)
 8003342:	f003 fe32 	bl	8006faa <HAL_UART_Transmit_IT>
 8003346:	e783      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800334c:	4841      	ldr	r0, [pc, #260]	; (8003454 <HAL_UART_RxCpltCallback+0x2b8>)
 800334e:	f001 fc20 	bl	8004b92 <HAL_GPIO_TogglePin>
			break;
 8003352:	e77d      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				sTime.Seconds = UART2_DataBuf[0];
 8003354:	4b40      	ldr	r3, [pc, #256]	; (8003458 <HAL_UART_RxCpltCallback+0x2bc>)
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	f88d 200e 	strb.w	r2, [sp, #14]
				sTime.Minutes = UART2_DataBuf[1];
 800335c:	785a      	ldrb	r2, [r3, #1]
 800335e:	f88d 200d 	strb.w	r2, [sp, #13]
				sTime.Hours = UART2_DataBuf[2];
 8003362:	789a      	ldrb	r2, [r3, #2]
 8003364:	f88d 200c 	strb.w	r2, [sp, #12]
				sDate.Date = UART2_DataBuf[3];
 8003368:	78da      	ldrb	r2, [r3, #3]
 800336a:	f88d 200a 	strb.w	r2, [sp, #10]
				sDate.Month = UART2_DataBuf[4];
 800336e:	791a      	ldrb	r2, [r3, #4]
 8003370:	f88d 2009 	strb.w	r2, [sp, #9]
				sDate.Year = UART2_DataBuf[5];
 8003374:	795b      	ldrb	r3, [r3, #5]
 8003376:	f88d 300b 	strb.w	r3, [sp, #11]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 800337a:	4d38      	ldr	r5, [pc, #224]	; (800345c <HAL_UART_RxCpltCallback+0x2c0>)
 800337c:	2201      	movs	r2, #1
 800337e:	a903      	add	r1, sp, #12
 8003380:	4628      	mov	r0, r5
 8003382:	f002 fde9 	bl	8005f58 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8003386:	2201      	movs	r2, #1
 8003388:	a902      	add	r1, sp, #8
 800338a:	4628      	mov	r0, r5
 800338c:	f002 fe63 	bl	8006056 <HAL_RTC_SetDate>
			break;
 8003390:	e75e      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				UART2_TxBuf[0] = 0x01;
 8003392:	4933      	ldr	r1, [pc, #204]	; (8003460 <HAL_UART_RxCpltCallback+0x2c4>)
 8003394:	2301      	movs	r3, #1
 8003396:	700b      	strb	r3, [r1, #0]
				UART2_TxBuf[1] = 0x00;
 8003398:	2300      	movs	r3, #0
 800339a:	704b      	strb	r3, [r1, #1]
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 2);
 800339c:	2202      	movs	r2, #2
 800339e:	4824      	ldr	r0, [pc, #144]	; (8003430 <HAL_UART_RxCpltCallback+0x294>)
 80033a0:	f003 fe03 	bl	8006faa <HAL_UART_Transmit_IT>
			break;
 80033a4:	e754      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				UART2_TxBuf[0] = 0x02;
 80033a6:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <HAL_UART_RxCpltCallback+0x2c4>)
 80033a8:	2202      	movs	r2, #2
 80033aa:	701a      	strb	r2, [r3, #0]
				UART2_TxBuf[1] = Parameter;
 80033ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80033b0:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0; i < Parameter; i++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	e006      	b.n	80033c4 <HAL_UART_RxCpltCallback+0x228>
					UART2_TxBuf[2+i] = UART1_DataBuf[i];
 80033b6:	1c9a      	adds	r2, r3, #2
 80033b8:	4921      	ldr	r1, [pc, #132]	; (8003440 <HAL_UART_RxCpltCallback+0x2a4>)
 80033ba:	5cc8      	ldrb	r0, [r1, r3]
 80033bc:	4928      	ldr	r1, [pc, #160]	; (8003460 <HAL_UART_RxCpltCallback+0x2c4>)
 80033be:	5488      	strb	r0, [r1, r2]
				for(uint8_t i = 0; i < Parameter; i++)
 80033c0:	3301      	adds	r3, #1
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d8f3      	bhi.n	80033b6 <HAL_UART_RxCpltCallback+0x21a>
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 2+Parameter);
 80033ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80033d2:	3202      	adds	r2, #2
 80033d4:	4922      	ldr	r1, [pc, #136]	; (8003460 <HAL_UART_RxCpltCallback+0x2c4>)
 80033d6:	4816      	ldr	r0, [pc, #88]	; (8003430 <HAL_UART_RxCpltCallback+0x294>)
 80033d8:	f003 fde7 	bl	8006faa <HAL_UART_Transmit_IT>
			break;
 80033dc:	e738      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				UART2_TxBuf[0] = 0x03;
 80033de:	4920      	ldr	r1, [pc, #128]	; (8003460 <HAL_UART_RxCpltCallback+0x2c4>)
 80033e0:	2303      	movs	r3, #3
 80033e2:	700b      	strb	r3, [r1, #0]
				UART2_TxBuf[1] = Parameter;
 80033e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80033e8:	704b      	strb	r3, [r1, #1]
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 2);
 80033ea:	2202      	movs	r2, #2
 80033ec:	4810      	ldr	r0, [pc, #64]	; (8003430 <HAL_UART_RxCpltCallback+0x294>)
 80033ee:	f003 fddc 	bl	8006faa <HAL_UART_Transmit_IT>
			break;
 80033f2:	e72d      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				UART1_TxBuf[0] = 0x02;
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 80033f6:	2202      	movs	r2, #2
 80033f8:	701a      	strb	r2, [r3, #0]
				UART1_TxBuf[1] = Parameter;
 80033fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80033fe:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0; i < Parameter; i++)
 8003400:	2300      	movs	r3, #0
 8003402:	e006      	b.n	8003412 <HAL_UART_RxCpltCallback+0x276>
					UART1_TxBuf[2+i] = UART2_DataBuf[i];
 8003404:	1c9a      	adds	r2, r3, #2
 8003406:	4914      	ldr	r1, [pc, #80]	; (8003458 <HAL_UART_RxCpltCallback+0x2bc>)
 8003408:	5cc8      	ldrb	r0, [r1, r3]
 800340a:	490c      	ldr	r1, [pc, #48]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 800340c:	5488      	strb	r0, [r1, r2]
				for(uint8_t i = 0; i < Parameter; i++)
 800340e:	3301      	adds	r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	429a      	cmp	r2, r3
 800341a:	d8f3      	bhi.n	8003404 <HAL_UART_RxCpltCallback+0x268>
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2+Parameter);
 800341c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003420:	3202      	adds	r2, #2
 8003422:	4906      	ldr	r1, [pc, #24]	; (800343c <HAL_UART_RxCpltCallback+0x2a0>)
 8003424:	4801      	ldr	r0, [pc, #4]	; (800342c <HAL_UART_RxCpltCallback+0x290>)
 8003426:	f003 fdc0 	bl	8006faa <HAL_UART_Transmit_IT>
			break;
 800342a:	e711      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
 800342c:	20000d14 	.word	0x20000d14
 8003430:	20000d58 	.word	0x20000d58
 8003434:	200004e1 	.word	0x200004e1
 8003438:	200004a4 	.word	0x200004a4
 800343c:	200004e4 	.word	0x200004e4
 8003440:	20000468 	.word	0x20000468
 8003444:	200004e0 	.word	0x200004e0
 8003448:	200003ae 	.word	0x200003ae
 800344c:	200003ad 	.word	0x200003ad
 8003450:	20000008 	.word	0x20000008
 8003454:	40020000 	.word	0x40020000
 8003458:	20000520 	.word	0x20000520
 800345c:	20000aec 	.word	0x20000aec
 8003460:	200005a0 	.word	0x200005a0
				if (sd_mounted == 0)
 8003464:	4ba6      	ldr	r3, [pc, #664]	; (8003700 <HAL_UART_RxCpltCallback+0x564>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	b9b3      	cbnz	r3, 8003498 <HAL_UART_RxCpltCallback+0x2fc>
					sd_status = Mount_open_SD_Card();
 800346a:	f7ff f9d7 	bl	800281c <Mount_open_SD_Card>
 800346e:	4ba5      	ldr	r3, [pc, #660]	; (8003704 <HAL_UART_RxCpltCallback+0x568>)
 8003470:	7018      	strb	r0, [r3, #0]
					sd_file_cnt = 0;
 8003472:	4aa5      	ldr	r2, [pc, #660]	; (8003708 <HAL_UART_RxCpltCallback+0x56c>)
 8003474:	2100      	movs	r1, #0
 8003476:	7011      	strb	r1, [r2, #0]
					if (sd_status == FR_OK)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	b913      	cbnz	r3, 8003482 <HAL_UART_RxCpltCallback+0x2e6>
						sd_mounted = 1;
 800347c:	4ba0      	ldr	r3, [pc, #640]	; (8003700 <HAL_UART_RxCpltCallback+0x564>)
 800347e:	2201      	movs	r2, #1
 8003480:	701a      	strb	r2, [r3, #0]
					UART1_TxBuf[0] = 0xD0;
 8003482:	49a2      	ldr	r1, [pc, #648]	; (800370c <HAL_UART_RxCpltCallback+0x570>)
 8003484:	23d0      	movs	r3, #208	; 0xd0
 8003486:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = sd_status;
 8003488:	4b9e      	ldr	r3, [pc, #632]	; (8003704 <HAL_UART_RxCpltCallback+0x568>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 800348e:	2202      	movs	r2, #2
 8003490:	489f      	ldr	r0, [pc, #636]	; (8003710 <HAL_UART_RxCpltCallback+0x574>)
 8003492:	f003 fd8a 	bl	8006faa <HAL_UART_Transmit_IT>
 8003496:	e6db      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
					UART1_TxBuf[0] = 0xD0;
 8003498:	499c      	ldr	r1, [pc, #624]	; (800370c <HAL_UART_RxCpltCallback+0x570>)
 800349a:	23d0      	movs	r3, #208	; 0xd0
 800349c:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = 0xD1;
 800349e:	23d1      	movs	r3, #209	; 0xd1
 80034a0:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80034a2:	2202      	movs	r2, #2
 80034a4:	489a      	ldr	r0, [pc, #616]	; (8003710 <HAL_UART_RxCpltCallback+0x574>)
 80034a6:	f003 fd80 	bl	8006faa <HAL_UART_Transmit_IT>
 80034aa:	e6d1      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				if (sd_mounted == 1)
 80034ac:	4b94      	ldr	r3, [pc, #592]	; (8003700 <HAL_UART_RxCpltCallback+0x564>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d008      	beq.n	80034c8 <HAL_UART_RxCpltCallback+0x32c>
					UART1_TxBuf[0] = 0xD0;
 80034b6:	4995      	ldr	r1, [pc, #596]	; (800370c <HAL_UART_RxCpltCallback+0x570>)
 80034b8:	23d0      	movs	r3, #208	; 0xd0
 80034ba:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = 0xD0;
 80034bc:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80034be:	2202      	movs	r2, #2
 80034c0:	4893      	ldr	r0, [pc, #588]	; (8003710 <HAL_UART_RxCpltCallback+0x574>)
 80034c2:	f003 fd72 	bl	8006faa <HAL_UART_Transmit_IT>
 80034c6:	e6c3      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
					sd_status = f_close(&fil);
 80034c8:	4892      	ldr	r0, [pc, #584]	; (8003714 <HAL_UART_RxCpltCallback+0x578>)
 80034ca:	f005 fa54 	bl	8008976 <f_close>
 80034ce:	4d8d      	ldr	r5, [pc, #564]	; (8003704 <HAL_UART_RxCpltCallback+0x568>)
 80034d0:	7028      	strb	r0, [r5, #0]
					sd_status = f_mount(NULL, "", 1);
 80034d2:	2201      	movs	r2, #1
 80034d4:	4990      	ldr	r1, [pc, #576]	; (8003718 <HAL_UART_RxCpltCallback+0x57c>)
 80034d6:	2000      	movs	r0, #0
 80034d8:	f004 ff7e 	bl	80083d8 <f_mount>
 80034dc:	7028      	strb	r0, [r5, #0]
					sd_mounted = 0;
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_UART_RxCpltCallback+0x564>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
					UART1_TxBuf[0] = 0xD0;
 80034e4:	4989      	ldr	r1, [pc, #548]	; (800370c <HAL_UART_RxCpltCallback+0x570>)
 80034e6:	23d0      	movs	r3, #208	; 0xd0
 80034e8:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = sd_status;
 80034ea:	782b      	ldrb	r3, [r5, #0]
 80034ec:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80034ee:	2202      	movs	r2, #2
 80034f0:	4887      	ldr	r0, [pc, #540]	; (8003710 <HAL_UART_RxCpltCallback+0x574>)
 80034f2:	f003 fd5a 	bl	8006faa <HAL_UART_Transmit_IT>
 80034f6:	e6ab      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
					temp += UART1_DataBuf[i] << ((3 - i)*8);
 80034f8:	4a88      	ldr	r2, [pc, #544]	; (800371c <HAL_UART_RxCpltCallback+0x580>)
 80034fa:	5cd2      	ldrb	r2, [r2, r3]
 80034fc:	f1c3 0103 	rsb	r1, r3, #3
 8003500:	00c9      	lsls	r1, r1, #3
 8003502:	408a      	lsls	r2, r1
 8003504:	442a      	add	r2, r5
 8003506:	b295      	uxth	r5, r2
				for (uint8_t i = 0; i < 4; i++)
 8003508:	3301      	adds	r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b03      	cmp	r3, #3
 800350e:	d9f3      	bls.n	80034f8 <HAL_UART_RxCpltCallback+0x35c>
				HAL_TIM_Base_Stop_IT(&htim4);
 8003510:	4883      	ldr	r0, [pc, #524]	; (8003720 <HAL_UART_RxCpltCallback+0x584>)
 8003512:	f003 fa13 	bl	800693c <HAL_TIM_Base_Stop_IT>
				if(temp > 0)
 8003516:	2d00      	cmp	r5, #0
 8003518:	f43f ae9a 	beq.w	8003250 <HAL_UART_RxCpltCallback+0xb4>
					__HAL_TIM_SET_AUTORELOAD(&htim4, temp);
 800351c:	4880      	ldr	r0, [pc, #512]	; (8003720 <HAL_UART_RxCpltCallback+0x584>)
 800351e:	6803      	ldr	r3, [r0, #0]
 8003520:	62dd      	str	r5, [r3, #44]	; 0x2c
 8003522:	60c5      	str	r5, [r0, #12]
					__HAL_TIM_SET_COUNTER(&htim4, 0);
 8003524:	2200      	movs	r2, #0
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim4);
 8003528:	f003 f9cc 	bl	80068c4 <HAL_TIM_Base_Start_IT>
 800352c:	e690      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
			switch(Command)
 800352e:	2300      	movs	r3, #0
 8003530:	461d      	mov	r5, r3
 8003532:	e7eb      	b.n	800350c <HAL_UART_RxCpltCallback+0x370>
				UART1_TxBuf[0] = 0xD1;
 8003534:	4975      	ldr	r1, [pc, #468]	; (800370c <HAL_UART_RxCpltCallback+0x570>)
 8003536:	23d1      	movs	r3, #209	; 0xd1
 8003538:	700b      	strb	r3, [r1, #0]
				UART1_TxBuf[1] = Sensors.BME280_Internal.ID;
 800353a:	4b7a      	ldr	r3, [pc, #488]	; (8003724 <HAL_UART_RxCpltCallback+0x588>)
 800353c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8003540:	704a      	strb	r2, [r1, #1]
				UART1_TxBuf[2] = Sensors.BME280_External.ID;
 8003542:	785a      	ldrb	r2, [r3, #1]
 8003544:	708a      	strb	r2, [r1, #2]
				UART1_TxBuf[3] = Sensors.MPU650.ID;
 8003546:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 800354a:	70ca      	strb	r2, [r1, #3]
				UART1_TxBuf[4] = Sensors.SI1145.ID;
 800354c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003550:	710b      	strb	r3, [r1, #4]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 5);
 8003552:	2205      	movs	r2, #5
 8003554:	486e      	ldr	r0, [pc, #440]	; (8003710 <HAL_UART_RxCpltCallback+0x574>)
 8003556:	f003 fd28 	bl	8006faa <HAL_UART_Transmit_IT>
			break;
 800355a:	e679      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				UART1_TxBuf[0] = 0xD2;
 800355c:	496b      	ldr	r1, [pc, #428]	; (800370c <HAL_UART_RxCpltCallback+0x570>)
 800355e:	23d2      	movs	r3, #210	; 0xd2
 8003560:	700b      	strb	r3, [r1, #0]
				UART1_TxBuf[1] = Cycle_runtime_min >> 8;
 8003562:	4a71      	ldr	r2, [pc, #452]	; (8003728 <HAL_UART_RxCpltCallback+0x58c>)
 8003564:	8813      	ldrh	r3, [r2, #0]
 8003566:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800356a:	704b      	strb	r3, [r1, #1]
				UART1_TxBuf[2] = Cycle_runtime_min & 0x00FF;
 800356c:	8813      	ldrh	r3, [r2, #0]
 800356e:	708b      	strb	r3, [r1, #2]
				UART1_TxBuf[3] = Cycle_runtime_max >> 8;
 8003570:	4a6e      	ldr	r2, [pc, #440]	; (800372c <HAL_UART_RxCpltCallback+0x590>)
 8003572:	8813      	ldrh	r3, [r2, #0]
 8003574:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003578:	70cb      	strb	r3, [r1, #3]
				UART1_TxBuf[4] = Cycle_runtime_max & 0x00FF;
 800357a:	8813      	ldrh	r3, [r2, #0]
 800357c:	710b      	strb	r3, [r1, #4]
				UART1_TxBuf[5] = Cycle_runtime_last >> 8;
 800357e:	4a6c      	ldr	r2, [pc, #432]	; (8003730 <HAL_UART_RxCpltCallback+0x594>)
 8003580:	8813      	ldrh	r3, [r2, #0]
 8003582:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003586:	714b      	strb	r3, [r1, #5]
				UART1_TxBuf[6] = Cycle_runtime_last & 0x00FF;
 8003588:	8813      	ldrh	r3, [r2, #0]
 800358a:	718b      	strb	r3, [r1, #6]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 7);
 800358c:	2207      	movs	r2, #7
 800358e:	4860      	ldr	r0, [pc, #384]	; (8003710 <HAL_UART_RxCpltCallback+0x574>)
 8003590:	f003 fd0b 	bl	8006faa <HAL_UART_Transmit_IT>
			break;
 8003594:	e65c      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				Sensors.BME280_Internal.Pressure_ref = 90 + (((double)temp)/1000);
 8003596:	4b61      	ldr	r3, [pc, #388]	; (800371c <HAL_UART_RxCpltCallback+0x580>)
 8003598:	7818      	ldrb	r0, [r3, #0]
 800359a:	f7fc ffbb 	bl	8000514 <__aeabi_ui2d>
 800359e:	2200      	movs	r2, #0
 80035a0:	4b64      	ldr	r3, [pc, #400]	; (8003734 <HAL_UART_RxCpltCallback+0x598>)
 80035a2:	f7fd f95b 	bl	800085c <__aeabi_ddiv>
 80035a6:	2200      	movs	r2, #0
 80035a8:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_UART_RxCpltCallback+0x59c>)
 80035aa:	f7fc fe77 	bl	800029c <__adddf3>
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <HAL_UART_RxCpltCallback+0x588>)
 80035b0:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
				Sensors.BME280_External.Pressure_ref = 90 + (((double)temp)/1000);
 80035b4:	e9c3 0106 	strd	r0, r1, [r3, #24]
			break;
 80035b8:	e64a      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				CAM_START(&CAM_1);
 80035ba:	4860      	ldr	r0, [pc, #384]	; (800373c <HAL_UART_RxCpltCallback+0x5a0>)
 80035bc:	f7ff f9d2 	bl	8002964 <CAM_START>
				CAM_START(&CAM_2);
 80035c0:	485f      	ldr	r0, [pc, #380]	; (8003740 <HAL_UART_RxCpltCallback+0x5a4>)
 80035c2:	f7ff f9cf 	bl	8002964 <CAM_START>
			break;
 80035c6:	e643      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
				CAM_STOP(&CAM_1);
 80035c8:	485c      	ldr	r0, [pc, #368]	; (800373c <HAL_UART_RxCpltCallback+0x5a0>)
 80035ca:	f7ff f9f2 	bl	80029b2 <CAM_STOP>
				CAM_STOP(&CAM_2);
 80035ce:	485c      	ldr	r0, [pc, #368]	; (8003740 <HAL_UART_RxCpltCallback+0x5a4>)
 80035d0:	f7ff f9ef 	bl	80029b2 <CAM_STOP>
			break;
 80035d4:	e63c      	b.n	8003250 <HAL_UART_RxCpltCallback+0xb4>
		marker = UART2_RxBuf[2];
 80035d6:	485b      	ldr	r0, [pc, #364]	; (8003744 <HAL_UART_RxCpltCallback+0x5a8>)
 80035d8:	7884      	ldrb	r4, [r0, #2]
		checksum1 = UART2_RxBuf[3];
 80035da:	78c5      	ldrb	r5, [r0, #3]
		checksum2 = get_check_sum((char *)UART2_RxBuf);
 80035dc:	f7fe fef8 	bl	80023d0 <get_check_sum>
		if((marker == '*') && (checksum1 == checksum2))
 80035e0:	2c2a      	cmp	r4, #42	; 0x2a
 80035e2:	d101      	bne.n	80035e8 <HAL_UART_RxCpltCallback+0x44c>
 80035e4:	4285      	cmp	r5, r0
 80035e6:	d00e      	beq.n	8003606 <HAL_UART_RxCpltCallback+0x46a>
			UART2_RxBytes = 4;
 80035e8:	4b57      	ldr	r3, [pc, #348]	; (8003748 <HAL_UART_RxCpltCallback+0x5ac>)
 80035ea:	2204      	movs	r2, #4
 80035ec:	701a      	strb	r2, [r3, #0]
			memset(UART2_RxBuf, 0, UART_Buffer_size);
 80035ee:	223c      	movs	r2, #60	; 0x3c
 80035f0:	2100      	movs	r1, #0
 80035f2:	4854      	ldr	r0, [pc, #336]	; (8003744 <HAL_UART_RxCpltCallback+0x5a8>)
 80035f4:	f005 fbc8 	bl	8008d88 <memset>
		HAL_UART_Receive_IT(&huart2, UART2_RxBuf, UART2_RxBytes);
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_UART_RxCpltCallback+0x5ac>)
 80035fa:	781a      	ldrb	r2, [r3, #0]
 80035fc:	4951      	ldr	r1, [pc, #324]	; (8003744 <HAL_UART_RxCpltCallback+0x5a8>)
 80035fe:	4853      	ldr	r0, [pc, #332]	; (800374c <HAL_UART_RxCpltCallback+0x5b0>)
 8003600:	f003 fedd 	bl	80073be <HAL_UART_Receive_IT>
}
 8003604:	e5d4      	b.n	80031b0 <HAL_UART_RxCpltCallback+0x14>
			UART2_Reset_Countdown = 0;
 8003606:	4b52      	ldr	r3, [pc, #328]	; (8003750 <HAL_UART_RxCpltCallback+0x5b4>)
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
			if (UART2_RxIsData == 1)
 800360c:	4b51      	ldr	r3, [pc, #324]	; (8003754 <HAL_UART_RxCpltCallback+0x5b8>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d044      	beq.n	80036a0 <HAL_UART_RxCpltCallback+0x504>
				volatile uint8_t Command = UART2_RxBuf[0];
 8003616:	4b4b      	ldr	r3, [pc, #300]	; (8003744 <HAL_UART_RxCpltCallback+0x5a8>)
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	f88d 2006 	strb.w	r2, [sp, #6]
				volatile uint8_t Parameter = UART2_RxBuf[1];
 800361e:	785b      	ldrb	r3, [r3, #1]
 8003620:	f88d 3007 	strb.w	r3, [sp, #7]
				if(Command != 0x02)
 8003624:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d13a      	bne.n	80036a4 <HAL_UART_RxCpltCallback+0x508>
				memset(UART2_TxBuf, 0, UART_Buffer_size);
 800362e:	223c      	movs	r2, #60	; 0x3c
 8003630:	2100      	movs	r1, #0
 8003632:	4849      	ldr	r0, [pc, #292]	; (8003758 <HAL_UART_RxCpltCallback+0x5bc>)
 8003634:	f005 fba8 	bl	8008d88 <memset>
				switch(Command)
 8003638:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b03      	cmp	r3, #3
 8003640:	d839      	bhi.n	80036b6 <HAL_UART_RxCpltCallback+0x51a>
 8003642:	2b03      	cmp	r3, #3
 8003644:	d814      	bhi.n	8003670 <HAL_UART_RxCpltCallback+0x4d4>
 8003646:	e8df f003 	tbb	[pc, r3]
 800364a:	564b      	.short	0x564b
 800364c:	988f      	.short	0x988f
					UART2_DataBuf[i] = UART2_RxBuf[i];
 800364e:	4a3d      	ldr	r2, [pc, #244]	; (8003744 <HAL_UART_RxCpltCallback+0x5a8>)
 8003650:	5cd1      	ldrb	r1, [r2, r3]
 8003652:	4a42      	ldr	r2, [pc, #264]	; (800375c <HAL_UART_RxCpltCallback+0x5c0>)
 8003654:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < UART2_RxBytes; i++)
 8003656:	3301      	adds	r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	4a3b      	ldr	r2, [pc, #236]	; (8003748 <HAL_UART_RxCpltCallback+0x5ac>)
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	429a      	cmp	r2, r3
 8003662:	d8f4      	bhi.n	800364e <HAL_UART_RxCpltCallback+0x4b2>
				UART2_RxIsData = 0;
 8003664:	4b3b      	ldr	r3, [pc, #236]	; (8003754 <HAL_UART_RxCpltCallback+0x5b8>)
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
				UART2_RxBytes = 4;
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_UART_RxCpltCallback+0x5ac>)
 800366c:	2204      	movs	r2, #4
 800366e:	701a      	strb	r2, [r3, #0]
			buffer_len = strlen((char *)UART2_TxBuf);
 8003670:	4839      	ldr	r0, [pc, #228]	; (8003758 <HAL_UART_RxCpltCallback+0x5bc>)
 8003672:	f7fc fdb5 	bl	80001e0 <strlen>
 8003676:	4604      	mov	r4, r0
			if(buffer_len > 0)
 8003678:	f010 0fff 	tst.w	r0, #255	; 0xff
 800367c:	d0bc      	beq.n	80035f8 <HAL_UART_RxCpltCallback+0x45c>
				checksum1 = get_check_sum((char *)UART2_TxBuf);
 800367e:	4d36      	ldr	r5, [pc, #216]	; (8003758 <HAL_UART_RxCpltCallback+0x5bc>)
 8003680:	4628      	mov	r0, r5
 8003682:	f7fe fea5 	bl	80023d0 <get_check_sum>
				UART2_TxBuf[buffer_len] = '*';
 8003686:	232a      	movs	r3, #42	; 0x2a
 8003688:	552b      	strb	r3, [r5, r4]
				UART2_TxBuf[buffer_len+1] = checksum1;
 800368a:	3401      	adds	r4, #1
 800368c:	5528      	strb	r0, [r5, r4]
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, strlen((char *)UART2_TxBuf));
 800368e:	4628      	mov	r0, r5
 8003690:	f7fc fda6 	bl	80001e0 <strlen>
 8003694:	b282      	uxth	r2, r0
 8003696:	4629      	mov	r1, r5
 8003698:	482c      	ldr	r0, [pc, #176]	; (800374c <HAL_UART_RxCpltCallback+0x5b0>)
 800369a:	f003 fc86 	bl	8006faa <HAL_UART_Transmit_IT>
 800369e:	e7ab      	b.n	80035f8 <HAL_UART_RxCpltCallback+0x45c>
				for (uint8_t i = 0; i < UART2_RxBytes; i++)
 80036a0:	2300      	movs	r3, #0
 80036a2:	e7da      	b.n	800365a <HAL_UART_RxCpltCallback+0x4be>
					UART2_RxBytes = 4;
 80036a4:	4b28      	ldr	r3, [pc, #160]	; (8003748 <HAL_UART_RxCpltCallback+0x5ac>)
 80036a6:	2204      	movs	r2, #4
 80036a8:	701a      	strb	r2, [r3, #0]
					memset(UART2_RxBuf, 0, UART_Buffer_size);
 80036aa:	223c      	movs	r2, #60	; 0x3c
 80036ac:	2100      	movs	r1, #0
 80036ae:	4825      	ldr	r0, [pc, #148]	; (8003744 <HAL_UART_RxCpltCallback+0x5a8>)
 80036b0:	f005 fb6a 	bl	8008d88 <memset>
 80036b4:	e7bb      	b.n	800362e <HAL_UART_RxCpltCallback+0x492>
				switch(Command)
 80036b6:	2b42      	cmp	r3, #66	; 0x42
 80036b8:	d072      	beq.n	80037a0 <HAL_UART_RxCpltCallback+0x604>
 80036ba:	2b4f      	cmp	r3, #79	; 0x4f
 80036bc:	d1d8      	bne.n	8003670 <HAL_UART_RxCpltCallback+0x4d4>
					if((Parameter == 0xCC) && (Rope_cut_status != ROPE_CUTTING))
 80036be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2bcc      	cmp	r3, #204	; 0xcc
 80036c6:	d1d3      	bne.n	8003670 <HAL_UART_RxCpltCallback+0x4d4>
 80036c8:	4b25      	ldr	r3, [pc, #148]	; (8003760 <HAL_UART_RxCpltCallback+0x5c4>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d0ce      	beq.n	8003670 <HAL_UART_RxCpltCallback+0x4d4>
						Rope_cut_status = ROPE_CUTTING;
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_UART_RxCpltCallback+0x5c4>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
						Rope_cut_delay = ROPE_CUT_TIME;
 80036d8:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_UART_RxCpltCallback+0x5c8>)
 80036da:	220a      	movs	r2, #10
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e7c7      	b.n	8003670 <HAL_UART_RxCpltCallback+0x4d4>
					UART1_TxBuf[0] = 0x00;
 80036e0:	490a      	ldr	r1, [pc, #40]	; (800370c <HAL_UART_RxCpltCallback+0x570>)
 80036e2:	2300      	movs	r3, #0
 80036e4:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = Parameter;
 80036e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036ea:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80036ec:	2202      	movs	r2, #2
 80036ee:	4808      	ldr	r0, [pc, #32]	; (8003710 <HAL_UART_RxCpltCallback+0x574>)
 80036f0:	f003 fc5b 	bl	8006faa <HAL_UART_Transmit_IT>
				break;
 80036f4:	e7bc      	b.n	8003670 <HAL_UART_RxCpltCallback+0x4d4>
					UART2_TxBuf[1] = Get_System_Status();
 80036f6:	f7fe fe7d 	bl	80023f4 <Get_System_Status>
 80036fa:	4b17      	ldr	r3, [pc, #92]	; (8003758 <HAL_UART_RxCpltCallback+0x5bc>)
 80036fc:	7058      	strb	r0, [r3, #1]
				break;
 80036fe:	e7b7      	b.n	8003670 <HAL_UART_RxCpltCallback+0x4d4>
 8003700:	20000da2 	.word	0x20000da2
 8003704:	20000da3 	.word	0x20000da3
 8003708:	20000da1 	.word	0x20000da1
 800370c:	200004e4 	.word	0x200004e4
 8003710:	20000d14 	.word	0x20000d14
 8003714:	200005dc 	.word	0x200005dc
 8003718:	0800cb34 	.word	0x0800cb34
 800371c:	20000468 	.word	0x20000468
 8003720:	20000c3c 	.word	0x20000c3c
 8003724:	200003b0 	.word	0x200003b0
 8003728:	2000036c 	.word	0x2000036c
 800372c:	2000036a 	.word	0x2000036a
 8003730:	20000368 	.word	0x20000368
 8003734:	408f4000 	.word	0x408f4000
 8003738:	40568000 	.word	0x40568000
 800373c:	20000310 	.word	0x20000310
 8003740:	20000330 	.word	0x20000330
 8003744:	20000560 	.word	0x20000560
 8003748:	2000059c 	.word	0x2000059c
 800374c:	20000d58 	.word	0x20000d58
 8003750:	2000055c 	.word	0x2000055c
 8003754:	2000059d 	.word	0x2000059d
 8003758:	200005a0 	.word	0x200005a0
 800375c:	20000520 	.word	0x20000520
 8003760:	200003ae 	.word	0x200003ae
 8003764:	200003ad 	.word	0x200003ad
					UART2_RxIsData = 1;
 8003768:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_UART_RxCpltCallback+0x65c>)
 800376a:	2201      	movs	r2, #1
 800376c:	701a      	strb	r2, [r3, #0]
					UART2_RxBytes = Parameter;
 800376e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	4a21      	ldr	r2, [pc, #132]	; (80037fc <HAL_UART_RxCpltCallback+0x660>)
 8003776:	7013      	strb	r3, [r2, #0]
				break;
 8003778:	e77a      	b.n	8003670 <HAL_UART_RxCpltCallback+0x4d4>
					if(Parameter == 0x99)
 800377a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b99      	cmp	r3, #153	; 0x99
 8003782:	f47f af75 	bne.w	8003670 <HAL_UART_RxCpltCallback+0x4d4>
						buffer_len = strlen(Data_to_send) - 1;
 8003786:	481e      	ldr	r0, [pc, #120]	; (8003800 <HAL_UART_RxCpltCallback+0x664>)
 8003788:	f7fc fd2a 	bl	80001e0 <strlen>
 800378c:	b2c3      	uxtb	r3, r0
						UART2_TxBuf[0] = 0x02;
 800378e:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <HAL_UART_RxCpltCallback+0x668>)
 8003790:	2102      	movs	r1, #2
 8003792:	7011      	strb	r1, [r2, #0]
						UART2_TxBuf[1] = buffer_len+2;
 8003794:	3301      	adds	r3, #1
 8003796:	7053      	strb	r3, [r2, #1]
						UART2_Send_Sensor_Data = 1;
 8003798:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <HAL_UART_RxCpltCallback+0x66c>)
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	e767      	b.n	8003670 <HAL_UART_RxCpltCallback+0x4d4>
					if(Parameter == 0x88)
 80037a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b88      	cmp	r3, #136	; 0x88
 80037a8:	f47f af62 	bne.w	8003670 <HAL_UART_RxCpltCallback+0x4d4>
						sTime.Seconds = UART2_DataBuf[0];
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_UART_RxCpltCallback+0x670>)
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	f88d 200e 	strb.w	r2, [sp, #14]
						sTime.Minutes = UART2_DataBuf[1];
 80037b4:	785a      	ldrb	r2, [r3, #1]
 80037b6:	f88d 200d 	strb.w	r2, [sp, #13]
						sTime.Hours = UART2_DataBuf[2];
 80037ba:	789a      	ldrb	r2, [r3, #2]
 80037bc:	f88d 200c 	strb.w	r2, [sp, #12]
						sDate.Date = UART2_DataBuf[3];
 80037c0:	78da      	ldrb	r2, [r3, #3]
 80037c2:	f88d 200a 	strb.w	r2, [sp, #10]
						sDate.Month = UART2_DataBuf[4];
 80037c6:	791a      	ldrb	r2, [r3, #4]
 80037c8:	f88d 2009 	strb.w	r2, [sp, #9]
						sDate.Year = UART2_DataBuf[5];
 80037cc:	795b      	ldrb	r3, [r3, #5]
 80037ce:	f88d 300b 	strb.w	r3, [sp, #11]
						HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80037d2:	4c0f      	ldr	r4, [pc, #60]	; (8003810 <HAL_UART_RxCpltCallback+0x674>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	a903      	add	r1, sp, #12
 80037d8:	4620      	mov	r0, r4
 80037da:	f002 fbbd 	bl	8005f58 <HAL_RTC_SetTime>
						HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80037de:	2201      	movs	r2, #1
 80037e0:	a902      	add	r1, sp, #8
 80037e2:	4620      	mov	r0, r4
 80037e4:	f002 fc37 	bl	8006056 <HAL_RTC_SetDate>
						UART2_TxBuf[0] = 0x42;
 80037e8:	4c06      	ldr	r4, [pc, #24]	; (8003804 <HAL_UART_RxCpltCallback+0x668>)
 80037ea:	2342      	movs	r3, #66	; 0x42
 80037ec:	7023      	strb	r3, [r4, #0]
						UART2_TxBuf[1] = Get_System_Status();
 80037ee:	f7fe fe01 	bl	80023f4 <Get_System_Status>
 80037f2:	7060      	strb	r0, [r4, #1]
 80037f4:	e73c      	b.n	8003670 <HAL_UART_RxCpltCallback+0x4d4>
 80037f6:	bf00      	nop
 80037f8:	2000059d 	.word	0x2000059d
 80037fc:	2000059c 	.word	0x2000059c
 8003800:	20000370 	.word	0x20000370
 8003804:	200005a0 	.word	0x200005a0
 8003808:	2000059e 	.word	0x2000059e
 800380c:	20000520 	.word	0x20000520
 8003810:	20000aec 	.word	0x20000aec

08003814 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	4604      	mov	r4, r0
	if(huart == &huart1)
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_UART_ErrorCallback+0x44>)
 800381a:	4298      	cmp	r0, r3
 800381c:	d003      	beq.n	8003826 <HAL_UART_ErrorCallback+0x12>
	{
		memset(UART1_RxBuf, 0, UART_Buffer_size);
		HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
	}

	if(huart == &huart2)
 800381e:	4b0f      	ldr	r3, [pc, #60]	; (800385c <HAL_UART_ErrorCallback+0x48>)
 8003820:	429c      	cmp	r4, r3
 8003822:	d00c      	beq.n	800383e <HAL_UART_ErrorCallback+0x2a>
	{
		memset(UART2_RxBuf, 0, UART_Buffer_size);
		HAL_UART_Receive_IT(&huart2, UART2_RxBuf, 4);
	}
}
 8003824:	bd38      	pop	{r3, r4, r5, pc}
		memset(UART1_RxBuf, 0, UART_Buffer_size);
 8003826:	4d0e      	ldr	r5, [pc, #56]	; (8003860 <HAL_UART_ErrorCallback+0x4c>)
 8003828:	223c      	movs	r2, #60	; 0x3c
 800382a:	2100      	movs	r1, #0
 800382c:	4628      	mov	r0, r5
 800382e:	f005 faab 	bl	8008d88 <memset>
		HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 8003832:	2202      	movs	r2, #2
 8003834:	4629      	mov	r1, r5
 8003836:	4808      	ldr	r0, [pc, #32]	; (8003858 <HAL_UART_ErrorCallback+0x44>)
 8003838:	f003 fdc1 	bl	80073be <HAL_UART_Receive_IT>
 800383c:	e7ef      	b.n	800381e <HAL_UART_ErrorCallback+0xa>
		memset(UART2_RxBuf, 0, UART_Buffer_size);
 800383e:	4c09      	ldr	r4, [pc, #36]	; (8003864 <HAL_UART_ErrorCallback+0x50>)
 8003840:	223c      	movs	r2, #60	; 0x3c
 8003842:	2100      	movs	r1, #0
 8003844:	4620      	mov	r0, r4
 8003846:	f005 fa9f 	bl	8008d88 <memset>
		HAL_UART_Receive_IT(&huart2, UART2_RxBuf, 4);
 800384a:	2204      	movs	r2, #4
 800384c:	4621      	mov	r1, r4
 800384e:	4803      	ldr	r0, [pc, #12]	; (800385c <HAL_UART_ErrorCallback+0x48>)
 8003850:	f003 fdb5 	bl	80073be <HAL_UART_Receive_IT>
}
 8003854:	e7e6      	b.n	8003824 <HAL_UART_ErrorCallback+0x10>
 8003856:	bf00      	nop
 8003858:	20000d14 	.word	0x20000d14
 800385c:	20000d58 	.word	0x20000d58
 8003860:	200004a4 	.word	0x200004a4
 8003864:	20000560 	.word	0x20000560

08003868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003868:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800386a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	UART1_TxBuf[0] = 0xEE;
 800386c:	4c05      	ldr	r4, [pc, #20]	; (8003884 <Error_Handler+0x1c>)
 800386e:	23ee      	movs	r3, #238	; 0xee
 8003870:	7023      	strb	r3, [r4, #0]
	UART1_TxBuf[1] = Get_System_Status();
 8003872:	f7fe fdbf 	bl	80023f4 <Get_System_Status>
 8003876:	7060      	strb	r0, [r4, #1]
	HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003878:	2202      	movs	r2, #2
 800387a:	4621      	mov	r1, r4
 800387c:	4802      	ldr	r0, [pc, #8]	; (8003888 <Error_Handler+0x20>)
 800387e:	f003 fb94 	bl	8006faa <HAL_UART_Transmit_IT>
  while (1)
 8003882:	e7fe      	b.n	8003882 <Error_Handler+0x1a>
 8003884:	200004e4 	.word	0x200004e4
 8003888:	20000d14 	.word	0x20000d14

0800388c <MX_USART2_UART_Init>:
{
 800388c:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800388e:	480a      	ldr	r0, [pc, #40]	; (80038b8 <MX_USART2_UART_Init+0x2c>)
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <MX_USART2_UART_Init+0x30>)
 8003892:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003894:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003898:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800389a:	2300      	movs	r3, #0
 800389c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800389e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038a0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038a2:	220c      	movs	r2, #12
 80038a4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038aa:	f003 fb4f 	bl	8006f4c <HAL_UART_Init>
 80038ae:	b900      	cbnz	r0, 80038b2 <MX_USART2_UART_Init+0x26>
}
 80038b0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80038b2:	f7ff ffd9 	bl	8003868 <Error_Handler>
 80038b6:	bf00      	nop
 80038b8:	20000d58 	.word	0x20000d58
 80038bc:	40004400 	.word	0x40004400

080038c0 <MX_TIM4_Init>:
{
 80038c0:	b500      	push	{lr}
 80038c2:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038c4:	2300      	movs	r3, #0
 80038c6:	9308      	str	r3, [sp, #32]
 80038c8:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038ca:	9301      	str	r3, [sp, #4]
 80038cc:	9302      	str	r3, [sp, #8]
 80038ce:	9303      	str	r3, [sp, #12]
 80038d0:	9304      	str	r3, [sp, #16]
 80038d2:	9305      	str	r3, [sp, #20]
 80038d4:	9306      	str	r3, [sp, #24]
 80038d6:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80038d8:	4814      	ldr	r0, [pc, #80]	; (800392c <MX_TIM4_Init+0x6c>)
 80038da:	4a15      	ldr	r2, [pc, #84]	; (8003930 <MX_TIM4_Init+0x70>)
 80038dc:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 16000;
 80038de:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80038e2:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e4:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 500;
 80038e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038ea:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ec:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ee:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80038f0:	f003 f978 	bl	8006be4 <HAL_TIM_OC_Init>
 80038f4:	b9a0      	cbnz	r0, 8003920 <MX_TIM4_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fa:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038fc:	a908      	add	r1, sp, #32
 80038fe:	480b      	ldr	r0, [pc, #44]	; (800392c <MX_TIM4_Init+0x6c>)
 8003900:	f003 f9fe 	bl	8006d00 <HAL_TIMEx_MasterConfigSynchronization>
 8003904:	b970      	cbnz	r0, 8003924 <MX_TIM4_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003906:	2200      	movs	r2, #0
 8003908:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 800390a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800390c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800390e:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003910:	a901      	add	r1, sp, #4
 8003912:	4806      	ldr	r0, [pc, #24]	; (800392c <MX_TIM4_Init+0x6c>)
 8003914:	f003 f9c4 	bl	8006ca0 <HAL_TIM_OC_ConfigChannel>
 8003918:	b930      	cbnz	r0, 8003928 <MX_TIM4_Init+0x68>
}
 800391a:	b00b      	add	sp, #44	; 0x2c
 800391c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003920:	f7ff ffa2 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003924:	f7ff ffa0 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003928:	f7ff ff9e 	bl	8003868 <Error_Handler>
 800392c:	20000c3c 	.word	0x20000c3c
 8003930:	40000800 	.word	0x40000800

08003934 <MX_USART1_UART_Init>:
{
 8003934:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8003936:	480a      	ldr	r0, [pc, #40]	; (8003960 <MX_USART1_UART_Init+0x2c>)
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <MX_USART1_UART_Init+0x30>)
 800393a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 800393c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003940:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003942:	2300      	movs	r3, #0
 8003944:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003946:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003948:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800394a:	220c      	movs	r2, #12
 800394c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800394e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003950:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003952:	f003 fafb 	bl	8006f4c <HAL_UART_Init>
 8003956:	b900      	cbnz	r0, 800395a <MX_USART1_UART_Init+0x26>
}
 8003958:	bd08      	pop	{r3, pc}
    Error_Handler();
 800395a:	f7ff ff85 	bl	8003868 <Error_Handler>
 800395e:	bf00      	nop
 8003960:	20000d14 	.word	0x20000d14
 8003964:	40011000 	.word	0x40011000

08003968 <MX_SPI1_Init>:
{
 8003968:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800396a:	480d      	ldr	r0, [pc, #52]	; (80039a0 <MX_SPI1_Init+0x38>)
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <MX_SPI1_Init+0x3c>)
 800396e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003970:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003974:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003976:	2300      	movs	r3, #0
 8003978:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800397a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800397c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800397e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003984:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003986:	2230      	movs	r2, #48	; 0x30
 8003988:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800398a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800398c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003990:	230a      	movs	r3, #10
 8003992:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003994:	f002 fcba 	bl	800630c <HAL_SPI_Init>
 8003998:	b900      	cbnz	r0, 800399c <MX_SPI1_Init+0x34>
}
 800399a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800399c:	f7ff ff64 	bl	8003868 <Error_Handler>
 80039a0:	20000b0c 	.word	0x20000b0c
 80039a4:	40013000 	.word	0x40013000

080039a8 <MX_RTC_Init>:
{
 80039a8:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 80039aa:	4809      	ldr	r0, [pc, #36]	; (80039d0 <MX_RTC_Init+0x28>)
 80039ac:	4b09      	ldr	r3, [pc, #36]	; (80039d4 <MX_RTC_Init+0x2c>)
 80039ae:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80039b0:	2300      	movs	r3, #0
 80039b2:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80039b4:	227f      	movs	r2, #127	; 0x7f
 80039b6:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80039b8:	22ff      	movs	r2, #255	; 0xff
 80039ba:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80039bc:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80039be:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80039c0:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80039c2:	f002 fa5c 	bl	8005e7e <HAL_RTC_Init>
 80039c6:	b900      	cbnz	r0, 80039ca <MX_RTC_Init+0x22>
}
 80039c8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80039ca:	f7ff ff4d 	bl	8003868 <Error_Handler>
 80039ce:	bf00      	nop
 80039d0:	20000aec 	.word	0x20000aec
 80039d4:	40002800 	.word	0x40002800

080039d8 <MX_TIM3_Init>:
{
 80039d8:	b500      	push	{lr}
 80039da:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039dc:	2300      	movs	r3, #0
 80039de:	9308      	str	r3, [sp, #32]
 80039e0:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	9302      	str	r3, [sp, #8]
 80039e6:	9303      	str	r3, [sp, #12]
 80039e8:	9304      	str	r3, [sp, #16]
 80039ea:	9305      	str	r3, [sp, #20]
 80039ec:	9306      	str	r3, [sp, #24]
 80039ee:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80039f0:	4814      	ldr	r0, [pc, #80]	; (8003a44 <MX_TIM3_Init+0x6c>)
 80039f2:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <MX_TIM3_Init+0x70>)
 80039f4:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 16000;
 80039f6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80039fa:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039fc:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 80039fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a02:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a04:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a06:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003a08:	f003 f8ec 	bl	8006be4 <HAL_TIM_OC_Init>
 8003a0c:	b9a0      	cbnz	r0, 8003a38 <MX_TIM3_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a12:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a14:	a908      	add	r1, sp, #32
 8003a16:	480b      	ldr	r0, [pc, #44]	; (8003a44 <MX_TIM3_Init+0x6c>)
 8003a18:	f003 f972 	bl	8006d00 <HAL_TIMEx_MasterConfigSynchronization>
 8003a1c:	b970      	cbnz	r0, 8003a3c <MX_TIM3_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003a1e:	2200      	movs	r2, #0
 8003a20:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003a22:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a24:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a26:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a28:	a901      	add	r1, sp, #4
 8003a2a:	4806      	ldr	r0, [pc, #24]	; (8003a44 <MX_TIM3_Init+0x6c>)
 8003a2c:	f003 f938 	bl	8006ca0 <HAL_TIM_OC_ConfigChannel>
 8003a30:	b930      	cbnz	r0, 8003a40 <MX_TIM3_Init+0x68>
}
 8003a32:	b00b      	add	sp, #44	; 0x2c
 8003a34:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003a38:	f7ff ff16 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003a3c:	f7ff ff14 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003a40:	f7ff ff12 	bl	8003868 <Error_Handler>
 8003a44:	20000bf4 	.word	0x20000bf4
 8003a48:	40000400 	.word	0x40000400

08003a4c <MX_I2C1_Init>:
{
 8003a4c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8003a4e:	480a      	ldr	r0, [pc, #40]	; (8003a78 <MX_I2C1_Init+0x2c>)
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <MX_I2C1_Init+0x30>)
 8003a52:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <MX_I2C1_Init+0x34>)
 8003a56:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a5c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a62:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a64:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a66:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a68:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a6a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a6c:	f001 faf4 	bl	8005058 <HAL_I2C_Init>
 8003a70:	b900      	cbnz	r0, 8003a74 <MX_I2C1_Init+0x28>
}
 8003a72:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003a74:	f7ff fef8 	bl	8003868 <Error_Handler>
 8003a78:	20000a44 	.word	0x20000a44
 8003a7c:	40005400 	.word	0x40005400
 8003a80:	000186a0 	.word	0x000186a0

08003a84 <MX_I2C2_Init>:
{
 8003a84:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8003a86:	480a      	ldr	r0, [pc, #40]	; (8003ab0 <MX_I2C2_Init+0x2c>)
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <MX_I2C2_Init+0x30>)
 8003a8a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <MX_I2C2_Init+0x34>)
 8003a8e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a90:	2300      	movs	r3, #0
 8003a92:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003a94:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a9a:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a9c:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003a9e:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003aa0:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003aa2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003aa4:	f001 fad8 	bl	8005058 <HAL_I2C_Init>
 8003aa8:	b900      	cbnz	r0, 8003aac <MX_I2C2_Init+0x28>
}
 8003aaa:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003aac:	f7ff fedc 	bl	8003868 <Error_Handler>
 8003ab0:	20000a98 	.word	0x20000a98
 8003ab4:	40005800 	.word	0x40005800
 8003ab8:	000186a0 	.word	0x000186a0

08003abc <MX_TIM5_Init>:
{
 8003abc:	b500      	push	{lr}
 8003abe:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	9308      	str	r3, [sp, #32]
 8003ac4:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ac6:	9301      	str	r3, [sp, #4]
 8003ac8:	9302      	str	r3, [sp, #8]
 8003aca:	9303      	str	r3, [sp, #12]
 8003acc:	9304      	str	r3, [sp, #16]
 8003ace:	9305      	str	r3, [sp, #20]
 8003ad0:	9306      	str	r3, [sp, #24]
 8003ad2:	9307      	str	r3, [sp, #28]
  htim5.Instance = TIM5;
 8003ad4:	4814      	ldr	r0, [pc, #80]	; (8003b28 <MX_TIM5_Init+0x6c>)
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <MX_TIM5_Init+0x70>)
 8003ad8:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 16000;
 8003ada:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003ade:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae0:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 5000;
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae8:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aea:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8003aec:	f003 f87a 	bl	8006be4 <HAL_TIM_OC_Init>
 8003af0:	b9a0      	cbnz	r0, 8003b1c <MX_TIM5_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003af8:	a908      	add	r1, sp, #32
 8003afa:	480b      	ldr	r0, [pc, #44]	; (8003b28 <MX_TIM5_Init+0x6c>)
 8003afc:	f003 f900 	bl	8006d00 <HAL_TIMEx_MasterConfigSynchronization>
 8003b00:	b970      	cbnz	r0, 8003b20 <MX_TIM5_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003b02:	2200      	movs	r2, #0
 8003b04:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003b06:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b08:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b0a:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b0c:	a901      	add	r1, sp, #4
 8003b0e:	4806      	ldr	r0, [pc, #24]	; (8003b28 <MX_TIM5_Init+0x6c>)
 8003b10:	f003 f8c6 	bl	8006ca0 <HAL_TIM_OC_ConfigChannel>
 8003b14:	b930      	cbnz	r0, 8003b24 <MX_TIM5_Init+0x68>
}
 8003b16:	b00b      	add	sp, #44	; 0x2c
 8003b18:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003b1c:	f7ff fea4 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003b20:	f7ff fea2 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003b24:	f7ff fea0 	bl	8003868 <Error_Handler>
 8003b28:	20000c84 	.word	0x20000c84
 8003b2c:	40000c00 	.word	0x40000c00

08003b30 <MX_TIM9_Init>:
{
 8003b30:	b500      	push	{lr}
 8003b32:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b34:	2300      	movs	r3, #0
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	9302      	str	r3, [sp, #8]
 8003b3a:	9303      	str	r3, [sp, #12]
 8003b3c:	9304      	str	r3, [sp, #16]
 8003b3e:	9305      	str	r3, [sp, #20]
 8003b40:	9306      	str	r3, [sp, #24]
 8003b42:	9307      	str	r3, [sp, #28]
  htim9.Instance = TIM9;
 8003b44:	480f      	ldr	r0, [pc, #60]	; (8003b84 <MX_TIM9_Init+0x54>)
 8003b46:	4a10      	ldr	r2, [pc, #64]	; (8003b88 <MX_TIM9_Init+0x58>)
 8003b48:	6002      	str	r2, [r0, #0]
  htim9.Init.Prescaler = 16000;
 8003b4a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003b4e:	6042      	str	r2, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b50:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 5000;
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b58:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b5a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8003b5c:	f003 f842 	bl	8006be4 <HAL_TIM_OC_Init>
 8003b60:	b960      	cbnz	r0, 8003b7c <MX_TIM9_Init+0x4c>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003b62:	2200      	movs	r2, #0
 8003b64:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003b66:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b68:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b6a:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b6c:	a901      	add	r1, sp, #4
 8003b6e:	4805      	ldr	r0, [pc, #20]	; (8003b84 <MX_TIM9_Init+0x54>)
 8003b70:	f003 f896 	bl	8006ca0 <HAL_TIM_OC_ConfigChannel>
 8003b74:	b920      	cbnz	r0, 8003b80 <MX_TIM9_Init+0x50>
}
 8003b76:	b009      	add	sp, #36	; 0x24
 8003b78:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003b7c:	f7ff fe74 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003b80:	f7ff fe72 	bl	8003868 <Error_Handler>
 8003b84:	20000ccc 	.word	0x20000ccc
 8003b88:	40014000 	.word	0x40014000

08003b8c <MX_TIM10_Init>:
{
 8003b8c:	b500      	push	{lr}
 8003b8e:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b90:	2300      	movs	r3, #0
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	9302      	str	r3, [sp, #8]
 8003b96:	9303      	str	r3, [sp, #12]
 8003b98:	9304      	str	r3, [sp, #16]
 8003b9a:	9305      	str	r3, [sp, #20]
 8003b9c:	9306      	str	r3, [sp, #24]
 8003b9e:	9307      	str	r3, [sp, #28]
  htim10.Instance = TIM10;
 8003ba0:	4812      	ldr	r0, [pc, #72]	; (8003bec <MX_TIM10_Init+0x60>)
 8003ba2:	4a13      	ldr	r2, [pc, #76]	; (8003bf0 <MX_TIM10_Init+0x64>)
 8003ba4:	6002      	str	r2, [r0, #0]
  htim10.Init.Prescaler = 16000;
 8003ba6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003baa:	6042      	str	r2, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bac:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 1000;
 8003bae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bb2:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb4:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003bb8:	f002 ffe8 	bl	8006b8c <HAL_TIM_Base_Init>
 8003bbc:	b980      	cbnz	r0, 8003be0 <MX_TIM10_Init+0x54>
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8003bbe:	480b      	ldr	r0, [pc, #44]	; (8003bec <MX_TIM10_Init+0x60>)
 8003bc0:	f003 f810 	bl	8006be4 <HAL_TIM_OC_Init>
 8003bc4:	b970      	cbnz	r0, 8003be4 <MX_TIM10_Init+0x58>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003bca:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bcc:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bce:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bd0:	a901      	add	r1, sp, #4
 8003bd2:	4806      	ldr	r0, [pc, #24]	; (8003bec <MX_TIM10_Init+0x60>)
 8003bd4:	f003 f864 	bl	8006ca0 <HAL_TIM_OC_ConfigChannel>
 8003bd8:	b930      	cbnz	r0, 8003be8 <MX_TIM10_Init+0x5c>
}
 8003bda:	b009      	add	sp, #36	; 0x24
 8003bdc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003be0:	f7ff fe42 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003be4:	f7ff fe40 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003be8:	f7ff fe3e 	bl	8003868 <Error_Handler>
 8003bec:	20000b64 	.word	0x20000b64
 8003bf0:	40014400 	.word	0x40014400

08003bf4 <MX_TIM11_Init>:
{
 8003bf4:	b500      	push	{lr}
 8003bf6:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	9302      	str	r3, [sp, #8]
 8003bfe:	9303      	str	r3, [sp, #12]
 8003c00:	9304      	str	r3, [sp, #16]
 8003c02:	9305      	str	r3, [sp, #20]
 8003c04:	9306      	str	r3, [sp, #24]
 8003c06:	9307      	str	r3, [sp, #28]
  htim11.Instance = TIM11;
 8003c08:	4812      	ldr	r0, [pc, #72]	; (8003c54 <MX_TIM11_Init+0x60>)
 8003c0a:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <MX_TIM11_Init+0x64>)
 8003c0c:	6002      	str	r2, [r0, #0]
  htim11.Init.Prescaler = 16000;
 8003c0e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003c12:	6042      	str	r2, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c14:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 10;
 8003c16:	220a      	movs	r2, #10
 8003c18:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c1a:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c1c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003c1e:	f002 ffb5 	bl	8006b8c <HAL_TIM_Base_Init>
 8003c22:	b980      	cbnz	r0, 8003c46 <MX_TIM11_Init+0x52>
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8003c24:	480b      	ldr	r0, [pc, #44]	; (8003c54 <MX_TIM11_Init+0x60>)
 8003c26:	f002 ffdd 	bl	8006be4 <HAL_TIM_OC_Init>
 8003c2a:	b970      	cbnz	r0, 8003c4a <MX_TIM11_Init+0x56>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003c30:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c32:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c34:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c36:	a901      	add	r1, sp, #4
 8003c38:	4806      	ldr	r0, [pc, #24]	; (8003c54 <MX_TIM11_Init+0x60>)
 8003c3a:	f003 f831 	bl	8006ca0 <HAL_TIM_OC_ConfigChannel>
 8003c3e:	b930      	cbnz	r0, 8003c4e <MX_TIM11_Init+0x5a>
}
 8003c40:	b009      	add	sp, #36	; 0x24
 8003c42:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003c46:	f7ff fe0f 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003c4a:	f7ff fe0d 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003c4e:	f7ff fe0b 	bl	8003868 <Error_Handler>
 8003c52:	bf00      	nop
 8003c54:	20000bac 	.word	0x20000bac
 8003c58:	40014800 	.word	0x40014800

08003c5c <SystemClock_Config>:
{
 8003c5c:	b500      	push	{lr}
 8003c5e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c60:	2230      	movs	r2, #48	; 0x30
 8003c62:	2100      	movs	r1, #0
 8003c64:	a808      	add	r0, sp, #32
 8003c66:	f005 f88f 	bl	8008d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	9303      	str	r3, [sp, #12]
 8003c6e:	9304      	str	r3, [sp, #16]
 8003c70:	9305      	str	r3, [sp, #20]
 8003c72:	9306      	str	r3, [sp, #24]
 8003c74:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <SystemClock_Config+0x8c>)
 8003c7a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003c7c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003c80:	6411      	str	r1, [r2, #64]	; 0x40
 8003c82:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c84:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003c88:	9201      	str	r2, [sp, #4]
 8003c8a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c8c:	9302      	str	r3, [sp, #8]
 8003c8e:	4917      	ldr	r1, [pc, #92]	; (8003cec <SystemClock_Config+0x90>)
 8003c90:	680a      	ldr	r2, [r1, #0]
 8003c92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c9a:	600a      	str	r2, [r1, #0]
 8003c9c:	680a      	ldr	r2, [r1, #0]
 8003c9e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003ca2:	9202      	str	r2, [sp, #8]
 8003ca4:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003ca6:	220a      	movs	r2, #10
 8003ca8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003caa:	2201      	movs	r2, #1
 8003cac:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cae:	2110      	movs	r1, #16
 8003cb0:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003cb2:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003cb4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cb6:	a808      	add	r0, sp, #32
 8003cb8:	f001 fcd0 	bl	800565c <HAL_RCC_OscConfig>
 8003cbc:	b978      	cbnz	r0, 8003cde <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cbe:	230f      	movs	r3, #15
 8003cc0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cc6:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ccc:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cce:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003cd0:	a803      	add	r0, sp, #12
 8003cd2:	f001 ff11 	bl	8005af8 <HAL_RCC_ClockConfig>
 8003cd6:	b920      	cbnz	r0, 8003ce2 <SystemClock_Config+0x86>
}
 8003cd8:	b015      	add	sp, #84	; 0x54
 8003cda:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003cde:	f7ff fdc3 	bl	8003868 <Error_Handler>
    Error_Handler();
 8003ce2:	f7ff fdc1 	bl	8003868 <Error_Handler>
 8003ce6:	bf00      	nop
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	40007000 	.word	0x40007000

08003cf0 <main>:
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8003cf4:	f000 fd56 	bl	80047a4 <HAL_Init>
  SystemClock_Config();
 8003cf8:	f7ff ffb0 	bl	8003c5c <SystemClock_Config>
  MX_GPIO_Init();
 8003cfc:	f7fe fae6 	bl	80022cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d00:	f7ff fdc4 	bl	800388c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8003d04:	f7ff fddc 	bl	80038c0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003d08:	f7ff fe14 	bl	8003934 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8003d0c:	f7ff fe2c 	bl	8003968 <MX_SPI1_Init>
  MX_RTC_Init();
 8003d10:	f7ff fe4a 	bl	80039a8 <MX_RTC_Init>
  MX_FATFS_Init();
 8003d14:	f003 fb70 	bl	80073f8 <MX_FATFS_Init>
  MX_TIM3_Init();
 8003d18:	f7ff fe5e 	bl	80039d8 <MX_TIM3_Init>
  MX_I2C1_Init();
 8003d1c:	f7ff fe96 	bl	8003a4c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003d20:	f7ff feb0 	bl	8003a84 <MX_I2C2_Init>
  MX_TIM5_Init();
 8003d24:	f7ff feca 	bl	8003abc <MX_TIM5_Init>
  MX_TIM9_Init();
 8003d28:	f7ff ff02 	bl	8003b30 <MX_TIM9_Init>
  MX_TIM10_Init();
 8003d2c:	f7ff ff2e 	bl	8003b8c <MX_TIM10_Init>
  MX_TIM11_Init();
 8003d30:	f7ff ff60 	bl	8003bf4 <MX_TIM11_Init>
	Is_asleep = 0;
 8003d34:	2400      	movs	r4, #0
 8003d36:	4bbf      	ldr	r3, [pc, #764]	; (8004034 <main+0x344>)
 8003d38:	701c      	strb	r4, [r3, #0]
	Rope_cut_status = ROPE_NOT_CUT;
 8003d3a:	4bbf      	ldr	r3, [pc, #764]	; (8004038 <main+0x348>)
 8003d3c:	701c      	strb	r4, [r3, #0]
	Rope_cut_delay = ROPE_CUT_TIME;
 8003d3e:	4bbf      	ldr	r3, [pc, #764]	; (800403c <main+0x34c>)
 8003d40:	220a      	movs	r2, #10
 8003d42:	701a      	strb	r2, [r3, #0]
	Cycle_runtime_last = 0;
 8003d44:	4bbe      	ldr	r3, [pc, #760]	; (8004040 <main+0x350>)
 8003d46:	801c      	strh	r4, [r3, #0]
	Cycle_runtime_min = 0xFFFF;
 8003d48:	4bbe      	ldr	r3, [pc, #760]	; (8004044 <main+0x354>)
 8003d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d4e:	801a      	strh	r2, [r3, #0]
	Cycle_runtime_max = 0;
 8003d50:	4bbd      	ldr	r3, [pc, #756]	; (8004048 <main+0x358>)
 8003d52:	801c      	strh	r4, [r3, #0]
	HAL_RTC_GetTime(&hrtc, &Current_Time, RTC_FORMAT_BIN);
 8003d54:	4dbd      	ldr	r5, [pc, #756]	; (800404c <main+0x35c>)
 8003d56:	4622      	mov	r2, r4
 8003d58:	49bd      	ldr	r1, [pc, #756]	; (8004050 <main+0x360>)
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f002 f9f1 	bl	8006142 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Current_Date, RTC_FORMAT_BIN);
 8003d60:	4622      	mov	r2, r4
 8003d62:	49bc      	ldr	r1, [pc, #752]	; (8004054 <main+0x364>)
 8003d64:	4628      	mov	r0, r5
 8003d66:	f002 fa14 	bl	8006192 <HAL_RTC_GetDate>
	HAL_Delay(2000);
 8003d6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d6e:	f000 fd45 	bl	80047fc <HAL_Delay>
	sd_file_cnt = 0;
 8003d72:	4bb9      	ldr	r3, [pc, #740]	; (8004058 <main+0x368>)
 8003d74:	701c      	strb	r4, [r3, #0]
	sd_error_cnt = 0;
 8003d76:	4bb9      	ldr	r3, [pc, #740]	; (800405c <main+0x36c>)
 8003d78:	701c      	strb	r4, [r3, #0]
	sd_mounted = 0;
 8003d7a:	4bb9      	ldr	r3, [pc, #740]	; (8004060 <main+0x370>)
 8003d7c:	701c      	strb	r4, [r3, #0]
	sd_status = Mount_open_SD_Card();
 8003d7e:	f7fe fd4d 	bl	800281c <Mount_open_SD_Card>
 8003d82:	4bb8      	ldr	r3, [pc, #736]	; (8004064 <main+0x374>)
 8003d84:	7018      	strb	r0, [r3, #0]
	while(sd_status == FR_NOT_READY)
 8003d86:	e003      	b.n	8003d90 <main+0xa0>
		sd_status = Mount_open_SD_Card();
 8003d88:	f7fe fd48 	bl	800281c <Mount_open_SD_Card>
 8003d8c:	4bb5      	ldr	r3, [pc, #724]	; (8004064 <main+0x374>)
 8003d8e:	7018      	strb	r0, [r3, #0]
	while(sd_status == FR_NOT_READY)
 8003d90:	4bb4      	ldr	r3, [pc, #720]	; (8004064 <main+0x374>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d0f6      	beq.n	8003d88 <main+0x98>
	if(sd_status == FR_OK)
 8003d9a:	4bb2      	ldr	r3, [pc, #712]	; (8004064 <main+0x374>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b95b      	cbnz	r3, 8003db8 <main+0xc8>
		sd_mounted = 1;
 8003da0:	4baf      	ldr	r3, [pc, #700]	; (8004060 <main+0x370>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
	Sensors.BME280_Internal.Pressure_ref = PRESSURE_REFERENCE;
 8003da6:	4bb0      	ldr	r3, [pc, #704]	; (8004068 <main+0x378>)
 8003da8:	2000      	movs	r0, #0
 8003daa:	49b0      	ldr	r1, [pc, #704]	; (800406c <main+0x37c>)
 8003dac:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
	Sensors.BME280_External.Pressure_ref = PRESSURE_REFERENCE;
 8003db0:	e9c3 0106 	strd	r0, r1, [r3, #24]
	for(uint8_t i = 0; i < ALTITUDE_BUFFER_SIZE; i++)
 8003db4:	2300      	movs	r3, #0
 8003db6:	e013      	b.n	8003de0 <main+0xf0>
		UART1_TxBuf[0] = 0xD0;
 8003db8:	49ad      	ldr	r1, [pc, #692]	; (8004070 <main+0x380>)
 8003dba:	23d0      	movs	r3, #208	; 0xd0
 8003dbc:	700b      	strb	r3, [r1, #0]
		UART1_TxBuf[1] = sd_status;
 8003dbe:	4ba9      	ldr	r3, [pc, #676]	; (8004064 <main+0x374>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	704b      	strb	r3, [r1, #1]
		HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	48ab      	ldr	r0, [pc, #684]	; (8004074 <main+0x384>)
 8003dc8:	f003 f8ef 	bl	8006faa <HAL_UART_Transmit_IT>
 8003dcc:	e7eb      	b.n	8003da6 <main+0xb6>
		Altitude_last[i] = 0;
 8003dce:	4aaa      	ldr	r2, [pc, #680]	; (8004078 <main+0x388>)
 8003dd0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	e9c2 0100 	strd	r0, r1, [r2]
	for(uint8_t i = 0; i < ALTITUDE_BUFFER_SIZE; i++)
 8003ddc:	3301      	adds	r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	d9f4      	bls.n	8003dce <main+0xde>
	Altitude_max = 0;
 8003de4:	4ba5      	ldr	r3, [pc, #660]	; (800407c <main+0x38c>)
 8003de6:	2000      	movs	r0, #0
 8003de8:	2100      	movs	r1, #0
 8003dea:	e9c3 0100 	strd	r0, r1, [r3]
	Altitude_index = 0;
 8003dee:	2400      	movs	r4, #0
 8003df0:	4ba3      	ldr	r3, [pc, #652]	; (8004080 <main+0x390>)
 8003df2:	701c      	strb	r4, [r3, #0]
	HAL_Delay(1000);
 8003df4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003df8:	f000 fd00 	bl	80047fc <HAL_Delay>
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f7fe fb31 	bl	8002464 <I2C_Select_bus>
	Sensors.BME280_Internal.Status = BME280_Get_ID(I2C_handle_BME_in__MPU, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 8003e02:	4ca0      	ldr	r4, [pc, #640]	; (8004084 <main+0x394>)
 8003e04:	2314      	movs	r3, #20
 8003e06:	9312      	str	r3, [sp, #72]	; 0x48
 8003e08:	4d97      	ldr	r5, [pc, #604]	; (8004068 <main+0x378>)
 8003e0a:	f105 0331 	add.w	r3, r5, #49	; 0x31
 8003e0e:	9311      	str	r3, [sp, #68]	; 0x44
 8003e10:	2244      	movs	r2, #68	; 0x44
 8003e12:	f104 0110 	add.w	r1, r4, #16
 8003e16:	4668      	mov	r0, sp
 8003e18:	f004 ffa8 	bl	8008d6c <memcpy>
 8003e1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e20:	f7fd f8bc 	bl	8000f9c <BME280_Get_ID>
 8003e24:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
	if (Sensors.BME280_Internal.Status == HAL_OK)
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	f000 80af 	beq.w	8003f8c <main+0x29c>
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f7fe fb18 	bl	8002464 <I2C_Select_bus>
	Sensors.BME280_External.Status = BME280_Get_ID(I2C_handle_BME_ex__SI, &Sensors.BME280_External.ID, I2C_short_timeout);
 8003e34:	4c94      	ldr	r4, [pc, #592]	; (8004088 <main+0x398>)
 8003e36:	2314      	movs	r3, #20
 8003e38:	9312      	str	r3, [sp, #72]	; 0x48
 8003e3a:	4d8b      	ldr	r5, [pc, #556]	; (8004068 <main+0x378>)
 8003e3c:	1c6b      	adds	r3, r5, #1
 8003e3e:	9311      	str	r3, [sp, #68]	; 0x44
 8003e40:	2244      	movs	r2, #68	; 0x44
 8003e42:	f104 0110 	add.w	r1, r4, #16
 8003e46:	4668      	mov	r0, sp
 8003e48:	f004 ff90 	bl	8008d6c <memcpy>
 8003e4c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e50:	f7fd f8a4 	bl	8000f9c <BME280_Get_ID>
 8003e54:	7028      	strb	r0, [r5, #0]
	if (Sensors.BME280_External.Status == HAL_OK)
 8003e56:	2800      	cmp	r0, #0
 8003e58:	f000 80ba 	beq.w	8003fd0 <main+0x2e0>
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f7fe fb01 	bl	8002464 <I2C_Select_bus>
	Sensors.MPU650.Status = MPU6050_read_ID(I2C_handle_BME_in__MPU, &Sensors.MPU650.ID, I2C_short_timeout);
 8003e62:	4c88      	ldr	r4, [pc, #544]	; (8004084 <main+0x394>)
 8003e64:	2314      	movs	r3, #20
 8003e66:	9312      	str	r3, [sp, #72]	; 0x48
 8003e68:	4d7f      	ldr	r5, [pc, #508]	; (8004068 <main+0x378>)
 8003e6a:	f105 0361 	add.w	r3, r5, #97	; 0x61
 8003e6e:	9311      	str	r3, [sp, #68]	; 0x44
 8003e70:	2244      	movs	r2, #68	; 0x44
 8003e72:	f104 0110 	add.w	r1, r4, #16
 8003e76:	4668      	mov	r0, sp
 8003e78:	f004 ff78 	bl	8008d6c <memcpy>
 8003e7c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e80:	f7fd fc93 	bl	80017aa <MPU6050_read_ID>
 8003e84:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
	if (Sensors.MPU650.Status == HAL_OK)
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	f000 80c1 	beq.w	8004010 <main+0x320>
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 8003e8e:	2001      	movs	r0, #1
 8003e90:	f7fe fae8 	bl	8002464 <I2C_Select_bus>
	Sensors.SI1145.Status = SI1145_Init(I2C_handle_BME_ex__SI, I2C_short_timeout);
 8003e94:	4c7c      	ldr	r4, [pc, #496]	; (8004088 <main+0x398>)
 8003e96:	2314      	movs	r3, #20
 8003e98:	9311      	str	r3, [sp, #68]	; 0x44
 8003e9a:	2244      	movs	r2, #68	; 0x44
 8003e9c:	f104 0110 	add.w	r1, r4, #16
 8003ea0:	4668      	mov	r0, sp
 8003ea2:	f004 ff63 	bl	8008d6c <memcpy>
 8003ea6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003eaa:	f7fd fd5b 	bl	8001964 <SI1145_Init>
 8003eae:	4b6e      	ldr	r3, [pc, #440]	; (8004068 <main+0x378>)
 8003eb0:	f883 00a0 	strb.w	r0, [r3, #160]	; 0xa0
	if (Sensors.SI1145.Status == HAL_OK)
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	f000 8111 	beq.w	80040dc <main+0x3ec>
	UART1_RxIsData = 0;
 8003eba:	2400      	movs	r4, #0
 8003ebc:	4b73      	ldr	r3, [pc, #460]	; (800408c <main+0x39c>)
 8003ebe:	701c      	strb	r4, [r3, #0]
	UART1_RxBytes = 2;
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	4b73      	ldr	r3, [pc, #460]	; (8004090 <main+0x3a0>)
 8003ec4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 8003ec6:	4973      	ldr	r1, [pc, #460]	; (8004094 <main+0x3a4>)
 8003ec8:	486a      	ldr	r0, [pc, #424]	; (8004074 <main+0x384>)
 8003eca:	f003 fa78 	bl	80073be <HAL_UART_Receive_IT>
	UART2_RxIsData = 0;
 8003ece:	4b72      	ldr	r3, [pc, #456]	; (8004098 <main+0x3a8>)
 8003ed0:	701c      	strb	r4, [r3, #0]
	UART2_RxBytes = 4;
 8003ed2:	4b72      	ldr	r3, [pc, #456]	; (800409c <main+0x3ac>)
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	701a      	strb	r2, [r3, #0]
	UART2_Send_Sensor_Data = 0;
 8003ed8:	4b71      	ldr	r3, [pc, #452]	; (80040a0 <main+0x3b0>)
 8003eda:	701c      	strb	r4, [r3, #0]
	UART2_Reset_Countdown = 0;
 8003edc:	4b71      	ldr	r3, [pc, #452]	; (80040a4 <main+0x3b4>)
 8003ede:	701c      	strb	r4, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0);
 8003ee0:	2108      	movs	r1, #8
 8003ee2:	4871      	ldr	r0, [pc, #452]	; (80040a8 <main+0x3b8>)
 8003ee4:	f000 fe48 	bl	8004b78 <HAL_GPIO_ReadPin>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	d0f9      	beq.n	8003ee0 <main+0x1f0>
	HAL_UART_Receive_IT(&huart2, UART2_RxBuf, 4);
 8003eec:	2204      	movs	r2, #4
 8003eee:	496f      	ldr	r1, [pc, #444]	; (80040ac <main+0x3bc>)
 8003ef0:	486f      	ldr	r0, [pc, #444]	; (80040b0 <main+0x3c0>)
 8003ef2:	f003 fa64 	bl	80073be <HAL_UART_Receive_IT>
	UART1_TxBuf[0] = 0x00;
 8003ef6:	4c5e      	ldr	r4, [pc, #376]	; (8004070 <main+0x380>)
 8003ef8:	2600      	movs	r6, #0
 8003efa:	7026      	strb	r6, [r4, #0]
	UART1_TxBuf[1] = Get_System_Status();
 8003efc:	f7fe fa7a 	bl	80023f4 <Get_System_Status>
 8003f00:	7060      	strb	r0, [r4, #1]
	HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003f02:	2202      	movs	r2, #2
 8003f04:	4621      	mov	r1, r4
 8003f06:	485b      	ldr	r0, [pc, #364]	; (8004074 <main+0x384>)
 8003f08:	f003 f84f 	bl	8006faa <HAL_UART_Transmit_IT>
	HAL_TIM_Base_Start_IT(&htim3);	// Sensor read cycle timer, T = 1s
 8003f0c:	4869      	ldr	r0, [pc, #420]	; (80040b4 <main+0x3c4>)
 8003f0e:	f002 fcd9 	bl	80068c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);	// Flashes LEDs, T = 0.5s
 8003f12:	4869      	ldr	r0, [pc, #420]	; (80040b8 <main+0x3c8>)
 8003f14:	f002 fcd6 	bl	80068c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);	// CAM1 heartbeat timer, T = 5s
 8003f18:	4c68      	ldr	r4, [pc, #416]	; (80040bc <main+0x3cc>)
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f002 fcd2 	bl	80068c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);	// CAM2 heartbeat timer, T = 5s
 8003f20:	4f67      	ldr	r7, [pc, #412]	; (80040c0 <main+0x3d0>)
 8003f22:	4638      	mov	r0, r7
 8003f24:	f002 fcce 	bl	80068c4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);	// UART management, T = 10ms
 8003f28:	4866      	ldr	r0, [pc, #408]	; (80040c4 <main+0x3d4>)
 8003f2a:	f002 fccb 	bl	80068c4 <HAL_TIM_Base_Start_IT>
	CAM_1.OK_PIN = CAM1_OK_Pin;
 8003f2e:	4d66      	ldr	r5, [pc, #408]	; (80040c8 <main+0x3d8>)
 8003f30:	2304      	movs	r3, #4
 8003f32:	81ab      	strh	r3, [r5, #12]
	CAM_1.OK_PORT = CAM1_OK_GPIO_Port;
 8003f34:	4b65      	ldr	r3, [pc, #404]	; (80040cc <main+0x3dc>)
 8003f36:	60ab      	str	r3, [r5, #8]
	CAM_1.ON_PIN = CAM1_ON_Pin;
 8003f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f3c:	80aa      	strh	r2, [r5, #4]
	CAM_1.ON_PORT = CAM1_ON_GPIO_Port;
 8003f3e:	602b      	str	r3, [r5, #0]
	CAM_1.START_PIN = CAM1_START_Pin;
 8003f40:	2220      	movs	r2, #32
 8003f42:	82aa      	strh	r2, [r5, #20]
	CAM_1.START_PORT = CAM1_START_GPIO_Port;
 8003f44:	612b      	str	r3, [r5, #16]
	CAM_1.REC_STATUS = CAM_NREC;
 8003f46:	772e      	strb	r6, [r5, #28]
	CAM_1.TIM = &htim5;
 8003f48:	61ac      	str	r4, [r5, #24]
	CAM_1.Do_Restart = 0;
 8003f4a:	776e      	strb	r6, [r5, #29]
	CAM_1.Do_EXTI = 0;
 8003f4c:	77ae      	strb	r6, [r5, #30]
	CAM_1.Startup_delay = CAM_STARTUP_TIME;
 8003f4e:	2206      	movs	r2, #6
 8003f50:	77ea      	strb	r2, [r5, #31]
	CAM_2.OK_PIN = CAM2_OK_Pin;
 8003f52:	4c5f      	ldr	r4, [pc, #380]	; (80040d0 <main+0x3e0>)
 8003f54:	2102      	movs	r1, #2
 8003f56:	81a1      	strh	r1, [r4, #12]
	CAM_2.OK_PORT = CAM2_OK_GPIO_Port;
 8003f58:	60a3      	str	r3, [r4, #8]
	CAM_2.ON_PIN = CAM2_ON_Pin;
 8003f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f5e:	80a1      	strh	r1, [r4, #4]
	CAM_2.ON_PORT = CAM2_ON_GPIO_Port;
 8003f60:	6023      	str	r3, [r4, #0]
	CAM_2.START_PIN = CAM2_START_Pin;
 8003f62:	2110      	movs	r1, #16
 8003f64:	82a1      	strh	r1, [r4, #20]
	CAM_2.START_PORT = CAM2_START_GPIO_Port;
 8003f66:	6123      	str	r3, [r4, #16]
	CAM_2.REC_STATUS = CAM_NREC;
 8003f68:	7726      	strb	r6, [r4, #28]
	CAM_2.TIM = &htim9;
 8003f6a:	61a7      	str	r7, [r4, #24]
	CAM_2.Do_Restart = 0;
 8003f6c:	7766      	strb	r6, [r4, #29]
	CAM_2.Do_EXTI = 0;
 8003f6e:	77a6      	strb	r6, [r4, #30]
	CAM_2.Startup_delay = CAM_STARTUP_TIME;
 8003f70:	77e2      	strb	r2, [r4, #31]
	CAM_ON(&CAM_1);
 8003f72:	4628      	mov	r0, r5
 8003f74:	f7fe fcdc 	bl	8002930 <CAM_ON>
	CAM_ON(&CAM_2);
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f7fe fcd9 	bl	8002930 <CAM_ON>
	CAM_START(&CAM_1);
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7fe fcf0 	bl	8002964 <CAM_START>
	CAM_START(&CAM_2);
 8003f84:	4620      	mov	r0, r4
 8003f86:	f7fe fced 	bl	8002964 <CAM_START>
 8003f8a:	e0bf      	b.n	800410c <main+0x41c>
		Sensors.BME280_Internal.Status = BME280_Init(I2C_handle_BME_in__MPU, I2C_short_timeout);
 8003f8c:	2314      	movs	r3, #20
 8003f8e:	9311      	str	r3, [sp, #68]	; 0x44
 8003f90:	f104 0610 	add.w	r6, r4, #16
 8003f94:	2744      	movs	r7, #68	; 0x44
 8003f96:	463a      	mov	r2, r7
 8003f98:	4631      	mov	r1, r6
 8003f9a:	4668      	mov	r0, sp
 8003f9c:	f004 fee6 	bl	8008d6c <memcpy>
 8003fa0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003fa4:	f7fc ffaa 	bl	8000efc <BME280_Init>
 8003fa8:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
		Sensors.BME280_Internal.Status = BME280_Calib_Read(I2C_handle_BME_in__MPU, &BME280_internal_Calib_Data, I2C_long_timeout);
 8003fac:	23c8      	movs	r3, #200	; 0xc8
 8003fae:	9312      	str	r3, [sp, #72]	; 0x48
 8003fb0:	4b48      	ldr	r3, [pc, #288]	; (80040d4 <main+0x3e4>)
 8003fb2:	9311      	str	r3, [sp, #68]	; 0x44
 8003fb4:	463a      	mov	r2, r7
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4668      	mov	r0, sp
 8003fba:	f004 fed7 	bl	8008d6c <memcpy>
 8003fbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003fc2:	f7fd f803 	bl	8000fcc <BME280_Calib_Read>
 8003fc6:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
		Get_BME280_in_all_readings();
 8003fca:	f7fe fa7b 	bl	80024c4 <Get_BME280_in_all_readings>
 8003fce:	e72e      	b.n	8003e2e <main+0x13e>
		Sensors.BME280_External.Status = BME280_Init(I2C_handle_BME_ex__SI, I2C_short_timeout);
 8003fd0:	2314      	movs	r3, #20
 8003fd2:	9311      	str	r3, [sp, #68]	; 0x44
 8003fd4:	f104 0610 	add.w	r6, r4, #16
 8003fd8:	2744      	movs	r7, #68	; 0x44
 8003fda:	463a      	mov	r2, r7
 8003fdc:	4631      	mov	r1, r6
 8003fde:	4668      	mov	r0, sp
 8003fe0:	f004 fec4 	bl	8008d6c <memcpy>
 8003fe4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003fe8:	f7fc ff88 	bl	8000efc <BME280_Init>
 8003fec:	7028      	strb	r0, [r5, #0]
		Sensors.BME280_External.Status = BME280_Calib_Read(I2C_handle_BME_ex__SI, &BME280_external_Calib_Data, I2C_long_timeout);
 8003fee:	23c8      	movs	r3, #200	; 0xc8
 8003ff0:	9312      	str	r3, [sp, #72]	; 0x48
 8003ff2:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <main+0x3e8>)
 8003ff4:	9311      	str	r3, [sp, #68]	; 0x44
 8003ff6:	463a      	mov	r2, r7
 8003ff8:	4631      	mov	r1, r6
 8003ffa:	4668      	mov	r0, sp
 8003ffc:	f004 feb6 	bl	8008d6c <memcpy>
 8004000:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004004:	f7fc ffe2 	bl	8000fcc <BME280_Calib_Read>
 8004008:	7028      	strb	r0, [r5, #0]
		Get_BME280_ex_all_readings();
 800400a:	f7fe fad5 	bl	80025b8 <Get_BME280_ex_all_readings>
 800400e:	e725      	b.n	8003e5c <main+0x16c>
		Sensors.MPU650.Status = MPU6050_Init(I2C_handle_BME_in__MPU, I2C_short_timeout);
 8004010:	2314      	movs	r3, #20
 8004012:	9311      	str	r3, [sp, #68]	; 0x44
 8004014:	2244      	movs	r2, #68	; 0x44
 8004016:	f104 0110 	add.w	r1, r4, #16
 800401a:	4668      	mov	r0, sp
 800401c:	f004 fea6 	bl	8008d6c <memcpy>
 8004020:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004024:	f7fd fb52 	bl	80016cc <MPU6050_Init>
 8004028:	f885 0060 	strb.w	r0, [r5, #96]	; 0x60
		Get_MPU6050_all_readings();
 800402c:	f7fe fb38 	bl	80026a0 <Get_MPU6050_all_readings>
 8004030:	e72d      	b.n	8003e8e <main+0x19e>
 8004032:	bf00      	nop
 8004034:	200003ac 	.word	0x200003ac
 8004038:	200003ae 	.word	0x200003ae
 800403c:	200003ad 	.word	0x200003ad
 8004040:	20000368 	.word	0x20000368
 8004044:	2000036c 	.word	0x2000036c
 8004048:	2000036a 	.word	0x2000036a
 800404c:	20000aec 	.word	0x20000aec
 8004050:	20000354 	.word	0x20000354
 8004054:	20000350 	.word	0x20000350
 8004058:	20000da1 	.word	0x20000da1
 800405c:	20000da0 	.word	0x20000da0
 8004060:	20000da2 	.word	0x20000da2
 8004064:	20000da3 	.word	0x20000da3
 8004068:	200003b0 	.word	0x200003b0
 800406c:	40590000 	.word	0x40590000
 8004070:	200004e4 	.word	0x200004e4
 8004074:	20000d14 	.word	0x20000d14
 8004078:	20000270 	.word	0x20000270
 800407c:	200002c0 	.word	0x200002c0
 8004080:	2000026c 	.word	0x2000026c
 8004084:	20000a98 	.word	0x20000a98
 8004088:	20000a44 	.word	0x20000a44
 800408c:	200004e1 	.word	0x200004e1
 8004090:	200004e0 	.word	0x200004e0
 8004094:	200004a4 	.word	0x200004a4
 8004098:	2000059d 	.word	0x2000059d
 800409c:	2000059c 	.word	0x2000059c
 80040a0:	2000059e 	.word	0x2000059e
 80040a4:	2000055c 	.word	0x2000055c
 80040a8:	40020000 	.word	0x40020000
 80040ac:	20000560 	.word	0x20000560
 80040b0:	20000d58 	.word	0x20000d58
 80040b4:	20000bf4 	.word	0x20000bf4
 80040b8:	20000c3c 	.word	0x20000c3c
 80040bc:	20000c84 	.word	0x20000c84
 80040c0:	20000ccc 	.word	0x20000ccc
 80040c4:	20000bac 	.word	0x20000bac
 80040c8:	20000310 	.word	0x20000310
 80040cc:	40020400 	.word	0x40020400
 80040d0:	20000330 	.word	0x20000330
 80040d4:	200002ec 	.word	0x200002ec
 80040d8:	200002c8 	.word	0x200002c8
		Sensors.SI1145.Status = SI1145_read_ID(I2C_handle_BME_ex__SI, &Sensors.SI1145.ID, I2C_short_timeout);
 80040dc:	2314      	movs	r3, #20
 80040de:	9312      	str	r3, [sp, #72]	; 0x48
 80040e0:	4d10      	ldr	r5, [pc, #64]	; (8004124 <main+0x434>)
 80040e2:	f105 03a1 	add.w	r3, r5, #161	; 0xa1
 80040e6:	9311      	str	r3, [sp, #68]	; 0x44
 80040e8:	2244      	movs	r2, #68	; 0x44
 80040ea:	f104 0110 	add.w	r1, r4, #16
 80040ee:	4668      	mov	r0, sp
 80040f0:	f004 fe3c 	bl	8008d6c <memcpy>
 80040f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80040f8:	f7fd fd0a 	bl	8001b10 <SI1145_read_ID>
 80040fc:	f885 00a0 	strb.w	r0, [r5, #160]	; 0xa0
		Get_SI1145_all_readings();
 8004100:	f7fe fb36 	bl	8002770 <Get_SI1145_all_readings>
 8004104:	e6d9      	b.n	8003eba <main+0x1ca>
		  UART2_RxBytes = 4;
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <main+0x438>)
 8004108:	2204      	movs	r2, #4
 800410a:	701a      	strb	r2, [r3, #0]
	  if(UART1_RxIsData == 0)
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <main+0x43c>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	b913      	cbnz	r3, 8004118 <main+0x428>
		  UART1_RxBytes = 2;
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <main+0x440>)
 8004114:	2202      	movs	r2, #2
 8004116:	701a      	strb	r2, [r3, #0]
	  if(UART2_RxIsData == 0)
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <main+0x444>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f5      	bne.n	800410c <main+0x41c>
 8004120:	e7f1      	b.n	8004106 <main+0x416>
 8004122:	bf00      	nop
 8004124:	200003b0 	.word	0x200003b0
 8004128:	2000059c 	.word	0x2000059c
 800412c:	200004e1 	.word	0x200004e1
 8004130:	200004e0 	.word	0x200004e0
 8004134:	2000059d 	.word	0x2000059d

08004138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004138:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800413a:	2100      	movs	r1, #0
 800413c:	9100      	str	r1, [sp, #0]
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_MspInit+0x34>)
 8004140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004146:	645a      	str	r2, [r3, #68]	; 0x44
 8004148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800414e:	9200      	str	r2, [sp, #0]
 8004150:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	9101      	str	r1, [sp, #4]
 8004154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004156:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800415a:	641a      	str	r2, [r3, #64]	; 0x40
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004166:	b002      	add	sp, #8
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800

08004170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004174:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004176:	2300      	movs	r3, #0
 8004178:	9305      	str	r3, [sp, #20]
 800417a:	9306      	str	r3, [sp, #24]
 800417c:	9307      	str	r3, [sp, #28]
 800417e:	9308      	str	r3, [sp, #32]
 8004180:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8004182:	6803      	ldr	r3, [r0, #0]
 8004184:	4a2f      	ldr	r2, [pc, #188]	; (8004244 <HAL_I2C_MspInit+0xd4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d005      	beq.n	8004196 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 800418a:	4a2f      	ldr	r2, [pc, #188]	; (8004248 <HAL_I2C_MspInit+0xd8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d025      	beq.n	80041dc <HAL_I2C_MspInit+0x6c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004190:	b00a      	add	sp, #40	; 0x28
 8004192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004196:	2500      	movs	r5, #0
 8004198:	9501      	str	r5, [sp, #4]
 800419a:	4c2c      	ldr	r4, [pc, #176]	; (800424c <HAL_I2C_MspInit+0xdc>)
 800419c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800419e:	f043 0302 	orr.w	r3, r3, #2
 80041a2:	6323      	str	r3, [r4, #48]	; 0x30
 80041a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041ae:	23c0      	movs	r3, #192	; 0xc0
 80041b0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041b2:	2312      	movs	r3, #18
 80041b4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b6:	2303      	movs	r3, #3
 80041b8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041ba:	2304      	movs	r3, #4
 80041bc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041be:	a905      	add	r1, sp, #20
 80041c0:	4823      	ldr	r0, [pc, #140]	; (8004250 <HAL_I2C_MspInit+0xe0>)
 80041c2:	f000 fbf9 	bl	80049b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041c6:	9502      	str	r5, [sp, #8]
 80041c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041ce:	6423      	str	r3, [r4, #64]	; 0x40
 80041d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d6:	9302      	str	r3, [sp, #8]
 80041d8:	9b02      	ldr	r3, [sp, #8]
 80041da:	e7d9      	b.n	8004190 <HAL_I2C_MspInit+0x20>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041dc:	2500      	movs	r5, #0
 80041de:	9503      	str	r5, [sp, #12]
 80041e0:	4c1a      	ldr	r4, [pc, #104]	; (800424c <HAL_I2C_MspInit+0xdc>)
 80041e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041e4:	f043 0302 	orr.w	r3, r3, #2
 80041e8:	6323      	str	r3, [r4, #48]	; 0x30
 80041ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	9303      	str	r3, [sp, #12]
 80041f2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80041f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041fa:	f04f 0812 	mov.w	r8, #18
 80041fe:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004202:	2703      	movs	r7, #3
 8004204:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004206:	2304      	movs	r3, #4
 8004208:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420a:	4e11      	ldr	r6, [pc, #68]	; (8004250 <HAL_I2C_MspInit+0xe0>)
 800420c:	a905      	add	r1, sp, #20
 800420e:	4630      	mov	r0, r6
 8004210:	f000 fbd2 	bl	80049b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004214:	2308      	movs	r3, #8
 8004216:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004218:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421c:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800421e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004220:	2309      	movs	r3, #9
 8004222:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004224:	a905      	add	r1, sp, #20
 8004226:	4630      	mov	r0, r6
 8004228:	f000 fbc6 	bl	80049b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800422c:	9504      	str	r5, [sp, #16]
 800422e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004230:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004234:	6423      	str	r3, [r4, #64]	; 0x40
 8004236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423c:	9304      	str	r3, [sp, #16]
 800423e:	9b04      	ldr	r3, [sp, #16]
}
 8004240:	e7a6      	b.n	8004190 <HAL_I2C_MspInit+0x20>
 8004242:	bf00      	nop
 8004244:	40005400 	.word	0x40005400
 8004248:	40005800 	.word	0x40005800
 800424c:	40023800 	.word	0x40023800
 8004250:	40020400 	.word	0x40020400

08004254 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004254:	b500      	push	{lr}
 8004256:	b087      	sub	sp, #28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004258:	2300      	movs	r3, #0
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	9302      	str	r3, [sp, #8]
 800425e:	9303      	str	r3, [sp, #12]
 8004260:	9304      	str	r3, [sp, #16]
 8004262:	9305      	str	r3, [sp, #20]
  if(hrtc->Instance==RTC)
 8004264:	6802      	ldr	r2, [r0, #0]
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RTC_MspInit+0x40>)
 8004268:	429a      	cmp	r2, r3
 800426a:	d002      	beq.n	8004272 <HAL_RTC_MspInit+0x1e>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800426c:	b007      	add	sp, #28
 800426e:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004272:	2302      	movs	r3, #2
 8004274:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800427a:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800427c:	a801      	add	r0, sp, #4
 800427e:	f001 fd11 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 8004282:	b920      	cbnz	r0, 800428e <HAL_RTC_MspInit+0x3a>
    __HAL_RCC_RTC_ENABLE();
 8004284:	4b04      	ldr	r3, [pc, #16]	; (8004298 <HAL_RTC_MspInit+0x44>)
 8004286:	2201      	movs	r2, #1
 8004288:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
}
 800428c:	e7ee      	b.n	800426c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 800428e:	f7ff faeb 	bl	8003868 <Error_Handler>
 8004292:	e7f7      	b.n	8004284 <HAL_RTC_MspInit+0x30>
 8004294:	40002800 	.word	0x40002800
 8004298:	42470000 	.word	0x42470000

0800429c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800429c:	b500      	push	{lr}
 800429e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	2300      	movs	r3, #0
 80042a2:	9303      	str	r3, [sp, #12]
 80042a4:	9304      	str	r3, [sp, #16]
 80042a6:	9305      	str	r3, [sp, #20]
 80042a8:	9306      	str	r3, [sp, #24]
 80042aa:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80042ac:	6802      	ldr	r2, [r0, #0]
 80042ae:	4b15      	ldr	r3, [pc, #84]	; (8004304 <HAL_SPI_MspInit+0x68>)
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d002      	beq.n	80042ba <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80042b4:	b009      	add	sp, #36	; 0x24
 80042b6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042ba:	2100      	movs	r1, #0
 80042bc:	9101      	str	r1, [sp, #4]
 80042be:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80042c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44
 80042ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042cc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042d0:	9201      	str	r2, [sp, #4]
 80042d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d4:	9102      	str	r1, [sp, #8]
 80042d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042d8:	f042 0201 	orr.w	r2, r2, #1
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	9302      	str	r3, [sp, #8]
 80042e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80042e8:	23e0      	movs	r3, #224	; 0xe0
 80042ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ec:	2302      	movs	r3, #2
 80042ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f0:	2303      	movs	r3, #3
 80042f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80042f4:	2305      	movs	r3, #5
 80042f6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f8:	a903      	add	r1, sp, #12
 80042fa:	4803      	ldr	r0, [pc, #12]	; (8004308 <HAL_SPI_MspInit+0x6c>)
 80042fc:	f000 fb5c 	bl	80049b8 <HAL_GPIO_Init>
}
 8004300:	e7d8      	b.n	80042b4 <HAL_SPI_MspInit+0x18>
 8004302:	bf00      	nop
 8004304:	40013000 	.word	0x40013000
 8004308:	40020000 	.word	0x40020000

0800430c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800430c:	b500      	push	{lr}
 800430e:	b085      	sub	sp, #20
  if(htim_oc->Instance==TIM3)
 8004310:	6803      	ldr	r3, [r0, #0]
 8004312:	4a2f      	ldr	r2, [pc, #188]	; (80043d0 <HAL_TIM_OC_MspInit+0xc4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00b      	beq.n	8004330 <HAL_TIM_OC_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_oc->Instance==TIM4)
 8004318:	4a2e      	ldr	r2, [pc, #184]	; (80043d4 <HAL_TIM_OC_MspInit+0xc8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d01c      	beq.n	8004358 <HAL_TIM_OC_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_oc->Instance==TIM5)
 800431e:	4a2e      	ldr	r2, [pc, #184]	; (80043d8 <HAL_TIM_OC_MspInit+0xcc>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d02d      	beq.n	8004380 <HAL_TIM_OC_MspInit+0x74>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_oc->Instance==TIM9)
 8004324:	4a2d      	ldr	r2, [pc, #180]	; (80043dc <HAL_TIM_OC_MspInit+0xd0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d03e      	beq.n	80043a8 <HAL_TIM_OC_MspInit+0x9c>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800432a:	b005      	add	sp, #20
 800432c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004330:	2200      	movs	r2, #0
 8004332:	9200      	str	r2, [sp, #0]
 8004334:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <HAL_TIM_OC_MspInit+0xd4>)
 8004336:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004338:	f041 0102 	orr.w	r1, r1, #2
 800433c:	6419      	str	r1, [r3, #64]	; 0x40
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004348:	2101      	movs	r1, #1
 800434a:	201d      	movs	r0, #29
 800434c:	f000 fa7c 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004350:	201d      	movs	r0, #29
 8004352:	f000 fab1 	bl	80048b8 <HAL_NVIC_EnableIRQ>
 8004356:	e7e8      	b.n	800432a <HAL_TIM_OC_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004358:	2200      	movs	r2, #0
 800435a:	9201      	str	r2, [sp, #4]
 800435c:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <HAL_TIM_OC_MspInit+0xd4>)
 800435e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004360:	f041 0104 	orr.w	r1, r1, #4
 8004364:	6419      	str	r1, [r3, #64]	; 0x40
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8004370:	2101      	movs	r1, #1
 8004372:	201e      	movs	r0, #30
 8004374:	f000 fa68 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004378:	201e      	movs	r0, #30
 800437a:	f000 fa9d 	bl	80048b8 <HAL_NVIC_EnableIRQ>
 800437e:	e7d4      	b.n	800432a <HAL_TIM_OC_MspInit+0x1e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004380:	2200      	movs	r2, #0
 8004382:	9202      	str	r2, [sp, #8]
 8004384:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <HAL_TIM_OC_MspInit+0xd4>)
 8004386:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004388:	f041 0108 	orr.w	r1, r1, #8
 800438c:	6419      	str	r1, [r3, #64]	; 0x40
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	9302      	str	r3, [sp, #8]
 8004396:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8004398:	2101      	movs	r1, #1
 800439a:	2032      	movs	r0, #50	; 0x32
 800439c:	f000 fa54 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80043a0:	2032      	movs	r0, #50	; 0x32
 80043a2:	f000 fa89 	bl	80048b8 <HAL_NVIC_EnableIRQ>
 80043a6:	e7c0      	b.n	800432a <HAL_TIM_OC_MspInit+0x1e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80043a8:	2200      	movs	r2, #0
 80043aa:	9203      	str	r2, [sp, #12]
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <HAL_TIM_OC_MspInit+0xd4>)
 80043ae:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80043b0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80043b4:	6459      	str	r1, [r3, #68]	; 0x44
 80043b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	9303      	str	r3, [sp, #12]
 80043be:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 80043c0:	2101      	movs	r1, #1
 80043c2:	2018      	movs	r0, #24
 80043c4:	f000 fa40 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80043c8:	2018      	movs	r0, #24
 80043ca:	f000 fa75 	bl	80048b8 <HAL_NVIC_EnableIRQ>
}
 80043ce:	e7ac      	b.n	800432a <HAL_TIM_OC_MspInit+0x1e>
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40014000 	.word	0x40014000
 80043e0:	40023800 	.word	0x40023800

080043e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043e4:	b500      	push	{lr}
 80043e6:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM10)
 80043e8:	6803      	ldr	r3, [r0, #0]
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_TIM_Base_MspInit+0x68>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d005      	beq.n	80043fc <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 80043f0:	4a17      	ldr	r2, [pc, #92]	; (8004450 <HAL_TIM_Base_MspInit+0x6c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d016      	beq.n	8004424 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80043f6:	b003      	add	sp, #12
 80043f8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 80043fc:	2200      	movs	r2, #0
 80043fe:	9200      	str	r2, [sp, #0]
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_TIM_Base_MspInit+0x70>)
 8004402:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004404:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004408:	6459      	str	r1, [r3, #68]	; 0x44
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8004414:	2101      	movs	r1, #1
 8004416:	2019      	movs	r0, #25
 8004418:	f000 fa16 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800441c:	2019      	movs	r0, #25
 800441e:	f000 fa4b 	bl	80048b8 <HAL_NVIC_EnableIRQ>
 8004422:	e7e8      	b.n	80043f6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004424:	2100      	movs	r1, #0
 8004426:	9101      	str	r1, [sp, #4]
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_TIM_Base_MspInit+0x70>)
 800442a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800442c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800443c:	460a      	mov	r2, r1
 800443e:	201a      	movs	r0, #26
 8004440:	f000 fa02 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004444:	201a      	movs	r0, #26
 8004446:	f000 fa37 	bl	80048b8 <HAL_NVIC_EnableIRQ>
}
 800444a:	e7d4      	b.n	80043f6 <HAL_TIM_Base_MspInit+0x12>
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800
 8004454:	40023800 	.word	0x40023800

08004458 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004458:	b510      	push	{r4, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445c:	2300      	movs	r3, #0
 800445e:	9305      	str	r3, [sp, #20]
 8004460:	9306      	str	r3, [sp, #24]
 8004462:	9307      	str	r3, [sp, #28]
 8004464:	9308      	str	r3, [sp, #32]
 8004466:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8004468:	6803      	ldr	r3, [r0, #0]
 800446a:	4a2f      	ldr	r2, [pc, #188]	; (8004528 <HAL_UART_MspInit+0xd0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8004470:	4a2e      	ldr	r2, [pc, #184]	; (800452c <HAL_UART_MspInit+0xd4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d02d      	beq.n	80044d2 <HAL_UART_MspInit+0x7a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004476:	b00a      	add	sp, #40	; 0x28
 8004478:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800447a:	2400      	movs	r4, #0
 800447c:	9401      	str	r4, [sp, #4]
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <HAL_UART_MspInit+0xd8>)
 8004480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004482:	f042 0210 	orr.w	r2, r2, #16
 8004486:	645a      	str	r2, [r3, #68]	; 0x44
 8004488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448a:	f002 0210 	and.w	r2, r2, #16
 800448e:	9201      	str	r2, [sp, #4]
 8004490:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004492:	9402      	str	r4, [sp, #8]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	9302      	str	r3, [sp, #8]
 80044a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80044aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ac:	2302      	movs	r3, #2
 80044ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b0:	2303      	movs	r3, #3
 80044b2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044b4:	2307      	movs	r3, #7
 80044b6:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b8:	a905      	add	r1, sp, #20
 80044ba:	481e      	ldr	r0, [pc, #120]	; (8004534 <HAL_UART_MspInit+0xdc>)
 80044bc:	f000 fa7c 	bl	80049b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80044c0:	4622      	mov	r2, r4
 80044c2:	2101      	movs	r1, #1
 80044c4:	2025      	movs	r0, #37	; 0x25
 80044c6:	f000 f9bf 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044ca:	2025      	movs	r0, #37	; 0x25
 80044cc:	f000 f9f4 	bl	80048b8 <HAL_NVIC_EnableIRQ>
 80044d0:	e7d1      	b.n	8004476 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80044d2:	2400      	movs	r4, #0
 80044d4:	9403      	str	r4, [sp, #12]
 80044d6:	4b16      	ldr	r3, [pc, #88]	; (8004530 <HAL_UART_MspInit+0xd8>)
 80044d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
 80044e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80044e6:	9203      	str	r2, [sp, #12]
 80044e8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ea:	9404      	str	r4, [sp, #16]
 80044ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	9304      	str	r3, [sp, #16]
 80044fc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80044fe:	230c      	movs	r3, #12
 8004500:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004502:	2302      	movs	r3, #2
 8004504:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004506:	2303      	movs	r3, #3
 8004508:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800450a:	2307      	movs	r3, #7
 800450c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450e:	a905      	add	r1, sp, #20
 8004510:	4808      	ldr	r0, [pc, #32]	; (8004534 <HAL_UART_MspInit+0xdc>)
 8004512:	f000 fa51 	bl	80049b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004516:	4622      	mov	r2, r4
 8004518:	2101      	movs	r1, #1
 800451a:	2026      	movs	r0, #38	; 0x26
 800451c:	f000 f994 	bl	8004848 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004520:	2026      	movs	r0, #38	; 0x26
 8004522:	f000 f9c9 	bl	80048b8 <HAL_NVIC_EnableIRQ>
}
 8004526:	e7a6      	b.n	8004476 <HAL_UART_MspInit+0x1e>
 8004528:	40011000 	.word	0x40011000
 800452c:	40004400 	.word	0x40004400
 8004530:	40023800 	.word	0x40023800
 8004534:	40020000 	.word	0x40020000

08004538 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004538:	e7fe      	b.n	8004538 <NMI_Handler>

0800453a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800453a:	e7fe      	b.n	800453a <HardFault_Handler>

0800453c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800453c:	e7fe      	b.n	800453c <MemManage_Handler>

0800453e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800453e:	e7fe      	b.n	800453e <BusFault_Handler>

08004540 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004540:	e7fe      	b.n	8004540 <UsageFault_Handler>

08004542 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004542:	4770      	bx	lr

08004544 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004544:	4770      	bx	lr

08004546 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004546:	4770      	bx	lr

08004548 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004548:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_CS_Pin);
 800454a:	2010      	movs	r0, #16
 800454c:	f000 fb2a 	bl	8004ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004550:	bd08      	pop	{r3, pc}

08004552 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004552:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAM1_START_Pin);
 8004554:	2020      	movs	r0, #32
 8004556:	f000 fb25 	bl	8004ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800455a:	bd08      	pop	{r3, pc}

0800455c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800455c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800455e:	4802      	ldr	r0, [pc, #8]	; (8004568 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8004560:	f002 fa09 	bl	8006976 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004564:	bd08      	pop	{r3, pc}
 8004566:	bf00      	nop
 8004568:	20000ccc 	.word	0x20000ccc

0800456c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800456c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800456e:	4802      	ldr	r0, [pc, #8]	; (8004578 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8004570:	f002 fa01 	bl	8006976 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004574:	bd08      	pop	{r3, pc}
 8004576:	bf00      	nop
 8004578:	20000b64 	.word	0x20000b64

0800457c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800457c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800457e:	4802      	ldr	r0, [pc, #8]	; (8004588 <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 8004580:	f002 f9f9 	bl	8006976 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004584:	bd08      	pop	{r3, pc}
 8004586:	bf00      	nop
 8004588:	20000bac 	.word	0x20000bac

0800458c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800458c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800458e:	4802      	ldr	r0, [pc, #8]	; (8004598 <TIM3_IRQHandler+0xc>)
 8004590:	f002 f9f1 	bl	8006976 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004594:	bd08      	pop	{r3, pc}
 8004596:	bf00      	nop
 8004598:	20000bf4 	.word	0x20000bf4

0800459c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800459c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800459e:	4802      	ldr	r0, [pc, #8]	; (80045a8 <TIM4_IRQHandler+0xc>)
 80045a0:	f002 f9e9 	bl	8006976 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80045a4:	bd08      	pop	{r3, pc}
 80045a6:	bf00      	nop
 80045a8:	20000c3c 	.word	0x20000c3c

080045ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045ae:	4802      	ldr	r0, [pc, #8]	; (80045b8 <USART1_IRQHandler+0xc>)
 80045b0:	f002 fdaa 	bl	8007108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045b4:	bd08      	pop	{r3, pc}
 80045b6:	bf00      	nop
 80045b8:	20000d14 	.word	0x20000d14

080045bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80045bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045be:	4802      	ldr	r0, [pc, #8]	; (80045c8 <USART2_IRQHandler+0xc>)
 80045c0:	f002 fda2 	bl	8007108 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045c4:	bd08      	pop	{r3, pc}
 80045c6:	bf00      	nop
 80045c8:	20000d58 	.word	0x20000d58

080045cc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80045cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80045ce:	4802      	ldr	r0, [pc, #8]	; (80045d8 <TIM5_IRQHandler+0xc>)
 80045d0:	f002 f9d1 	bl	8006976 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80045d4:	bd08      	pop	{r3, pc}
 80045d6:	bf00      	nop
 80045d8:	20000c84 	.word	0x20000c84

080045dc <SDTimer_Handler>:

/* USER CODE BEGIN 1 */
void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 80045dc:	4b08      	ldr	r3, [pc, #32]	; (8004600 <SDTimer_Handler+0x24>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	b123      	cbz	r3, 80045ec <SDTimer_Handler+0x10>
    Timer1--;
 80045e2:	4a07      	ldr	r2, [pc, #28]	; (8004600 <SDTimer_Handler+0x24>)
 80045e4:	7813      	ldrb	r3, [r2, #0]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <SDTimer_Handler+0x28>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b123      	cbz	r3, 80045fc <SDTimer_Handler+0x20>
    Timer2--;
 80045f2:	4a04      	ldr	r2, [pc, #16]	; (8004604 <SDTimer_Handler+0x28>)
 80045f4:	7813      	ldrb	r3, [r2, #0]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	7013      	strb	r3, [r2, #0]
}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000da9 	.word	0x20000da9
 8004604:	20000daa 	.word	0x20000daa

08004608 <SysTick_Handler>:
{
 8004608:	b508      	push	{r3, lr}
	FatFsCnt++;
 800460a:	4a09      	ldr	r2, [pc, #36]	; (8004630 <SysTick_Handler+0x28>)
 800460c:	7813      	ldrb	r3, [r2, #0]
 800460e:	3301      	adds	r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	7013      	strb	r3, [r2, #0]
	if(FatFsCnt >= 10)
 8004614:	7813      	ldrb	r3, [r2, #0]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b09      	cmp	r3, #9
 800461a:	d802      	bhi.n	8004622 <SysTick_Handler+0x1a>
  HAL_IncTick();
 800461c:	f000 f8dc 	bl	80047d8 <HAL_IncTick>
}
 8004620:	bd08      	pop	{r3, pc}
		FatFsCnt = 0;
 8004622:	4613      	mov	r3, r2
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8004628:	f7ff ffd8 	bl	80045dc <SDTimer_Handler>
 800462c:	e7f6      	b.n	800461c <SysTick_Handler+0x14>
 800462e:	bf00      	nop
 8004630:	20000da8 	.word	0x20000da8

08004634 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004634:	2001      	movs	r0, #1
 8004636:	4770      	bx	lr

08004638 <_kill>:

int _kill(int pid, int sig)
{
 8004638:	b508      	push	{r3, lr}
	errno = EINVAL;
 800463a:	f004 fb6d 	bl	8008d18 <__errno>
 800463e:	2316      	movs	r3, #22
 8004640:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004642:	f04f 30ff 	mov.w	r0, #4294967295
 8004646:	bd08      	pop	{r3, pc}

08004648 <_exit>:

void _exit (int status)
{
 8004648:	b508      	push	{r3, lr}
	_kill(status, -1);
 800464a:	f04f 31ff 	mov.w	r1, #4294967295
 800464e:	f7ff fff3 	bl	8004638 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004652:	e7fe      	b.n	8004652 <_exit+0xa>

08004654 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	460c      	mov	r4, r1
 8004658:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800465a:	2500      	movs	r5, #0
 800465c:	e006      	b.n	800466c <_read+0x18>
	{
		*ptr++ = __io_getchar();
 800465e:	f3af 8000 	nop.w
 8004662:	4621      	mov	r1, r4
 8004664:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004668:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800466a:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466c:	42b5      	cmp	r5, r6
 800466e:	dbf6      	blt.n	800465e <_read+0xa>
	}

return len;
}
 8004670:	4630      	mov	r0, r6
 8004672:	bd70      	pop	{r4, r5, r6, pc}

08004674 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	460c      	mov	r4, r1
 8004678:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467a:	2500      	movs	r5, #0
 800467c:	e004      	b.n	8004688 <_write+0x14>
	{
		__io_putchar(*ptr++);
 800467e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004682:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004686:	3501      	adds	r5, #1
 8004688:	42b5      	cmp	r5, r6
 800468a:	dbf8      	blt.n	800467e <_write+0xa>
	}
	return len;
}
 800468c:	4630      	mov	r0, r6
 800468e:	bd70      	pop	{r4, r5, r6, pc}

08004690 <_close>:

int _close(int file)
{
	return -1;
}
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	4770      	bx	lr

08004696 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800469a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800469c:	2000      	movs	r0, #0
 800469e:	4770      	bx	lr

080046a0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80046a0:	2001      	movs	r0, #1
 80046a2:	4770      	bx	lr

080046a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80046a4:	2000      	movs	r0, #0
 80046a6:	4770      	bx	lr

080046a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046a8:	b510      	push	{r4, lr}
 80046aa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046ac:	4a0c      	ldr	r2, [pc, #48]	; (80046e0 <_sbrk+0x38>)
 80046ae:	490d      	ldr	r1, [pc, #52]	; (80046e4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046b0:	480d      	ldr	r0, [pc, #52]	; (80046e8 <_sbrk+0x40>)
 80046b2:	6800      	ldr	r0, [r0, #0]
 80046b4:	b140      	cbz	r0, 80046c8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046b6:	480c      	ldr	r0, [pc, #48]	; (80046e8 <_sbrk+0x40>)
 80046b8:	6800      	ldr	r0, [r0, #0]
 80046ba:	4403      	add	r3, r0
 80046bc:	1a52      	subs	r2, r2, r1
 80046be:	4293      	cmp	r3, r2
 80046c0:	d806      	bhi.n	80046d0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <_sbrk+0x40>)
 80046c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80046c6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80046c8:	4807      	ldr	r0, [pc, #28]	; (80046e8 <_sbrk+0x40>)
 80046ca:	4c08      	ldr	r4, [pc, #32]	; (80046ec <_sbrk+0x44>)
 80046cc:	6004      	str	r4, [r0, #0]
 80046ce:	e7f2      	b.n	80046b6 <_sbrk+0xe>
    errno = ENOMEM;
 80046d0:	f004 fb22 	bl	8008d18 <__errno>
 80046d4:	230c      	movs	r3, #12
 80046d6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	e7f3      	b.n	80046c6 <_sbrk+0x1e>
 80046de:	bf00      	nop
 80046e0:	20018000 	.word	0x20018000
 80046e4:	00000400 	.word	0x00000400
 80046e8:	20000dac 	.word	0x20000dac
 80046ec:	20000e00 	.word	0x20000e00

080046f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046f0:	4a03      	ldr	r2, [pc, #12]	; (8004700 <SystemInit+0x10>)
 80046f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80046f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046fe:	4770      	bx	lr
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800473c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004708:	480d      	ldr	r0, [pc, #52]	; (8004740 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800470a:	490e      	ldr	r1, [pc, #56]	; (8004744 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800470c:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800470e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004710:	e002      	b.n	8004718 <LoopCopyDataInit>

08004712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004716:	3304      	adds	r3, #4

08004718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800471a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800471c:	d3f9      	bcc.n	8004712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800471e:	4a0b      	ldr	r2, [pc, #44]	; (800474c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004720:	4c0b      	ldr	r4, [pc, #44]	; (8004750 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004724:	e001      	b.n	800472a <LoopFillZerobss>

08004726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004728:	3204      	adds	r2, #4

0800472a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800472a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800472c:	d3fb      	bcc.n	8004726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800472e:	f7ff ffdf 	bl	80046f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004732:	f004 faf7 	bl	8008d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004736:	f7ff fadb 	bl	8003cf0 <main>
  bx  lr    
 800473a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800473c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004744:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8004748:	0800d0e0 	.word	0x0800d0e0
  ldr r2, =_sbss
 800474c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8004750:	20000e00 	.word	0x20000e00

08004754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004754:	e7fe      	b.n	8004754 <ADC_IRQHandler>
	...

08004758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004758:	b510      	push	{r4, lr}
 800475a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <HAL_InitTick+0x40>)
 800475e:	7818      	ldrb	r0, [r3, #0]
 8004760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004764:	fbb3 f3f0 	udiv	r3, r3, r0
 8004768:	4a0c      	ldr	r2, [pc, #48]	; (800479c <HAL_InitTick+0x44>)
 800476a:	6810      	ldr	r0, [r2, #0]
 800476c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004770:	f000 f8b0 	bl	80048d4 <HAL_SYSTICK_Config>
 8004774:	b968      	cbnz	r0, 8004792 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004776:	2c0f      	cmp	r4, #15
 8004778:	d901      	bls.n	800477e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800477a:	2001      	movs	r0, #1
 800477c:	e00a      	b.n	8004794 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800477e:	2200      	movs	r2, #0
 8004780:	4621      	mov	r1, r4
 8004782:	f04f 30ff 	mov.w	r0, #4294967295
 8004786:	f000 f85f 	bl	8004848 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_InitTick+0x48>)
 800478c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800478e:	2000      	movs	r0, #0
 8004790:	e000      	b.n	8004794 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8004792:	2001      	movs	r0, #1
}
 8004794:	bd10      	pop	{r4, pc}
 8004796:	bf00      	nop
 8004798:	20000024 	.word	0x20000024
 800479c:	20000020 	.word	0x20000020
 80047a0:	20000028 	.word	0x20000028

080047a4 <HAL_Init>:
{
 80047a4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_Init+0x30>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047b6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047be:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047c0:	2003      	movs	r0, #3
 80047c2:	f000 f82f 	bl	8004824 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80047c6:	2000      	movs	r0, #0
 80047c8:	f7ff ffc6 	bl	8004758 <HAL_InitTick>
  HAL_MspInit();
 80047cc:	f7ff fcb4 	bl	8004138 <HAL_MspInit>
}
 80047d0:	2000      	movs	r0, #0
 80047d2:	bd08      	pop	{r3, pc}
 80047d4:	40023c00 	.word	0x40023c00

080047d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80047d8:	4a03      	ldr	r2, [pc, #12]	; (80047e8 <HAL_IncTick+0x10>)
 80047da:	6811      	ldr	r1, [r2, #0]
 80047dc:	4b03      	ldr	r3, [pc, #12]	; (80047ec <HAL_IncTick+0x14>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	440b      	add	r3, r1
 80047e2:	6013      	str	r3, [r2, #0]
}
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000db0 	.word	0x20000db0
 80047ec:	20000024 	.word	0x20000024

080047f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80047f0:	4b01      	ldr	r3, [pc, #4]	; (80047f8 <HAL_GetTick+0x8>)
 80047f2:	6818      	ldr	r0, [r3, #0]
}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000db0 	.word	0x20000db0

080047fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047fc:	b538      	push	{r3, r4, r5, lr}
 80047fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7ff fff6 	bl	80047f0 <HAL_GetTick>
 8004804:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004806:	f1b4 3fff 	cmp.w	r4, #4294967295
 800480a:	d002      	beq.n	8004812 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <HAL_Delay+0x24>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004812:	f7ff ffed 	bl	80047f0 <HAL_GetTick>
 8004816:	1b40      	subs	r0, r0, r5
 8004818:	42a0      	cmp	r0, r4
 800481a:	d3fa      	bcc.n	8004812 <HAL_Delay+0x16>
  {
  }
}
 800481c:	bd38      	pop	{r3, r4, r5, pc}
 800481e:	bf00      	nop
 8004820:	20000024 	.word	0x20000024

08004824 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004824:	4a07      	ldr	r2, [pc, #28]	; (8004844 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004826:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004828:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800482c:	041b      	lsls	r3, r3, #16
 800482e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004830:	0200      	lsls	r0, r0, #8
 8004832:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004836:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800483c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004840:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004842:	4770      	bx	lr
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004848:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800484a:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_NVIC_SetPriority+0x68>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004852:	f1c3 0c07 	rsb	ip, r3, #7
 8004856:	f1bc 0f04 	cmp.w	ip, #4
 800485a:	bf28      	it	cs
 800485c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004860:	f103 0e04 	add.w	lr, r3, #4
 8004864:	f1be 0f06 	cmp.w	lr, #6
 8004868:	d918      	bls.n	800489c <HAL_NVIC_SetPriority+0x54>
 800486a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800486c:	f04f 3eff 	mov.w	lr, #4294967295
 8004870:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004874:	ea21 010c 	bic.w	r1, r1, ip
 8004878:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800487a:	fa0e f303 	lsl.w	r3, lr, r3
 800487e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004882:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004884:	2800      	cmp	r0, #0
 8004886:	db0b      	blt.n	80048a0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004888:	0109      	lsls	r1, r1, #4
 800488a:	b2c9      	uxtb	r1, r1
 800488c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004890:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004894:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004898:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800489c:	2300      	movs	r3, #0
 800489e:	e7e5      	b.n	800486c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a0:	f000 000f 	and.w	r0, r0, #15
 80048a4:	0109      	lsls	r1, r1, #4
 80048a6:	b2c9      	uxtb	r1, r1
 80048a8:	4b02      	ldr	r3, [pc, #8]	; (80048b4 <HAL_NVIC_SetPriority+0x6c>)
 80048aa:	5419      	strb	r1, [r3, r0]
 80048ac:	e7f4      	b.n	8004898 <HAL_NVIC_SetPriority+0x50>
 80048ae:	bf00      	nop
 80048b0:	e000ed00 	.word	0xe000ed00
 80048b4:	e000ed14 	.word	0xe000ed14

080048b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80048b8:	2800      	cmp	r0, #0
 80048ba:	db07      	blt.n	80048cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048bc:	f000 021f 	and.w	r2, r0, #31
 80048c0:	0940      	lsrs	r0, r0, #5
 80048c2:	2301      	movs	r3, #1
 80048c4:	4093      	lsls	r3, r2
 80048c6:	4a02      	ldr	r2, [pc, #8]	; (80048d0 <HAL_NVIC_EnableIRQ+0x18>)
 80048c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	e000e100 	.word	0xe000e100

080048d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d4:	3801      	subs	r0, #1
 80048d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80048da:	d20b      	bcs.n	80048f4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80048e0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e2:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <HAL_SYSTICK_Config+0x24>)
 80048e4:	21f0      	movs	r1, #240	; 0xf0
 80048e6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048ea:	2000      	movs	r0, #0
 80048ec:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048ee:	2207      	movs	r2, #7
 80048f0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80048f4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80048f6:	4770      	bx	lr
 80048f8:	e000ed00 	.word	0xe000ed00

080048fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004900:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8004902:	f7ff ff75 	bl	80047f0 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004906:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d006      	beq.n	800491e <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004914:	2300      	movs	r3, #0
 8004916:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 800491a:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 800491c:	bd70      	pop	{r4, r5, r6, pc}
 800491e:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	6813      	ldr	r3, [r2, #0]
 8004924:	f023 0316 	bic.w	r3, r3, #22
 8004928:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	6953      	ldr	r3, [r2, #20]
 800492e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004932:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004936:	b1e3      	cbz	r3, 8004972 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004938:	6822      	ldr	r2, [r4, #0]
 800493a:	6813      	ldr	r3, [r2, #0]
 800493c:	f023 0308 	bic.w	r3, r3, #8
 8004940:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	6813      	ldr	r3, [r2, #0]
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f013 0f01 	tst.w	r3, #1
 8004954:	d011      	beq.n	800497a <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004956:	f7ff ff4b 	bl	80047f0 <HAL_GetTick>
 800495a:	1b43      	subs	r3, r0, r5
 800495c:	2b05      	cmp	r3, #5
 800495e:	d9f5      	bls.n	800494c <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004960:	2320      	movs	r3, #32
 8004962:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004964:	2003      	movs	r0, #3
 8004966:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800496a:	2300      	movs	r3, #0
 800496c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004970:	e7d4      	b.n	800491c <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004972:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1df      	bne.n	8004938 <HAL_DMA_Abort+0x3c>
 8004978:	e7e3      	b.n	8004942 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800497a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800497c:	233f      	movs	r3, #63	; 0x3f
 800497e:	4093      	lsls	r3, r2
 8004980:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004982:	2301      	movs	r3, #1
 8004984:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004988:	2000      	movs	r0, #0
 800498a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 800498e:	e7c5      	b.n	800491c <HAL_DMA_Abort+0x20>

08004990 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004990:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d003      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800499e:	2001      	movs	r0, #1
 80049a0:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049a2:	2305      	movs	r3, #5
 80049a4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049a8:	6802      	ldr	r2, [r0, #0]
 80049aa:	6813      	ldr	r3, [r2, #0]
 80049ac:	f023 0301 	bic.w	r3, r3, #1
 80049b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049b2:	2000      	movs	r0, #0
}
 80049b4:	4770      	bx	lr
	...

080049b8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	f200 80d2 	bhi.w	8004b64 <HAL_GPIO_Init+0x1ac>
{
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	e060      	b.n	8004a88 <HAL_GPIO_Init+0xd0>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049c6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049c8:	005e      	lsls	r6, r3, #1
 80049ca:	2403      	movs	r4, #3
 80049cc:	40b4      	lsls	r4, r6
 80049ce:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049d2:	68cc      	ldr	r4, [r1, #12]
 80049d4:	40b4      	lsls	r4, r6
 80049d6:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80049d8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049da:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049dc:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049e0:	684c      	ldr	r4, [r1, #4]
 80049e2:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80049e6:	409a      	lsls	r2, r3
 80049e8:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80049ea:	6042      	str	r2, [r0, #4]
 80049ec:	e05a      	b.n	8004aa4 <HAL_GPIO_Init+0xec>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049ee:	08dc      	lsrs	r4, r3, #3
 80049f0:	3408      	adds	r4, #8
 80049f2:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049f6:	f003 0207 	and.w	r2, r3, #7
 80049fa:	0095      	lsls	r5, r2, #2
 80049fc:	220f      	movs	r2, #15
 80049fe:	40aa      	lsls	r2, r5
 8004a00:	ea26 0e02 	bic.w	lr, r6, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a04:	690a      	ldr	r2, [r1, #16]
 8004a06:	40aa      	lsls	r2, r5
 8004a08:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004a0c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8004a10:	e05c      	b.n	8004acc <HAL_GPIO_Init+0x114>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a12:	2204      	movs	r2, #4
 8004a14:	e000      	b.n	8004a18 <HAL_GPIO_Init+0x60>
 8004a16:	2200      	movs	r2, #0
 8004a18:	fa02 f20e 	lsl.w	r2, r2, lr
 8004a1c:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a1e:	3402      	adds	r4, #2
 8004a20:	4d51      	ldr	r5, [pc, #324]	; (8004b68 <HAL_GPIO_Init+0x1b0>)
 8004a22:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a26:	4a51      	ldr	r2, [pc, #324]	; (8004b6c <HAL_GPIO_Init+0x1b4>)
 8004a28:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004a2a:	ea6f 020c 	mvn.w	r2, ip
 8004a2e:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a32:	684e      	ldr	r6, [r1, #4]
 8004a34:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8004a38:	d001      	beq.n	8004a3e <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8004a3a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8004a3e:	4c4b      	ldr	r4, [pc, #300]	; (8004b6c <HAL_GPIO_Init+0x1b4>)
 8004a40:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8004a42:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004a44:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a48:	684e      	ldr	r6, [r1, #4]
 8004a4a:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8004a4e:	d001      	beq.n	8004a54 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 8004a50:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8004a54:	4c45      	ldr	r4, [pc, #276]	; (8004b6c <HAL_GPIO_Init+0x1b4>)
 8004a56:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a58:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004a5a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a5e:	684e      	ldr	r6, [r1, #4]
 8004a60:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8004a64:	d001      	beq.n	8004a6a <HAL_GPIO_Init+0xb2>
        {
          temp |= iocurrent;
 8004a66:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8004a6a:	4c40      	ldr	r4, [pc, #256]	; (8004b6c <HAL_GPIO_Init+0x1b4>)
 8004a6c:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8004a6e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004a70:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a72:	684d      	ldr	r5, [r1, #4]
 8004a74:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8004a78:	d001      	beq.n	8004a7e <HAL_GPIO_Init+0xc6>
        {
          temp |= iocurrent;
 8004a7a:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8004a7e:	4c3b      	ldr	r4, [pc, #236]	; (8004b6c <HAL_GPIO_Init+0x1b4>)
 8004a80:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a82:	3301      	adds	r3, #1
 8004a84:	2b0f      	cmp	r3, #15
 8004a86:	d86b      	bhi.n	8004b60 <HAL_GPIO_Init+0x1a8>
    ioposition = 0x01U << position;
 8004a88:	2201      	movs	r2, #1
 8004a8a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a8c:	680c      	ldr	r4, [r1, #0]
 8004a8e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8004a92:	ea32 0404 	bics.w	r4, r2, r4
 8004a96:	d1f4      	bne.n	8004a82 <HAL_GPIO_Init+0xca>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a98:	684c      	ldr	r4, [r1, #4]
 8004a9a:	f004 0403 	and.w	r4, r4, #3
 8004a9e:	3c01      	subs	r4, #1
 8004aa0:	2c01      	cmp	r4, #1
 8004aa2:	d990      	bls.n	80049c6 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aa4:	684a      	ldr	r2, [r1, #4]
 8004aa6:	f002 0203 	and.w	r2, r2, #3
 8004aaa:	2a03      	cmp	r2, #3
 8004aac:	d009      	beq.n	8004ac2 <HAL_GPIO_Init+0x10a>
        temp = GPIOx->PUPDR;
 8004aae:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ab0:	005d      	lsls	r5, r3, #1
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	40aa      	lsls	r2, r5
 8004ab6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aba:	688a      	ldr	r2, [r1, #8]
 8004abc:	40aa      	lsls	r2, r5
 8004abe:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8004ac0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac2:	684a      	ldr	r2, [r1, #4]
 8004ac4:	f002 0203 	and.w	r2, r2, #3
 8004ac8:	2a02      	cmp	r2, #2
 8004aca:	d090      	beq.n	80049ee <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8004acc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ace:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	fa02 f20e 	lsl.w	r2, r2, lr
 8004ad8:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004adc:	684a      	ldr	r2, [r1, #4]
 8004ade:	f002 0203 	and.w	r2, r2, #3
 8004ae2:	fa02 f20e 	lsl.w	r2, r2, lr
 8004ae6:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004ae8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aea:	684a      	ldr	r2, [r1, #4]
 8004aec:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8004af0:	d0c7      	beq.n	8004a82 <HAL_GPIO_Init+0xca>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af2:	2200      	movs	r2, #0
 8004af4:	9201      	str	r2, [sp, #4]
 8004af6:	4a1e      	ldr	r2, [pc, #120]	; (8004b70 <HAL_GPIO_Init+0x1b8>)
 8004af8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004afa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004afe:	6454      	str	r4, [r2, #68]	; 0x44
 8004b00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004b06:	9201      	str	r2, [sp, #4]
 8004b08:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004b0a:	089c      	lsrs	r4, r3, #2
 8004b0c:	1ca5      	adds	r5, r4, #2
 8004b0e:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <HAL_GPIO_Init+0x1b0>)
 8004b10:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b14:	f003 0203 	and.w	r2, r3, #3
 8004b18:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8004b1c:	220f      	movs	r2, #15
 8004b1e:	fa02 f20e 	lsl.w	r2, r2, lr
 8004b22:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b26:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <HAL_GPIO_Init+0x1bc>)
 8004b28:	4290      	cmp	r0, r2
 8004b2a:	f43f af74 	beq.w	8004a16 <HAL_GPIO_Init+0x5e>
 8004b2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b32:	4290      	cmp	r0, r2
 8004b34:	d00e      	beq.n	8004b54 <HAL_GPIO_Init+0x19c>
 8004b36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b3a:	4290      	cmp	r0, r2
 8004b3c:	d00c      	beq.n	8004b58 <HAL_GPIO_Init+0x1a0>
 8004b3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b42:	4290      	cmp	r0, r2
 8004b44:	d00a      	beq.n	8004b5c <HAL_GPIO_Init+0x1a4>
 8004b46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b4a:	4290      	cmp	r0, r2
 8004b4c:	f43f af61 	beq.w	8004a12 <HAL_GPIO_Init+0x5a>
 8004b50:	2207      	movs	r2, #7
 8004b52:	e761      	b.n	8004a18 <HAL_GPIO_Init+0x60>
 8004b54:	2201      	movs	r2, #1
 8004b56:	e75f      	b.n	8004a18 <HAL_GPIO_Init+0x60>
 8004b58:	2202      	movs	r2, #2
 8004b5a:	e75d      	b.n	8004a18 <HAL_GPIO_Init+0x60>
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	e75b      	b.n	8004a18 <HAL_GPIO_Init+0x60>
      }
    }
  }
}
 8004b60:	b002      	add	sp, #8
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40013800 	.word	0x40013800
 8004b6c:	40013c00 	.word	0x40013c00
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40020000 	.word	0x40020000

08004b78 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b78:	6903      	ldr	r3, [r0, #16]
 8004b7a:	4219      	tst	r1, r3
 8004b7c:	d001      	beq.n	8004b82 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004b7e:	2001      	movs	r0, #1
 8004b80:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b82:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004b84:	4770      	bx	lr

08004b86 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b86:	b10a      	cbz	r2, 8004b8c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b88:	6181      	str	r1, [r0, #24]
 8004b8a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b8c:	0409      	lsls	r1, r1, #16
 8004b8e:	6181      	str	r1, [r0, #24]
  }
}
 8004b90:	4770      	bx	lr

08004b92 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004b92:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b94:	ea01 0203 	and.w	r2, r1, r3
 8004b98:	ea21 0103 	bic.w	r1, r1, r3
 8004b9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ba0:	6181      	str	r1, [r0, #24]
}
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ba4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ba6:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	4203      	tst	r3, r0
 8004bac:	d100      	bne.n	8004bb0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004bae:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bb0:	4b02      	ldr	r3, [pc, #8]	; (8004bbc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004bb2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bb4:	f7fe fabe 	bl	8003134 <HAL_GPIO_EXTI_Callback>
}
 8004bb8:	e7f9      	b.n	8004bae <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004bba:	bf00      	nop
 8004bbc:	40013c00 	.word	0x40013c00

08004bc0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bc0:	6803      	ldr	r3, [r0, #0]
 8004bc2:	695a      	ldr	r2, [r3, #20]
 8004bc4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004bc8:	d101      	bne.n	8004bce <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8004bca:	2000      	movs	r0, #0
}
 8004bcc:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd2:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bde:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004be4:	f042 0204 	orr.w	r2, r2, #4
 8004be8:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004bea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8004bee:	2001      	movs	r0, #1
 8004bf0:	4770      	bx	lr

08004bf2 <I2C_WaitOnFlagUntilTimeout>:
{
 8004bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf6:	4607      	mov	r7, r0
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	4690      	mov	r8, r2
 8004bfc:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bfe:	e024      	b.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c00:	f7ff fdf6 	bl	80047f0 <HAL_GetTick>
 8004c04:	9b06      	ldr	r3, [sp, #24]
 8004c06:	1ac0      	subs	r0, r0, r3
 8004c08:	42b0      	cmp	r0, r6
 8004c0a:	d800      	bhi.n	8004c0e <I2C_WaitOnFlagUntilTimeout+0x1c>
 8004c0c:	b9ee      	cbnz	r6, 8004c4a <I2C_WaitOnFlagUntilTimeout+0x58>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c12:	2220      	movs	r2, #32
 8004c14:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c18:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c1e:	f042 0220 	orr.w	r2, r2, #32
 8004c22:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004c24:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8004c28:	2001      	movs	r0, #1
 8004c2a:	e01e      	b.n	8004c6a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699c      	ldr	r4, [r3, #24]
 8004c30:	ea25 0c04 	bic.w	ip, r5, r4
 8004c34:	fa1f fc8c 	uxth.w	ip, ip
 8004c38:	fabc fc8c 	clz	ip, ip
 8004c3c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8004c40:	45e0      	cmp	r8, ip
 8004c42:	d111      	bne.n	8004c68 <I2C_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8004c44:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004c48:	d1da      	bne.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c4a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d1ec      	bne.n	8004c2c <I2C_WaitOnFlagUntilTimeout+0x3a>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	ea25 0c03 	bic.w	ip, r5, r3
 8004c5a:	fa1f fc8c 	uxth.w	ip, ip
 8004c5e:	fabc fc8c 	clz	ip, ip
 8004c62:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8004c66:	e7eb      	b.n	8004c40 <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004c68:	2000      	movs	r0, #0
}
 8004c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c72:	4605      	mov	r5, r0
 8004c74:	460e      	mov	r6, r1
 8004c76:	4617      	mov	r7, r2
 8004c78:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c7a:	e03d      	b.n	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c82:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c8a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c90:	2220      	movs	r2, #32
 8004c92:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c96:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c9a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004c9c:	f042 0204 	orr.w	r2, r2, #4
 8004ca0:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004ca2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	e034      	b.n	8004d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7ff fda1 	bl	80047f0 <HAL_GetTick>
 8004cae:	eba0 0008 	sub.w	r0, r0, r8
 8004cb2:	42b8      	cmp	r0, r7
 8004cb4:	d800      	bhi.n	8004cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8004cb6:	b9ff      	cbnz	r7, 8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004cc8:	f042 0220 	orr.w	r2, r2, #32
 8004ccc:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004cce:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	e01e      	b.n	8004d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cd6:	682b      	ldr	r3, [r5, #0]
 8004cd8:	699c      	ldr	r4, [r3, #24]
 8004cda:	ea26 0404 	bic.w	r4, r6, r4
 8004cde:	b2a4      	uxth	r4, r4
 8004ce0:	3c00      	subs	r4, #0
 8004ce2:	bf18      	it	ne
 8004ce4:	2401      	movne	r4, #1
 8004ce6:	b1a4      	cbz	r4, 8004d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	695a      	ldr	r2, [r3, #20]
 8004cec:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004cf0:	d1c4      	bne.n	8004c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8004cf2:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004cf6:	d1d8      	bne.n	8004caa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cf8:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d1ea      	bne.n	8004cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	695c      	ldr	r4, [r3, #20]
 8004d04:	ea26 0404 	bic.w	r4, r6, r4
 8004d08:	b2a4      	uxth	r4, r4
 8004d0a:	3c00      	subs	r4, #0
 8004d0c:	bf18      	it	ne
 8004d0e:	2401      	movne	r4, #1
 8004d10:	e7e9      	b.n	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8004d12:	2000      	movs	r0, #0
}
 8004d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d18 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	460d      	mov	r5, r1
 8004d1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d28:	d11c      	bne.n	8004d64 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7ff ff48 	bl	8004bc0 <I2C_IsAcknowledgeFailed>
 8004d30:	b9d0      	cbnz	r0, 8004d68 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004d32:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004d36:	d0f3      	beq.n	8004d20 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d38:	f7ff fd5a 	bl	80047f0 <HAL_GetTick>
 8004d3c:	1b80      	subs	r0, r0, r6
 8004d3e:	42a8      	cmp	r0, r5
 8004d40:	d801      	bhi.n	8004d46 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	d1ec      	bne.n	8004d20 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d56:	f042 0220 	orr.w	r2, r2, #32
 8004d5a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004d5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004d60:	2001      	movs	r0, #1
 8004d62:	e000      	b.n	8004d66 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004d64:	2000      	movs	r0, #0
}
 8004d66:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004d68:	2001      	movs	r0, #1
 8004d6a:	e7fc      	b.n	8004d66 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08004d6c <I2C_RequestMemoryWrite>:
{
 8004d6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d70:	b085      	sub	sp, #20
 8004d72:	4604      	mov	r4, r0
 8004d74:	460d      	mov	r5, r1
 8004d76:	4691      	mov	r9, r2
 8004d78:	461f      	mov	r7, r3
 8004d7a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004d7e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d80:	6803      	ldr	r3, [r0, #0]
 8004d82:	6819      	ldr	r1, [r3, #0]
 8004d84:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004d88:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d8a:	9600      	str	r6, [sp, #0]
 8004d8c:	4643      	mov	r3, r8
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d94:	f7ff ff2d 	bl	8004bf2 <I2C_WaitOnFlagUntilTimeout>
 8004d98:	b960      	cbnz	r0, 8004db4 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004da0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004da2:	4633      	mov	r3, r6
 8004da4:	4642      	mov	r2, r8
 8004da6:	4926      	ldr	r1, [pc, #152]	; (8004e40 <I2C_RequestMemoryWrite+0xd4>)
 8004da8:	4620      	mov	r0, r4
 8004daa:	f7ff ff60 	bl	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dae:	b168      	cbz	r0, 8004dcc <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8004db0:	2001      	movs	r0, #1
 8004db2:	e008      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004dbc:	d002      	beq.n	8004dc4 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dc2:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004dc4:	2003      	movs	r0, #3
}
 8004dc6:	b005      	add	sp, #20
 8004dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9303      	str	r3, [sp, #12]
 8004dd0:	6823      	ldr	r3, [r4, #0]
 8004dd2:	695a      	ldr	r2, [r3, #20]
 8004dd4:	9203      	str	r2, [sp, #12]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	9303      	str	r3, [sp, #12]
 8004dda:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ddc:	4632      	mov	r2, r6
 8004dde:	4641      	mov	r1, r8
 8004de0:	4620      	mov	r0, r4
 8004de2:	f7ff ff99 	bl	8004d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004de6:	b930      	cbnz	r0, 8004df6 <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004de8:	2f01      	cmp	r7, #1
 8004dea:	d10f      	bne.n	8004e0c <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	fa5f f689 	uxtb.w	r6, r9
 8004df2:	611e      	str	r6, [r3, #16]
 8004df4:	e7e7      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d001      	beq.n	8004e00 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8004dfc:	2001      	movs	r0, #1
 8004dfe:	e7e2      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	6813      	ldr	r3, [r2, #0]
 8004e04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e08:	6013      	str	r3, [r2, #0]
 8004e0a:	e7f7      	b.n	8004dfc <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8004e12:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e14:	4632      	mov	r2, r6
 8004e16:	4641      	mov	r1, r8
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f7ff ff7d 	bl	8004d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e1e:	b920      	cbnz	r0, 8004e2a <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	fa5f f689 	uxtb.w	r6, r9
 8004e26:	611e      	str	r6, [r3, #16]
 8004e28:	e7cd      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d001      	beq.n	8004e34 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8004e30:	2001      	movs	r0, #1
 8004e32:	e7c8      	b.n	8004dc6 <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	6822      	ldr	r2, [r4, #0]
 8004e36:	6813      	ldr	r3, [r2, #0]
 8004e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	e7f7      	b.n	8004e30 <I2C_RequestMemoryWrite+0xc4>
 8004e40:	00010002 	.word	0x00010002

08004e44 <I2C_RequestMemoryRead>:
{
 8004e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	460d      	mov	r5, r1
 8004e4e:	4616      	mov	r6, r2
 8004e50:	4699      	mov	r9, r3
 8004e52:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004e54:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e58:	6802      	ldr	r2, [r0, #0]
 8004e5a:	6813      	ldr	r3, [r2, #0]
 8004e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e60:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e62:	6803      	ldr	r3, [r0, #0]
 8004e64:	6819      	ldr	r1, [r3, #0]
 8004e66:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004e6a:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e6c:	f8cd 8000 	str.w	r8, [sp]
 8004e70:	463b      	mov	r3, r7
 8004e72:	2200      	movs	r2, #0
 8004e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e78:	f7ff febb 	bl	8004bf2 <I2C_WaitOnFlagUntilTimeout>
 8004e7c:	b970      	cbnz	r0, 8004e9c <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e7e:	fa5f fa85 	uxtb.w	sl, r5
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004e88:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e8a:	4643      	mov	r3, r8
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4941      	ldr	r1, [pc, #260]	; (8004f94 <I2C_RequestMemoryRead+0x150>)
 8004e90:	4620      	mov	r0, r4
 8004e92:	f7ff feec 	bl	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e96:	b168      	cbz	r0, 8004eb4 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8004e98:	2001      	movs	r0, #1
 8004e9a:	e008      	b.n	8004eae <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004ea4:	d002      	beq.n	8004eac <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eaa:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004eac:	2003      	movs	r0, #3
}
 8004eae:	b004      	add	sp, #16
 8004eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	9303      	str	r3, [sp, #12]
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	695a      	ldr	r2, [r3, #20]
 8004ebc:	9203      	str	r2, [sp, #12]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	9303      	str	r3, [sp, #12]
 8004ec2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	4639      	mov	r1, r7
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff ff25 	bl	8004d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ece:	b980      	cbnz	r0, 8004ef2 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ed0:	f1b9 0f01 	cmp.w	r9, #1
 8004ed4:	d118      	bne.n	8004f08 <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	b2f6      	uxtb	r6, r6
 8004eda:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004edc:	4642      	mov	r2, r8
 8004ede:	4639      	mov	r1, r7
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f7ff ff19 	bl	8004d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee6:	b368      	cbz	r0, 8004f44 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d024      	beq.n	8004f38 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8004eee:	2001      	movs	r0, #1
 8004ef0:	e7dd      	b.n	8004eae <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d001      	beq.n	8004efc <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8004ef8:	2001      	movs	r0, #1
 8004efa:	e7d8      	b.n	8004eae <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e7f7      	b.n	8004ef8 <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	0a32      	lsrs	r2, r6, #8
 8004f0c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0e:	4642      	mov	r2, r8
 8004f10:	4639      	mov	r1, r7
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7ff ff00 	bl	8004d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f18:	b918      	cbnz	r0, 8004f22 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	b2f6      	uxtb	r6, r6
 8004f1e:	611e      	str	r6, [r3, #16]
 8004f20:	e7dc      	b.n	8004edc <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d001      	beq.n	8004f2c <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8004f28:	2001      	movs	r0, #1
 8004f2a:	e7c0      	b.n	8004eae <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2c:	6822      	ldr	r2, [r4, #0]
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e7f7      	b.n	8004f28 <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	6813      	ldr	r3, [r2, #0]
 8004f3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	e7d4      	b.n	8004eee <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f4c:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f4e:	f8cd 8000 	str.w	r8, [sp]
 8004f52:	463b      	mov	r3, r7
 8004f54:	2200      	movs	r2, #0
 8004f56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f7ff fe49 	bl	8004bf2 <I2C_WaitOnFlagUntilTimeout>
 8004f60:	b968      	cbnz	r0, 8004f7e <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f62:	6822      	ldr	r2, [r4, #0]
 8004f64:	f04a 0301 	orr.w	r3, sl, #1
 8004f68:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f6a:	4643      	mov	r3, r8
 8004f6c:	463a      	mov	r2, r7
 8004f6e:	4909      	ldr	r1, [pc, #36]	; (8004f94 <I2C_RequestMemoryRead+0x150>)
 8004f70:	4620      	mov	r0, r4
 8004f72:	f7ff fe7c 	bl	8004c6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d099      	beq.n	8004eae <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	e797      	b.n	8004eae <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f86:	d002      	beq.n	8004f8e <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f8c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004f8e:	2003      	movs	r0, #3
 8004f90:	e78d      	b.n	8004eae <I2C_RequestMemoryRead+0x6a>
 8004f92:	bf00      	nop
 8004f94:	00010002 	.word	0x00010002

08004f98 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004f98:	b570      	push	{r4, r5, r6, lr}
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	460d      	mov	r5, r1
 8004f9e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f013 0f04 	tst.w	r3, #4
 8004fa8:	d11c      	bne.n	8004fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004faa:	4620      	mov	r0, r4
 8004fac:	f7ff fe08 	bl	8004bc0 <I2C_IsAcknowledgeFailed>
 8004fb0:	b9d0      	cbnz	r0, 8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004fb6:	d0f3      	beq.n	8004fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb8:	f7ff fc1a 	bl	80047f0 <HAL_GetTick>
 8004fbc:	1b80      	subs	r0, r0, r6
 8004fbe:	42a8      	cmp	r0, r5
 8004fc0:	d801      	bhi.n	8004fc6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004fc2:	2d00      	cmp	r5, #0
 8004fc4:	d1ec      	bne.n	8004fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004fd6:	f042 0220 	orr.w	r2, r2, #32
 8004fda:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004fdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	e000      	b.n	8004fe6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004fe4:	2000      	movs	r0, #0
}
 8004fe6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004fe8:	2001      	movs	r0, #1
 8004fea:	e7fc      	b.n	8004fe6 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08004fec <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	4605      	mov	r5, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	6959      	ldr	r1, [r3, #20]
 8004ff8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ffc:	d129      	bne.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ffe:	6959      	ldr	r1, [r3, #20]
 8005000:	f011 0f10 	tst.w	r1, #16
 8005004:	d115      	bne.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005006:	f7ff fbf3 	bl	80047f0 <HAL_GetTick>
 800500a:	1b80      	subs	r0, r0, r6
 800500c:	42a0      	cmp	r0, r4
 800500e:	d801      	bhi.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8005010:	2c00      	cmp	r4, #0
 8005012:	d1ef      	bne.n	8004ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005014:	2300      	movs	r3, #0
 8005016:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005018:	2220      	movs	r2, #32
 800501a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005022:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005024:	f042 0220 	orr.w	r2, r2, #32
 8005028:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800502a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800502e:	2001      	movs	r0, #1
}
 8005030:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005032:	f06f 0210 	mvn.w	r2, #16
 8005036:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005038:	2300      	movs	r3, #0
 800503a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800503c:	2220      	movs	r2, #32
 800503e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005042:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005046:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005048:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800504a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800504e:	2001      	movs	r0, #1
 8005050:	e7ee      	b.n	8005030 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8005052:	2000      	movs	r0, #0
 8005054:	e7ec      	b.n	8005030 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08005058 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005058:	2800      	cmp	r0, #0
 800505a:	f000 80cc 	beq.w	80051f6 <HAL_I2C_Init+0x19e>
{
 800505e:	b570      	push	{r4, r5, r6, lr}
 8005060:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005062:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005066:	2b00      	cmp	r3, #0
 8005068:	d077      	beq.n	800515a <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800506a:	2324      	movs	r3, #36	; 0x24
 800506c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005070:	6822      	ldr	r2, [r4, #0]
 8005072:	6813      	ldr	r3, [r2, #0]
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800507a:	6822      	ldr	r2, [r4, #0]
 800507c:	6813      	ldr	r3, [r2, #0]
 800507e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005082:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	6813      	ldr	r3, [r2, #0]
 8005088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800508c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800508e:	f000 fde9 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005092:	6862      	ldr	r2, [r4, #4]
 8005094:	4b5a      	ldr	r3, [pc, #360]	; (8005200 <HAL_I2C_Init+0x1a8>)
 8005096:	429a      	cmp	r2, r3
 8005098:	d864      	bhi.n	8005164 <HAL_I2C_Init+0x10c>
 800509a:	4b5a      	ldr	r3, [pc, #360]	; (8005204 <HAL_I2C_Init+0x1ac>)
 800509c:	4298      	cmp	r0, r3
 800509e:	bf8c      	ite	hi
 80050a0:	2300      	movhi	r3, #0
 80050a2:	2301      	movls	r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f040 80a8 	bne.w	80051fa <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80050aa:	4957      	ldr	r1, [pc, #348]	; (8005208 <HAL_I2C_Init+0x1b0>)
 80050ac:	fba1 3100 	umull	r3, r1, r1, r0
 80050b0:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050b2:	6825      	ldr	r5, [r4, #0]
 80050b4:	686a      	ldr	r2, [r5, #4]
 80050b6:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80050ba:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80050be:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050c0:	6821      	ldr	r1, [r4, #0]
 80050c2:	6a0a      	ldr	r2, [r1, #32]
 80050c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80050c8:	6866      	ldr	r6, [r4, #4]
 80050ca:	4d4d      	ldr	r5, [pc, #308]	; (8005200 <HAL_I2C_Init+0x1a8>)
 80050cc:	42ae      	cmp	r6, r5
 80050ce:	d84f      	bhi.n	8005170 <HAL_I2C_Init+0x118>
 80050d0:	3301      	adds	r3, #1
 80050d2:	4313      	orrs	r3, r2
 80050d4:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050d6:	6821      	ldr	r1, [r4, #0]
 80050d8:	69ca      	ldr	r2, [r1, #28]
 80050da:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 80050de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050e2:	6866      	ldr	r6, [r4, #4]
 80050e4:	4b46      	ldr	r3, [pc, #280]	; (8005200 <HAL_I2C_Init+0x1a8>)
 80050e6:	429e      	cmp	r6, r3
 80050e8:	d84c      	bhi.n	8005184 <HAL_I2C_Init+0x12c>
 80050ea:	1e43      	subs	r3, r0, #1
 80050ec:	0076      	lsls	r6, r6, #1
 80050ee:	fbb3 f3f6 	udiv	r3, r3, r6
 80050f2:	3301      	adds	r3, #1
 80050f4:	f640 70fc 	movw	r0, #4092	; 0xffc
 80050f8:	4203      	tst	r3, r0
 80050fa:	d078      	beq.n	80051ee <HAL_I2C_Init+0x196>
 80050fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005100:	4313      	orrs	r3, r2
 8005102:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005104:	6821      	ldr	r1, [r4, #0]
 8005106:	680b      	ldr	r3, [r1, #0]
 8005108:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800510c:	69e2      	ldr	r2, [r4, #28]
 800510e:	6a20      	ldr	r0, [r4, #32]
 8005110:	4302      	orrs	r2, r0
 8005112:	4313      	orrs	r3, r2
 8005114:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005116:	6821      	ldr	r1, [r4, #0]
 8005118:	688b      	ldr	r3, [r1, #8]
 800511a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800511e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005122:	6922      	ldr	r2, [r4, #16]
 8005124:	68e0      	ldr	r0, [r4, #12]
 8005126:	4302      	orrs	r2, r0
 8005128:	4313      	orrs	r3, r2
 800512a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800512c:	6821      	ldr	r1, [r4, #0]
 800512e:	68cb      	ldr	r3, [r1, #12]
 8005130:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005134:	6962      	ldr	r2, [r4, #20]
 8005136:	69a0      	ldr	r0, [r4, #24]
 8005138:	4302      	orrs	r2, r0
 800513a:	4313      	orrs	r3, r2
 800513c:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800513e:	6822      	ldr	r2, [r4, #0]
 8005140:	6813      	ldr	r3, [r2, #0]
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005148:	2000      	movs	r0, #0
 800514a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800514c:	2320      	movs	r3, #32
 800514e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005152:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005154:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8005158:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800515a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800515e:	f7ff f807 	bl	8004170 <HAL_I2C_MspInit>
 8005162:	e782      	b.n	800506a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005164:	4b29      	ldr	r3, [pc, #164]	; (800520c <HAL_I2C_Init+0x1b4>)
 8005166:	4298      	cmp	r0, r3
 8005168:	bf8c      	ite	hi
 800516a:	2300      	movhi	r3, #0
 800516c:	2301      	movls	r3, #1
 800516e:	e799      	b.n	80050a4 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005170:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8005174:	fb05 f303 	mul.w	r3, r5, r3
 8005178:	4d25      	ldr	r5, [pc, #148]	; (8005210 <HAL_I2C_Init+0x1b8>)
 800517a:	fba5 5303 	umull	r5, r3, r5, r3
 800517e:	099b      	lsrs	r3, r3, #6
 8005180:	3301      	adds	r3, #1
 8005182:	e7a6      	b.n	80050d2 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005184:	68a3      	ldr	r3, [r4, #8]
 8005186:	b9bb      	cbnz	r3, 80051b8 <HAL_I2C_Init+0x160>
 8005188:	1e45      	subs	r5, r0, #1
 800518a:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 800518e:	fbb5 f5fc 	udiv	r5, r5, ip
 8005192:	3501      	adds	r5, #1
 8005194:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8005198:	fab5 f585 	clz	r5, r5
 800519c:	096d      	lsrs	r5, r5, #5
 800519e:	bb45      	cbnz	r5, 80051f2 <HAL_I2C_Init+0x19a>
 80051a0:	b9c3      	cbnz	r3, 80051d4 <HAL_I2C_Init+0x17c>
 80051a2:	3801      	subs	r0, #1
 80051a4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80051a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ac:	3301      	adds	r3, #1
 80051ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b6:	e7a3      	b.n	8005100 <HAL_I2C_Init+0xa8>
 80051b8:	1e45      	subs	r5, r0, #1
 80051ba:	eb06 0c86 	add.w	ip, r6, r6, lsl #2
 80051be:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80051c2:	fbb5 f5fc 	udiv	r5, r5, ip
 80051c6:	3501      	adds	r5, #1
 80051c8:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80051cc:	fab5 f585 	clz	r5, r5
 80051d0:	096d      	lsrs	r5, r5, #5
 80051d2:	e7e4      	b.n	800519e <HAL_I2C_Init+0x146>
 80051d4:	3801      	subs	r0, #1
 80051d6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80051da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051de:	fbb0 f3f3 	udiv	r3, r0, r3
 80051e2:	3301      	adds	r3, #1
 80051e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ec:	e788      	b.n	8005100 <HAL_I2C_Init+0xa8>
 80051ee:	2304      	movs	r3, #4
 80051f0:	e786      	b.n	8005100 <HAL_I2C_Init+0xa8>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e784      	b.n	8005100 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80051f6:	2001      	movs	r0, #1
}
 80051f8:	4770      	bx	lr
    return HAL_ERROR;
 80051fa:	2001      	movs	r0, #1
 80051fc:	e7ac      	b.n	8005158 <HAL_I2C_Init+0x100>
 80051fe:	bf00      	nop
 8005200:	000186a0 	.word	0x000186a0
 8005204:	001e847f 	.word	0x001e847f
 8005208:	431bde83 	.word	0x431bde83
 800520c:	003d08ff 	.word	0x003d08ff
 8005210:	10624dd3 	.word	0x10624dd3

08005214 <HAL_I2C_Mem_Write>:
{
 8005214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005218:	b083      	sub	sp, #12
 800521a:	4604      	mov	r4, r0
 800521c:	460f      	mov	r7, r1
 800521e:	4690      	mov	r8, r2
 8005220:	4699      	mov	r9, r3
 8005222:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005224:	f7ff fae4 	bl	80047f0 <HAL_GetTick>
 8005228:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800522a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800522e:	b2c0      	uxtb	r0, r0
 8005230:	2820      	cmp	r0, #32
 8005232:	d003      	beq.n	800523c <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8005234:	2002      	movs	r0, #2
}
 8005236:	b003      	add	sp, #12
 8005238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800523c:	9500      	str	r5, [sp, #0]
 800523e:	2319      	movs	r3, #25
 8005240:	2201      	movs	r2, #1
 8005242:	494b      	ldr	r1, [pc, #300]	; (8005370 <HAL_I2C_Mem_Write+0x15c>)
 8005244:	4620      	mov	r0, r4
 8005246:	f7ff fcd4 	bl	8004bf2 <I2C_WaitOnFlagUntilTimeout>
 800524a:	2800      	cmp	r0, #0
 800524c:	f040 8089 	bne.w	8005362 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8005250:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005254:	2b01      	cmp	r3, #1
 8005256:	f000 8086 	beq.w	8005366 <HAL_I2C_Mem_Write+0x152>
 800525a:	2301      	movs	r3, #1
 800525c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	f012 0f01 	tst.w	r2, #1
 8005268:	d103      	bne.n	8005272 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005272:	6822      	ldr	r2, [r4, #0]
 8005274:	6813      	ldr	r3, [r2, #0]
 8005276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800527c:	2321      	movs	r3, #33	; 0x21
 800527e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005282:	2340      	movs	r3, #64	; 0x40
 8005284:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005288:	2300      	movs	r3, #0
 800528a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800528c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800528e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005290:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8005294:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005296:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005298:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800529a:	4b36      	ldr	r3, [pc, #216]	; (8005374 <HAL_I2C_Mem_Write+0x160>)
 800529c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800529e:	9501      	str	r5, [sp, #4]
 80052a0:	9600      	str	r6, [sp, #0]
 80052a2:	464b      	mov	r3, r9
 80052a4:	4642      	mov	r2, r8
 80052a6:	4639      	mov	r1, r7
 80052a8:	4620      	mov	r0, r4
 80052aa:	f7ff fd5f 	bl	8004d6c <I2C_RequestMemoryWrite>
 80052ae:	2800      	cmp	r0, #0
 80052b0:	d15b      	bne.n	800536a <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80052b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d035      	beq.n	8005324 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b8:	462a      	mov	r2, r5
 80052ba:	4631      	mov	r1, r6
 80052bc:	4620      	mov	r0, r4
 80052be:	f7ff fd2b 	bl	8004d18 <I2C_WaitOnTXEFlagUntilTimeout>
 80052c2:	bb20      	cbnz	r0, 800530e <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	7812      	ldrb	r2, [r2, #0]
 80052ca:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80052cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052ce:	1c53      	adds	r3, r2, #1
 80052d0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80052d2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80052d4:	3901      	subs	r1, #1
 80052d6:	b289      	uxth	r1, r1
 80052d8:	8521      	strh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80052da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	6958      	ldr	r0, [r3, #20]
 80052e8:	f010 0f04 	tst.w	r0, #4
 80052ec:	d0e1      	beq.n	80052b2 <HAL_I2C_Mem_Write+0x9e>
 80052ee:	2900      	cmp	r1, #0
 80052f0:	d0df      	beq.n	80052b2 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052f2:	7852      	ldrb	r2, [r2, #1]
 80052f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80052f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052f8:	3301      	adds	r3, #1
 80052fa:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80052fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005302:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29b      	uxth	r3, r3
 800530a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800530c:	e7d1      	b.n	80052b2 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800530e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005310:	2b04      	cmp	r3, #4
 8005312:	d001      	beq.n	8005318 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8005314:	2001      	movs	r0, #1
 8005316:	e78e      	b.n	8005236 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005318:	6822      	ldr	r2, [r4, #0]
 800531a:	6813      	ldr	r3, [r2, #0]
 800531c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e7f7      	b.n	8005314 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005324:	462a      	mov	r2, r5
 8005326:	4631      	mov	r1, r6
 8005328:	4620      	mov	r0, r4
 800532a:	f7ff fe35 	bl	8004f98 <I2C_WaitOnBTFFlagUntilTimeout>
 800532e:	b150      	cbz	r0, 8005346 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005330:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005332:	2b04      	cmp	r3, #4
 8005334:	d001      	beq.n	800533a <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8005336:	2001      	movs	r0, #1
 8005338:	e77d      	b.n	8005236 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	6813      	ldr	r3, [r2, #0]
 800533e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	e7f7      	b.n	8005336 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005346:	6822      	ldr	r2, [r4, #0]
 8005348:	6813      	ldr	r3, [r2, #0]
 800534a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800534e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005350:	2320      	movs	r3, #32
 8005352:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005356:	2300      	movs	r3, #0
 8005358:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800535c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005360:	e769      	b.n	8005236 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8005362:	2002      	movs	r0, #2
 8005364:	e767      	b.n	8005236 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8005366:	2002      	movs	r0, #2
 8005368:	e765      	b.n	8005236 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800536a:	2001      	movs	r0, #1
 800536c:	e763      	b.n	8005236 <HAL_I2C_Mem_Write+0x22>
 800536e:	bf00      	nop
 8005370:	00100002 	.word	0x00100002
 8005374:	ffff0000 	.word	0xffff0000

08005378 <HAL_I2C_Mem_Read>:
{
 8005378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800537c:	b087      	sub	sp, #28
 800537e:	4604      	mov	r4, r0
 8005380:	460f      	mov	r7, r1
 8005382:	4690      	mov	r8, r2
 8005384:	4699      	mov	r9, r3
 8005386:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005388:	f7ff fa32 	bl	80047f0 <HAL_GetTick>
 800538c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800538e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8005392:	b2c0      	uxtb	r0, r0
 8005394:	2820      	cmp	r0, #32
 8005396:	d004      	beq.n	80053a2 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8005398:	2702      	movs	r7, #2
}
 800539a:	4638      	mov	r0, r7
 800539c:	b007      	add	sp, #28
 800539e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053a2:	9500      	str	r5, [sp, #0]
 80053a4:	2319      	movs	r3, #25
 80053a6:	2201      	movs	r2, #1
 80053a8:	4988      	ldr	r1, [pc, #544]	; (80055cc <HAL_I2C_Mem_Read+0x254>)
 80053aa:	4620      	mov	r0, r4
 80053ac:	f7ff fc21 	bl	8004bf2 <I2C_WaitOnFlagUntilTimeout>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	f040 8143 	bne.w	800563c <HAL_I2C_Mem_Read+0x2c4>
    __HAL_LOCK(hi2c);
 80053b6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	f000 8140 	beq.w	8005640 <HAL_I2C_Mem_Read+0x2c8>
 80053c0:	2301      	movs	r3, #1
 80053c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053c6:	6823      	ldr	r3, [r4, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	f012 0f01 	tst.w	r2, #1
 80053ce:	d103      	bne.n	80053d8 <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053d8:	6822      	ldr	r2, [r4, #0]
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053e0:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053e2:	2322      	movs	r3, #34	; 0x22
 80053e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053e8:	2340      	movs	r3, #64	; 0x40
 80053ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80053f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053f4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053f6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80053fa:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053fe:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005400:	4b73      	ldr	r3, [pc, #460]	; (80055d0 <HAL_I2C_Mem_Read+0x258>)
 8005402:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005404:	9501      	str	r5, [sp, #4]
 8005406:	9600      	str	r6, [sp, #0]
 8005408:	464b      	mov	r3, r9
 800540a:	4642      	mov	r2, r8
 800540c:	4639      	mov	r1, r7
 800540e:	4620      	mov	r0, r4
 8005410:	f7ff fd18 	bl	8004e44 <I2C_RequestMemoryRead>
 8005414:	4607      	mov	r7, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	f040 8114 	bne.w	8005644 <HAL_I2C_Mem_Read+0x2cc>
    if (hi2c->XferSize == 0U)
 800541c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800541e:	b95b      	cbnz	r3, 8005438 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005420:	9302      	str	r3, [sp, #8]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	9202      	str	r2, [sp, #8]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	9202      	str	r2, [sp, #8]
 800542c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e075      	b.n	8005524 <HAL_I2C_Mem_Read+0x1ac>
    else if (hi2c->XferSize == 1U)
 8005438:	2b01      	cmp	r3, #1
 800543a:	d00a      	beq.n	8005452 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 800543c:	2b02      	cmp	r3, #2
 800543e:	d01a      	beq.n	8005476 <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005440:	2300      	movs	r3, #0
 8005442:	9305      	str	r3, [sp, #20]
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	695a      	ldr	r2, [r3, #20]
 8005448:	9205      	str	r2, [sp, #20]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	9305      	str	r3, [sp, #20]
 800544e:	9b05      	ldr	r3, [sp, #20]
 8005450:	e068      	b.n	8005524 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	6813      	ldr	r3, [r2, #0]
 8005456:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800545a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545c:	2300      	movs	r3, #0
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	695a      	ldr	r2, [r3, #20]
 8005464:	9203      	str	r2, [sp, #12]
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	9203      	str	r2, [sp, #12]
 800546a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	e056      	b.n	8005524 <HAL_I2C_Mem_Read+0x1ac>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	6813      	ldr	r3, [r2, #0]
 800547a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800547e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005480:	6822      	ldr	r2, [r4, #0]
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005488:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548a:	2300      	movs	r3, #0
 800548c:	9304      	str	r3, [sp, #16]
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	9204      	str	r2, [sp, #16]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	9304      	str	r3, [sp, #16]
 8005498:	9b04      	ldr	r3, [sp, #16]
 800549a:	e043      	b.n	8005524 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549c:	462a      	mov	r2, r5
 800549e:	4631      	mov	r1, r6
 80054a0:	4620      	mov	r0, r4
 80054a2:	f7ff fda3 	bl	8004fec <I2C_WaitOnRXNEFlagUntilTimeout>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f040 80ce 	bne.w	8005648 <HAL_I2C_Mem_Read+0x2d0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80054b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b6:	3301      	adds	r3, #1
 80054b8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80054ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054bc:	3b01      	subs	r3, #1
 80054be:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80054c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	3b01      	subs	r3, #1
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80054ca:	e02b      	b.n	8005524 <HAL_I2C_Mem_Read+0x1ac>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054cc:	9500      	str	r5, [sp, #0]
 80054ce:	4633      	mov	r3, r6
 80054d0:	2200      	movs	r2, #0
 80054d2:	4940      	ldr	r1, [pc, #256]	; (80055d4 <HAL_I2C_Mem_Read+0x25c>)
 80054d4:	4620      	mov	r0, r4
 80054d6:	f7ff fb8c 	bl	8004bf2 <I2C_WaitOnFlagUntilTimeout>
 80054da:	2800      	cmp	r0, #0
 80054dc:	f040 80b6 	bne.w	800564c <HAL_I2C_Mem_Read+0x2d4>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	6813      	ldr	r3, [r2, #0]
 80054e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054e8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054f0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80054f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054f4:	1c53      	adds	r3, r2, #1
 80054f6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80054f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054fa:	3b01      	subs	r3, #1
 80054fc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80054fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005500:	b29b      	uxth	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b29b      	uxth	r3, r3
 8005506:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800550e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005510:	3301      	adds	r3, #1
 8005512:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005514:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005516:	3b01      	subs	r3, #1
 8005518:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800551a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005524:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005526:	2b00      	cmp	r3, #0
 8005528:	d07f      	beq.n	800562a <HAL_I2C_Mem_Read+0x2b2>
      if (hi2c->XferSize <= 3U)
 800552a:	2b03      	cmp	r3, #3
 800552c:	d854      	bhi.n	80055d8 <HAL_I2C_Mem_Read+0x260>
        if (hi2c->XferSize == 1U)
 800552e:	2b01      	cmp	r3, #1
 8005530:	d0b4      	beq.n	800549c <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8005532:	2b02      	cmp	r3, #2
 8005534:	d0ca      	beq.n	80054cc <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005536:	9500      	str	r5, [sp, #0]
 8005538:	4633      	mov	r3, r6
 800553a:	2200      	movs	r2, #0
 800553c:	4925      	ldr	r1, [pc, #148]	; (80055d4 <HAL_I2C_Mem_Read+0x25c>)
 800553e:	4620      	mov	r0, r4
 8005540:	f7ff fb57 	bl	8004bf2 <I2C_WaitOnFlagUntilTimeout>
 8005544:	2800      	cmp	r0, #0
 8005546:	f040 8083 	bne.w	8005650 <HAL_I2C_Mem_Read+0x2d8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554a:	6822      	ldr	r2, [r4, #0]
 800554c:	6813      	ldr	r3, [r2, #0]
 800554e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005552:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800555a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800555c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800555e:	3301      	adds	r3, #1
 8005560:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005562:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005568:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29b      	uxth	r3, r3
 8005570:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005572:	9500      	str	r5, [sp, #0]
 8005574:	4633      	mov	r3, r6
 8005576:	2200      	movs	r2, #0
 8005578:	4916      	ldr	r1, [pc, #88]	; (80055d4 <HAL_I2C_Mem_Read+0x25c>)
 800557a:	4620      	mov	r0, r4
 800557c:	f7ff fb39 	bl	8004bf2 <I2C_WaitOnFlagUntilTimeout>
 8005580:	2800      	cmp	r0, #0
 8005582:	d167      	bne.n	8005654 <HAL_I2C_Mem_Read+0x2dc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	6813      	ldr	r3, [r2, #0]
 8005588:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800558c:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005594:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005596:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005598:	1c53      	adds	r3, r2, #1
 800559a:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800559c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800559e:	3b01      	subs	r3, #1
 80055a0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80055a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	3b01      	subs	r3, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80055b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055b4:	3301      	adds	r3, #1
 80055b6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80055b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055ba:	3b01      	subs	r3, #1
 80055bc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80055be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80055c8:	e7ac      	b.n	8005524 <HAL_I2C_Mem_Read+0x1ac>
 80055ca:	bf00      	nop
 80055cc:	00100002 	.word	0x00100002
 80055d0:	ffff0000 	.word	0xffff0000
 80055d4:	00010004 	.word	0x00010004
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d8:	462a      	mov	r2, r5
 80055da:	4631      	mov	r1, r6
 80055dc:	4620      	mov	r0, r4
 80055de:	f7ff fd05 	bl	8004fec <I2C_WaitOnRXNEFlagUntilTimeout>
 80055e2:	2800      	cmp	r0, #0
 80055e4:	d138      	bne.n	8005658 <HAL_I2C_Mem_Read+0x2e0>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80055ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055f0:	1c53      	adds	r3, r2, #1
 80055f2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80055f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055f6:	3b01      	subs	r3, #1
 80055f8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80055fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29b      	uxth	r3, r3
 8005602:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	6959      	ldr	r1, [r3, #20]
 8005608:	f011 0f04 	tst.w	r1, #4
 800560c:	d08a      	beq.n	8005524 <HAL_I2C_Mem_Read+0x1ac>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005612:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005614:	3301      	adds	r3, #1
 8005616:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005618:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800561a:	3b01      	subs	r3, #1
 800561c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800561e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29b      	uxth	r3, r3
 8005626:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005628:	e77c      	b.n	8005524 <HAL_I2C_Mem_Read+0x1ac>
    hi2c->State = HAL_I2C_STATE_READY;
 800562a:	2320      	movs	r3, #32
 800562c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005630:	2300      	movs	r3, #0
 8005632:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005636:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800563a:	e6ae      	b.n	800539a <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 800563c:	2702      	movs	r7, #2
 800563e:	e6ac      	b.n	800539a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8005640:	2702      	movs	r7, #2
 8005642:	e6aa      	b.n	800539a <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 8005644:	2701      	movs	r7, #1
 8005646:	e6a8      	b.n	800539a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8005648:	2701      	movs	r7, #1
 800564a:	e6a6      	b.n	800539a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 800564c:	2701      	movs	r7, #1
 800564e:	e6a4      	b.n	800539a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8005650:	2701      	movs	r7, #1
 8005652:	e6a2      	b.n	800539a <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8005654:	2701      	movs	r7, #1
 8005656:	e6a0      	b.n	800539a <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 8005658:	2701      	movs	r7, #1
 800565a:	e69e      	b.n	800539a <HAL_I2C_Mem_Read+0x22>

0800565c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800565c:	2800      	cmp	r0, #0
 800565e:	f000 81e0 	beq.w	8005a22 <HAL_RCC_OscConfig+0x3c6>
{
 8005662:	b570      	push	{r4, r5, r6, lr}
 8005664:	b082      	sub	sp, #8
 8005666:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005668:	6803      	ldr	r3, [r0, #0]
 800566a:	f013 0f01 	tst.w	r3, #1
 800566e:	d03b      	beq.n	80056e8 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005670:	4b9f      	ldr	r3, [pc, #636]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 030c 	and.w	r3, r3, #12
 8005678:	2b04      	cmp	r3, #4
 800567a:	d02c      	beq.n	80056d6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800567c:	4b9c      	ldr	r3, [pc, #624]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005684:	2b08      	cmp	r3, #8
 8005686:	d021      	beq.n	80056cc <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568e:	d04f      	beq.n	8005730 <HAL_RCC_OscConfig+0xd4>
 8005690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005694:	d052      	beq.n	800573c <HAL_RCC_OscConfig+0xe0>
 8005696:	4b96      	ldr	r3, [pc, #600]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056a8:	6863      	ldr	r3, [r4, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d050      	beq.n	8005750 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ae:	f7ff f89f 	bl	80047f0 <HAL_GetTick>
 80056b2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b4:	4b8e      	ldr	r3, [pc, #568]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80056bc:	d114      	bne.n	80056e8 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056be:	f7ff f897 	bl	80047f0 <HAL_GetTick>
 80056c2:	1b40      	subs	r0, r0, r5
 80056c4:	2864      	cmp	r0, #100	; 0x64
 80056c6:	d9f5      	bls.n	80056b4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80056c8:	2003      	movs	r0, #3
 80056ca:	e1b1      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056cc:	4b88      	ldr	r3, [pc, #544]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80056d4:	d0d8      	beq.n	8005688 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d6:	4b86      	ldr	r3, [pc, #536]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80056de:	d003      	beq.n	80056e8 <HAL_RCC_OscConfig+0x8c>
 80056e0:	6863      	ldr	r3, [r4, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f000 819f 	beq.w	8005a26 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056e8:	6823      	ldr	r3, [r4, #0]
 80056ea:	f013 0f02 	tst.w	r3, #2
 80056ee:	d054      	beq.n	800579a <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056f0:	4b7f      	ldr	r3, [pc, #508]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f013 0f0c 	tst.w	r3, #12
 80056f8:	d03e      	beq.n	8005778 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056fa:	4b7d      	ldr	r3, [pc, #500]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005702:	2b08      	cmp	r3, #8
 8005704:	d033      	beq.n	800576e <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d068      	beq.n	80057de <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800570c:	4b79      	ldr	r3, [pc, #484]	; (80058f4 <HAL_RCC_OscConfig+0x298>)
 800570e:	2201      	movs	r2, #1
 8005710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005712:	f7ff f86d 	bl	80047f0 <HAL_GetTick>
 8005716:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005718:	4b75      	ldr	r3, [pc, #468]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f013 0f02 	tst.w	r3, #2
 8005720:	d154      	bne.n	80057cc <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005722:	f7ff f865 	bl	80047f0 <HAL_GetTick>
 8005726:	1b40      	subs	r0, r0, r5
 8005728:	2802      	cmp	r0, #2
 800572a:	d9f5      	bls.n	8005718 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800572c:	2003      	movs	r0, #3
 800572e:	e17f      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005730:	4a6f      	ldr	r2, [pc, #444]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e7b5      	b.n	80056a8 <HAL_RCC_OscConfig+0x4c>
 800573c:	4b6c      	ldr	r3, [pc, #432]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	e7ab      	b.n	80056a8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8005750:	f7ff f84e 	bl	80047f0 <HAL_GetTick>
 8005754:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005756:	4b66      	ldr	r3, [pc, #408]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800575e:	d0c3      	beq.n	80056e8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005760:	f7ff f846 	bl	80047f0 <HAL_GetTick>
 8005764:	1b40      	subs	r0, r0, r5
 8005766:	2864      	cmp	r0, #100	; 0x64
 8005768:	d9f5      	bls.n	8005756 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800576a:	2003      	movs	r0, #3
 800576c:	e160      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576e:	4b60      	ldr	r3, [pc, #384]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005776:	d1c6      	bne.n	8005706 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005778:	4b5d      	ldr	r3, [pc, #372]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f013 0f02 	tst.w	r3, #2
 8005780:	d003      	beq.n	800578a <HAL_RCC_OscConfig+0x12e>
 8005782:	68e3      	ldr	r3, [r4, #12]
 8005784:	2b01      	cmp	r3, #1
 8005786:	f040 8150 	bne.w	8005a2a <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578a:	4a59      	ldr	r2, [pc, #356]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 800578c:	6813      	ldr	r3, [r2, #0]
 800578e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005792:	6921      	ldr	r1, [r4, #16]
 8005794:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005798:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	f013 0f08 	tst.w	r3, #8
 80057a0:	d042      	beq.n	8005828 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057a2:	6963      	ldr	r3, [r4, #20]
 80057a4:	b36b      	cbz	r3, 8005802 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a6:	4b53      	ldr	r3, [pc, #332]	; (80058f4 <HAL_RCC_OscConfig+0x298>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ae:	f7ff f81f 	bl	80047f0 <HAL_GetTick>
 80057b2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b4:	4b4e      	ldr	r3, [pc, #312]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 80057b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b8:	f013 0f02 	tst.w	r3, #2
 80057bc:	d134      	bne.n	8005828 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057be:	f7ff f817 	bl	80047f0 <HAL_GetTick>
 80057c2:	1b40      	subs	r0, r0, r5
 80057c4:	2802      	cmp	r0, #2
 80057c6:	d9f5      	bls.n	80057b4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80057c8:	2003      	movs	r0, #3
 80057ca:	e131      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057cc:	4a48      	ldr	r2, [pc, #288]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80057d4:	6921      	ldr	r1, [r4, #16]
 80057d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	e7dd      	b.n	800579a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80057de:	4b45      	ldr	r3, [pc, #276]	; (80058f4 <HAL_RCC_OscConfig+0x298>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80057e4:	f7ff f804 	bl	80047f0 <HAL_GetTick>
 80057e8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ea:	4b41      	ldr	r3, [pc, #260]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f013 0f02 	tst.w	r3, #2
 80057f2:	d0d2      	beq.n	800579a <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057f4:	f7fe fffc 	bl	80047f0 <HAL_GetTick>
 80057f8:	1b40      	subs	r0, r0, r5
 80057fa:	2802      	cmp	r0, #2
 80057fc:	d9f5      	bls.n	80057ea <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80057fe:	2003      	movs	r0, #3
 8005800:	e116      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005802:	4b3c      	ldr	r3, [pc, #240]	; (80058f4 <HAL_RCC_OscConfig+0x298>)
 8005804:	2200      	movs	r2, #0
 8005806:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800580a:	f7fe fff1 	bl	80047f0 <HAL_GetTick>
 800580e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005810:	4b37      	ldr	r3, [pc, #220]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 8005812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005814:	f013 0f02 	tst.w	r3, #2
 8005818:	d006      	beq.n	8005828 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800581a:	f7fe ffe9 	bl	80047f0 <HAL_GetTick>
 800581e:	1b40      	subs	r0, r0, r5
 8005820:	2802      	cmp	r0, #2
 8005822:	d9f5      	bls.n	8005810 <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8005824:	2003      	movs	r0, #3
 8005826:	e103      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	f013 0f04 	tst.w	r3, #4
 800582e:	d077      	beq.n	8005920 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005830:	4b2f      	ldr	r3, [pc, #188]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005838:	d133      	bne.n	80058a2 <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 8005840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005842:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005846:	641a      	str	r2, [r3, #64]	; 0x40
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005852:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005854:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <HAL_RCC_OscConfig+0x29c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f413 7f80 	tst.w	r3, #256	; 0x100
 800585c:	d023      	beq.n	80058a6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800585e:	68a3      	ldr	r3, [r4, #8]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d034      	beq.n	80058ce <HAL_RCC_OscConfig+0x272>
 8005864:	2b05      	cmp	r3, #5
 8005866:	d038      	beq.n	80058da <HAL_RCC_OscConfig+0x27e>
 8005868:	4b21      	ldr	r3, [pc, #132]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 800586a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	671a      	str	r2, [r3, #112]	; 0x70
 8005872:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005874:	f022 0204 	bic.w	r2, r2, #4
 8005878:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800587a:	68a3      	ldr	r3, [r4, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d03d      	beq.n	80058fc <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005880:	f7fe ffb6 	bl	80047f0 <HAL_GetTick>
 8005884:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005886:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 8005888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588a:	f013 0f02 	tst.w	r3, #2
 800588e:	d146      	bne.n	800591e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005890:	f7fe ffae 	bl	80047f0 <HAL_GetTick>
 8005894:	1b80      	subs	r0, r0, r6
 8005896:	f241 3388 	movw	r3, #5000	; 0x1388
 800589a:	4298      	cmp	r0, r3
 800589c:	d9f3      	bls.n	8005886 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800589e:	2003      	movs	r0, #3
 80058a0:	e0c6      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80058a2:	2500      	movs	r5, #0
 80058a4:	e7d6      	b.n	8005854 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058a6:	4a14      	ldr	r2, [pc, #80]	; (80058f8 <HAL_RCC_OscConfig+0x29c>)
 80058a8:	6813      	ldr	r3, [r2, #0]
 80058aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ae:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80058b0:	f7fe ff9e 	bl	80047f0 <HAL_GetTick>
 80058b4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b6:	4b10      	ldr	r3, [pc, #64]	; (80058f8 <HAL_RCC_OscConfig+0x29c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80058be:	d1ce      	bne.n	800585e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c0:	f7fe ff96 	bl	80047f0 <HAL_GetTick>
 80058c4:	1b80      	subs	r0, r0, r6
 80058c6:	2802      	cmp	r0, #2
 80058c8:	d9f5      	bls.n	80058b6 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 80058ca:	2003      	movs	r0, #3
 80058cc:	e0b0      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ce:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 80058d0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80058d2:	f043 0301 	orr.w	r3, r3, #1
 80058d6:	6713      	str	r3, [r2, #112]	; 0x70
 80058d8:	e7cf      	b.n	800587a <HAL_RCC_OscConfig+0x21e>
 80058da:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <HAL_RCC_OscConfig+0x294>)
 80058dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058de:	f042 0204 	orr.w	r2, r2, #4
 80058e2:	671a      	str	r2, [r3, #112]	; 0x70
 80058e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	671a      	str	r2, [r3, #112]	; 0x70
 80058ec:	e7c5      	b.n	800587a <HAL_RCC_OscConfig+0x21e>
 80058ee:	bf00      	nop
 80058f0:	40023800 	.word	0x40023800
 80058f4:	42470000 	.word	0x42470000
 80058f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058fc:	f7fe ff78 	bl	80047f0 <HAL_GetTick>
 8005900:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005902:	4b52      	ldr	r3, [pc, #328]	; (8005a4c <HAL_RCC_OscConfig+0x3f0>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	f013 0f02 	tst.w	r3, #2
 800590a:	d008      	beq.n	800591e <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800590c:	f7fe ff70 	bl	80047f0 <HAL_GetTick>
 8005910:	1b80      	subs	r0, r0, r6
 8005912:	f241 3388 	movw	r3, #5000	; 0x1388
 8005916:	4298      	cmp	r0, r3
 8005918:	d9f3      	bls.n	8005902 <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 800591a:	2003      	movs	r0, #3
 800591c:	e088      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800591e:	b9ed      	cbnz	r5, 800595c <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005920:	69a3      	ldr	r3, [r4, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8083 	beq.w	8005a2e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005928:	4a48      	ldr	r2, [pc, #288]	; (8005a4c <HAL_RCC_OscConfig+0x3f0>)
 800592a:	6892      	ldr	r2, [r2, #8]
 800592c:	f002 020c 	and.w	r2, r2, #12
 8005930:	2a08      	cmp	r2, #8
 8005932:	d051      	beq.n	80059d8 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005934:	2b02      	cmp	r3, #2
 8005936:	d017      	beq.n	8005968 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005938:	4b45      	ldr	r3, [pc, #276]	; (8005a50 <HAL_RCC_OscConfig+0x3f4>)
 800593a:	2200      	movs	r2, #0
 800593c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593e:	f7fe ff57 	bl	80047f0 <HAL_GetTick>
 8005942:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005944:	4b41      	ldr	r3, [pc, #260]	; (8005a4c <HAL_RCC_OscConfig+0x3f0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800594c:	d042      	beq.n	80059d4 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800594e:	f7fe ff4f 	bl	80047f0 <HAL_GetTick>
 8005952:	1b00      	subs	r0, r0, r4
 8005954:	2802      	cmp	r0, #2
 8005956:	d9f5      	bls.n	8005944 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005958:	2003      	movs	r0, #3
 800595a:	e069      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 800595c:	4a3b      	ldr	r2, [pc, #236]	; (8005a4c <HAL_RCC_OscConfig+0x3f0>)
 800595e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005964:	6413      	str	r3, [r2, #64]	; 0x40
 8005966:	e7db      	b.n	8005920 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8005968:	4b39      	ldr	r3, [pc, #228]	; (8005a50 <HAL_RCC_OscConfig+0x3f4>)
 800596a:	2200      	movs	r2, #0
 800596c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800596e:	f7fe ff3f 	bl	80047f0 <HAL_GetTick>
 8005972:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005974:	4b35      	ldr	r3, [pc, #212]	; (8005a4c <HAL_RCC_OscConfig+0x3f0>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800597c:	d006      	beq.n	800598c <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800597e:	f7fe ff37 	bl	80047f0 <HAL_GetTick>
 8005982:	1b40      	subs	r0, r0, r5
 8005984:	2802      	cmp	r0, #2
 8005986:	d9f5      	bls.n	8005974 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8005988:	2003      	movs	r0, #3
 800598a:	e051      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800598c:	69e3      	ldr	r3, [r4, #28]
 800598e:	6a22      	ldr	r2, [r4, #32]
 8005990:	4313      	orrs	r3, r2
 8005992:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005994:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005998:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800599a:	0852      	lsrs	r2, r2, #1
 800599c:	3a01      	subs	r2, #1
 800599e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80059a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059a8:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <HAL_RCC_OscConfig+0x3f0>)
 80059aa:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80059ac:	4b28      	ldr	r3, [pc, #160]	; (8005a50 <HAL_RCC_OscConfig+0x3f4>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80059b2:	f7fe ff1d 	bl	80047f0 <HAL_GetTick>
 80059b6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b8:	4b24      	ldr	r3, [pc, #144]	; (8005a4c <HAL_RCC_OscConfig+0x3f0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80059c0:	d106      	bne.n	80059d0 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c2:	f7fe ff15 	bl	80047f0 <HAL_GetTick>
 80059c6:	1b00      	subs	r0, r0, r4
 80059c8:	2802      	cmp	r0, #2
 80059ca:	d9f5      	bls.n	80059b8 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 80059cc:	2003      	movs	r0, #3
 80059ce:	e02f      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80059d0:	2000      	movs	r0, #0
 80059d2:	e02d      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
 80059d4:	2000      	movs	r0, #0
 80059d6:	e02b      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d02b      	beq.n	8005a34 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 80059dc:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <HAL_RCC_OscConfig+0x3f0>)
 80059de:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80059e4:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059e6:	4291      	cmp	r1, r2
 80059e8:	d126      	bne.n	8005a38 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059ee:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f0:	428a      	cmp	r2, r1
 80059f2:	d123      	bne.n	8005a3c <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059f6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80059fa:	401a      	ands	r2, r3
 80059fc:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005a00:	d11e      	bne.n	8005a40 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a02:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8005a06:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005a08:	0852      	lsrs	r2, r2, #1
 8005a0a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a0c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005a10:	d118      	bne.n	8005a44 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a12:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005a16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a18:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005a1c:	d114      	bne.n	8005a48 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8005a1e:	2000      	movs	r0, #0
 8005a20:	e006      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8005a22:	2001      	movs	r0, #1
}
 8005a24:	4770      	bx	lr
        return HAL_ERROR;
 8005a26:	2001      	movs	r0, #1
 8005a28:	e002      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	e000      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8005a2e:	2000      	movs	r0, #0
}
 8005a30:	b002      	add	sp, #8
 8005a32:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005a34:	2001      	movs	r0, #1
 8005a36:	e7fb      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8005a38:	2001      	movs	r0, #1
 8005a3a:	e7f9      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	e7f7      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
 8005a40:	2001      	movs	r0, #1
 8005a42:	e7f5      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
 8005a44:	2001      	movs	r0, #1
 8005a46:	e7f3      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
 8005a48:	2001      	movs	r0, #1
 8005a4a:	e7f1      	b.n	8005a30 <HAL_RCC_OscConfig+0x3d4>
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	42470000 	.word	0x42470000

08005a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a54:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a56:	4b25      	ldr	r3, [pc, #148]	; (8005aec <HAL_RCC_GetSysClockFreq+0x98>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d03f      	beq.n	8005ae2 <HAL_RCC_GetSysClockFreq+0x8e>
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d13f      	bne.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a66:	4b21      	ldr	r3, [pc, #132]	; (8005aec <HAL_RCC_GetSysClockFreq+0x98>)
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005a74:	d012      	beq.n	8005a9c <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a76:	4b1d      	ldr	r3, [pc, #116]	; (8005aec <HAL_RCC_GetSysClockFreq+0x98>)
 8005a78:	6859      	ldr	r1, [r3, #4]
 8005a7a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005a7e:	481c      	ldr	r0, [pc, #112]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a80:	2300      	movs	r3, #0
 8005a82:	fba1 0100 	umull	r0, r1, r1, r0
 8005a86:	f7fb f8b7 	bl	8000bf8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a8a:	4b18      	ldr	r3, [pc, #96]	; (8005aec <HAL_RCC_GetSysClockFreq+0x98>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005a92:	3301      	adds	r3, #1
 8005a94:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005a96:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005a9a:	e025      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9c:	4b13      	ldr	r3, [pc, #76]	; (8005aec <HAL_RCC_GetSysClockFreq+0x98>)
 8005a9e:	6859      	ldr	r1, [r3, #4]
 8005aa0:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8005aa4:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8005aa8:	ebb1 000c 	subs.w	r0, r1, ip
 8005aac:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8005ab0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8005ab4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ab8:	0181      	lsls	r1, r0, #6
 8005aba:	1a09      	subs	r1, r1, r0
 8005abc:	eb63 030e 	sbc.w	r3, r3, lr
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac6:	00c9      	lsls	r1, r1, #3
 8005ac8:	eb11 0c0c 	adds.w	ip, r1, ip
 8005acc:	f143 0300 	adc.w	r3, r3, #0
 8005ad0:	0299      	lsls	r1, r3, #10
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8005ad8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8005adc:	f7fb f88c 	bl	8000bf8 <__aeabi_uldivmod>
 8005ae0:	e7d3      	b.n	8005a8a <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8005ae2:	4803      	ldr	r0, [pc, #12]	; (8005af0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ae4:	e000      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ae6:	4803      	ldr	r0, [pc, #12]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005ae8:	bd08      	pop	{r3, pc}
 8005aea:	bf00      	nop
 8005aec:	40023800 	.word	0x40023800
 8005af0:	017d7840 	.word	0x017d7840
 8005af4:	00f42400 	.word	0x00f42400

08005af8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005af8:	2800      	cmp	r0, #0
 8005afa:	f000 809b 	beq.w	8005c34 <HAL_RCC_ClockConfig+0x13c>
{
 8005afe:	b570      	push	{r4, r5, r6, lr}
 8005b00:	460d      	mov	r5, r1
 8005b02:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b04:	4b4f      	ldr	r3, [pc, #316]	; (8005c44 <HAL_RCC_ClockConfig+0x14c>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	428b      	cmp	r3, r1
 8005b0e:	d208      	bcs.n	8005b22 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b10:	b2cb      	uxtb	r3, r1
 8005b12:	4a4c      	ldr	r2, [pc, #304]	; (8005c44 <HAL_RCC_ClockConfig+0x14c>)
 8005b14:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b16:	6813      	ldr	r3, [r2, #0]
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	f040 808b 	bne.w	8005c38 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b22:	6823      	ldr	r3, [r4, #0]
 8005b24:	f013 0f02 	tst.w	r3, #2
 8005b28:	d017      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2a:	f013 0f04 	tst.w	r3, #4
 8005b2e:	d004      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b30:	4a45      	ldr	r2, [pc, #276]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005b32:	6893      	ldr	r3, [r2, #8]
 8005b34:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b38:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	f013 0f08 	tst.w	r3, #8
 8005b40:	d004      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b42:	4a41      	ldr	r2, [pc, #260]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005b44:	6893      	ldr	r3, [r2, #8]
 8005b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b4a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b4c:	4a3e      	ldr	r2, [pc, #248]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005b4e:	6893      	ldr	r3, [r2, #8]
 8005b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b54:	68a1      	ldr	r1, [r4, #8]
 8005b56:	430b      	orrs	r3, r1
 8005b58:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	f013 0f01 	tst.w	r3, #1
 8005b60:	d032      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d021      	beq.n	8005bac <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b68:	1e9a      	subs	r2, r3, #2
 8005b6a:	2a01      	cmp	r2, #1
 8005b6c:	d925      	bls.n	8005bba <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b6e:	4a36      	ldr	r2, [pc, #216]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	f012 0f02 	tst.w	r2, #2
 8005b76:	d061      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b78:	4933      	ldr	r1, [pc, #204]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005b7a:	688a      	ldr	r2, [r1, #8]
 8005b7c:	f022 0203 	bic.w	r2, r2, #3
 8005b80:	4313      	orrs	r3, r2
 8005b82:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005b84:	f7fe fe34 	bl	80047f0 <HAL_GetTick>
 8005b88:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8a:	4b2f      	ldr	r3, [pc, #188]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	6862      	ldr	r2, [r4, #4]
 8005b94:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005b98:	d016      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b9a:	f7fe fe29 	bl	80047f0 <HAL_GetTick>
 8005b9e:	1b80      	subs	r0, r0, r6
 8005ba0:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ba4:	4298      	cmp	r0, r3
 8005ba6:	d9f0      	bls.n	8005b8a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8005ba8:	2003      	movs	r0, #3
 8005baa:	e042      	b.n	8005c32 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bac:	4a26      	ldr	r2, [pc, #152]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005bb4:	d1e0      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8005bb6:	2001      	movs	r0, #1
 8005bb8:	e03b      	b.n	8005c32 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bba:	4a23      	ldr	r2, [pc, #140]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005bc2:	d1d9      	bne.n	8005b78 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	e034      	b.n	8005c32 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc8:	4b1e      	ldr	r3, [pc, #120]	; (8005c44 <HAL_RCC_ClockConfig+0x14c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	42ab      	cmp	r3, r5
 8005bd2:	d907      	bls.n	8005be4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd4:	b2ea      	uxtb	r2, r5
 8005bd6:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <HAL_RCC_ClockConfig+0x14c>)
 8005bd8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	42ab      	cmp	r3, r5
 8005be2:	d12d      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	f013 0f04 	tst.w	r3, #4
 8005bea:	d006      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bec:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005bee:	6893      	ldr	r3, [r2, #8]
 8005bf0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005bf4:	68e1      	ldr	r1, [r4, #12]
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	f013 0f08 	tst.w	r3, #8
 8005c00:	d007      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c02:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005c04:	6893      	ldr	r3, [r2, #8]
 8005c06:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005c0a:	6921      	ldr	r1, [r4, #16]
 8005c0c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c10:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c12:	f7ff ff1f 	bl	8005a54 <HAL_RCC_GetSysClockFreq>
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <HAL_RCC_ClockConfig+0x150>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c1e:	4a0b      	ldr	r2, [pc, #44]	; (8005c4c <HAL_RCC_ClockConfig+0x154>)
 8005c20:	5cd3      	ldrb	r3, [r2, r3]
 8005c22:	40d8      	lsrs	r0, r3
 8005c24:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_RCC_ClockConfig+0x158>)
 8005c26:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005c28:	4b0a      	ldr	r3, [pc, #40]	; (8005c54 <HAL_RCC_ClockConfig+0x15c>)
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	f7fe fd94 	bl	8004758 <HAL_InitTick>
  return HAL_OK;
 8005c30:	2000      	movs	r0, #0
}
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005c34:	2001      	movs	r0, #1
}
 8005c36:	4770      	bx	lr
      return HAL_ERROR;
 8005c38:	2001      	movs	r0, #1
 8005c3a:	e7fa      	b.n	8005c32 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	e7f8      	b.n	8005c32 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8005c40:	2001      	movs	r0, #1
 8005c42:	e7f6      	b.n	8005c32 <HAL_RCC_ClockConfig+0x13a>
 8005c44:	40023c00 	.word	0x40023c00
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	0800cc18 	.word	0x0800cc18
 8005c50:	20000020 	.word	0x20000020
 8005c54:	20000028 	.word	0x20000028

08005c58 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005c58:	4b01      	ldr	r3, [pc, #4]	; (8005c60 <HAL_RCC_GetHCLKFreq+0x8>)
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	20000020 	.word	0x20000020

08005c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c64:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c66:	f7ff fff7 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005c6a:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005c72:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c74:	5cd3      	ldrb	r3, [r2, r3]
}
 8005c76:	40d8      	lsrs	r0, r3
 8005c78:	bd08      	pop	{r3, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	0800cc28 	.word	0x0800cc28

08005c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c84:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c86:	f7ff ffe7 	bl	8005c58 <HAL_RCC_GetHCLKFreq>
 8005c8a:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005c92:	4a03      	ldr	r2, [pc, #12]	; (8005ca0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005c94:	5cd3      	ldrb	r3, [r2, r3]
}
 8005c96:	40d8      	lsrs	r0, r3
 8005c98:	bd08      	pop	{r3, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	0800cc28 	.word	0x0800cc28

08005ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca4:	b530      	push	{r4, r5, lr}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005caa:	6803      	ldr	r3, [r0, #0]
 8005cac:	f013 0f05 	tst.w	r3, #5
 8005cb0:	d10e      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	f013 0f02 	tst.w	r3, #2
 8005cb8:	d136      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	f013 0f08 	tst.w	r3, #8
 8005cc0:	f000 809b 	beq.w	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cc4:	7c22      	ldrb	r2, [r4, #16]
 8005cc6:	4b4e      	ldr	r3, [pc, #312]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005cc8:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ccc:	2000      	movs	r0, #0
 8005cce:	e095      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x158>
    __HAL_RCC_PLLI2S_DISABLE();
 8005cd0:	4b4c      	ldr	r3, [pc, #304]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8005cd6:	f7fe fd8b 	bl	80047f0 <HAL_GetTick>
 8005cda:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cdc:	4b4a      	ldr	r3, [pc, #296]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005ce4:	d006      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ce6:	f7fe fd83 	bl	80047f0 <HAL_GetTick>
 8005cea:	1b43      	subs	r3, r0, r5
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d9f5      	bls.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8005cf0:	2003      	movs	r0, #3
 8005cf2:	e083      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x158>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf4:	6862      	ldr	r2, [r4, #4]
 8005cf6:	68a3      	ldr	r3, [r4, #8]
 8005cf8:	071b      	lsls	r3, r3, #28
 8005cfa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005cfe:	4a42      	ldr	r2, [pc, #264]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005d04:	4b3f      	ldr	r3, [pc, #252]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8005d0a:	f7fe fd71 	bl	80047f0 <HAL_GetTick>
 8005d0e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d10:	4b3d      	ldr	r3, [pc, #244]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005d18:	d1cb      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d1a:	f7fe fd69 	bl	80047f0 <HAL_GetTick>
 8005d1e:	1b40      	subs	r0, r0, r5
 8005d20:	2802      	cmp	r0, #2
 8005d22:	d9f5      	bls.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8005d24:	2003      	movs	r0, #3
 8005d26:	e069      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x158>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3c:	9301      	str	r3, [sp, #4]
 8005d3e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005d40:	4a32      	ldr	r2, [pc, #200]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d48:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005d4a:	f7fe fd51 	bl	80047f0 <HAL_GetTick>
 8005d4e:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d50:	4b2e      	ldr	r3, [pc, #184]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d58:	d106      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d5a:	f7fe fd49 	bl	80047f0 <HAL_GetTick>
 8005d5e:	1b43      	subs	r3, r0, r5
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d9f5      	bls.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8005d64:	2003      	movs	r0, #3
 8005d66:	e049      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x158>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d68:	4b27      	ldr	r3, [pc, #156]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d6c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005d70:	d014      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005d72:	68e2      	ldr	r2, [r4, #12]
 8005d74:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d00f      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d7c:	4b22      	ldr	r3, [pc, #136]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d84:	491f      	ldr	r1, [pc, #124]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d86:	2001      	movs	r0, #1
 8005d88:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8005d92:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	f013 0f01 	tst.w	r3, #1
 8005d9a:	d112      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d9c:	68e3      	ldr	r3, [r4, #12]
 8005d9e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005da2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005da6:	d01d      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8005da8:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005daa:	6893      	ldr	r3, [r2, #8]
 8005dac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005db0:	6093      	str	r3, [r2, #8]
 8005db2:	4915      	ldr	r1, [pc, #84]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005db4:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005db6:	68e2      	ldr	r2, [r4, #12]
 8005db8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	670b      	str	r3, [r1, #112]	; 0x70
 8005dc0:	e77b      	b.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8005dc2:	f7fe fd15 	bl	80047f0 <HAL_GetTick>
 8005dc6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dcc:	f013 0f02 	tst.w	r3, #2
 8005dd0:	d1e4      	bne.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dd2:	f7fe fd0d 	bl	80047f0 <HAL_GetTick>
 8005dd6:	1b40      	subs	r0, r0, r5
 8005dd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ddc:	4298      	cmp	r0, r3
 8005dde:	d9f3      	bls.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x124>
            return HAL_TIMEOUT;
 8005de0:	2003      	movs	r0, #3
 8005de2:	e00b      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x158>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de4:	4908      	ldr	r1, [pc, #32]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005de6:	688a      	ldr	r2, [r1, #8]
 8005de8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005dec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df4:	4313      	orrs	r3, r2
 8005df6:	608b      	str	r3, [r1, #8]
 8005df8:	e7db      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  return HAL_OK;
 8005dfa:	2000      	movs	r0, #0
}
 8005dfc:	b003      	add	sp, #12
 8005dfe:	bd30      	pop	{r4, r5, pc}
 8005e00:	42471000 	.word	0x42471000
 8005e04:	42470000 	.word	0x42470000
 8005e08:	40023800 	.word	0x40023800
 8005e0c:	40007000 	.word	0x40007000

08005e10 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e14:	6802      	ldr	r2, [r0, #0]
 8005e16:	68d3      	ldr	r3, [r2, #12]
 8005e18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e1c:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e1e:	f7fe fce7 	bl	80047f0 <HAL_GetTick>
 8005e22:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f013 0f20 	tst.w	r3, #32
 8005e2c:	d107      	bne.n	8005e3e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e2e:	f7fe fcdf 	bl	80047f0 <HAL_GetTick>
 8005e32:	1b40      	subs	r0, r0, r5
 8005e34:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005e38:	d9f4      	bls.n	8005e24 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8005e3a:	2003      	movs	r0, #3
 8005e3c:	e000      	b.n	8005e40 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8005e3e:	2000      	movs	r0, #0
}
 8005e40:	bd38      	pop	{r3, r4, r5, pc}

08005e42 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005e42:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e44:	6803      	ldr	r3, [r0, #0]
 8005e46:	68da      	ldr	r2, [r3, #12]
 8005e48:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005e4c:	d001      	beq.n	8005e52 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005e4e:	2000      	movs	r0, #0
}
 8005e50:	bd38      	pop	{r3, r4, r5, pc}
 8005e52:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e54:	f04f 32ff 	mov.w	r2, #4294967295
 8005e58:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005e5a:	f7fe fcc9 	bl	80047f0 <HAL_GetTick>
 8005e5e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e68:	d107      	bne.n	8005e7a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e6a:	f7fe fcc1 	bl	80047f0 <HAL_GetTick>
 8005e6e:	1b43      	subs	r3, r0, r5
 8005e70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e74:	d9f4      	bls.n	8005e60 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8005e76:	2003      	movs	r0, #3
 8005e78:	e7ea      	b.n	8005e50 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	e7e8      	b.n	8005e50 <RTC_EnterInitMode+0xe>

08005e7e <HAL_RTC_Init>:
{
 8005e7e:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d05c      	beq.n	8005f3e <HAL_RTC_Init+0xc0>
 8005e84:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005e86:	7f43      	ldrb	r3, [r0, #29]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d041      	beq.n	8005f10 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	22ca      	movs	r2, #202	; 0xca
 8005e94:	625a      	str	r2, [r3, #36]	; 0x24
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	2253      	movs	r2, #83	; 0x53
 8005e9a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f7ff ffd0 	bl	8005e42 <RTC_EnterInitMode>
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d137      	bne.n	8005f18 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ea8:	6822      	ldr	r2, [r4, #0]
 8005eaa:	6893      	ldr	r3, [r2, #8]
 8005eac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005eb6:	6821      	ldr	r1, [r4, #0]
 8005eb8:	688a      	ldr	r2, [r1, #8]
 8005eba:	6863      	ldr	r3, [r4, #4]
 8005ebc:	6920      	ldr	r0, [r4, #16]
 8005ebe:	4303      	orrs	r3, r0
 8005ec0:	6960      	ldr	r0, [r4, #20]
 8005ec2:	4303      	orrs	r3, r0
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	68e2      	ldr	r2, [r4, #12]
 8005ecc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005ece:	6822      	ldr	r2, [r4, #0]
 8005ed0:	6913      	ldr	r3, [r2, #16]
 8005ed2:	68a1      	ldr	r1, [r4, #8]
 8005ed4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005ed8:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	68d3      	ldr	r3, [r2, #12]
 8005ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f013 0f20 	tst.w	r3, #32
 8005eec:	d01b      	beq.n	8005f26 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ef6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ef8:	6822      	ldr	r2, [r4, #0]
 8005efa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005efc:	69a1      	ldr	r1, [r4, #24]
 8005efe:	430b      	orrs	r3, r1
 8005f00:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	22ff      	movs	r2, #255	; 0xff
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	7763      	strb	r3, [r4, #29]
}
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8005f10:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005f12:	f7fe f99f 	bl	8004254 <HAL_RTC_MspInit>
 8005f16:	e7b9      	b.n	8005e8c <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	22ff      	movs	r2, #255	; 0xff
 8005f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f1e:	2304      	movs	r3, #4
 8005f20:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8005f22:	2501      	movs	r5, #1
 8005f24:	e7f2      	b.n	8005f0c <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7ff ff72 	bl	8005e10 <HAL_RTC_WaitForSynchro>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d0de      	beq.n	8005eee <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	22ff      	movs	r2, #255	; 0xff
 8005f34:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f36:	2304      	movs	r3, #4
 8005f38:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8005f3a:	2501      	movs	r5, #1
 8005f3c:	e7e6      	b.n	8005f0c <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8005f3e:	2501      	movs	r5, #1
 8005f40:	e7e4      	b.n	8005f0c <HAL_RTC_Init+0x8e>

08005f42 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005f42:	2300      	movs	r3, #0

  while(Value >= 10U)
 8005f44:	e002      	b.n	8005f4c <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005f46:	3301      	adds	r3, #1
    Value -= 10U;
 8005f48:	380a      	subs	r0, #10
 8005f4a:	b2c0      	uxtb	r0, r0
  while(Value >= 10U)
 8005f4c:	2809      	cmp	r0, #9
 8005f4e:	d8fa      	bhi.n	8005f46 <RTC_ByteToBcd2+0x4>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	b2db      	uxtb	r3, r3
}
 8005f54:	4318      	orrs	r0, r3
 8005f56:	4770      	bx	lr

08005f58 <HAL_RTC_SetTime>:
{
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005f5a:	7f03      	ldrb	r3, [r0, #28]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d078      	beq.n	8006052 <HAL_RTC_SetTime+0xfa>
 8005f60:	4604      	mov	r4, r0
 8005f62:	460e      	mov	r6, r1
 8005f64:	2301      	movs	r3, #1
 8005f66:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f68:	2302      	movs	r3, #2
 8005f6a:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8005f6c:	2a00      	cmp	r2, #0
 8005f6e:	d147      	bne.n	8006000 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f70:	6803      	ldr	r3, [r0, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f78:	d101      	bne.n	8005f7e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f7e:	7830      	ldrb	r0, [r6, #0]
 8005f80:	f7ff ffdf 	bl	8005f42 <RTC_ByteToBcd2>
 8005f84:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005f86:	7870      	ldrb	r0, [r6, #1]
 8005f88:	f7ff ffdb 	bl	8005f42 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f8c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005f90:	78b0      	ldrb	r0, [r6, #2]
 8005f92:	f7ff ffd6 	bl	8005f42 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005f96:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005f98:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f9a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	22ca      	movs	r2, #202	; 0xca
 8005fa2:	625a      	str	r2, [r3, #36]	; 0x24
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	2253      	movs	r2, #83	; 0x53
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005faa:	4620      	mov	r0, r4
 8005fac:	f7ff ff49 	bl	8005e42 <RTC_EnterInitMode>
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d136      	bne.n	8006024 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8005fbc:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8005fc0:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	6893      	ldr	r3, [r2, #8]
 8005fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fca:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005fcc:	6821      	ldr	r1, [r4, #0]
 8005fce:	688b      	ldr	r3, [r1, #8]
 8005fd0:	68f2      	ldr	r2, [r6, #12]
 8005fd2:	6930      	ldr	r0, [r6, #16]
 8005fd4:	4302      	orrs	r2, r0
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005fda:	6822      	ldr	r2, [r4, #0]
 8005fdc:	68d3      	ldr	r3, [r2, #12]
 8005fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f013 0f20 	tst.w	r3, #32
 8005fec:	d023      	beq.n	8006036 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	22ff      	movs	r2, #255	; 0xff
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	7723      	strb	r3, [r4, #28]
}
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006000:	6803      	ldr	r3, [r0, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006008:	d101      	bne.n	800600e <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 800600a:	2300      	movs	r3, #0
 800600c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800600e:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006010:	7870      	ldrb	r0, [r6, #1]
 8006012:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006014:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8006018:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800601a:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800601c:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800601e:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8006022:	e7bc      	b.n	8005f9e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	22ff      	movs	r2, #255	; 0xff
 8006028:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800602a:	2304      	movs	r3, #4
 800602c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800602e:	2300      	movs	r3, #0
 8006030:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8006032:	2701      	movs	r7, #1
 8006034:	e7e2      	b.n	8005ffc <HAL_RTC_SetTime+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006036:	4620      	mov	r0, r4
 8006038:	f7ff feea 	bl	8005e10 <HAL_RTC_WaitForSynchro>
 800603c:	2800      	cmp	r0, #0
 800603e:	d0d6      	beq.n	8005fee <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	22ff      	movs	r2, #255	; 0xff
 8006044:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006046:	2304      	movs	r3, #4
 8006048:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800604a:	2300      	movs	r3, #0
 800604c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800604e:	2701      	movs	r7, #1
 8006050:	e7d4      	b.n	8005ffc <HAL_RTC_SetTime+0xa4>
  __HAL_LOCK(hrtc);
 8006052:	2702      	movs	r7, #2
 8006054:	e7d2      	b.n	8005ffc <HAL_RTC_SetTime+0xa4>

08006056 <HAL_RTC_SetDate>:
{
 8006056:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8006058:	7f03      	ldrb	r3, [r0, #28]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d066      	beq.n	800612c <HAL_RTC_SetDate+0xd6>
 800605e:	4604      	mov	r4, r0
 8006060:	460e      	mov	r6, r1
 8006062:	2301      	movs	r3, #1
 8006064:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006066:	2302      	movs	r3, #2
 8006068:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800606a:	b93a      	cbnz	r2, 800607c <HAL_RTC_SetDate+0x26>
 800606c:	784b      	ldrb	r3, [r1, #1]
 800606e:	f013 0f10 	tst.w	r3, #16
 8006072:	d003      	beq.n	800607c <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006074:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8006078:	330a      	adds	r3, #10
 800607a:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 800607c:	2a00      	cmp	r2, #0
 800607e:	d133      	bne.n	80060e8 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006080:	78f0      	ldrb	r0, [r6, #3]
 8006082:	f7ff ff5e 	bl	8005f42 <RTC_ByteToBcd2>
 8006086:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006088:	7870      	ldrb	r0, [r6, #1]
 800608a:	f7ff ff5a 	bl	8005f42 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800608e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006092:	78b0      	ldrb	r0, [r6, #2]
 8006094:	f7ff ff55 	bl	8005f42 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006098:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));
 800609a:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800609c:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	22ca      	movs	r2, #202	; 0xca
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	2253      	movs	r2, #83	; 0x53
 80060aa:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80060ac:	4620      	mov	r0, r4
 80060ae:	f7ff fec8 	bl	8005e42 <RTC_EnterInitMode>
 80060b2:	4606      	mov	r6, r0
 80060b4:	bb18      	cbnz	r0, 80060fe <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80060bc:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80060c0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	68d3      	ldr	r3, [r2, #12]
 80060c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ca:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80060cc:	6823      	ldr	r3, [r4, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f013 0f20 	tst.w	r3, #32
 80060d4:	d01c      	beq.n	8006110 <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80060dc:	2301      	movs	r3, #1
 80060de:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80060e0:	2300      	movs	r3, #0
 80060e2:	7723      	strb	r3, [r4, #28]
}
 80060e4:	4630      	mov	r0, r6
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060e8:	78f5      	ldrb	r5, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80060ea:	7870      	ldrb	r0, [r6, #1]
 80060ec:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060ee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 80060f2:	78b5      	ldrb	r5, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80060f4:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 80060f6:	7835      	ldrb	r5, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060f8:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80060fc:	e7d0      	b.n	80060a0 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	22ff      	movs	r2, #255	; 0xff
 8006102:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006104:	2304      	movs	r3, #4
 8006106:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8006108:	2300      	movs	r3, #0
 800610a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 800610c:	2601      	movs	r6, #1
 800610e:	e7e9      	b.n	80060e4 <HAL_RTC_SetDate+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006110:	4620      	mov	r0, r4
 8006112:	f7ff fe7d 	bl	8005e10 <HAL_RTC_WaitForSynchro>
 8006116:	2800      	cmp	r0, #0
 8006118:	d0dd      	beq.n	80060d6 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	22ff      	movs	r2, #255	; 0xff
 800611e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006120:	2304      	movs	r3, #4
 8006122:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8006124:	2300      	movs	r3, #0
 8006126:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8006128:	2601      	movs	r6, #1
 800612a:	e7db      	b.n	80060e4 <HAL_RTC_SetDate+0x8e>
 __HAL_LOCK(hrtc);
 800612c:	2602      	movs	r6, #2
 800612e:	e7d9      	b.n	80060e4 <HAL_RTC_SetDate+0x8e>

08006130 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006130:	0903      	lsrs	r3, r0, #4
 8006132:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8006136:	f000 000f 	and.w	r0, r0, #15
 800613a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800613e:	b2c0      	uxtb	r0, r0
 8006140:	4770      	bx	lr

08006142 <HAL_RTC_GetTime>:
{
 8006142:	b570      	push	{r4, r5, r6, lr}
 8006144:	460c      	mov	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006146:	6803      	ldr	r3, [r0, #0]
 8006148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614a:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800614c:	6803      	ldr	r3, [r0, #0]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006154:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006156:	6803      	ldr	r3, [r0, #0]
 8006158:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800615a:	f3c5 4106 	ubfx	r1, r5, #16, #7
 800615e:	f3c5 4005 	ubfx	r0, r5, #16, #6
 8006162:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006164:	f3c5 2606 	ubfx	r6, r5, #8, #7
 8006168:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800616a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 800616e:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006170:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8006174:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8006176:	b952      	cbnz	r2, 800618e <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006178:	f7ff ffda 	bl	8006130 <RTC_Bcd2ToByte>
 800617c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800617e:	4630      	mov	r0, r6
 8006180:	f7ff ffd6 	bl	8006130 <RTC_Bcd2ToByte>
 8006184:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006186:	4628      	mov	r0, r5
 8006188:	f7ff ffd2 	bl	8006130 <RTC_Bcd2ToByte>
 800618c:	70a0      	strb	r0, [r4, #2]
}
 800618e:	2000      	movs	r0, #0
 8006190:	bd70      	pop	{r4, r5, r6, pc}

08006192 <HAL_RTC_GetDate>:
{
 8006192:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006194:	6803      	ldr	r3, [r0, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006198:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800619c:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800619e:	f3c3 2604 	ubfx	r6, r3, #8, #5
 80061a2:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80061a4:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 80061a8:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80061aa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80061ae:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80061b0:	b95a      	cbnz	r2, 80061ca <HAL_RTC_GetDate+0x38>
 80061b2:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80061b4:	f7ff ffbc 	bl	8006130 <RTC_Bcd2ToByte>
 80061b8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ffb8 	bl	8006130 <RTC_Bcd2ToByte>
 80061c0:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80061c2:	4628      	mov	r0, r5
 80061c4:	f7ff ffb4 	bl	8006130 <RTC_Bcd2ToByte>
 80061c8:	70a0      	strb	r0, [r4, #2]
}
 80061ca:	2000      	movs	r0, #0
 80061cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080061d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	4605      	mov	r5, r0
 80061d8:	4688      	mov	r8, r1
 80061da:	4617      	mov	r7, r2
 80061dc:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061de:	f7fe fb07 	bl	80047f0 <HAL_GetTick>
 80061e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e4:	1a1b      	subs	r3, r3, r0
 80061e6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80061ea:	f7fe fb01 	bl	80047f0 <HAL_GetTick>
 80061ee:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061f0:	4b2b      	ldr	r3, [pc, #172]	; (80062a0 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80061f8:	fb09 f303 	mul.w	r3, r9, r3
 80061fc:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061fe:	682b      	ldr	r3, [r5, #0]
 8006200:	689c      	ldr	r4, [r3, #8]
 8006202:	ea38 0304 	bics.w	r3, r8, r4
 8006206:	bf0c      	ite	eq
 8006208:	f04f 0c01 	moveq.w	ip, #1
 800620c:	f04f 0c00 	movne.w	ip, #0
 8006210:	45bc      	cmp	ip, r7
 8006212:	d040      	beq.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006214:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006218:	d0f1      	beq.n	80061fe <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800621a:	f7fe fae9 	bl	80047f0 <HAL_GetTick>
 800621e:	eba0 000a 	sub.w	r0, r0, sl
 8006222:	4548      	cmp	r0, r9
 8006224:	d20a      	bcs.n	800623c <SPI_WaitFlagStateUntilTimeout+0x6c>
 8006226:	f1b9 0f00 	cmp.w	r9, #0
 800622a:	d007      	beq.n	800623c <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800622c:	9a01      	ldr	r2, [sp, #4]
 800622e:	b102      	cbz	r2, 8006232 <SPI_WaitFlagStateUntilTimeout+0x62>
 8006230:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8006232:	9b01      	ldr	r3, [sp, #4]
 8006234:	3b01      	subs	r3, #1
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	4691      	mov	r9, r2
 800623a:	e7e0      	b.n	80061fe <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800623c:	682a      	ldr	r2, [r5, #0]
 800623e:	6853      	ldr	r3, [r2, #4]
 8006240:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006244:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006246:	686b      	ldr	r3, [r5, #4]
 8006248:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800624c:	d00b      	beq.n	8006266 <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800624e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006254:	d014      	beq.n	8006280 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 8006256:	2301      	movs	r3, #1
 8006258:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800625c:	2300      	movs	r3, #0
 800625e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8006262:	2003      	movs	r0, #3
 8006264:	e018      	b.n	8006298 <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006266:	68ab      	ldr	r3, [r5, #8]
 8006268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800626c:	d002      	beq.n	8006274 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800626e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006272:	d1ec      	bne.n	800624e <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 8006274:	682a      	ldr	r2, [r5, #0]
 8006276:	6813      	ldr	r3, [r2, #0]
 8006278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	e7e6      	b.n	800624e <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 8006280:	682a      	ldr	r2, [r5, #0]
 8006282:	6813      	ldr	r3, [r2, #0]
 8006284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	682a      	ldr	r2, [r5, #0]
 800628c:	6813      	ldr	r3, [r2, #0]
 800628e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	e7df      	b.n	8006256 <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 8006296:	2000      	movs	r0, #0
}
 8006298:	b002      	add	sp, #8
 800629a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629e:	bf00      	nop
 80062a0:	20000020 	.word	0x20000020

080062a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b510      	push	{r4, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062aa:	4b16      	ldr	r3, [pc, #88]	; (8006304 <SPI_EndRxTxTransaction+0x60>)
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	4b16      	ldr	r3, [pc, #88]	; (8006308 <SPI_EndRxTxTransaction+0x64>)
 80062b0:	fba3 3000 	umull	r3, r0, r3, r0
 80062b4:	0d40      	lsrs	r0, r0, #21
 80062b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062ba:	fb03 f000 	mul.w	r0, r3, r0
 80062be:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062c0:	6863      	ldr	r3, [r4, #4]
 80062c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c6:	d00b      	beq.n	80062e0 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062c8:	9b03      	ldr	r3, [sp, #12]
 80062ca:	b1bb      	cbz	r3, 80062fc <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062da:	d1f5      	bne.n	80062c8 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 80062dc:	2000      	movs	r0, #0
 80062de:	e00e      	b.n	80062fe <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062e0:	9200      	str	r2, [sp, #0]
 80062e2:	460b      	mov	r3, r1
 80062e4:	2200      	movs	r2, #0
 80062e6:	2180      	movs	r1, #128	; 0x80
 80062e8:	4620      	mov	r0, r4
 80062ea:	f7ff ff71 	bl	80061d0 <SPI_WaitFlagStateUntilTimeout>
 80062ee:	b130      	cbz	r0, 80062fe <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062f2:	f043 0320 	orr.w	r3, r3, #32
 80062f6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80062f8:	2003      	movs	r0, #3
 80062fa:	e000      	b.n	80062fe <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80062fc:	2000      	movs	r0, #0
}
 80062fe:	b004      	add	sp, #16
 8006300:	bd10      	pop	{r4, pc}
 8006302:	bf00      	nop
 8006304:	20000020 	.word	0x20000020
 8006308:	165e9f81 	.word	0x165e9f81

0800630c <HAL_SPI_Init>:
  if (hspi == NULL)
 800630c:	2800      	cmp	r0, #0
 800630e:	d05a      	beq.n	80063c6 <HAL_SPI_Init+0xba>
{
 8006310:	b510      	push	{r4, lr}
 8006312:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006314:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006316:	b933      	cbnz	r3, 8006326 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006318:	6843      	ldr	r3, [r0, #4]
 800631a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800631e:	d005      	beq.n	800632c <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006320:	2300      	movs	r3, #0
 8006322:	61c3      	str	r3, [r0, #28]
 8006324:	e002      	b.n	800632c <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006326:	2300      	movs	r3, #0
 8006328:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800632a:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800632c:	2300      	movs	r3, #0
 800632e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006330:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006334:	2b00      	cmp	r3, #0
 8006336:	d040      	beq.n	80063ba <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006338:	2302      	movs	r3, #2
 800633a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800633e:	6822      	ldr	r2, [r4, #0]
 8006340:	6813      	ldr	r3, [r2, #0]
 8006342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006346:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006348:	6863      	ldr	r3, [r4, #4]
 800634a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800634e:	68a2      	ldr	r2, [r4, #8]
 8006350:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8006354:	4313      	orrs	r3, r2
 8006356:	68e2      	ldr	r2, [r4, #12]
 8006358:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800635c:	4313      	orrs	r3, r2
 800635e:	6922      	ldr	r2, [r4, #16]
 8006360:	f002 0202 	and.w	r2, r2, #2
 8006364:	4313      	orrs	r3, r2
 8006366:	6962      	ldr	r2, [r4, #20]
 8006368:	f002 0201 	and.w	r2, r2, #1
 800636c:	4313      	orrs	r3, r2
 800636e:	69a2      	ldr	r2, [r4, #24]
 8006370:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006374:	4313      	orrs	r3, r2
 8006376:	69e2      	ldr	r2, [r4, #28]
 8006378:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800637c:	4313      	orrs	r3, r2
 800637e:	6a22      	ldr	r2, [r4, #32]
 8006380:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006384:	4313      	orrs	r3, r2
 8006386:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006388:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800638c:	6821      	ldr	r1, [r4, #0]
 800638e:	4313      	orrs	r3, r2
 8006390:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006392:	8b63      	ldrh	r3, [r4, #26]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800639a:	f002 0210 	and.w	r2, r2, #16
 800639e:	6821      	ldr	r1, [r4, #0]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	69d3      	ldr	r3, [r2, #28]
 80063a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063ac:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ae:	2000      	movs	r0, #0
 80063b0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80063b8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80063ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80063be:	4620      	mov	r0, r4
 80063c0:	f7fd ff6c 	bl	800429c <HAL_SPI_MspInit>
 80063c4:	e7b8      	b.n	8006338 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80063c6:	2001      	movs	r0, #1
}
 80063c8:	4770      	bx	lr

080063ca <HAL_SPI_Transmit>:
{
 80063ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063ce:	b083      	sub	sp, #12
 80063d0:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80063d2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	f000 80d1 	beq.w	800657e <HAL_SPI_Transmit+0x1b4>
 80063dc:	4604      	mov	r4, r0
 80063de:	4688      	mov	r8, r1
 80063e0:	4691      	mov	r9, r2
 80063e2:	2301      	movs	r3, #1
 80063e4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80063e8:	f7fe fa02 	bl	80047f0 <HAL_GetTick>
 80063ec:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80063ee:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80063f2:	b2f6      	uxtb	r6, r6
 80063f4:	2e01      	cmp	r6, #1
 80063f6:	f040 80af 	bne.w	8006558 <HAL_SPI_Transmit+0x18e>
  if ((pData == NULL) || (Size == 0U))
 80063fa:	f1b8 0f00 	cmp.w	r8, #0
 80063fe:	f000 80ac 	beq.w	800655a <HAL_SPI_Transmit+0x190>
 8006402:	f1b9 0f00 	cmp.w	r9, #0
 8006406:	f000 80a8 	beq.w	800655a <HAL_SPI_Transmit+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800640a:	2303      	movs	r3, #3
 800640c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006410:	2300      	movs	r3, #0
 8006412:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006414:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006418:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 800641c:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006420:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006422:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006424:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006426:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006428:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642a:	68a3      	ldr	r3, [r4, #8]
 800642c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006430:	d01e      	beq.n	8006470 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	f012 0f40 	tst.w	r2, #64	; 0x40
 800643a:	d103      	bne.n	8006444 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006442:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006444:	68e3      	ldr	r3, [r4, #12]
 8006446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644a:	d01c      	beq.n	8006486 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800644c:	6863      	ldr	r3, [r4, #4]
 800644e:	b113      	cbz	r3, 8006456 <HAL_SPI_Transmit+0x8c>
 8006450:	f1b9 0f01 	cmp.w	r9, #1
 8006454:	d152      	bne.n	80064fc <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006456:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	7812      	ldrb	r2, [r2, #0]
 800645c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800645e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006460:	3301      	adds	r3, #1
 8006462:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006464:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29b      	uxth	r3, r3
 800646c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800646e:	e045      	b.n	80064fc <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8006470:	6822      	ldr	r2, [r4, #0]
 8006472:	6813      	ldr	r3, [r2, #0]
 8006474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006478:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800647a:	6822      	ldr	r2, [r4, #0]
 800647c:	6813      	ldr	r3, [r2, #0]
 800647e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	e7d5      	b.n	8006432 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006486:	6863      	ldr	r3, [r4, #4]
 8006488:	b113      	cbz	r3, 8006490 <HAL_SPI_Transmit+0xc6>
 800648a:	f1b9 0f01 	cmp.w	r9, #1
 800648e:	d116      	bne.n	80064be <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006490:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	8812      	ldrh	r2, [r2, #0]
 8006496:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006498:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800649a:	3302      	adds	r3, #2
 800649c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800649e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80064a8:	e009      	b.n	80064be <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064aa:	f7fe f9a1 	bl	80047f0 <HAL_GetTick>
 80064ae:	1bc0      	subs	r0, r0, r7
 80064b0:	42a8      	cmp	r0, r5
 80064b2:	d302      	bcc.n	80064ba <HAL_SPI_Transmit+0xf0>
 80064b4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80064b8:	d159      	bne.n	800656e <HAL_SPI_Transmit+0x1a4>
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	d059      	beq.n	8006572 <HAL_SPI_Transmit+0x1a8>
    while (hspi->TxXferCount > 0U)
 80064be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d033      	beq.n	800652e <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	f012 0f02 	tst.w	r2, #2
 80064ce:	d0ec      	beq.n	80064aa <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80064d2:	8812      	ldrh	r2, [r2, #0]
 80064d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064d8:	3302      	adds	r3, #2
 80064da:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80064dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80064e6:	e7ea      	b.n	80064be <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064e8:	f7fe f982 	bl	80047f0 <HAL_GetTick>
 80064ec:	1bc0      	subs	r0, r0, r7
 80064ee:	42a8      	cmp	r0, r5
 80064f0:	d302      	bcc.n	80064f8 <HAL_SPI_Transmit+0x12e>
 80064f2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80064f6:	d13e      	bne.n	8006576 <HAL_SPI_Transmit+0x1ac>
 80064f8:	2d00      	cmp	r5, #0
 80064fa:	d03e      	beq.n	800657a <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 80064fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80064fe:	b29b      	uxth	r3, r3
 8006500:	b1ab      	cbz	r3, 800652e <HAL_SPI_Transmit+0x164>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	f012 0f02 	tst.w	r2, #2
 800650a:	d0ed      	beq.n	80064e8 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800650c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800650e:	7812      	ldrb	r2, [r2, #0]
 8006510:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006512:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006514:	3301      	adds	r3, #1
 8006516:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006518:	f8b4 c036 	ldrh.w	ip, [r4, #54]	; 0x36
 800651c:	fa1f fc8c 	uxth.w	ip, ip
 8006520:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006524:	fa1f fc8c 	uxth.w	ip, ip
 8006528:	f8a4 c036 	strh.w	ip, [r4, #54]	; 0x36
 800652c:	e7e6      	b.n	80064fc <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800652e:	463a      	mov	r2, r7
 8006530:	4629      	mov	r1, r5
 8006532:	4620      	mov	r0, r4
 8006534:	f7ff feb6 	bl	80062a4 <SPI_EndRxTxTransaction>
 8006538:	b108      	cbz	r0, 800653e <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800653a:	2320      	movs	r3, #32
 800653c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800653e:	68a3      	ldr	r3, [r4, #8]
 8006540:	b933      	cbnz	r3, 8006550 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	6823      	ldr	r3, [r4, #0]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	9201      	str	r2, [sp, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	9301      	str	r3, [sp, #4]
 800654e:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006550:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006552:	b913      	cbnz	r3, 800655a <HAL_SPI_Transmit+0x190>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006554:	2600      	movs	r6, #0
 8006556:	e000      	b.n	800655a <HAL_SPI_Transmit+0x190>
    errorcode = HAL_BUSY;
 8006558:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800655a:	2301      	movs	r3, #1
 800655c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006560:	2300      	movs	r3, #0
 8006562:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006566:	4630      	mov	r0, r6
 8006568:	b003      	add	sp, #12
 800656a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 800656e:	2603      	movs	r6, #3
 8006570:	e7f3      	b.n	800655a <HAL_SPI_Transmit+0x190>
 8006572:	2603      	movs	r6, #3
 8006574:	e7f1      	b.n	800655a <HAL_SPI_Transmit+0x190>
          errorcode = HAL_TIMEOUT;
 8006576:	2603      	movs	r6, #3
 8006578:	e7ef      	b.n	800655a <HAL_SPI_Transmit+0x190>
 800657a:	2603      	movs	r6, #3
 800657c:	e7ed      	b.n	800655a <HAL_SPI_Transmit+0x190>
  __HAL_LOCK(hspi);
 800657e:	2602      	movs	r6, #2
 8006580:	e7f1      	b.n	8006566 <HAL_SPI_Transmit+0x19c>

08006582 <HAL_SPI_TransmitReceive>:
{
 8006582:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006586:	b083      	sub	sp, #12
 8006588:	461f      	mov	r7, r3
 800658a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800658c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006590:	2b01      	cmp	r3, #1
 8006592:	f000 8110 	beq.w	80067b6 <HAL_SPI_TransmitReceive+0x234>
 8006596:	4604      	mov	r4, r0
 8006598:	4688      	mov	r8, r1
 800659a:	4691      	mov	r9, r2
 800659c:	2301      	movs	r3, #1
 800659e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80065a2:	f7fe f925 	bl	80047f0 <HAL_GetTick>
 80065a6:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80065a8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80065ac:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80065ae:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d00a      	beq.n	80065ca <HAL_SPI_TransmitReceive+0x48>
 80065b4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80065b8:	f040 80e3 	bne.w	8006782 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065bc:	68a2      	ldr	r2, [r4, #8]
 80065be:	2a00      	cmp	r2, #0
 80065c0:	f040 80e9 	bne.w	8006796 <HAL_SPI_TransmitReceive+0x214>
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	f040 80e8 	bne.w	800679a <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065ca:	f1b8 0f00 	cmp.w	r8, #0
 80065ce:	f000 80e6 	beq.w	800679e <HAL_SPI_TransmitReceive+0x21c>
 80065d2:	f1b9 0f00 	cmp.w	r9, #0
 80065d6:	f000 80e4 	beq.w	80067a2 <HAL_SPI_TransmitReceive+0x220>
 80065da:	2f00      	cmp	r7, #0
 80065dc:	f000 80e3 	beq.w	80067a6 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065e0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d002      	beq.n	80065f0 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065ea:	2305      	movs	r3, #5
 80065ec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065f4:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80065f8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065fa:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065fc:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006600:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006602:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 8006604:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006606:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006610:	d103      	bne.n	800661a <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006618:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800661a:	68e3      	ldr	r3, [r4, #12]
 800661c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006620:	d011      	beq.n	8006646 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006622:	6863      	ldr	r3, [r4, #4]
 8006624:	b10b      	cbz	r3, 800662a <HAL_SPI_TransmitReceive+0xa8>
 8006626:	2f01      	cmp	r7, #1
 8006628:	d10b      	bne.n	8006642 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800662a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	7812      	ldrb	r2, [r2, #0]
 8006630:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006632:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006634:	3301      	adds	r3, #1
 8006636:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006638:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29b      	uxth	r3, r3
 8006640:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006642:	2701      	movs	r7, #1
 8006644:	e06b      	b.n	800671e <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006646:	6863      	ldr	r3, [r4, #4]
 8006648:	b10b      	cbz	r3, 800664e <HAL_SPI_TransmitReceive+0xcc>
 800664a:	2f01      	cmp	r7, #1
 800664c:	d10b      	bne.n	8006666 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800664e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	8812      	ldrh	r2, [r2, #0]
 8006654:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006656:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006658:	3302      	adds	r3, #2
 800665a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800665c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29b      	uxth	r3, r3
 8006664:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006666:	2701      	movs	r7, #1
 8006668:	e01c      	b.n	80066a4 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	f012 0f01 	tst.w	r2, #1
 8006672:	d00e      	beq.n	8006692 <HAL_SPI_TransmitReceive+0x110>
 8006674:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006676:	b292      	uxth	r2, r2
 8006678:	b15a      	cbz	r2, 8006692 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800667e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006682:	3302      	adds	r3, #2
 8006684:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006686:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006688:	b29b      	uxth	r3, r3
 800668a:	3b01      	subs	r3, #1
 800668c:	b29b      	uxth	r3, r3
 800668e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006690:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006692:	f7fe f8ad 	bl	80047f0 <HAL_GetTick>
 8006696:	1b80      	subs	r0, r0, r6
 8006698:	42a8      	cmp	r0, r5
 800669a:	d303      	bcc.n	80066a4 <HAL_SPI_TransmitReceive+0x122>
 800669c:	f1b5 3fff 	cmp.w	r5, #4294967295
 80066a0:	f040 8083 	bne.w	80067aa <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	b91b      	cbnz	r3, 80066b2 <HAL_SPI_TransmitReceive+0x130>
 80066aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d053      	beq.n	800675a <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066b2:	6823      	ldr	r3, [r4, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	f012 0f02 	tst.w	r2, #2
 80066ba:	d0d6      	beq.n	800666a <HAL_SPI_TransmitReceive+0xe8>
 80066bc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80066be:	b292      	uxth	r2, r2
 80066c0:	2a00      	cmp	r2, #0
 80066c2:	d0d2      	beq.n	800666a <HAL_SPI_TransmitReceive+0xe8>
 80066c4:	2f00      	cmp	r7, #0
 80066c6:	d0d0      	beq.n	800666a <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80066ca:	8812      	ldrh	r2, [r2, #0]
 80066cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066d0:	3302      	adds	r3, #2
 80066d2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80066d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	b29b      	uxth	r3, r3
 80066dc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80066de:	2700      	movs	r7, #0
 80066e0:	e7c3      	b.n	800666a <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	f012 0f01 	tst.w	r2, #1
 80066ea:	d00e      	beq.n	800670a <HAL_SPI_TransmitReceive+0x188>
 80066ec:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80066ee:	b292      	uxth	r2, r2
 80066f0:	b15a      	cbz	r2, 800670a <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066fa:	3301      	adds	r3, #1
 80066fc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80066fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006700:	b29b      	uxth	r3, r3
 8006702:	3b01      	subs	r3, #1
 8006704:	b29b      	uxth	r3, r3
 8006706:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006708:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800670a:	f7fe f871 	bl	80047f0 <HAL_GetTick>
 800670e:	1b83      	subs	r3, r0, r6
 8006710:	42ab      	cmp	r3, r5
 8006712:	d302      	bcc.n	800671a <HAL_SPI_TransmitReceive+0x198>
 8006714:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006718:	d149      	bne.n	80067ae <HAL_SPI_TransmitReceive+0x22c>
 800671a:	2d00      	cmp	r5, #0
 800671c:	d049      	beq.n	80067b2 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800671e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006720:	b29b      	uxth	r3, r3
 8006722:	b913      	cbnz	r3, 800672a <HAL_SPI_TransmitReceive+0x1a8>
 8006724:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006726:	b29b      	uxth	r3, r3
 8006728:	b1bb      	cbz	r3, 800675a <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	f012 0f02 	tst.w	r2, #2
 8006732:	d0d6      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x160>
 8006734:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006736:	b292      	uxth	r2, r2
 8006738:	2a00      	cmp	r2, #0
 800673a:	d0d2      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x160>
 800673c:	2f00      	cmp	r7, #0
 800673e:	d0d0      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006740:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006742:	7812      	ldrb	r2, [r2, #0]
 8006744:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006746:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006748:	3301      	adds	r3, #1
 800674a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800674c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b01      	subs	r3, #1
 8006752:	b29b      	uxth	r3, r3
 8006754:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006756:	2700      	movs	r7, #0
 8006758:	e7c3      	b.n	80066e2 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800675a:	4632      	mov	r2, r6
 800675c:	4629      	mov	r1, r5
 800675e:	4620      	mov	r0, r4
 8006760:	f7ff fda0 	bl	80062a4 <SPI_EndRxTxTransaction>
 8006764:	b948      	cbnz	r0, 800677a <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006766:	68a3      	ldr	r3, [r4, #8]
 8006768:	b963      	cbnz	r3, 8006784 <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800676a:	9301      	str	r3, [sp, #4]
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	9201      	str	r2, [sp, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	e004      	b.n	8006784 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800677a:	2320      	movs	r3, #32
 800677c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800677e:	2001      	movs	r0, #1
    goto error;
 8006780:	e000      	b.n	8006784 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8006782:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006784:	2301      	movs	r3, #1
 8006786:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800678a:	2300      	movs	r3, #0
 800678c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006790:	b003      	add	sp, #12
 8006792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8006796:	2002      	movs	r0, #2
 8006798:	e7f4      	b.n	8006784 <HAL_SPI_TransmitReceive+0x202>
 800679a:	2002      	movs	r0, #2
 800679c:	e7f2      	b.n	8006784 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 800679e:	2001      	movs	r0, #1
 80067a0:	e7f0      	b.n	8006784 <HAL_SPI_TransmitReceive+0x202>
 80067a2:	2001      	movs	r0, #1
 80067a4:	e7ee      	b.n	8006784 <HAL_SPI_TransmitReceive+0x202>
 80067a6:	2001      	movs	r0, #1
 80067a8:	e7ec      	b.n	8006784 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80067aa:	2003      	movs	r0, #3
 80067ac:	e7ea      	b.n	8006784 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80067ae:	2003      	movs	r0, #3
 80067b0:	e7e8      	b.n	8006784 <HAL_SPI_TransmitReceive+0x202>
 80067b2:	2003      	movs	r0, #3
 80067b4:	e7e6      	b.n	8006784 <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80067b6:	2002      	movs	r0, #2
 80067b8:	e7ea      	b.n	8006790 <HAL_SPI_TransmitReceive+0x20e>
	...

080067bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067be:	6a03      	ldr	r3, [r0, #32]
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ca:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067cc:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067d0:	680c      	ldr	r4, [r1, #0]
 80067d2:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067d6:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067da:	688b      	ldr	r3, [r1, #8]
 80067dc:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067de:	4c0d      	ldr	r4, [pc, #52]	; (8006814 <TIM_OC1_SetConfig+0x58>)
 80067e0:	42a0      	cmp	r0, r4
 80067e2:	d009      	beq.n	80067f8 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e4:	4c0b      	ldr	r4, [pc, #44]	; (8006814 <TIM_OC1_SetConfig+0x58>)
 80067e6:	42a0      	cmp	r0, r4
 80067e8:	d00d      	beq.n	8006806 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ea:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ec:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ee:	684a      	ldr	r2, [r1, #4]
 80067f0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f2:	6203      	str	r3, [r0, #32]
}
 80067f4:	bc70      	pop	{r4, r5, r6}
 80067f6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80067f8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80067fc:	68ca      	ldr	r2, [r1, #12]
 80067fe:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8006800:	f023 0304 	bic.w	r3, r3, #4
 8006804:	e7ee      	b.n	80067e4 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006806:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800680a:	694a      	ldr	r2, [r1, #20]
 800680c:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800680e:	698e      	ldr	r6, [r1, #24]
 8006810:	4316      	orrs	r6, r2
 8006812:	e7ea      	b.n	80067ea <TIM_OC1_SetConfig+0x2e>
 8006814:	40010000 	.word	0x40010000

08006818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006818:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800681a:	6a03      	ldr	r3, [r0, #32]
 800681c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006820:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006826:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006828:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800682c:	680c      	ldr	r4, [r1, #0]
 800682e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006834:	688c      	ldr	r4, [r1, #8]
 8006836:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800683a:	4c0f      	ldr	r4, [pc, #60]	; (8006878 <TIM_OC3_SetConfig+0x60>)
 800683c:	42a0      	cmp	r0, r4
 800683e:	d009      	beq.n	8006854 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006840:	4c0d      	ldr	r4, [pc, #52]	; (8006878 <TIM_OC3_SetConfig+0x60>)
 8006842:	42a0      	cmp	r0, r4
 8006844:	d00e      	beq.n	8006864 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006846:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006848:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800684a:	684a      	ldr	r2, [r1, #4]
 800684c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684e:	6203      	str	r3, [r0, #32]
}
 8006850:	bc30      	pop	{r4, r5}
 8006852:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006858:	68cc      	ldr	r4, [r1, #12]
 800685a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800685e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006862:	e7ed      	b.n	8006840 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006864:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006868:	694c      	ldr	r4, [r1, #20]
 800686a:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800686e:	698c      	ldr	r4, [r1, #24]
 8006870:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8006874:	e7e7      	b.n	8006846 <TIM_OC3_SetConfig+0x2e>
 8006876:	bf00      	nop
 8006878:	40010000 	.word	0x40010000

0800687c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800687c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800687e:	6a03      	ldr	r3, [r0, #32]
 8006880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006884:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006886:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006888:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800688a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800688c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006890:	680d      	ldr	r5, [r1, #0]
 8006892:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800689a:	688d      	ldr	r5, [r1, #8]
 800689c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a0:	4d07      	ldr	r5, [pc, #28]	; (80068c0 <TIM_OC4_SetConfig+0x44>)
 80068a2:	42a8      	cmp	r0, r5
 80068a4:	d006      	beq.n	80068b4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068a8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068aa:	684a      	ldr	r2, [r1, #4]
 80068ac:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ae:	6203      	str	r3, [r0, #32]
}
 80068b0:	bc30      	pop	{r4, r5}
 80068b2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068b4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b8:	694d      	ldr	r5, [r1, #20]
 80068ba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80068be:	e7f2      	b.n	80068a6 <TIM_OC4_SetConfig+0x2a>
 80068c0:	40010000 	.word	0x40010000

080068c4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80068c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d12f      	bne.n	800692e <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 80068ce:	2302      	movs	r3, #2
 80068d0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068d4:	6802      	ldr	r2, [r0, #0]
 80068d6:	68d3      	ldr	r3, [r2, #12]
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068de:	6803      	ldr	r3, [r0, #0]
 80068e0:	4a15      	ldr	r2, [pc, #84]	; (8006938 <HAL_TIM_Base_Start_IT+0x74>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d018      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x54>
 80068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ea:	d015      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x54>
 80068ec:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d011      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x54>
 80068f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00d      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x54>
 80068fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006900:	4293      	cmp	r3, r2
 8006902:	d009      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x54>
 8006904:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006908:	4293      	cmp	r3, r2
 800690a:	d005      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006914:	2000      	movs	r0, #0
 8006916:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800691e:	2a06      	cmp	r2, #6
 8006920:	d007      	beq.n	8006932 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	f042 0201 	orr.w	r2, r2, #1
 8006928:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800692a:	2000      	movs	r0, #0
 800692c:	4770      	bx	lr
    return HAL_ERROR;
 800692e:	2001      	movs	r0, #1
 8006930:	4770      	bx	lr
  return HAL_OK;
 8006932:	2000      	movs	r0, #0
}
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40010000 	.word	0x40010000

0800693c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800693c:	6802      	ldr	r2, [r0, #0]
 800693e:	68d3      	ldr	r3, [r2, #12]
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8006946:	6803      	ldr	r3, [r0, #0]
 8006948:	6a19      	ldr	r1, [r3, #32]
 800694a:	f241 1211 	movw	r2, #4369	; 0x1111
 800694e:	4211      	tst	r1, r2
 8006950:	d108      	bne.n	8006964 <HAL_TIM_Base_Stop_IT+0x28>
 8006952:	6a19      	ldr	r1, [r3, #32]
 8006954:	f240 4244 	movw	r2, #1092	; 0x444
 8006958:	4211      	tst	r1, r2
 800695a:	d103      	bne.n	8006964 <HAL_TIM_Base_Stop_IT+0x28>
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	f022 0201 	bic.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006964:	2301      	movs	r3, #1
 8006966:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800696a:	2000      	movs	r0, #0
 800696c:	4770      	bx	lr

0800696e <HAL_TIM_OC_DelayElapsedCallback>:
}
 800696e:	4770      	bx	lr

08006970 <HAL_TIM_IC_CaptureCallback>:
}
 8006970:	4770      	bx	lr

08006972 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006972:	4770      	bx	lr

08006974 <HAL_TIM_TriggerCallback>:
}
 8006974:	4770      	bx	lr

08006976 <HAL_TIM_IRQHandler>:
{
 8006976:	b510      	push	{r4, lr}
 8006978:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800697a:	6803      	ldr	r3, [r0, #0]
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	f012 0f02 	tst.w	r2, #2
 8006982:	d011      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	f012 0f02 	tst.w	r2, #2
 800698a:	d00d      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800698c:	f06f 0202 	mvn.w	r2, #2
 8006990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006992:	2301      	movs	r3, #1
 8006994:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006996:	6803      	ldr	r3, [r0, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f013 0f03 	tst.w	r3, #3
 800699e:	d070      	beq.n	8006a82 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80069a0:	f7ff ffe6 	bl	8006970 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a4:	2300      	movs	r3, #0
 80069a6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	f012 0f04 	tst.w	r2, #4
 80069b0:	d012      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	f012 0f04 	tst.w	r2, #4
 80069b8:	d00e      	beq.n	80069d8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069ba:	f06f 0204 	mvn.w	r2, #4
 80069be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069c0:	2302      	movs	r3, #2
 80069c2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80069cc:	d05f      	beq.n	8006a8e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80069ce:	4620      	mov	r0, r4
 80069d0:	f7ff ffce 	bl	8006970 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069d4:	2300      	movs	r3, #0
 80069d6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	f012 0f08 	tst.w	r2, #8
 80069e0:	d012      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	f012 0f08 	tst.w	r2, #8
 80069e8:	d00e      	beq.n	8006a08 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ea:	f06f 0208 	mvn.w	r2, #8
 80069ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069f0:	2304      	movs	r3, #4
 80069f2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f013 0f03 	tst.w	r3, #3
 80069fc:	d04e      	beq.n	8006a9c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80069fe:	4620      	mov	r0, r4
 8006a00:	f7ff ffb6 	bl	8006970 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a04:	2300      	movs	r3, #0
 8006a06:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	691a      	ldr	r2, [r3, #16]
 8006a0c:	f012 0f10 	tst.w	r2, #16
 8006a10:	d012      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	f012 0f10 	tst.w	r2, #16
 8006a18:	d00e      	beq.n	8006a38 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a1a:	f06f 0210 	mvn.w	r2, #16
 8006a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a20:	2308      	movs	r3, #8
 8006a22:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006a2c:	d03d      	beq.n	8006aaa <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f7ff ff9e 	bl	8006970 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a34:	2300      	movs	r3, #0
 8006a36:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	691a      	ldr	r2, [r3, #16]
 8006a3c:	f012 0f01 	tst.w	r2, #1
 8006a40:	d003      	beq.n	8006a4a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	f012 0f01 	tst.w	r2, #1
 8006a48:	d136      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a52:	d003      	beq.n	8006a5c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a5a:	d134      	bne.n	8006ac6 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a64:	d003      	beq.n	8006a6e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a6c:	d132      	bne.n	8006ad4 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	691a      	ldr	r2, [r3, #16]
 8006a72:	f012 0f20 	tst.w	r2, #32
 8006a76:	d003      	beq.n	8006a80 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	f012 0f20 	tst.w	r2, #32
 8006a7e:	d130      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x16c>
}
 8006a80:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a82:	f7ff ff74 	bl	800696e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a86:	4620      	mov	r0, r4
 8006a88:	f7ff ff73 	bl	8006972 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a8c:	e78a      	b.n	80069a4 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f7ff ff6d 	bl	800696e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7ff ff6c 	bl	8006972 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a9a:	e79b      	b.n	80069d4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f7ff ff66 	bl	800696e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7ff ff65 	bl	8006972 <HAL_TIM_PWM_PulseFinishedCallback>
 8006aa8:	e7ac      	b.n	8006a04 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aaa:	4620      	mov	r0, r4
 8006aac:	f7ff ff5f 	bl	800696e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7ff ff5e 	bl	8006972 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ab6:	e7bd      	b.n	8006a34 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ab8:	f06f 0201 	mvn.w	r2, #1
 8006abc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f7fb ff92 	bl	80029e8 <HAL_TIM_PeriodElapsedCallback>
 8006ac4:	e7c1      	b.n	8006a4a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ac6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 f956 	bl	8006d7e <HAL_TIMEx_BreakCallback>
 8006ad2:	e7c3      	b.n	8006a5c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ad8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff ff4a 	bl	8006974 <HAL_TIM_TriggerCallback>
 8006ae0:	e7c5      	b.n	8006a6e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ae2:	f06f 0220 	mvn.w	r2, #32
 8006ae6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 f947 	bl	8006d7c <HAL_TIMEx_CommutCallback>
}
 8006aee:	e7c7      	b.n	8006a80 <HAL_TIM_IRQHandler+0x10a>

08006af0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006af0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af2:	4a25      	ldr	r2, [pc, #148]	; (8006b88 <TIM_Base_SetConfig+0x98>)
 8006af4:	4290      	cmp	r0, r2
 8006af6:	d00e      	beq.n	8006b16 <TIM_Base_SetConfig+0x26>
 8006af8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006afc:	d00b      	beq.n	8006b16 <TIM_Base_SetConfig+0x26>
 8006afe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006b02:	4290      	cmp	r0, r2
 8006b04:	d007      	beq.n	8006b16 <TIM_Base_SetConfig+0x26>
 8006b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b0a:	4290      	cmp	r0, r2
 8006b0c:	d003      	beq.n	8006b16 <TIM_Base_SetConfig+0x26>
 8006b0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b12:	4290      	cmp	r0, r2
 8006b14:	d103      	bne.n	8006b1e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b1a:	684a      	ldr	r2, [r1, #4]
 8006b1c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b1e:	4a1a      	ldr	r2, [pc, #104]	; (8006b88 <TIM_Base_SetConfig+0x98>)
 8006b20:	4290      	cmp	r0, r2
 8006b22:	d01a      	beq.n	8006b5a <TIM_Base_SetConfig+0x6a>
 8006b24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006b28:	d017      	beq.n	8006b5a <TIM_Base_SetConfig+0x6a>
 8006b2a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006b2e:	4290      	cmp	r0, r2
 8006b30:	d013      	beq.n	8006b5a <TIM_Base_SetConfig+0x6a>
 8006b32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b36:	4290      	cmp	r0, r2
 8006b38:	d00f      	beq.n	8006b5a <TIM_Base_SetConfig+0x6a>
 8006b3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b3e:	4290      	cmp	r0, r2
 8006b40:	d00b      	beq.n	8006b5a <TIM_Base_SetConfig+0x6a>
 8006b42:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006b46:	4290      	cmp	r0, r2
 8006b48:	d007      	beq.n	8006b5a <TIM_Base_SetConfig+0x6a>
 8006b4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b4e:	4290      	cmp	r0, r2
 8006b50:	d003      	beq.n	8006b5a <TIM_Base_SetConfig+0x6a>
 8006b52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b56:	4290      	cmp	r0, r2
 8006b58:	d103      	bne.n	8006b62 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b5e:	68ca      	ldr	r2, [r1, #12]
 8006b60:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b66:	694a      	ldr	r2, [r1, #20]
 8006b68:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006b6a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b6c:	688b      	ldr	r3, [r1, #8]
 8006b6e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b70:	680b      	ldr	r3, [r1, #0]
 8006b72:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b74:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <TIM_Base_SetConfig+0x98>)
 8006b76:	4298      	cmp	r0, r3
 8006b78:	d002      	beq.n	8006b80 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	6143      	str	r3, [r0, #20]
}
 8006b7e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8006b80:	690b      	ldr	r3, [r1, #16]
 8006b82:	6303      	str	r3, [r0, #48]	; 0x30
 8006b84:	e7f9      	b.n	8006b7a <TIM_Base_SetConfig+0x8a>
 8006b86:	bf00      	nop
 8006b88:	40010000 	.word	0x40010000

08006b8c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006b8c:	b340      	cbz	r0, 8006be0 <HAL_TIM_Base_Init+0x54>
{
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006b96:	b1f3      	cbz	r3, 8006bd6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	f851 0b04 	ldr.w	r0, [r1], #4
 8006ba4:	f7ff ffa4 	bl	8006af0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006bb2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006bb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006bba:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006bca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006bce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006bd2:	2000      	movs	r0, #0
}
 8006bd4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006bd6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006bda:	f7fd fc03 	bl	80043e4 <HAL_TIM_Base_MspInit>
 8006bde:	e7db      	b.n	8006b98 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006be0:	2001      	movs	r0, #1
}
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8006be4:	b340      	cbz	r0, 8006c38 <HAL_TIM_OC_Init+0x54>
{
 8006be6:	b510      	push	{r4, lr}
 8006be8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006bea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006bee:	b1f3      	cbz	r3, 8006c2e <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	f851 0b04 	ldr.w	r0, [r1], #4
 8006bfc:	f7ff ff78 	bl	8006af0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c00:	2301      	movs	r3, #1
 8006c02:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006c0a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006c0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006c12:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006c22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006c26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006c2a:	2000      	movs	r0, #0
}
 8006c2c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006c2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8006c32:	f7fd fb6b 	bl	800430c <HAL_TIM_OC_MspInit>
 8006c36:	e7db      	b.n	8006bf0 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8006c38:	2001      	movs	r0, #1
}
 8006c3a:	4770      	bx	lr

08006c3c <TIM_OC2_SetConfig>:
{
 8006c3c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c3e:	6a03      	ldr	r3, [r0, #32]
 8006c40:	f023 0310 	bic.w	r3, r3, #16
 8006c44:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006c46:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006c48:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006c4a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c4c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c50:	680d      	ldr	r5, [r1, #0]
 8006c52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006c56:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c5a:	688d      	ldr	r5, [r1, #8]
 8006c5c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c60:	4d0e      	ldr	r5, [pc, #56]	; (8006c9c <TIM_OC2_SetConfig+0x60>)
 8006c62:	42a8      	cmp	r0, r5
 8006c64:	d009      	beq.n	8006c7a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c66:	4d0d      	ldr	r5, [pc, #52]	; (8006c9c <TIM_OC2_SetConfig+0x60>)
 8006c68:	42a8      	cmp	r0, r5
 8006c6a:	d00e      	beq.n	8006c8a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8006c6c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006c6e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006c70:	684a      	ldr	r2, [r1, #4]
 8006c72:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006c74:	6203      	str	r3, [r0, #32]
}
 8006c76:	bc30      	pop	{r4, r5}
 8006c78:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c7e:	68cd      	ldr	r5, [r1, #12]
 8006c80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c88:	e7ed      	b.n	8006c66 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c8a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c8e:	694d      	ldr	r5, [r1, #20]
 8006c90:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c94:	698d      	ldr	r5, [r1, #24]
 8006c96:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8006c9a:	e7e7      	b.n	8006c6c <TIM_OC2_SetConfig+0x30>
 8006c9c:	40010000 	.word	0x40010000

08006ca0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8006ca0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d028      	beq.n	8006cfa <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006cac:	2301      	movs	r3, #1
 8006cae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006cb2:	2a0c      	cmp	r2, #12
 8006cb4:	d81c      	bhi.n	8006cf0 <HAL_TIM_OC_ConfigChannel+0x50>
 8006cb6:	e8df f002 	tbb	[pc, r2]
 8006cba:	1b07      	.short	0x1b07
 8006cbc:	1b0c1b1b 	.word	0x1b0c1b1b
 8006cc0:	1b111b1b 	.word	0x1b111b1b
 8006cc4:	1b1b      	.short	0x1b1b
 8006cc6:	16          	.byte	0x16
 8006cc7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cc8:	6800      	ldr	r0, [r0, #0]
 8006cca:	f7ff fd77 	bl	80067bc <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006cce:	2000      	movs	r0, #0
      break;
 8006cd0:	e00f      	b.n	8006cf2 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cd2:	6800      	ldr	r0, [r0, #0]
 8006cd4:	f7ff ffb2 	bl	8006c3c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006cd8:	2000      	movs	r0, #0
      break;
 8006cda:	e00a      	b.n	8006cf2 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cdc:	6800      	ldr	r0, [r0, #0]
 8006cde:	f7ff fd9b 	bl	8006818 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006ce2:	2000      	movs	r0, #0
      break;
 8006ce4:	e005      	b.n	8006cf2 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ce6:	6800      	ldr	r0, [r0, #0]
 8006ce8:	f7ff fdc8 	bl	800687c <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006cec:	2000      	movs	r0, #0
      break;
 8006cee:	e000      	b.n	8006cf2 <HAL_TIM_OC_ConfigChannel+0x52>
  switch (Channel)
 8006cf0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006cf8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8006cfa:	2002      	movs	r0, #2
}
 8006cfc:	4770      	bx	lr
	...

08006d00 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d035      	beq.n	8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x74>
{
 8006d08:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	2302      	movs	r3, #2
 8006d12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d16:	6803      	ldr	r3, [r0, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d1a:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d1c:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d20:	680a      	ldr	r2, [r1, #0]
 8006d22:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d28:	6803      	ldr	r3, [r0, #0]
 8006d2a:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d012      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d34:	d00f      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d36:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d00b      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d007      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d003      	beq.n	8006d56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006d4e:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d104      	bne.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d56:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d5a:	684a      	ldr	r2, [r1, #4]
 8006d5c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d5e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d66:	2300      	movs	r3, #0
 8006d68:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006d6c:	4618      	mov	r0, r3
}
 8006d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d72:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006d74:	2002      	movs	r0, #2
}
 8006d76:	4770      	bx	lr
 8006d78:	40010000 	.word	0x40010000

08006d7c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d7c:	4770      	bx	lr

08006d7e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d7e:	4770      	bx	lr

08006d80 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d80:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	f102 030c 	add.w	r3, r2, #12
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	320c      	adds	r2, #12
 8006d90:	e842 3100 	strex	r1, r3, [r2]
 8006d94:	2900      	cmp	r1, #0
 8006d96:	d1f3      	bne.n	8006d80 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d98:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	f102 0314 	add.w	r3, r2, #20
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	3214      	adds	r2, #20
 8006da8:	e842 3100 	strex	r1, r3, [r2]
 8006dac:	2900      	cmp	r1, #0
 8006dae:	d1f3      	bne.n	8006d98 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d005      	beq.n	8006dc2 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006db6:	2320      	movs	r3, #32
 8006db8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6303      	str	r3, [r0, #48]	; 0x30
}
 8006dc0:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	f102 030c 	add.w	r3, r2, #12
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	320c      	adds	r2, #12
 8006dd2:	e842 3100 	strex	r1, r3, [r2]
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	d1f3      	bne.n	8006dc2 <UART_EndRxTransfer+0x42>
 8006dda:	e7ec      	b.n	8006db6 <UART_EndRxTransfer+0x36>

08006ddc <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ddc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b21      	cmp	r3, #33	; 0x21
 8006de4:	d001      	beq.n	8006dea <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8006de6:	2002      	movs	r0, #2
  }
}
 8006de8:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dea:	6883      	ldr	r3, [r0, #8]
 8006dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df0:	d017      	beq.n	8006e22 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006df2:	6a03      	ldr	r3, [r0, #32]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	6202      	str	r2, [r0, #32]
 8006df8:	781a      	ldrb	r2, [r3, #0]
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8006dfe:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	84c3      	strh	r3, [r0, #38]	; 0x26
 8006e08:	b94b      	cbnz	r3, 8006e1e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e0a:	6802      	ldr	r2, [r0, #0]
 8006e0c:	68d3      	ldr	r3, [r2, #12]
 8006e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e12:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e14:	6802      	ldr	r2, [r0, #0]
 8006e16:	68d3      	ldr	r3, [r2, #12]
 8006e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8006e1e:	2000      	movs	r0, #0
 8006e20:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e22:	6903      	ldr	r3, [r0, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e4      	bne.n	8006df2 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e28:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	6802      	ldr	r2, [r0, #0]
 8006e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e32:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8006e34:	6a03      	ldr	r3, [r0, #32]
 8006e36:	3302      	adds	r3, #2
 8006e38:	6203      	str	r3, [r0, #32]
 8006e3a:	e7e0      	b.n	8006dfe <UART_Transmit_IT+0x22>

08006e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e3c:	b538      	push	{r3, r4, r5, lr}
 8006e3e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e40:	6802      	ldr	r2, [r0, #0]
 8006e42:	6913      	ldr	r3, [r2, #16]
 8006e44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e48:	68c1      	ldr	r1, [r0, #12]
 8006e4a:	430b      	orrs	r3, r1
 8006e4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e4e:	6883      	ldr	r3, [r0, #8]
 8006e50:	6902      	ldr	r2, [r0, #16]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	6942      	ldr	r2, [r0, #20]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	69c2      	ldr	r2, [r0, #28]
 8006e5a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8006e5c:	6801      	ldr	r1, [r0, #0]
 8006e5e:	68cb      	ldr	r3, [r1, #12]
 8006e60:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e64:	f023 030c 	bic.w	r3, r3, #12
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e6c:	6802      	ldr	r2, [r0, #0]
 8006e6e:	6953      	ldr	r3, [r2, #20]
 8006e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e74:	6981      	ldr	r1, [r0, #24]
 8006e76:	430b      	orrs	r3, r1
 8006e78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e7a:	6803      	ldr	r3, [r0, #0]
 8006e7c:	4a31      	ldr	r2, [pc, #196]	; (8006f44 <UART_SetConfig+0x108>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d006      	beq.n	8006e90 <UART_SetConfig+0x54>
 8006e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d002      	beq.n	8006e90 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e8a:	f7fe feeb 	bl	8005c64 <HAL_RCC_GetPCLK1Freq>
 8006e8e:	e001      	b.n	8006e94 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e90:	f7fe fef8 	bl	8005c84 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e94:	69e3      	ldr	r3, [r4, #28]
 8006e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e9a:	d029      	beq.n	8006ef0 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	1803      	adds	r3, r0, r0
 8006ea0:	4149      	adcs	r1, r1
 8006ea2:	181b      	adds	r3, r3, r0
 8006ea4:	f141 0100 	adc.w	r1, r1, #0
 8006ea8:	00c9      	lsls	r1, r1, #3
 8006eaa:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	1818      	adds	r0, r3, r0
 8006eb2:	6863      	ldr	r3, [r4, #4]
 8006eb4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8006eb8:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8006ebc:	f141 0100 	adc.w	r1, r1, #0
 8006ec0:	f7f9 fe9a 	bl	8000bf8 <__aeabi_uldivmod>
 8006ec4:	4d20      	ldr	r5, [pc, #128]	; (8006f48 <UART_SetConfig+0x10c>)
 8006ec6:	fba5 3200 	umull	r3, r2, r5, r0
 8006eca:	0951      	lsrs	r1, r2, #5
 8006ecc:	2364      	movs	r3, #100	; 0x64
 8006ece:	fb03 0311 	mls	r3, r3, r1, r0
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	3332      	adds	r3, #50	; 0x32
 8006ed6:	fba5 2303 	umull	r2, r3, r5, r3
 8006eda:	095b      	lsrs	r3, r3, #5
 8006edc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ee0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	6821      	ldr	r1, [r4, #0]
 8006eea:	4413      	add	r3, r2
 8006eec:	608b      	str	r3, [r1, #8]
  }
}
 8006eee:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	1802      	adds	r2, r0, r0
 8006ef4:	eb43 0103 	adc.w	r1, r3, r3
 8006ef8:	1812      	adds	r2, r2, r0
 8006efa:	f141 0100 	adc.w	r1, r1, #0
 8006efe:	00c9      	lsls	r1, r1, #3
 8006f00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f04:	00d2      	lsls	r2, r2, #3
 8006f06:	1810      	adds	r0, r2, r0
 8006f08:	f141 0100 	adc.w	r1, r1, #0
 8006f0c:	6862      	ldr	r2, [r4, #4]
 8006f0e:	1892      	adds	r2, r2, r2
 8006f10:	415b      	adcs	r3, r3
 8006f12:	f7f9 fe71 	bl	8000bf8 <__aeabi_uldivmod>
 8006f16:	4d0c      	ldr	r5, [pc, #48]	; (8006f48 <UART_SetConfig+0x10c>)
 8006f18:	fba5 3200 	umull	r3, r2, r5, r0
 8006f1c:	0951      	lsrs	r1, r2, #5
 8006f1e:	2364      	movs	r3, #100	; 0x64
 8006f20:	fb03 0311 	mls	r3, r3, r1, r0
 8006f24:	00db      	lsls	r3, r3, #3
 8006f26:	3332      	adds	r3, #50	; 0x32
 8006f28:	fba5 2303 	umull	r2, r3, r5, r3
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	005a      	lsls	r2, r3, #1
 8006f30:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006f34:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	6821      	ldr	r1, [r4, #0]
 8006f3e:	4413      	add	r3, r2
 8006f40:	608b      	str	r3, [r1, #8]
 8006f42:	e7d4      	b.n	8006eee <UART_SetConfig+0xb2>
 8006f44:	40011000 	.word	0x40011000
 8006f48:	51eb851f 	.word	0x51eb851f

08006f4c <HAL_UART_Init>:
  if (huart == NULL)
 8006f4c:	b358      	cbz	r0, 8006fa6 <HAL_UART_Init+0x5a>
{
 8006f4e:	b510      	push	{r4, lr}
 8006f50:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006f52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f56:	b30b      	cbz	r3, 8006f9c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006f58:	2324      	movs	r3, #36	; 0x24
 8006f5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006f5e:	6822      	ldr	r2, [r4, #0]
 8006f60:	68d3      	ldr	r3, [r2, #12]
 8006f62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f66:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f7ff ff67 	bl	8006e3c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	6913      	ldr	r3, [r2, #16]
 8006f72:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006f76:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	6953      	ldr	r3, [r2, #20]
 8006f7c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006f80:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006f82:	6822      	ldr	r2, [r4, #0]
 8006f84:	68d3      	ldr	r3, [r2, #12]
 8006f86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f8a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f90:	2320      	movs	r3, #32
 8006f92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8006f9a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006f9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006fa0:	f7fd fa5a 	bl	8004458 <HAL_UART_MspInit>
 8006fa4:	e7d8      	b.n	8006f58 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006fa6:	2001      	movs	r0, #1
}
 8006fa8:	4770      	bx	lr

08006faa <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8006faa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d119      	bne.n	8006fe8 <HAL_UART_Transmit_IT+0x3e>
    if ((pData == NULL) || (Size == 0U))
 8006fb4:	b1d1      	cbz	r1, 8006fec <HAL_UART_Transmit_IT+0x42>
 8006fb6:	b1da      	cbz	r2, 8006ff0 <HAL_UART_Transmit_IT+0x46>
    __HAL_LOCK(huart);
 8006fb8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d019      	beq.n	8006ff4 <HAL_UART_Transmit_IT+0x4a>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 8006fc6:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8006fc8:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fca:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fd0:	2221      	movs	r2, #33	; 0x21
 8006fd2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8006fd6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006fda:	6801      	ldr	r1, [r0, #0]
 8006fdc:	68ca      	ldr	r2, [r1, #12]
 8006fde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006fe2:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	4770      	bx	lr
    return HAL_BUSY;
 8006fe8:	2002      	movs	r0, #2
 8006fea:	4770      	bx	lr
      return HAL_ERROR;
 8006fec:	2001      	movs	r0, #1
 8006fee:	4770      	bx	lr
 8006ff0:	2001      	movs	r0, #1
 8006ff2:	4770      	bx	lr
    __HAL_LOCK(huart);
 8006ff4:	2002      	movs	r0, #2
}
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_UART_TxCpltCallback>:
}
 8006ff8:	4770      	bx	lr

08006ffa <UART_EndTransmit_IT>:
{
 8006ffa:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ffc:	6801      	ldr	r1, [r0, #0]
 8006ffe:	68ca      	ldr	r2, [r1, #12]
 8007000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007004:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007006:	2220      	movs	r2, #32
 8007008:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800700c:	f7ff fff4 	bl	8006ff8 <HAL_UART_TxCpltCallback>
}
 8007010:	2000      	movs	r0, #0
 8007012:	bd08      	pop	{r3, pc}

08007014 <UART_DMAAbortOnError>:
{
 8007014:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007016:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8007018:	2300      	movs	r3, #0
 800701a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800701c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800701e:	f7fc fbf9 	bl	8003814 <HAL_UART_ErrorCallback>
}
 8007022:	bd08      	pop	{r3, pc}

08007024 <HAL_UARTEx_RxEventCallback>:
}
 8007024:	4770      	bx	lr

08007026 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007026:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b22      	cmp	r3, #34	; 0x22
 800702e:	d167      	bne.n	8007100 <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007030:	6883      	ldr	r3, [r0, #8]
 8007032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007036:	d04d      	beq.n	80070d4 <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007038:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800703a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703e:	d004      	beq.n	800704a <UART_Receive_IT+0x24>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d154      	bne.n	80070ee <UART_Receive_IT+0xc8>
 8007044:	6903      	ldr	r3, [r0, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d151      	bne.n	80070ee <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800704a:	6803      	ldr	r3, [r0, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8007050:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007052:	3301      	adds	r3, #1
 8007054:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007056:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29b      	uxth	r3, r3
 800705e:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007060:	2b00      	cmp	r3, #0
 8007062:	d14f      	bne.n	8007104 <UART_Receive_IT+0xde>
{
 8007064:	b500      	push	{lr}
 8007066:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007068:	6802      	ldr	r2, [r0, #0]
 800706a:	68d3      	ldr	r3, [r2, #12]
 800706c:	f023 0320 	bic.w	r3, r3, #32
 8007070:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007072:	6802      	ldr	r2, [r0, #0]
 8007074:	68d3      	ldr	r3, [r2, #12]
 8007076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800707a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800707c:	6802      	ldr	r2, [r0, #0]
 800707e:	6953      	ldr	r3, [r2, #20]
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007086:	2320      	movs	r3, #32
 8007088:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800708c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800708e:	2b01      	cmp	r3, #1
 8007090:	d133      	bne.n	80070fa <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007092:	2300      	movs	r3, #0
 8007094:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007096:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	f102 030c 	add.w	r3, r2, #12
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	320c      	adds	r2, #12
 80070a6:	e842 3100 	strex	r1, r3, [r2]
 80070aa:	2900      	cmp	r1, #0
 80070ac:	d1f3      	bne.n	8007096 <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070ae:	6803      	ldr	r3, [r0, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	f012 0f10 	tst.w	r2, #16
 80070b6:	d006      	beq.n	80070c6 <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070b8:	2200      	movs	r2, #0
 80070ba:	9201      	str	r2, [sp, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	9201      	str	r2, [sp, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	9301      	str	r3, [sp, #4]
 80070c4:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070c6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80070c8:	f7ff ffac 	bl	8007024 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80070cc:	2000      	movs	r0, #0
}
 80070ce:	b003      	add	sp, #12
 80070d0:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d4:	6902      	ldr	r2, [r0, #16]
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	d1ae      	bne.n	8007038 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070da:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070dc:	6803      	ldr	r3, [r0, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80070e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070e8:	3302      	adds	r3, #2
 80070ea:	6283      	str	r3, [r0, #40]	; 0x28
 80070ec:	e7b3      	b.n	8007056 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070ee:	6803      	ldr	r3, [r0, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070f6:	7013      	strb	r3, [r2, #0]
 80070f8:	e7aa      	b.n	8007050 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80070fa:	f7fc f84f 	bl	800319c <HAL_UART_RxCpltCallback>
 80070fe:	e7e5      	b.n	80070cc <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 8007100:	2002      	movs	r0, #2
 8007102:	4770      	bx	lr
    return HAL_OK;
 8007104:	2000      	movs	r0, #0
}
 8007106:	4770      	bx	lr

08007108 <HAL_UART_IRQHandler>:
{
 8007108:	b530      	push	{r4, r5, lr}
 800710a:	b083      	sub	sp, #12
 800710c:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800710e:	6802      	ldr	r2, [r0, #0]
 8007110:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007112:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007114:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8007116:	f013 050f 	ands.w	r5, r3, #15
 800711a:	d105      	bne.n	8007128 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800711c:	f013 0f20 	tst.w	r3, #32
 8007120:	d002      	beq.n	8007128 <HAL_UART_IRQHandler+0x20>
 8007122:	f010 0f20 	tst.w	r0, #32
 8007126:	d119      	bne.n	800715c <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007128:	b12d      	cbz	r5, 8007136 <HAL_UART_IRQHandler+0x2e>
 800712a:	f011 0101 	ands.w	r1, r1, #1
 800712e:	d119      	bne.n	8007164 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007130:	f410 7f90 	tst.w	r0, #288	; 0x120
 8007134:	d116      	bne.n	8007164 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007136:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007138:	2901      	cmp	r1, #1
 800713a:	d07d      	beq.n	8007238 <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800713c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007140:	d003      	beq.n	800714a <HAL_UART_IRQHandler+0x42>
 8007142:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007146:	f040 8115 	bne.w	8007374 <HAL_UART_IRQHandler+0x26c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800714a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800714e:	d003      	beq.n	8007158 <HAL_UART_IRQHandler+0x50>
 8007150:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007154:	f040 8112 	bne.w	800737c <HAL_UART_IRQHandler+0x274>
}
 8007158:	b003      	add	sp, #12
 800715a:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 800715c:	4620      	mov	r0, r4
 800715e:	f7ff ff62 	bl	8007026 <UART_Receive_IT>
      return;
 8007162:	e7f9      	b.n	8007158 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007164:	f013 0f01 	tst.w	r3, #1
 8007168:	d006      	beq.n	8007178 <HAL_UART_IRQHandler+0x70>
 800716a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800716e:	d003      	beq.n	8007178 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007170:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007178:	f013 0f04 	tst.w	r3, #4
 800717c:	d004      	beq.n	8007188 <HAL_UART_IRQHandler+0x80>
 800717e:	b119      	cbz	r1, 8007188 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007180:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007182:	f042 0202 	orr.w	r2, r2, #2
 8007186:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007188:	f013 0f02 	tst.w	r3, #2
 800718c:	d004      	beq.n	8007198 <HAL_UART_IRQHandler+0x90>
 800718e:	b119      	cbz	r1, 8007198 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007190:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007192:	f042 0204 	orr.w	r2, r2, #4
 8007196:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007198:	f013 0f08 	tst.w	r3, #8
 800719c:	d007      	beq.n	80071ae <HAL_UART_IRQHandler+0xa6>
 800719e:	f010 0f20 	tst.w	r0, #32
 80071a2:	d100      	bne.n	80071a6 <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071a4:	b119      	cbz	r1, 80071ae <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80071a8:	f042 0208 	orr.w	r2, r2, #8
 80071ac:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80071b0:	2a00      	cmp	r2, #0
 80071b2:	d0d1      	beq.n	8007158 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071b4:	f013 0f20 	tst.w	r3, #32
 80071b8:	d002      	beq.n	80071c0 <HAL_UART_IRQHandler+0xb8>
 80071ba:	f010 0f20 	tst.w	r0, #32
 80071be:	d129      	bne.n	8007214 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80071ca:	f012 0f08 	tst.w	r2, #8
 80071ce:	d100      	bne.n	80071d2 <HAL_UART_IRQHandler+0xca>
 80071d0:	b363      	cbz	r3, 800722c <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 80071d2:	4620      	mov	r0, r4
 80071d4:	f7ff fdd4 	bl	8006d80 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80071e0:	d020      	beq.n	8007224 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071e2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e4:	f102 0314 	add.w	r3, r2, #20
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	3214      	adds	r2, #20
 80071f2:	e842 3100 	strex	r1, r3, [r2]
 80071f6:	2900      	cmp	r1, #0
 80071f8:	d1f3      	bne.n	80071e2 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 80071fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071fc:	b173      	cbz	r3, 800721c <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071fe:	4a61      	ldr	r2, [pc, #388]	; (8007384 <HAL_UART_IRQHandler+0x27c>)
 8007200:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007202:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007204:	f7fd fbc4 	bl	8004990 <HAL_DMA_Abort_IT>
 8007208:	2800      	cmp	r0, #0
 800720a:	d0a5      	beq.n	8007158 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800720c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800720e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8007210:	4798      	blx	r3
 8007212:	e7a1      	b.n	8007158 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8007214:	4620      	mov	r0, r4
 8007216:	f7ff ff06 	bl	8007026 <UART_Receive_IT>
 800721a:	e7d1      	b.n	80071c0 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 800721c:	4620      	mov	r0, r4
 800721e:	f7fc faf9 	bl	8003814 <HAL_UART_ErrorCallback>
 8007222:	e799      	b.n	8007158 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8007224:	4620      	mov	r0, r4
 8007226:	f7fc faf5 	bl	8003814 <HAL_UART_ErrorCallback>
 800722a:	e795      	b.n	8007158 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 800722c:	4620      	mov	r0, r4
 800722e:	f7fc faf1 	bl	8003814 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007232:	2300      	movs	r3, #0
 8007234:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8007236:	e78f      	b.n	8007158 <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007238:	f013 0f10 	tst.w	r3, #16
 800723c:	f43f af7e 	beq.w	800713c <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007240:	f010 0f10 	tst.w	r0, #16
 8007244:	f43f af7a 	beq.w	800713c <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007248:	2300      	movs	r3, #0
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	6813      	ldr	r3, [r2, #0]
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	6853      	ldr	r3, [r2, #4]
 8007252:	9301      	str	r3, [sp, #4]
 8007254:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007256:	6953      	ldr	r3, [r2, #20]
 8007258:	f013 0f40 	tst.w	r3, #64	; 0x40
 800725c:	d050      	beq.n	8007300 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800725e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007260:	6813      	ldr	r3, [r2, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8007266:	2b00      	cmp	r3, #0
 8007268:	f43f af76 	beq.w	8007158 <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800726c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800726e:	4299      	cmp	r1, r3
 8007270:	f67f af72 	bls.w	8007158 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8007274:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007276:	69d3      	ldr	r3, [r2, #28]
 8007278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727c:	d037      	beq.n	80072ee <HAL_UART_IRQHandler+0x1e6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800727e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	f102 030c 	add.w	r3, r2, #12
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	320c      	adds	r2, #12
 800728e:	e842 3100 	strex	r1, r3, [r2]
 8007292:	2900      	cmp	r1, #0
 8007294:	d1f3      	bne.n	800727e <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007296:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	f102 0314 	add.w	r3, r2, #20
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	3214      	adds	r2, #20
 80072a6:	e842 3100 	strex	r1, r3, [r2]
 80072aa:	2900      	cmp	r1, #0
 80072ac:	d1f3      	bne.n	8007296 <HAL_UART_IRQHandler+0x18e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	f102 0314 	add.w	r3, r2, #20
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	3214      	adds	r2, #20
 80072be:	e842 3100 	strex	r1, r3, [r2]
 80072c2:	2900      	cmp	r1, #0
 80072c4:	d1f3      	bne.n	80072ae <HAL_UART_IRQHandler+0x1a6>
          huart->RxState = HAL_UART_STATE_READY;
 80072c6:	2320      	movs	r3, #32
 80072c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072cc:	2300      	movs	r3, #0
 80072ce:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	f102 030c 	add.w	r3, r2, #12
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	320c      	adds	r2, #12
 80072e0:	e842 3100 	strex	r1, r3, [r2]
 80072e4:	2900      	cmp	r1, #0
 80072e6:	d1f3      	bne.n	80072d0 <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80072ea:	f7fd fb07 	bl	80048fc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072ee:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80072f0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	1ac9      	subs	r1, r1, r3
 80072f6:	b289      	uxth	r1, r1
 80072f8:	4620      	mov	r0, r4
 80072fa:	f7ff fe93 	bl	8007024 <HAL_UARTEx_RxEventCallback>
      return;
 80072fe:	e72b      	b.n	8007158 <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007300:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007302:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007304:	b29b      	uxth	r3, r3
 8007306:	1ac9      	subs	r1, r1, r3
 8007308:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800730a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	f43f af22 	beq.w	8007158 <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 8007314:	2900      	cmp	r1, #0
 8007316:	f43f af1f 	beq.w	8007158 <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800731a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	f102 030c 	add.w	r3, r2, #12
 8007320:	e853 3f00 	ldrex	r3, [r3]
 8007324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	320c      	adds	r2, #12
 800732a:	e842 3000 	strex	r0, r3, [r2]
 800732e:	2800      	cmp	r0, #0
 8007330:	d1f3      	bne.n	800731a <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007332:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	f102 0314 	add.w	r3, r2, #20
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007340:	3214      	adds	r2, #20
 8007342:	e842 3000 	strex	r0, r3, [r2]
 8007346:	2800      	cmp	r0, #0
 8007348:	d1f3      	bne.n	8007332 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 800734a:	2320      	movs	r3, #32
 800734c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007350:	2300      	movs	r3, #0
 8007352:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007354:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	f102 030c 	add.w	r3, r2, #12
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007362:	320c      	adds	r2, #12
 8007364:	e842 3000 	strex	r0, r3, [r2]
 8007368:	2800      	cmp	r0, #0
 800736a:	d1f3      	bne.n	8007354 <HAL_UART_IRQHandler+0x24c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800736c:	4620      	mov	r0, r4
 800736e:	f7ff fe59 	bl	8007024 <HAL_UARTEx_RxEventCallback>
      return;
 8007372:	e6f1      	b.n	8007158 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8007374:	4620      	mov	r0, r4
 8007376:	f7ff fd31 	bl	8006ddc <UART_Transmit_IT>
    return;
 800737a:	e6ed      	b.n	8007158 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 800737c:	4620      	mov	r0, r4
 800737e:	f7ff fe3c 	bl	8006ffa <UART_EndTransmit_IT>
    return;
 8007382:	e6e9      	b.n	8007158 <HAL_UART_IRQHandler+0x50>
 8007384:	08007015 	.word	0x08007015

08007388 <UART_Start_Receive_IT>:
{
 8007388:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 800738a:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 800738c:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 800738e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	2000      	movs	r0, #0
 8007392:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007394:	2222      	movs	r2, #34	; 0x22
 8007396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 800739a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800739e:	6819      	ldr	r1, [r3, #0]
 80073a0:	68ca      	ldr	r2, [r1, #12]
 80073a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073a6:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80073a8:	6819      	ldr	r1, [r3, #0]
 80073aa:	694a      	ldr	r2, [r1, #20]
 80073ac:	f042 0201 	orr.w	r2, r2, #1
 80073b0:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68d3      	ldr	r3, [r2, #12]
 80073b6:	f043 0320 	orr.w	r3, r3, #32
 80073ba:	60d3      	str	r3, [r2, #12]
}
 80073bc:	4770      	bx	lr

080073be <HAL_UART_Receive_IT>:
{
 80073be:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80073c0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d10d      	bne.n	80073e6 <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 80073ca:	b171      	cbz	r1, 80073ea <HAL_UART_Receive_IT+0x2c>
 80073cc:	b17a      	cbz	r2, 80073ee <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 80073ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d00d      	beq.n	80073f2 <HAL_UART_Receive_IT+0x34>
 80073d6:	2301      	movs	r3, #1
 80073d8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073dc:	2300      	movs	r3, #0
 80073de:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 80073e0:	f7ff ffd2 	bl	8007388 <UART_Start_Receive_IT>
 80073e4:	e000      	b.n	80073e8 <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 80073e6:	2002      	movs	r0, #2
}
 80073e8:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 80073ea:	2001      	movs	r0, #1
 80073ec:	e7fc      	b.n	80073e8 <HAL_UART_Receive_IT+0x2a>
 80073ee:	2001      	movs	r0, #1
 80073f0:	e7fa      	b.n	80073e8 <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 80073f2:	2002      	movs	r0, #2
 80073f4:	e7f8      	b.n	80073e8 <HAL_UART_Receive_IT+0x2a>
	...

080073f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80073f8:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80073fa:	4903      	ldr	r1, [pc, #12]	; (8007408 <MX_FATFS_Init+0x10>)
 80073fc:	4803      	ldr	r0, [pc, #12]	; (800740c <MX_FATFS_Init+0x14>)
 80073fe:	f001 fc85 	bl	8008d0c <FATFS_LinkDriver>
 8007402:	4b03      	ldr	r3, [pc, #12]	; (8007410 <MX_FATFS_Init+0x18>)
 8007404:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007406:	bd08      	pop	{r3, pc}
 8007408:	20000db4 	.word	0x20000db4
 800740c:	2000002c 	.word	0x2000002c
 8007410:	20000db8 	.word	0x20000db8

08007414 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8007414:	2000      	movs	r0, #0
 8007416:	4770      	bx	lr

08007418 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007418:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 800741a:	f7fa fd1d 	bl	8001e58 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800741e:	bd08      	pop	{r3, pc}

08007420 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8007422:	f7fa fddd 	bl	8001fe0 <SD_disk_status>
  /* USER CODE END STATUS */
}
 8007426:	bd08      	pop	{r3, pc}

08007428 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007428:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 800742a:	f7fa fde3 	bl	8001ff4 <SD_disk_read>
  /* USER CODE END READ */
}
 800742e:	bd08      	pop	{r3, pc}

08007430 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007430:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8007432:	f7fa fe2b 	bl	800208c <SD_disk_write>
  /* USER CODE END WRITE */
}
 8007436:	bd08      	pop	{r3, pc}

08007438 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007438:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 800743a:	f7fa fe89 	bl	8002150 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 800743e:	bd08      	pop	{r3, pc}

08007440 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007440:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007442:	4b04      	ldr	r3, [pc, #16]	; (8007454 <disk_status+0x14>)
 8007444:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8007448:	6852      	ldr	r2, [r2, #4]
 800744a:	6852      	ldr	r2, [r2, #4]
 800744c:	4403      	add	r3, r0
 800744e:	7a18      	ldrb	r0, [r3, #8]
 8007450:	4790      	blx	r2
  return stat;
}
 8007452:	bd08      	pop	{r3, pc}
 8007454:	20000de4 	.word	0x20000de4

08007458 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007458:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800745a:	4b08      	ldr	r3, [pc, #32]	; (800747c <disk_initialize+0x24>)
 800745c:	5c1b      	ldrb	r3, [r3, r0]
 800745e:	b953      	cbnz	r3, 8007476 <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <disk_initialize+0x24>)
 8007462:	2201      	movs	r2, #1
 8007464:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007466:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800746a:	6852      	ldr	r2, [r2, #4]
 800746c:	6812      	ldr	r2, [r2, #0]
 800746e:	4418      	add	r0, r3
 8007470:	7a00      	ldrb	r0, [r0, #8]
 8007472:	4790      	blx	r2
  }
  return stat;
}
 8007474:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 8007476:	2000      	movs	r0, #0
 8007478:	e7fc      	b.n	8007474 <disk_initialize+0x1c>
 800747a:	bf00      	nop
 800747c:	20000de4 	.word	0x20000de4

08007480 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007480:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007482:	4c04      	ldr	r4, [pc, #16]	; (8007494 <disk_read+0x14>)
 8007484:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007488:	686d      	ldr	r5, [r5, #4]
 800748a:	68ad      	ldr	r5, [r5, #8]
 800748c:	4404      	add	r4, r0
 800748e:	7a20      	ldrb	r0, [r4, #8]
 8007490:	47a8      	blx	r5
  return res;
}
 8007492:	bd38      	pop	{r3, r4, r5, pc}
 8007494:	20000de4 	.word	0x20000de4

08007498 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007498:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800749a:	4c04      	ldr	r4, [pc, #16]	; (80074ac <disk_write+0x14>)
 800749c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80074a0:	686d      	ldr	r5, [r5, #4]
 80074a2:	68ed      	ldr	r5, [r5, #12]
 80074a4:	4404      	add	r4, r0
 80074a6:	7a20      	ldrb	r0, [r4, #8]
 80074a8:	47a8      	blx	r5
  return res;
}
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	20000de4 	.word	0x20000de4

080074b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80074b0:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80074b2:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <disk_ioctl+0x14>)
 80074b4:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80074b8:	6864      	ldr	r4, [r4, #4]
 80074ba:	6924      	ldr	r4, [r4, #16]
 80074bc:	4403      	add	r3, r0
 80074be:	7a18      	ldrb	r0, [r3, #8]
 80074c0:	47a0      	blx	r4
  return res;
}
 80074c2:	bd10      	pop	{r4, pc}
 80074c4:	20000de4 	.word	0x20000de4

080074c8 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80074c8:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80074ca:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80074cc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80074d0:	4770      	bx	lr

080074d2 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80074d2:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80074d4:	7883      	ldrb	r3, [r0, #2]
 80074d6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80074da:	7843      	ldrb	r3, [r0, #1]
 80074dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80074e0:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80074e2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80074e6:	4770      	bx	lr

080074e8 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80074e8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80074ea:	0a09      	lsrs	r1, r1, #8
 80074ec:	7041      	strb	r1, [r0, #1]
}
 80074ee:	4770      	bx	lr

080074f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80074f0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074f2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80074f6:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80074f8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80074fc:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80074fe:	0e09      	lsrs	r1, r1, #24
 8007500:	70c1      	strb	r1, [r0, #3]
}
 8007502:	4770      	bx	lr

08007504 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 8007504:	4694      	mov	ip, r2
 8007506:	b132      	cbz	r2, 8007516 <mem_cpy+0x12>
		do {
			*d++ = *s++;
 8007508:	780a      	ldrb	r2, [r1, #0]
 800750a:	3101      	adds	r1, #1
 800750c:	7002      	strb	r2, [r0, #0]
 800750e:	3001      	adds	r0, #1
		} while (--cnt);
 8007510:	f1bc 0c01 	subs.w	ip, ip, #1
 8007514:	d1f8      	bne.n	8007508 <mem_cpy+0x4>
	}
}
 8007516:	4770      	bx	lr

08007518 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8007518:	7001      	strb	r1, [r0, #0]
 800751a:	3001      	adds	r0, #1
	} while (--cnt);
 800751c:	3a01      	subs	r2, #1
 800751e:	d1fb      	bne.n	8007518 <mem_set>
}
 8007520:	4770      	bx	lr

08007522 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007522:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 8007524:	f89c 0000 	ldrb.w	r0, [ip]
 8007528:	f10c 0c01 	add.w	ip, ip, #1
 800752c:	780b      	ldrb	r3, [r1, #0]
 800752e:	3101      	adds	r1, #1
 8007530:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8007532:	3a01      	subs	r2, #1
 8007534:	d001      	beq.n	800753a <mem_cmp+0x18>
 8007536:	2800      	cmp	r0, #0
 8007538:	d0f4      	beq.n	8007524 <mem_cmp+0x2>

	return r;
}
 800753a:	4770      	bx	lr

0800753c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800753c:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 800753e:	e000      	b.n	8007542 <chk_chr+0x6>
 8007540:	3301      	adds	r3, #1
 8007542:	7818      	ldrb	r0, [r3, #0]
 8007544:	b108      	cbz	r0, 800754a <chk_chr+0xe>
 8007546:	4288      	cmp	r0, r1
 8007548:	d1fa      	bne.n	8007540 <chk_chr+0x4>
	return *str;
}
 800754a:	4770      	bx	lr

0800754c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800754c:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800754e:	2500      	movs	r5, #0
 8007550:	462b      	mov	r3, r5
 8007552:	e001      	b.n	8007558 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8007554:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007556:	3301      	adds	r3, #1
 8007558:	2b01      	cmp	r3, #1
 800755a:	d815      	bhi.n	8007588 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 800755c:	011a      	lsls	r2, r3, #4
 800755e:	4c17      	ldr	r4, [pc, #92]	; (80075bc <chk_lock+0x70>)
 8007560:	58a2      	ldr	r2, [r4, r2]
 8007562:	2a00      	cmp	r2, #0
 8007564:	d0f6      	beq.n	8007554 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007566:	6804      	ldr	r4, [r0, #0]
 8007568:	42a2      	cmp	r2, r4
 800756a:	d1f4      	bne.n	8007556 <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 800756c:	4a13      	ldr	r2, [pc, #76]	; (80075bc <chk_lock+0x70>)
 800756e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007572:	6854      	ldr	r4, [r2, #4]
 8007574:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007576:	4294      	cmp	r4, r2
 8007578:	d1ed      	bne.n	8007556 <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 800757a:	4a10      	ldr	r2, [pc, #64]	; (80075bc <chk_lock+0x70>)
 800757c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007580:	6894      	ldr	r4, [r2, #8]
 8007582:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8007584:	4294      	cmp	r4, r2
 8007586:	d1e6      	bne.n	8007556 <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007588:	2b02      	cmp	r3, #2
 800758a:	d00a      	beq.n	80075a2 <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800758c:	b9a1      	cbnz	r1, 80075b8 <chk_lock+0x6c>
 800758e:	4a0b      	ldr	r2, [pc, #44]	; (80075bc <chk_lock+0x70>)
 8007590:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007594:	899b      	ldrh	r3, [r3, #12]
 8007596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800759a:	d00b      	beq.n	80075b4 <chk_lock+0x68>
 800759c:	2000      	movs	r0, #0
}
 800759e:	bc30      	pop	{r4, r5}
 80075a0:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80075a2:	b92d      	cbnz	r5, 80075b0 <chk_lock+0x64>
 80075a4:	2902      	cmp	r1, #2
 80075a6:	d001      	beq.n	80075ac <chk_lock+0x60>
 80075a8:	2012      	movs	r0, #18
 80075aa:	e7f8      	b.n	800759e <chk_lock+0x52>
 80075ac:	2000      	movs	r0, #0
 80075ae:	e7f6      	b.n	800759e <chk_lock+0x52>
 80075b0:	2000      	movs	r0, #0
 80075b2:	e7f4      	b.n	800759e <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80075b4:	2010      	movs	r0, #16
 80075b6:	e7f2      	b.n	800759e <chk_lock+0x52>
 80075b8:	2010      	movs	r0, #16
 80075ba:	e7f0      	b.n	800759e <chk_lock+0x52>
 80075bc:	20000dc0 	.word	0x20000dc0

080075c0 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075c0:	2000      	movs	r0, #0
 80075c2:	e000      	b.n	80075c6 <enq_lock+0x6>
 80075c4:	3001      	adds	r0, #1
 80075c6:	2801      	cmp	r0, #1
 80075c8:	d804      	bhi.n	80075d4 <enq_lock+0x14>
 80075ca:	0103      	lsls	r3, r0, #4
 80075cc:	4a03      	ldr	r2, [pc, #12]	; (80075dc <enq_lock+0x1c>)
 80075ce:	58d3      	ldr	r3, [r2, r3]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1f7      	bne.n	80075c4 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 80075d4:	3802      	subs	r0, #2
 80075d6:	bf18      	it	ne
 80075d8:	2001      	movne	r0, #1
 80075da:	4770      	bx	lr
 80075dc:	20000dc0 	.word	0x20000dc0

080075e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80075e0:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075e2:	2300      	movs	r3, #0
 80075e4:	e000      	b.n	80075e8 <inc_lock+0x8>
 80075e6:	3301      	adds	r3, #1
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d813      	bhi.n	8007614 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 80075ec:	011a      	lsls	r2, r3, #4
 80075ee:	4c24      	ldr	r4, [pc, #144]	; (8007680 <inc_lock+0xa0>)
 80075f0:	58a4      	ldr	r4, [r4, r2]
 80075f2:	6802      	ldr	r2, [r0, #0]
 80075f4:	4294      	cmp	r4, r2
 80075f6:	d1f6      	bne.n	80075e6 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 80075f8:	4a21      	ldr	r2, [pc, #132]	; (8007680 <inc_lock+0xa0>)
 80075fa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80075fe:	6854      	ldr	r4, [r2, #4]
 8007600:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007602:	4294      	cmp	r4, r2
 8007604:	d1ef      	bne.n	80075e6 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 8007606:	4a1e      	ldr	r2, [pc, #120]	; (8007680 <inc_lock+0xa0>)
 8007608:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800760c:	6894      	ldr	r4, [r2, #8]
 800760e:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 8007610:	4294      	cmp	r4, r2
 8007612:	d1e8      	bne.n	80075e6 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007614:	2b02      	cmp	r3, #2
 8007616:	d00d      	beq.n	8007634 <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007618:	b121      	cbz	r1, 8007624 <inc_lock+0x44>
 800761a:	4a19      	ldr	r2, [pc, #100]	; (8007680 <inc_lock+0xa0>)
 800761c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007620:	8992      	ldrh	r2, [r2, #12]
 8007622:	bb52      	cbnz	r2, 800767a <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007624:	b9f1      	cbnz	r1, 8007664 <inc_lock+0x84>
 8007626:	4a16      	ldr	r2, [pc, #88]	; (8007680 <inc_lock+0xa0>)
 8007628:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800762c:	8991      	ldrh	r1, [r2, #12]
 800762e:	3101      	adds	r1, #1
 8007630:	b289      	uxth	r1, r1
 8007632:	e019      	b.n	8007668 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007634:	2300      	movs	r3, #0
 8007636:	2b01      	cmp	r3, #1
 8007638:	d805      	bhi.n	8007646 <inc_lock+0x66>
 800763a:	011a      	lsls	r2, r3, #4
 800763c:	4c10      	ldr	r4, [pc, #64]	; (8007680 <inc_lock+0xa0>)
 800763e:	58a2      	ldr	r2, [r4, r2]
 8007640:	b10a      	cbz	r2, 8007646 <inc_lock+0x66>
 8007642:	3301      	adds	r3, #1
 8007644:	e7f7      	b.n	8007636 <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007646:	2b02      	cmp	r3, #2
 8007648:	d015      	beq.n	8007676 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 800764a:	4d0d      	ldr	r5, [pc, #52]	; (8007680 <inc_lock+0xa0>)
 800764c:	011c      	lsls	r4, r3, #4
 800764e:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 8007652:	6806      	ldr	r6, [r0, #0]
 8007654:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 8007656:	6884      	ldr	r4, [r0, #8]
 8007658:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 800765a:	6940      	ldr	r0, [r0, #20]
 800765c:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800765e:	2000      	movs	r0, #0
 8007660:	8190      	strh	r0, [r2, #12]
 8007662:	e7d9      	b.n	8007618 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007668:	4a05      	ldr	r2, [pc, #20]	; (8007680 <inc_lock+0xa0>)
 800766a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800766e:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8007670:	1c58      	adds	r0, r3, #1
}
 8007672:	bc70      	pop	{r4, r5, r6}
 8007674:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007676:	2000      	movs	r0, #0
 8007678:	e7fb      	b.n	8007672 <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800767a:	2000      	movs	r0, #0
 800767c:	e7f9      	b.n	8007672 <inc_lock+0x92>
 800767e:	bf00      	nop
 8007680:	20000dc0 	.word	0x20000dc0

08007684 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007684:	3801      	subs	r0, #1
 8007686:	2801      	cmp	r0, #1
 8007688:	d815      	bhi.n	80076b6 <dec_lock+0x32>
		n = Files[i].ctr;
 800768a:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <dec_lock+0x3c>)
 800768c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007690:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007696:	d003      	beq.n	80076a0 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8007698:	b11b      	cbz	r3, 80076a2 <dec_lock+0x1e>
 800769a:	3b01      	subs	r3, #1
 800769c:	b29b      	uxth	r3, r3
 800769e:	e000      	b.n	80076a2 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80076a0:	2300      	movs	r3, #0
		Files[i].ctr = n;
 80076a2:	4a07      	ldr	r2, [pc, #28]	; (80076c0 <dec_lock+0x3c>)
 80076a4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80076a8:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80076aa:	b933      	cbnz	r3, 80076ba <dec_lock+0x36>
 80076ac:	0103      	lsls	r3, r0, #4
 80076ae:	2000      	movs	r0, #0
 80076b0:	4a03      	ldr	r2, [pc, #12]	; (80076c0 <dec_lock+0x3c>)
 80076b2:	50d0      	str	r0, [r2, r3]
 80076b4:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80076b6:	2002      	movs	r0, #2
 80076b8:	4770      	bx	lr
		res = FR_OK;
 80076ba:	2000      	movs	r0, #0
	}
	return res;
}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	20000dc0 	.word	0x20000dc0

080076c4 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80076c4:	2300      	movs	r3, #0
 80076c6:	e003      	b.n	80076d0 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 80076c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076cc:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 80076ce:	3301      	adds	r3, #1
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d811      	bhi.n	80076f8 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80076d4:	011a      	lsls	r2, r3, #4
 80076d6:	4909      	ldr	r1, [pc, #36]	; (80076fc <clear_lock+0x38>)
 80076d8:	588a      	ldr	r2, [r1, r2]
 80076da:	4282      	cmp	r2, r0
 80076dc:	d1f7      	bne.n	80076ce <clear_lock+0xa>
{
 80076de:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80076e0:	011a      	lsls	r2, r3, #4
 80076e2:	2400      	movs	r4, #0
 80076e4:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 80076e6:	3301      	adds	r3, #1
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d8ed      	bhi.n	80076c8 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80076ec:	011a      	lsls	r2, r3, #4
 80076ee:	4903      	ldr	r1, [pc, #12]	; (80076fc <clear_lock+0x38>)
 80076f0:	588a      	ldr	r2, [r1, r2]
 80076f2:	4282      	cmp	r2, r0
 80076f4:	d1f7      	bne.n	80076e6 <clear_lock+0x22>
 80076f6:	e7f3      	b.n	80076e0 <clear_lock+0x1c>
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	20000dc0 	.word	0x20000dc0

08007700 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8007700:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007702:	6943      	ldr	r3, [r0, #20]
 8007704:	3b02      	subs	r3, #2
 8007706:	428b      	cmp	r3, r1
 8007708:	d904      	bls.n	8007714 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 800770a:	8943      	ldrh	r3, [r0, #10]
 800770c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800770e:	fb01 0003 	mla	r0, r1, r3, r0
 8007712:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007714:	2000      	movs	r0, #0
}
 8007716:	4770      	bx	lr

08007718 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007718:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800771a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800771c:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800771e:	0a49      	lsrs	r1, r1, #9
 8007720:	8952      	ldrh	r2, [r2, #10]
 8007722:	fbb1 f1f2 	udiv	r1, r1, r2
 8007726:	e001      	b.n	800772c <clmt_clust+0x14>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 8007728:	1a09      	subs	r1, r1, r0
 800772a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800772c:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800772e:	b118      	cbz	r0, 8007738 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8007730:	4281      	cmp	r1, r0
 8007732:	d2f9      	bcs.n	8007728 <clmt_clust+0x10>
	}
	return cl + *tbl;	/* Return the cluster number */
 8007734:	6858      	ldr	r0, [r3, #4]
 8007736:	4408      	add	r0, r1
}
 8007738:	4770      	bx	lr

0800773a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800773a:	b570      	push	{r4, r5, r6, lr}
 800773c:	4606      	mov	r6, r0
 800773e:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007740:	f101 001a 	add.w	r0, r1, #26
 8007744:	f7ff fec0 	bl	80074c8 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8007748:	7833      	ldrb	r3, [r6, #0]
 800774a:	2b03      	cmp	r3, #3
 800774c:	d000      	beq.n	8007750 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007752:	f105 0014 	add.w	r0, r5, #20
 8007756:	f7ff feb7 	bl	80074c8 <ld_word>
 800775a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800775e:	e7f6      	b.n	800774e <ld_clust+0x14>

08007760 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	4606      	mov	r6, r0
 8007764:	460c      	mov	r4, r1
 8007766:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007768:	b291      	uxth	r1, r2
 800776a:	f104 001a 	add.w	r0, r4, #26
 800776e:	f7ff febb 	bl	80074e8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007772:	7833      	ldrb	r3, [r6, #0]
 8007774:	2b03      	cmp	r3, #3
 8007776:	d000      	beq.n	800777a <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8007778:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800777a:	0c29      	lsrs	r1, r5, #16
 800777c:	f104 0014 	add.w	r0, r4, #20
 8007780:	f7ff feb2 	bl	80074e8 <st_word>
}
 8007784:	e7f8      	b.n	8007778 <st_clust+0x18>
	...

08007788 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	4681      	mov	r9, r0
 800778e:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007790:	680f      	ldr	r7, [r1, #0]
 8007792:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8007796:	220b      	movs	r2, #11
 8007798:	2120      	movs	r1, #32
 800779a:	4658      	mov	r0, fp
 800779c:	f7ff febc 	bl	8007518 <mem_set>
	si = i = 0; ni = 8;
 80077a0:	2600      	movs	r6, #0
 80077a2:	4633      	mov	r3, r6
 80077a4:	f04f 0808 	mov.w	r8, #8
 80077a8:	e02c      	b.n	8007804 <create_name+0x7c>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80077aa:	3501      	adds	r5, #1
 80077ac:	5d7b      	ldrb	r3, [r7, r5]
 80077ae:	2b2f      	cmp	r3, #47	; 0x2f
 80077b0:	d0fb      	beq.n	80077aa <create_name+0x22>
 80077b2:	2b5c      	cmp	r3, #92	; 0x5c
 80077b4:	d0f9      	beq.n	80077aa <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80077b6:	443d      	add	r5, r7
 80077b8:	f8ca 5000 	str.w	r5, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80077bc:	2e00      	cmp	r6, #0
 80077be:	d043      	beq.n	8007848 <create_name+0xc0>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80077c0:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 80077c4:	2be5      	cmp	r3, #229	; 0xe5
 80077c6:	d035      	beq.n	8007834 <create_name+0xac>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077c8:	2c20      	cmp	r4, #32
 80077ca:	d837      	bhi.n	800783c <create_name+0xb4>
 80077cc:	2304      	movs	r3, #4
 80077ce:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f

	return FR_OK;
 80077d2:	2000      	movs	r0, #0
 80077d4:	e028      	b.n	8007828 <create_name+0xa0>
			i = 8; ni = 11;				/* Goto extension */
 80077d6:	2608      	movs	r6, #8
 80077d8:	f04f 080b 	mov.w	r8, #11
 80077dc:	e011      	b.n	8007802 <create_name+0x7a>
		if (c >= 0x80) {				/* Extended character? */
 80077de:	f014 0f80 	tst.w	r4, #128	; 0x80
 80077e2:	d123      	bne.n	800782c <create_name+0xa4>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80077e4:	4621      	mov	r1, r4
 80077e6:	4819      	ldr	r0, [pc, #100]	; (800784c <create_name+0xc4>)
 80077e8:	f7ff fea8 	bl	800753c <chk_chr>
 80077ec:	bb50      	cbnz	r0, 8007844 <create_name+0xbc>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80077ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b19      	cmp	r3, #25
 80077f6:	d801      	bhi.n	80077fc <create_name+0x74>
 80077f8:	3c20      	subs	r4, #32
 80077fa:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 80077fc:	f80b 4006 	strb.w	r4, [fp, r6]
 8007800:	3601      	adds	r6, #1
			i = 8; ni = 11;				/* Goto extension */
 8007802:	462b      	mov	r3, r5
		c = (BYTE)p[si++];
 8007804:	1c5d      	adds	r5, r3, #1
 8007806:	5cfc      	ldrb	r4, [r7, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007808:	2c20      	cmp	r4, #32
 800780a:	d9d4      	bls.n	80077b6 <create_name+0x2e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800780c:	2c2f      	cmp	r4, #47	; 0x2f
 800780e:	d0cd      	beq.n	80077ac <create_name+0x24>
 8007810:	2c5c      	cmp	r4, #92	; 0x5c
 8007812:	d0cb      	beq.n	80077ac <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007814:	2c2e      	cmp	r4, #46	; 0x2e
 8007816:	d001      	beq.n	800781c <create_name+0x94>
 8007818:	45b0      	cmp	r8, r6
 800781a:	d8e0      	bhi.n	80077de <create_name+0x56>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800781c:	f1b8 0f0b 	cmp.w	r8, #11
 8007820:	d00e      	beq.n	8007840 <create_name+0xb8>
 8007822:	2c2e      	cmp	r4, #46	; 0x2e
 8007824:	d0d7      	beq.n	80077d6 <create_name+0x4e>
 8007826:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 8007828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800782c:	3c80      	subs	r4, #128	; 0x80
 800782e:	4b08      	ldr	r3, [pc, #32]	; (8007850 <create_name+0xc8>)
 8007830:	5d1c      	ldrb	r4, [r3, r4]
 8007832:	e7d7      	b.n	80077e4 <create_name+0x5c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007834:	2305      	movs	r3, #5
 8007836:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
 800783a:	e7c5      	b.n	80077c8 <create_name+0x40>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800783c:	2300      	movs	r3, #0
 800783e:	e7c6      	b.n	80077ce <create_name+0x46>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007840:	2006      	movs	r0, #6
 8007842:	e7f1      	b.n	8007828 <create_name+0xa0>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007844:	2006      	movs	r0, #6
 8007846:	e7ef      	b.n	8007828 <create_name+0xa0>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007848:	2006      	movs	r0, #6
 800784a:	e7ed      	b.n	8007828 <create_name+0xa0>
 800784c:	0800cc30 	.word	0x0800cc30
 8007850:	0800cc40 	.word	0x0800cc40

08007854 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007854:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007856:	6800      	ldr	r0, [r0, #0]
 8007858:	b138      	cbz	r0, 800786a <get_ldnumber+0x16>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800785a:	4602      	mov	r2, r0
 800785c:	7813      	ldrb	r3, [r2, #0]
 800785e:	2b20      	cmp	r3, #32
 8007860:	d906      	bls.n	8007870 <get_ldnumber+0x1c>
 8007862:	2b3a      	cmp	r3, #58	; 0x3a
 8007864:	d004      	beq.n	8007870 <get_ldnumber+0x1c>
 8007866:	3201      	adds	r2, #1
 8007868:	e7f8      	b.n	800785c <get_ldnumber+0x8>
	int vol = -1;
 800786a:	f04f 30ff 	mov.w	r0, #4294967295
 800786e:	4770      	bx	lr
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007870:	2b3a      	cmp	r3, #58	; 0x3a
 8007872:	d001      	beq.n	8007878 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007874:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8007876:	4770      	bx	lr
{
 8007878:	b410      	push	{r4}
			i = *tp++ - '0';
 800787a:	4603      	mov	r3, r0
 800787c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007880:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007882:	2809      	cmp	r0, #9
 8007884:	d808      	bhi.n	8007898 <get_ldnumber+0x44>
 8007886:	429a      	cmp	r2, r3
 8007888:	d002      	beq.n	8007890 <get_ldnumber+0x3c>
	int vol = -1;
 800788a:	f04f 30ff 	mov.w	r0, #4294967295
 800788e:	e005      	b.n	800789c <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007890:	b938      	cbnz	r0, 80078a2 <get_ldnumber+0x4e>
					*path = ++tt;
 8007892:	3201      	adds	r2, #1
 8007894:	600a      	str	r2, [r1, #0]
 8007896:	e001      	b.n	800789c <get_ldnumber+0x48>
	int vol = -1;
 8007898:	f04f 30ff 	mov.w	r0, #4294967295
}
 800789c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a0:	4770      	bx	lr
	int vol = -1;
 80078a2:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 80078a6:	e7f9      	b.n	800789c <get_ldnumber+0x48>

080078a8 <putc_init>:
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
 80078a8:	6001      	str	r1, [r0, #0]
	pb->nchr = pb->idx = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	6043      	str	r3, [r0, #4]
 80078ae:	6083      	str	r3, [r0, #8]
}
 80078b0:	4770      	bx	lr

080078b2 <validate>:
{
 80078b2:	b538      	push	{r3, r4, r5, lr}
 80078b4:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80078b6:	4604      	mov	r4, r0
 80078b8:	b198      	cbz	r0, 80078e2 <validate+0x30>
 80078ba:	6803      	ldr	r3, [r0, #0]
 80078bc:	b19b      	cbz	r3, 80078e6 <validate+0x34>
 80078be:	781a      	ldrb	r2, [r3, #0]
 80078c0:	b1a2      	cbz	r2, 80078ec <validate+0x3a>
 80078c2:	8881      	ldrh	r1, [r0, #4]
 80078c4:	88da      	ldrh	r2, [r3, #6]
 80078c6:	4291      	cmp	r1, r2
 80078c8:	d003      	beq.n	80078d2 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80078ca:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078cc:	2400      	movs	r4, #0
 80078ce:	602c      	str	r4, [r5, #0]
}
 80078d0:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80078d2:	7858      	ldrb	r0, [r3, #1]
 80078d4:	f7ff fdb4 	bl	8007440 <disk_status>
 80078d8:	f010 0001 	ands.w	r0, r0, #1
 80078dc:	d109      	bne.n	80078f2 <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078de:	6824      	ldr	r4, [r4, #0]
 80078e0:	e7f5      	b.n	80078ce <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80078e2:	2009      	movs	r0, #9
 80078e4:	e7f3      	b.n	80078ce <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078e6:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 80078e8:	2009      	movs	r0, #9
 80078ea:	e7f0      	b.n	80078ce <validate+0x1c>
 80078ec:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078ee:	2400      	movs	r4, #0
 80078f0:	e7ed      	b.n	80078ce <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80078f2:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078f4:	2400      	movs	r4, #0
 80078f6:	e7ea      	b.n	80078ce <validate+0x1c>

080078f8 <sync_window>:
{
 80078f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80078fc:	78c5      	ldrb	r5, [r0, #3]
 80078fe:	b915      	cbnz	r5, 8007906 <sync_window+0xe>
}
 8007900:	4628      	mov	r0, r5
 8007902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007906:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 8007908:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800790a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800790e:	2301      	movs	r3, #1
 8007910:	463a      	mov	r2, r7
 8007912:	4641      	mov	r1, r8
 8007914:	7840      	ldrb	r0, [r0, #1]
 8007916:	f7ff fdbf 	bl	8007498 <disk_write>
 800791a:	4605      	mov	r5, r0
 800791c:	b9a0      	cbnz	r0, 8007948 <sync_window+0x50>
			fs->wflag = 0;
 800791e:	2300      	movs	r3, #0
 8007920:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007922:	6a23      	ldr	r3, [r4, #32]
 8007924:	1afb      	subs	r3, r7, r3
 8007926:	69a2      	ldr	r2, [r4, #24]
 8007928:	4293      	cmp	r3, r2
 800792a:	d2e9      	bcs.n	8007900 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800792c:	78a6      	ldrb	r6, [r4, #2]
 800792e:	e008      	b.n	8007942 <sync_window+0x4a>
					wsect += fs->fsize;
 8007930:	69a3      	ldr	r3, [r4, #24]
 8007932:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007934:	2301      	movs	r3, #1
 8007936:	463a      	mov	r2, r7
 8007938:	4641      	mov	r1, r8
 800793a:	7860      	ldrb	r0, [r4, #1]
 800793c:	f7ff fdac 	bl	8007498 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007940:	3e01      	subs	r6, #1
 8007942:	2e01      	cmp	r6, #1
 8007944:	d8f4      	bhi.n	8007930 <sync_window+0x38>
 8007946:	e7db      	b.n	8007900 <sync_window+0x8>
			res = FR_DISK_ERR;
 8007948:	2501      	movs	r5, #1
 800794a:	e7d9      	b.n	8007900 <sync_window+0x8>

0800794c <move_window>:
{
 800794c:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800794e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007950:	428b      	cmp	r3, r1
 8007952:	d102      	bne.n	800795a <move_window+0xe>
	FRESULT res = FR_OK;
 8007954:	2600      	movs	r6, #0
}
 8007956:	4630      	mov	r0, r6
 8007958:	bd70      	pop	{r4, r5, r6, pc}
 800795a:	4604      	mov	r4, r0
 800795c:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800795e:	f7ff ffcb 	bl	80078f8 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007962:	4606      	mov	r6, r0
 8007964:	2800      	cmp	r0, #0
 8007966:	d1f6      	bne.n	8007956 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007968:	2301      	movs	r3, #1
 800796a:	462a      	mov	r2, r5
 800796c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8007970:	7860      	ldrb	r0, [r4, #1]
 8007972:	f7ff fd85 	bl	8007480 <disk_read>
 8007976:	b110      	cbz	r0, 800797e <move_window+0x32>
				res = FR_DISK_ERR;
 8007978:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800797a:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 800797e:	62e5      	str	r5, [r4, #44]	; 0x2c
 8007980:	e7e9      	b.n	8007956 <move_window+0xa>
	...

08007984 <check_fs>:
{
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007988:	2300      	movs	r3, #0
 800798a:	70c3      	strb	r3, [r0, #3]
 800798c:	f04f 33ff 	mov.w	r3, #4294967295
 8007990:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007992:	f7ff ffdb 	bl	800794c <move_window>
 8007996:	bb30      	cbnz	r0, 80079e6 <check_fs+0x62>
 8007998:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800799a:	f204 202e 	addw	r0, r4, #558	; 0x22e
 800799e:	f7ff fd93 	bl	80074c8 <ld_word>
 80079a2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80079a6:	4298      	cmp	r0, r3
 80079a8:	d11f      	bne.n	80079ea <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80079aa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80079ae:	2be9      	cmp	r3, #233	; 0xe9
 80079b0:	d007      	beq.n	80079c2 <check_fs+0x3e>
 80079b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80079b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80079b8:	4a0d      	ldr	r2, [pc, #52]	; (80079f0 <check_fs+0x6c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d001      	beq.n	80079c2 <check_fs+0x3e>
	return 2;
 80079be:	2502      	movs	r5, #2
 80079c0:	e014      	b.n	80079ec <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80079c2:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80079c6:	f7ff fd84 	bl	80074d2 <ld_dword>
 80079ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80079ce:	4b09      	ldr	r3, [pc, #36]	; (80079f4 <check_fs+0x70>)
 80079d0:	4298      	cmp	r0, r3
 80079d2:	d00b      	beq.n	80079ec <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80079d4:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80079d8:	f7ff fd7b 	bl	80074d2 <ld_dword>
 80079dc:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <check_fs+0x74>)
 80079de:	4298      	cmp	r0, r3
 80079e0:	d004      	beq.n	80079ec <check_fs+0x68>
	return 2;
 80079e2:	2502      	movs	r5, #2
 80079e4:	e002      	b.n	80079ec <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079e6:	2504      	movs	r5, #4
 80079e8:	e000      	b.n	80079ec <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80079ea:	2503      	movs	r5, #3
}
 80079ec:	4628      	mov	r0, r5
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	009000eb 	.word	0x009000eb
 80079f4:	00544146 	.word	0x00544146
 80079f8:	33544146 	.word	0x33544146

080079fc <find_volume>:
{
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a00:	b085      	sub	sp, #20
 8007a02:	460d      	mov	r5, r1
 8007a04:	4616      	mov	r6, r2
	*rfs = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 8007a0a:	f7ff ff23 	bl	8007854 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a0e:	1e07      	subs	r7, r0, #0
 8007a10:	f2c0 8144 	blt.w	8007c9c <find_volume+0x2a0>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a14:	4bb5      	ldr	r3, [pc, #724]	; (8007cec <find_volume+0x2f0>)
 8007a16:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a1a:	2c00      	cmp	r4, #0
 8007a1c:	f000 8143 	beq.w	8007ca6 <find_volume+0x2aa>
	*rfs = fs;							/* Return pointer to the file system object */
 8007a20:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a22:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a26:	7823      	ldrb	r3, [r4, #0]
 8007a28:	b173      	cbz	r3, 8007a48 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8007a2a:	7860      	ldrb	r0, [r4, #1]
 8007a2c:	f7ff fd08 	bl	8007440 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a30:	f010 0501 	ands.w	r5, r0, #1
 8007a34:	d108      	bne.n	8007a48 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007a36:	2e00      	cmp	r6, #0
 8007a38:	f000 8131 	beq.w	8007c9e <find_volume+0x2a2>
 8007a3c:	f010 0f04 	tst.w	r0, #4
 8007a40:	f000 812d 	beq.w	8007c9e <find_volume+0x2a2>
				return FR_WRITE_PROTECTED;
 8007a44:	250a      	movs	r5, #10
 8007a46:	e12a      	b.n	8007c9e <find_volume+0x2a2>
	fs->fs_type = 0;					/* Clear the file system object */
 8007a48:	2300      	movs	r3, #0
 8007a4a:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a4c:	b2f8      	uxtb	r0, r7
 8007a4e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a50:	f7ff fd02 	bl	8007458 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a54:	f010 0501 	ands.w	r5, r0, #1
 8007a58:	f040 8127 	bne.w	8007caa <find_volume+0x2ae>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a5c:	b11e      	cbz	r6, 8007a66 <find_volume+0x6a>
 8007a5e:	f010 0f04 	tst.w	r0, #4
 8007a62:	f040 8124 	bne.w	8007cae <find_volume+0x2b2>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007a66:	2100      	movs	r1, #0
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f7ff ff8b 	bl	8007984 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a6e:	2802      	cmp	r0, #2
 8007a70:	f000 80b6 	beq.w	8007be0 <find_volume+0x1e4>
	bsect = 0;
 8007a74:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007a76:	2804      	cmp	r0, #4
 8007a78:	f000 811b 	beq.w	8007cb2 <find_volume+0x2b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007a7c:	2801      	cmp	r0, #1
 8007a7e:	f200 811a 	bhi.w	8007cb6 <find_volume+0x2ba>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007a82:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8007a86:	f7ff fd1f 	bl	80074c8 <ld_word>
 8007a8a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007a8e:	f040 8114 	bne.w	8007cba <find_volume+0x2be>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007a92:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8007a96:	f7ff fd17 	bl	80074c8 <ld_word>
 8007a9a:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007a9c:	b920      	cbnz	r0, 8007aa8 <find_volume+0xac>
 8007a9e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8007aa2:	f7ff fd16 	bl	80074d2 <ld_dword>
 8007aa6:	4606      	mov	r6, r0
		fs->fsize = fasize;
 8007aa8:	61a6      	str	r6, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007aaa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8007aae:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007ab0:	1e53      	subs	r3, r2, #1
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	f200 8102 	bhi.w	8007cbe <find_volume+0x2c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007aba:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007abe:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 8007ac2:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007ac6:	f1b9 0f00 	cmp.w	r9, #0
 8007aca:	f000 80fa 	beq.w	8007cc2 <find_volume+0x2c6>
 8007ace:	f109 33ff 	add.w	r3, r9, #4294967295
 8007ad2:	ea19 0f03 	tst.w	r9, r3
 8007ad6:	f040 80f6 	bne.w	8007cc6 <find_volume+0x2ca>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007ada:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8007ade:	f7ff fcf3 	bl	80074c8 <ld_word>
 8007ae2:	4682      	mov	sl, r0
 8007ae4:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ae6:	f010 0f0f 	tst.w	r0, #15
 8007aea:	f040 80ee 	bne.w	8007cca <find_volume+0x2ce>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007aee:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8007af2:	f7ff fce9 	bl	80074c8 <ld_word>
 8007af6:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007af8:	b920      	cbnz	r0, 8007b04 <find_volume+0x108>
 8007afa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007afe:	f7ff fce8 	bl	80074d2 <ld_dword>
 8007b02:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007b04:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8007b08:	f7ff fcde 	bl	80074c8 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	f000 80dd 	beq.w	8007cce <find_volume+0x2d2>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007b14:	eb00 0308 	add.w	r3, r0, r8
 8007b18:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007b1c:	459b      	cmp	fp, r3
 8007b1e:	f0c0 80d8 	bcc.w	8007cd2 <find_volume+0x2d6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007b22:	ebab 0b03 	sub.w	fp, fp, r3
 8007b26:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007b2a:	45cb      	cmp	fp, r9
 8007b2c:	f0c0 80d3 	bcc.w	8007cd6 <find_volume+0x2da>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007b30:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8007b34:	4281      	cmp	r1, r0
 8007b36:	d96b      	bls.n	8007c10 <find_volume+0x214>
		fmt = FS_FAT32;
 8007b38:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007b3c:	f640 70f5 	movw	r0, #4085	; 0xff5
 8007b40:	4281      	cmp	r1, r0
 8007b42:	d801      	bhi.n	8007b48 <find_volume+0x14c>
 8007b44:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007b48:	f101 0902 	add.w	r9, r1, #2
 8007b4c:	f8c4 9014 	str.w	r9, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007b50:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007b52:	443a      	add	r2, r7
 8007b54:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007b56:	443b      	add	r3, r7
 8007b58:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007b5a:	f1bb 0f03 	cmp.w	fp, #3
 8007b5e:	d05a      	beq.n	8007c16 <find_volume+0x21a>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b60:	f1ba 0f00 	cmp.w	sl, #0
 8007b64:	f000 80bd 	beq.w	8007ce2 <find_volume+0x2e6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b68:	4442      	add	r2, r8
 8007b6a:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b6c:	f1bb 0f02 	cmp.w	fp, #2
 8007b70:	d062      	beq.n	8007c38 <find_volume+0x23c>
 8007b72:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8007b76:	f009 0901 	and.w	r9, r9, #1
 8007b7a:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b7e:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 8007b82:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
 8007b86:	f0c0 80ae 	bcc.w	8007ce6 <find_volume+0x2ea>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8e:	6123      	str	r3, [r4, #16]
 8007b90:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8007b92:	2380      	movs	r3, #128	; 0x80
 8007b94:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007b96:	f1bb 0f03 	cmp.w	fp, #3
 8007b9a:	d050      	beq.n	8007c3e <find_volume+0x242>
	fs->fs_type = fmt;		/* FAT sub-type */
 8007b9c:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ba0:	4a53      	ldr	r2, [pc, #332]	; (8007cf0 <find_volume+0x2f4>)
 8007ba2:	8813      	ldrh	r3, [r2, #0]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	8013      	strh	r3, [r2, #0]
 8007baa:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8007bac:	4620      	mov	r0, r4
 8007bae:	f7ff fd89 	bl	80076c4 <clear_lock>
	return FR_OK;
 8007bb2:	e074      	b.n	8007c9e <find_volume+0x2a2>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	ab04      	add	r3, sp, #16
 8007bb8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8007bbc:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bc0:	3601      	adds	r6, #1
 8007bc2:	2e03      	cmp	r6, #3
 8007bc4:	d80e      	bhi.n	8007be4 <find_volume+0x1e8>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007bc6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007bca:	0133      	lsls	r3, r6, #4
 8007bcc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007bd0:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007bd2:	7903      	ldrb	r3, [r0, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0ed      	beq.n	8007bb4 <find_volume+0x1b8>
 8007bd8:	3008      	adds	r0, #8
 8007bda:	f7ff fc7a 	bl	80074d2 <ld_dword>
 8007bde:	e7ea      	b.n	8007bb6 <find_volume+0x1ba>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007be0:	2600      	movs	r6, #0
 8007be2:	e7ee      	b.n	8007bc2 <find_volume+0x1c6>
 8007be4:	2600      	movs	r6, #0
 8007be6:	e00a      	b.n	8007bfe <find_volume+0x202>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007be8:	4639      	mov	r1, r7
 8007bea:	4620      	mov	r0, r4
 8007bec:	f7ff feca 	bl	8007984 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007bf0:	2801      	cmp	r0, #1
 8007bf2:	f67f af40 	bls.w	8007a76 <find_volume+0x7a>
 8007bf6:	3601      	adds	r6, #1
 8007bf8:	2e03      	cmp	r6, #3
 8007bfa:	f63f af3c 	bhi.w	8007a76 <find_volume+0x7a>
			bsect = br[i];
 8007bfe:	ab04      	add	r3, sp, #16
 8007c00:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8007c04:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007c08:	2f00      	cmp	r7, #0
 8007c0a:	d1ed      	bne.n	8007be8 <find_volume+0x1ec>
 8007c0c:	2003      	movs	r0, #3
 8007c0e:	e7f2      	b.n	8007bf6 <find_volume+0x1fa>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007c10:	f04f 0b02 	mov.w	fp, #2
 8007c14:	e792      	b.n	8007b3c <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007c16:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8007c1a:	f7ff fc55 	bl	80074c8 <ld_word>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d15b      	bne.n	8007cda <find_volume+0x2de>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007c22:	f1ba 0f00 	cmp.w	sl, #0
 8007c26:	d15a      	bne.n	8007cde <find_volume+0x2e2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007c28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c2c:	f7ff fc51 	bl	80074d2 <ld_dword>
 8007c30:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007c32:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007c36:	e7a2      	b.n	8007b7e <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007c38:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007c3c:	e79f      	b.n	8007b7e <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007c3e:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8007c42:	f7ff fc41 	bl	80074c8 <ld_word>
 8007c46:	2801      	cmp	r0, #1
 8007c48:	d1a8      	bne.n	8007b9c <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007c4a:	1c79      	adds	r1, r7, #1
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f7ff fe7d 	bl	800794c <move_window>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d1a2      	bne.n	8007b9c <find_volume+0x1a0>
			fs->fsi_flag = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007c5a:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8007c5e:	f7ff fc33 	bl	80074c8 <ld_word>
 8007c62:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c66:	4298      	cmp	r0, r3
 8007c68:	d198      	bne.n	8007b9c <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007c6a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007c6e:	f7ff fc30 	bl	80074d2 <ld_dword>
 8007c72:	4b20      	ldr	r3, [pc, #128]	; (8007cf4 <find_volume+0x2f8>)
 8007c74:	4298      	cmp	r0, r3
 8007c76:	d191      	bne.n	8007b9c <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007c78:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8007c7c:	f7ff fc29 	bl	80074d2 <ld_dword>
 8007c80:	4b1d      	ldr	r3, [pc, #116]	; (8007cf8 <find_volume+0x2fc>)
 8007c82:	4298      	cmp	r0, r3
 8007c84:	d18a      	bne.n	8007b9c <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007c86:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8007c8a:	f7ff fc22 	bl	80074d2 <ld_dword>
 8007c8e:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007c90:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007c94:	f7ff fc1d 	bl	80074d2 <ld_dword>
 8007c98:	60e0      	str	r0, [r4, #12]
 8007c9a:	e77f      	b.n	8007b9c <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c9c:	250b      	movs	r5, #11
}
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	b005      	add	sp, #20
 8007ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007ca6:	250c      	movs	r5, #12
 8007ca8:	e7f9      	b.n	8007c9e <find_volume+0x2a2>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007caa:	2503      	movs	r5, #3
 8007cac:	e7f7      	b.n	8007c9e <find_volume+0x2a2>
		return FR_WRITE_PROTECTED;
 8007cae:	250a      	movs	r5, #10
 8007cb0:	e7f5      	b.n	8007c9e <find_volume+0x2a2>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007cb2:	2501      	movs	r5, #1
 8007cb4:	e7f3      	b.n	8007c9e <find_volume+0x2a2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007cb6:	250d      	movs	r5, #13
 8007cb8:	e7f1      	b.n	8007c9e <find_volume+0x2a2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007cba:	250d      	movs	r5, #13
 8007cbc:	e7ef      	b.n	8007c9e <find_volume+0x2a2>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007cbe:	250d      	movs	r5, #13
 8007cc0:	e7ed      	b.n	8007c9e <find_volume+0x2a2>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007cc2:	250d      	movs	r5, #13
 8007cc4:	e7eb      	b.n	8007c9e <find_volume+0x2a2>
 8007cc6:	250d      	movs	r5, #13
 8007cc8:	e7e9      	b.n	8007c9e <find_volume+0x2a2>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007cca:	250d      	movs	r5, #13
 8007ccc:	e7e7      	b.n	8007c9e <find_volume+0x2a2>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007cce:	250d      	movs	r5, #13
 8007cd0:	e7e5      	b.n	8007c9e <find_volume+0x2a2>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007cd2:	250d      	movs	r5, #13
 8007cd4:	e7e3      	b.n	8007c9e <find_volume+0x2a2>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007cd6:	250d      	movs	r5, #13
 8007cd8:	e7e1      	b.n	8007c9e <find_volume+0x2a2>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007cda:	250d      	movs	r5, #13
 8007cdc:	e7df      	b.n	8007c9e <find_volume+0x2a2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007cde:	250d      	movs	r5, #13
 8007ce0:	e7dd      	b.n	8007c9e <find_volume+0x2a2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007ce2:	250d      	movs	r5, #13
 8007ce4:	e7db      	b.n	8007c9e <find_volume+0x2a2>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007ce6:	250d      	movs	r5, #13
 8007ce8:	e7d9      	b.n	8007c9e <find_volume+0x2a2>
 8007cea:	bf00      	nop
 8007cec:	20000dbc 	.word	0x20000dbc
 8007cf0:	20000de0 	.word	0x20000de0
 8007cf4:	41615252 	.word	0x41615252
 8007cf8:	61417272 	.word	0x61417272

08007cfc <put_fat>:
{
 8007cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007d00:	2901      	cmp	r1, #1
 8007d02:	d97e      	bls.n	8007e02 <put_fat+0x106>
 8007d04:	4607      	mov	r7, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	4616      	mov	r6, r2
 8007d0a:	6943      	ldr	r3, [r0, #20]
 8007d0c:	428b      	cmp	r3, r1
 8007d0e:	d97a      	bls.n	8007e06 <put_fat+0x10a>
		switch (fs->fs_type) {
 8007d10:	7803      	ldrb	r3, [r0, #0]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d045      	beq.n	8007da2 <put_fat+0xa6>
 8007d16:	2b03      	cmp	r3, #3
 8007d18:	d057      	beq.n	8007dca <put_fat+0xce>
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d003      	beq.n	8007d26 <put_fat+0x2a>
 8007d1e:	2502      	movs	r5, #2
}
 8007d20:	4628      	mov	r0, r5
 8007d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8007d26:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d2a:	6a01      	ldr	r1, [r0, #32]
 8007d2c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8007d30:	f7ff fe0c 	bl	800794c <move_window>
			if (res != FR_OK) break;
 8007d34:	4605      	mov	r5, r0
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d1f2      	bne.n	8007d20 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 8007d3a:	f107 0a30 	add.w	sl, r7, #48	; 0x30
 8007d3e:	f108 0901 	add.w	r9, r8, #1
 8007d42:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d46:	f014 0401 	ands.w	r4, r4, #1
 8007d4a:	d01f      	beq.n	8007d8c <put_fat+0x90>
 8007d4c:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	0132      	lsls	r2, r6, #4
 8007d56:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8007d62:	2301      	movs	r3, #1
 8007d64:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d66:	6a39      	ldr	r1, [r7, #32]
 8007d68:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	f7ff fded 	bl	800794c <move_window>
			if (res != FR_OK) break;
 8007d72:	4605      	mov	r5, r0
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d1d3      	bne.n	8007d20 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 8007d78:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d7c:	b144      	cbz	r4, 8007d90 <put_fat+0x94>
 8007d7e:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8007d82:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 8007d86:	2301      	movs	r3, #1
 8007d88:	70fb      	strb	r3, [r7, #3]
			break;
 8007d8a:	e7c9      	b.n	8007d20 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d8c:	b2f3      	uxtb	r3, r6
 8007d8e:	e7e6      	b.n	8007d5e <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d90:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8007d94:	f022 020f 	bic.w	r2, r2, #15
 8007d98:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8007d9c:	4332      	orrs	r2, r6
 8007d9e:	b2d2      	uxtb	r2, r2
 8007da0:	e7ef      	b.n	8007d82 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007da2:	6a01      	ldr	r1, [r0, #32]
 8007da4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007da8:	f7ff fdd0 	bl	800794c <move_window>
			if (res != FR_OK) break;
 8007dac:	4605      	mov	r5, r0
 8007dae:	2800      	cmp	r0, #0
 8007db0:	d1b6      	bne.n	8007d20 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007db2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8007db6:	0064      	lsls	r4, r4, #1
 8007db8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8007dbc:	b2b1      	uxth	r1, r6
 8007dbe:	4420      	add	r0, r4
 8007dc0:	f7ff fb92 	bl	80074e8 <st_word>
			fs->wflag = 1;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	70fb      	strb	r3, [r7, #3]
			break;
 8007dc8:	e7aa      	b.n	8007d20 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007dca:	6a01      	ldr	r1, [r0, #32]
 8007dcc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007dd0:	f7ff fdbc 	bl	800794c <move_window>
			if (res != FR_OK) break;
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d1a2      	bne.n	8007d20 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007dda:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8007dde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007de2:	00a4      	lsls	r4, r4, #2
 8007de4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8007de8:	441c      	add	r4, r3
 8007dea:	4620      	mov	r0, r4
 8007dec:	f7ff fb71 	bl	80074d2 <ld_dword>
 8007df0:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007df4:	4331      	orrs	r1, r6
 8007df6:	4620      	mov	r0, r4
 8007df8:	f7ff fb7a 	bl	80074f0 <st_dword>
			fs->wflag = 1;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	70fb      	strb	r3, [r7, #3]
			break;
 8007e00:	e78e      	b.n	8007d20 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 8007e02:	2502      	movs	r5, #2
 8007e04:	e78c      	b.n	8007d20 <put_fat+0x24>
 8007e06:	2502      	movs	r5, #2
 8007e08:	e78a      	b.n	8007d20 <put_fat+0x24>

08007e0a <get_fat>:
{
 8007e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8007e0c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007e0e:	2901      	cmp	r1, #1
 8007e10:	d956      	bls.n	8007ec0 <get_fat+0xb6>
 8007e12:	460c      	mov	r4, r1
 8007e14:	696b      	ldr	r3, [r5, #20]
 8007e16:	428b      	cmp	r3, r1
 8007e18:	d954      	bls.n	8007ec4 <get_fat+0xba>
		switch (fs->fs_type) {
 8007e1a:	782b      	ldrb	r3, [r5, #0]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d02d      	beq.n	8007e7c <get_fat+0x72>
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d03b      	beq.n	8007e9c <get_fat+0x92>
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d001      	beq.n	8007e2c <get_fat+0x22>
 8007e28:	2001      	movs	r0, #1
 8007e2a:	e04a      	b.n	8007ec2 <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 8007e2c:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e30:	6a29      	ldr	r1, [r5, #32]
 8007e32:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8007e36:	4628      	mov	r0, r5
 8007e38:	f7ff fd88 	bl	800794c <move_window>
 8007e3c:	b110      	cbz	r0, 8007e44 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e42:	e03e      	b.n	8007ec2 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 8007e44:	1c77      	adds	r7, r6, #1
 8007e46:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8007e4a:	442e      	add	r6, r5
 8007e4c:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e50:	6a29      	ldr	r1, [r5, #32]
 8007e52:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8007e56:	4628      	mov	r0, r5
 8007e58:	f7ff fd78 	bl	800794c <move_window>
 8007e5c:	bba0      	cbnz	r0, 8007ec8 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007e5e:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8007e62:	443d      	add	r5, r7
 8007e64:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8007e68:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e6c:	f014 0f01 	tst.w	r4, #1
 8007e70:	d001      	beq.n	8007e76 <get_fat+0x6c>
 8007e72:	0900      	lsrs	r0, r0, #4
 8007e74:	e025      	b.n	8007ec2 <get_fat+0xb8>
 8007e76:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007e7a:	e022      	b.n	8007ec2 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e7c:	6a29      	ldr	r1, [r5, #32]
 8007e7e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7ff fd62 	bl	800794c <move_window>
 8007e88:	bb08      	cbnz	r0, 8007ece <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007e8a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8007e8e:	0064      	lsls	r4, r4, #1
 8007e90:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8007e94:	4420      	add	r0, r4
 8007e96:	f7ff fb17 	bl	80074c8 <ld_word>
			break;
 8007e9a:	e012      	b.n	8007ec2 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e9c:	6a29      	ldr	r1, [r5, #32]
 8007e9e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f7ff fd52 	bl	800794c <move_window>
 8007ea8:	b9a0      	cbnz	r0, 8007ed4 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007eaa:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8007eae:	00a4      	lsls	r4, r4, #2
 8007eb0:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8007eb4:	4420      	add	r0, r4
 8007eb6:	f7ff fb0c 	bl	80074d2 <ld_dword>
 8007eba:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8007ebe:	e000      	b.n	8007ec2 <get_fat+0xb8>
		val = 1;	/* Internal error */
 8007ec0:	2001      	movs	r0, #1
}
 8007ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8007ec4:	2001      	movs	r0, #1
 8007ec6:	e7fc      	b.n	8007ec2 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	e7f9      	b.n	8007ec2 <get_fat+0xb8>
 8007ece:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed2:	e7f6      	b.n	8007ec2 <get_fat+0xb8>
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8007ed8:	e7f3      	b.n	8007ec2 <get_fat+0xb8>

08007eda <dir_sdi>:
{
 8007eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8007ede:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007ee2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007ee6:	d240      	bcs.n	8007f6a <dir_sdi+0x90>
 8007ee8:	4606      	mov	r6, r0
 8007eea:	460f      	mov	r7, r1
 8007eec:	f011 0f1f 	tst.w	r1, #31
 8007ef0:	d13d      	bne.n	8007f6e <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
 8007ef2:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007ef4:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007ef6:	b92c      	cbnz	r4, 8007f04 <dir_sdi+0x2a>
 8007ef8:	f898 3000 	ldrb.w	r3, [r8]
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d901      	bls.n	8007f04 <dir_sdi+0x2a>
		clst = fs->dirbase;
 8007f00:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007f04:	b9b4      	cbnz	r4, 8007f34 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007f06:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007f0a:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8007f0e:	d930      	bls.n	8007f72 <dir_sdi+0x98>
		dp->sect = fs->dirbase;
 8007f10:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8007f14:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8007f16:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007f18:	69f3      	ldr	r3, [r6, #28]
 8007f1a:	b393      	cbz	r3, 8007f82 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007f1c:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 8007f20:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007f22:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8007f26:	f3c7 0108 	ubfx	r1, r7, #0, #9
 8007f2a:	4419      	add	r1, r3
 8007f2c:	6231      	str	r1, [r6, #32]
	return FR_OK;
 8007f2e:	2000      	movs	r0, #0
}
 8007f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007f34:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8007f38:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f3a:	42af      	cmp	r7, r5
 8007f3c:	d30f      	bcc.n	8007f5e <dir_sdi+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007f3e:	4621      	mov	r1, r4
 8007f40:	4630      	mov	r0, r6
 8007f42:	f7ff ff62 	bl	8007e0a <get_fat>
 8007f46:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f4c:	d013      	beq.n	8007f76 <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f4e:	2801      	cmp	r0, #1
 8007f50:	d913      	bls.n	8007f7a <dir_sdi+0xa0>
 8007f52:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007f56:	4283      	cmp	r3, r0
 8007f58:	d911      	bls.n	8007f7e <dir_sdi+0xa4>
			ofs -= csz;
 8007f5a:	1b7f      	subs	r7, r7, r5
 8007f5c:	e7ed      	b.n	8007f3a <dir_sdi+0x60>
		dp->sect = clust2sect(fs, clst);
 8007f5e:	4621      	mov	r1, r4
 8007f60:	4640      	mov	r0, r8
 8007f62:	f7ff fbcd 	bl	8007700 <clust2sect>
 8007f66:	61f0      	str	r0, [r6, #28]
 8007f68:	e7d5      	b.n	8007f16 <dir_sdi+0x3c>
		return FR_INT_ERR;
 8007f6a:	2002      	movs	r0, #2
 8007f6c:	e7e0      	b.n	8007f30 <dir_sdi+0x56>
 8007f6e:	2002      	movs	r0, #2
 8007f70:	e7de      	b.n	8007f30 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007f72:	2002      	movs	r0, #2
 8007f74:	e7dc      	b.n	8007f30 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f76:	2001      	movs	r0, #1
 8007f78:	e7da      	b.n	8007f30 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f7a:	2002      	movs	r0, #2
 8007f7c:	e7d8      	b.n	8007f30 <dir_sdi+0x56>
 8007f7e:	2002      	movs	r0, #2
 8007f80:	e7d6      	b.n	8007f30 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 8007f82:	2002      	movs	r0, #2
 8007f84:	e7d4      	b.n	8007f30 <dir_sdi+0x56>

08007f86 <create_chain>:
{
 8007f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8a:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8007f8c:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8007f8e:	460f      	mov	r7, r1
 8007f90:	b951      	cbnz	r1, 8007fa8 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f92:	f8d6 800c 	ldr.w	r8, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007f96:	f1b8 0f00 	cmp.w	r8, #0
 8007f9a:	d012      	beq.n	8007fc2 <create_chain+0x3c>
 8007f9c:	6973      	ldr	r3, [r6, #20]
 8007f9e:	4543      	cmp	r3, r8
 8007fa0:	d811      	bhi.n	8007fc6 <create_chain+0x40>
 8007fa2:	f04f 0801 	mov.w	r8, #1
 8007fa6:	e00e      	b.n	8007fc6 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007fa8:	f7ff ff2f 	bl	8007e0a <get_fat>
 8007fac:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007fae:	2801      	cmp	r0, #1
 8007fb0:	d947      	bls.n	8008042 <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fb2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007fb6:	d049      	beq.n	800804c <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fb8:	6972      	ldr	r2, [r6, #20]
 8007fba:	4282      	cmp	r2, r0
 8007fbc:	d846      	bhi.n	800804c <create_chain+0xc6>
		scl = clst;
 8007fbe:	46b8      	mov	r8, r7
 8007fc0:	e001      	b.n	8007fc6 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007fc2:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8007fc6:	4644      	mov	r4, r8
 8007fc8:	e00c      	b.n	8007fe4 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007fca:	4621      	mov	r1, r4
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f7ff ff1c 	bl	8007e0a <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	b178      	cbz	r0, 8007ff6 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007fd6:	2801      	cmp	r0, #1
 8007fd8:	d038      	beq.n	800804c <create_chain+0xc6>
 8007fda:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007fde:	d035      	beq.n	800804c <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8007fe0:	4544      	cmp	r4, r8
 8007fe2:	d032      	beq.n	800804a <create_chain+0xc4>
			ncl++;							/* Next cluster */
 8007fe4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007fe6:	6973      	ldr	r3, [r6, #20]
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	d8ee      	bhi.n	8007fca <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8007fec:	f1b8 0f01 	cmp.w	r8, #1
 8007ff0:	d929      	bls.n	8008046 <create_chain+0xc0>
				ncl = 2;
 8007ff2:	2402      	movs	r4, #2
 8007ff4:	e7e9      	b.n	8007fca <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f7ff fe7d 	bl	8007cfc <put_fat>
		if (res == FR_OK && clst != 0) {
 8008002:	4603      	mov	r3, r0
 8008004:	b900      	cbnz	r0, 8008008 <create_chain+0x82>
 8008006:	b977      	cbnz	r7, 8008026 <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008008:	b9a3      	cbnz	r3, 8008034 <create_chain+0xae>
		fs->last_clst = ncl;
 800800a:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800800c:	6932      	ldr	r2, [r6, #16]
 800800e:	6973      	ldr	r3, [r6, #20]
 8008010:	3b02      	subs	r3, #2
 8008012:	429a      	cmp	r2, r3
 8008014:	d801      	bhi.n	800801a <create_chain+0x94>
 8008016:	3a01      	subs	r2, #1
 8008018:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 800801a:	7933      	ldrb	r3, [r6, #4]
 800801c:	f043 0301 	orr.w	r3, r3, #1
 8008020:	7133      	strb	r3, [r6, #4]
 8008022:	4623      	mov	r3, r4
 8008024:	e012      	b.n	800804c <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008026:	4622      	mov	r2, r4
 8008028:	4639      	mov	r1, r7
 800802a:	4630      	mov	r0, r6
 800802c:	f7ff fe66 	bl	8007cfc <put_fat>
 8008030:	4603      	mov	r3, r0
 8008032:	e7e9      	b.n	8008008 <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008034:	2b01      	cmp	r3, #1
 8008036:	d001      	beq.n	800803c <create_chain+0xb6>
 8008038:	2301      	movs	r3, #1
 800803a:	e007      	b.n	800804c <create_chain+0xc6>
 800803c:	f04f 33ff 	mov.w	r3, #4294967295
 8008040:	e004      	b.n	800804c <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008042:	2301      	movs	r3, #1
 8008044:	e002      	b.n	800804c <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 8008046:	2300      	movs	r3, #0
 8008048:	e000      	b.n	800804c <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008052 <remove_chain>:
{
 8008052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008054:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8008056:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008058:	2901      	cmp	r1, #1
 800805a:	d92e      	bls.n	80080ba <remove_chain+0x68>
 800805c:	4606      	mov	r6, r0
 800805e:	4611      	mov	r1, r2
 8008060:	696b      	ldr	r3, [r5, #20]
 8008062:	42a3      	cmp	r3, r4
 8008064:	d92b      	bls.n	80080be <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008066:	b14a      	cbz	r2, 800807c <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008068:	f04f 32ff 	mov.w	r2, #4294967295
 800806c:	4628      	mov	r0, r5
 800806e:	f7ff fe45 	bl	8007cfc <put_fat>
		if (res != FR_OK) return res;
 8008072:	4607      	mov	r7, r0
 8008074:	b110      	cbz	r0, 800807c <remove_chain+0x2a>
 8008076:	e023      	b.n	80080c0 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008078:	42a2      	cmp	r2, r4
 800807a:	d921      	bls.n	80080c0 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800807c:	4627      	mov	r7, r4
 800807e:	4621      	mov	r1, r4
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff fec2 	bl	8007e0a <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 8008086:	4604      	mov	r4, r0
 8008088:	b1e0      	cbz	r0, 80080c4 <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800808a:	2801      	cmp	r0, #1
 800808c:	d01c      	beq.n	80080c8 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800808e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008092:	d01b      	beq.n	80080cc <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008094:	2200      	movs	r2, #0
 8008096:	4639      	mov	r1, r7
 8008098:	4628      	mov	r0, r5
 800809a:	f7ff fe2f 	bl	8007cfc <put_fat>
			if (res != FR_OK) return res;
 800809e:	4607      	mov	r7, r0
 80080a0:	b970      	cbnz	r0, 80080c0 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80080a2:	692b      	ldr	r3, [r5, #16]
 80080a4:	696a      	ldr	r2, [r5, #20]
 80080a6:	1e91      	subs	r1, r2, #2
 80080a8:	428b      	cmp	r3, r1
 80080aa:	d2e5      	bcs.n	8008078 <remove_chain+0x26>
			fs->free_clst++;
 80080ac:	3301      	adds	r3, #1
 80080ae:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 80080b0:	792b      	ldrb	r3, [r5, #4]
 80080b2:	f043 0301 	orr.w	r3, r3, #1
 80080b6:	712b      	strb	r3, [r5, #4]
 80080b8:	e7de      	b.n	8008078 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80080ba:	2702      	movs	r7, #2
 80080bc:	e000      	b.n	80080c0 <remove_chain+0x6e>
 80080be:	2702      	movs	r7, #2
}
 80080c0:	4638      	mov	r0, r7
 80080c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 80080c4:	2700      	movs	r7, #0
 80080c6:	e7fb      	b.n	80080c0 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80080c8:	2702      	movs	r7, #2
 80080ca:	e7f9      	b.n	80080c0 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80080cc:	2701      	movs	r7, #1
 80080ce:	e7f7      	b.n	80080c0 <remove_chain+0x6e>

080080d0 <dir_next>:
{
 80080d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 80080d4:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80080d6:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80080d8:	69c3      	ldr	r3, [r0, #28]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d06c      	beq.n	80081b8 <dir_next+0xe8>
 80080de:	4604      	mov	r4, r0
 80080e0:	4688      	mov	r8, r1
 80080e2:	3520      	adds	r5, #32
 80080e4:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80080e8:	d268      	bcs.n	80081bc <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80080ea:	f3c5 0708 	ubfx	r7, r5, #0, #9
 80080ee:	b93f      	cbnz	r7, 8008100 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 80080f0:	3301      	adds	r3, #1
 80080f2:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80080f4:	6981      	ldr	r1, [r0, #24]
 80080f6:	b979      	cbnz	r1, 8008118 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80080f8:	8933      	ldrh	r3, [r6, #8]
 80080fa:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80080fe:	d907      	bls.n	8008110 <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 8008100:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008102:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8008106:	443b      	add	r3, r7
 8008108:	6223      	str	r3, [r4, #32]
	return FR_OK;
 800810a:	2000      	movs	r0, #0
}
 800810c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 8008110:	2300      	movs	r3, #0
 8008112:	61c3      	str	r3, [r0, #28]
 8008114:	2004      	movs	r0, #4
 8008116:	e7f9      	b.n	800810c <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008118:	8973      	ldrh	r3, [r6, #10]
 800811a:	3b01      	subs	r3, #1
 800811c:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8008120:	d1ee      	bne.n	8008100 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008122:	f7ff fe72 	bl	8007e0a <get_fat>
 8008126:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008128:	2801      	cmp	r0, #1
 800812a:	d949      	bls.n	80081c0 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800812c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008130:	d048      	beq.n	80081c4 <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008132:	6973      	ldr	r3, [r6, #20]
 8008134:	4283      	cmp	r3, r0
 8008136:	d837      	bhi.n	80081a8 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8008138:	f1b8 0f00 	cmp.w	r8, #0
 800813c:	d011      	beq.n	8008162 <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800813e:	69a1      	ldr	r1, [r4, #24]
 8008140:	4620      	mov	r0, r4
 8008142:	f7ff ff20 	bl	8007f86 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008146:	4682      	mov	sl, r0
 8008148:	2800      	cmp	r0, #0
 800814a:	d03d      	beq.n	80081c8 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800814c:	2801      	cmp	r0, #1
 800814e:	d03d      	beq.n	80081cc <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008150:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008154:	d03c      	beq.n	80081d0 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008156:	4630      	mov	r0, r6
 8008158:	f7ff fbce 	bl	80078f8 <sync_window>
 800815c:	b128      	cbz	r0, 800816a <dir_next+0x9a>
 800815e:	2001      	movs	r0, #1
 8008160:	e7d4      	b.n	800810c <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 8008162:	2300      	movs	r3, #0
 8008164:	61e3      	str	r3, [r4, #28]
 8008166:	2004      	movs	r0, #4
 8008168:	e7d0      	b.n	800810c <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800816a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800816e:	2100      	movs	r1, #0
 8008170:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8008174:	f7ff f9d0 	bl	8007518 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008178:	4651      	mov	r1, sl
 800817a:	4630      	mov	r0, r6
 800817c:	f7ff fac0 	bl	8007700 <clust2sect>
 8008180:	62f0      	str	r0, [r6, #44]	; 0x2c
 8008182:	8973      	ldrh	r3, [r6, #10]
 8008184:	4599      	cmp	r9, r3
 8008186:	d20b      	bcs.n	80081a0 <dir_next+0xd0>
						fs->wflag = 1;
 8008188:	2301      	movs	r3, #1
 800818a:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800818c:	4630      	mov	r0, r6
 800818e:	f7ff fbb3 	bl	80078f8 <sync_window>
 8008192:	b9f8      	cbnz	r0, 80081d4 <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008194:	f109 0901 	add.w	r9, r9, #1
 8008198:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800819a:	3301      	adds	r3, #1
 800819c:	62f3      	str	r3, [r6, #44]	; 0x2c
 800819e:	e7f0      	b.n	8008182 <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 80081a0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80081a2:	eba3 0309 	sub.w	r3, r3, r9
 80081a6:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 80081a8:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 80081ac:	4651      	mov	r1, sl
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff faa6 	bl	8007700 <clust2sect>
 80081b4:	61e0      	str	r0, [r4, #28]
 80081b6:	e7a3      	b.n	8008100 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80081b8:	2004      	movs	r0, #4
 80081ba:	e7a7      	b.n	800810c <dir_next+0x3c>
 80081bc:	2004      	movs	r0, #4
 80081be:	e7a5      	b.n	800810c <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80081c0:	2002      	movs	r0, #2
 80081c2:	e7a3      	b.n	800810c <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80081c4:	2001      	movs	r0, #1
 80081c6:	e7a1      	b.n	800810c <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80081c8:	2007      	movs	r0, #7
 80081ca:	e79f      	b.n	800810c <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80081cc:	2002      	movs	r0, #2
 80081ce:	e79d      	b.n	800810c <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081d0:	2001      	movs	r0, #1
 80081d2:	e79b      	b.n	800810c <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80081d4:	2001      	movs	r0, #1
 80081d6:	e799      	b.n	800810c <dir_next+0x3c>

080081d8 <dir_find>:
{
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80081dc:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80081de:	2100      	movs	r1, #0
 80081e0:	f7ff fe7b 	bl	8007eda <dir_sdi>
	if (res != FR_OK) return res;
 80081e4:	4605      	mov	r5, r0
 80081e6:	b140      	cbz	r0, 80081fa <dir_find+0x22>
}
 80081e8:	4628      	mov	r0, r5
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 80081ec:	2100      	movs	r1, #0
 80081ee:	4620      	mov	r0, r4
 80081f0:	f7ff ff6e 	bl	80080d0 <dir_next>
	} while (res == FR_OK);
 80081f4:	4605      	mov	r5, r0
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d1f6      	bne.n	80081e8 <dir_find+0x10>
		res = move_window(fs, dp->sect);
 80081fa:	69e1      	ldr	r1, [r4, #28]
 80081fc:	4630      	mov	r0, r6
 80081fe:	f7ff fba5 	bl	800794c <move_window>
		if (res != FR_OK) break;
 8008202:	4605      	mov	r5, r0
 8008204:	2800      	cmp	r0, #0
 8008206:	d1ef      	bne.n	80081e8 <dir_find+0x10>
		c = dp->dir[DIR_Name];
 8008208:	6a20      	ldr	r0, [r4, #32]
 800820a:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800820c:	b17b      	cbz	r3, 800822e <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800820e:	7ac3      	ldrb	r3, [r0, #11]
 8008210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008214:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008216:	7ac3      	ldrb	r3, [r0, #11]
 8008218:	f013 0f08 	tst.w	r3, #8
 800821c:	d1e6      	bne.n	80081ec <dir_find+0x14>
 800821e:	220b      	movs	r2, #11
 8008220:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8008224:	f7ff f97d 	bl	8007522 <mem_cmp>
 8008228:	2800      	cmp	r0, #0
 800822a:	d1df      	bne.n	80081ec <dir_find+0x14>
 800822c:	e7dc      	b.n	80081e8 <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800822e:	2504      	movs	r5, #4
 8008230:	e7da      	b.n	80081e8 <dir_find+0x10>

08008232 <follow_path>:
{
 8008232:	b530      	push	{r4, r5, lr}
 8008234:	b083      	sub	sp, #12
 8008236:	4604      	mov	r4, r0
 8008238:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800823a:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800823c:	e001      	b.n	8008242 <follow_path+0x10>
 800823e:	3301      	adds	r3, #1
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	9b01      	ldr	r3, [sp, #4]
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	2a2f      	cmp	r2, #47	; 0x2f
 8008248:	d0f9      	beq.n	800823e <follow_path+0xc>
 800824a:	2a5c      	cmp	r2, #92	; 0x5c
 800824c:	d0f7      	beq.n	800823e <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800824e:	2200      	movs	r2, #0
 8008250:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b1f      	cmp	r3, #31
 8008256:	d91e      	bls.n	8008296 <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008258:	a901      	add	r1, sp, #4
 800825a:	4620      	mov	r0, r4
 800825c:	f7ff fa94 	bl	8007788 <create_name>
			if (res != FR_OK) break;
 8008260:	4603      	mov	r3, r0
 8008262:	bb00      	cbnz	r0, 80082a6 <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008264:	4620      	mov	r0, r4
 8008266:	f7ff ffb7 	bl	80081d8 <dir_find>
			ns = dp->fn[NSFLAG];
 800826a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800826e:	4603      	mov	r3, r0
 8008270:	b9e0      	cbnz	r0, 80082ac <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008272:	f012 0f04 	tst.w	r2, #4
 8008276:	d116      	bne.n	80082a6 <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008278:	79a3      	ldrb	r3, [r4, #6]
 800827a:	f013 0f10 	tst.w	r3, #16
 800827e:	d01c      	beq.n	80082ba <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008280:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8008284:	6961      	ldr	r1, [r4, #20]
 8008286:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800828a:	4419      	add	r1, r3
 800828c:	4628      	mov	r0, r5
 800828e:	f7ff fa54 	bl	800773a <ld_clust>
 8008292:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008294:	e7e0      	b.n	8008258 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8008296:	2380      	movs	r3, #128	; 0x80
 8008298:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800829c:	4611      	mov	r1, r2
 800829e:	4620      	mov	r0, r4
 80082a0:	f7ff fe1b 	bl	8007eda <dir_sdi>
 80082a4:	4603      	mov	r3, r0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	b003      	add	sp, #12
 80082aa:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 80082ac:	2804      	cmp	r0, #4
 80082ae:	d1fa      	bne.n	80082a6 <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80082b0:	f012 0f04 	tst.w	r2, #4
 80082b4:	d1f7      	bne.n	80082a6 <follow_path+0x74>
 80082b6:	2305      	movs	r3, #5
 80082b8:	e7f5      	b.n	80082a6 <follow_path+0x74>
				res = FR_NO_PATH; break;
 80082ba:	2305      	movs	r3, #5
 80082bc:	e7f3      	b.n	80082a6 <follow_path+0x74>

080082be <dir_alloc>:
{
 80082be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c0:	4604      	mov	r4, r0
 80082c2:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 80082c4:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 80082c6:	2100      	movs	r1, #0
 80082c8:	f7ff fe07 	bl	8007eda <dir_sdi>
	if (res == FR_OK) {
 80082cc:	4602      	mov	r2, r0
 80082ce:	b9c0      	cbnz	r0, 8008302 <dir_alloc+0x44>
		n = 0;
 80082d0:	2500      	movs	r5, #0
 80082d2:	e008      	b.n	80082e6 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80082d4:	3501      	adds	r5, #1
 80082d6:	42b5      	cmp	r5, r6
 80082d8:	d013      	beq.n	8008302 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 80082da:	2101      	movs	r1, #1
 80082dc:	4620      	mov	r0, r4
 80082de:	f7ff fef7 	bl	80080d0 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80082e2:	4602      	mov	r2, r0
 80082e4:	b968      	cbnz	r0, 8008302 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 80082e6:	69e1      	ldr	r1, [r4, #28]
 80082e8:	4638      	mov	r0, r7
 80082ea:	f7ff fb2f 	bl	800794c <move_window>
			if (res != FR_OK) break;
 80082ee:	4602      	mov	r2, r0
 80082f0:	b938      	cbnz	r0, 8008302 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80082f2:	6a23      	ldr	r3, [r4, #32]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2be5      	cmp	r3, #229	; 0xe5
 80082f8:	d0ec      	beq.n	80082d4 <dir_alloc+0x16>
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0ea      	beq.n	80082d4 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 80082fe:	2500      	movs	r5, #0
 8008300:	e7eb      	b.n	80082da <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008302:	2a04      	cmp	r2, #4
 8008304:	d001      	beq.n	800830a <dir_alloc+0x4c>
}
 8008306:	4610      	mov	r0, r2
 8008308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800830a:	2207      	movs	r2, #7
 800830c:	e7fb      	b.n	8008306 <dir_alloc+0x48>

0800830e <dir_register>:
{
 800830e:	b570      	push	{r4, r5, r6, lr}
 8008310:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8008312:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008314:	2101      	movs	r1, #1
 8008316:	f7ff ffd2 	bl	80082be <dir_alloc>
	if (res == FR_OK) {
 800831a:	4605      	mov	r5, r0
 800831c:	b108      	cbz	r0, 8008322 <dir_register+0x14>
}
 800831e:	4628      	mov	r0, r5
 8008320:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 8008322:	69e1      	ldr	r1, [r4, #28]
 8008324:	4630      	mov	r0, r6
 8008326:	f7ff fb11 	bl	800794c <move_window>
		if (res == FR_OK) {
 800832a:	4605      	mov	r5, r0
 800832c:	2800      	cmp	r0, #0
 800832e:	d1f6      	bne.n	800831e <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008330:	2220      	movs	r2, #32
 8008332:	2100      	movs	r1, #0
 8008334:	6a20      	ldr	r0, [r4, #32]
 8008336:	f7ff f8ef 	bl	8007518 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800833a:	220b      	movs	r2, #11
 800833c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8008340:	6a20      	ldr	r0, [r4, #32]
 8008342:	f7ff f8df 	bl	8007504 <mem_cpy>
			fs->wflag = 1;
 8008346:	2301      	movs	r3, #1
 8008348:	70f3      	strb	r3, [r6, #3]
 800834a:	e7e8      	b.n	800831e <dir_register+0x10>

0800834c <sync_fs>:
{
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008350:	f7ff fad2 	bl	80078f8 <sync_window>
	if (res == FR_OK) {
 8008354:	4605      	mov	r5, r0
 8008356:	b948      	cbnz	r0, 800836c <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008358:	7823      	ldrb	r3, [r4, #0]
 800835a:	2b03      	cmp	r3, #3
 800835c:	d008      	beq.n	8008370 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800835e:	2200      	movs	r2, #0
 8008360:	4611      	mov	r1, r2
 8008362:	7860      	ldrb	r0, [r4, #1]
 8008364:	f7ff f8a4 	bl	80074b0 <disk_ioctl>
 8008368:	b100      	cbz	r0, 800836c <sync_fs+0x20>
 800836a:	2501      	movs	r5, #1
}
 800836c:	4628      	mov	r0, r5
 800836e:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008370:	7923      	ldrb	r3, [r4, #4]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d1f3      	bne.n	800835e <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8008376:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800837a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800837e:	2100      	movs	r1, #0
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff f8c9 	bl	8007518 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008386:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800838a:	f204 202e 	addw	r0, r4, #558	; 0x22e
 800838e:	f7ff f8ab 	bl	80074e8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008392:	490f      	ldr	r1, [pc, #60]	; (80083d0 <sync_fs+0x84>)
 8008394:	4630      	mov	r0, r6
 8008396:	f7ff f8ab 	bl	80074f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800839a:	490e      	ldr	r1, [pc, #56]	; (80083d4 <sync_fs+0x88>)
 800839c:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80083a0:	f7ff f8a6 	bl	80074f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80083a4:	6921      	ldr	r1, [r4, #16]
 80083a6:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80083aa:	f7ff f8a1 	bl	80074f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80083ae:	68e1      	ldr	r1, [r4, #12]
 80083b0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80083b4:	f7ff f89c 	bl	80074f0 <st_dword>
			fs->winsect = fs->volbase + 1;
 80083b8:	69e2      	ldr	r2, [r4, #28]
 80083ba:	3201      	adds	r2, #1
 80083bc:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80083be:	2301      	movs	r3, #1
 80083c0:	4631      	mov	r1, r6
 80083c2:	7860      	ldrb	r0, [r4, #1]
 80083c4:	f7ff f868 	bl	8007498 <disk_write>
			fs->fsi_flag = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	7123      	strb	r3, [r4, #4]
 80083cc:	e7c7      	b.n	800835e <sync_fs+0x12>
 80083ce:	bf00      	nop
 80083d0:	41615252 	.word	0x41615252
 80083d4:	61417272 	.word	0x61417272

080083d8 <f_mount>:
{
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	9001      	str	r0, [sp, #4]
 80083de:	9100      	str	r1, [sp, #0]
 80083e0:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 80083e2:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80083e4:	a803      	add	r0, sp, #12
 80083e6:	f7ff fa35 	bl	8007854 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80083ea:	1e04      	subs	r4, r0, #0
 80083ec:	db1c      	blt.n	8008428 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80083ee:	4b10      	ldr	r3, [pc, #64]	; (8008430 <f_mount+0x58>)
 80083f0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (cfs) {
 80083f4:	b125      	cbz	r5, 8008400 <f_mount+0x28>
		clear_lock(cfs);
 80083f6:	4628      	mov	r0, r5
 80083f8:	f7ff f964 	bl	80076c4 <clear_lock>
		cfs->fs_type = 0;				/* Clear old fs object */
 80083fc:	2300      	movs	r3, #0
 80083fe:	702b      	strb	r3, [r5, #0]
	if (fs) {
 8008400:	9b01      	ldr	r3, [sp, #4]
 8008402:	b10b      	cbz	r3, 8008408 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8008408:	9b01      	ldr	r3, [sp, #4]
 800840a:	4a09      	ldr	r2, [pc, #36]	; (8008430 <f_mount+0x58>)
 800840c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008410:	b163      	cbz	r3, 800842c <f_mount+0x54>
 8008412:	2e01      	cmp	r6, #1
 8008414:	d002      	beq.n	800841c <f_mount+0x44>
 8008416:	2000      	movs	r0, #0
}
 8008418:	b004      	add	sp, #16
 800841a:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800841c:	2200      	movs	r2, #0
 800841e:	a901      	add	r1, sp, #4
 8008420:	4668      	mov	r0, sp
 8008422:	f7ff faeb 	bl	80079fc <find_volume>
	LEAVE_FF(fs, res);
 8008426:	e7f7      	b.n	8008418 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008428:	200b      	movs	r0, #11
 800842a:	e7f5      	b.n	8008418 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800842c:	2000      	movs	r0, #0
 800842e:	e7f3      	b.n	8008418 <f_mount+0x40>
 8008430:	20000dbc 	.word	0x20000dbc

08008434 <f_open>:
{
 8008434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008438:	b091      	sub	sp, #68	; 0x44
 800843a:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 800843c:	2800      	cmp	r0, #0
 800843e:	f000 810a 	beq.w	8008656 <f_open+0x222>
 8008442:	4615      	mov	r5, r2
 8008444:	4606      	mov	r6, r0
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008446:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800844a:	463a      	mov	r2, r7
 800844c:	a903      	add	r1, sp, #12
 800844e:	a801      	add	r0, sp, #4
 8008450:	f7ff fad4 	bl	80079fc <find_volume>
	if (res == FR_OK) {
 8008454:	4604      	mov	r4, r0
 8008456:	b130      	cbz	r0, 8008466 <f_open+0x32>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008458:	b10c      	cbz	r4, 800845e <f_open+0x2a>
 800845a:	2300      	movs	r3, #0
 800845c:	6033      	str	r3, [r6, #0]
}
 800845e:	4620      	mov	r0, r4
 8008460:	b011      	add	sp, #68	; 0x44
 8008462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8008466:	9b03      	ldr	r3, [sp, #12]
 8008468:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800846a:	9901      	ldr	r1, [sp, #4]
 800846c:	a804      	add	r0, sp, #16
 800846e:	f7ff fee0 	bl	8008232 <follow_path>
		if (res == FR_OK) {
 8008472:	4604      	mov	r4, r0
 8008474:	b960      	cbnz	r0, 8008490 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008476:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800847a:	2b00      	cmp	r3, #0
 800847c:	db50      	blt.n	8008520 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800847e:	f037 0301 	bics.w	r3, r7, #1
 8008482:	bf14      	ite	ne
 8008484:	2101      	movne	r1, #1
 8008486:	2100      	moveq	r1, #0
 8008488:	a804      	add	r0, sp, #16
 800848a:	f7ff f85f 	bl	800754c <chk_lock>
 800848e:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008490:	f015 0f1c 	tst.w	r5, #28
 8008494:	d05a      	beq.n	800854c <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 8008496:	2c00      	cmp	r4, #0
 8008498:	d04e      	beq.n	8008538 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800849a:	2c04      	cmp	r4, #4
 800849c:	d042      	beq.n	8008524 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800849e:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80084a2:	2c00      	cmp	r4, #0
 80084a4:	d161      	bne.n	800856a <f_open+0x136>
 80084a6:	f017 0f08 	tst.w	r7, #8
 80084aa:	d05e      	beq.n	800856a <f_open+0x136>
				dw = GET_FATTIME();
 80084ac:	f7fe ffb2 	bl	8007414 <get_fattime>
 80084b0:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80084b2:	4601      	mov	r1, r0
 80084b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084b6:	300e      	adds	r0, #14
 80084b8:	f7ff f81a 	bl	80074f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80084bc:	4629      	mov	r1, r5
 80084be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084c0:	3016      	adds	r0, #22
 80084c2:	f7ff f815 	bl	80074f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80084c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c8:	2220      	movs	r2, #32
 80084ca:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80084cc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80084d0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80084d4:	4649      	mov	r1, r9
 80084d6:	4640      	mov	r0, r8
 80084d8:	f7ff f92f 	bl	800773a <ld_clust>
 80084dc:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80084de:	2200      	movs	r2, #0
 80084e0:	4649      	mov	r1, r9
 80084e2:	4640      	mov	r0, r8
 80084e4:	f7ff f93c 	bl	8007760 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80084e8:	2100      	movs	r1, #0
 80084ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084ec:	301c      	adds	r0, #28
 80084ee:	f7fe ffff 	bl	80074f0 <st_dword>
					fs->wflag = 1;
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	2201      	movs	r2, #1
 80084f6:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80084f8:	b3bd      	cbz	r5, 800856a <f_open+0x136>
						dw = fs->winsect;
 80084fa:	9b03      	ldr	r3, [sp, #12]
 80084fc:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8008500:	2200      	movs	r2, #0
 8008502:	4629      	mov	r1, r5
 8008504:	a804      	add	r0, sp, #16
 8008506:	f7ff fda4 	bl	8008052 <remove_chain>
						if (res == FR_OK) {
 800850a:	4604      	mov	r4, r0
 800850c:	bb68      	cbnz	r0, 800856a <f_open+0x136>
							res = move_window(fs, dw);
 800850e:	4641      	mov	r1, r8
 8008510:	9803      	ldr	r0, [sp, #12]
 8008512:	f7ff fa1b 	bl	800794c <move_window>
 8008516:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008518:	3d01      	subs	r5, #1
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	60dd      	str	r5, [r3, #12]
 800851e:	e024      	b.n	800856a <f_open+0x136>
				res = FR_INVALID_NAME;
 8008520:	2406      	movs	r4, #6
 8008522:	e7b5      	b.n	8008490 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008524:	f7ff f84c 	bl	80075c0 <enq_lock>
 8008528:	b908      	cbnz	r0, 800852e <f_open+0xfa>
 800852a:	2412      	movs	r4, #18
 800852c:	e7b7      	b.n	800849e <f_open+0x6a>
 800852e:	a804      	add	r0, sp, #16
 8008530:	f7ff feed 	bl	800830e <dir_register>
 8008534:	4604      	mov	r4, r0
 8008536:	e7b2      	b.n	800849e <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008538:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800853c:	f013 0f11 	tst.w	r3, #17
 8008540:	d112      	bne.n	8008568 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008542:	f015 0f04 	tst.w	r5, #4
 8008546:	d0ac      	beq.n	80084a2 <f_open+0x6e>
 8008548:	2408      	movs	r4, #8
 800854a:	e00e      	b.n	800856a <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 800854c:	b96c      	cbnz	r4, 800856a <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800854e:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008552:	f013 0f10 	tst.w	r3, #16
 8008556:	d14c      	bne.n	80085f2 <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008558:	f015 0f02 	tst.w	r5, #2
 800855c:	d005      	beq.n	800856a <f_open+0x136>
 800855e:	f013 0f01 	tst.w	r3, #1
 8008562:	d002      	beq.n	800856a <f_open+0x136>
						res = FR_DENIED;
 8008564:	2407      	movs	r4, #7
 8008566:	e016      	b.n	8008596 <f_open+0x162>
					res = FR_DENIED;
 8008568:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800856a:	b9a4      	cbnz	r4, 8008596 <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800856c:	f017 0f08 	tst.w	r7, #8
 8008570:	d001      	beq.n	8008576 <f_open+0x142>
				mode |= FA_MODIFIED;
 8008572:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008576:	9b03      	ldr	r3, [sp, #12]
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800857c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800857e:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008580:	f037 0301 	bics.w	r3, r7, #1
 8008584:	bf14      	ite	ne
 8008586:	2101      	movne	r1, #1
 8008588:	2100      	moveq	r1, #0
 800858a:	a804      	add	r0, sp, #16
 800858c:	f7ff f828 	bl	80075e0 <inc_lock>
 8008590:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008592:	2800      	cmp	r0, #0
 8008594:	d05d      	beq.n	8008652 <f_open+0x21e>
		if (res == FR_OK) {
 8008596:	2c00      	cmp	r4, #0
 8008598:	f47f af5e 	bne.w	8008458 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800859c:	9d03      	ldr	r5, [sp, #12]
 800859e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80085a2:	4641      	mov	r1, r8
 80085a4:	4628      	mov	r0, r5
 80085a6:	f7ff f8c8 	bl	800773a <ld_clust>
 80085aa:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80085ac:	f108 001c 	add.w	r0, r8, #28
 80085b0:	f7fe ff8f 	bl	80074d2 <ld_dword>
 80085b4:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80085b6:	2100      	movs	r1, #0
 80085b8:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 80085ba:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 80085bc:	88eb      	ldrh	r3, [r5, #6]
 80085be:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 80085c0:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 80085c2:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80085c4:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80085c6:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80085c8:	f106 0830 	add.w	r8, r6, #48	; 0x30
 80085cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085d0:	4640      	mov	r0, r8
 80085d2:	f7fe ffa1 	bl	8007518 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80085d6:	f017 0f20 	tst.w	r7, #32
 80085da:	f43f af3d 	beq.w	8008458 <f_open+0x24>
 80085de:	68f5      	ldr	r5, [r6, #12]
 80085e0:	2d00      	cmp	r5, #0
 80085e2:	f43f af39 	beq.w	8008458 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80085e6:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80085e8:	9b03      	ldr	r3, [sp, #12]
 80085ea:	895f      	ldrh	r7, [r3, #10]
 80085ec:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80085ee:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085f0:	e005      	b.n	80085fe <f_open+0x1ca>
					res = FR_NO_FILE;
 80085f2:	2404      	movs	r4, #4
 80085f4:	e7cf      	b.n	8008596 <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80085f6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80085fa:	d00b      	beq.n	8008614 <f_open+0x1e0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085fc:	1bed      	subs	r5, r5, r7
 80085fe:	b95c      	cbnz	r4, 8008618 <f_open+0x1e4>
 8008600:	42bd      	cmp	r5, r7
 8008602:	d909      	bls.n	8008618 <f_open+0x1e4>
					clst = get_fat(&fp->obj, clst);
 8008604:	4630      	mov	r0, r6
 8008606:	f7ff fc00 	bl	8007e0a <get_fat>
 800860a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800860c:	2801      	cmp	r0, #1
 800860e:	d8f2      	bhi.n	80085f6 <f_open+0x1c2>
 8008610:	2402      	movs	r4, #2
 8008612:	e7f0      	b.n	80085f6 <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008614:	2401      	movs	r4, #1
 8008616:	e7f1      	b.n	80085fc <f_open+0x1c8>
				fp->clust = clst;
 8008618:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800861a:	2c00      	cmp	r4, #0
 800861c:	f47f af1c 	bne.w	8008458 <f_open+0x24>
 8008620:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8008624:	2b00      	cmp	r3, #0
 8008626:	f43f af17 	beq.w	8008458 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800862a:	9f03      	ldr	r7, [sp, #12]
 800862c:	4638      	mov	r0, r7
 800862e:	f7ff f867 	bl	8007700 <clust2sect>
 8008632:	b908      	cbnz	r0, 8008638 <f_open+0x204>
						res = FR_INT_ERR;
 8008634:	2402      	movs	r4, #2
 8008636:	e710      	b.n	800845a <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008638:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 800863c:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800863e:	2301      	movs	r3, #1
 8008640:	4641      	mov	r1, r8
 8008642:	7878      	ldrb	r0, [r7, #1]
 8008644:	f7fe ff1c 	bl	8007480 <disk_read>
 8008648:	2800      	cmp	r0, #0
 800864a:	f43f af05 	beq.w	8008458 <f_open+0x24>
 800864e:	2401      	movs	r4, #1
 8008650:	e703      	b.n	800845a <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008652:	2402      	movs	r4, #2
 8008654:	e700      	b.n	8008458 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8008656:	2409      	movs	r4, #9
 8008658:	e701      	b.n	800845e <f_open+0x2a>

0800865a <f_write>:
{
 800865a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865e:	b085      	sub	sp, #20
 8008660:	4604      	mov	r4, r0
 8008662:	460e      	mov	r6, r1
 8008664:	4615      	mov	r5, r2
 8008666:	4698      	mov	r8, r3
	*bw = 0;	/* Clear write byte counter */
 8008668:	2300      	movs	r3, #0
 800866a:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800866e:	a903      	add	r1, sp, #12
 8008670:	f7ff f91f 	bl	80078b2 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008674:	9001      	str	r0, [sp, #4]
 8008676:	2800      	cmp	r0, #0
 8008678:	d149      	bne.n	800870e <f_write+0xb4>
 800867a:	7d63      	ldrb	r3, [r4, #21]
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d145      	bne.n	800870e <f_write+0xb4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008682:	7d23      	ldrb	r3, [r4, #20]
 8008684:	f013 0f02 	tst.w	r3, #2
 8008688:	f000 80e2 	beq.w	8008850 <f_write+0x1f6>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800868c:	69a3      	ldr	r3, [r4, #24]
 800868e:	42eb      	cmn	r3, r5
 8008690:	f0c0 80b0 	bcc.w	80087f4 <f_write+0x19a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008694:	43dd      	mvns	r5, r3
 8008696:	e0ad      	b.n	80087f4 <f_write+0x19a>
					if (fp->cltbl) {
 8008698:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800869a:	2b00      	cmp	r3, #0
 800869c:	d03b      	beq.n	8008716 <f_write+0xbc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800869e:	4620      	mov	r0, r4
 80086a0:	f7ff f83a 	bl	8007718 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f000 80ce 	beq.w	8008846 <f_write+0x1ec>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80086aa:	2801      	cmp	r0, #1
 80086ac:	d038      	beq.n	8008720 <f_write+0xc6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80086ae:	f1b0 3fff 	cmp.w	r0, #4294967295
 80086b2:	d03c      	beq.n	800872e <f_write+0xd4>
				fp->clust = clst;			/* Update current cluster */
 80086b4:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80086b6:	68a3      	ldr	r3, [r4, #8]
 80086b8:	b903      	cbnz	r3, 80086bc <f_write+0x62>
 80086ba:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80086bc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	db3b      	blt.n	800873c <f_write+0xe2>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80086c4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80086c8:	69e1      	ldr	r1, [r4, #28]
 80086ca:	4658      	mov	r0, fp
 80086cc:	f7ff f818 	bl	8007700 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086d0:	4681      	mov	r9, r0
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d047      	beq.n	8008766 <f_write+0x10c>
			sect += csect;
 80086d6:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80086d8:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 80086dc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80086e0:	d35d      	bcc.n	800879e <f_write+0x144>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086e2:	eb07 030a 	add.w	r3, r7, sl
 80086e6:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d901      	bls.n	80086f2 <f_write+0x98>
					cc = fs->csize - csect;
 80086ee:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086f2:	4653      	mov	r3, sl
 80086f4:	464a      	mov	r2, r9
 80086f6:	4631      	mov	r1, r6
 80086f8:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80086fc:	f7fe fecc 	bl	8007498 <disk_write>
 8008700:	b3c0      	cbz	r0, 8008774 <f_write+0x11a>
 8008702:	f04f 0a01 	mov.w	sl, #1
 8008706:	f884 a015 	strb.w	sl, [r4, #21]
 800870a:	f8cd a004 	str.w	sl, [sp, #4]
}
 800870e:	9801      	ldr	r0, [sp, #4]
 8008710:	b005      	add	sp, #20
 8008712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008716:	69e1      	ldr	r1, [r4, #28]
 8008718:	4620      	mov	r0, r4
 800871a:	f7ff fc34 	bl	8007f86 <create_chain>
 800871e:	e7c1      	b.n	80086a4 <f_write+0x4a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008720:	f04f 0a02 	mov.w	sl, #2
 8008724:	f884 a015 	strb.w	sl, [r4, #21]
 8008728:	f8cd a004 	str.w	sl, [sp, #4]
 800872c:	e7ef      	b.n	800870e <f_write+0xb4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800872e:	f04f 0a01 	mov.w	sl, #1
 8008732:	f884 a015 	strb.w	sl, [r4, #21]
 8008736:	f8cd a004 	str.w	sl, [sp, #4]
 800873a:	e7e8      	b.n	800870e <f_write+0xb4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800873c:	2301      	movs	r3, #1
 800873e:	6a22      	ldr	r2, [r4, #32]
 8008740:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008744:	9803      	ldr	r0, [sp, #12]
 8008746:	7840      	ldrb	r0, [r0, #1]
 8008748:	f7fe fea6 	bl	8007498 <disk_write>
 800874c:	b920      	cbnz	r0, 8008758 <f_write+0xfe>
				fp->flag &= (BYTE)~FA_DIRTY;
 800874e:	7d23      	ldrb	r3, [r4, #20]
 8008750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008754:	7523      	strb	r3, [r4, #20]
 8008756:	e7b5      	b.n	80086c4 <f_write+0x6a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008758:	f04f 0a01 	mov.w	sl, #1
 800875c:	f884 a015 	strb.w	sl, [r4, #21]
 8008760:	f8cd a004 	str.w	sl, [sp, #4]
 8008764:	e7d3      	b.n	800870e <f_write+0xb4>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008766:	f04f 0a02 	mov.w	sl, #2
 800876a:	f884 a015 	strb.w	sl, [r4, #21]
 800876e:	f8cd a004 	str.w	sl, [sp, #4]
 8008772:	e7cc      	b.n	800870e <f_write+0xb4>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008774:	6a21      	ldr	r1, [r4, #32]
 8008776:	eba1 0109 	sub.w	r1, r1, r9
 800877a:	4551      	cmp	r1, sl
 800877c:	d302      	bcc.n	8008784 <f_write+0x12a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800877e:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 8008782:	e028      	b.n	80087d6 <f_write+0x17c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008788:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 800878c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008790:	f7fe feb8 	bl	8007504 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008794:	7d23      	ldrb	r3, [r4, #20]
 8008796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800879a:	7523      	strb	r3, [r4, #20]
 800879c:	e7ef      	b.n	800877e <f_write+0x124>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800879e:	6a23      	ldr	r3, [r4, #32]
 80087a0:	454b      	cmp	r3, r9
 80087a2:	d003      	beq.n	80087ac <f_write+0x152>
				fp->fptr < fp->obj.objsize &&
 80087a4:	69a2      	ldr	r2, [r4, #24]
 80087a6:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d33b      	bcc.n	8008824 <f_write+0x1ca>
			fp->sect = sect;
 80087ac:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087b0:	69a3      	ldr	r3, [r4, #24]
 80087b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b6:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80087ba:	42bd      	cmp	r5, r7
 80087bc:	d200      	bcs.n	80087c0 <f_write+0x166>
 80087be:	462f      	mov	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80087c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80087c4:	463a      	mov	r2, r7
 80087c6:	4631      	mov	r1, r6
 80087c8:	4418      	add	r0, r3
 80087ca:	f7fe fe9b 	bl	8007504 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80087ce:	7d23      	ldrb	r3, [r4, #20]
 80087d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087d4:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80087d6:	443e      	add	r6, r7
 80087d8:	69a3      	ldr	r3, [r4, #24]
 80087da:	443b      	add	r3, r7
 80087dc:	61a3      	str	r3, [r4, #24]
 80087de:	68e2      	ldr	r2, [r4, #12]
 80087e0:	4293      	cmp	r3, r2
 80087e2:	bf38      	it	cc
 80087e4:	4613      	movcc	r3, r2
 80087e6:	60e3      	str	r3, [r4, #12]
 80087e8:	f8d8 3000 	ldr.w	r3, [r8]
 80087ec:	443b      	add	r3, r7
 80087ee:	f8c8 3000 	str.w	r3, [r8]
 80087f2:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 80087f4:	b33d      	cbz	r5, 8008846 <f_write+0x1ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80087f6:	69a1      	ldr	r1, [r4, #24]
 80087f8:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1d7      	bne.n	80087b0 <f_write+0x156>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008800:	9b03      	ldr	r3, [sp, #12]
 8008802:	895f      	ldrh	r7, [r3, #10]
 8008804:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8008806:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800880a:	f47f af57 	bne.w	80086bc <f_write+0x62>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800880e:	2900      	cmp	r1, #0
 8008810:	f47f af42 	bne.w	8008698 <f_write+0x3e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008814:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8008816:	2800      	cmp	r0, #0
 8008818:	f47f af44 	bne.w	80086a4 <f_write+0x4a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800881c:	4620      	mov	r0, r4
 800881e:	f7ff fbb2 	bl	8007f86 <create_chain>
 8008822:	e73f      	b.n	80086a4 <f_write+0x4a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008824:	2301      	movs	r3, #1
 8008826:	464a      	mov	r2, r9
 8008828:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800882c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8008830:	f7fe fe26 	bl	8007480 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8008834:	2800      	cmp	r0, #0
 8008836:	d0b9      	beq.n	80087ac <f_write+0x152>
					ABORT(fs, FR_DISK_ERR);
 8008838:	f04f 0a01 	mov.w	sl, #1
 800883c:	f884 a015 	strb.w	sl, [r4, #21]
 8008840:	f8cd a004 	str.w	sl, [sp, #4]
 8008844:	e763      	b.n	800870e <f_write+0xb4>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008846:	7d23      	ldrb	r3, [r4, #20]
 8008848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800884c:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800884e:	e75e      	b.n	800870e <f_write+0xb4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008850:	2307      	movs	r3, #7
 8008852:	9301      	str	r3, [sp, #4]
 8008854:	e75b      	b.n	800870e <f_write+0xb4>

08008856 <putc_bfd>:
{
 8008856:	b570      	push	{r4, r5, r6, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	4604      	mov	r4, r0
 800885c:	460d      	mov	r5, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800885e:	290a      	cmp	r1, #10
 8008860:	d00d      	beq.n	800887e <putc_bfd+0x28>
	i = pb->idx;		/* Write index of pb->buf[] */
 8008862:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8008864:	2b00      	cmp	r3, #0
 8008866:	db08      	blt.n	800887a <putc_bfd+0x24>
	pb->buf[i++] = (BYTE)c;
 8008868:	1c5e      	adds	r6, r3, #1
 800886a:	4423      	add	r3, r4
 800886c:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800886e:	2e3c      	cmp	r6, #60	; 0x3c
 8008870:	dc09      	bgt.n	8008886 <putc_bfd+0x30>
	pb->idx = i;
 8008872:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8008874:	68a3      	ldr	r3, [r4, #8]
 8008876:	3301      	adds	r3, #1
 8008878:	60a3      	str	r3, [r4, #8]
}
 800887a:	b002      	add	sp, #8
 800887c:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 800887e:	210d      	movs	r1, #13
 8008880:	f7ff ffe9 	bl	8008856 <putc_bfd>
 8008884:	e7ed      	b.n	8008862 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008886:	4621      	mov	r1, r4
 8008888:	f851 0b0c 	ldr.w	r0, [r1], #12
 800888c:	ab01      	add	r3, sp, #4
 800888e:	4632      	mov	r2, r6
 8008890:	f7ff fee3 	bl	800865a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008894:	9b01      	ldr	r3, [sp, #4]
 8008896:	429e      	cmp	r6, r3
 8008898:	d002      	beq.n	80088a0 <putc_bfd+0x4a>
 800889a:	f04f 36ff 	mov.w	r6, #4294967295
 800889e:	e7e8      	b.n	8008872 <putc_bfd+0x1c>
 80088a0:	2600      	movs	r6, #0
 80088a2:	e7e6      	b.n	8008872 <putc_bfd+0x1c>

080088a4 <putc_flush>:
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80088a4:	6842      	ldr	r2, [r0, #4]
 80088a6:	2a00      	cmp	r2, #0
 80088a8:	db10      	blt.n	80088cc <putc_flush+0x28>
{
 80088aa:	b510      	push	{r4, lr}
 80088ac:	b082      	sub	sp, #8
 80088ae:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80088b0:	4601      	mov	r1, r0
 80088b2:	f851 0b0c 	ldr.w	r0, [r1], #12
 80088b6:	ab01      	add	r3, sp, #4
 80088b8:	f7ff fecf 	bl	800865a <f_write>
 80088bc:	b948      	cbnz	r0, 80088d2 <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80088be:	6862      	ldr	r2, [r4, #4]
 80088c0:	9b01      	ldr	r3, [sp, #4]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d108      	bne.n	80088d8 <putc_flush+0x34>
 80088c6:	68a0      	ldr	r0, [r4, #8]
}
 80088c8:	b002      	add	sp, #8
 80088ca:	bd10      	pop	{r4, pc}
	return EOF;
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80088d0:	4770      	bx	lr
	return EOF;
 80088d2:	f04f 30ff 	mov.w	r0, #4294967295
 80088d6:	e7f7      	b.n	80088c8 <putc_flush+0x24>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	e7f4      	b.n	80088c8 <putc_flush+0x24>

080088de <f_sync>:
{
 80088de:	b570      	push	{r4, r5, r6, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80088e4:	a901      	add	r1, sp, #4
 80088e6:	f7fe ffe4 	bl	80078b2 <validate>
	if (res == FR_OK) {
 80088ea:	b970      	cbnz	r0, 800890a <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80088ec:	7d23      	ldrb	r3, [r4, #20]
 80088ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80088f2:	d00a      	beq.n	800890a <f_sync+0x2c>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80088f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088f8:	d109      	bne.n	800890e <f_sync+0x30>
			tm = GET_FATTIME();				/* Modified time */
 80088fa:	f7fe fd8b 	bl	8007414 <get_fattime>
 80088fe:	4605      	mov	r5, r0
				res = move_window(fs, fp->dir_sect);
 8008900:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008902:	9801      	ldr	r0, [sp, #4]
 8008904:	f7ff f822 	bl	800794c <move_window>
				if (res == FR_OK) {
 8008908:	b178      	cbz	r0, 800892a <f_sync+0x4c>
}
 800890a:	b002      	add	sp, #8
 800890c:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800890e:	2301      	movs	r3, #1
 8008910:	6a22      	ldr	r2, [r4, #32]
 8008912:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008916:	9801      	ldr	r0, [sp, #4]
 8008918:	7840      	ldrb	r0, [r0, #1]
 800891a:	f7fe fdbd 	bl	8007498 <disk_write>
 800891e:	bb40      	cbnz	r0, 8008972 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008920:	7d23      	ldrb	r3, [r4, #20]
 8008922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008926:	7523      	strb	r3, [r4, #20]
 8008928:	e7e7      	b.n	80088fa <f_sync+0x1c>
					dir = fp->dir_ptr;
 800892a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800892c:	7af3      	ldrb	r3, [r6, #11]
 800892e:	f043 0320 	orr.w	r3, r3, #32
 8008932:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008934:	68a2      	ldr	r2, [r4, #8]
 8008936:	4631      	mov	r1, r6
 8008938:	6820      	ldr	r0, [r4, #0]
 800893a:	f7fe ff11 	bl	8007760 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800893e:	68e1      	ldr	r1, [r4, #12]
 8008940:	f106 001c 	add.w	r0, r6, #28
 8008944:	f7fe fdd4 	bl	80074f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008948:	4629      	mov	r1, r5
 800894a:	f106 0016 	add.w	r0, r6, #22
 800894e:	f7fe fdcf 	bl	80074f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008952:	2100      	movs	r1, #0
 8008954:	f106 0012 	add.w	r0, r6, #18
 8008958:	f7fe fdc6 	bl	80074e8 <st_word>
					fs->wflag = 1;
 800895c:	9b01      	ldr	r3, [sp, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008962:	9801      	ldr	r0, [sp, #4]
 8008964:	f7ff fcf2 	bl	800834c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008968:	7d23      	ldrb	r3, [r4, #20]
 800896a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800896e:	7523      	strb	r3, [r4, #20]
 8008970:	e7cb      	b.n	800890a <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008972:	2001      	movs	r0, #1
 8008974:	e7c9      	b.n	800890a <f_sync+0x2c>

08008976 <f_close>:
{
 8008976:	b510      	push	{r4, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 800897c:	f7ff ffaf 	bl	80088de <f_sync>
	if (res == FR_OK)
 8008980:	b108      	cbz	r0, 8008986 <f_close+0x10>
}
 8008982:	b002      	add	sp, #8
 8008984:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008986:	a901      	add	r1, sp, #4
 8008988:	4620      	mov	r0, r4
 800898a:	f7fe ff92 	bl	80078b2 <validate>
		if (res == FR_OK) {
 800898e:	2800      	cmp	r0, #0
 8008990:	d1f7      	bne.n	8008982 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008992:	6920      	ldr	r0, [r4, #16]
 8008994:	f7fe fe76 	bl	8007684 <dec_lock>
			if (res == FR_OK)
 8008998:	2800      	cmp	r0, #0
 800899a:	d1f2      	bne.n	8008982 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800899c:	6020      	str	r0, [r4, #0]
 800899e:	e7f0      	b.n	8008982 <f_close+0xc>

080089a0 <f_getfree>:
{
 80089a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	b088      	sub	sp, #32
 80089a6:	9001      	str	r0, [sp, #4]
 80089a8:	4688      	mov	r8, r1
 80089aa:	4614      	mov	r4, r2
	res = find_volume(&path, &fs, 0);
 80089ac:	2200      	movs	r2, #0
 80089ae:	a907      	add	r1, sp, #28
 80089b0:	a801      	add	r0, sp, #4
 80089b2:	f7ff f823 	bl	80079fc <find_volume>
	if (res == FR_OK) {
 80089b6:	4681      	mov	r9, r0
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d159      	bne.n	8008a70 <f_getfree+0xd0>
		*fatfs = fs;				/* Return ptr to the fs object */
 80089bc:	9b07      	ldr	r3, [sp, #28]
 80089be:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	695d      	ldr	r5, [r3, #20]
 80089c4:	1ea9      	subs	r1, r5, #2
 80089c6:	428a      	cmp	r2, r1
 80089c8:	d802      	bhi.n	80089d0 <f_getfree+0x30>
			*nclst = fs->free_clst;
 80089ca:	f8c8 2000 	str.w	r2, [r8]
 80089ce:	e04f      	b.n	8008a70 <f_getfree+0xd0>
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80089d0:	781e      	ldrb	r6, [r3, #0]
 80089d2:	2e01      	cmp	r6, #1
 80089d4:	d005      	beq.n	80089e2 <f_getfree+0x42>
					clst = fs->n_fatent; sect = fs->fatbase;
 80089d6:	f8d3 a020 	ldr.w	sl, [r3, #32]
					i = 0; p = 0;
 80089da:	2400      	movs	r4, #0
 80089dc:	4626      	mov	r6, r4
			nfree = 0;
 80089de:	4627      	mov	r7, r4
 80089e0:	e02f      	b.n	8008a42 <f_getfree+0xa2>
				clst = 2; obj.fs = fs;
 80089e2:	9302      	str	r3, [sp, #8]
 80089e4:	2402      	movs	r4, #2
			nfree = 0;
 80089e6:	2700      	movs	r7, #0
 80089e8:	e004      	b.n	80089f4 <f_getfree+0x54>
				} while (++clst < fs->n_fatent);
 80089ea:	3401      	adds	r4, #1
 80089ec:	9b07      	ldr	r3, [sp, #28]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	d935      	bls.n	8008a60 <f_getfree+0xc0>
					stat = get_fat(&obj, clst);
 80089f4:	4621      	mov	r1, r4
 80089f6:	a802      	add	r0, sp, #8
 80089f8:	f7ff fa07 	bl	8007e0a <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80089fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008a00:	d02d      	beq.n	8008a5e <f_getfree+0xbe>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008a02:	2801      	cmp	r0, #1
 8008a04:	d038      	beq.n	8008a78 <f_getfree+0xd8>
					if (stat == 0) nfree++;
 8008a06:	2800      	cmp	r0, #0
 8008a08:	d1ef      	bne.n	80089ea <f_getfree+0x4a>
 8008a0a:	3701      	adds	r7, #1
 8008a0c:	e7ed      	b.n	80089ea <f_getfree+0x4a>
							res = move_window(fs, sect++);
 8008a0e:	f10a 0601 	add.w	r6, sl, #1
 8008a12:	4651      	mov	r1, sl
 8008a14:	9807      	ldr	r0, [sp, #28]
 8008a16:	f7fe ff99 	bl	800794c <move_window>
							if (res != FR_OK) break;
 8008a1a:	4681      	mov	r9, r0
 8008a1c:	bb00      	cbnz	r0, 8008a60 <f_getfree+0xc0>
							p = fs->win;
 8008a1e:	9c07      	ldr	r4, [sp, #28]
 8008a20:	3430      	adds	r4, #48	; 0x30
							res = move_window(fs, sect++);
 8008a22:	46b2      	mov	sl, r6
							i = SS(fs);
 8008a24:	f44f 7600 	mov.w	r6, #512	; 0x200
 8008a28:	e00d      	b.n	8008a46 <f_getfree+0xa6>
							if (ld_word(p) == 0) nfree++;
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f7fe fd4c 	bl	80074c8 <ld_word>
 8008a30:	b900      	cbnz	r0, 8008a34 <f_getfree+0x94>
 8008a32:	3701      	adds	r7, #1
							p += 2; i -= 2;
 8008a34:	3402      	adds	r4, #2
 8008a36:	3e02      	subs	r6, #2
 8008a38:	e001      	b.n	8008a3e <f_getfree+0x9e>
							p += 4; i -= 4;
 8008a3a:	3404      	adds	r4, #4
 8008a3c:	3e04      	subs	r6, #4
					} while (--clst);
 8008a3e:	3d01      	subs	r5, #1
 8008a40:	d00e      	beq.n	8008a60 <f_getfree+0xc0>
						if (i == 0) {
 8008a42:	2e00      	cmp	r6, #0
 8008a44:	d0e3      	beq.n	8008a0e <f_getfree+0x6e>
						if (fs->fs_type == FS_FAT16) {
 8008a46:	9b07      	ldr	r3, [sp, #28]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d0ed      	beq.n	8008a2a <f_getfree+0x8a>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f7fe fd3f 	bl	80074d2 <ld_dword>
 8008a54:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 8008a58:	d1ef      	bne.n	8008a3a <f_getfree+0x9a>
 8008a5a:	3701      	adds	r7, #1
 8008a5c:	e7ed      	b.n	8008a3a <f_getfree+0x9a>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008a5e:	46b1      	mov	r9, r6
			*nclst = nfree;			/* Return the free clusters */
 8008a60:	f8c8 7000 	str.w	r7, [r8]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008a64:	9b07      	ldr	r3, [sp, #28]
 8008a66:	611f      	str	r7, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008a68:	791a      	ldrb	r2, [r3, #4]
 8008a6a:	f042 0201 	orr.w	r2, r2, #1
 8008a6e:	711a      	strb	r2, [r3, #4]
}
 8008a70:	4648      	mov	r0, r9
 8008a72:	b008      	add	sp, #32
 8008a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008a78:	f04f 0902 	mov.w	r9, #2
 8008a7c:	e7f0      	b.n	8008a60 <f_getfree+0xc0>

08008a7e <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008a7e:	b40e      	push	{r1, r2, r3}
 8008a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	b09d      	sub	sp, #116	; 0x74
 8008a86:	4601      	mov	r1, r0
 8008a88:	ac25      	add	r4, sp, #148	; 0x94
 8008a8a:	f854 5b04 	ldr.w	r5, [r4], #4
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8008a8e:	a808      	add	r0, sp, #32
 8008a90:	f7fe ff0a 	bl	80078a8 <putc_init>

	va_start(arp, fmt);
 8008a94:	941b      	str	r4, [sp, #108]	; 0x6c

	for (;;) {
		c = *fmt++;
 8008a96:	462c      	mov	r4, r5
 8008a98:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (c == 0) break;			/* End of string */
 8008a9c:	2900      	cmp	r1, #0
 8008a9e:	f000 8102 	beq.w	8008ca6 <f_printf+0x228>
		if (c != '%') {				/* Non escape character */
 8008aa2:	2925      	cmp	r1, #37	; 0x25
 8008aa4:	d004      	beq.n	8008ab0 <f_printf+0x32>
			putc_bfd(&pb, c);
 8008aa6:	a808      	add	r0, sp, #32
 8008aa8:	f7ff fed5 	bl	8008856 <putc_bfd>
		c = *fmt++;
 8008aac:	4625      	mov	r5, r4
			continue;
 8008aae:	e7f2      	b.n	8008a96 <f_printf+0x18>
		}
		w = f = 0;
		c = *fmt++;
 8008ab0:	3502      	adds	r5, #2
 8008ab2:	7821      	ldrb	r1, [r4, #0]
		if (c == '0') {				/* Flag: '0' padding */
 8008ab4:	2930      	cmp	r1, #48	; 0x30
 8008ab6:	d004      	beq.n	8008ac2 <f_printf+0x44>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 8008ab8:	292d      	cmp	r1, #45	; 0x2d
 8008aba:	d006      	beq.n	8008aca <f_printf+0x4c>
		w = f = 0;
 8008abc:	2700      	movs	r7, #0
 8008abe:	2400      	movs	r4, #0
 8008ac0:	e00e      	b.n	8008ae0 <f_printf+0x62>
			f = 1; c = *fmt++;
 8008ac2:	1ca5      	adds	r5, r4, #2
 8008ac4:	7861      	ldrb	r1, [r4, #1]
 8008ac6:	2701      	movs	r7, #1
 8008ac8:	e7f9      	b.n	8008abe <f_printf+0x40>
				f = 2; c = *fmt++;
 8008aca:	1ca5      	adds	r5, r4, #2
 8008acc:	7861      	ldrb	r1, [r4, #1]
 8008ace:	2702      	movs	r7, #2
 8008ad0:	e7f5      	b.n	8008abe <f_printf+0x40>
			}
		}
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
 8008ad2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008ad6:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8008ada:	3c30      	subs	r4, #48	; 0x30
			c = *fmt++;
 8008adc:	f815 1b01 	ldrb.w	r1, [r5], #1
		while (IsDigit(c)) {		/* Precision */
 8008ae0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b09      	cmp	r3, #9
 8008ae8:	d9f3      	bls.n	8008ad2 <f_printf+0x54>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8008aea:	296c      	cmp	r1, #108	; 0x6c
 8008aec:	d001      	beq.n	8008af2 <f_printf+0x74>
 8008aee:	294c      	cmp	r1, #76	; 0x4c
 8008af0:	d103      	bne.n	8008afa <f_printf+0x7c>
			f |= 4; c = *fmt++;
 8008af2:	f047 0704 	orr.w	r7, r7, #4
 8008af6:	f815 1b01 	ldrb.w	r1, [r5], #1
		}
		if (!c) break;
 8008afa:	2900      	cmp	r1, #0
 8008afc:	f000 80d3 	beq.w	8008ca6 <f_printf+0x228>
		d = c;
		if (IsLower(d)) d -= 0x20;
 8008b00:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b19      	cmp	r3, #25
 8008b08:	d814      	bhi.n	8008b34 <f_printf+0xb6>
 8008b0a:	f1a1 0320 	sub.w	r3, r1, #32
 8008b0e:	b2db      	uxtb	r3, r3
		switch (d) {				/* Type is... */
 8008b10:	f1a3 0242 	sub.w	r2, r3, #66	; 0x42
 8008b14:	2a16      	cmp	r2, #22
 8008b16:	d855      	bhi.n	8008bc4 <f_printf+0x146>
 8008b18:	e8df f002 	tbb	[pc, r2]
 8008b1c:	54453d58 	.word	0x54453d58
 8008b20:	54545454 	.word	0x54545454
 8008b24:	54545454 	.word	0x54545454
 8008b28:	54545a54 	.word	0x54545a54
 8008b2c:	45540e54 	.word	0x45540e54
 8008b30:	5454      	.short	0x5454
 8008b32:	52          	.byte	0x52
 8008b33:	00          	.byte	0x00
		d = c;
 8008b34:	460b      	mov	r3, r1
 8008b36:	e7eb      	b.n	8008b10 <f_printf+0x92>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008b38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b3a:	1d1a      	adds	r2, r3, #4
 8008b3c:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b3e:	f8d3 8000 	ldr.w	r8, [r3]
			for (j = 0; p[j]; j++) ;
 8008b42:	2600      	movs	r6, #0
 8008b44:	e000      	b.n	8008b48 <f_printf+0xca>
 8008b46:	3601      	adds	r6, #1
 8008b48:	f818 3006 	ldrb.w	r3, [r8, r6]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1fa      	bne.n	8008b46 <f_printf+0xc8>
			if (!(f & 2)) {
 8008b50:	f017 0f02 	tst.w	r7, #2
 8008b54:	d110      	bne.n	8008b78 <f_printf+0xfa>
 8008b56:	e005      	b.n	8008b64 <f_printf+0xe6>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008b58:	2120      	movs	r1, #32
 8008b5a:	eb0d 0001 	add.w	r0, sp, r1
 8008b5e:	f7ff fe7a 	bl	8008856 <putc_bfd>
 8008b62:	463e      	mov	r6, r7
 8008b64:	1c77      	adds	r7, r6, #1
 8008b66:	42a6      	cmp	r6, r4
 8008b68:	d3f6      	bcc.n	8008b58 <f_printf+0xda>
 8008b6a:	463e      	mov	r6, r7
 8008b6c:	e004      	b.n	8008b78 <f_printf+0xfa>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008b6e:	f108 0801 	add.w	r8, r8, #1
 8008b72:	a808      	add	r0, sp, #32
 8008b74:	f7ff fe6f 	bl	8008856 <putc_bfd>
 8008b78:	f898 1000 	ldrb.w	r1, [r8]
 8008b7c:	2900      	cmp	r1, #0
 8008b7e:	d1f6      	bne.n	8008b6e <f_printf+0xf0>
 8008b80:	e005      	b.n	8008b8e <f_printf+0x110>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008b82:	2120      	movs	r1, #32
 8008b84:	eb0d 0001 	add.w	r0, sp, r1
 8008b88:	f7ff fe65 	bl	8008856 <putc_bfd>
 8008b8c:	463e      	mov	r6, r7
 8008b8e:	1c77      	adds	r7, r6, #1
 8008b90:	42a6      	cmp	r6, r4
 8008b92:	d3f6      	bcc.n	8008b82 <f_printf+0x104>
 8008b94:	e77f      	b.n	8008a96 <f_printf+0x18>
			continue;

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008b96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b98:	1d1a      	adds	r2, r3, #4
 8008b9a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b9c:	7819      	ldrb	r1, [r3, #0]
 8008b9e:	a808      	add	r0, sp, #32
 8008ba0:	f7ff fe59 	bl	8008856 <putc_bfd>
 8008ba4:	e777      	b.n	8008a96 <f_printf+0x18>
		case 'O' :					/* Octal */
			r = 8; break;

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8008ba6:	200a      	movs	r0, #10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008ba8:	f017 0f04 	tst.w	r7, #4
 8008bac:	d012      	beq.n	8008bd4 <f_printf+0x156>
 8008bae:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008bb0:	1d16      	adds	r6, r2, #4
 8008bb2:	961b      	str	r6, [sp, #108]	; 0x6c
 8008bb4:	6812      	ldr	r2, [r2, #0]
		if (d == 'D' && (v & 0x80000000)) {
 8008bb6:	2b44      	cmp	r3, #68	; 0x44
 8008bb8:	d018      	beq.n	8008bec <f_printf+0x16e>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
 8008bba:	f04f 0c00 	mov.w	ip, #0
 8008bbe:	e02b      	b.n	8008c18 <f_printf+0x19a>
			r = 16; break;
 8008bc0:	2010      	movs	r0, #16
 8008bc2:	e7f1      	b.n	8008ba8 <f_printf+0x12a>
			putc_bfd(&pb, c); continue;
 8008bc4:	a808      	add	r0, sp, #32
 8008bc6:	f7ff fe46 	bl	8008856 <putc_bfd>
 8008bca:	e764      	b.n	8008a96 <f_printf+0x18>
		switch (d) {				/* Type is... */
 8008bcc:	2002      	movs	r0, #2
 8008bce:	e7eb      	b.n	8008ba8 <f_printf+0x12a>
			r = 8; break;
 8008bd0:	2008      	movs	r0, #8
 8008bd2:	e7e9      	b.n	8008ba8 <f_printf+0x12a>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008bd4:	2b44      	cmp	r3, #68	; 0x44
 8008bd6:	d004      	beq.n	8008be2 <f_printf+0x164>
 8008bd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008bda:	1d16      	adds	r6, r2, #4
 8008bdc:	961b      	str	r6, [sp, #108]	; 0x6c
 8008bde:	6812      	ldr	r2, [r2, #0]
 8008be0:	e7e9      	b.n	8008bb6 <f_printf+0x138>
 8008be2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008be4:	1d16      	adds	r6, r2, #4
 8008be6:	961b      	str	r6, [sp, #108]	; 0x6c
 8008be8:	6812      	ldr	r2, [r2, #0]
 8008bea:	e7e4      	b.n	8008bb6 <f_printf+0x138>
		if (d == 'D' && (v & 0x80000000)) {
 8008bec:	2a00      	cmp	r2, #0
 8008bee:	dae4      	bge.n	8008bba <f_printf+0x13c>
			v = 0 - v;
 8008bf0:	4252      	negs	r2, r2
			f |= 8;
 8008bf2:	f047 0708 	orr.w	r7, r7, #8
 8008bf6:	e7e0      	b.n	8008bba <f_printf+0x13c>
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008bf8:	2627      	movs	r6, #39	; 0x27
 8008bfa:	4433      	add	r3, r6
 8008bfc:	b2db      	uxtb	r3, r3
			str[i++] = d + '0';
 8008bfe:	f10c 0601 	add.w	r6, ip, #1
 8008c02:	3330      	adds	r3, #48	; 0x30
 8008c04:	f10c 0970 	add.w	r9, ip, #112	; 0x70
 8008c08:	44e9      	add	r9, sp
 8008c0a:	f809 3c70 	strb.w	r3, [r9, #-112]
		} while (v && i < sizeof str / sizeof str[0]);
 8008c0e:	45c6      	cmp	lr, r8
 8008c10:	d810      	bhi.n	8008c34 <f_printf+0x1b6>
 8008c12:	2e1f      	cmp	r6, #31
 8008c14:	d80e      	bhi.n	8008c34 <f_printf+0x1b6>
			str[i++] = d + '0';
 8008c16:	46b4      	mov	ip, r6
			d = (TCHAR)(v % r); v /= r;
 8008c18:	4686      	mov	lr, r0
 8008c1a:	fbb2 f6f0 	udiv	r6, r2, r0
 8008c1e:	fb00 2316 	mls	r3, r0, r6, r2
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	4690      	mov	r8, r2
 8008c26:	4632      	mov	r2, r6
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008c28:	2b09      	cmp	r3, #9
 8008c2a:	d9e8      	bls.n	8008bfe <f_printf+0x180>
 8008c2c:	2978      	cmp	r1, #120	; 0x78
 8008c2e:	d0e3      	beq.n	8008bf8 <f_printf+0x17a>
 8008c30:	2607      	movs	r6, #7
 8008c32:	e7e2      	b.n	8008bfa <f_printf+0x17c>
		if (f & 8) str[i++] = '-';
 8008c34:	f017 0f08 	tst.w	r7, #8
 8008c38:	d008      	beq.n	8008c4c <f_printf+0x1ce>
 8008c3a:	f106 0370 	add.w	r3, r6, #112	; 0x70
 8008c3e:	eb0d 0603 	add.w	r6, sp, r3
 8008c42:	232d      	movs	r3, #45	; 0x2d
 8008c44:	f806 3c70 	strb.w	r3, [r6, #-112]
 8008c48:	f10c 0602 	add.w	r6, ip, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8008c4c:	f017 0f01 	tst.w	r7, #1
 8008c50:	d003      	beq.n	8008c5a <f_printf+0x1dc>
 8008c52:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8008c56:	46b0      	mov	r8, r6
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008c58:	e007      	b.n	8008c6a <f_printf+0x1ec>
		j = i; d = (f & 1) ? '0' : ' ';
 8008c5a:	f04f 0a20 	mov.w	sl, #32
 8008c5e:	e7fa      	b.n	8008c56 <f_printf+0x1d8>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008c60:	4651      	mov	r1, sl
 8008c62:	a808      	add	r0, sp, #32
 8008c64:	f7ff fdf7 	bl	8008856 <putc_bfd>
 8008c68:	46c8      	mov	r8, r9
 8008c6a:	f017 0f02 	tst.w	r7, #2
 8008c6e:	d104      	bne.n	8008c7a <f_printf+0x1fc>
 8008c70:	f108 0901 	add.w	r9, r8, #1
 8008c74:	45a0      	cmp	r8, r4
 8008c76:	d3f3      	bcc.n	8008c60 <f_printf+0x1e2>
 8008c78:	46c8      	mov	r8, r9
		do {
			putc_bfd(&pb, str[--i]);
 8008c7a:	3e01      	subs	r6, #1
 8008c7c:	f106 0370 	add.w	r3, r6, #112	; 0x70
 8008c80:	446b      	add	r3, sp
 8008c82:	f813 1c70 	ldrb.w	r1, [r3, #-112]
 8008c86:	a808      	add	r0, sp, #32
 8008c88:	f7ff fde5 	bl	8008856 <putc_bfd>
		} while (i);
 8008c8c:	2e00      	cmp	r6, #0
 8008c8e:	d1f4      	bne.n	8008c7a <f_printf+0x1fc>
		while (j++ < w) putc_bfd(&pb, d);
 8008c90:	f108 0601 	add.w	r6, r8, #1
 8008c94:	45a0      	cmp	r8, r4
 8008c96:	f4bf aefe 	bcs.w	8008a96 <f_printf+0x18>
 8008c9a:	4651      	mov	r1, sl
 8008c9c:	a808      	add	r0, sp, #32
 8008c9e:	f7ff fdda 	bl	8008856 <putc_bfd>
 8008ca2:	46b0      	mov	r8, r6
 8008ca4:	e7f4      	b.n	8008c90 <f_printf+0x212>
	}

	va_end(arp);

	return putc_flush(&pb);
 8008ca6:	a808      	add	r0, sp, #32
 8008ca8:	f7ff fdfc 	bl	80088a4 <putc_flush>
}
 8008cac:	b01d      	add	sp, #116	; 0x74
 8008cae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb2:	b003      	add	sp, #12
 8008cb4:	4770      	bx	lr
	...

08008cb8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008cb8:	4b13      	ldr	r3, [pc, #76]	; (8008d08 <FATFS_LinkDriverEx+0x50>)
 8008cba:	7a5b      	ldrb	r3, [r3, #9]
 8008cbc:	bb13      	cbnz	r3, 8008d04 <FATFS_LinkDriverEx+0x4c>
{
 8008cbe:	b510      	push	{r4, lr}
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8008cc6:	4b10      	ldr	r3, [pc, #64]	; (8008d08 <FATFS_LinkDriverEx+0x50>)
 8008cc8:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008ccc:	fa5f fc8c 	uxtb.w	ip, ip
 8008cd0:	f04f 0e00 	mov.w	lr, #0
 8008cd4:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 8008cd8:	f893 c009 	ldrb.w	ip, [r3, #9]
 8008cdc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8008ce0:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 8008ce4:	7a5c      	ldrb	r4, [r3, #9]
 8008ce6:	441c      	add	r4, r3
 8008ce8:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8008cea:	7a5a      	ldrb	r2, [r3, #9]
 8008cec:	1c54      	adds	r4, r2, #1
 8008cee:	b2e4      	uxtb	r4, r4
 8008cf0:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008cf2:	3230      	adds	r2, #48	; 0x30
 8008cf4:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008cf6:	233a      	movs	r3, #58	; 0x3a
 8008cf8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008cfa:	232f      	movs	r3, #47	; 0x2f
 8008cfc:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008cfe:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8008d02:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 8008d04:	2001      	movs	r0, #1
}
 8008d06:	4770      	bx	lr
 8008d08:	20000de4 	.word	0x20000de4

08008d0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008d0c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f7ff ffd2 	bl	8008cb8 <FATFS_LinkDriverEx>
}
 8008d14:	bd08      	pop	{r3, pc}
	...

08008d18 <__errno>:
 8008d18:	4b01      	ldr	r3, [pc, #4]	; (8008d20 <__errno+0x8>)
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	20000040 	.word	0x20000040

08008d24 <__libc_init_array>:
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	4d0d      	ldr	r5, [pc, #52]	; (8008d5c <__libc_init_array+0x38>)
 8008d28:	4c0d      	ldr	r4, [pc, #52]	; (8008d60 <__libc_init_array+0x3c>)
 8008d2a:	1b64      	subs	r4, r4, r5
 8008d2c:	10a4      	asrs	r4, r4, #2
 8008d2e:	2600      	movs	r6, #0
 8008d30:	42a6      	cmp	r6, r4
 8008d32:	d109      	bne.n	8008d48 <__libc_init_array+0x24>
 8008d34:	4d0b      	ldr	r5, [pc, #44]	; (8008d64 <__libc_init_array+0x40>)
 8008d36:	4c0c      	ldr	r4, [pc, #48]	; (8008d68 <__libc_init_array+0x44>)
 8008d38:	f003 fe2c 	bl	800c994 <_init>
 8008d3c:	1b64      	subs	r4, r4, r5
 8008d3e:	10a4      	asrs	r4, r4, #2
 8008d40:	2600      	movs	r6, #0
 8008d42:	42a6      	cmp	r6, r4
 8008d44:	d105      	bne.n	8008d52 <__libc_init_array+0x2e>
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d4c:	4798      	blx	r3
 8008d4e:	3601      	adds	r6, #1
 8008d50:	e7ee      	b.n	8008d30 <__libc_init_array+0xc>
 8008d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d56:	4798      	blx	r3
 8008d58:	3601      	adds	r6, #1
 8008d5a:	e7f2      	b.n	8008d42 <__libc_init_array+0x1e>
 8008d5c:	0800d0d8 	.word	0x0800d0d8
 8008d60:	0800d0d8 	.word	0x0800d0d8
 8008d64:	0800d0d8 	.word	0x0800d0d8
 8008d68:	0800d0dc 	.word	0x0800d0dc

08008d6c <memcpy>:
 8008d6c:	440a      	add	r2, r1
 8008d6e:	4291      	cmp	r1, r2
 8008d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d74:	d100      	bne.n	8008d78 <memcpy+0xc>
 8008d76:	4770      	bx	lr
 8008d78:	b510      	push	{r4, lr}
 8008d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d82:	4291      	cmp	r1, r2
 8008d84:	d1f9      	bne.n	8008d7a <memcpy+0xe>
 8008d86:	bd10      	pop	{r4, pc}

08008d88 <memset>:
 8008d88:	4402      	add	r2, r0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d100      	bne.n	8008d92 <memset+0xa>
 8008d90:	4770      	bx	lr
 8008d92:	f803 1b01 	strb.w	r1, [r3], #1
 8008d96:	e7f9      	b.n	8008d8c <memset+0x4>

08008d98 <__cvt>:
 8008d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	ec55 4b10 	vmov	r4, r5, d0
 8008da0:	2d00      	cmp	r5, #0
 8008da2:	460e      	mov	r6, r1
 8008da4:	4619      	mov	r1, r3
 8008da6:	462b      	mov	r3, r5
 8008da8:	bfbb      	ittet	lt
 8008daa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008dae:	461d      	movlt	r5, r3
 8008db0:	2300      	movge	r3, #0
 8008db2:	232d      	movlt	r3, #45	; 0x2d
 8008db4:	700b      	strb	r3, [r1, #0]
 8008db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008db8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008dbc:	4691      	mov	r9, r2
 8008dbe:	f023 0820 	bic.w	r8, r3, #32
 8008dc2:	bfbc      	itt	lt
 8008dc4:	4622      	movlt	r2, r4
 8008dc6:	4614      	movlt	r4, r2
 8008dc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008dcc:	d005      	beq.n	8008dda <__cvt+0x42>
 8008dce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008dd2:	d100      	bne.n	8008dd6 <__cvt+0x3e>
 8008dd4:	3601      	adds	r6, #1
 8008dd6:	2102      	movs	r1, #2
 8008dd8:	e000      	b.n	8008ddc <__cvt+0x44>
 8008dda:	2103      	movs	r1, #3
 8008ddc:	ab03      	add	r3, sp, #12
 8008dde:	9301      	str	r3, [sp, #4]
 8008de0:	ab02      	add	r3, sp, #8
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	ec45 4b10 	vmov	d0, r4, r5
 8008de8:	4653      	mov	r3, sl
 8008dea:	4632      	mov	r2, r6
 8008dec:	f000 fcf8 	bl	80097e0 <_dtoa_r>
 8008df0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008df4:	4607      	mov	r7, r0
 8008df6:	d102      	bne.n	8008dfe <__cvt+0x66>
 8008df8:	f019 0f01 	tst.w	r9, #1
 8008dfc:	d022      	beq.n	8008e44 <__cvt+0xac>
 8008dfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e02:	eb07 0906 	add.w	r9, r7, r6
 8008e06:	d110      	bne.n	8008e2a <__cvt+0x92>
 8008e08:	783b      	ldrb	r3, [r7, #0]
 8008e0a:	2b30      	cmp	r3, #48	; 0x30
 8008e0c:	d10a      	bne.n	8008e24 <__cvt+0x8c>
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2300      	movs	r3, #0
 8008e12:	4620      	mov	r0, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 fe5f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e1a:	b918      	cbnz	r0, 8008e24 <__cvt+0x8c>
 8008e1c:	f1c6 0601 	rsb	r6, r6, #1
 8008e20:	f8ca 6000 	str.w	r6, [sl]
 8008e24:	f8da 3000 	ldr.w	r3, [sl]
 8008e28:	4499      	add	r9, r3
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4629      	mov	r1, r5
 8008e32:	f7f7 fe51 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e36:	b108      	cbz	r0, 8008e3c <__cvt+0xa4>
 8008e38:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e3c:	2230      	movs	r2, #48	; 0x30
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	454b      	cmp	r3, r9
 8008e42:	d307      	bcc.n	8008e54 <__cvt+0xbc>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e48:	1bdb      	subs	r3, r3, r7
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	b004      	add	sp, #16
 8008e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e54:	1c59      	adds	r1, r3, #1
 8008e56:	9103      	str	r1, [sp, #12]
 8008e58:	701a      	strb	r2, [r3, #0]
 8008e5a:	e7f0      	b.n	8008e3e <__cvt+0xa6>

08008e5c <__exponent>:
 8008e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2900      	cmp	r1, #0
 8008e62:	bfb8      	it	lt
 8008e64:	4249      	neglt	r1, r1
 8008e66:	f803 2b02 	strb.w	r2, [r3], #2
 8008e6a:	bfb4      	ite	lt
 8008e6c:	222d      	movlt	r2, #45	; 0x2d
 8008e6e:	222b      	movge	r2, #43	; 0x2b
 8008e70:	2909      	cmp	r1, #9
 8008e72:	7042      	strb	r2, [r0, #1]
 8008e74:	dd2a      	ble.n	8008ecc <__exponent+0x70>
 8008e76:	f10d 0407 	add.w	r4, sp, #7
 8008e7a:	46a4      	mov	ip, r4
 8008e7c:	270a      	movs	r7, #10
 8008e7e:	46a6      	mov	lr, r4
 8008e80:	460a      	mov	r2, r1
 8008e82:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e86:	fb07 1516 	mls	r5, r7, r6, r1
 8008e8a:	3530      	adds	r5, #48	; 0x30
 8008e8c:	2a63      	cmp	r2, #99	; 0x63
 8008e8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e96:	4631      	mov	r1, r6
 8008e98:	dcf1      	bgt.n	8008e7e <__exponent+0x22>
 8008e9a:	3130      	adds	r1, #48	; 0x30
 8008e9c:	f1ae 0502 	sub.w	r5, lr, #2
 8008ea0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008ea4:	1c44      	adds	r4, r0, #1
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4561      	cmp	r1, ip
 8008eaa:	d30a      	bcc.n	8008ec2 <__exponent+0x66>
 8008eac:	f10d 0209 	add.w	r2, sp, #9
 8008eb0:	eba2 020e 	sub.w	r2, r2, lr
 8008eb4:	4565      	cmp	r5, ip
 8008eb6:	bf88      	it	hi
 8008eb8:	2200      	movhi	r2, #0
 8008eba:	4413      	add	r3, r2
 8008ebc:	1a18      	subs	r0, r3, r0
 8008ebe:	b003      	add	sp, #12
 8008ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ec6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008eca:	e7ed      	b.n	8008ea8 <__exponent+0x4c>
 8008ecc:	2330      	movs	r3, #48	; 0x30
 8008ece:	3130      	adds	r1, #48	; 0x30
 8008ed0:	7083      	strb	r3, [r0, #2]
 8008ed2:	70c1      	strb	r1, [r0, #3]
 8008ed4:	1d03      	adds	r3, r0, #4
 8008ed6:	e7f1      	b.n	8008ebc <__exponent+0x60>

08008ed8 <_printf_float>:
 8008ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008edc:	ed2d 8b02 	vpush	{d8}
 8008ee0:	b08d      	sub	sp, #52	; 0x34
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ee8:	4616      	mov	r6, r2
 8008eea:	461f      	mov	r7, r3
 8008eec:	4605      	mov	r5, r0
 8008eee:	f001 fa65 	bl	800a3bc <_localeconv_r>
 8008ef2:	f8d0 a000 	ldr.w	sl, [r0]
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	f7f7 f972 	bl	80001e0 <strlen>
 8008efc:	2300      	movs	r3, #0
 8008efe:	930a      	str	r3, [sp, #40]	; 0x28
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	9305      	str	r3, [sp, #20]
 8008f04:	f8d8 3000 	ldr.w	r3, [r8]
 8008f08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f0c:	3307      	adds	r3, #7
 8008f0e:	f023 0307 	bic.w	r3, r3, #7
 8008f12:	f103 0208 	add.w	r2, r3, #8
 8008f16:	f8c8 2000 	str.w	r2, [r8]
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f2a:	9307      	str	r3, [sp, #28]
 8008f2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f30:	ee08 0a10 	vmov	s16, r0
 8008f34:	4b9f      	ldr	r3, [pc, #636]	; (80091b4 <_printf_float+0x2dc>)
 8008f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3e:	f7f7 fdfd 	bl	8000b3c <__aeabi_dcmpun>
 8008f42:	bb88      	cbnz	r0, 8008fa8 <_printf_float+0xd0>
 8008f44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f48:	4b9a      	ldr	r3, [pc, #616]	; (80091b4 <_printf_float+0x2dc>)
 8008f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4e:	f7f7 fdd7 	bl	8000b00 <__aeabi_dcmple>
 8008f52:	bb48      	cbnz	r0, 8008fa8 <_printf_float+0xd0>
 8008f54:	2200      	movs	r2, #0
 8008f56:	2300      	movs	r3, #0
 8008f58:	4640      	mov	r0, r8
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	f7f7 fdc6 	bl	8000aec <__aeabi_dcmplt>
 8008f60:	b110      	cbz	r0, 8008f68 <_printf_float+0x90>
 8008f62:	232d      	movs	r3, #45	; 0x2d
 8008f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f68:	4b93      	ldr	r3, [pc, #588]	; (80091b8 <_printf_float+0x2e0>)
 8008f6a:	4894      	ldr	r0, [pc, #592]	; (80091bc <_printf_float+0x2e4>)
 8008f6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008f70:	bf94      	ite	ls
 8008f72:	4698      	movls	r8, r3
 8008f74:	4680      	movhi	r8, r0
 8008f76:	2303      	movs	r3, #3
 8008f78:	6123      	str	r3, [r4, #16]
 8008f7a:	9b05      	ldr	r3, [sp, #20]
 8008f7c:	f023 0204 	bic.w	r2, r3, #4
 8008f80:	6022      	str	r2, [r4, #0]
 8008f82:	f04f 0900 	mov.w	r9, #0
 8008f86:	9700      	str	r7, [sp, #0]
 8008f88:	4633      	mov	r3, r6
 8008f8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	4628      	mov	r0, r5
 8008f90:	f000 f9d8 	bl	8009344 <_printf_common>
 8008f94:	3001      	adds	r0, #1
 8008f96:	f040 8090 	bne.w	80090ba <_printf_float+0x1e2>
 8008f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9e:	b00d      	add	sp, #52	; 0x34
 8008fa0:	ecbd 8b02 	vpop	{d8}
 8008fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa8:	4642      	mov	r2, r8
 8008faa:	464b      	mov	r3, r9
 8008fac:	4640      	mov	r0, r8
 8008fae:	4649      	mov	r1, r9
 8008fb0:	f7f7 fdc4 	bl	8000b3c <__aeabi_dcmpun>
 8008fb4:	b140      	cbz	r0, 8008fc8 <_printf_float+0xf0>
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bfbc      	itt	lt
 8008fbc:	232d      	movlt	r3, #45	; 0x2d
 8008fbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008fc2:	487f      	ldr	r0, [pc, #508]	; (80091c0 <_printf_float+0x2e8>)
 8008fc4:	4b7f      	ldr	r3, [pc, #508]	; (80091c4 <_printf_float+0x2ec>)
 8008fc6:	e7d1      	b.n	8008f6c <_printf_float+0x94>
 8008fc8:	6863      	ldr	r3, [r4, #4]
 8008fca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008fce:	9206      	str	r2, [sp, #24]
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	d13f      	bne.n	8009054 <_printf_float+0x17c>
 8008fd4:	2306      	movs	r3, #6
 8008fd6:	6063      	str	r3, [r4, #4]
 8008fd8:	9b05      	ldr	r3, [sp, #20]
 8008fda:	6861      	ldr	r1, [r4, #4]
 8008fdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	9303      	str	r3, [sp, #12]
 8008fe4:	ab0a      	add	r3, sp, #40	; 0x28
 8008fe6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008fea:	ab09      	add	r3, sp, #36	; 0x24
 8008fec:	ec49 8b10 	vmov	d0, r8, r9
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	6022      	str	r2, [r4, #0]
 8008ff4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f7ff fecd 	bl	8008d98 <__cvt>
 8008ffe:	9b06      	ldr	r3, [sp, #24]
 8009000:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009002:	2b47      	cmp	r3, #71	; 0x47
 8009004:	4680      	mov	r8, r0
 8009006:	d108      	bne.n	800901a <_printf_float+0x142>
 8009008:	1cc8      	adds	r0, r1, #3
 800900a:	db02      	blt.n	8009012 <_printf_float+0x13a>
 800900c:	6863      	ldr	r3, [r4, #4]
 800900e:	4299      	cmp	r1, r3
 8009010:	dd41      	ble.n	8009096 <_printf_float+0x1be>
 8009012:	f1ab 0b02 	sub.w	fp, fp, #2
 8009016:	fa5f fb8b 	uxtb.w	fp, fp
 800901a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800901e:	d820      	bhi.n	8009062 <_printf_float+0x18a>
 8009020:	3901      	subs	r1, #1
 8009022:	465a      	mov	r2, fp
 8009024:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009028:	9109      	str	r1, [sp, #36]	; 0x24
 800902a:	f7ff ff17 	bl	8008e5c <__exponent>
 800902e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009030:	1813      	adds	r3, r2, r0
 8009032:	2a01      	cmp	r2, #1
 8009034:	4681      	mov	r9, r0
 8009036:	6123      	str	r3, [r4, #16]
 8009038:	dc02      	bgt.n	8009040 <_printf_float+0x168>
 800903a:	6822      	ldr	r2, [r4, #0]
 800903c:	07d2      	lsls	r2, r2, #31
 800903e:	d501      	bpl.n	8009044 <_printf_float+0x16c>
 8009040:	3301      	adds	r3, #1
 8009042:	6123      	str	r3, [r4, #16]
 8009044:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009048:	2b00      	cmp	r3, #0
 800904a:	d09c      	beq.n	8008f86 <_printf_float+0xae>
 800904c:	232d      	movs	r3, #45	; 0x2d
 800904e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009052:	e798      	b.n	8008f86 <_printf_float+0xae>
 8009054:	9a06      	ldr	r2, [sp, #24]
 8009056:	2a47      	cmp	r2, #71	; 0x47
 8009058:	d1be      	bne.n	8008fd8 <_printf_float+0x100>
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1bc      	bne.n	8008fd8 <_printf_float+0x100>
 800905e:	2301      	movs	r3, #1
 8009060:	e7b9      	b.n	8008fd6 <_printf_float+0xfe>
 8009062:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009066:	d118      	bne.n	800909a <_printf_float+0x1c2>
 8009068:	2900      	cmp	r1, #0
 800906a:	6863      	ldr	r3, [r4, #4]
 800906c:	dd0b      	ble.n	8009086 <_printf_float+0x1ae>
 800906e:	6121      	str	r1, [r4, #16]
 8009070:	b913      	cbnz	r3, 8009078 <_printf_float+0x1a0>
 8009072:	6822      	ldr	r2, [r4, #0]
 8009074:	07d0      	lsls	r0, r2, #31
 8009076:	d502      	bpl.n	800907e <_printf_float+0x1a6>
 8009078:	3301      	adds	r3, #1
 800907a:	440b      	add	r3, r1
 800907c:	6123      	str	r3, [r4, #16]
 800907e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009080:	f04f 0900 	mov.w	r9, #0
 8009084:	e7de      	b.n	8009044 <_printf_float+0x16c>
 8009086:	b913      	cbnz	r3, 800908e <_printf_float+0x1b6>
 8009088:	6822      	ldr	r2, [r4, #0]
 800908a:	07d2      	lsls	r2, r2, #31
 800908c:	d501      	bpl.n	8009092 <_printf_float+0x1ba>
 800908e:	3302      	adds	r3, #2
 8009090:	e7f4      	b.n	800907c <_printf_float+0x1a4>
 8009092:	2301      	movs	r3, #1
 8009094:	e7f2      	b.n	800907c <_printf_float+0x1a4>
 8009096:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800909a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800909c:	4299      	cmp	r1, r3
 800909e:	db05      	blt.n	80090ac <_printf_float+0x1d4>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	6121      	str	r1, [r4, #16]
 80090a4:	07d8      	lsls	r0, r3, #31
 80090a6:	d5ea      	bpl.n	800907e <_printf_float+0x1a6>
 80090a8:	1c4b      	adds	r3, r1, #1
 80090aa:	e7e7      	b.n	800907c <_printf_float+0x1a4>
 80090ac:	2900      	cmp	r1, #0
 80090ae:	bfd4      	ite	le
 80090b0:	f1c1 0202 	rsble	r2, r1, #2
 80090b4:	2201      	movgt	r2, #1
 80090b6:	4413      	add	r3, r2
 80090b8:	e7e0      	b.n	800907c <_printf_float+0x1a4>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	055a      	lsls	r2, r3, #21
 80090be:	d407      	bmi.n	80090d0 <_printf_float+0x1f8>
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	4642      	mov	r2, r8
 80090c4:	4631      	mov	r1, r6
 80090c6:	4628      	mov	r0, r5
 80090c8:	47b8      	blx	r7
 80090ca:	3001      	adds	r0, #1
 80090cc:	d12c      	bne.n	8009128 <_printf_float+0x250>
 80090ce:	e764      	b.n	8008f9a <_printf_float+0xc2>
 80090d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090d4:	f240 80e0 	bls.w	8009298 <_printf_float+0x3c0>
 80090d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090dc:	2200      	movs	r2, #0
 80090de:	2300      	movs	r3, #0
 80090e0:	f7f7 fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d034      	beq.n	8009152 <_printf_float+0x27a>
 80090e8:	4a37      	ldr	r2, [pc, #220]	; (80091c8 <_printf_float+0x2f0>)
 80090ea:	2301      	movs	r3, #1
 80090ec:	4631      	mov	r1, r6
 80090ee:	4628      	mov	r0, r5
 80090f0:	47b8      	blx	r7
 80090f2:	3001      	adds	r0, #1
 80090f4:	f43f af51 	beq.w	8008f9a <_printf_float+0xc2>
 80090f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090fc:	429a      	cmp	r2, r3
 80090fe:	db02      	blt.n	8009106 <_printf_float+0x22e>
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	07d8      	lsls	r0, r3, #31
 8009104:	d510      	bpl.n	8009128 <_printf_float+0x250>
 8009106:	ee18 3a10 	vmov	r3, s16
 800910a:	4652      	mov	r2, sl
 800910c:	4631      	mov	r1, r6
 800910e:	4628      	mov	r0, r5
 8009110:	47b8      	blx	r7
 8009112:	3001      	adds	r0, #1
 8009114:	f43f af41 	beq.w	8008f9a <_printf_float+0xc2>
 8009118:	f04f 0800 	mov.w	r8, #0
 800911c:	f104 091a 	add.w	r9, r4, #26
 8009120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009122:	3b01      	subs	r3, #1
 8009124:	4543      	cmp	r3, r8
 8009126:	dc09      	bgt.n	800913c <_printf_float+0x264>
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	079b      	lsls	r3, r3, #30
 800912c:	f100 8105 	bmi.w	800933a <_printf_float+0x462>
 8009130:	68e0      	ldr	r0, [r4, #12]
 8009132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009134:	4298      	cmp	r0, r3
 8009136:	bfb8      	it	lt
 8009138:	4618      	movlt	r0, r3
 800913a:	e730      	b.n	8008f9e <_printf_float+0xc6>
 800913c:	2301      	movs	r3, #1
 800913e:	464a      	mov	r2, r9
 8009140:	4631      	mov	r1, r6
 8009142:	4628      	mov	r0, r5
 8009144:	47b8      	blx	r7
 8009146:	3001      	adds	r0, #1
 8009148:	f43f af27 	beq.w	8008f9a <_printf_float+0xc2>
 800914c:	f108 0801 	add.w	r8, r8, #1
 8009150:	e7e6      	b.n	8009120 <_printf_float+0x248>
 8009152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009154:	2b00      	cmp	r3, #0
 8009156:	dc39      	bgt.n	80091cc <_printf_float+0x2f4>
 8009158:	4a1b      	ldr	r2, [pc, #108]	; (80091c8 <_printf_float+0x2f0>)
 800915a:	2301      	movs	r3, #1
 800915c:	4631      	mov	r1, r6
 800915e:	4628      	mov	r0, r5
 8009160:	47b8      	blx	r7
 8009162:	3001      	adds	r0, #1
 8009164:	f43f af19 	beq.w	8008f9a <_printf_float+0xc2>
 8009168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800916c:	4313      	orrs	r3, r2
 800916e:	d102      	bne.n	8009176 <_printf_float+0x29e>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	07d9      	lsls	r1, r3, #31
 8009174:	d5d8      	bpl.n	8009128 <_printf_float+0x250>
 8009176:	ee18 3a10 	vmov	r3, s16
 800917a:	4652      	mov	r2, sl
 800917c:	4631      	mov	r1, r6
 800917e:	4628      	mov	r0, r5
 8009180:	47b8      	blx	r7
 8009182:	3001      	adds	r0, #1
 8009184:	f43f af09 	beq.w	8008f9a <_printf_float+0xc2>
 8009188:	f04f 0900 	mov.w	r9, #0
 800918c:	f104 0a1a 	add.w	sl, r4, #26
 8009190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009192:	425b      	negs	r3, r3
 8009194:	454b      	cmp	r3, r9
 8009196:	dc01      	bgt.n	800919c <_printf_float+0x2c4>
 8009198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800919a:	e792      	b.n	80090c2 <_printf_float+0x1ea>
 800919c:	2301      	movs	r3, #1
 800919e:	4652      	mov	r2, sl
 80091a0:	4631      	mov	r1, r6
 80091a2:	4628      	mov	r0, r5
 80091a4:	47b8      	blx	r7
 80091a6:	3001      	adds	r0, #1
 80091a8:	f43f aef7 	beq.w	8008f9a <_printf_float+0xc2>
 80091ac:	f109 0901 	add.w	r9, r9, #1
 80091b0:	e7ee      	b.n	8009190 <_printf_float+0x2b8>
 80091b2:	bf00      	nop
 80091b4:	7fefffff 	.word	0x7fefffff
 80091b8:	0800ccc4 	.word	0x0800ccc4
 80091bc:	0800ccc8 	.word	0x0800ccc8
 80091c0:	0800ccd0 	.word	0x0800ccd0
 80091c4:	0800cccc 	.word	0x0800cccc
 80091c8:	0800ccd4 	.word	0x0800ccd4
 80091cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091d0:	429a      	cmp	r2, r3
 80091d2:	bfa8      	it	ge
 80091d4:	461a      	movge	r2, r3
 80091d6:	2a00      	cmp	r2, #0
 80091d8:	4691      	mov	r9, r2
 80091da:	dc37      	bgt.n	800924c <_printf_float+0x374>
 80091dc:	f04f 0b00 	mov.w	fp, #0
 80091e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091e4:	f104 021a 	add.w	r2, r4, #26
 80091e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091ea:	9305      	str	r3, [sp, #20]
 80091ec:	eba3 0309 	sub.w	r3, r3, r9
 80091f0:	455b      	cmp	r3, fp
 80091f2:	dc33      	bgt.n	800925c <_printf_float+0x384>
 80091f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091f8:	429a      	cmp	r2, r3
 80091fa:	db3b      	blt.n	8009274 <_printf_float+0x39c>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	07da      	lsls	r2, r3, #31
 8009200:	d438      	bmi.n	8009274 <_printf_float+0x39c>
 8009202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009204:	9a05      	ldr	r2, [sp, #20]
 8009206:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009208:	1a9a      	subs	r2, r3, r2
 800920a:	eba3 0901 	sub.w	r9, r3, r1
 800920e:	4591      	cmp	r9, r2
 8009210:	bfa8      	it	ge
 8009212:	4691      	movge	r9, r2
 8009214:	f1b9 0f00 	cmp.w	r9, #0
 8009218:	dc35      	bgt.n	8009286 <_printf_float+0x3ae>
 800921a:	f04f 0800 	mov.w	r8, #0
 800921e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009222:	f104 0a1a 	add.w	sl, r4, #26
 8009226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	eba3 0309 	sub.w	r3, r3, r9
 8009230:	4543      	cmp	r3, r8
 8009232:	f77f af79 	ble.w	8009128 <_printf_float+0x250>
 8009236:	2301      	movs	r3, #1
 8009238:	4652      	mov	r2, sl
 800923a:	4631      	mov	r1, r6
 800923c:	4628      	mov	r0, r5
 800923e:	47b8      	blx	r7
 8009240:	3001      	adds	r0, #1
 8009242:	f43f aeaa 	beq.w	8008f9a <_printf_float+0xc2>
 8009246:	f108 0801 	add.w	r8, r8, #1
 800924a:	e7ec      	b.n	8009226 <_printf_float+0x34e>
 800924c:	4613      	mov	r3, r2
 800924e:	4631      	mov	r1, r6
 8009250:	4642      	mov	r2, r8
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	d1c0      	bne.n	80091dc <_printf_float+0x304>
 800925a:	e69e      	b.n	8008f9a <_printf_float+0xc2>
 800925c:	2301      	movs	r3, #1
 800925e:	4631      	mov	r1, r6
 8009260:	4628      	mov	r0, r5
 8009262:	9205      	str	r2, [sp, #20]
 8009264:	47b8      	blx	r7
 8009266:	3001      	adds	r0, #1
 8009268:	f43f ae97 	beq.w	8008f9a <_printf_float+0xc2>
 800926c:	9a05      	ldr	r2, [sp, #20]
 800926e:	f10b 0b01 	add.w	fp, fp, #1
 8009272:	e7b9      	b.n	80091e8 <_printf_float+0x310>
 8009274:	ee18 3a10 	vmov	r3, s16
 8009278:	4652      	mov	r2, sl
 800927a:	4631      	mov	r1, r6
 800927c:	4628      	mov	r0, r5
 800927e:	47b8      	blx	r7
 8009280:	3001      	adds	r0, #1
 8009282:	d1be      	bne.n	8009202 <_printf_float+0x32a>
 8009284:	e689      	b.n	8008f9a <_printf_float+0xc2>
 8009286:	9a05      	ldr	r2, [sp, #20]
 8009288:	464b      	mov	r3, r9
 800928a:	4442      	add	r2, r8
 800928c:	4631      	mov	r1, r6
 800928e:	4628      	mov	r0, r5
 8009290:	47b8      	blx	r7
 8009292:	3001      	adds	r0, #1
 8009294:	d1c1      	bne.n	800921a <_printf_float+0x342>
 8009296:	e680      	b.n	8008f9a <_printf_float+0xc2>
 8009298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800929a:	2a01      	cmp	r2, #1
 800929c:	dc01      	bgt.n	80092a2 <_printf_float+0x3ca>
 800929e:	07db      	lsls	r3, r3, #31
 80092a0:	d538      	bpl.n	8009314 <_printf_float+0x43c>
 80092a2:	2301      	movs	r3, #1
 80092a4:	4642      	mov	r2, r8
 80092a6:	4631      	mov	r1, r6
 80092a8:	4628      	mov	r0, r5
 80092aa:	47b8      	blx	r7
 80092ac:	3001      	adds	r0, #1
 80092ae:	f43f ae74 	beq.w	8008f9a <_printf_float+0xc2>
 80092b2:	ee18 3a10 	vmov	r3, s16
 80092b6:	4652      	mov	r2, sl
 80092b8:	4631      	mov	r1, r6
 80092ba:	4628      	mov	r0, r5
 80092bc:	47b8      	blx	r7
 80092be:	3001      	adds	r0, #1
 80092c0:	f43f ae6b 	beq.w	8008f9a <_printf_float+0xc2>
 80092c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092c8:	2200      	movs	r2, #0
 80092ca:	2300      	movs	r3, #0
 80092cc:	f7f7 fc04 	bl	8000ad8 <__aeabi_dcmpeq>
 80092d0:	b9d8      	cbnz	r0, 800930a <_printf_float+0x432>
 80092d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d4:	f108 0201 	add.w	r2, r8, #1
 80092d8:	3b01      	subs	r3, #1
 80092da:	4631      	mov	r1, r6
 80092dc:	4628      	mov	r0, r5
 80092de:	47b8      	blx	r7
 80092e0:	3001      	adds	r0, #1
 80092e2:	d10e      	bne.n	8009302 <_printf_float+0x42a>
 80092e4:	e659      	b.n	8008f9a <_printf_float+0xc2>
 80092e6:	2301      	movs	r3, #1
 80092e8:	4652      	mov	r2, sl
 80092ea:	4631      	mov	r1, r6
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b8      	blx	r7
 80092f0:	3001      	adds	r0, #1
 80092f2:	f43f ae52 	beq.w	8008f9a <_printf_float+0xc2>
 80092f6:	f108 0801 	add.w	r8, r8, #1
 80092fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fc:	3b01      	subs	r3, #1
 80092fe:	4543      	cmp	r3, r8
 8009300:	dcf1      	bgt.n	80092e6 <_printf_float+0x40e>
 8009302:	464b      	mov	r3, r9
 8009304:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009308:	e6dc      	b.n	80090c4 <_printf_float+0x1ec>
 800930a:	f04f 0800 	mov.w	r8, #0
 800930e:	f104 0a1a 	add.w	sl, r4, #26
 8009312:	e7f2      	b.n	80092fa <_printf_float+0x422>
 8009314:	2301      	movs	r3, #1
 8009316:	4642      	mov	r2, r8
 8009318:	e7df      	b.n	80092da <_printf_float+0x402>
 800931a:	2301      	movs	r3, #1
 800931c:	464a      	mov	r2, r9
 800931e:	4631      	mov	r1, r6
 8009320:	4628      	mov	r0, r5
 8009322:	47b8      	blx	r7
 8009324:	3001      	adds	r0, #1
 8009326:	f43f ae38 	beq.w	8008f9a <_printf_float+0xc2>
 800932a:	f108 0801 	add.w	r8, r8, #1
 800932e:	68e3      	ldr	r3, [r4, #12]
 8009330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009332:	1a5b      	subs	r3, r3, r1
 8009334:	4543      	cmp	r3, r8
 8009336:	dcf0      	bgt.n	800931a <_printf_float+0x442>
 8009338:	e6fa      	b.n	8009130 <_printf_float+0x258>
 800933a:	f04f 0800 	mov.w	r8, #0
 800933e:	f104 0919 	add.w	r9, r4, #25
 8009342:	e7f4      	b.n	800932e <_printf_float+0x456>

08009344 <_printf_common>:
 8009344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009348:	4616      	mov	r6, r2
 800934a:	4699      	mov	r9, r3
 800934c:	688a      	ldr	r2, [r1, #8]
 800934e:	690b      	ldr	r3, [r1, #16]
 8009350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009354:	4293      	cmp	r3, r2
 8009356:	bfb8      	it	lt
 8009358:	4613      	movlt	r3, r2
 800935a:	6033      	str	r3, [r6, #0]
 800935c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009360:	4607      	mov	r7, r0
 8009362:	460c      	mov	r4, r1
 8009364:	b10a      	cbz	r2, 800936a <_printf_common+0x26>
 8009366:	3301      	adds	r3, #1
 8009368:	6033      	str	r3, [r6, #0]
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	0699      	lsls	r1, r3, #26
 800936e:	bf42      	ittt	mi
 8009370:	6833      	ldrmi	r3, [r6, #0]
 8009372:	3302      	addmi	r3, #2
 8009374:	6033      	strmi	r3, [r6, #0]
 8009376:	6825      	ldr	r5, [r4, #0]
 8009378:	f015 0506 	ands.w	r5, r5, #6
 800937c:	d106      	bne.n	800938c <_printf_common+0x48>
 800937e:	f104 0a19 	add.w	sl, r4, #25
 8009382:	68e3      	ldr	r3, [r4, #12]
 8009384:	6832      	ldr	r2, [r6, #0]
 8009386:	1a9b      	subs	r3, r3, r2
 8009388:	42ab      	cmp	r3, r5
 800938a:	dc26      	bgt.n	80093da <_printf_common+0x96>
 800938c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009390:	1e13      	subs	r3, r2, #0
 8009392:	6822      	ldr	r2, [r4, #0]
 8009394:	bf18      	it	ne
 8009396:	2301      	movne	r3, #1
 8009398:	0692      	lsls	r2, r2, #26
 800939a:	d42b      	bmi.n	80093f4 <_printf_common+0xb0>
 800939c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093a0:	4649      	mov	r1, r9
 80093a2:	4638      	mov	r0, r7
 80093a4:	47c0      	blx	r8
 80093a6:	3001      	adds	r0, #1
 80093a8:	d01e      	beq.n	80093e8 <_printf_common+0xa4>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	68e5      	ldr	r5, [r4, #12]
 80093ae:	6832      	ldr	r2, [r6, #0]
 80093b0:	f003 0306 	and.w	r3, r3, #6
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	bf08      	it	eq
 80093b8:	1aad      	subeq	r5, r5, r2
 80093ba:	68a3      	ldr	r3, [r4, #8]
 80093bc:	6922      	ldr	r2, [r4, #16]
 80093be:	bf0c      	ite	eq
 80093c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093c4:	2500      	movne	r5, #0
 80093c6:	4293      	cmp	r3, r2
 80093c8:	bfc4      	itt	gt
 80093ca:	1a9b      	subgt	r3, r3, r2
 80093cc:	18ed      	addgt	r5, r5, r3
 80093ce:	2600      	movs	r6, #0
 80093d0:	341a      	adds	r4, #26
 80093d2:	42b5      	cmp	r5, r6
 80093d4:	d11a      	bne.n	800940c <_printf_common+0xc8>
 80093d6:	2000      	movs	r0, #0
 80093d8:	e008      	b.n	80093ec <_printf_common+0xa8>
 80093da:	2301      	movs	r3, #1
 80093dc:	4652      	mov	r2, sl
 80093de:	4649      	mov	r1, r9
 80093e0:	4638      	mov	r0, r7
 80093e2:	47c0      	blx	r8
 80093e4:	3001      	adds	r0, #1
 80093e6:	d103      	bne.n	80093f0 <_printf_common+0xac>
 80093e8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f0:	3501      	adds	r5, #1
 80093f2:	e7c6      	b.n	8009382 <_printf_common+0x3e>
 80093f4:	18e1      	adds	r1, r4, r3
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	2030      	movs	r0, #48	; 0x30
 80093fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093fe:	4422      	add	r2, r4
 8009400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009408:	3302      	adds	r3, #2
 800940a:	e7c7      	b.n	800939c <_printf_common+0x58>
 800940c:	2301      	movs	r3, #1
 800940e:	4622      	mov	r2, r4
 8009410:	4649      	mov	r1, r9
 8009412:	4638      	mov	r0, r7
 8009414:	47c0      	blx	r8
 8009416:	3001      	adds	r0, #1
 8009418:	d0e6      	beq.n	80093e8 <_printf_common+0xa4>
 800941a:	3601      	adds	r6, #1
 800941c:	e7d9      	b.n	80093d2 <_printf_common+0x8e>
	...

08009420 <_printf_i>:
 8009420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009424:	7e0f      	ldrb	r7, [r1, #24]
 8009426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009428:	2f78      	cmp	r7, #120	; 0x78
 800942a:	4691      	mov	r9, r2
 800942c:	4680      	mov	r8, r0
 800942e:	460c      	mov	r4, r1
 8009430:	469a      	mov	sl, r3
 8009432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009436:	d807      	bhi.n	8009448 <_printf_i+0x28>
 8009438:	2f62      	cmp	r7, #98	; 0x62
 800943a:	d80a      	bhi.n	8009452 <_printf_i+0x32>
 800943c:	2f00      	cmp	r7, #0
 800943e:	f000 80d8 	beq.w	80095f2 <_printf_i+0x1d2>
 8009442:	2f58      	cmp	r7, #88	; 0x58
 8009444:	f000 80a3 	beq.w	800958e <_printf_i+0x16e>
 8009448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800944c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009450:	e03a      	b.n	80094c8 <_printf_i+0xa8>
 8009452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009456:	2b15      	cmp	r3, #21
 8009458:	d8f6      	bhi.n	8009448 <_printf_i+0x28>
 800945a:	a101      	add	r1, pc, #4	; (adr r1, 8009460 <_printf_i+0x40>)
 800945c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009460:	080094b9 	.word	0x080094b9
 8009464:	080094cd 	.word	0x080094cd
 8009468:	08009449 	.word	0x08009449
 800946c:	08009449 	.word	0x08009449
 8009470:	08009449 	.word	0x08009449
 8009474:	08009449 	.word	0x08009449
 8009478:	080094cd 	.word	0x080094cd
 800947c:	08009449 	.word	0x08009449
 8009480:	08009449 	.word	0x08009449
 8009484:	08009449 	.word	0x08009449
 8009488:	08009449 	.word	0x08009449
 800948c:	080095d9 	.word	0x080095d9
 8009490:	080094fd 	.word	0x080094fd
 8009494:	080095bb 	.word	0x080095bb
 8009498:	08009449 	.word	0x08009449
 800949c:	08009449 	.word	0x08009449
 80094a0:	080095fb 	.word	0x080095fb
 80094a4:	08009449 	.word	0x08009449
 80094a8:	080094fd 	.word	0x080094fd
 80094ac:	08009449 	.word	0x08009449
 80094b0:	08009449 	.word	0x08009449
 80094b4:	080095c3 	.word	0x080095c3
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	1d1a      	adds	r2, r3, #4
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	602a      	str	r2, [r5, #0]
 80094c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0a3      	b.n	8009614 <_printf_i+0x1f4>
 80094cc:	6820      	ldr	r0, [r4, #0]
 80094ce:	6829      	ldr	r1, [r5, #0]
 80094d0:	0606      	lsls	r6, r0, #24
 80094d2:	f101 0304 	add.w	r3, r1, #4
 80094d6:	d50a      	bpl.n	80094ee <_printf_i+0xce>
 80094d8:	680e      	ldr	r6, [r1, #0]
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	2e00      	cmp	r6, #0
 80094de:	da03      	bge.n	80094e8 <_printf_i+0xc8>
 80094e0:	232d      	movs	r3, #45	; 0x2d
 80094e2:	4276      	negs	r6, r6
 80094e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e8:	485e      	ldr	r0, [pc, #376]	; (8009664 <_printf_i+0x244>)
 80094ea:	230a      	movs	r3, #10
 80094ec:	e019      	b.n	8009522 <_printf_i+0x102>
 80094ee:	680e      	ldr	r6, [r1, #0]
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094f6:	bf18      	it	ne
 80094f8:	b236      	sxthne	r6, r6
 80094fa:	e7ef      	b.n	80094dc <_printf_i+0xbc>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	6820      	ldr	r0, [r4, #0]
 8009500:	1d19      	adds	r1, r3, #4
 8009502:	6029      	str	r1, [r5, #0]
 8009504:	0601      	lsls	r1, r0, #24
 8009506:	d501      	bpl.n	800950c <_printf_i+0xec>
 8009508:	681e      	ldr	r6, [r3, #0]
 800950a:	e002      	b.n	8009512 <_printf_i+0xf2>
 800950c:	0646      	lsls	r6, r0, #25
 800950e:	d5fb      	bpl.n	8009508 <_printf_i+0xe8>
 8009510:	881e      	ldrh	r6, [r3, #0]
 8009512:	4854      	ldr	r0, [pc, #336]	; (8009664 <_printf_i+0x244>)
 8009514:	2f6f      	cmp	r7, #111	; 0x6f
 8009516:	bf0c      	ite	eq
 8009518:	2308      	moveq	r3, #8
 800951a:	230a      	movne	r3, #10
 800951c:	2100      	movs	r1, #0
 800951e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009522:	6865      	ldr	r5, [r4, #4]
 8009524:	60a5      	str	r5, [r4, #8]
 8009526:	2d00      	cmp	r5, #0
 8009528:	bfa2      	ittt	ge
 800952a:	6821      	ldrge	r1, [r4, #0]
 800952c:	f021 0104 	bicge.w	r1, r1, #4
 8009530:	6021      	strge	r1, [r4, #0]
 8009532:	b90e      	cbnz	r6, 8009538 <_printf_i+0x118>
 8009534:	2d00      	cmp	r5, #0
 8009536:	d04d      	beq.n	80095d4 <_printf_i+0x1b4>
 8009538:	4615      	mov	r5, r2
 800953a:	fbb6 f1f3 	udiv	r1, r6, r3
 800953e:	fb03 6711 	mls	r7, r3, r1, r6
 8009542:	5dc7      	ldrb	r7, [r0, r7]
 8009544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009548:	4637      	mov	r7, r6
 800954a:	42bb      	cmp	r3, r7
 800954c:	460e      	mov	r6, r1
 800954e:	d9f4      	bls.n	800953a <_printf_i+0x11a>
 8009550:	2b08      	cmp	r3, #8
 8009552:	d10b      	bne.n	800956c <_printf_i+0x14c>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	07de      	lsls	r6, r3, #31
 8009558:	d508      	bpl.n	800956c <_printf_i+0x14c>
 800955a:	6923      	ldr	r3, [r4, #16]
 800955c:	6861      	ldr	r1, [r4, #4]
 800955e:	4299      	cmp	r1, r3
 8009560:	bfde      	ittt	le
 8009562:	2330      	movle	r3, #48	; 0x30
 8009564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800956c:	1b52      	subs	r2, r2, r5
 800956e:	6122      	str	r2, [r4, #16]
 8009570:	f8cd a000 	str.w	sl, [sp]
 8009574:	464b      	mov	r3, r9
 8009576:	aa03      	add	r2, sp, #12
 8009578:	4621      	mov	r1, r4
 800957a:	4640      	mov	r0, r8
 800957c:	f7ff fee2 	bl	8009344 <_printf_common>
 8009580:	3001      	adds	r0, #1
 8009582:	d14c      	bne.n	800961e <_printf_i+0x1fe>
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	b004      	add	sp, #16
 800958a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958e:	4835      	ldr	r0, [pc, #212]	; (8009664 <_printf_i+0x244>)
 8009590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009594:	6829      	ldr	r1, [r5, #0]
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	f851 6b04 	ldr.w	r6, [r1], #4
 800959c:	6029      	str	r1, [r5, #0]
 800959e:	061d      	lsls	r5, r3, #24
 80095a0:	d514      	bpl.n	80095cc <_printf_i+0x1ac>
 80095a2:	07df      	lsls	r7, r3, #31
 80095a4:	bf44      	itt	mi
 80095a6:	f043 0320 	orrmi.w	r3, r3, #32
 80095aa:	6023      	strmi	r3, [r4, #0]
 80095ac:	b91e      	cbnz	r6, 80095b6 <_printf_i+0x196>
 80095ae:	6823      	ldr	r3, [r4, #0]
 80095b0:	f023 0320 	bic.w	r3, r3, #32
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	2310      	movs	r3, #16
 80095b8:	e7b0      	b.n	800951c <_printf_i+0xfc>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	f043 0320 	orr.w	r3, r3, #32
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	2378      	movs	r3, #120	; 0x78
 80095c4:	4828      	ldr	r0, [pc, #160]	; (8009668 <_printf_i+0x248>)
 80095c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095ca:	e7e3      	b.n	8009594 <_printf_i+0x174>
 80095cc:	0659      	lsls	r1, r3, #25
 80095ce:	bf48      	it	mi
 80095d0:	b2b6      	uxthmi	r6, r6
 80095d2:	e7e6      	b.n	80095a2 <_printf_i+0x182>
 80095d4:	4615      	mov	r5, r2
 80095d6:	e7bb      	b.n	8009550 <_printf_i+0x130>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	6826      	ldr	r6, [r4, #0]
 80095dc:	6961      	ldr	r1, [r4, #20]
 80095de:	1d18      	adds	r0, r3, #4
 80095e0:	6028      	str	r0, [r5, #0]
 80095e2:	0635      	lsls	r5, r6, #24
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	d501      	bpl.n	80095ec <_printf_i+0x1cc>
 80095e8:	6019      	str	r1, [r3, #0]
 80095ea:	e002      	b.n	80095f2 <_printf_i+0x1d2>
 80095ec:	0670      	lsls	r0, r6, #25
 80095ee:	d5fb      	bpl.n	80095e8 <_printf_i+0x1c8>
 80095f0:	8019      	strh	r1, [r3, #0]
 80095f2:	2300      	movs	r3, #0
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	4615      	mov	r5, r2
 80095f8:	e7ba      	b.n	8009570 <_printf_i+0x150>
 80095fa:	682b      	ldr	r3, [r5, #0]
 80095fc:	1d1a      	adds	r2, r3, #4
 80095fe:	602a      	str	r2, [r5, #0]
 8009600:	681d      	ldr	r5, [r3, #0]
 8009602:	6862      	ldr	r2, [r4, #4]
 8009604:	2100      	movs	r1, #0
 8009606:	4628      	mov	r0, r5
 8009608:	f7f6 fdf2 	bl	80001f0 <memchr>
 800960c:	b108      	cbz	r0, 8009612 <_printf_i+0x1f2>
 800960e:	1b40      	subs	r0, r0, r5
 8009610:	6060      	str	r0, [r4, #4]
 8009612:	6863      	ldr	r3, [r4, #4]
 8009614:	6123      	str	r3, [r4, #16]
 8009616:	2300      	movs	r3, #0
 8009618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800961c:	e7a8      	b.n	8009570 <_printf_i+0x150>
 800961e:	6923      	ldr	r3, [r4, #16]
 8009620:	462a      	mov	r2, r5
 8009622:	4649      	mov	r1, r9
 8009624:	4640      	mov	r0, r8
 8009626:	47d0      	blx	sl
 8009628:	3001      	adds	r0, #1
 800962a:	d0ab      	beq.n	8009584 <_printf_i+0x164>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	079b      	lsls	r3, r3, #30
 8009630:	d413      	bmi.n	800965a <_printf_i+0x23a>
 8009632:	68e0      	ldr	r0, [r4, #12]
 8009634:	9b03      	ldr	r3, [sp, #12]
 8009636:	4298      	cmp	r0, r3
 8009638:	bfb8      	it	lt
 800963a:	4618      	movlt	r0, r3
 800963c:	e7a4      	b.n	8009588 <_printf_i+0x168>
 800963e:	2301      	movs	r3, #1
 8009640:	4632      	mov	r2, r6
 8009642:	4649      	mov	r1, r9
 8009644:	4640      	mov	r0, r8
 8009646:	47d0      	blx	sl
 8009648:	3001      	adds	r0, #1
 800964a:	d09b      	beq.n	8009584 <_printf_i+0x164>
 800964c:	3501      	adds	r5, #1
 800964e:	68e3      	ldr	r3, [r4, #12]
 8009650:	9903      	ldr	r1, [sp, #12]
 8009652:	1a5b      	subs	r3, r3, r1
 8009654:	42ab      	cmp	r3, r5
 8009656:	dcf2      	bgt.n	800963e <_printf_i+0x21e>
 8009658:	e7eb      	b.n	8009632 <_printf_i+0x212>
 800965a:	2500      	movs	r5, #0
 800965c:	f104 0619 	add.w	r6, r4, #25
 8009660:	e7f5      	b.n	800964e <_printf_i+0x22e>
 8009662:	bf00      	nop
 8009664:	0800ccd6 	.word	0x0800ccd6
 8009668:	0800cce7 	.word	0x0800cce7

0800966c <siprintf>:
 800966c:	b40e      	push	{r1, r2, r3}
 800966e:	b500      	push	{lr}
 8009670:	b09c      	sub	sp, #112	; 0x70
 8009672:	ab1d      	add	r3, sp, #116	; 0x74
 8009674:	9002      	str	r0, [sp, #8]
 8009676:	9006      	str	r0, [sp, #24]
 8009678:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800967c:	4809      	ldr	r0, [pc, #36]	; (80096a4 <siprintf+0x38>)
 800967e:	9107      	str	r1, [sp, #28]
 8009680:	9104      	str	r1, [sp, #16]
 8009682:	4909      	ldr	r1, [pc, #36]	; (80096a8 <siprintf+0x3c>)
 8009684:	f853 2b04 	ldr.w	r2, [r3], #4
 8009688:	9105      	str	r1, [sp, #20]
 800968a:	6800      	ldr	r0, [r0, #0]
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	a902      	add	r1, sp, #8
 8009690:	f001 fb76 	bl	800ad80 <_svfiprintf_r>
 8009694:	9b02      	ldr	r3, [sp, #8]
 8009696:	2200      	movs	r2, #0
 8009698:	701a      	strb	r2, [r3, #0]
 800969a:	b01c      	add	sp, #112	; 0x70
 800969c:	f85d eb04 	ldr.w	lr, [sp], #4
 80096a0:	b003      	add	sp, #12
 80096a2:	4770      	bx	lr
 80096a4:	20000040 	.word	0x20000040
 80096a8:	ffff0208 	.word	0xffff0208

080096ac <strcat>:
 80096ac:	b510      	push	{r4, lr}
 80096ae:	4602      	mov	r2, r0
 80096b0:	7814      	ldrb	r4, [r2, #0]
 80096b2:	4613      	mov	r3, r2
 80096b4:	3201      	adds	r2, #1
 80096b6:	2c00      	cmp	r4, #0
 80096b8:	d1fa      	bne.n	80096b0 <strcat+0x4>
 80096ba:	3b01      	subs	r3, #1
 80096bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096c4:	2a00      	cmp	r2, #0
 80096c6:	d1f9      	bne.n	80096bc <strcat+0x10>
 80096c8:	bd10      	pop	{r4, pc}

080096ca <quorem>:
 80096ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ce:	6903      	ldr	r3, [r0, #16]
 80096d0:	690c      	ldr	r4, [r1, #16]
 80096d2:	42a3      	cmp	r3, r4
 80096d4:	4607      	mov	r7, r0
 80096d6:	f2c0 8081 	blt.w	80097dc <quorem+0x112>
 80096da:	3c01      	subs	r4, #1
 80096dc:	f101 0814 	add.w	r8, r1, #20
 80096e0:	f100 0514 	add.w	r5, r0, #20
 80096e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096e8:	9301      	str	r3, [sp, #4]
 80096ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096f2:	3301      	adds	r3, #1
 80096f4:	429a      	cmp	r2, r3
 80096f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8009702:	d331      	bcc.n	8009768 <quorem+0x9e>
 8009704:	f04f 0e00 	mov.w	lr, #0
 8009708:	4640      	mov	r0, r8
 800970a:	46ac      	mov	ip, r5
 800970c:	46f2      	mov	sl, lr
 800970e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009712:	b293      	uxth	r3, r2
 8009714:	fb06 e303 	mla	r3, r6, r3, lr
 8009718:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800971c:	b29b      	uxth	r3, r3
 800971e:	ebaa 0303 	sub.w	r3, sl, r3
 8009722:	f8dc a000 	ldr.w	sl, [ip]
 8009726:	0c12      	lsrs	r2, r2, #16
 8009728:	fa13 f38a 	uxtah	r3, r3, sl
 800972c:	fb06 e202 	mla	r2, r6, r2, lr
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	9b00      	ldr	r3, [sp, #0]
 8009734:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009738:	b292      	uxth	r2, r2
 800973a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800973e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009742:	f8bd 3000 	ldrh.w	r3, [sp]
 8009746:	4581      	cmp	r9, r0
 8009748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800974c:	f84c 3b04 	str.w	r3, [ip], #4
 8009750:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009754:	d2db      	bcs.n	800970e <quorem+0x44>
 8009756:	f855 300b 	ldr.w	r3, [r5, fp]
 800975a:	b92b      	cbnz	r3, 8009768 <quorem+0x9e>
 800975c:	9b01      	ldr	r3, [sp, #4]
 800975e:	3b04      	subs	r3, #4
 8009760:	429d      	cmp	r5, r3
 8009762:	461a      	mov	r2, r3
 8009764:	d32e      	bcc.n	80097c4 <quorem+0xfa>
 8009766:	613c      	str	r4, [r7, #16]
 8009768:	4638      	mov	r0, r7
 800976a:	f001 f8b5 	bl	800a8d8 <__mcmp>
 800976e:	2800      	cmp	r0, #0
 8009770:	db24      	blt.n	80097bc <quorem+0xf2>
 8009772:	3601      	adds	r6, #1
 8009774:	4628      	mov	r0, r5
 8009776:	f04f 0c00 	mov.w	ip, #0
 800977a:	f858 2b04 	ldr.w	r2, [r8], #4
 800977e:	f8d0 e000 	ldr.w	lr, [r0]
 8009782:	b293      	uxth	r3, r2
 8009784:	ebac 0303 	sub.w	r3, ip, r3
 8009788:	0c12      	lsrs	r2, r2, #16
 800978a:	fa13 f38e 	uxtah	r3, r3, lr
 800978e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009792:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009796:	b29b      	uxth	r3, r3
 8009798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800979c:	45c1      	cmp	r9, r8
 800979e:	f840 3b04 	str.w	r3, [r0], #4
 80097a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097a6:	d2e8      	bcs.n	800977a <quorem+0xb0>
 80097a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097b0:	b922      	cbnz	r2, 80097bc <quorem+0xf2>
 80097b2:	3b04      	subs	r3, #4
 80097b4:	429d      	cmp	r5, r3
 80097b6:	461a      	mov	r2, r3
 80097b8:	d30a      	bcc.n	80097d0 <quorem+0x106>
 80097ba:	613c      	str	r4, [r7, #16]
 80097bc:	4630      	mov	r0, r6
 80097be:	b003      	add	sp, #12
 80097c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c4:	6812      	ldr	r2, [r2, #0]
 80097c6:	3b04      	subs	r3, #4
 80097c8:	2a00      	cmp	r2, #0
 80097ca:	d1cc      	bne.n	8009766 <quorem+0x9c>
 80097cc:	3c01      	subs	r4, #1
 80097ce:	e7c7      	b.n	8009760 <quorem+0x96>
 80097d0:	6812      	ldr	r2, [r2, #0]
 80097d2:	3b04      	subs	r3, #4
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	d1f0      	bne.n	80097ba <quorem+0xf0>
 80097d8:	3c01      	subs	r4, #1
 80097da:	e7eb      	b.n	80097b4 <quorem+0xea>
 80097dc:	2000      	movs	r0, #0
 80097de:	e7ee      	b.n	80097be <quorem+0xf4>

080097e0 <_dtoa_r>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	ed2d 8b04 	vpush	{d8-d9}
 80097e8:	ec57 6b10 	vmov	r6, r7, d0
 80097ec:	b093      	sub	sp, #76	; 0x4c
 80097ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097f4:	9106      	str	r1, [sp, #24]
 80097f6:	ee10 aa10 	vmov	sl, s0
 80097fa:	4604      	mov	r4, r0
 80097fc:	9209      	str	r2, [sp, #36]	; 0x24
 80097fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009800:	46bb      	mov	fp, r7
 8009802:	b975      	cbnz	r5, 8009822 <_dtoa_r+0x42>
 8009804:	2010      	movs	r0, #16
 8009806:	f000 fddd 	bl	800a3c4 <malloc>
 800980a:	4602      	mov	r2, r0
 800980c:	6260      	str	r0, [r4, #36]	; 0x24
 800980e:	b920      	cbnz	r0, 800981a <_dtoa_r+0x3a>
 8009810:	4ba7      	ldr	r3, [pc, #668]	; (8009ab0 <_dtoa_r+0x2d0>)
 8009812:	21ea      	movs	r1, #234	; 0xea
 8009814:	48a7      	ldr	r0, [pc, #668]	; (8009ab4 <_dtoa_r+0x2d4>)
 8009816:	f001 fbc3 	bl	800afa0 <__assert_func>
 800981a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800981e:	6005      	str	r5, [r0, #0]
 8009820:	60c5      	str	r5, [r0, #12]
 8009822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009824:	6819      	ldr	r1, [r3, #0]
 8009826:	b151      	cbz	r1, 800983e <_dtoa_r+0x5e>
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	604a      	str	r2, [r1, #4]
 800982c:	2301      	movs	r3, #1
 800982e:	4093      	lsls	r3, r2
 8009830:	608b      	str	r3, [r1, #8]
 8009832:	4620      	mov	r0, r4
 8009834:	f000 fe0e 	bl	800a454 <_Bfree>
 8009838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	1e3b      	subs	r3, r7, #0
 8009840:	bfaa      	itet	ge
 8009842:	2300      	movge	r3, #0
 8009844:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009848:	f8c8 3000 	strge.w	r3, [r8]
 800984c:	4b9a      	ldr	r3, [pc, #616]	; (8009ab8 <_dtoa_r+0x2d8>)
 800984e:	bfbc      	itt	lt
 8009850:	2201      	movlt	r2, #1
 8009852:	f8c8 2000 	strlt.w	r2, [r8]
 8009856:	ea33 030b 	bics.w	r3, r3, fp
 800985a:	d11b      	bne.n	8009894 <_dtoa_r+0xb4>
 800985c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800985e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009868:	4333      	orrs	r3, r6
 800986a:	f000 8592 	beq.w	800a392 <_dtoa_r+0xbb2>
 800986e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009870:	b963      	cbnz	r3, 800988c <_dtoa_r+0xac>
 8009872:	4b92      	ldr	r3, [pc, #584]	; (8009abc <_dtoa_r+0x2dc>)
 8009874:	e022      	b.n	80098bc <_dtoa_r+0xdc>
 8009876:	4b92      	ldr	r3, [pc, #584]	; (8009ac0 <_dtoa_r+0x2e0>)
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	3308      	adds	r3, #8
 800987c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	9801      	ldr	r0, [sp, #4]
 8009882:	b013      	add	sp, #76	; 0x4c
 8009884:	ecbd 8b04 	vpop	{d8-d9}
 8009888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988c:	4b8b      	ldr	r3, [pc, #556]	; (8009abc <_dtoa_r+0x2dc>)
 800988e:	9301      	str	r3, [sp, #4]
 8009890:	3303      	adds	r3, #3
 8009892:	e7f3      	b.n	800987c <_dtoa_r+0x9c>
 8009894:	2200      	movs	r2, #0
 8009896:	2300      	movs	r3, #0
 8009898:	4650      	mov	r0, sl
 800989a:	4659      	mov	r1, fp
 800989c:	f7f7 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 80098a0:	ec4b ab19 	vmov	d9, sl, fp
 80098a4:	4680      	mov	r8, r0
 80098a6:	b158      	cbz	r0, 80098c0 <_dtoa_r+0xe0>
 80098a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098aa:	2301      	movs	r3, #1
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 856b 	beq.w	800a38c <_dtoa_r+0xbac>
 80098b6:	4883      	ldr	r0, [pc, #524]	; (8009ac4 <_dtoa_r+0x2e4>)
 80098b8:	6018      	str	r0, [r3, #0]
 80098ba:	1e43      	subs	r3, r0, #1
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	e7df      	b.n	8009880 <_dtoa_r+0xa0>
 80098c0:	ec4b ab10 	vmov	d0, sl, fp
 80098c4:	aa10      	add	r2, sp, #64	; 0x40
 80098c6:	a911      	add	r1, sp, #68	; 0x44
 80098c8:	4620      	mov	r0, r4
 80098ca:	f001 f8ab 	bl	800aa24 <__d2b>
 80098ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80098d2:	ee08 0a10 	vmov	s16, r0
 80098d6:	2d00      	cmp	r5, #0
 80098d8:	f000 8084 	beq.w	80099e4 <_dtoa_r+0x204>
 80098dc:	ee19 3a90 	vmov	r3, s19
 80098e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098e8:	4656      	mov	r6, sl
 80098ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80098f6:	4b74      	ldr	r3, [pc, #464]	; (8009ac8 <_dtoa_r+0x2e8>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	4630      	mov	r0, r6
 80098fc:	4639      	mov	r1, r7
 80098fe:	f7f6 fccb 	bl	8000298 <__aeabi_dsub>
 8009902:	a365      	add	r3, pc, #404	; (adr r3, 8009a98 <_dtoa_r+0x2b8>)
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f7f6 fe7e 	bl	8000608 <__aeabi_dmul>
 800990c:	a364      	add	r3, pc, #400	; (adr r3, 8009aa0 <_dtoa_r+0x2c0>)
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	f7f6 fcc3 	bl	800029c <__adddf3>
 8009916:	4606      	mov	r6, r0
 8009918:	4628      	mov	r0, r5
 800991a:	460f      	mov	r7, r1
 800991c:	f7f6 fe0a 	bl	8000534 <__aeabi_i2d>
 8009920:	a361      	add	r3, pc, #388	; (adr r3, 8009aa8 <_dtoa_r+0x2c8>)
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	f7f6 fe6f 	bl	8000608 <__aeabi_dmul>
 800992a:	4602      	mov	r2, r0
 800992c:	460b      	mov	r3, r1
 800992e:	4630      	mov	r0, r6
 8009930:	4639      	mov	r1, r7
 8009932:	f7f6 fcb3 	bl	800029c <__adddf3>
 8009936:	4606      	mov	r6, r0
 8009938:	460f      	mov	r7, r1
 800993a:	f7f7 f915 	bl	8000b68 <__aeabi_d2iz>
 800993e:	2200      	movs	r2, #0
 8009940:	9000      	str	r0, [sp, #0]
 8009942:	2300      	movs	r3, #0
 8009944:	4630      	mov	r0, r6
 8009946:	4639      	mov	r1, r7
 8009948:	f7f7 f8d0 	bl	8000aec <__aeabi_dcmplt>
 800994c:	b150      	cbz	r0, 8009964 <_dtoa_r+0x184>
 800994e:	9800      	ldr	r0, [sp, #0]
 8009950:	f7f6 fdf0 	bl	8000534 <__aeabi_i2d>
 8009954:	4632      	mov	r2, r6
 8009956:	463b      	mov	r3, r7
 8009958:	f7f7 f8be 	bl	8000ad8 <__aeabi_dcmpeq>
 800995c:	b910      	cbnz	r0, 8009964 <_dtoa_r+0x184>
 800995e:	9b00      	ldr	r3, [sp, #0]
 8009960:	3b01      	subs	r3, #1
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	9b00      	ldr	r3, [sp, #0]
 8009966:	2b16      	cmp	r3, #22
 8009968:	d85a      	bhi.n	8009a20 <_dtoa_r+0x240>
 800996a:	9a00      	ldr	r2, [sp, #0]
 800996c:	4b57      	ldr	r3, [pc, #348]	; (8009acc <_dtoa_r+0x2ec>)
 800996e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	ec51 0b19 	vmov	r0, r1, d9
 800997a:	f7f7 f8b7 	bl	8000aec <__aeabi_dcmplt>
 800997e:	2800      	cmp	r0, #0
 8009980:	d050      	beq.n	8009a24 <_dtoa_r+0x244>
 8009982:	9b00      	ldr	r3, [sp, #0]
 8009984:	3b01      	subs	r3, #1
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	2300      	movs	r3, #0
 800998a:	930b      	str	r3, [sp, #44]	; 0x2c
 800998c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800998e:	1b5d      	subs	r5, r3, r5
 8009990:	1e6b      	subs	r3, r5, #1
 8009992:	9305      	str	r3, [sp, #20]
 8009994:	bf45      	ittet	mi
 8009996:	f1c5 0301 	rsbmi	r3, r5, #1
 800999a:	9304      	strmi	r3, [sp, #16]
 800999c:	2300      	movpl	r3, #0
 800999e:	2300      	movmi	r3, #0
 80099a0:	bf4c      	ite	mi
 80099a2:	9305      	strmi	r3, [sp, #20]
 80099a4:	9304      	strpl	r3, [sp, #16]
 80099a6:	9b00      	ldr	r3, [sp, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	db3d      	blt.n	8009a28 <_dtoa_r+0x248>
 80099ac:	9b05      	ldr	r3, [sp, #20]
 80099ae:	9a00      	ldr	r2, [sp, #0]
 80099b0:	920a      	str	r2, [sp, #40]	; 0x28
 80099b2:	4413      	add	r3, r2
 80099b4:	9305      	str	r3, [sp, #20]
 80099b6:	2300      	movs	r3, #0
 80099b8:	9307      	str	r3, [sp, #28]
 80099ba:	9b06      	ldr	r3, [sp, #24]
 80099bc:	2b09      	cmp	r3, #9
 80099be:	f200 8089 	bhi.w	8009ad4 <_dtoa_r+0x2f4>
 80099c2:	2b05      	cmp	r3, #5
 80099c4:	bfc4      	itt	gt
 80099c6:	3b04      	subgt	r3, #4
 80099c8:	9306      	strgt	r3, [sp, #24]
 80099ca:	9b06      	ldr	r3, [sp, #24]
 80099cc:	f1a3 0302 	sub.w	r3, r3, #2
 80099d0:	bfcc      	ite	gt
 80099d2:	2500      	movgt	r5, #0
 80099d4:	2501      	movle	r5, #1
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	f200 8087 	bhi.w	8009aea <_dtoa_r+0x30a>
 80099dc:	e8df f003 	tbb	[pc, r3]
 80099e0:	59383a2d 	.word	0x59383a2d
 80099e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099e8:	441d      	add	r5, r3
 80099ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	bfc1      	itttt	gt
 80099f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80099fa:	fa0b f303 	lslgt.w	r3, fp, r3
 80099fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009a02:	bfda      	itte	le
 8009a04:	f1c3 0320 	rsble	r3, r3, #32
 8009a08:	fa06 f003 	lslle.w	r0, r6, r3
 8009a0c:	4318      	orrgt	r0, r3
 8009a0e:	f7f6 fd81 	bl	8000514 <__aeabi_ui2d>
 8009a12:	2301      	movs	r3, #1
 8009a14:	4606      	mov	r6, r0
 8009a16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009a1a:	3d01      	subs	r5, #1
 8009a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8009a1e:	e76a      	b.n	80098f6 <_dtoa_r+0x116>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e7b2      	b.n	800998a <_dtoa_r+0x1aa>
 8009a24:	900b      	str	r0, [sp, #44]	; 0x2c
 8009a26:	e7b1      	b.n	800998c <_dtoa_r+0x1ac>
 8009a28:	9b04      	ldr	r3, [sp, #16]
 8009a2a:	9a00      	ldr	r2, [sp, #0]
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	9304      	str	r3, [sp, #16]
 8009a30:	4253      	negs	r3, r2
 8009a32:	9307      	str	r3, [sp, #28]
 8009a34:	2300      	movs	r3, #0
 8009a36:	930a      	str	r3, [sp, #40]	; 0x28
 8009a38:	e7bf      	b.n	80099ba <_dtoa_r+0x1da>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	9308      	str	r3, [sp, #32]
 8009a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	dc55      	bgt.n	8009af0 <_dtoa_r+0x310>
 8009a44:	2301      	movs	r3, #1
 8009a46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a4e:	e00c      	b.n	8009a6a <_dtoa_r+0x28a>
 8009a50:	2301      	movs	r3, #1
 8009a52:	e7f3      	b.n	8009a3c <_dtoa_r+0x25c>
 8009a54:	2300      	movs	r3, #0
 8009a56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a58:	9308      	str	r3, [sp, #32]
 8009a5a:	9b00      	ldr	r3, [sp, #0]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	9302      	str	r3, [sp, #8]
 8009a60:	3301      	adds	r3, #1
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	9303      	str	r3, [sp, #12]
 8009a66:	bfb8      	it	lt
 8009a68:	2301      	movlt	r3, #1
 8009a6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	6042      	str	r2, [r0, #4]
 8009a70:	2204      	movs	r2, #4
 8009a72:	f102 0614 	add.w	r6, r2, #20
 8009a76:	429e      	cmp	r6, r3
 8009a78:	6841      	ldr	r1, [r0, #4]
 8009a7a:	d93d      	bls.n	8009af8 <_dtoa_r+0x318>
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 fca9 	bl	800a3d4 <_Balloc>
 8009a82:	9001      	str	r0, [sp, #4]
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d13b      	bne.n	8009b00 <_dtoa_r+0x320>
 8009a88:	4b11      	ldr	r3, [pc, #68]	; (8009ad0 <_dtoa_r+0x2f0>)
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a90:	e6c0      	b.n	8009814 <_dtoa_r+0x34>
 8009a92:	2301      	movs	r3, #1
 8009a94:	e7df      	b.n	8009a56 <_dtoa_r+0x276>
 8009a96:	bf00      	nop
 8009a98:	636f4361 	.word	0x636f4361
 8009a9c:	3fd287a7 	.word	0x3fd287a7
 8009aa0:	8b60c8b3 	.word	0x8b60c8b3
 8009aa4:	3fc68a28 	.word	0x3fc68a28
 8009aa8:	509f79fb 	.word	0x509f79fb
 8009aac:	3fd34413 	.word	0x3fd34413
 8009ab0:	0800cd05 	.word	0x0800cd05
 8009ab4:	0800cd1c 	.word	0x0800cd1c
 8009ab8:	7ff00000 	.word	0x7ff00000
 8009abc:	0800cd01 	.word	0x0800cd01
 8009ac0:	0800ccf8 	.word	0x0800ccf8
 8009ac4:	0800ccd5 	.word	0x0800ccd5
 8009ac8:	3ff80000 	.word	0x3ff80000
 8009acc:	0800ce10 	.word	0x0800ce10
 8009ad0:	0800cd77 	.word	0x0800cd77
 8009ad4:	2501      	movs	r5, #1
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	9306      	str	r3, [sp, #24]
 8009ada:	9508      	str	r5, [sp, #32]
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2312      	movs	r3, #18
 8009ae8:	e7b0      	b.n	8009a4c <_dtoa_r+0x26c>
 8009aea:	2301      	movs	r3, #1
 8009aec:	9308      	str	r3, [sp, #32]
 8009aee:	e7f5      	b.n	8009adc <_dtoa_r+0x2fc>
 8009af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009af6:	e7b8      	b.n	8009a6a <_dtoa_r+0x28a>
 8009af8:	3101      	adds	r1, #1
 8009afa:	6041      	str	r1, [r0, #4]
 8009afc:	0052      	lsls	r2, r2, #1
 8009afe:	e7b8      	b.n	8009a72 <_dtoa_r+0x292>
 8009b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b02:	9a01      	ldr	r2, [sp, #4]
 8009b04:	601a      	str	r2, [r3, #0]
 8009b06:	9b03      	ldr	r3, [sp, #12]
 8009b08:	2b0e      	cmp	r3, #14
 8009b0a:	f200 809d 	bhi.w	8009c48 <_dtoa_r+0x468>
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	f000 809a 	beq.w	8009c48 <_dtoa_r+0x468>
 8009b14:	9b00      	ldr	r3, [sp, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	dd32      	ble.n	8009b80 <_dtoa_r+0x3a0>
 8009b1a:	4ab7      	ldr	r2, [pc, #732]	; (8009df8 <_dtoa_r+0x618>)
 8009b1c:	f003 030f 	and.w	r3, r3, #15
 8009b20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b28:	9b00      	ldr	r3, [sp, #0]
 8009b2a:	05d8      	lsls	r0, r3, #23
 8009b2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009b30:	d516      	bpl.n	8009b60 <_dtoa_r+0x380>
 8009b32:	4bb2      	ldr	r3, [pc, #712]	; (8009dfc <_dtoa_r+0x61c>)
 8009b34:	ec51 0b19 	vmov	r0, r1, d9
 8009b38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b3c:	f7f6 fe8e 	bl	800085c <__aeabi_ddiv>
 8009b40:	f007 070f 	and.w	r7, r7, #15
 8009b44:	4682      	mov	sl, r0
 8009b46:	468b      	mov	fp, r1
 8009b48:	2503      	movs	r5, #3
 8009b4a:	4eac      	ldr	r6, [pc, #688]	; (8009dfc <_dtoa_r+0x61c>)
 8009b4c:	b957      	cbnz	r7, 8009b64 <_dtoa_r+0x384>
 8009b4e:	4642      	mov	r2, r8
 8009b50:	464b      	mov	r3, r9
 8009b52:	4650      	mov	r0, sl
 8009b54:	4659      	mov	r1, fp
 8009b56:	f7f6 fe81 	bl	800085c <__aeabi_ddiv>
 8009b5a:	4682      	mov	sl, r0
 8009b5c:	468b      	mov	fp, r1
 8009b5e:	e028      	b.n	8009bb2 <_dtoa_r+0x3d2>
 8009b60:	2502      	movs	r5, #2
 8009b62:	e7f2      	b.n	8009b4a <_dtoa_r+0x36a>
 8009b64:	07f9      	lsls	r1, r7, #31
 8009b66:	d508      	bpl.n	8009b7a <_dtoa_r+0x39a>
 8009b68:	4640      	mov	r0, r8
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b70:	f7f6 fd4a 	bl	8000608 <__aeabi_dmul>
 8009b74:	3501      	adds	r5, #1
 8009b76:	4680      	mov	r8, r0
 8009b78:	4689      	mov	r9, r1
 8009b7a:	107f      	asrs	r7, r7, #1
 8009b7c:	3608      	adds	r6, #8
 8009b7e:	e7e5      	b.n	8009b4c <_dtoa_r+0x36c>
 8009b80:	f000 809b 	beq.w	8009cba <_dtoa_r+0x4da>
 8009b84:	9b00      	ldr	r3, [sp, #0]
 8009b86:	4f9d      	ldr	r7, [pc, #628]	; (8009dfc <_dtoa_r+0x61c>)
 8009b88:	425e      	negs	r6, r3
 8009b8a:	4b9b      	ldr	r3, [pc, #620]	; (8009df8 <_dtoa_r+0x618>)
 8009b8c:	f006 020f 	and.w	r2, r6, #15
 8009b90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	ec51 0b19 	vmov	r0, r1, d9
 8009b9c:	f7f6 fd34 	bl	8000608 <__aeabi_dmul>
 8009ba0:	1136      	asrs	r6, r6, #4
 8009ba2:	4682      	mov	sl, r0
 8009ba4:	468b      	mov	fp, r1
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	2502      	movs	r5, #2
 8009baa:	2e00      	cmp	r6, #0
 8009bac:	d17a      	bne.n	8009ca4 <_dtoa_r+0x4c4>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1d3      	bne.n	8009b5a <_dtoa_r+0x37a>
 8009bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 8082 	beq.w	8009cbe <_dtoa_r+0x4de>
 8009bba:	4b91      	ldr	r3, [pc, #580]	; (8009e00 <_dtoa_r+0x620>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	4650      	mov	r0, sl
 8009bc0:	4659      	mov	r1, fp
 8009bc2:	f7f6 ff93 	bl	8000aec <__aeabi_dcmplt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d079      	beq.n	8009cbe <_dtoa_r+0x4de>
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d076      	beq.n	8009cbe <_dtoa_r+0x4de>
 8009bd0:	9b02      	ldr	r3, [sp, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dd36      	ble.n	8009c44 <_dtoa_r+0x464>
 8009bd6:	9b00      	ldr	r3, [sp, #0]
 8009bd8:	4650      	mov	r0, sl
 8009bda:	4659      	mov	r1, fp
 8009bdc:	1e5f      	subs	r7, r3, #1
 8009bde:	2200      	movs	r2, #0
 8009be0:	4b88      	ldr	r3, [pc, #544]	; (8009e04 <_dtoa_r+0x624>)
 8009be2:	f7f6 fd11 	bl	8000608 <__aeabi_dmul>
 8009be6:	9e02      	ldr	r6, [sp, #8]
 8009be8:	4682      	mov	sl, r0
 8009bea:	468b      	mov	fp, r1
 8009bec:	3501      	adds	r5, #1
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7f6 fca0 	bl	8000534 <__aeabi_i2d>
 8009bf4:	4652      	mov	r2, sl
 8009bf6:	465b      	mov	r3, fp
 8009bf8:	f7f6 fd06 	bl	8000608 <__aeabi_dmul>
 8009bfc:	4b82      	ldr	r3, [pc, #520]	; (8009e08 <_dtoa_r+0x628>)
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f7f6 fb4c 	bl	800029c <__adddf3>
 8009c04:	46d0      	mov	r8, sl
 8009c06:	46d9      	mov	r9, fp
 8009c08:	4682      	mov	sl, r0
 8009c0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	d158      	bne.n	8009cc4 <_dtoa_r+0x4e4>
 8009c12:	4b7e      	ldr	r3, [pc, #504]	; (8009e0c <_dtoa_r+0x62c>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	4640      	mov	r0, r8
 8009c18:	4649      	mov	r1, r9
 8009c1a:	f7f6 fb3d 	bl	8000298 <__aeabi_dsub>
 8009c1e:	4652      	mov	r2, sl
 8009c20:	465b      	mov	r3, fp
 8009c22:	4680      	mov	r8, r0
 8009c24:	4689      	mov	r9, r1
 8009c26:	f7f6 ff7f 	bl	8000b28 <__aeabi_dcmpgt>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f040 8295 	bne.w	800a15a <_dtoa_r+0x97a>
 8009c30:	4652      	mov	r2, sl
 8009c32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009c36:	4640      	mov	r0, r8
 8009c38:	4649      	mov	r1, r9
 8009c3a:	f7f6 ff57 	bl	8000aec <__aeabi_dcmplt>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f040 8289 	bne.w	800a156 <_dtoa_r+0x976>
 8009c44:	ec5b ab19 	vmov	sl, fp, d9
 8009c48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f2c0 8148 	blt.w	8009ee0 <_dtoa_r+0x700>
 8009c50:	9a00      	ldr	r2, [sp, #0]
 8009c52:	2a0e      	cmp	r2, #14
 8009c54:	f300 8144 	bgt.w	8009ee0 <_dtoa_r+0x700>
 8009c58:	4b67      	ldr	r3, [pc, #412]	; (8009df8 <_dtoa_r+0x618>)
 8009c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f280 80d5 	bge.w	8009e14 <_dtoa_r+0x634>
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f300 80d1 	bgt.w	8009e14 <_dtoa_r+0x634>
 8009c72:	f040 826f 	bne.w	800a154 <_dtoa_r+0x974>
 8009c76:	4b65      	ldr	r3, [pc, #404]	; (8009e0c <_dtoa_r+0x62c>)
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	f7f6 fcc3 	bl	8000608 <__aeabi_dmul>
 8009c82:	4652      	mov	r2, sl
 8009c84:	465b      	mov	r3, fp
 8009c86:	f7f6 ff45 	bl	8000b14 <__aeabi_dcmpge>
 8009c8a:	9e03      	ldr	r6, [sp, #12]
 8009c8c:	4637      	mov	r7, r6
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f040 8245 	bne.w	800a11e <_dtoa_r+0x93e>
 8009c94:	9d01      	ldr	r5, [sp, #4]
 8009c96:	2331      	movs	r3, #49	; 0x31
 8009c98:	f805 3b01 	strb.w	r3, [r5], #1
 8009c9c:	9b00      	ldr	r3, [sp, #0]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	e240      	b.n	800a126 <_dtoa_r+0x946>
 8009ca4:	07f2      	lsls	r2, r6, #31
 8009ca6:	d505      	bpl.n	8009cb4 <_dtoa_r+0x4d4>
 8009ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cac:	f7f6 fcac 	bl	8000608 <__aeabi_dmul>
 8009cb0:	3501      	adds	r5, #1
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	1076      	asrs	r6, r6, #1
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	e777      	b.n	8009baa <_dtoa_r+0x3ca>
 8009cba:	2502      	movs	r5, #2
 8009cbc:	e779      	b.n	8009bb2 <_dtoa_r+0x3d2>
 8009cbe:	9f00      	ldr	r7, [sp, #0]
 8009cc0:	9e03      	ldr	r6, [sp, #12]
 8009cc2:	e794      	b.n	8009bee <_dtoa_r+0x40e>
 8009cc4:	9901      	ldr	r1, [sp, #4]
 8009cc6:	4b4c      	ldr	r3, [pc, #304]	; (8009df8 <_dtoa_r+0x618>)
 8009cc8:	4431      	add	r1, r6
 8009cca:	910d      	str	r1, [sp, #52]	; 0x34
 8009ccc:	9908      	ldr	r1, [sp, #32]
 8009cce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009cd2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cd6:	2900      	cmp	r1, #0
 8009cd8:	d043      	beq.n	8009d62 <_dtoa_r+0x582>
 8009cda:	494d      	ldr	r1, [pc, #308]	; (8009e10 <_dtoa_r+0x630>)
 8009cdc:	2000      	movs	r0, #0
 8009cde:	f7f6 fdbd 	bl	800085c <__aeabi_ddiv>
 8009ce2:	4652      	mov	r2, sl
 8009ce4:	465b      	mov	r3, fp
 8009ce6:	f7f6 fad7 	bl	8000298 <__aeabi_dsub>
 8009cea:	9d01      	ldr	r5, [sp, #4]
 8009cec:	4682      	mov	sl, r0
 8009cee:	468b      	mov	fp, r1
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	f7f6 ff38 	bl	8000b68 <__aeabi_d2iz>
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	f7f6 fc1b 	bl	8000534 <__aeabi_i2d>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4640      	mov	r0, r8
 8009d04:	4649      	mov	r1, r9
 8009d06:	f7f6 fac7 	bl	8000298 <__aeabi_dsub>
 8009d0a:	3630      	adds	r6, #48	; 0x30
 8009d0c:	f805 6b01 	strb.w	r6, [r5], #1
 8009d10:	4652      	mov	r2, sl
 8009d12:	465b      	mov	r3, fp
 8009d14:	4680      	mov	r8, r0
 8009d16:	4689      	mov	r9, r1
 8009d18:	f7f6 fee8 	bl	8000aec <__aeabi_dcmplt>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d163      	bne.n	8009de8 <_dtoa_r+0x608>
 8009d20:	4642      	mov	r2, r8
 8009d22:	464b      	mov	r3, r9
 8009d24:	4936      	ldr	r1, [pc, #216]	; (8009e00 <_dtoa_r+0x620>)
 8009d26:	2000      	movs	r0, #0
 8009d28:	f7f6 fab6 	bl	8000298 <__aeabi_dsub>
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	465b      	mov	r3, fp
 8009d30:	f7f6 fedc 	bl	8000aec <__aeabi_dcmplt>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f040 80b5 	bne.w	8009ea4 <_dtoa_r+0x6c4>
 8009d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d3c:	429d      	cmp	r5, r3
 8009d3e:	d081      	beq.n	8009c44 <_dtoa_r+0x464>
 8009d40:	4b30      	ldr	r3, [pc, #192]	; (8009e04 <_dtoa_r+0x624>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	4650      	mov	r0, sl
 8009d46:	4659      	mov	r1, fp
 8009d48:	f7f6 fc5e 	bl	8000608 <__aeabi_dmul>
 8009d4c:	4b2d      	ldr	r3, [pc, #180]	; (8009e04 <_dtoa_r+0x624>)
 8009d4e:	4682      	mov	sl, r0
 8009d50:	468b      	mov	fp, r1
 8009d52:	4640      	mov	r0, r8
 8009d54:	4649      	mov	r1, r9
 8009d56:	2200      	movs	r2, #0
 8009d58:	f7f6 fc56 	bl	8000608 <__aeabi_dmul>
 8009d5c:	4680      	mov	r8, r0
 8009d5e:	4689      	mov	r9, r1
 8009d60:	e7c6      	b.n	8009cf0 <_dtoa_r+0x510>
 8009d62:	4650      	mov	r0, sl
 8009d64:	4659      	mov	r1, fp
 8009d66:	f7f6 fc4f 	bl	8000608 <__aeabi_dmul>
 8009d6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d6c:	9d01      	ldr	r5, [sp, #4]
 8009d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d70:	4682      	mov	sl, r0
 8009d72:	468b      	mov	fp, r1
 8009d74:	4649      	mov	r1, r9
 8009d76:	4640      	mov	r0, r8
 8009d78:	f7f6 fef6 	bl	8000b68 <__aeabi_d2iz>
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	f7f6 fbd9 	bl	8000534 <__aeabi_i2d>
 8009d82:	3630      	adds	r6, #48	; 0x30
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4640      	mov	r0, r8
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	f7f6 fa84 	bl	8000298 <__aeabi_dsub>
 8009d90:	f805 6b01 	strb.w	r6, [r5], #1
 8009d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d96:	429d      	cmp	r5, r3
 8009d98:	4680      	mov	r8, r0
 8009d9a:	4689      	mov	r9, r1
 8009d9c:	f04f 0200 	mov.w	r2, #0
 8009da0:	d124      	bne.n	8009dec <_dtoa_r+0x60c>
 8009da2:	4b1b      	ldr	r3, [pc, #108]	; (8009e10 <_dtoa_r+0x630>)
 8009da4:	4650      	mov	r0, sl
 8009da6:	4659      	mov	r1, fp
 8009da8:	f7f6 fa78 	bl	800029c <__adddf3>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4640      	mov	r0, r8
 8009db2:	4649      	mov	r1, r9
 8009db4:	f7f6 feb8 	bl	8000b28 <__aeabi_dcmpgt>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d173      	bne.n	8009ea4 <_dtoa_r+0x6c4>
 8009dbc:	4652      	mov	r2, sl
 8009dbe:	465b      	mov	r3, fp
 8009dc0:	4913      	ldr	r1, [pc, #76]	; (8009e10 <_dtoa_r+0x630>)
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	f7f6 fa68 	bl	8000298 <__aeabi_dsub>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	460b      	mov	r3, r1
 8009dcc:	4640      	mov	r0, r8
 8009dce:	4649      	mov	r1, r9
 8009dd0:	f7f6 fe8c 	bl	8000aec <__aeabi_dcmplt>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f43f af35 	beq.w	8009c44 <_dtoa_r+0x464>
 8009dda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009ddc:	1e6b      	subs	r3, r5, #1
 8009dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8009de0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009de4:	2b30      	cmp	r3, #48	; 0x30
 8009de6:	d0f8      	beq.n	8009dda <_dtoa_r+0x5fa>
 8009de8:	9700      	str	r7, [sp, #0]
 8009dea:	e049      	b.n	8009e80 <_dtoa_r+0x6a0>
 8009dec:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <_dtoa_r+0x624>)
 8009dee:	f7f6 fc0b 	bl	8000608 <__aeabi_dmul>
 8009df2:	4680      	mov	r8, r0
 8009df4:	4689      	mov	r9, r1
 8009df6:	e7bd      	b.n	8009d74 <_dtoa_r+0x594>
 8009df8:	0800ce10 	.word	0x0800ce10
 8009dfc:	0800cde8 	.word	0x0800cde8
 8009e00:	3ff00000 	.word	0x3ff00000
 8009e04:	40240000 	.word	0x40240000
 8009e08:	401c0000 	.word	0x401c0000
 8009e0c:	40140000 	.word	0x40140000
 8009e10:	3fe00000 	.word	0x3fe00000
 8009e14:	9d01      	ldr	r5, [sp, #4]
 8009e16:	4656      	mov	r6, sl
 8009e18:	465f      	mov	r7, fp
 8009e1a:	4642      	mov	r2, r8
 8009e1c:	464b      	mov	r3, r9
 8009e1e:	4630      	mov	r0, r6
 8009e20:	4639      	mov	r1, r7
 8009e22:	f7f6 fd1b 	bl	800085c <__aeabi_ddiv>
 8009e26:	f7f6 fe9f 	bl	8000b68 <__aeabi_d2iz>
 8009e2a:	4682      	mov	sl, r0
 8009e2c:	f7f6 fb82 	bl	8000534 <__aeabi_i2d>
 8009e30:	4642      	mov	r2, r8
 8009e32:	464b      	mov	r3, r9
 8009e34:	f7f6 fbe8 	bl	8000608 <__aeabi_dmul>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	4639      	mov	r1, r7
 8009e40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e44:	f7f6 fa28 	bl	8000298 <__aeabi_dsub>
 8009e48:	f805 6b01 	strb.w	r6, [r5], #1
 8009e4c:	9e01      	ldr	r6, [sp, #4]
 8009e4e:	9f03      	ldr	r7, [sp, #12]
 8009e50:	1bae      	subs	r6, r5, r6
 8009e52:	42b7      	cmp	r7, r6
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	d135      	bne.n	8009ec6 <_dtoa_r+0x6e6>
 8009e5a:	f7f6 fa1f 	bl	800029c <__adddf3>
 8009e5e:	4642      	mov	r2, r8
 8009e60:	464b      	mov	r3, r9
 8009e62:	4606      	mov	r6, r0
 8009e64:	460f      	mov	r7, r1
 8009e66:	f7f6 fe5f 	bl	8000b28 <__aeabi_dcmpgt>
 8009e6a:	b9d0      	cbnz	r0, 8009ea2 <_dtoa_r+0x6c2>
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	464b      	mov	r3, r9
 8009e70:	4630      	mov	r0, r6
 8009e72:	4639      	mov	r1, r7
 8009e74:	f7f6 fe30 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e78:	b110      	cbz	r0, 8009e80 <_dtoa_r+0x6a0>
 8009e7a:	f01a 0f01 	tst.w	sl, #1
 8009e7e:	d110      	bne.n	8009ea2 <_dtoa_r+0x6c2>
 8009e80:	4620      	mov	r0, r4
 8009e82:	ee18 1a10 	vmov	r1, s16
 8009e86:	f000 fae5 	bl	800a454 <_Bfree>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	9800      	ldr	r0, [sp, #0]
 8009e8e:	702b      	strb	r3, [r5, #0]
 8009e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e92:	3001      	adds	r0, #1
 8009e94:	6018      	str	r0, [r3, #0]
 8009e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f43f acf1 	beq.w	8009880 <_dtoa_r+0xa0>
 8009e9e:	601d      	str	r5, [r3, #0]
 8009ea0:	e4ee      	b.n	8009880 <_dtoa_r+0xa0>
 8009ea2:	9f00      	ldr	r7, [sp, #0]
 8009ea4:	462b      	mov	r3, r5
 8009ea6:	461d      	mov	r5, r3
 8009ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009eac:	2a39      	cmp	r2, #57	; 0x39
 8009eae:	d106      	bne.n	8009ebe <_dtoa_r+0x6de>
 8009eb0:	9a01      	ldr	r2, [sp, #4]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d1f7      	bne.n	8009ea6 <_dtoa_r+0x6c6>
 8009eb6:	9901      	ldr	r1, [sp, #4]
 8009eb8:	2230      	movs	r2, #48	; 0x30
 8009eba:	3701      	adds	r7, #1
 8009ebc:	700a      	strb	r2, [r1, #0]
 8009ebe:	781a      	ldrb	r2, [r3, #0]
 8009ec0:	3201      	adds	r2, #1
 8009ec2:	701a      	strb	r2, [r3, #0]
 8009ec4:	e790      	b.n	8009de8 <_dtoa_r+0x608>
 8009ec6:	4ba6      	ldr	r3, [pc, #664]	; (800a160 <_dtoa_r+0x980>)
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f7f6 fb9d 	bl	8000608 <__aeabi_dmul>
 8009ece:	2200      	movs	r2, #0
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	460f      	mov	r7, r1
 8009ed6:	f7f6 fdff 	bl	8000ad8 <__aeabi_dcmpeq>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d09d      	beq.n	8009e1a <_dtoa_r+0x63a>
 8009ede:	e7cf      	b.n	8009e80 <_dtoa_r+0x6a0>
 8009ee0:	9a08      	ldr	r2, [sp, #32]
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	f000 80d7 	beq.w	800a096 <_dtoa_r+0x8b6>
 8009ee8:	9a06      	ldr	r2, [sp, #24]
 8009eea:	2a01      	cmp	r2, #1
 8009eec:	f300 80ba 	bgt.w	800a064 <_dtoa_r+0x884>
 8009ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ef2:	2a00      	cmp	r2, #0
 8009ef4:	f000 80b2 	beq.w	800a05c <_dtoa_r+0x87c>
 8009ef8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009efc:	9e07      	ldr	r6, [sp, #28]
 8009efe:	9d04      	ldr	r5, [sp, #16]
 8009f00:	9a04      	ldr	r2, [sp, #16]
 8009f02:	441a      	add	r2, r3
 8009f04:	9204      	str	r2, [sp, #16]
 8009f06:	9a05      	ldr	r2, [sp, #20]
 8009f08:	2101      	movs	r1, #1
 8009f0a:	441a      	add	r2, r3
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	9205      	str	r2, [sp, #20]
 8009f10:	f000 fb58 	bl	800a5c4 <__i2b>
 8009f14:	4607      	mov	r7, r0
 8009f16:	2d00      	cmp	r5, #0
 8009f18:	dd0c      	ble.n	8009f34 <_dtoa_r+0x754>
 8009f1a:	9b05      	ldr	r3, [sp, #20]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	dd09      	ble.n	8009f34 <_dtoa_r+0x754>
 8009f20:	42ab      	cmp	r3, r5
 8009f22:	9a04      	ldr	r2, [sp, #16]
 8009f24:	bfa8      	it	ge
 8009f26:	462b      	movge	r3, r5
 8009f28:	1ad2      	subs	r2, r2, r3
 8009f2a:	9204      	str	r2, [sp, #16]
 8009f2c:	9a05      	ldr	r2, [sp, #20]
 8009f2e:	1aed      	subs	r5, r5, r3
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	9305      	str	r3, [sp, #20]
 8009f34:	9b07      	ldr	r3, [sp, #28]
 8009f36:	b31b      	cbz	r3, 8009f80 <_dtoa_r+0x7a0>
 8009f38:	9b08      	ldr	r3, [sp, #32]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 80af 	beq.w	800a09e <_dtoa_r+0x8be>
 8009f40:	2e00      	cmp	r6, #0
 8009f42:	dd13      	ble.n	8009f6c <_dtoa_r+0x78c>
 8009f44:	4639      	mov	r1, r7
 8009f46:	4632      	mov	r2, r6
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 fbfb 	bl	800a744 <__pow5mult>
 8009f4e:	ee18 2a10 	vmov	r2, s16
 8009f52:	4601      	mov	r1, r0
 8009f54:	4607      	mov	r7, r0
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 fb4a 	bl	800a5f0 <__multiply>
 8009f5c:	ee18 1a10 	vmov	r1, s16
 8009f60:	4680      	mov	r8, r0
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 fa76 	bl	800a454 <_Bfree>
 8009f68:	ee08 8a10 	vmov	s16, r8
 8009f6c:	9b07      	ldr	r3, [sp, #28]
 8009f6e:	1b9a      	subs	r2, r3, r6
 8009f70:	d006      	beq.n	8009f80 <_dtoa_r+0x7a0>
 8009f72:	ee18 1a10 	vmov	r1, s16
 8009f76:	4620      	mov	r0, r4
 8009f78:	f000 fbe4 	bl	800a744 <__pow5mult>
 8009f7c:	ee08 0a10 	vmov	s16, r0
 8009f80:	2101      	movs	r1, #1
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 fb1e 	bl	800a5c4 <__i2b>
 8009f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	f340 8088 	ble.w	800a0a2 <_dtoa_r+0x8c2>
 8009f92:	461a      	mov	r2, r3
 8009f94:	4601      	mov	r1, r0
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 fbd4 	bl	800a744 <__pow5mult>
 8009f9c:	9b06      	ldr	r3, [sp, #24]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	4606      	mov	r6, r0
 8009fa2:	f340 8081 	ble.w	800a0a8 <_dtoa_r+0x8c8>
 8009fa6:	f04f 0800 	mov.w	r8, #0
 8009faa:	6933      	ldr	r3, [r6, #16]
 8009fac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fb0:	6918      	ldr	r0, [r3, #16]
 8009fb2:	f000 fab7 	bl	800a524 <__hi0bits>
 8009fb6:	f1c0 0020 	rsb	r0, r0, #32
 8009fba:	9b05      	ldr	r3, [sp, #20]
 8009fbc:	4418      	add	r0, r3
 8009fbe:	f010 001f 	ands.w	r0, r0, #31
 8009fc2:	f000 8092 	beq.w	800a0ea <_dtoa_r+0x90a>
 8009fc6:	f1c0 0320 	rsb	r3, r0, #32
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	f340 808a 	ble.w	800a0e4 <_dtoa_r+0x904>
 8009fd0:	f1c0 001c 	rsb	r0, r0, #28
 8009fd4:	9b04      	ldr	r3, [sp, #16]
 8009fd6:	4403      	add	r3, r0
 8009fd8:	9304      	str	r3, [sp, #16]
 8009fda:	9b05      	ldr	r3, [sp, #20]
 8009fdc:	4403      	add	r3, r0
 8009fde:	4405      	add	r5, r0
 8009fe0:	9305      	str	r3, [sp, #20]
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	dd07      	ble.n	8009ff8 <_dtoa_r+0x818>
 8009fe8:	ee18 1a10 	vmov	r1, s16
 8009fec:	461a      	mov	r2, r3
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f000 fc02 	bl	800a7f8 <__lshift>
 8009ff4:	ee08 0a10 	vmov	s16, r0
 8009ff8:	9b05      	ldr	r3, [sp, #20]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dd05      	ble.n	800a00a <_dtoa_r+0x82a>
 8009ffe:	4631      	mov	r1, r6
 800a000:	461a      	mov	r2, r3
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fbf8 	bl	800a7f8 <__lshift>
 800a008:	4606      	mov	r6, r0
 800a00a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d06e      	beq.n	800a0ee <_dtoa_r+0x90e>
 800a010:	ee18 0a10 	vmov	r0, s16
 800a014:	4631      	mov	r1, r6
 800a016:	f000 fc5f 	bl	800a8d8 <__mcmp>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	da67      	bge.n	800a0ee <_dtoa_r+0x90e>
 800a01e:	9b00      	ldr	r3, [sp, #0]
 800a020:	3b01      	subs	r3, #1
 800a022:	ee18 1a10 	vmov	r1, s16
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	220a      	movs	r2, #10
 800a02a:	2300      	movs	r3, #0
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 fa33 	bl	800a498 <__multadd>
 800a032:	9b08      	ldr	r3, [sp, #32]
 800a034:	ee08 0a10 	vmov	s16, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 81b1 	beq.w	800a3a0 <_dtoa_r+0xbc0>
 800a03e:	2300      	movs	r3, #0
 800a040:	4639      	mov	r1, r7
 800a042:	220a      	movs	r2, #10
 800a044:	4620      	mov	r0, r4
 800a046:	f000 fa27 	bl	800a498 <__multadd>
 800a04a:	9b02      	ldr	r3, [sp, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	4607      	mov	r7, r0
 800a050:	f300 808e 	bgt.w	800a170 <_dtoa_r+0x990>
 800a054:	9b06      	ldr	r3, [sp, #24]
 800a056:	2b02      	cmp	r3, #2
 800a058:	dc51      	bgt.n	800a0fe <_dtoa_r+0x91e>
 800a05a:	e089      	b.n	800a170 <_dtoa_r+0x990>
 800a05c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a05e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a062:	e74b      	b.n	8009efc <_dtoa_r+0x71c>
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	1e5e      	subs	r6, r3, #1
 800a068:	9b07      	ldr	r3, [sp, #28]
 800a06a:	42b3      	cmp	r3, r6
 800a06c:	bfbf      	itttt	lt
 800a06e:	9b07      	ldrlt	r3, [sp, #28]
 800a070:	9607      	strlt	r6, [sp, #28]
 800a072:	1af2      	sublt	r2, r6, r3
 800a074:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a076:	bfb6      	itet	lt
 800a078:	189b      	addlt	r3, r3, r2
 800a07a:	1b9e      	subge	r6, r3, r6
 800a07c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	bfb8      	it	lt
 800a082:	2600      	movlt	r6, #0
 800a084:	2b00      	cmp	r3, #0
 800a086:	bfb7      	itett	lt
 800a088:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a08c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a090:	1a9d      	sublt	r5, r3, r2
 800a092:	2300      	movlt	r3, #0
 800a094:	e734      	b.n	8009f00 <_dtoa_r+0x720>
 800a096:	9e07      	ldr	r6, [sp, #28]
 800a098:	9d04      	ldr	r5, [sp, #16]
 800a09a:	9f08      	ldr	r7, [sp, #32]
 800a09c:	e73b      	b.n	8009f16 <_dtoa_r+0x736>
 800a09e:	9a07      	ldr	r2, [sp, #28]
 800a0a0:	e767      	b.n	8009f72 <_dtoa_r+0x792>
 800a0a2:	9b06      	ldr	r3, [sp, #24]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	dc18      	bgt.n	800a0da <_dtoa_r+0x8fa>
 800a0a8:	f1ba 0f00 	cmp.w	sl, #0
 800a0ac:	d115      	bne.n	800a0da <_dtoa_r+0x8fa>
 800a0ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0b2:	b993      	cbnz	r3, 800a0da <_dtoa_r+0x8fa>
 800a0b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0b8:	0d1b      	lsrs	r3, r3, #20
 800a0ba:	051b      	lsls	r3, r3, #20
 800a0bc:	b183      	cbz	r3, 800a0e0 <_dtoa_r+0x900>
 800a0be:	9b04      	ldr	r3, [sp, #16]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	9b05      	ldr	r3, [sp, #20]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	9305      	str	r3, [sp, #20]
 800a0ca:	f04f 0801 	mov.w	r8, #1
 800a0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f47f af6a 	bne.w	8009faa <_dtoa_r+0x7ca>
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	e76f      	b.n	8009fba <_dtoa_r+0x7da>
 800a0da:	f04f 0800 	mov.w	r8, #0
 800a0de:	e7f6      	b.n	800a0ce <_dtoa_r+0x8ee>
 800a0e0:	4698      	mov	r8, r3
 800a0e2:	e7f4      	b.n	800a0ce <_dtoa_r+0x8ee>
 800a0e4:	f43f af7d 	beq.w	8009fe2 <_dtoa_r+0x802>
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	301c      	adds	r0, #28
 800a0ec:	e772      	b.n	8009fd4 <_dtoa_r+0x7f4>
 800a0ee:	9b03      	ldr	r3, [sp, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	dc37      	bgt.n	800a164 <_dtoa_r+0x984>
 800a0f4:	9b06      	ldr	r3, [sp, #24]
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	dd34      	ble.n	800a164 <_dtoa_r+0x984>
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	9302      	str	r3, [sp, #8]
 800a0fe:	9b02      	ldr	r3, [sp, #8]
 800a100:	b96b      	cbnz	r3, 800a11e <_dtoa_r+0x93e>
 800a102:	4631      	mov	r1, r6
 800a104:	2205      	movs	r2, #5
 800a106:	4620      	mov	r0, r4
 800a108:	f000 f9c6 	bl	800a498 <__multadd>
 800a10c:	4601      	mov	r1, r0
 800a10e:	4606      	mov	r6, r0
 800a110:	ee18 0a10 	vmov	r0, s16
 800a114:	f000 fbe0 	bl	800a8d8 <__mcmp>
 800a118:	2800      	cmp	r0, #0
 800a11a:	f73f adbb 	bgt.w	8009c94 <_dtoa_r+0x4b4>
 800a11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a120:	9d01      	ldr	r5, [sp, #4]
 800a122:	43db      	mvns	r3, r3
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	f04f 0800 	mov.w	r8, #0
 800a12a:	4631      	mov	r1, r6
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 f991 	bl	800a454 <_Bfree>
 800a132:	2f00      	cmp	r7, #0
 800a134:	f43f aea4 	beq.w	8009e80 <_dtoa_r+0x6a0>
 800a138:	f1b8 0f00 	cmp.w	r8, #0
 800a13c:	d005      	beq.n	800a14a <_dtoa_r+0x96a>
 800a13e:	45b8      	cmp	r8, r7
 800a140:	d003      	beq.n	800a14a <_dtoa_r+0x96a>
 800a142:	4641      	mov	r1, r8
 800a144:	4620      	mov	r0, r4
 800a146:	f000 f985 	bl	800a454 <_Bfree>
 800a14a:	4639      	mov	r1, r7
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 f981 	bl	800a454 <_Bfree>
 800a152:	e695      	b.n	8009e80 <_dtoa_r+0x6a0>
 800a154:	2600      	movs	r6, #0
 800a156:	4637      	mov	r7, r6
 800a158:	e7e1      	b.n	800a11e <_dtoa_r+0x93e>
 800a15a:	9700      	str	r7, [sp, #0]
 800a15c:	4637      	mov	r7, r6
 800a15e:	e599      	b.n	8009c94 <_dtoa_r+0x4b4>
 800a160:	40240000 	.word	0x40240000
 800a164:	9b08      	ldr	r3, [sp, #32]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f000 80ca 	beq.w	800a300 <_dtoa_r+0xb20>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	9302      	str	r3, [sp, #8]
 800a170:	2d00      	cmp	r5, #0
 800a172:	dd05      	ble.n	800a180 <_dtoa_r+0x9a0>
 800a174:	4639      	mov	r1, r7
 800a176:	462a      	mov	r2, r5
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 fb3d 	bl	800a7f8 <__lshift>
 800a17e:	4607      	mov	r7, r0
 800a180:	f1b8 0f00 	cmp.w	r8, #0
 800a184:	d05b      	beq.n	800a23e <_dtoa_r+0xa5e>
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 f923 	bl	800a3d4 <_Balloc>
 800a18e:	4605      	mov	r5, r0
 800a190:	b928      	cbnz	r0, 800a19e <_dtoa_r+0x9be>
 800a192:	4b87      	ldr	r3, [pc, #540]	; (800a3b0 <_dtoa_r+0xbd0>)
 800a194:	4602      	mov	r2, r0
 800a196:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a19a:	f7ff bb3b 	b.w	8009814 <_dtoa_r+0x34>
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	3202      	adds	r2, #2
 800a1a2:	0092      	lsls	r2, r2, #2
 800a1a4:	f107 010c 	add.w	r1, r7, #12
 800a1a8:	300c      	adds	r0, #12
 800a1aa:	f7fe fddf 	bl	8008d6c <memcpy>
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	4629      	mov	r1, r5
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f000 fb20 	bl	800a7f8 <__lshift>
 800a1b8:	9b01      	ldr	r3, [sp, #4]
 800a1ba:	f103 0901 	add.w	r9, r3, #1
 800a1be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	9305      	str	r3, [sp, #20]
 800a1c6:	f00a 0301 	and.w	r3, sl, #1
 800a1ca:	46b8      	mov	r8, r7
 800a1cc:	9304      	str	r3, [sp, #16]
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	ee18 0a10 	vmov	r0, s16
 800a1d6:	f7ff fa78 	bl	80096ca <quorem>
 800a1da:	4641      	mov	r1, r8
 800a1dc:	9002      	str	r0, [sp, #8]
 800a1de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1e2:	ee18 0a10 	vmov	r0, s16
 800a1e6:	f000 fb77 	bl	800a8d8 <__mcmp>
 800a1ea:	463a      	mov	r2, r7
 800a1ec:	9003      	str	r0, [sp, #12]
 800a1ee:	4631      	mov	r1, r6
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f000 fb8d 	bl	800a910 <__mdiff>
 800a1f6:	68c2      	ldr	r2, [r0, #12]
 800a1f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	bb02      	cbnz	r2, 800a242 <_dtoa_r+0xa62>
 800a200:	4601      	mov	r1, r0
 800a202:	ee18 0a10 	vmov	r0, s16
 800a206:	f000 fb67 	bl	800a8d8 <__mcmp>
 800a20a:	4602      	mov	r2, r0
 800a20c:	4629      	mov	r1, r5
 800a20e:	4620      	mov	r0, r4
 800a210:	9207      	str	r2, [sp, #28]
 800a212:	f000 f91f 	bl	800a454 <_Bfree>
 800a216:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a21a:	ea43 0102 	orr.w	r1, r3, r2
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	430b      	orrs	r3, r1
 800a222:	464d      	mov	r5, r9
 800a224:	d10f      	bne.n	800a246 <_dtoa_r+0xa66>
 800a226:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a22a:	d02a      	beq.n	800a282 <_dtoa_r+0xaa2>
 800a22c:	9b03      	ldr	r3, [sp, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	dd02      	ble.n	800a238 <_dtoa_r+0xa58>
 800a232:	9b02      	ldr	r3, [sp, #8]
 800a234:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a238:	f88b a000 	strb.w	sl, [fp]
 800a23c:	e775      	b.n	800a12a <_dtoa_r+0x94a>
 800a23e:	4638      	mov	r0, r7
 800a240:	e7ba      	b.n	800a1b8 <_dtoa_r+0x9d8>
 800a242:	2201      	movs	r2, #1
 800a244:	e7e2      	b.n	800a20c <_dtoa_r+0xa2c>
 800a246:	9b03      	ldr	r3, [sp, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	db04      	blt.n	800a256 <_dtoa_r+0xa76>
 800a24c:	9906      	ldr	r1, [sp, #24]
 800a24e:	430b      	orrs	r3, r1
 800a250:	9904      	ldr	r1, [sp, #16]
 800a252:	430b      	orrs	r3, r1
 800a254:	d122      	bne.n	800a29c <_dtoa_r+0xabc>
 800a256:	2a00      	cmp	r2, #0
 800a258:	ddee      	ble.n	800a238 <_dtoa_r+0xa58>
 800a25a:	ee18 1a10 	vmov	r1, s16
 800a25e:	2201      	movs	r2, #1
 800a260:	4620      	mov	r0, r4
 800a262:	f000 fac9 	bl	800a7f8 <__lshift>
 800a266:	4631      	mov	r1, r6
 800a268:	ee08 0a10 	vmov	s16, r0
 800a26c:	f000 fb34 	bl	800a8d8 <__mcmp>
 800a270:	2800      	cmp	r0, #0
 800a272:	dc03      	bgt.n	800a27c <_dtoa_r+0xa9c>
 800a274:	d1e0      	bne.n	800a238 <_dtoa_r+0xa58>
 800a276:	f01a 0f01 	tst.w	sl, #1
 800a27a:	d0dd      	beq.n	800a238 <_dtoa_r+0xa58>
 800a27c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a280:	d1d7      	bne.n	800a232 <_dtoa_r+0xa52>
 800a282:	2339      	movs	r3, #57	; 0x39
 800a284:	f88b 3000 	strb.w	r3, [fp]
 800a288:	462b      	mov	r3, r5
 800a28a:	461d      	mov	r5, r3
 800a28c:	3b01      	subs	r3, #1
 800a28e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a292:	2a39      	cmp	r2, #57	; 0x39
 800a294:	d071      	beq.n	800a37a <_dtoa_r+0xb9a>
 800a296:	3201      	adds	r2, #1
 800a298:	701a      	strb	r2, [r3, #0]
 800a29a:	e746      	b.n	800a12a <_dtoa_r+0x94a>
 800a29c:	2a00      	cmp	r2, #0
 800a29e:	dd07      	ble.n	800a2b0 <_dtoa_r+0xad0>
 800a2a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a2a4:	d0ed      	beq.n	800a282 <_dtoa_r+0xaa2>
 800a2a6:	f10a 0301 	add.w	r3, sl, #1
 800a2aa:	f88b 3000 	strb.w	r3, [fp]
 800a2ae:	e73c      	b.n	800a12a <_dtoa_r+0x94a>
 800a2b0:	9b05      	ldr	r3, [sp, #20]
 800a2b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a2b6:	4599      	cmp	r9, r3
 800a2b8:	d047      	beq.n	800a34a <_dtoa_r+0xb6a>
 800a2ba:	ee18 1a10 	vmov	r1, s16
 800a2be:	2300      	movs	r3, #0
 800a2c0:	220a      	movs	r2, #10
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f000 f8e8 	bl	800a498 <__multadd>
 800a2c8:	45b8      	cmp	r8, r7
 800a2ca:	ee08 0a10 	vmov	s16, r0
 800a2ce:	f04f 0300 	mov.w	r3, #0
 800a2d2:	f04f 020a 	mov.w	r2, #10
 800a2d6:	4641      	mov	r1, r8
 800a2d8:	4620      	mov	r0, r4
 800a2da:	d106      	bne.n	800a2ea <_dtoa_r+0xb0a>
 800a2dc:	f000 f8dc 	bl	800a498 <__multadd>
 800a2e0:	4680      	mov	r8, r0
 800a2e2:	4607      	mov	r7, r0
 800a2e4:	f109 0901 	add.w	r9, r9, #1
 800a2e8:	e772      	b.n	800a1d0 <_dtoa_r+0x9f0>
 800a2ea:	f000 f8d5 	bl	800a498 <__multadd>
 800a2ee:	4639      	mov	r1, r7
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	220a      	movs	r2, #10
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	f000 f8ce 	bl	800a498 <__multadd>
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	e7f1      	b.n	800a2e4 <_dtoa_r+0xb04>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	9302      	str	r3, [sp, #8]
 800a304:	9d01      	ldr	r5, [sp, #4]
 800a306:	ee18 0a10 	vmov	r0, s16
 800a30a:	4631      	mov	r1, r6
 800a30c:	f7ff f9dd 	bl	80096ca <quorem>
 800a310:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a314:	9b01      	ldr	r3, [sp, #4]
 800a316:	f805 ab01 	strb.w	sl, [r5], #1
 800a31a:	1aea      	subs	r2, r5, r3
 800a31c:	9b02      	ldr	r3, [sp, #8]
 800a31e:	4293      	cmp	r3, r2
 800a320:	dd09      	ble.n	800a336 <_dtoa_r+0xb56>
 800a322:	ee18 1a10 	vmov	r1, s16
 800a326:	2300      	movs	r3, #0
 800a328:	220a      	movs	r2, #10
 800a32a:	4620      	mov	r0, r4
 800a32c:	f000 f8b4 	bl	800a498 <__multadd>
 800a330:	ee08 0a10 	vmov	s16, r0
 800a334:	e7e7      	b.n	800a306 <_dtoa_r+0xb26>
 800a336:	9b02      	ldr	r3, [sp, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bfc8      	it	gt
 800a33c:	461d      	movgt	r5, r3
 800a33e:	9b01      	ldr	r3, [sp, #4]
 800a340:	bfd8      	it	le
 800a342:	2501      	movle	r5, #1
 800a344:	441d      	add	r5, r3
 800a346:	f04f 0800 	mov.w	r8, #0
 800a34a:	ee18 1a10 	vmov	r1, s16
 800a34e:	2201      	movs	r2, #1
 800a350:	4620      	mov	r0, r4
 800a352:	f000 fa51 	bl	800a7f8 <__lshift>
 800a356:	4631      	mov	r1, r6
 800a358:	ee08 0a10 	vmov	s16, r0
 800a35c:	f000 fabc 	bl	800a8d8 <__mcmp>
 800a360:	2800      	cmp	r0, #0
 800a362:	dc91      	bgt.n	800a288 <_dtoa_r+0xaa8>
 800a364:	d102      	bne.n	800a36c <_dtoa_r+0xb8c>
 800a366:	f01a 0f01 	tst.w	sl, #1
 800a36a:	d18d      	bne.n	800a288 <_dtoa_r+0xaa8>
 800a36c:	462b      	mov	r3, r5
 800a36e:	461d      	mov	r5, r3
 800a370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a374:	2a30      	cmp	r2, #48	; 0x30
 800a376:	d0fa      	beq.n	800a36e <_dtoa_r+0xb8e>
 800a378:	e6d7      	b.n	800a12a <_dtoa_r+0x94a>
 800a37a:	9a01      	ldr	r2, [sp, #4]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d184      	bne.n	800a28a <_dtoa_r+0xaaa>
 800a380:	9b00      	ldr	r3, [sp, #0]
 800a382:	3301      	adds	r3, #1
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	2331      	movs	r3, #49	; 0x31
 800a388:	7013      	strb	r3, [r2, #0]
 800a38a:	e6ce      	b.n	800a12a <_dtoa_r+0x94a>
 800a38c:	4b09      	ldr	r3, [pc, #36]	; (800a3b4 <_dtoa_r+0xbd4>)
 800a38e:	f7ff ba95 	b.w	80098bc <_dtoa_r+0xdc>
 800a392:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a394:	2b00      	cmp	r3, #0
 800a396:	f47f aa6e 	bne.w	8009876 <_dtoa_r+0x96>
 800a39a:	4b07      	ldr	r3, [pc, #28]	; (800a3b8 <_dtoa_r+0xbd8>)
 800a39c:	f7ff ba8e 	b.w	80098bc <_dtoa_r+0xdc>
 800a3a0:	9b02      	ldr	r3, [sp, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	dcae      	bgt.n	800a304 <_dtoa_r+0xb24>
 800a3a6:	9b06      	ldr	r3, [sp, #24]
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	f73f aea8 	bgt.w	800a0fe <_dtoa_r+0x91e>
 800a3ae:	e7a9      	b.n	800a304 <_dtoa_r+0xb24>
 800a3b0:	0800cd77 	.word	0x0800cd77
 800a3b4:	0800ccd4 	.word	0x0800ccd4
 800a3b8:	0800ccf8 	.word	0x0800ccf8

0800a3bc <_localeconv_r>:
 800a3bc:	4800      	ldr	r0, [pc, #0]	; (800a3c0 <_localeconv_r+0x4>)
 800a3be:	4770      	bx	lr
 800a3c0:	20000194 	.word	0x20000194

0800a3c4 <malloc>:
 800a3c4:	4b02      	ldr	r3, [pc, #8]	; (800a3d0 <malloc+0xc>)
 800a3c6:	4601      	mov	r1, r0
 800a3c8:	6818      	ldr	r0, [r3, #0]
 800a3ca:	f000 bc09 	b.w	800abe0 <_malloc_r>
 800a3ce:	bf00      	nop
 800a3d0:	20000040 	.word	0x20000040

0800a3d4 <_Balloc>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3d8:	4604      	mov	r4, r0
 800a3da:	460d      	mov	r5, r1
 800a3dc:	b976      	cbnz	r6, 800a3fc <_Balloc+0x28>
 800a3de:	2010      	movs	r0, #16
 800a3e0:	f7ff fff0 	bl	800a3c4 <malloc>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	6260      	str	r0, [r4, #36]	; 0x24
 800a3e8:	b920      	cbnz	r0, 800a3f4 <_Balloc+0x20>
 800a3ea:	4b18      	ldr	r3, [pc, #96]	; (800a44c <_Balloc+0x78>)
 800a3ec:	4818      	ldr	r0, [pc, #96]	; (800a450 <_Balloc+0x7c>)
 800a3ee:	2166      	movs	r1, #102	; 0x66
 800a3f0:	f000 fdd6 	bl	800afa0 <__assert_func>
 800a3f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3f8:	6006      	str	r6, [r0, #0]
 800a3fa:	60c6      	str	r6, [r0, #12]
 800a3fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3fe:	68f3      	ldr	r3, [r6, #12]
 800a400:	b183      	cbz	r3, 800a424 <_Balloc+0x50>
 800a402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a40a:	b9b8      	cbnz	r0, 800a43c <_Balloc+0x68>
 800a40c:	2101      	movs	r1, #1
 800a40e:	fa01 f605 	lsl.w	r6, r1, r5
 800a412:	1d72      	adds	r2, r6, #5
 800a414:	0092      	lsls	r2, r2, #2
 800a416:	4620      	mov	r0, r4
 800a418:	f000 fb60 	bl	800aadc <_calloc_r>
 800a41c:	b160      	cbz	r0, 800a438 <_Balloc+0x64>
 800a41e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a422:	e00e      	b.n	800a442 <_Balloc+0x6e>
 800a424:	2221      	movs	r2, #33	; 0x21
 800a426:	2104      	movs	r1, #4
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 fb57 	bl	800aadc <_calloc_r>
 800a42e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a430:	60f0      	str	r0, [r6, #12]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e4      	bne.n	800a402 <_Balloc+0x2e>
 800a438:	2000      	movs	r0, #0
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
 800a43c:	6802      	ldr	r2, [r0, #0]
 800a43e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a442:	2300      	movs	r3, #0
 800a444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a448:	e7f7      	b.n	800a43a <_Balloc+0x66>
 800a44a:	bf00      	nop
 800a44c:	0800cd05 	.word	0x0800cd05
 800a450:	0800cd88 	.word	0x0800cd88

0800a454 <_Bfree>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a458:	4605      	mov	r5, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	b976      	cbnz	r6, 800a47c <_Bfree+0x28>
 800a45e:	2010      	movs	r0, #16
 800a460:	f7ff ffb0 	bl	800a3c4 <malloc>
 800a464:	4602      	mov	r2, r0
 800a466:	6268      	str	r0, [r5, #36]	; 0x24
 800a468:	b920      	cbnz	r0, 800a474 <_Bfree+0x20>
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <_Bfree+0x3c>)
 800a46c:	4809      	ldr	r0, [pc, #36]	; (800a494 <_Bfree+0x40>)
 800a46e:	218a      	movs	r1, #138	; 0x8a
 800a470:	f000 fd96 	bl	800afa0 <__assert_func>
 800a474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a478:	6006      	str	r6, [r0, #0]
 800a47a:	60c6      	str	r6, [r0, #12]
 800a47c:	b13c      	cbz	r4, 800a48e <_Bfree+0x3a>
 800a47e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a480:	6862      	ldr	r2, [r4, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a488:	6021      	str	r1, [r4, #0]
 800a48a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
 800a490:	0800cd05 	.word	0x0800cd05
 800a494:	0800cd88 	.word	0x0800cd88

0800a498 <__multadd>:
 800a498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a49c:	690d      	ldr	r5, [r1, #16]
 800a49e:	4607      	mov	r7, r0
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	461e      	mov	r6, r3
 800a4a4:	f101 0c14 	add.w	ip, r1, #20
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	f8dc 3000 	ldr.w	r3, [ip]
 800a4ae:	b299      	uxth	r1, r3
 800a4b0:	fb02 6101 	mla	r1, r2, r1, r6
 800a4b4:	0c1e      	lsrs	r6, r3, #16
 800a4b6:	0c0b      	lsrs	r3, r1, #16
 800a4b8:	fb02 3306 	mla	r3, r2, r6, r3
 800a4bc:	b289      	uxth	r1, r1
 800a4be:	3001      	adds	r0, #1
 800a4c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4c4:	4285      	cmp	r5, r0
 800a4c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a4ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4ce:	dcec      	bgt.n	800a4aa <__multadd+0x12>
 800a4d0:	b30e      	cbz	r6, 800a516 <__multadd+0x7e>
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	42ab      	cmp	r3, r5
 800a4d6:	dc19      	bgt.n	800a50c <__multadd+0x74>
 800a4d8:	6861      	ldr	r1, [r4, #4]
 800a4da:	4638      	mov	r0, r7
 800a4dc:	3101      	adds	r1, #1
 800a4de:	f7ff ff79 	bl	800a3d4 <_Balloc>
 800a4e2:	4680      	mov	r8, r0
 800a4e4:	b928      	cbnz	r0, 800a4f2 <__multadd+0x5a>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <__multadd+0x84>)
 800a4ea:	480d      	ldr	r0, [pc, #52]	; (800a520 <__multadd+0x88>)
 800a4ec:	21b5      	movs	r1, #181	; 0xb5
 800a4ee:	f000 fd57 	bl	800afa0 <__assert_func>
 800a4f2:	6922      	ldr	r2, [r4, #16]
 800a4f4:	3202      	adds	r2, #2
 800a4f6:	f104 010c 	add.w	r1, r4, #12
 800a4fa:	0092      	lsls	r2, r2, #2
 800a4fc:	300c      	adds	r0, #12
 800a4fe:	f7fe fc35 	bl	8008d6c <memcpy>
 800a502:	4621      	mov	r1, r4
 800a504:	4638      	mov	r0, r7
 800a506:	f7ff ffa5 	bl	800a454 <_Bfree>
 800a50a:	4644      	mov	r4, r8
 800a50c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a510:	3501      	adds	r5, #1
 800a512:	615e      	str	r6, [r3, #20]
 800a514:	6125      	str	r5, [r4, #16]
 800a516:	4620      	mov	r0, r4
 800a518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a51c:	0800cd77 	.word	0x0800cd77
 800a520:	0800cd88 	.word	0x0800cd88

0800a524 <__hi0bits>:
 800a524:	0c03      	lsrs	r3, r0, #16
 800a526:	041b      	lsls	r3, r3, #16
 800a528:	b9d3      	cbnz	r3, 800a560 <__hi0bits+0x3c>
 800a52a:	0400      	lsls	r0, r0, #16
 800a52c:	2310      	movs	r3, #16
 800a52e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a532:	bf04      	itt	eq
 800a534:	0200      	lsleq	r0, r0, #8
 800a536:	3308      	addeq	r3, #8
 800a538:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a53c:	bf04      	itt	eq
 800a53e:	0100      	lsleq	r0, r0, #4
 800a540:	3304      	addeq	r3, #4
 800a542:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a546:	bf04      	itt	eq
 800a548:	0080      	lsleq	r0, r0, #2
 800a54a:	3302      	addeq	r3, #2
 800a54c:	2800      	cmp	r0, #0
 800a54e:	db05      	blt.n	800a55c <__hi0bits+0x38>
 800a550:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a554:	f103 0301 	add.w	r3, r3, #1
 800a558:	bf08      	it	eq
 800a55a:	2320      	moveq	r3, #32
 800a55c:	4618      	mov	r0, r3
 800a55e:	4770      	bx	lr
 800a560:	2300      	movs	r3, #0
 800a562:	e7e4      	b.n	800a52e <__hi0bits+0xa>

0800a564 <__lo0bits>:
 800a564:	6803      	ldr	r3, [r0, #0]
 800a566:	f013 0207 	ands.w	r2, r3, #7
 800a56a:	4601      	mov	r1, r0
 800a56c:	d00b      	beq.n	800a586 <__lo0bits+0x22>
 800a56e:	07da      	lsls	r2, r3, #31
 800a570:	d423      	bmi.n	800a5ba <__lo0bits+0x56>
 800a572:	0798      	lsls	r0, r3, #30
 800a574:	bf49      	itett	mi
 800a576:	085b      	lsrmi	r3, r3, #1
 800a578:	089b      	lsrpl	r3, r3, #2
 800a57a:	2001      	movmi	r0, #1
 800a57c:	600b      	strmi	r3, [r1, #0]
 800a57e:	bf5c      	itt	pl
 800a580:	600b      	strpl	r3, [r1, #0]
 800a582:	2002      	movpl	r0, #2
 800a584:	4770      	bx	lr
 800a586:	b298      	uxth	r0, r3
 800a588:	b9a8      	cbnz	r0, 800a5b6 <__lo0bits+0x52>
 800a58a:	0c1b      	lsrs	r3, r3, #16
 800a58c:	2010      	movs	r0, #16
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	b90a      	cbnz	r2, 800a596 <__lo0bits+0x32>
 800a592:	3008      	adds	r0, #8
 800a594:	0a1b      	lsrs	r3, r3, #8
 800a596:	071a      	lsls	r2, r3, #28
 800a598:	bf04      	itt	eq
 800a59a:	091b      	lsreq	r3, r3, #4
 800a59c:	3004      	addeq	r0, #4
 800a59e:	079a      	lsls	r2, r3, #30
 800a5a0:	bf04      	itt	eq
 800a5a2:	089b      	lsreq	r3, r3, #2
 800a5a4:	3002      	addeq	r0, #2
 800a5a6:	07da      	lsls	r2, r3, #31
 800a5a8:	d403      	bmi.n	800a5b2 <__lo0bits+0x4e>
 800a5aa:	085b      	lsrs	r3, r3, #1
 800a5ac:	f100 0001 	add.w	r0, r0, #1
 800a5b0:	d005      	beq.n	800a5be <__lo0bits+0x5a>
 800a5b2:	600b      	str	r3, [r1, #0]
 800a5b4:	4770      	bx	lr
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	e7e9      	b.n	800a58e <__lo0bits+0x2a>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	4770      	bx	lr
 800a5be:	2020      	movs	r0, #32
 800a5c0:	4770      	bx	lr
	...

0800a5c4 <__i2b>:
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	f7ff ff03 	bl	800a3d4 <_Balloc>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	b928      	cbnz	r0, 800a5de <__i2b+0x1a>
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <__i2b+0x24>)
 800a5d4:	4805      	ldr	r0, [pc, #20]	; (800a5ec <__i2b+0x28>)
 800a5d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5da:	f000 fce1 	bl	800afa0 <__assert_func>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	6144      	str	r4, [r0, #20]
 800a5e2:	6103      	str	r3, [r0, #16]
 800a5e4:	bd10      	pop	{r4, pc}
 800a5e6:	bf00      	nop
 800a5e8:	0800cd77 	.word	0x0800cd77
 800a5ec:	0800cd88 	.word	0x0800cd88

0800a5f0 <__multiply>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	4691      	mov	r9, r2
 800a5f6:	690a      	ldr	r2, [r1, #16]
 800a5f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	bfb8      	it	lt
 800a600:	460b      	movlt	r3, r1
 800a602:	460c      	mov	r4, r1
 800a604:	bfbc      	itt	lt
 800a606:	464c      	movlt	r4, r9
 800a608:	4699      	movlt	r9, r3
 800a60a:	6927      	ldr	r7, [r4, #16]
 800a60c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a610:	68a3      	ldr	r3, [r4, #8]
 800a612:	6861      	ldr	r1, [r4, #4]
 800a614:	eb07 060a 	add.w	r6, r7, sl
 800a618:	42b3      	cmp	r3, r6
 800a61a:	b085      	sub	sp, #20
 800a61c:	bfb8      	it	lt
 800a61e:	3101      	addlt	r1, #1
 800a620:	f7ff fed8 	bl	800a3d4 <_Balloc>
 800a624:	b930      	cbnz	r0, 800a634 <__multiply+0x44>
 800a626:	4602      	mov	r2, r0
 800a628:	4b44      	ldr	r3, [pc, #272]	; (800a73c <__multiply+0x14c>)
 800a62a:	4845      	ldr	r0, [pc, #276]	; (800a740 <__multiply+0x150>)
 800a62c:	f240 115d 	movw	r1, #349	; 0x15d
 800a630:	f000 fcb6 	bl	800afa0 <__assert_func>
 800a634:	f100 0514 	add.w	r5, r0, #20
 800a638:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a63c:	462b      	mov	r3, r5
 800a63e:	2200      	movs	r2, #0
 800a640:	4543      	cmp	r3, r8
 800a642:	d321      	bcc.n	800a688 <__multiply+0x98>
 800a644:	f104 0314 	add.w	r3, r4, #20
 800a648:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a64c:	f109 0314 	add.w	r3, r9, #20
 800a650:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a654:	9202      	str	r2, [sp, #8]
 800a656:	1b3a      	subs	r2, r7, r4
 800a658:	3a15      	subs	r2, #21
 800a65a:	f022 0203 	bic.w	r2, r2, #3
 800a65e:	3204      	adds	r2, #4
 800a660:	f104 0115 	add.w	r1, r4, #21
 800a664:	428f      	cmp	r7, r1
 800a666:	bf38      	it	cc
 800a668:	2204      	movcc	r2, #4
 800a66a:	9201      	str	r2, [sp, #4]
 800a66c:	9a02      	ldr	r2, [sp, #8]
 800a66e:	9303      	str	r3, [sp, #12]
 800a670:	429a      	cmp	r2, r3
 800a672:	d80c      	bhi.n	800a68e <__multiply+0x9e>
 800a674:	2e00      	cmp	r6, #0
 800a676:	dd03      	ble.n	800a680 <__multiply+0x90>
 800a678:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d05a      	beq.n	800a736 <__multiply+0x146>
 800a680:	6106      	str	r6, [r0, #16]
 800a682:	b005      	add	sp, #20
 800a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	f843 2b04 	str.w	r2, [r3], #4
 800a68c:	e7d8      	b.n	800a640 <__multiply+0x50>
 800a68e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a692:	f1ba 0f00 	cmp.w	sl, #0
 800a696:	d024      	beq.n	800a6e2 <__multiply+0xf2>
 800a698:	f104 0e14 	add.w	lr, r4, #20
 800a69c:	46a9      	mov	r9, r5
 800a69e:	f04f 0c00 	mov.w	ip, #0
 800a6a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6a6:	f8d9 1000 	ldr.w	r1, [r9]
 800a6aa:	fa1f fb82 	uxth.w	fp, r2
 800a6ae:	b289      	uxth	r1, r1
 800a6b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a6bc:	4461      	add	r1, ip
 800a6be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6ca:	b289      	uxth	r1, r1
 800a6cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6d0:	4577      	cmp	r7, lr
 800a6d2:	f849 1b04 	str.w	r1, [r9], #4
 800a6d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6da:	d8e2      	bhi.n	800a6a2 <__multiply+0xb2>
 800a6dc:	9a01      	ldr	r2, [sp, #4]
 800a6de:	f845 c002 	str.w	ip, [r5, r2]
 800a6e2:	9a03      	ldr	r2, [sp, #12]
 800a6e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6e8:	3304      	adds	r3, #4
 800a6ea:	f1b9 0f00 	cmp.w	r9, #0
 800a6ee:	d020      	beq.n	800a732 <__multiply+0x142>
 800a6f0:	6829      	ldr	r1, [r5, #0]
 800a6f2:	f104 0c14 	add.w	ip, r4, #20
 800a6f6:	46ae      	mov	lr, r5
 800a6f8:	f04f 0a00 	mov.w	sl, #0
 800a6fc:	f8bc b000 	ldrh.w	fp, [ip]
 800a700:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a704:	fb09 220b 	mla	r2, r9, fp, r2
 800a708:	4492      	add	sl, r2
 800a70a:	b289      	uxth	r1, r1
 800a70c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a710:	f84e 1b04 	str.w	r1, [lr], #4
 800a714:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a718:	f8be 1000 	ldrh.w	r1, [lr]
 800a71c:	0c12      	lsrs	r2, r2, #16
 800a71e:	fb09 1102 	mla	r1, r9, r2, r1
 800a722:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a726:	4567      	cmp	r7, ip
 800a728:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a72c:	d8e6      	bhi.n	800a6fc <__multiply+0x10c>
 800a72e:	9a01      	ldr	r2, [sp, #4]
 800a730:	50a9      	str	r1, [r5, r2]
 800a732:	3504      	adds	r5, #4
 800a734:	e79a      	b.n	800a66c <__multiply+0x7c>
 800a736:	3e01      	subs	r6, #1
 800a738:	e79c      	b.n	800a674 <__multiply+0x84>
 800a73a:	bf00      	nop
 800a73c:	0800cd77 	.word	0x0800cd77
 800a740:	0800cd88 	.word	0x0800cd88

0800a744 <__pow5mult>:
 800a744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a748:	4615      	mov	r5, r2
 800a74a:	f012 0203 	ands.w	r2, r2, #3
 800a74e:	4606      	mov	r6, r0
 800a750:	460f      	mov	r7, r1
 800a752:	d007      	beq.n	800a764 <__pow5mult+0x20>
 800a754:	4c25      	ldr	r4, [pc, #148]	; (800a7ec <__pow5mult+0xa8>)
 800a756:	3a01      	subs	r2, #1
 800a758:	2300      	movs	r3, #0
 800a75a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a75e:	f7ff fe9b 	bl	800a498 <__multadd>
 800a762:	4607      	mov	r7, r0
 800a764:	10ad      	asrs	r5, r5, #2
 800a766:	d03d      	beq.n	800a7e4 <__pow5mult+0xa0>
 800a768:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a76a:	b97c      	cbnz	r4, 800a78c <__pow5mult+0x48>
 800a76c:	2010      	movs	r0, #16
 800a76e:	f7ff fe29 	bl	800a3c4 <malloc>
 800a772:	4602      	mov	r2, r0
 800a774:	6270      	str	r0, [r6, #36]	; 0x24
 800a776:	b928      	cbnz	r0, 800a784 <__pow5mult+0x40>
 800a778:	4b1d      	ldr	r3, [pc, #116]	; (800a7f0 <__pow5mult+0xac>)
 800a77a:	481e      	ldr	r0, [pc, #120]	; (800a7f4 <__pow5mult+0xb0>)
 800a77c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a780:	f000 fc0e 	bl	800afa0 <__assert_func>
 800a784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a788:	6004      	str	r4, [r0, #0]
 800a78a:	60c4      	str	r4, [r0, #12]
 800a78c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a794:	b94c      	cbnz	r4, 800a7aa <__pow5mult+0x66>
 800a796:	f240 2171 	movw	r1, #625	; 0x271
 800a79a:	4630      	mov	r0, r6
 800a79c:	f7ff ff12 	bl	800a5c4 <__i2b>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	6003      	str	r3, [r0, #0]
 800a7aa:	f04f 0900 	mov.w	r9, #0
 800a7ae:	07eb      	lsls	r3, r5, #31
 800a7b0:	d50a      	bpl.n	800a7c8 <__pow5mult+0x84>
 800a7b2:	4639      	mov	r1, r7
 800a7b4:	4622      	mov	r2, r4
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f7ff ff1a 	bl	800a5f0 <__multiply>
 800a7bc:	4639      	mov	r1, r7
 800a7be:	4680      	mov	r8, r0
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f7ff fe47 	bl	800a454 <_Bfree>
 800a7c6:	4647      	mov	r7, r8
 800a7c8:	106d      	asrs	r5, r5, #1
 800a7ca:	d00b      	beq.n	800a7e4 <__pow5mult+0xa0>
 800a7cc:	6820      	ldr	r0, [r4, #0]
 800a7ce:	b938      	cbnz	r0, 800a7e0 <__pow5mult+0x9c>
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	f7ff ff0b 	bl	800a5f0 <__multiply>
 800a7da:	6020      	str	r0, [r4, #0]
 800a7dc:	f8c0 9000 	str.w	r9, [r0]
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	e7e4      	b.n	800a7ae <__pow5mult+0x6a>
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ea:	bf00      	nop
 800a7ec:	0800ced8 	.word	0x0800ced8
 800a7f0:	0800cd05 	.word	0x0800cd05
 800a7f4:	0800cd88 	.word	0x0800cd88

0800a7f8 <__lshift>:
 800a7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	6849      	ldr	r1, [r1, #4]
 800a800:	6923      	ldr	r3, [r4, #16]
 800a802:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a806:	68a3      	ldr	r3, [r4, #8]
 800a808:	4607      	mov	r7, r0
 800a80a:	4691      	mov	r9, r2
 800a80c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a810:	f108 0601 	add.w	r6, r8, #1
 800a814:	42b3      	cmp	r3, r6
 800a816:	db0b      	blt.n	800a830 <__lshift+0x38>
 800a818:	4638      	mov	r0, r7
 800a81a:	f7ff fddb 	bl	800a3d4 <_Balloc>
 800a81e:	4605      	mov	r5, r0
 800a820:	b948      	cbnz	r0, 800a836 <__lshift+0x3e>
 800a822:	4602      	mov	r2, r0
 800a824:	4b2a      	ldr	r3, [pc, #168]	; (800a8d0 <__lshift+0xd8>)
 800a826:	482b      	ldr	r0, [pc, #172]	; (800a8d4 <__lshift+0xdc>)
 800a828:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a82c:	f000 fbb8 	bl	800afa0 <__assert_func>
 800a830:	3101      	adds	r1, #1
 800a832:	005b      	lsls	r3, r3, #1
 800a834:	e7ee      	b.n	800a814 <__lshift+0x1c>
 800a836:	2300      	movs	r3, #0
 800a838:	f100 0114 	add.w	r1, r0, #20
 800a83c:	f100 0210 	add.w	r2, r0, #16
 800a840:	4618      	mov	r0, r3
 800a842:	4553      	cmp	r3, sl
 800a844:	db37      	blt.n	800a8b6 <__lshift+0xbe>
 800a846:	6920      	ldr	r0, [r4, #16]
 800a848:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a84c:	f104 0314 	add.w	r3, r4, #20
 800a850:	f019 091f 	ands.w	r9, r9, #31
 800a854:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a858:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a85c:	d02f      	beq.n	800a8be <__lshift+0xc6>
 800a85e:	f1c9 0e20 	rsb	lr, r9, #32
 800a862:	468a      	mov	sl, r1
 800a864:	f04f 0c00 	mov.w	ip, #0
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	fa02 f209 	lsl.w	r2, r2, r9
 800a86e:	ea42 020c 	orr.w	r2, r2, ip
 800a872:	f84a 2b04 	str.w	r2, [sl], #4
 800a876:	f853 2b04 	ldr.w	r2, [r3], #4
 800a87a:	4298      	cmp	r0, r3
 800a87c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a880:	d8f2      	bhi.n	800a868 <__lshift+0x70>
 800a882:	1b03      	subs	r3, r0, r4
 800a884:	3b15      	subs	r3, #21
 800a886:	f023 0303 	bic.w	r3, r3, #3
 800a88a:	3304      	adds	r3, #4
 800a88c:	f104 0215 	add.w	r2, r4, #21
 800a890:	4290      	cmp	r0, r2
 800a892:	bf38      	it	cc
 800a894:	2304      	movcc	r3, #4
 800a896:	f841 c003 	str.w	ip, [r1, r3]
 800a89a:	f1bc 0f00 	cmp.w	ip, #0
 800a89e:	d001      	beq.n	800a8a4 <__lshift+0xac>
 800a8a0:	f108 0602 	add.w	r6, r8, #2
 800a8a4:	3e01      	subs	r6, #1
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	612e      	str	r6, [r5, #16]
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	f7ff fdd2 	bl	800a454 <_Bfree>
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	e7c1      	b.n	800a842 <__lshift+0x4a>
 800a8be:	3904      	subs	r1, #4
 800a8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8c8:	4298      	cmp	r0, r3
 800a8ca:	d8f9      	bhi.n	800a8c0 <__lshift+0xc8>
 800a8cc:	e7ea      	b.n	800a8a4 <__lshift+0xac>
 800a8ce:	bf00      	nop
 800a8d0:	0800cd77 	.word	0x0800cd77
 800a8d4:	0800cd88 	.word	0x0800cd88

0800a8d8 <__mcmp>:
 800a8d8:	b530      	push	{r4, r5, lr}
 800a8da:	6902      	ldr	r2, [r0, #16]
 800a8dc:	690c      	ldr	r4, [r1, #16]
 800a8de:	1b12      	subs	r2, r2, r4
 800a8e0:	d10e      	bne.n	800a900 <__mcmp+0x28>
 800a8e2:	f100 0314 	add.w	r3, r0, #20
 800a8e6:	3114      	adds	r1, #20
 800a8e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8f8:	42a5      	cmp	r5, r4
 800a8fa:	d003      	beq.n	800a904 <__mcmp+0x2c>
 800a8fc:	d305      	bcc.n	800a90a <__mcmp+0x32>
 800a8fe:	2201      	movs	r2, #1
 800a900:	4610      	mov	r0, r2
 800a902:	bd30      	pop	{r4, r5, pc}
 800a904:	4283      	cmp	r3, r0
 800a906:	d3f3      	bcc.n	800a8f0 <__mcmp+0x18>
 800a908:	e7fa      	b.n	800a900 <__mcmp+0x28>
 800a90a:	f04f 32ff 	mov.w	r2, #4294967295
 800a90e:	e7f7      	b.n	800a900 <__mcmp+0x28>

0800a910 <__mdiff>:
 800a910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	460c      	mov	r4, r1
 800a916:	4606      	mov	r6, r0
 800a918:	4611      	mov	r1, r2
 800a91a:	4620      	mov	r0, r4
 800a91c:	4690      	mov	r8, r2
 800a91e:	f7ff ffdb 	bl	800a8d8 <__mcmp>
 800a922:	1e05      	subs	r5, r0, #0
 800a924:	d110      	bne.n	800a948 <__mdiff+0x38>
 800a926:	4629      	mov	r1, r5
 800a928:	4630      	mov	r0, r6
 800a92a:	f7ff fd53 	bl	800a3d4 <_Balloc>
 800a92e:	b930      	cbnz	r0, 800a93e <__mdiff+0x2e>
 800a930:	4b3a      	ldr	r3, [pc, #232]	; (800aa1c <__mdiff+0x10c>)
 800a932:	4602      	mov	r2, r0
 800a934:	f240 2132 	movw	r1, #562	; 0x232
 800a938:	4839      	ldr	r0, [pc, #228]	; (800aa20 <__mdiff+0x110>)
 800a93a:	f000 fb31 	bl	800afa0 <__assert_func>
 800a93e:	2301      	movs	r3, #1
 800a940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a948:	bfa4      	itt	ge
 800a94a:	4643      	movge	r3, r8
 800a94c:	46a0      	movge	r8, r4
 800a94e:	4630      	mov	r0, r6
 800a950:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a954:	bfa6      	itte	ge
 800a956:	461c      	movge	r4, r3
 800a958:	2500      	movge	r5, #0
 800a95a:	2501      	movlt	r5, #1
 800a95c:	f7ff fd3a 	bl	800a3d4 <_Balloc>
 800a960:	b920      	cbnz	r0, 800a96c <__mdiff+0x5c>
 800a962:	4b2e      	ldr	r3, [pc, #184]	; (800aa1c <__mdiff+0x10c>)
 800a964:	4602      	mov	r2, r0
 800a966:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a96a:	e7e5      	b.n	800a938 <__mdiff+0x28>
 800a96c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a970:	6926      	ldr	r6, [r4, #16]
 800a972:	60c5      	str	r5, [r0, #12]
 800a974:	f104 0914 	add.w	r9, r4, #20
 800a978:	f108 0514 	add.w	r5, r8, #20
 800a97c:	f100 0e14 	add.w	lr, r0, #20
 800a980:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a984:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a988:	f108 0210 	add.w	r2, r8, #16
 800a98c:	46f2      	mov	sl, lr
 800a98e:	2100      	movs	r1, #0
 800a990:	f859 3b04 	ldr.w	r3, [r9], #4
 800a994:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a998:	fa1f f883 	uxth.w	r8, r3
 800a99c:	fa11 f18b 	uxtah	r1, r1, fp
 800a9a0:	0c1b      	lsrs	r3, r3, #16
 800a9a2:	eba1 0808 	sub.w	r8, r1, r8
 800a9a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9ae:	fa1f f888 	uxth.w	r8, r8
 800a9b2:	1419      	asrs	r1, r3, #16
 800a9b4:	454e      	cmp	r6, r9
 800a9b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9ba:	f84a 3b04 	str.w	r3, [sl], #4
 800a9be:	d8e7      	bhi.n	800a990 <__mdiff+0x80>
 800a9c0:	1b33      	subs	r3, r6, r4
 800a9c2:	3b15      	subs	r3, #21
 800a9c4:	f023 0303 	bic.w	r3, r3, #3
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	3415      	adds	r4, #21
 800a9cc:	42a6      	cmp	r6, r4
 800a9ce:	bf38      	it	cc
 800a9d0:	2304      	movcc	r3, #4
 800a9d2:	441d      	add	r5, r3
 800a9d4:	4473      	add	r3, lr
 800a9d6:	469e      	mov	lr, r3
 800a9d8:	462e      	mov	r6, r5
 800a9da:	4566      	cmp	r6, ip
 800a9dc:	d30e      	bcc.n	800a9fc <__mdiff+0xec>
 800a9de:	f10c 0203 	add.w	r2, ip, #3
 800a9e2:	1b52      	subs	r2, r2, r5
 800a9e4:	f022 0203 	bic.w	r2, r2, #3
 800a9e8:	3d03      	subs	r5, #3
 800a9ea:	45ac      	cmp	ip, r5
 800a9ec:	bf38      	it	cc
 800a9ee:	2200      	movcc	r2, #0
 800a9f0:	441a      	add	r2, r3
 800a9f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a9f6:	b17b      	cbz	r3, 800aa18 <__mdiff+0x108>
 800a9f8:	6107      	str	r7, [r0, #16]
 800a9fa:	e7a3      	b.n	800a944 <__mdiff+0x34>
 800a9fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa00:	fa11 f288 	uxtah	r2, r1, r8
 800aa04:	1414      	asrs	r4, r2, #16
 800aa06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa0a:	b292      	uxth	r2, r2
 800aa0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa10:	f84e 2b04 	str.w	r2, [lr], #4
 800aa14:	1421      	asrs	r1, r4, #16
 800aa16:	e7e0      	b.n	800a9da <__mdiff+0xca>
 800aa18:	3f01      	subs	r7, #1
 800aa1a:	e7ea      	b.n	800a9f2 <__mdiff+0xe2>
 800aa1c:	0800cd77 	.word	0x0800cd77
 800aa20:	0800cd88 	.word	0x0800cd88

0800aa24 <__d2b>:
 800aa24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa28:	4689      	mov	r9, r1
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	ec57 6b10 	vmov	r6, r7, d0
 800aa30:	4690      	mov	r8, r2
 800aa32:	f7ff fccf 	bl	800a3d4 <_Balloc>
 800aa36:	4604      	mov	r4, r0
 800aa38:	b930      	cbnz	r0, 800aa48 <__d2b+0x24>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	4b25      	ldr	r3, [pc, #148]	; (800aad4 <__d2b+0xb0>)
 800aa3e:	4826      	ldr	r0, [pc, #152]	; (800aad8 <__d2b+0xb4>)
 800aa40:	f240 310a 	movw	r1, #778	; 0x30a
 800aa44:	f000 faac 	bl	800afa0 <__assert_func>
 800aa48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa50:	bb35      	cbnz	r5, 800aaa0 <__d2b+0x7c>
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	d028      	beq.n	800aaaa <__d2b+0x86>
 800aa58:	4668      	mov	r0, sp
 800aa5a:	9600      	str	r6, [sp, #0]
 800aa5c:	f7ff fd82 	bl	800a564 <__lo0bits>
 800aa60:	9900      	ldr	r1, [sp, #0]
 800aa62:	b300      	cbz	r0, 800aaa6 <__d2b+0x82>
 800aa64:	9a01      	ldr	r2, [sp, #4]
 800aa66:	f1c0 0320 	rsb	r3, r0, #32
 800aa6a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa6e:	430b      	orrs	r3, r1
 800aa70:	40c2      	lsrs	r2, r0
 800aa72:	6163      	str	r3, [r4, #20]
 800aa74:	9201      	str	r2, [sp, #4]
 800aa76:	9b01      	ldr	r3, [sp, #4]
 800aa78:	61a3      	str	r3, [r4, #24]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	bf14      	ite	ne
 800aa7e:	2202      	movne	r2, #2
 800aa80:	2201      	moveq	r2, #1
 800aa82:	6122      	str	r2, [r4, #16]
 800aa84:	b1d5      	cbz	r5, 800aabc <__d2b+0x98>
 800aa86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa8a:	4405      	add	r5, r0
 800aa8c:	f8c9 5000 	str.w	r5, [r9]
 800aa90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa94:	f8c8 0000 	str.w	r0, [r8]
 800aa98:	4620      	mov	r0, r4
 800aa9a:	b003      	add	sp, #12
 800aa9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aaa4:	e7d5      	b.n	800aa52 <__d2b+0x2e>
 800aaa6:	6161      	str	r1, [r4, #20]
 800aaa8:	e7e5      	b.n	800aa76 <__d2b+0x52>
 800aaaa:	a801      	add	r0, sp, #4
 800aaac:	f7ff fd5a 	bl	800a564 <__lo0bits>
 800aab0:	9b01      	ldr	r3, [sp, #4]
 800aab2:	6163      	str	r3, [r4, #20]
 800aab4:	2201      	movs	r2, #1
 800aab6:	6122      	str	r2, [r4, #16]
 800aab8:	3020      	adds	r0, #32
 800aaba:	e7e3      	b.n	800aa84 <__d2b+0x60>
 800aabc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aac0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aac4:	f8c9 0000 	str.w	r0, [r9]
 800aac8:	6918      	ldr	r0, [r3, #16]
 800aaca:	f7ff fd2b 	bl	800a524 <__hi0bits>
 800aace:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aad2:	e7df      	b.n	800aa94 <__d2b+0x70>
 800aad4:	0800cd77 	.word	0x0800cd77
 800aad8:	0800cd88 	.word	0x0800cd88

0800aadc <_calloc_r>:
 800aadc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aade:	fba1 2402 	umull	r2, r4, r1, r2
 800aae2:	b94c      	cbnz	r4, 800aaf8 <_calloc_r+0x1c>
 800aae4:	4611      	mov	r1, r2
 800aae6:	9201      	str	r2, [sp, #4]
 800aae8:	f000 f87a 	bl	800abe0 <_malloc_r>
 800aaec:	9a01      	ldr	r2, [sp, #4]
 800aaee:	4605      	mov	r5, r0
 800aaf0:	b930      	cbnz	r0, 800ab00 <_calloc_r+0x24>
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	b003      	add	sp, #12
 800aaf6:	bd30      	pop	{r4, r5, pc}
 800aaf8:	220c      	movs	r2, #12
 800aafa:	6002      	str	r2, [r0, #0]
 800aafc:	2500      	movs	r5, #0
 800aafe:	e7f8      	b.n	800aaf2 <_calloc_r+0x16>
 800ab00:	4621      	mov	r1, r4
 800ab02:	f7fe f941 	bl	8008d88 <memset>
 800ab06:	e7f4      	b.n	800aaf2 <_calloc_r+0x16>

0800ab08 <_free_r>:
 800ab08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab0a:	2900      	cmp	r1, #0
 800ab0c:	d044      	beq.n	800ab98 <_free_r+0x90>
 800ab0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab12:	9001      	str	r0, [sp, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f1a1 0404 	sub.w	r4, r1, #4
 800ab1a:	bfb8      	it	lt
 800ab1c:	18e4      	addlt	r4, r4, r3
 800ab1e:	f000 fa9b 	bl	800b058 <__malloc_lock>
 800ab22:	4a1e      	ldr	r2, [pc, #120]	; (800ab9c <_free_r+0x94>)
 800ab24:	9801      	ldr	r0, [sp, #4]
 800ab26:	6813      	ldr	r3, [r2, #0]
 800ab28:	b933      	cbnz	r3, 800ab38 <_free_r+0x30>
 800ab2a:	6063      	str	r3, [r4, #4]
 800ab2c:	6014      	str	r4, [r2, #0]
 800ab2e:	b003      	add	sp, #12
 800ab30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab34:	f000 ba96 	b.w	800b064 <__malloc_unlock>
 800ab38:	42a3      	cmp	r3, r4
 800ab3a:	d908      	bls.n	800ab4e <_free_r+0x46>
 800ab3c:	6825      	ldr	r5, [r4, #0]
 800ab3e:	1961      	adds	r1, r4, r5
 800ab40:	428b      	cmp	r3, r1
 800ab42:	bf01      	itttt	eq
 800ab44:	6819      	ldreq	r1, [r3, #0]
 800ab46:	685b      	ldreq	r3, [r3, #4]
 800ab48:	1949      	addeq	r1, r1, r5
 800ab4a:	6021      	streq	r1, [r4, #0]
 800ab4c:	e7ed      	b.n	800ab2a <_free_r+0x22>
 800ab4e:	461a      	mov	r2, r3
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	b10b      	cbz	r3, 800ab58 <_free_r+0x50>
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	d9fa      	bls.n	800ab4e <_free_r+0x46>
 800ab58:	6811      	ldr	r1, [r2, #0]
 800ab5a:	1855      	adds	r5, r2, r1
 800ab5c:	42a5      	cmp	r5, r4
 800ab5e:	d10b      	bne.n	800ab78 <_free_r+0x70>
 800ab60:	6824      	ldr	r4, [r4, #0]
 800ab62:	4421      	add	r1, r4
 800ab64:	1854      	adds	r4, r2, r1
 800ab66:	42a3      	cmp	r3, r4
 800ab68:	6011      	str	r1, [r2, #0]
 800ab6a:	d1e0      	bne.n	800ab2e <_free_r+0x26>
 800ab6c:	681c      	ldr	r4, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	6053      	str	r3, [r2, #4]
 800ab72:	4421      	add	r1, r4
 800ab74:	6011      	str	r1, [r2, #0]
 800ab76:	e7da      	b.n	800ab2e <_free_r+0x26>
 800ab78:	d902      	bls.n	800ab80 <_free_r+0x78>
 800ab7a:	230c      	movs	r3, #12
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	e7d6      	b.n	800ab2e <_free_r+0x26>
 800ab80:	6825      	ldr	r5, [r4, #0]
 800ab82:	1961      	adds	r1, r4, r5
 800ab84:	428b      	cmp	r3, r1
 800ab86:	bf04      	itt	eq
 800ab88:	6819      	ldreq	r1, [r3, #0]
 800ab8a:	685b      	ldreq	r3, [r3, #4]
 800ab8c:	6063      	str	r3, [r4, #4]
 800ab8e:	bf04      	itt	eq
 800ab90:	1949      	addeq	r1, r1, r5
 800ab92:	6021      	streq	r1, [r4, #0]
 800ab94:	6054      	str	r4, [r2, #4]
 800ab96:	e7ca      	b.n	800ab2e <_free_r+0x26>
 800ab98:	b003      	add	sp, #12
 800ab9a:	bd30      	pop	{r4, r5, pc}
 800ab9c:	20000df0 	.word	0x20000df0

0800aba0 <sbrk_aligned>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	4e0e      	ldr	r6, [pc, #56]	; (800abdc <sbrk_aligned+0x3c>)
 800aba4:	460c      	mov	r4, r1
 800aba6:	6831      	ldr	r1, [r6, #0]
 800aba8:	4605      	mov	r5, r0
 800abaa:	b911      	cbnz	r1, 800abb2 <sbrk_aligned+0x12>
 800abac:	f000 f9e8 	bl	800af80 <_sbrk_r>
 800abb0:	6030      	str	r0, [r6, #0]
 800abb2:	4621      	mov	r1, r4
 800abb4:	4628      	mov	r0, r5
 800abb6:	f000 f9e3 	bl	800af80 <_sbrk_r>
 800abba:	1c43      	adds	r3, r0, #1
 800abbc:	d00a      	beq.n	800abd4 <sbrk_aligned+0x34>
 800abbe:	1cc4      	adds	r4, r0, #3
 800abc0:	f024 0403 	bic.w	r4, r4, #3
 800abc4:	42a0      	cmp	r0, r4
 800abc6:	d007      	beq.n	800abd8 <sbrk_aligned+0x38>
 800abc8:	1a21      	subs	r1, r4, r0
 800abca:	4628      	mov	r0, r5
 800abcc:	f000 f9d8 	bl	800af80 <_sbrk_r>
 800abd0:	3001      	adds	r0, #1
 800abd2:	d101      	bne.n	800abd8 <sbrk_aligned+0x38>
 800abd4:	f04f 34ff 	mov.w	r4, #4294967295
 800abd8:	4620      	mov	r0, r4
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	20000df4 	.word	0x20000df4

0800abe0 <_malloc_r>:
 800abe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe4:	1ccd      	adds	r5, r1, #3
 800abe6:	f025 0503 	bic.w	r5, r5, #3
 800abea:	3508      	adds	r5, #8
 800abec:	2d0c      	cmp	r5, #12
 800abee:	bf38      	it	cc
 800abf0:	250c      	movcc	r5, #12
 800abf2:	2d00      	cmp	r5, #0
 800abf4:	4607      	mov	r7, r0
 800abf6:	db01      	blt.n	800abfc <_malloc_r+0x1c>
 800abf8:	42a9      	cmp	r1, r5
 800abfa:	d905      	bls.n	800ac08 <_malloc_r+0x28>
 800abfc:	230c      	movs	r3, #12
 800abfe:	603b      	str	r3, [r7, #0]
 800ac00:	2600      	movs	r6, #0
 800ac02:	4630      	mov	r0, r6
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	4e2e      	ldr	r6, [pc, #184]	; (800acc4 <_malloc_r+0xe4>)
 800ac0a:	f000 fa25 	bl	800b058 <__malloc_lock>
 800ac0e:	6833      	ldr	r3, [r6, #0]
 800ac10:	461c      	mov	r4, r3
 800ac12:	bb34      	cbnz	r4, 800ac62 <_malloc_r+0x82>
 800ac14:	4629      	mov	r1, r5
 800ac16:	4638      	mov	r0, r7
 800ac18:	f7ff ffc2 	bl	800aba0 <sbrk_aligned>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	4604      	mov	r4, r0
 800ac20:	d14d      	bne.n	800acbe <_malloc_r+0xde>
 800ac22:	6834      	ldr	r4, [r6, #0]
 800ac24:	4626      	mov	r6, r4
 800ac26:	2e00      	cmp	r6, #0
 800ac28:	d140      	bne.n	800acac <_malloc_r+0xcc>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	4631      	mov	r1, r6
 800ac2e:	4638      	mov	r0, r7
 800ac30:	eb04 0803 	add.w	r8, r4, r3
 800ac34:	f000 f9a4 	bl	800af80 <_sbrk_r>
 800ac38:	4580      	cmp	r8, r0
 800ac3a:	d13a      	bne.n	800acb2 <_malloc_r+0xd2>
 800ac3c:	6821      	ldr	r1, [r4, #0]
 800ac3e:	3503      	adds	r5, #3
 800ac40:	1a6d      	subs	r5, r5, r1
 800ac42:	f025 0503 	bic.w	r5, r5, #3
 800ac46:	3508      	adds	r5, #8
 800ac48:	2d0c      	cmp	r5, #12
 800ac4a:	bf38      	it	cc
 800ac4c:	250c      	movcc	r5, #12
 800ac4e:	4629      	mov	r1, r5
 800ac50:	4638      	mov	r0, r7
 800ac52:	f7ff ffa5 	bl	800aba0 <sbrk_aligned>
 800ac56:	3001      	adds	r0, #1
 800ac58:	d02b      	beq.n	800acb2 <_malloc_r+0xd2>
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	442b      	add	r3, r5
 800ac5e:	6023      	str	r3, [r4, #0]
 800ac60:	e00e      	b.n	800ac80 <_malloc_r+0xa0>
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	1b52      	subs	r2, r2, r5
 800ac66:	d41e      	bmi.n	800aca6 <_malloc_r+0xc6>
 800ac68:	2a0b      	cmp	r2, #11
 800ac6a:	d916      	bls.n	800ac9a <_malloc_r+0xba>
 800ac6c:	1961      	adds	r1, r4, r5
 800ac6e:	42a3      	cmp	r3, r4
 800ac70:	6025      	str	r5, [r4, #0]
 800ac72:	bf18      	it	ne
 800ac74:	6059      	strne	r1, [r3, #4]
 800ac76:	6863      	ldr	r3, [r4, #4]
 800ac78:	bf08      	it	eq
 800ac7a:	6031      	streq	r1, [r6, #0]
 800ac7c:	5162      	str	r2, [r4, r5]
 800ac7e:	604b      	str	r3, [r1, #4]
 800ac80:	4638      	mov	r0, r7
 800ac82:	f104 060b 	add.w	r6, r4, #11
 800ac86:	f000 f9ed 	bl	800b064 <__malloc_unlock>
 800ac8a:	f026 0607 	bic.w	r6, r6, #7
 800ac8e:	1d23      	adds	r3, r4, #4
 800ac90:	1af2      	subs	r2, r6, r3
 800ac92:	d0b6      	beq.n	800ac02 <_malloc_r+0x22>
 800ac94:	1b9b      	subs	r3, r3, r6
 800ac96:	50a3      	str	r3, [r4, r2]
 800ac98:	e7b3      	b.n	800ac02 <_malloc_r+0x22>
 800ac9a:	6862      	ldr	r2, [r4, #4]
 800ac9c:	42a3      	cmp	r3, r4
 800ac9e:	bf0c      	ite	eq
 800aca0:	6032      	streq	r2, [r6, #0]
 800aca2:	605a      	strne	r2, [r3, #4]
 800aca4:	e7ec      	b.n	800ac80 <_malloc_r+0xa0>
 800aca6:	4623      	mov	r3, r4
 800aca8:	6864      	ldr	r4, [r4, #4]
 800acaa:	e7b2      	b.n	800ac12 <_malloc_r+0x32>
 800acac:	4634      	mov	r4, r6
 800acae:	6876      	ldr	r6, [r6, #4]
 800acb0:	e7b9      	b.n	800ac26 <_malloc_r+0x46>
 800acb2:	230c      	movs	r3, #12
 800acb4:	603b      	str	r3, [r7, #0]
 800acb6:	4638      	mov	r0, r7
 800acb8:	f000 f9d4 	bl	800b064 <__malloc_unlock>
 800acbc:	e7a1      	b.n	800ac02 <_malloc_r+0x22>
 800acbe:	6025      	str	r5, [r4, #0]
 800acc0:	e7de      	b.n	800ac80 <_malloc_r+0xa0>
 800acc2:	bf00      	nop
 800acc4:	20000df0 	.word	0x20000df0

0800acc8 <__ssputs_r>:
 800acc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800accc:	688e      	ldr	r6, [r1, #8]
 800acce:	429e      	cmp	r6, r3
 800acd0:	4682      	mov	sl, r0
 800acd2:	460c      	mov	r4, r1
 800acd4:	4690      	mov	r8, r2
 800acd6:	461f      	mov	r7, r3
 800acd8:	d838      	bhi.n	800ad4c <__ssputs_r+0x84>
 800acda:	898a      	ldrh	r2, [r1, #12]
 800acdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ace0:	d032      	beq.n	800ad48 <__ssputs_r+0x80>
 800ace2:	6825      	ldr	r5, [r4, #0]
 800ace4:	6909      	ldr	r1, [r1, #16]
 800ace6:	eba5 0901 	sub.w	r9, r5, r1
 800acea:	6965      	ldr	r5, [r4, #20]
 800acec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acf4:	3301      	adds	r3, #1
 800acf6:	444b      	add	r3, r9
 800acf8:	106d      	asrs	r5, r5, #1
 800acfa:	429d      	cmp	r5, r3
 800acfc:	bf38      	it	cc
 800acfe:	461d      	movcc	r5, r3
 800ad00:	0553      	lsls	r3, r2, #21
 800ad02:	d531      	bpl.n	800ad68 <__ssputs_r+0xa0>
 800ad04:	4629      	mov	r1, r5
 800ad06:	f7ff ff6b 	bl	800abe0 <_malloc_r>
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	b950      	cbnz	r0, 800ad24 <__ssputs_r+0x5c>
 800ad0e:	230c      	movs	r3, #12
 800ad10:	f8ca 3000 	str.w	r3, [sl]
 800ad14:	89a3      	ldrh	r3, [r4, #12]
 800ad16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1a:	81a3      	strh	r3, [r4, #12]
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad24:	6921      	ldr	r1, [r4, #16]
 800ad26:	464a      	mov	r2, r9
 800ad28:	f7fe f820 	bl	8008d6c <memcpy>
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad36:	81a3      	strh	r3, [r4, #12]
 800ad38:	6126      	str	r6, [r4, #16]
 800ad3a:	6165      	str	r5, [r4, #20]
 800ad3c:	444e      	add	r6, r9
 800ad3e:	eba5 0509 	sub.w	r5, r5, r9
 800ad42:	6026      	str	r6, [r4, #0]
 800ad44:	60a5      	str	r5, [r4, #8]
 800ad46:	463e      	mov	r6, r7
 800ad48:	42be      	cmp	r6, r7
 800ad4a:	d900      	bls.n	800ad4e <__ssputs_r+0x86>
 800ad4c:	463e      	mov	r6, r7
 800ad4e:	6820      	ldr	r0, [r4, #0]
 800ad50:	4632      	mov	r2, r6
 800ad52:	4641      	mov	r1, r8
 800ad54:	f000 f966 	bl	800b024 <memmove>
 800ad58:	68a3      	ldr	r3, [r4, #8]
 800ad5a:	1b9b      	subs	r3, r3, r6
 800ad5c:	60a3      	str	r3, [r4, #8]
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	4433      	add	r3, r6
 800ad62:	6023      	str	r3, [r4, #0]
 800ad64:	2000      	movs	r0, #0
 800ad66:	e7db      	b.n	800ad20 <__ssputs_r+0x58>
 800ad68:	462a      	mov	r2, r5
 800ad6a:	f000 f981 	bl	800b070 <_realloc_r>
 800ad6e:	4606      	mov	r6, r0
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d1e1      	bne.n	800ad38 <__ssputs_r+0x70>
 800ad74:	6921      	ldr	r1, [r4, #16]
 800ad76:	4650      	mov	r0, sl
 800ad78:	f7ff fec6 	bl	800ab08 <_free_r>
 800ad7c:	e7c7      	b.n	800ad0e <__ssputs_r+0x46>
	...

0800ad80 <_svfiprintf_r>:
 800ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad84:	4698      	mov	r8, r3
 800ad86:	898b      	ldrh	r3, [r1, #12]
 800ad88:	061b      	lsls	r3, r3, #24
 800ad8a:	b09d      	sub	sp, #116	; 0x74
 800ad8c:	4607      	mov	r7, r0
 800ad8e:	460d      	mov	r5, r1
 800ad90:	4614      	mov	r4, r2
 800ad92:	d50e      	bpl.n	800adb2 <_svfiprintf_r+0x32>
 800ad94:	690b      	ldr	r3, [r1, #16]
 800ad96:	b963      	cbnz	r3, 800adb2 <_svfiprintf_r+0x32>
 800ad98:	2140      	movs	r1, #64	; 0x40
 800ad9a:	f7ff ff21 	bl	800abe0 <_malloc_r>
 800ad9e:	6028      	str	r0, [r5, #0]
 800ada0:	6128      	str	r0, [r5, #16]
 800ada2:	b920      	cbnz	r0, 800adae <_svfiprintf_r+0x2e>
 800ada4:	230c      	movs	r3, #12
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	e0d1      	b.n	800af52 <_svfiprintf_r+0x1d2>
 800adae:	2340      	movs	r3, #64	; 0x40
 800adb0:	616b      	str	r3, [r5, #20]
 800adb2:	2300      	movs	r3, #0
 800adb4:	9309      	str	r3, [sp, #36]	; 0x24
 800adb6:	2320      	movs	r3, #32
 800adb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc0:	2330      	movs	r3, #48	; 0x30
 800adc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af6c <_svfiprintf_r+0x1ec>
 800adc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adca:	f04f 0901 	mov.w	r9, #1
 800adce:	4623      	mov	r3, r4
 800add0:	469a      	mov	sl, r3
 800add2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800add6:	b10a      	cbz	r2, 800addc <_svfiprintf_r+0x5c>
 800add8:	2a25      	cmp	r2, #37	; 0x25
 800adda:	d1f9      	bne.n	800add0 <_svfiprintf_r+0x50>
 800addc:	ebba 0b04 	subs.w	fp, sl, r4
 800ade0:	d00b      	beq.n	800adfa <_svfiprintf_r+0x7a>
 800ade2:	465b      	mov	r3, fp
 800ade4:	4622      	mov	r2, r4
 800ade6:	4629      	mov	r1, r5
 800ade8:	4638      	mov	r0, r7
 800adea:	f7ff ff6d 	bl	800acc8 <__ssputs_r>
 800adee:	3001      	adds	r0, #1
 800adf0:	f000 80aa 	beq.w	800af48 <_svfiprintf_r+0x1c8>
 800adf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adf6:	445a      	add	r2, fp
 800adf8:	9209      	str	r2, [sp, #36]	; 0x24
 800adfa:	f89a 3000 	ldrb.w	r3, [sl]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 80a2 	beq.w	800af48 <_svfiprintf_r+0x1c8>
 800ae04:	2300      	movs	r3, #0
 800ae06:	f04f 32ff 	mov.w	r2, #4294967295
 800ae0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae0e:	f10a 0a01 	add.w	sl, sl, #1
 800ae12:	9304      	str	r3, [sp, #16]
 800ae14:	9307      	str	r3, [sp, #28]
 800ae16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae1a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae1c:	4654      	mov	r4, sl
 800ae1e:	2205      	movs	r2, #5
 800ae20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae24:	4851      	ldr	r0, [pc, #324]	; (800af6c <_svfiprintf_r+0x1ec>)
 800ae26:	f7f5 f9e3 	bl	80001f0 <memchr>
 800ae2a:	9a04      	ldr	r2, [sp, #16]
 800ae2c:	b9d8      	cbnz	r0, 800ae66 <_svfiprintf_r+0xe6>
 800ae2e:	06d0      	lsls	r0, r2, #27
 800ae30:	bf44      	itt	mi
 800ae32:	2320      	movmi	r3, #32
 800ae34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae38:	0711      	lsls	r1, r2, #28
 800ae3a:	bf44      	itt	mi
 800ae3c:	232b      	movmi	r3, #43	; 0x2b
 800ae3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae42:	f89a 3000 	ldrb.w	r3, [sl]
 800ae46:	2b2a      	cmp	r3, #42	; 0x2a
 800ae48:	d015      	beq.n	800ae76 <_svfiprintf_r+0xf6>
 800ae4a:	9a07      	ldr	r2, [sp, #28]
 800ae4c:	4654      	mov	r4, sl
 800ae4e:	2000      	movs	r0, #0
 800ae50:	f04f 0c0a 	mov.w	ip, #10
 800ae54:	4621      	mov	r1, r4
 800ae56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae5a:	3b30      	subs	r3, #48	; 0x30
 800ae5c:	2b09      	cmp	r3, #9
 800ae5e:	d94e      	bls.n	800aefe <_svfiprintf_r+0x17e>
 800ae60:	b1b0      	cbz	r0, 800ae90 <_svfiprintf_r+0x110>
 800ae62:	9207      	str	r2, [sp, #28]
 800ae64:	e014      	b.n	800ae90 <_svfiprintf_r+0x110>
 800ae66:	eba0 0308 	sub.w	r3, r0, r8
 800ae6a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	9304      	str	r3, [sp, #16]
 800ae72:	46a2      	mov	sl, r4
 800ae74:	e7d2      	b.n	800ae1c <_svfiprintf_r+0x9c>
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	1d19      	adds	r1, r3, #4
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	9103      	str	r1, [sp, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfbb      	ittet	lt
 800ae82:	425b      	neglt	r3, r3
 800ae84:	f042 0202 	orrlt.w	r2, r2, #2
 800ae88:	9307      	strge	r3, [sp, #28]
 800ae8a:	9307      	strlt	r3, [sp, #28]
 800ae8c:	bfb8      	it	lt
 800ae8e:	9204      	strlt	r2, [sp, #16]
 800ae90:	7823      	ldrb	r3, [r4, #0]
 800ae92:	2b2e      	cmp	r3, #46	; 0x2e
 800ae94:	d10c      	bne.n	800aeb0 <_svfiprintf_r+0x130>
 800ae96:	7863      	ldrb	r3, [r4, #1]
 800ae98:	2b2a      	cmp	r3, #42	; 0x2a
 800ae9a:	d135      	bne.n	800af08 <_svfiprintf_r+0x188>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	1d1a      	adds	r2, r3, #4
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	9203      	str	r2, [sp, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	bfb8      	it	lt
 800aea8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeac:	3402      	adds	r4, #2
 800aeae:	9305      	str	r3, [sp, #20]
 800aeb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af7c <_svfiprintf_r+0x1fc>
 800aeb4:	7821      	ldrb	r1, [r4, #0]
 800aeb6:	2203      	movs	r2, #3
 800aeb8:	4650      	mov	r0, sl
 800aeba:	f7f5 f999 	bl	80001f0 <memchr>
 800aebe:	b140      	cbz	r0, 800aed2 <_svfiprintf_r+0x152>
 800aec0:	2340      	movs	r3, #64	; 0x40
 800aec2:	eba0 000a 	sub.w	r0, r0, sl
 800aec6:	fa03 f000 	lsl.w	r0, r3, r0
 800aeca:	9b04      	ldr	r3, [sp, #16]
 800aecc:	4303      	orrs	r3, r0
 800aece:	3401      	adds	r4, #1
 800aed0:	9304      	str	r3, [sp, #16]
 800aed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aed6:	4826      	ldr	r0, [pc, #152]	; (800af70 <_svfiprintf_r+0x1f0>)
 800aed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aedc:	2206      	movs	r2, #6
 800aede:	f7f5 f987 	bl	80001f0 <memchr>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d038      	beq.n	800af58 <_svfiprintf_r+0x1d8>
 800aee6:	4b23      	ldr	r3, [pc, #140]	; (800af74 <_svfiprintf_r+0x1f4>)
 800aee8:	bb1b      	cbnz	r3, 800af32 <_svfiprintf_r+0x1b2>
 800aeea:	9b03      	ldr	r3, [sp, #12]
 800aeec:	3307      	adds	r3, #7
 800aeee:	f023 0307 	bic.w	r3, r3, #7
 800aef2:	3308      	adds	r3, #8
 800aef4:	9303      	str	r3, [sp, #12]
 800aef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aef8:	4433      	add	r3, r6
 800aefa:	9309      	str	r3, [sp, #36]	; 0x24
 800aefc:	e767      	b.n	800adce <_svfiprintf_r+0x4e>
 800aefe:	fb0c 3202 	mla	r2, ip, r2, r3
 800af02:	460c      	mov	r4, r1
 800af04:	2001      	movs	r0, #1
 800af06:	e7a5      	b.n	800ae54 <_svfiprintf_r+0xd4>
 800af08:	2300      	movs	r3, #0
 800af0a:	3401      	adds	r4, #1
 800af0c:	9305      	str	r3, [sp, #20]
 800af0e:	4619      	mov	r1, r3
 800af10:	f04f 0c0a 	mov.w	ip, #10
 800af14:	4620      	mov	r0, r4
 800af16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af1a:	3a30      	subs	r2, #48	; 0x30
 800af1c:	2a09      	cmp	r2, #9
 800af1e:	d903      	bls.n	800af28 <_svfiprintf_r+0x1a8>
 800af20:	2b00      	cmp	r3, #0
 800af22:	d0c5      	beq.n	800aeb0 <_svfiprintf_r+0x130>
 800af24:	9105      	str	r1, [sp, #20]
 800af26:	e7c3      	b.n	800aeb0 <_svfiprintf_r+0x130>
 800af28:	fb0c 2101 	mla	r1, ip, r1, r2
 800af2c:	4604      	mov	r4, r0
 800af2e:	2301      	movs	r3, #1
 800af30:	e7f0      	b.n	800af14 <_svfiprintf_r+0x194>
 800af32:	ab03      	add	r3, sp, #12
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	462a      	mov	r2, r5
 800af38:	4b0f      	ldr	r3, [pc, #60]	; (800af78 <_svfiprintf_r+0x1f8>)
 800af3a:	a904      	add	r1, sp, #16
 800af3c:	4638      	mov	r0, r7
 800af3e:	f7fd ffcb 	bl	8008ed8 <_printf_float>
 800af42:	1c42      	adds	r2, r0, #1
 800af44:	4606      	mov	r6, r0
 800af46:	d1d6      	bne.n	800aef6 <_svfiprintf_r+0x176>
 800af48:	89ab      	ldrh	r3, [r5, #12]
 800af4a:	065b      	lsls	r3, r3, #25
 800af4c:	f53f af2c 	bmi.w	800ada8 <_svfiprintf_r+0x28>
 800af50:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af52:	b01d      	add	sp, #116	; 0x74
 800af54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af58:	ab03      	add	r3, sp, #12
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	462a      	mov	r2, r5
 800af5e:	4b06      	ldr	r3, [pc, #24]	; (800af78 <_svfiprintf_r+0x1f8>)
 800af60:	a904      	add	r1, sp, #16
 800af62:	4638      	mov	r0, r7
 800af64:	f7fe fa5c 	bl	8009420 <_printf_i>
 800af68:	e7eb      	b.n	800af42 <_svfiprintf_r+0x1c2>
 800af6a:	bf00      	nop
 800af6c:	0800cee4 	.word	0x0800cee4
 800af70:	0800ceee 	.word	0x0800ceee
 800af74:	08008ed9 	.word	0x08008ed9
 800af78:	0800acc9 	.word	0x0800acc9
 800af7c:	0800ceea 	.word	0x0800ceea

0800af80 <_sbrk_r>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	4d06      	ldr	r5, [pc, #24]	; (800af9c <_sbrk_r+0x1c>)
 800af84:	2300      	movs	r3, #0
 800af86:	4604      	mov	r4, r0
 800af88:	4608      	mov	r0, r1
 800af8a:	602b      	str	r3, [r5, #0]
 800af8c:	f7f9 fb8c 	bl	80046a8 <_sbrk>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	d102      	bne.n	800af9a <_sbrk_r+0x1a>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	b103      	cbz	r3, 800af9a <_sbrk_r+0x1a>
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	20000df8 	.word	0x20000df8

0800afa0 <__assert_func>:
 800afa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afa2:	4614      	mov	r4, r2
 800afa4:	461a      	mov	r2, r3
 800afa6:	4b09      	ldr	r3, [pc, #36]	; (800afcc <__assert_func+0x2c>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4605      	mov	r5, r0
 800afac:	68d8      	ldr	r0, [r3, #12]
 800afae:	b14c      	cbz	r4, 800afc4 <__assert_func+0x24>
 800afb0:	4b07      	ldr	r3, [pc, #28]	; (800afd0 <__assert_func+0x30>)
 800afb2:	9100      	str	r1, [sp, #0]
 800afb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afb8:	4906      	ldr	r1, [pc, #24]	; (800afd4 <__assert_func+0x34>)
 800afba:	462b      	mov	r3, r5
 800afbc:	f000 f80e 	bl	800afdc <fiprintf>
 800afc0:	f000 faac 	bl	800b51c <abort>
 800afc4:	4b04      	ldr	r3, [pc, #16]	; (800afd8 <__assert_func+0x38>)
 800afc6:	461c      	mov	r4, r3
 800afc8:	e7f3      	b.n	800afb2 <__assert_func+0x12>
 800afca:	bf00      	nop
 800afcc:	20000040 	.word	0x20000040
 800afd0:	0800cef5 	.word	0x0800cef5
 800afd4:	0800cf02 	.word	0x0800cf02
 800afd8:	0800cf30 	.word	0x0800cf30

0800afdc <fiprintf>:
 800afdc:	b40e      	push	{r1, r2, r3}
 800afde:	b503      	push	{r0, r1, lr}
 800afe0:	4601      	mov	r1, r0
 800afe2:	ab03      	add	r3, sp, #12
 800afe4:	4805      	ldr	r0, [pc, #20]	; (800affc <fiprintf+0x20>)
 800afe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	f000 f897 	bl	800b120 <_vfiprintf_r>
 800aff2:	b002      	add	sp, #8
 800aff4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aff8:	b003      	add	sp, #12
 800affa:	4770      	bx	lr
 800affc:	20000040 	.word	0x20000040

0800b000 <__ascii_mbtowc>:
 800b000:	b082      	sub	sp, #8
 800b002:	b901      	cbnz	r1, 800b006 <__ascii_mbtowc+0x6>
 800b004:	a901      	add	r1, sp, #4
 800b006:	b142      	cbz	r2, 800b01a <__ascii_mbtowc+0x1a>
 800b008:	b14b      	cbz	r3, 800b01e <__ascii_mbtowc+0x1e>
 800b00a:	7813      	ldrb	r3, [r2, #0]
 800b00c:	600b      	str	r3, [r1, #0]
 800b00e:	7812      	ldrb	r2, [r2, #0]
 800b010:	1e10      	subs	r0, r2, #0
 800b012:	bf18      	it	ne
 800b014:	2001      	movne	r0, #1
 800b016:	b002      	add	sp, #8
 800b018:	4770      	bx	lr
 800b01a:	4610      	mov	r0, r2
 800b01c:	e7fb      	b.n	800b016 <__ascii_mbtowc+0x16>
 800b01e:	f06f 0001 	mvn.w	r0, #1
 800b022:	e7f8      	b.n	800b016 <__ascii_mbtowc+0x16>

0800b024 <memmove>:
 800b024:	4288      	cmp	r0, r1
 800b026:	b510      	push	{r4, lr}
 800b028:	eb01 0402 	add.w	r4, r1, r2
 800b02c:	d902      	bls.n	800b034 <memmove+0x10>
 800b02e:	4284      	cmp	r4, r0
 800b030:	4623      	mov	r3, r4
 800b032:	d807      	bhi.n	800b044 <memmove+0x20>
 800b034:	1e43      	subs	r3, r0, #1
 800b036:	42a1      	cmp	r1, r4
 800b038:	d008      	beq.n	800b04c <memmove+0x28>
 800b03a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b03e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b042:	e7f8      	b.n	800b036 <memmove+0x12>
 800b044:	4402      	add	r2, r0
 800b046:	4601      	mov	r1, r0
 800b048:	428a      	cmp	r2, r1
 800b04a:	d100      	bne.n	800b04e <memmove+0x2a>
 800b04c:	bd10      	pop	{r4, pc}
 800b04e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b052:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b056:	e7f7      	b.n	800b048 <memmove+0x24>

0800b058 <__malloc_lock>:
 800b058:	4801      	ldr	r0, [pc, #4]	; (800b060 <__malloc_lock+0x8>)
 800b05a:	f000 bc1f 	b.w	800b89c <__retarget_lock_acquire_recursive>
 800b05e:	bf00      	nop
 800b060:	20000dfc 	.word	0x20000dfc

0800b064 <__malloc_unlock>:
 800b064:	4801      	ldr	r0, [pc, #4]	; (800b06c <__malloc_unlock+0x8>)
 800b066:	f000 bc1a 	b.w	800b89e <__retarget_lock_release_recursive>
 800b06a:	bf00      	nop
 800b06c:	20000dfc 	.word	0x20000dfc

0800b070 <_realloc_r>:
 800b070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b074:	4680      	mov	r8, r0
 800b076:	4614      	mov	r4, r2
 800b078:	460e      	mov	r6, r1
 800b07a:	b921      	cbnz	r1, 800b086 <_realloc_r+0x16>
 800b07c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b080:	4611      	mov	r1, r2
 800b082:	f7ff bdad 	b.w	800abe0 <_malloc_r>
 800b086:	b92a      	cbnz	r2, 800b094 <_realloc_r+0x24>
 800b088:	f7ff fd3e 	bl	800ab08 <_free_r>
 800b08c:	4625      	mov	r5, r4
 800b08e:	4628      	mov	r0, r5
 800b090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b094:	f000 fc6a 	bl	800b96c <_malloc_usable_size_r>
 800b098:	4284      	cmp	r4, r0
 800b09a:	4607      	mov	r7, r0
 800b09c:	d802      	bhi.n	800b0a4 <_realloc_r+0x34>
 800b09e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0a2:	d812      	bhi.n	800b0ca <_realloc_r+0x5a>
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	f7ff fd9a 	bl	800abe0 <_malloc_r>
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d0ed      	beq.n	800b08e <_realloc_r+0x1e>
 800b0b2:	42bc      	cmp	r4, r7
 800b0b4:	4622      	mov	r2, r4
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	bf28      	it	cs
 800b0ba:	463a      	movcs	r2, r7
 800b0bc:	f7fd fe56 	bl	8008d6c <memcpy>
 800b0c0:	4631      	mov	r1, r6
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	f7ff fd20 	bl	800ab08 <_free_r>
 800b0c8:	e7e1      	b.n	800b08e <_realloc_r+0x1e>
 800b0ca:	4635      	mov	r5, r6
 800b0cc:	e7df      	b.n	800b08e <_realloc_r+0x1e>

0800b0ce <__sfputc_r>:
 800b0ce:	6893      	ldr	r3, [r2, #8]
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	b410      	push	{r4}
 800b0d6:	6093      	str	r3, [r2, #8]
 800b0d8:	da08      	bge.n	800b0ec <__sfputc_r+0x1e>
 800b0da:	6994      	ldr	r4, [r2, #24]
 800b0dc:	42a3      	cmp	r3, r4
 800b0de:	db01      	blt.n	800b0e4 <__sfputc_r+0x16>
 800b0e0:	290a      	cmp	r1, #10
 800b0e2:	d103      	bne.n	800b0ec <__sfputc_r+0x1e>
 800b0e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0e8:	f000 b94a 	b.w	800b380 <__swbuf_r>
 800b0ec:	6813      	ldr	r3, [r2, #0]
 800b0ee:	1c58      	adds	r0, r3, #1
 800b0f0:	6010      	str	r0, [r2, #0]
 800b0f2:	7019      	strb	r1, [r3, #0]
 800b0f4:	4608      	mov	r0, r1
 800b0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <__sfputs_r>:
 800b0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fe:	4606      	mov	r6, r0
 800b100:	460f      	mov	r7, r1
 800b102:	4614      	mov	r4, r2
 800b104:	18d5      	adds	r5, r2, r3
 800b106:	42ac      	cmp	r4, r5
 800b108:	d101      	bne.n	800b10e <__sfputs_r+0x12>
 800b10a:	2000      	movs	r0, #0
 800b10c:	e007      	b.n	800b11e <__sfputs_r+0x22>
 800b10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b112:	463a      	mov	r2, r7
 800b114:	4630      	mov	r0, r6
 800b116:	f7ff ffda 	bl	800b0ce <__sfputc_r>
 800b11a:	1c43      	adds	r3, r0, #1
 800b11c:	d1f3      	bne.n	800b106 <__sfputs_r+0xa>
 800b11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b120 <_vfiprintf_r>:
 800b120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	460d      	mov	r5, r1
 800b126:	b09d      	sub	sp, #116	; 0x74
 800b128:	4614      	mov	r4, r2
 800b12a:	4698      	mov	r8, r3
 800b12c:	4606      	mov	r6, r0
 800b12e:	b118      	cbz	r0, 800b138 <_vfiprintf_r+0x18>
 800b130:	6983      	ldr	r3, [r0, #24]
 800b132:	b90b      	cbnz	r3, 800b138 <_vfiprintf_r+0x18>
 800b134:	f000 fb14 	bl	800b760 <__sinit>
 800b138:	4b89      	ldr	r3, [pc, #548]	; (800b360 <_vfiprintf_r+0x240>)
 800b13a:	429d      	cmp	r5, r3
 800b13c:	d11b      	bne.n	800b176 <_vfiprintf_r+0x56>
 800b13e:	6875      	ldr	r5, [r6, #4]
 800b140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b142:	07d9      	lsls	r1, r3, #31
 800b144:	d405      	bmi.n	800b152 <_vfiprintf_r+0x32>
 800b146:	89ab      	ldrh	r3, [r5, #12]
 800b148:	059a      	lsls	r2, r3, #22
 800b14a:	d402      	bmi.n	800b152 <_vfiprintf_r+0x32>
 800b14c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b14e:	f000 fba5 	bl	800b89c <__retarget_lock_acquire_recursive>
 800b152:	89ab      	ldrh	r3, [r5, #12]
 800b154:	071b      	lsls	r3, r3, #28
 800b156:	d501      	bpl.n	800b15c <_vfiprintf_r+0x3c>
 800b158:	692b      	ldr	r3, [r5, #16]
 800b15a:	b9eb      	cbnz	r3, 800b198 <_vfiprintf_r+0x78>
 800b15c:	4629      	mov	r1, r5
 800b15e:	4630      	mov	r0, r6
 800b160:	f000 f96e 	bl	800b440 <__swsetup_r>
 800b164:	b1c0      	cbz	r0, 800b198 <_vfiprintf_r+0x78>
 800b166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b168:	07dc      	lsls	r4, r3, #31
 800b16a:	d50e      	bpl.n	800b18a <_vfiprintf_r+0x6a>
 800b16c:	f04f 30ff 	mov.w	r0, #4294967295
 800b170:	b01d      	add	sp, #116	; 0x74
 800b172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b176:	4b7b      	ldr	r3, [pc, #492]	; (800b364 <_vfiprintf_r+0x244>)
 800b178:	429d      	cmp	r5, r3
 800b17a:	d101      	bne.n	800b180 <_vfiprintf_r+0x60>
 800b17c:	68b5      	ldr	r5, [r6, #8]
 800b17e:	e7df      	b.n	800b140 <_vfiprintf_r+0x20>
 800b180:	4b79      	ldr	r3, [pc, #484]	; (800b368 <_vfiprintf_r+0x248>)
 800b182:	429d      	cmp	r5, r3
 800b184:	bf08      	it	eq
 800b186:	68f5      	ldreq	r5, [r6, #12]
 800b188:	e7da      	b.n	800b140 <_vfiprintf_r+0x20>
 800b18a:	89ab      	ldrh	r3, [r5, #12]
 800b18c:	0598      	lsls	r0, r3, #22
 800b18e:	d4ed      	bmi.n	800b16c <_vfiprintf_r+0x4c>
 800b190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b192:	f000 fb84 	bl	800b89e <__retarget_lock_release_recursive>
 800b196:	e7e9      	b.n	800b16c <_vfiprintf_r+0x4c>
 800b198:	2300      	movs	r3, #0
 800b19a:	9309      	str	r3, [sp, #36]	; 0x24
 800b19c:	2320      	movs	r3, #32
 800b19e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1a6:	2330      	movs	r3, #48	; 0x30
 800b1a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b36c <_vfiprintf_r+0x24c>
 800b1ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1b0:	f04f 0901 	mov.w	r9, #1
 800b1b4:	4623      	mov	r3, r4
 800b1b6:	469a      	mov	sl, r3
 800b1b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1bc:	b10a      	cbz	r2, 800b1c2 <_vfiprintf_r+0xa2>
 800b1be:	2a25      	cmp	r2, #37	; 0x25
 800b1c0:	d1f9      	bne.n	800b1b6 <_vfiprintf_r+0x96>
 800b1c2:	ebba 0b04 	subs.w	fp, sl, r4
 800b1c6:	d00b      	beq.n	800b1e0 <_vfiprintf_r+0xc0>
 800b1c8:	465b      	mov	r3, fp
 800b1ca:	4622      	mov	r2, r4
 800b1cc:	4629      	mov	r1, r5
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f7ff ff94 	bl	800b0fc <__sfputs_r>
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	f000 80aa 	beq.w	800b32e <_vfiprintf_r+0x20e>
 800b1da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1dc:	445a      	add	r2, fp
 800b1de:	9209      	str	r2, [sp, #36]	; 0x24
 800b1e0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f000 80a2 	beq.w	800b32e <_vfiprintf_r+0x20e>
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1f4:	f10a 0a01 	add.w	sl, sl, #1
 800b1f8:	9304      	str	r3, [sp, #16]
 800b1fa:	9307      	str	r3, [sp, #28]
 800b1fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b200:	931a      	str	r3, [sp, #104]	; 0x68
 800b202:	4654      	mov	r4, sl
 800b204:	2205      	movs	r2, #5
 800b206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b20a:	4858      	ldr	r0, [pc, #352]	; (800b36c <_vfiprintf_r+0x24c>)
 800b20c:	f7f4 fff0 	bl	80001f0 <memchr>
 800b210:	9a04      	ldr	r2, [sp, #16]
 800b212:	b9d8      	cbnz	r0, 800b24c <_vfiprintf_r+0x12c>
 800b214:	06d1      	lsls	r1, r2, #27
 800b216:	bf44      	itt	mi
 800b218:	2320      	movmi	r3, #32
 800b21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b21e:	0713      	lsls	r3, r2, #28
 800b220:	bf44      	itt	mi
 800b222:	232b      	movmi	r3, #43	; 0x2b
 800b224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b228:	f89a 3000 	ldrb.w	r3, [sl]
 800b22c:	2b2a      	cmp	r3, #42	; 0x2a
 800b22e:	d015      	beq.n	800b25c <_vfiprintf_r+0x13c>
 800b230:	9a07      	ldr	r2, [sp, #28]
 800b232:	4654      	mov	r4, sl
 800b234:	2000      	movs	r0, #0
 800b236:	f04f 0c0a 	mov.w	ip, #10
 800b23a:	4621      	mov	r1, r4
 800b23c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b240:	3b30      	subs	r3, #48	; 0x30
 800b242:	2b09      	cmp	r3, #9
 800b244:	d94e      	bls.n	800b2e4 <_vfiprintf_r+0x1c4>
 800b246:	b1b0      	cbz	r0, 800b276 <_vfiprintf_r+0x156>
 800b248:	9207      	str	r2, [sp, #28]
 800b24a:	e014      	b.n	800b276 <_vfiprintf_r+0x156>
 800b24c:	eba0 0308 	sub.w	r3, r0, r8
 800b250:	fa09 f303 	lsl.w	r3, r9, r3
 800b254:	4313      	orrs	r3, r2
 800b256:	9304      	str	r3, [sp, #16]
 800b258:	46a2      	mov	sl, r4
 800b25a:	e7d2      	b.n	800b202 <_vfiprintf_r+0xe2>
 800b25c:	9b03      	ldr	r3, [sp, #12]
 800b25e:	1d19      	adds	r1, r3, #4
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	9103      	str	r1, [sp, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	bfbb      	ittet	lt
 800b268:	425b      	neglt	r3, r3
 800b26a:	f042 0202 	orrlt.w	r2, r2, #2
 800b26e:	9307      	strge	r3, [sp, #28]
 800b270:	9307      	strlt	r3, [sp, #28]
 800b272:	bfb8      	it	lt
 800b274:	9204      	strlt	r2, [sp, #16]
 800b276:	7823      	ldrb	r3, [r4, #0]
 800b278:	2b2e      	cmp	r3, #46	; 0x2e
 800b27a:	d10c      	bne.n	800b296 <_vfiprintf_r+0x176>
 800b27c:	7863      	ldrb	r3, [r4, #1]
 800b27e:	2b2a      	cmp	r3, #42	; 0x2a
 800b280:	d135      	bne.n	800b2ee <_vfiprintf_r+0x1ce>
 800b282:	9b03      	ldr	r3, [sp, #12]
 800b284:	1d1a      	adds	r2, r3, #4
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	9203      	str	r2, [sp, #12]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bfb8      	it	lt
 800b28e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b292:	3402      	adds	r4, #2
 800b294:	9305      	str	r3, [sp, #20]
 800b296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b37c <_vfiprintf_r+0x25c>
 800b29a:	7821      	ldrb	r1, [r4, #0]
 800b29c:	2203      	movs	r2, #3
 800b29e:	4650      	mov	r0, sl
 800b2a0:	f7f4 ffa6 	bl	80001f0 <memchr>
 800b2a4:	b140      	cbz	r0, 800b2b8 <_vfiprintf_r+0x198>
 800b2a6:	2340      	movs	r3, #64	; 0x40
 800b2a8:	eba0 000a 	sub.w	r0, r0, sl
 800b2ac:	fa03 f000 	lsl.w	r0, r3, r0
 800b2b0:	9b04      	ldr	r3, [sp, #16]
 800b2b2:	4303      	orrs	r3, r0
 800b2b4:	3401      	adds	r4, #1
 800b2b6:	9304      	str	r3, [sp, #16]
 800b2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2bc:	482c      	ldr	r0, [pc, #176]	; (800b370 <_vfiprintf_r+0x250>)
 800b2be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2c2:	2206      	movs	r2, #6
 800b2c4:	f7f4 ff94 	bl	80001f0 <memchr>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	d03f      	beq.n	800b34c <_vfiprintf_r+0x22c>
 800b2cc:	4b29      	ldr	r3, [pc, #164]	; (800b374 <_vfiprintf_r+0x254>)
 800b2ce:	bb1b      	cbnz	r3, 800b318 <_vfiprintf_r+0x1f8>
 800b2d0:	9b03      	ldr	r3, [sp, #12]
 800b2d2:	3307      	adds	r3, #7
 800b2d4:	f023 0307 	bic.w	r3, r3, #7
 800b2d8:	3308      	adds	r3, #8
 800b2da:	9303      	str	r3, [sp, #12]
 800b2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2de:	443b      	add	r3, r7
 800b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e2:	e767      	b.n	800b1b4 <_vfiprintf_r+0x94>
 800b2e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2e8:	460c      	mov	r4, r1
 800b2ea:	2001      	movs	r0, #1
 800b2ec:	e7a5      	b.n	800b23a <_vfiprintf_r+0x11a>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	3401      	adds	r4, #1
 800b2f2:	9305      	str	r3, [sp, #20]
 800b2f4:	4619      	mov	r1, r3
 800b2f6:	f04f 0c0a 	mov.w	ip, #10
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b300:	3a30      	subs	r2, #48	; 0x30
 800b302:	2a09      	cmp	r2, #9
 800b304:	d903      	bls.n	800b30e <_vfiprintf_r+0x1ee>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0c5      	beq.n	800b296 <_vfiprintf_r+0x176>
 800b30a:	9105      	str	r1, [sp, #20]
 800b30c:	e7c3      	b.n	800b296 <_vfiprintf_r+0x176>
 800b30e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b312:	4604      	mov	r4, r0
 800b314:	2301      	movs	r3, #1
 800b316:	e7f0      	b.n	800b2fa <_vfiprintf_r+0x1da>
 800b318:	ab03      	add	r3, sp, #12
 800b31a:	9300      	str	r3, [sp, #0]
 800b31c:	462a      	mov	r2, r5
 800b31e:	4b16      	ldr	r3, [pc, #88]	; (800b378 <_vfiprintf_r+0x258>)
 800b320:	a904      	add	r1, sp, #16
 800b322:	4630      	mov	r0, r6
 800b324:	f7fd fdd8 	bl	8008ed8 <_printf_float>
 800b328:	4607      	mov	r7, r0
 800b32a:	1c78      	adds	r0, r7, #1
 800b32c:	d1d6      	bne.n	800b2dc <_vfiprintf_r+0x1bc>
 800b32e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b330:	07d9      	lsls	r1, r3, #31
 800b332:	d405      	bmi.n	800b340 <_vfiprintf_r+0x220>
 800b334:	89ab      	ldrh	r3, [r5, #12]
 800b336:	059a      	lsls	r2, r3, #22
 800b338:	d402      	bmi.n	800b340 <_vfiprintf_r+0x220>
 800b33a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b33c:	f000 faaf 	bl	800b89e <__retarget_lock_release_recursive>
 800b340:	89ab      	ldrh	r3, [r5, #12]
 800b342:	065b      	lsls	r3, r3, #25
 800b344:	f53f af12 	bmi.w	800b16c <_vfiprintf_r+0x4c>
 800b348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b34a:	e711      	b.n	800b170 <_vfiprintf_r+0x50>
 800b34c:	ab03      	add	r3, sp, #12
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	462a      	mov	r2, r5
 800b352:	4b09      	ldr	r3, [pc, #36]	; (800b378 <_vfiprintf_r+0x258>)
 800b354:	a904      	add	r1, sp, #16
 800b356:	4630      	mov	r0, r6
 800b358:	f7fe f862 	bl	8009420 <_printf_i>
 800b35c:	e7e4      	b.n	800b328 <_vfiprintf_r+0x208>
 800b35e:	bf00      	nop
 800b360:	0800d05c 	.word	0x0800d05c
 800b364:	0800d07c 	.word	0x0800d07c
 800b368:	0800d03c 	.word	0x0800d03c
 800b36c:	0800cee4 	.word	0x0800cee4
 800b370:	0800ceee 	.word	0x0800ceee
 800b374:	08008ed9 	.word	0x08008ed9
 800b378:	0800b0fd 	.word	0x0800b0fd
 800b37c:	0800ceea 	.word	0x0800ceea

0800b380 <__swbuf_r>:
 800b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b382:	460e      	mov	r6, r1
 800b384:	4614      	mov	r4, r2
 800b386:	4605      	mov	r5, r0
 800b388:	b118      	cbz	r0, 800b392 <__swbuf_r+0x12>
 800b38a:	6983      	ldr	r3, [r0, #24]
 800b38c:	b90b      	cbnz	r3, 800b392 <__swbuf_r+0x12>
 800b38e:	f000 f9e7 	bl	800b760 <__sinit>
 800b392:	4b21      	ldr	r3, [pc, #132]	; (800b418 <__swbuf_r+0x98>)
 800b394:	429c      	cmp	r4, r3
 800b396:	d12b      	bne.n	800b3f0 <__swbuf_r+0x70>
 800b398:	686c      	ldr	r4, [r5, #4]
 800b39a:	69a3      	ldr	r3, [r4, #24]
 800b39c:	60a3      	str	r3, [r4, #8]
 800b39e:	89a3      	ldrh	r3, [r4, #12]
 800b3a0:	071a      	lsls	r2, r3, #28
 800b3a2:	d52f      	bpl.n	800b404 <__swbuf_r+0x84>
 800b3a4:	6923      	ldr	r3, [r4, #16]
 800b3a6:	b36b      	cbz	r3, 800b404 <__swbuf_r+0x84>
 800b3a8:	6923      	ldr	r3, [r4, #16]
 800b3aa:	6820      	ldr	r0, [r4, #0]
 800b3ac:	1ac0      	subs	r0, r0, r3
 800b3ae:	6963      	ldr	r3, [r4, #20]
 800b3b0:	b2f6      	uxtb	r6, r6
 800b3b2:	4283      	cmp	r3, r0
 800b3b4:	4637      	mov	r7, r6
 800b3b6:	dc04      	bgt.n	800b3c2 <__swbuf_r+0x42>
 800b3b8:	4621      	mov	r1, r4
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f000 f93c 	bl	800b638 <_fflush_r>
 800b3c0:	bb30      	cbnz	r0, 800b410 <__swbuf_r+0x90>
 800b3c2:	68a3      	ldr	r3, [r4, #8]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	60a3      	str	r3, [r4, #8]
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	1c5a      	adds	r2, r3, #1
 800b3cc:	6022      	str	r2, [r4, #0]
 800b3ce:	701e      	strb	r6, [r3, #0]
 800b3d0:	6963      	ldr	r3, [r4, #20]
 800b3d2:	3001      	adds	r0, #1
 800b3d4:	4283      	cmp	r3, r0
 800b3d6:	d004      	beq.n	800b3e2 <__swbuf_r+0x62>
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	07db      	lsls	r3, r3, #31
 800b3dc:	d506      	bpl.n	800b3ec <__swbuf_r+0x6c>
 800b3de:	2e0a      	cmp	r6, #10
 800b3e0:	d104      	bne.n	800b3ec <__swbuf_r+0x6c>
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	4628      	mov	r0, r5
 800b3e6:	f000 f927 	bl	800b638 <_fflush_r>
 800b3ea:	b988      	cbnz	r0, 800b410 <__swbuf_r+0x90>
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3f0:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <__swbuf_r+0x9c>)
 800b3f2:	429c      	cmp	r4, r3
 800b3f4:	d101      	bne.n	800b3fa <__swbuf_r+0x7a>
 800b3f6:	68ac      	ldr	r4, [r5, #8]
 800b3f8:	e7cf      	b.n	800b39a <__swbuf_r+0x1a>
 800b3fa:	4b09      	ldr	r3, [pc, #36]	; (800b420 <__swbuf_r+0xa0>)
 800b3fc:	429c      	cmp	r4, r3
 800b3fe:	bf08      	it	eq
 800b400:	68ec      	ldreq	r4, [r5, #12]
 800b402:	e7ca      	b.n	800b39a <__swbuf_r+0x1a>
 800b404:	4621      	mov	r1, r4
 800b406:	4628      	mov	r0, r5
 800b408:	f000 f81a 	bl	800b440 <__swsetup_r>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d0cb      	beq.n	800b3a8 <__swbuf_r+0x28>
 800b410:	f04f 37ff 	mov.w	r7, #4294967295
 800b414:	e7ea      	b.n	800b3ec <__swbuf_r+0x6c>
 800b416:	bf00      	nop
 800b418:	0800d05c 	.word	0x0800d05c
 800b41c:	0800d07c 	.word	0x0800d07c
 800b420:	0800d03c 	.word	0x0800d03c

0800b424 <__ascii_wctomb>:
 800b424:	b149      	cbz	r1, 800b43a <__ascii_wctomb+0x16>
 800b426:	2aff      	cmp	r2, #255	; 0xff
 800b428:	bf85      	ittet	hi
 800b42a:	238a      	movhi	r3, #138	; 0x8a
 800b42c:	6003      	strhi	r3, [r0, #0]
 800b42e:	700a      	strbls	r2, [r1, #0]
 800b430:	f04f 30ff 	movhi.w	r0, #4294967295
 800b434:	bf98      	it	ls
 800b436:	2001      	movls	r0, #1
 800b438:	4770      	bx	lr
 800b43a:	4608      	mov	r0, r1
 800b43c:	4770      	bx	lr
	...

0800b440 <__swsetup_r>:
 800b440:	4b32      	ldr	r3, [pc, #200]	; (800b50c <__swsetup_r+0xcc>)
 800b442:	b570      	push	{r4, r5, r6, lr}
 800b444:	681d      	ldr	r5, [r3, #0]
 800b446:	4606      	mov	r6, r0
 800b448:	460c      	mov	r4, r1
 800b44a:	b125      	cbz	r5, 800b456 <__swsetup_r+0x16>
 800b44c:	69ab      	ldr	r3, [r5, #24]
 800b44e:	b913      	cbnz	r3, 800b456 <__swsetup_r+0x16>
 800b450:	4628      	mov	r0, r5
 800b452:	f000 f985 	bl	800b760 <__sinit>
 800b456:	4b2e      	ldr	r3, [pc, #184]	; (800b510 <__swsetup_r+0xd0>)
 800b458:	429c      	cmp	r4, r3
 800b45a:	d10f      	bne.n	800b47c <__swsetup_r+0x3c>
 800b45c:	686c      	ldr	r4, [r5, #4]
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b464:	0719      	lsls	r1, r3, #28
 800b466:	d42c      	bmi.n	800b4c2 <__swsetup_r+0x82>
 800b468:	06dd      	lsls	r5, r3, #27
 800b46a:	d411      	bmi.n	800b490 <__swsetup_r+0x50>
 800b46c:	2309      	movs	r3, #9
 800b46e:	6033      	str	r3, [r6, #0]
 800b470:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b474:	81a3      	strh	r3, [r4, #12]
 800b476:	f04f 30ff 	mov.w	r0, #4294967295
 800b47a:	e03e      	b.n	800b4fa <__swsetup_r+0xba>
 800b47c:	4b25      	ldr	r3, [pc, #148]	; (800b514 <__swsetup_r+0xd4>)
 800b47e:	429c      	cmp	r4, r3
 800b480:	d101      	bne.n	800b486 <__swsetup_r+0x46>
 800b482:	68ac      	ldr	r4, [r5, #8]
 800b484:	e7eb      	b.n	800b45e <__swsetup_r+0x1e>
 800b486:	4b24      	ldr	r3, [pc, #144]	; (800b518 <__swsetup_r+0xd8>)
 800b488:	429c      	cmp	r4, r3
 800b48a:	bf08      	it	eq
 800b48c:	68ec      	ldreq	r4, [r5, #12]
 800b48e:	e7e6      	b.n	800b45e <__swsetup_r+0x1e>
 800b490:	0758      	lsls	r0, r3, #29
 800b492:	d512      	bpl.n	800b4ba <__swsetup_r+0x7a>
 800b494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b496:	b141      	cbz	r1, 800b4aa <__swsetup_r+0x6a>
 800b498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b49c:	4299      	cmp	r1, r3
 800b49e:	d002      	beq.n	800b4a6 <__swsetup_r+0x66>
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	f7ff fb31 	bl	800ab08 <_free_r>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b4aa:	89a3      	ldrh	r3, [r4, #12]
 800b4ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4b0:	81a3      	strh	r3, [r4, #12]
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	6063      	str	r3, [r4, #4]
 800b4b6:	6923      	ldr	r3, [r4, #16]
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	f043 0308 	orr.w	r3, r3, #8
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	6923      	ldr	r3, [r4, #16]
 800b4c4:	b94b      	cbnz	r3, 800b4da <__swsetup_r+0x9a>
 800b4c6:	89a3      	ldrh	r3, [r4, #12]
 800b4c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4d0:	d003      	beq.n	800b4da <__swsetup_r+0x9a>
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	f000 fa09 	bl	800b8ec <__smakebuf_r>
 800b4da:	89a0      	ldrh	r0, [r4, #12]
 800b4dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4e0:	f010 0301 	ands.w	r3, r0, #1
 800b4e4:	d00a      	beq.n	800b4fc <__swsetup_r+0xbc>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60a3      	str	r3, [r4, #8]
 800b4ea:	6963      	ldr	r3, [r4, #20]
 800b4ec:	425b      	negs	r3, r3
 800b4ee:	61a3      	str	r3, [r4, #24]
 800b4f0:	6923      	ldr	r3, [r4, #16]
 800b4f2:	b943      	cbnz	r3, 800b506 <__swsetup_r+0xc6>
 800b4f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4f8:	d1ba      	bne.n	800b470 <__swsetup_r+0x30>
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}
 800b4fc:	0781      	lsls	r1, r0, #30
 800b4fe:	bf58      	it	pl
 800b500:	6963      	ldrpl	r3, [r4, #20]
 800b502:	60a3      	str	r3, [r4, #8]
 800b504:	e7f4      	b.n	800b4f0 <__swsetup_r+0xb0>
 800b506:	2000      	movs	r0, #0
 800b508:	e7f7      	b.n	800b4fa <__swsetup_r+0xba>
 800b50a:	bf00      	nop
 800b50c:	20000040 	.word	0x20000040
 800b510:	0800d05c 	.word	0x0800d05c
 800b514:	0800d07c 	.word	0x0800d07c
 800b518:	0800d03c 	.word	0x0800d03c

0800b51c <abort>:
 800b51c:	b508      	push	{r3, lr}
 800b51e:	2006      	movs	r0, #6
 800b520:	f000 fa54 	bl	800b9cc <raise>
 800b524:	2001      	movs	r0, #1
 800b526:	f7f9 f88f 	bl	8004648 <_exit>
	...

0800b52c <__sflush_r>:
 800b52c:	898a      	ldrh	r2, [r1, #12]
 800b52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b532:	4605      	mov	r5, r0
 800b534:	0710      	lsls	r0, r2, #28
 800b536:	460c      	mov	r4, r1
 800b538:	d458      	bmi.n	800b5ec <__sflush_r+0xc0>
 800b53a:	684b      	ldr	r3, [r1, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	dc05      	bgt.n	800b54c <__sflush_r+0x20>
 800b540:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b542:	2b00      	cmp	r3, #0
 800b544:	dc02      	bgt.n	800b54c <__sflush_r+0x20>
 800b546:	2000      	movs	r0, #0
 800b548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b54c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b54e:	2e00      	cmp	r6, #0
 800b550:	d0f9      	beq.n	800b546 <__sflush_r+0x1a>
 800b552:	2300      	movs	r3, #0
 800b554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b558:	682f      	ldr	r7, [r5, #0]
 800b55a:	602b      	str	r3, [r5, #0]
 800b55c:	d032      	beq.n	800b5c4 <__sflush_r+0x98>
 800b55e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b560:	89a3      	ldrh	r3, [r4, #12]
 800b562:	075a      	lsls	r2, r3, #29
 800b564:	d505      	bpl.n	800b572 <__sflush_r+0x46>
 800b566:	6863      	ldr	r3, [r4, #4]
 800b568:	1ac0      	subs	r0, r0, r3
 800b56a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b56c:	b10b      	cbz	r3, 800b572 <__sflush_r+0x46>
 800b56e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b570:	1ac0      	subs	r0, r0, r3
 800b572:	2300      	movs	r3, #0
 800b574:	4602      	mov	r2, r0
 800b576:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b578:	6a21      	ldr	r1, [r4, #32]
 800b57a:	4628      	mov	r0, r5
 800b57c:	47b0      	blx	r6
 800b57e:	1c43      	adds	r3, r0, #1
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	d106      	bne.n	800b592 <__sflush_r+0x66>
 800b584:	6829      	ldr	r1, [r5, #0]
 800b586:	291d      	cmp	r1, #29
 800b588:	d82c      	bhi.n	800b5e4 <__sflush_r+0xb8>
 800b58a:	4a2a      	ldr	r2, [pc, #168]	; (800b634 <__sflush_r+0x108>)
 800b58c:	40ca      	lsrs	r2, r1
 800b58e:	07d6      	lsls	r6, r2, #31
 800b590:	d528      	bpl.n	800b5e4 <__sflush_r+0xb8>
 800b592:	2200      	movs	r2, #0
 800b594:	6062      	str	r2, [r4, #4]
 800b596:	04d9      	lsls	r1, r3, #19
 800b598:	6922      	ldr	r2, [r4, #16]
 800b59a:	6022      	str	r2, [r4, #0]
 800b59c:	d504      	bpl.n	800b5a8 <__sflush_r+0x7c>
 800b59e:	1c42      	adds	r2, r0, #1
 800b5a0:	d101      	bne.n	800b5a6 <__sflush_r+0x7a>
 800b5a2:	682b      	ldr	r3, [r5, #0]
 800b5a4:	b903      	cbnz	r3, 800b5a8 <__sflush_r+0x7c>
 800b5a6:	6560      	str	r0, [r4, #84]	; 0x54
 800b5a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5aa:	602f      	str	r7, [r5, #0]
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	d0ca      	beq.n	800b546 <__sflush_r+0x1a>
 800b5b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5b4:	4299      	cmp	r1, r3
 800b5b6:	d002      	beq.n	800b5be <__sflush_r+0x92>
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f7ff faa5 	bl	800ab08 <_free_r>
 800b5be:	2000      	movs	r0, #0
 800b5c0:	6360      	str	r0, [r4, #52]	; 0x34
 800b5c2:	e7c1      	b.n	800b548 <__sflush_r+0x1c>
 800b5c4:	6a21      	ldr	r1, [r4, #32]
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	47b0      	blx	r6
 800b5cc:	1c41      	adds	r1, r0, #1
 800b5ce:	d1c7      	bne.n	800b560 <__sflush_r+0x34>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d0c4      	beq.n	800b560 <__sflush_r+0x34>
 800b5d6:	2b1d      	cmp	r3, #29
 800b5d8:	d001      	beq.n	800b5de <__sflush_r+0xb2>
 800b5da:	2b16      	cmp	r3, #22
 800b5dc:	d101      	bne.n	800b5e2 <__sflush_r+0xb6>
 800b5de:	602f      	str	r7, [r5, #0]
 800b5e0:	e7b1      	b.n	800b546 <__sflush_r+0x1a>
 800b5e2:	89a3      	ldrh	r3, [r4, #12]
 800b5e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e8:	81a3      	strh	r3, [r4, #12]
 800b5ea:	e7ad      	b.n	800b548 <__sflush_r+0x1c>
 800b5ec:	690f      	ldr	r7, [r1, #16]
 800b5ee:	2f00      	cmp	r7, #0
 800b5f0:	d0a9      	beq.n	800b546 <__sflush_r+0x1a>
 800b5f2:	0793      	lsls	r3, r2, #30
 800b5f4:	680e      	ldr	r6, [r1, #0]
 800b5f6:	bf08      	it	eq
 800b5f8:	694b      	ldreq	r3, [r1, #20]
 800b5fa:	600f      	str	r7, [r1, #0]
 800b5fc:	bf18      	it	ne
 800b5fe:	2300      	movne	r3, #0
 800b600:	eba6 0807 	sub.w	r8, r6, r7
 800b604:	608b      	str	r3, [r1, #8]
 800b606:	f1b8 0f00 	cmp.w	r8, #0
 800b60a:	dd9c      	ble.n	800b546 <__sflush_r+0x1a>
 800b60c:	6a21      	ldr	r1, [r4, #32]
 800b60e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b610:	4643      	mov	r3, r8
 800b612:	463a      	mov	r2, r7
 800b614:	4628      	mov	r0, r5
 800b616:	47b0      	blx	r6
 800b618:	2800      	cmp	r0, #0
 800b61a:	dc06      	bgt.n	800b62a <__sflush_r+0xfe>
 800b61c:	89a3      	ldrh	r3, [r4, #12]
 800b61e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b622:	81a3      	strh	r3, [r4, #12]
 800b624:	f04f 30ff 	mov.w	r0, #4294967295
 800b628:	e78e      	b.n	800b548 <__sflush_r+0x1c>
 800b62a:	4407      	add	r7, r0
 800b62c:	eba8 0800 	sub.w	r8, r8, r0
 800b630:	e7e9      	b.n	800b606 <__sflush_r+0xda>
 800b632:	bf00      	nop
 800b634:	20400001 	.word	0x20400001

0800b638 <_fflush_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	690b      	ldr	r3, [r1, #16]
 800b63c:	4605      	mov	r5, r0
 800b63e:	460c      	mov	r4, r1
 800b640:	b913      	cbnz	r3, 800b648 <_fflush_r+0x10>
 800b642:	2500      	movs	r5, #0
 800b644:	4628      	mov	r0, r5
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	b118      	cbz	r0, 800b652 <_fflush_r+0x1a>
 800b64a:	6983      	ldr	r3, [r0, #24]
 800b64c:	b90b      	cbnz	r3, 800b652 <_fflush_r+0x1a>
 800b64e:	f000 f887 	bl	800b760 <__sinit>
 800b652:	4b14      	ldr	r3, [pc, #80]	; (800b6a4 <_fflush_r+0x6c>)
 800b654:	429c      	cmp	r4, r3
 800b656:	d11b      	bne.n	800b690 <_fflush_r+0x58>
 800b658:	686c      	ldr	r4, [r5, #4]
 800b65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d0ef      	beq.n	800b642 <_fflush_r+0xa>
 800b662:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b664:	07d0      	lsls	r0, r2, #31
 800b666:	d404      	bmi.n	800b672 <_fflush_r+0x3a>
 800b668:	0599      	lsls	r1, r3, #22
 800b66a:	d402      	bmi.n	800b672 <_fflush_r+0x3a>
 800b66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b66e:	f000 f915 	bl	800b89c <__retarget_lock_acquire_recursive>
 800b672:	4628      	mov	r0, r5
 800b674:	4621      	mov	r1, r4
 800b676:	f7ff ff59 	bl	800b52c <__sflush_r>
 800b67a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b67c:	07da      	lsls	r2, r3, #31
 800b67e:	4605      	mov	r5, r0
 800b680:	d4e0      	bmi.n	800b644 <_fflush_r+0xc>
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	059b      	lsls	r3, r3, #22
 800b686:	d4dd      	bmi.n	800b644 <_fflush_r+0xc>
 800b688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b68a:	f000 f908 	bl	800b89e <__retarget_lock_release_recursive>
 800b68e:	e7d9      	b.n	800b644 <_fflush_r+0xc>
 800b690:	4b05      	ldr	r3, [pc, #20]	; (800b6a8 <_fflush_r+0x70>)
 800b692:	429c      	cmp	r4, r3
 800b694:	d101      	bne.n	800b69a <_fflush_r+0x62>
 800b696:	68ac      	ldr	r4, [r5, #8]
 800b698:	e7df      	b.n	800b65a <_fflush_r+0x22>
 800b69a:	4b04      	ldr	r3, [pc, #16]	; (800b6ac <_fflush_r+0x74>)
 800b69c:	429c      	cmp	r4, r3
 800b69e:	bf08      	it	eq
 800b6a0:	68ec      	ldreq	r4, [r5, #12]
 800b6a2:	e7da      	b.n	800b65a <_fflush_r+0x22>
 800b6a4:	0800d05c 	.word	0x0800d05c
 800b6a8:	0800d07c 	.word	0x0800d07c
 800b6ac:	0800d03c 	.word	0x0800d03c

0800b6b0 <std>:
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b6ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6be:	6083      	str	r3, [r0, #8]
 800b6c0:	8181      	strh	r1, [r0, #12]
 800b6c2:	6643      	str	r3, [r0, #100]	; 0x64
 800b6c4:	81c2      	strh	r2, [r0, #14]
 800b6c6:	6183      	str	r3, [r0, #24]
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	2208      	movs	r2, #8
 800b6cc:	305c      	adds	r0, #92	; 0x5c
 800b6ce:	f7fd fb5b 	bl	8008d88 <memset>
 800b6d2:	4b05      	ldr	r3, [pc, #20]	; (800b6e8 <std+0x38>)
 800b6d4:	6263      	str	r3, [r4, #36]	; 0x24
 800b6d6:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <std+0x3c>)
 800b6d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6da:	4b05      	ldr	r3, [pc, #20]	; (800b6f0 <std+0x40>)
 800b6dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6de:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <std+0x44>)
 800b6e0:	6224      	str	r4, [r4, #32]
 800b6e2:	6323      	str	r3, [r4, #48]	; 0x30
 800b6e4:	bd10      	pop	{r4, pc}
 800b6e6:	bf00      	nop
 800b6e8:	0800ba05 	.word	0x0800ba05
 800b6ec:	0800ba27 	.word	0x0800ba27
 800b6f0:	0800ba5f 	.word	0x0800ba5f
 800b6f4:	0800ba83 	.word	0x0800ba83

0800b6f8 <_cleanup_r>:
 800b6f8:	4901      	ldr	r1, [pc, #4]	; (800b700 <_cleanup_r+0x8>)
 800b6fa:	f000 b8af 	b.w	800b85c <_fwalk_reent>
 800b6fe:	bf00      	nop
 800b700:	0800b639 	.word	0x0800b639

0800b704 <__sfmoreglue>:
 800b704:	b570      	push	{r4, r5, r6, lr}
 800b706:	2268      	movs	r2, #104	; 0x68
 800b708:	1e4d      	subs	r5, r1, #1
 800b70a:	4355      	muls	r5, r2
 800b70c:	460e      	mov	r6, r1
 800b70e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b712:	f7ff fa65 	bl	800abe0 <_malloc_r>
 800b716:	4604      	mov	r4, r0
 800b718:	b140      	cbz	r0, 800b72c <__sfmoreglue+0x28>
 800b71a:	2100      	movs	r1, #0
 800b71c:	e9c0 1600 	strd	r1, r6, [r0]
 800b720:	300c      	adds	r0, #12
 800b722:	60a0      	str	r0, [r4, #8]
 800b724:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b728:	f7fd fb2e 	bl	8008d88 <memset>
 800b72c:	4620      	mov	r0, r4
 800b72e:	bd70      	pop	{r4, r5, r6, pc}

0800b730 <__sfp_lock_acquire>:
 800b730:	4801      	ldr	r0, [pc, #4]	; (800b738 <__sfp_lock_acquire+0x8>)
 800b732:	f000 b8b3 	b.w	800b89c <__retarget_lock_acquire_recursive>
 800b736:	bf00      	nop
 800b738:	20000dfd 	.word	0x20000dfd

0800b73c <__sfp_lock_release>:
 800b73c:	4801      	ldr	r0, [pc, #4]	; (800b744 <__sfp_lock_release+0x8>)
 800b73e:	f000 b8ae 	b.w	800b89e <__retarget_lock_release_recursive>
 800b742:	bf00      	nop
 800b744:	20000dfd 	.word	0x20000dfd

0800b748 <__sinit_lock_acquire>:
 800b748:	4801      	ldr	r0, [pc, #4]	; (800b750 <__sinit_lock_acquire+0x8>)
 800b74a:	f000 b8a7 	b.w	800b89c <__retarget_lock_acquire_recursive>
 800b74e:	bf00      	nop
 800b750:	20000dfe 	.word	0x20000dfe

0800b754 <__sinit_lock_release>:
 800b754:	4801      	ldr	r0, [pc, #4]	; (800b75c <__sinit_lock_release+0x8>)
 800b756:	f000 b8a2 	b.w	800b89e <__retarget_lock_release_recursive>
 800b75a:	bf00      	nop
 800b75c:	20000dfe 	.word	0x20000dfe

0800b760 <__sinit>:
 800b760:	b510      	push	{r4, lr}
 800b762:	4604      	mov	r4, r0
 800b764:	f7ff fff0 	bl	800b748 <__sinit_lock_acquire>
 800b768:	69a3      	ldr	r3, [r4, #24]
 800b76a:	b11b      	cbz	r3, 800b774 <__sinit+0x14>
 800b76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b770:	f7ff bff0 	b.w	800b754 <__sinit_lock_release>
 800b774:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b778:	6523      	str	r3, [r4, #80]	; 0x50
 800b77a:	4b13      	ldr	r3, [pc, #76]	; (800b7c8 <__sinit+0x68>)
 800b77c:	4a13      	ldr	r2, [pc, #76]	; (800b7cc <__sinit+0x6c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	62a2      	str	r2, [r4, #40]	; 0x28
 800b782:	42a3      	cmp	r3, r4
 800b784:	bf04      	itt	eq
 800b786:	2301      	moveq	r3, #1
 800b788:	61a3      	streq	r3, [r4, #24]
 800b78a:	4620      	mov	r0, r4
 800b78c:	f000 f820 	bl	800b7d0 <__sfp>
 800b790:	6060      	str	r0, [r4, #4]
 800b792:	4620      	mov	r0, r4
 800b794:	f000 f81c 	bl	800b7d0 <__sfp>
 800b798:	60a0      	str	r0, [r4, #8]
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 f818 	bl	800b7d0 <__sfp>
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	60e0      	str	r0, [r4, #12]
 800b7a4:	2104      	movs	r1, #4
 800b7a6:	6860      	ldr	r0, [r4, #4]
 800b7a8:	f7ff ff82 	bl	800b6b0 <std>
 800b7ac:	68a0      	ldr	r0, [r4, #8]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	2109      	movs	r1, #9
 800b7b2:	f7ff ff7d 	bl	800b6b0 <std>
 800b7b6:	68e0      	ldr	r0, [r4, #12]
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	2112      	movs	r1, #18
 800b7bc:	f7ff ff78 	bl	800b6b0 <std>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	61a3      	str	r3, [r4, #24]
 800b7c4:	e7d2      	b.n	800b76c <__sinit+0xc>
 800b7c6:	bf00      	nop
 800b7c8:	0800ccc0 	.word	0x0800ccc0
 800b7cc:	0800b6f9 	.word	0x0800b6f9

0800b7d0 <__sfp>:
 800b7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7d2:	4607      	mov	r7, r0
 800b7d4:	f7ff ffac 	bl	800b730 <__sfp_lock_acquire>
 800b7d8:	4b1e      	ldr	r3, [pc, #120]	; (800b854 <__sfp+0x84>)
 800b7da:	681e      	ldr	r6, [r3, #0]
 800b7dc:	69b3      	ldr	r3, [r6, #24]
 800b7de:	b913      	cbnz	r3, 800b7e6 <__sfp+0x16>
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f7ff ffbd 	bl	800b760 <__sinit>
 800b7e6:	3648      	adds	r6, #72	; 0x48
 800b7e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	d503      	bpl.n	800b7f8 <__sfp+0x28>
 800b7f0:	6833      	ldr	r3, [r6, #0]
 800b7f2:	b30b      	cbz	r3, 800b838 <__sfp+0x68>
 800b7f4:	6836      	ldr	r6, [r6, #0]
 800b7f6:	e7f7      	b.n	800b7e8 <__sfp+0x18>
 800b7f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7fc:	b9d5      	cbnz	r5, 800b834 <__sfp+0x64>
 800b7fe:	4b16      	ldr	r3, [pc, #88]	; (800b858 <__sfp+0x88>)
 800b800:	60e3      	str	r3, [r4, #12]
 800b802:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b806:	6665      	str	r5, [r4, #100]	; 0x64
 800b808:	f000 f847 	bl	800b89a <__retarget_lock_init_recursive>
 800b80c:	f7ff ff96 	bl	800b73c <__sfp_lock_release>
 800b810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b818:	6025      	str	r5, [r4, #0]
 800b81a:	61a5      	str	r5, [r4, #24]
 800b81c:	2208      	movs	r2, #8
 800b81e:	4629      	mov	r1, r5
 800b820:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b824:	f7fd fab0 	bl	8008d88 <memset>
 800b828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b82c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b830:	4620      	mov	r0, r4
 800b832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b834:	3468      	adds	r4, #104	; 0x68
 800b836:	e7d9      	b.n	800b7ec <__sfp+0x1c>
 800b838:	2104      	movs	r1, #4
 800b83a:	4638      	mov	r0, r7
 800b83c:	f7ff ff62 	bl	800b704 <__sfmoreglue>
 800b840:	4604      	mov	r4, r0
 800b842:	6030      	str	r0, [r6, #0]
 800b844:	2800      	cmp	r0, #0
 800b846:	d1d5      	bne.n	800b7f4 <__sfp+0x24>
 800b848:	f7ff ff78 	bl	800b73c <__sfp_lock_release>
 800b84c:	230c      	movs	r3, #12
 800b84e:	603b      	str	r3, [r7, #0]
 800b850:	e7ee      	b.n	800b830 <__sfp+0x60>
 800b852:	bf00      	nop
 800b854:	0800ccc0 	.word	0x0800ccc0
 800b858:	ffff0001 	.word	0xffff0001

0800b85c <_fwalk_reent>:
 800b85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b860:	4606      	mov	r6, r0
 800b862:	4688      	mov	r8, r1
 800b864:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b868:	2700      	movs	r7, #0
 800b86a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b86e:	f1b9 0901 	subs.w	r9, r9, #1
 800b872:	d505      	bpl.n	800b880 <_fwalk_reent+0x24>
 800b874:	6824      	ldr	r4, [r4, #0]
 800b876:	2c00      	cmp	r4, #0
 800b878:	d1f7      	bne.n	800b86a <_fwalk_reent+0xe>
 800b87a:	4638      	mov	r0, r7
 800b87c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b880:	89ab      	ldrh	r3, [r5, #12]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d907      	bls.n	800b896 <_fwalk_reent+0x3a>
 800b886:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b88a:	3301      	adds	r3, #1
 800b88c:	d003      	beq.n	800b896 <_fwalk_reent+0x3a>
 800b88e:	4629      	mov	r1, r5
 800b890:	4630      	mov	r0, r6
 800b892:	47c0      	blx	r8
 800b894:	4307      	orrs	r7, r0
 800b896:	3568      	adds	r5, #104	; 0x68
 800b898:	e7e9      	b.n	800b86e <_fwalk_reent+0x12>

0800b89a <__retarget_lock_init_recursive>:
 800b89a:	4770      	bx	lr

0800b89c <__retarget_lock_acquire_recursive>:
 800b89c:	4770      	bx	lr

0800b89e <__retarget_lock_release_recursive>:
 800b89e:	4770      	bx	lr

0800b8a0 <__swhatbuf_r>:
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	460e      	mov	r6, r1
 800b8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a8:	2900      	cmp	r1, #0
 800b8aa:	b096      	sub	sp, #88	; 0x58
 800b8ac:	4614      	mov	r4, r2
 800b8ae:	461d      	mov	r5, r3
 800b8b0:	da08      	bge.n	800b8c4 <__swhatbuf_r+0x24>
 800b8b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	602a      	str	r2, [r5, #0]
 800b8ba:	061a      	lsls	r2, r3, #24
 800b8bc:	d410      	bmi.n	800b8e0 <__swhatbuf_r+0x40>
 800b8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8c2:	e00e      	b.n	800b8e2 <__swhatbuf_r+0x42>
 800b8c4:	466a      	mov	r2, sp
 800b8c6:	f000 f903 	bl	800bad0 <_fstat_r>
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	dbf1      	blt.n	800b8b2 <__swhatbuf_r+0x12>
 800b8ce:	9a01      	ldr	r2, [sp, #4]
 800b8d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8d8:	425a      	negs	r2, r3
 800b8da:	415a      	adcs	r2, r3
 800b8dc:	602a      	str	r2, [r5, #0]
 800b8de:	e7ee      	b.n	800b8be <__swhatbuf_r+0x1e>
 800b8e0:	2340      	movs	r3, #64	; 0x40
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	b016      	add	sp, #88	; 0x58
 800b8e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8ec <__smakebuf_r>:
 800b8ec:	898b      	ldrh	r3, [r1, #12]
 800b8ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8f0:	079d      	lsls	r5, r3, #30
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	460c      	mov	r4, r1
 800b8f6:	d507      	bpl.n	800b908 <__smakebuf_r+0x1c>
 800b8f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	6123      	str	r3, [r4, #16]
 800b900:	2301      	movs	r3, #1
 800b902:	6163      	str	r3, [r4, #20]
 800b904:	b002      	add	sp, #8
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	ab01      	add	r3, sp, #4
 800b90a:	466a      	mov	r2, sp
 800b90c:	f7ff ffc8 	bl	800b8a0 <__swhatbuf_r>
 800b910:	9900      	ldr	r1, [sp, #0]
 800b912:	4605      	mov	r5, r0
 800b914:	4630      	mov	r0, r6
 800b916:	f7ff f963 	bl	800abe0 <_malloc_r>
 800b91a:	b948      	cbnz	r0, 800b930 <__smakebuf_r+0x44>
 800b91c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b920:	059a      	lsls	r2, r3, #22
 800b922:	d4ef      	bmi.n	800b904 <__smakebuf_r+0x18>
 800b924:	f023 0303 	bic.w	r3, r3, #3
 800b928:	f043 0302 	orr.w	r3, r3, #2
 800b92c:	81a3      	strh	r3, [r4, #12]
 800b92e:	e7e3      	b.n	800b8f8 <__smakebuf_r+0xc>
 800b930:	4b0d      	ldr	r3, [pc, #52]	; (800b968 <__smakebuf_r+0x7c>)
 800b932:	62b3      	str	r3, [r6, #40]	; 0x28
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	6020      	str	r0, [r4, #0]
 800b938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b93c:	81a3      	strh	r3, [r4, #12]
 800b93e:	9b00      	ldr	r3, [sp, #0]
 800b940:	6163      	str	r3, [r4, #20]
 800b942:	9b01      	ldr	r3, [sp, #4]
 800b944:	6120      	str	r0, [r4, #16]
 800b946:	b15b      	cbz	r3, 800b960 <__smakebuf_r+0x74>
 800b948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b94c:	4630      	mov	r0, r6
 800b94e:	f000 f8d1 	bl	800baf4 <_isatty_r>
 800b952:	b128      	cbz	r0, 800b960 <__smakebuf_r+0x74>
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	f023 0303 	bic.w	r3, r3, #3
 800b95a:	f043 0301 	orr.w	r3, r3, #1
 800b95e:	81a3      	strh	r3, [r4, #12]
 800b960:	89a0      	ldrh	r0, [r4, #12]
 800b962:	4305      	orrs	r5, r0
 800b964:	81a5      	strh	r5, [r4, #12]
 800b966:	e7cd      	b.n	800b904 <__smakebuf_r+0x18>
 800b968:	0800b6f9 	.word	0x0800b6f9

0800b96c <_malloc_usable_size_r>:
 800b96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b970:	1f18      	subs	r0, r3, #4
 800b972:	2b00      	cmp	r3, #0
 800b974:	bfbc      	itt	lt
 800b976:	580b      	ldrlt	r3, [r1, r0]
 800b978:	18c0      	addlt	r0, r0, r3
 800b97a:	4770      	bx	lr

0800b97c <_raise_r>:
 800b97c:	291f      	cmp	r1, #31
 800b97e:	b538      	push	{r3, r4, r5, lr}
 800b980:	4604      	mov	r4, r0
 800b982:	460d      	mov	r5, r1
 800b984:	d904      	bls.n	800b990 <_raise_r+0x14>
 800b986:	2316      	movs	r3, #22
 800b988:	6003      	str	r3, [r0, #0]
 800b98a:	f04f 30ff 	mov.w	r0, #4294967295
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b992:	b112      	cbz	r2, 800b99a <_raise_r+0x1e>
 800b994:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b998:	b94b      	cbnz	r3, 800b9ae <_raise_r+0x32>
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 f830 	bl	800ba00 <_getpid_r>
 800b9a0:	462a      	mov	r2, r5
 800b9a2:	4601      	mov	r1, r0
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9aa:	f000 b817 	b.w	800b9dc <_kill_r>
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	d00a      	beq.n	800b9c8 <_raise_r+0x4c>
 800b9b2:	1c59      	adds	r1, r3, #1
 800b9b4:	d103      	bne.n	800b9be <_raise_r+0x42>
 800b9b6:	2316      	movs	r3, #22
 800b9b8:	6003      	str	r3, [r0, #0]
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	e7e7      	b.n	800b98e <_raise_r+0x12>
 800b9be:	2400      	movs	r4, #0
 800b9c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	4798      	blx	r3
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	e7e0      	b.n	800b98e <_raise_r+0x12>

0800b9cc <raise>:
 800b9cc:	4b02      	ldr	r3, [pc, #8]	; (800b9d8 <raise+0xc>)
 800b9ce:	4601      	mov	r1, r0
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f7ff bfd3 	b.w	800b97c <_raise_r>
 800b9d6:	bf00      	nop
 800b9d8:	20000040 	.word	0x20000040

0800b9dc <_kill_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4d07      	ldr	r5, [pc, #28]	; (800b9fc <_kill_r+0x20>)
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	4608      	mov	r0, r1
 800b9e6:	4611      	mov	r1, r2
 800b9e8:	602b      	str	r3, [r5, #0]
 800b9ea:	f7f8 fe25 	bl	8004638 <_kill>
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	d102      	bne.n	800b9f8 <_kill_r+0x1c>
 800b9f2:	682b      	ldr	r3, [r5, #0]
 800b9f4:	b103      	cbz	r3, 800b9f8 <_kill_r+0x1c>
 800b9f6:	6023      	str	r3, [r4, #0]
 800b9f8:	bd38      	pop	{r3, r4, r5, pc}
 800b9fa:	bf00      	nop
 800b9fc:	20000df8 	.word	0x20000df8

0800ba00 <_getpid_r>:
 800ba00:	f7f8 be18 	b.w	8004634 <_getpid>

0800ba04 <__sread>:
 800ba04:	b510      	push	{r4, lr}
 800ba06:	460c      	mov	r4, r1
 800ba08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba0c:	f000 f894 	bl	800bb38 <_read_r>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	bfab      	itete	ge
 800ba14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba16:	89a3      	ldrhlt	r3, [r4, #12]
 800ba18:	181b      	addge	r3, r3, r0
 800ba1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba1e:	bfac      	ite	ge
 800ba20:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba22:	81a3      	strhlt	r3, [r4, #12]
 800ba24:	bd10      	pop	{r4, pc}

0800ba26 <__swrite>:
 800ba26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba2a:	461f      	mov	r7, r3
 800ba2c:	898b      	ldrh	r3, [r1, #12]
 800ba2e:	05db      	lsls	r3, r3, #23
 800ba30:	4605      	mov	r5, r0
 800ba32:	460c      	mov	r4, r1
 800ba34:	4616      	mov	r6, r2
 800ba36:	d505      	bpl.n	800ba44 <__swrite+0x1e>
 800ba38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3c:	2302      	movs	r3, #2
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f000 f868 	bl	800bb14 <_lseek_r>
 800ba44:	89a3      	ldrh	r3, [r4, #12]
 800ba46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba4e:	81a3      	strh	r3, [r4, #12]
 800ba50:	4632      	mov	r2, r6
 800ba52:	463b      	mov	r3, r7
 800ba54:	4628      	mov	r0, r5
 800ba56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5a:	f000 b817 	b.w	800ba8c <_write_r>

0800ba5e <__sseek>:
 800ba5e:	b510      	push	{r4, lr}
 800ba60:	460c      	mov	r4, r1
 800ba62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba66:	f000 f855 	bl	800bb14 <_lseek_r>
 800ba6a:	1c43      	adds	r3, r0, #1
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	bf15      	itete	ne
 800ba70:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba7a:	81a3      	strheq	r3, [r4, #12]
 800ba7c:	bf18      	it	ne
 800ba7e:	81a3      	strhne	r3, [r4, #12]
 800ba80:	bd10      	pop	{r4, pc}

0800ba82 <__sclose>:
 800ba82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba86:	f000 b813 	b.w	800bab0 <_close_r>
	...

0800ba8c <_write_r>:
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4d07      	ldr	r5, [pc, #28]	; (800baac <_write_r+0x20>)
 800ba90:	4604      	mov	r4, r0
 800ba92:	4608      	mov	r0, r1
 800ba94:	4611      	mov	r1, r2
 800ba96:	2200      	movs	r2, #0
 800ba98:	602a      	str	r2, [r5, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	f7f8 fdea 	bl	8004674 <_write>
 800baa0:	1c43      	adds	r3, r0, #1
 800baa2:	d102      	bne.n	800baaa <_write_r+0x1e>
 800baa4:	682b      	ldr	r3, [r5, #0]
 800baa6:	b103      	cbz	r3, 800baaa <_write_r+0x1e>
 800baa8:	6023      	str	r3, [r4, #0]
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	20000df8 	.word	0x20000df8

0800bab0 <_close_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4d06      	ldr	r5, [pc, #24]	; (800bacc <_close_r+0x1c>)
 800bab4:	2300      	movs	r3, #0
 800bab6:	4604      	mov	r4, r0
 800bab8:	4608      	mov	r0, r1
 800baba:	602b      	str	r3, [r5, #0]
 800babc:	f7f8 fde8 	bl	8004690 <_close>
 800bac0:	1c43      	adds	r3, r0, #1
 800bac2:	d102      	bne.n	800baca <_close_r+0x1a>
 800bac4:	682b      	ldr	r3, [r5, #0]
 800bac6:	b103      	cbz	r3, 800baca <_close_r+0x1a>
 800bac8:	6023      	str	r3, [r4, #0]
 800baca:	bd38      	pop	{r3, r4, r5, pc}
 800bacc:	20000df8 	.word	0x20000df8

0800bad0 <_fstat_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d07      	ldr	r5, [pc, #28]	; (800baf0 <_fstat_r+0x20>)
 800bad4:	2300      	movs	r3, #0
 800bad6:	4604      	mov	r4, r0
 800bad8:	4608      	mov	r0, r1
 800bada:	4611      	mov	r1, r2
 800badc:	602b      	str	r3, [r5, #0]
 800bade:	f7f8 fdda 	bl	8004696 <_fstat>
 800bae2:	1c43      	adds	r3, r0, #1
 800bae4:	d102      	bne.n	800baec <_fstat_r+0x1c>
 800bae6:	682b      	ldr	r3, [r5, #0]
 800bae8:	b103      	cbz	r3, 800baec <_fstat_r+0x1c>
 800baea:	6023      	str	r3, [r4, #0]
 800baec:	bd38      	pop	{r3, r4, r5, pc}
 800baee:	bf00      	nop
 800baf0:	20000df8 	.word	0x20000df8

0800baf4 <_isatty_r>:
 800baf4:	b538      	push	{r3, r4, r5, lr}
 800baf6:	4d06      	ldr	r5, [pc, #24]	; (800bb10 <_isatty_r+0x1c>)
 800baf8:	2300      	movs	r3, #0
 800bafa:	4604      	mov	r4, r0
 800bafc:	4608      	mov	r0, r1
 800bafe:	602b      	str	r3, [r5, #0]
 800bb00:	f7f8 fdce 	bl	80046a0 <_isatty>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_isatty_r+0x1a>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_isatty_r+0x1a>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	20000df8 	.word	0x20000df8

0800bb14 <_lseek_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d07      	ldr	r5, [pc, #28]	; (800bb34 <_lseek_r+0x20>)
 800bb18:	4604      	mov	r4, r0
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	4611      	mov	r1, r2
 800bb1e:	2200      	movs	r2, #0
 800bb20:	602a      	str	r2, [r5, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	f7f8 fdbe 	bl	80046a4 <_lseek>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d102      	bne.n	800bb32 <_lseek_r+0x1e>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	b103      	cbz	r3, 800bb32 <_lseek_r+0x1e>
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	20000df8 	.word	0x20000df8

0800bb38 <_read_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4d07      	ldr	r5, [pc, #28]	; (800bb58 <_read_r+0x20>)
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	4608      	mov	r0, r1
 800bb40:	4611      	mov	r1, r2
 800bb42:	2200      	movs	r2, #0
 800bb44:	602a      	str	r2, [r5, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	f7f8 fd84 	bl	8004654 <_read>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d102      	bne.n	800bb56 <_read_r+0x1e>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	b103      	cbz	r3, 800bb56 <_read_r+0x1e>
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	20000df8 	.word	0x20000df8

0800bb5c <pow>:
 800bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5e:	ed2d 8b02 	vpush	{d8}
 800bb62:	eeb0 8a40 	vmov.f32	s16, s0
 800bb66:	eef0 8a60 	vmov.f32	s17, s1
 800bb6a:	ec55 4b11 	vmov	r4, r5, d1
 800bb6e:	f000 f867 	bl	800bc40 <__ieee754_pow>
 800bb72:	4622      	mov	r2, r4
 800bb74:	462b      	mov	r3, r5
 800bb76:	4620      	mov	r0, r4
 800bb78:	4629      	mov	r1, r5
 800bb7a:	ec57 6b10 	vmov	r6, r7, d0
 800bb7e:	f7f4 ffdd 	bl	8000b3c <__aeabi_dcmpun>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d13b      	bne.n	800bbfe <pow+0xa2>
 800bb86:	ec51 0b18 	vmov	r0, r1, d8
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	f7f4 ffa3 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb92:	b1b8      	cbz	r0, 800bbc4 <pow+0x68>
 800bb94:	2200      	movs	r2, #0
 800bb96:	2300      	movs	r3, #0
 800bb98:	4620      	mov	r0, r4
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	f7f4 ff9c 	bl	8000ad8 <__aeabi_dcmpeq>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d146      	bne.n	800bc32 <pow+0xd6>
 800bba4:	ec45 4b10 	vmov	d0, r4, r5
 800bba8:	f000 fe63 	bl	800c872 <finite>
 800bbac:	b338      	cbz	r0, 800bbfe <pow+0xa2>
 800bbae:	2200      	movs	r2, #0
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	f7f4 ff99 	bl	8000aec <__aeabi_dcmplt>
 800bbba:	b300      	cbz	r0, 800bbfe <pow+0xa2>
 800bbbc:	f7fd f8ac 	bl	8008d18 <__errno>
 800bbc0:	2322      	movs	r3, #34	; 0x22
 800bbc2:	e01b      	b.n	800bbfc <pow+0xa0>
 800bbc4:	ec47 6b10 	vmov	d0, r6, r7
 800bbc8:	f000 fe53 	bl	800c872 <finite>
 800bbcc:	b9e0      	cbnz	r0, 800bc08 <pow+0xac>
 800bbce:	eeb0 0a48 	vmov.f32	s0, s16
 800bbd2:	eef0 0a68 	vmov.f32	s1, s17
 800bbd6:	f000 fe4c 	bl	800c872 <finite>
 800bbda:	b1a8      	cbz	r0, 800bc08 <pow+0xac>
 800bbdc:	ec45 4b10 	vmov	d0, r4, r5
 800bbe0:	f000 fe47 	bl	800c872 <finite>
 800bbe4:	b180      	cbz	r0, 800bc08 <pow+0xac>
 800bbe6:	4632      	mov	r2, r6
 800bbe8:	463b      	mov	r3, r7
 800bbea:	4630      	mov	r0, r6
 800bbec:	4639      	mov	r1, r7
 800bbee:	f7f4 ffa5 	bl	8000b3c <__aeabi_dcmpun>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d0e2      	beq.n	800bbbc <pow+0x60>
 800bbf6:	f7fd f88f 	bl	8008d18 <__errno>
 800bbfa:	2321      	movs	r3, #33	; 0x21
 800bbfc:	6003      	str	r3, [r0, #0]
 800bbfe:	ecbd 8b02 	vpop	{d8}
 800bc02:	ec47 6b10 	vmov	d0, r6, r7
 800bc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc08:	2200      	movs	r2, #0
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	4639      	mov	r1, r7
 800bc10:	f7f4 ff62 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d0f2      	beq.n	800bbfe <pow+0xa2>
 800bc18:	eeb0 0a48 	vmov.f32	s0, s16
 800bc1c:	eef0 0a68 	vmov.f32	s1, s17
 800bc20:	f000 fe27 	bl	800c872 <finite>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d0ea      	beq.n	800bbfe <pow+0xa2>
 800bc28:	ec45 4b10 	vmov	d0, r4, r5
 800bc2c:	f000 fe21 	bl	800c872 <finite>
 800bc30:	e7c3      	b.n	800bbba <pow+0x5e>
 800bc32:	4f01      	ldr	r7, [pc, #4]	; (800bc38 <pow+0xdc>)
 800bc34:	2600      	movs	r6, #0
 800bc36:	e7e2      	b.n	800bbfe <pow+0xa2>
 800bc38:	3ff00000 	.word	0x3ff00000
 800bc3c:	00000000 	.word	0x00000000

0800bc40 <__ieee754_pow>:
 800bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	ed2d 8b06 	vpush	{d8-d10}
 800bc48:	b089      	sub	sp, #36	; 0x24
 800bc4a:	ed8d 1b00 	vstr	d1, [sp]
 800bc4e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bc52:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bc56:	ea58 0102 	orrs.w	r1, r8, r2
 800bc5a:	ec57 6b10 	vmov	r6, r7, d0
 800bc5e:	d115      	bne.n	800bc8c <__ieee754_pow+0x4c>
 800bc60:	19b3      	adds	r3, r6, r6
 800bc62:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800bc66:	4152      	adcs	r2, r2
 800bc68:	4299      	cmp	r1, r3
 800bc6a:	4b89      	ldr	r3, [pc, #548]	; (800be90 <__ieee754_pow+0x250>)
 800bc6c:	4193      	sbcs	r3, r2
 800bc6e:	f080 84d2 	bcs.w	800c616 <__ieee754_pow+0x9d6>
 800bc72:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc76:	4630      	mov	r0, r6
 800bc78:	4639      	mov	r1, r7
 800bc7a:	f7f4 fb0f 	bl	800029c <__adddf3>
 800bc7e:	ec41 0b10 	vmov	d0, r0, r1
 800bc82:	b009      	add	sp, #36	; 0x24
 800bc84:	ecbd 8b06 	vpop	{d8-d10}
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8c:	4b81      	ldr	r3, [pc, #516]	; (800be94 <__ieee754_pow+0x254>)
 800bc8e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bc92:	429c      	cmp	r4, r3
 800bc94:	ee10 aa10 	vmov	sl, s0
 800bc98:	463d      	mov	r5, r7
 800bc9a:	dc06      	bgt.n	800bcaa <__ieee754_pow+0x6a>
 800bc9c:	d101      	bne.n	800bca2 <__ieee754_pow+0x62>
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	d1e7      	bne.n	800bc72 <__ieee754_pow+0x32>
 800bca2:	4598      	cmp	r8, r3
 800bca4:	dc01      	bgt.n	800bcaa <__ieee754_pow+0x6a>
 800bca6:	d10f      	bne.n	800bcc8 <__ieee754_pow+0x88>
 800bca8:	b172      	cbz	r2, 800bcc8 <__ieee754_pow+0x88>
 800bcaa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bcae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bcb2:	ea55 050a 	orrs.w	r5, r5, sl
 800bcb6:	d1dc      	bne.n	800bc72 <__ieee754_pow+0x32>
 800bcb8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bcbc:	18db      	adds	r3, r3, r3
 800bcbe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bcc2:	4152      	adcs	r2, r2
 800bcc4:	429d      	cmp	r5, r3
 800bcc6:	e7d0      	b.n	800bc6a <__ieee754_pow+0x2a>
 800bcc8:	2d00      	cmp	r5, #0
 800bcca:	da3b      	bge.n	800bd44 <__ieee754_pow+0x104>
 800bccc:	4b72      	ldr	r3, [pc, #456]	; (800be98 <__ieee754_pow+0x258>)
 800bcce:	4598      	cmp	r8, r3
 800bcd0:	dc51      	bgt.n	800bd76 <__ieee754_pow+0x136>
 800bcd2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bcd6:	4598      	cmp	r8, r3
 800bcd8:	f340 84ac 	ble.w	800c634 <__ieee754_pow+0x9f4>
 800bcdc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bce0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bce4:	2b14      	cmp	r3, #20
 800bce6:	dd0f      	ble.n	800bd08 <__ieee754_pow+0xc8>
 800bce8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bcec:	fa22 f103 	lsr.w	r1, r2, r3
 800bcf0:	fa01 f303 	lsl.w	r3, r1, r3
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	f040 849d 	bne.w	800c634 <__ieee754_pow+0x9f4>
 800bcfa:	f001 0101 	and.w	r1, r1, #1
 800bcfe:	f1c1 0302 	rsb	r3, r1, #2
 800bd02:	9304      	str	r3, [sp, #16]
 800bd04:	b182      	cbz	r2, 800bd28 <__ieee754_pow+0xe8>
 800bd06:	e05f      	b.n	800bdc8 <__ieee754_pow+0x188>
 800bd08:	2a00      	cmp	r2, #0
 800bd0a:	d15b      	bne.n	800bdc4 <__ieee754_pow+0x184>
 800bd0c:	f1c3 0314 	rsb	r3, r3, #20
 800bd10:	fa48 f103 	asr.w	r1, r8, r3
 800bd14:	fa01 f303 	lsl.w	r3, r1, r3
 800bd18:	4543      	cmp	r3, r8
 800bd1a:	f040 8488 	bne.w	800c62e <__ieee754_pow+0x9ee>
 800bd1e:	f001 0101 	and.w	r1, r1, #1
 800bd22:	f1c1 0302 	rsb	r3, r1, #2
 800bd26:	9304      	str	r3, [sp, #16]
 800bd28:	4b5c      	ldr	r3, [pc, #368]	; (800be9c <__ieee754_pow+0x25c>)
 800bd2a:	4598      	cmp	r8, r3
 800bd2c:	d132      	bne.n	800bd94 <__ieee754_pow+0x154>
 800bd2e:	f1b9 0f00 	cmp.w	r9, #0
 800bd32:	f280 8478 	bge.w	800c626 <__ieee754_pow+0x9e6>
 800bd36:	4959      	ldr	r1, [pc, #356]	; (800be9c <__ieee754_pow+0x25c>)
 800bd38:	4632      	mov	r2, r6
 800bd3a:	463b      	mov	r3, r7
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	f7f4 fd8d 	bl	800085c <__aeabi_ddiv>
 800bd42:	e79c      	b.n	800bc7e <__ieee754_pow+0x3e>
 800bd44:	2300      	movs	r3, #0
 800bd46:	9304      	str	r3, [sp, #16]
 800bd48:	2a00      	cmp	r2, #0
 800bd4a:	d13d      	bne.n	800bdc8 <__ieee754_pow+0x188>
 800bd4c:	4b51      	ldr	r3, [pc, #324]	; (800be94 <__ieee754_pow+0x254>)
 800bd4e:	4598      	cmp	r8, r3
 800bd50:	d1ea      	bne.n	800bd28 <__ieee754_pow+0xe8>
 800bd52:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bd56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bd5a:	ea53 030a 	orrs.w	r3, r3, sl
 800bd5e:	f000 845a 	beq.w	800c616 <__ieee754_pow+0x9d6>
 800bd62:	4b4f      	ldr	r3, [pc, #316]	; (800bea0 <__ieee754_pow+0x260>)
 800bd64:	429c      	cmp	r4, r3
 800bd66:	dd08      	ble.n	800bd7a <__ieee754_pow+0x13a>
 800bd68:	f1b9 0f00 	cmp.w	r9, #0
 800bd6c:	f2c0 8457 	blt.w	800c61e <__ieee754_pow+0x9de>
 800bd70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd74:	e783      	b.n	800bc7e <__ieee754_pow+0x3e>
 800bd76:	2302      	movs	r3, #2
 800bd78:	e7e5      	b.n	800bd46 <__ieee754_pow+0x106>
 800bd7a:	f1b9 0f00 	cmp.w	r9, #0
 800bd7e:	f04f 0000 	mov.w	r0, #0
 800bd82:	f04f 0100 	mov.w	r1, #0
 800bd86:	f6bf af7a 	bge.w	800bc7e <__ieee754_pow+0x3e>
 800bd8a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bd8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bd92:	e774      	b.n	800bc7e <__ieee754_pow+0x3e>
 800bd94:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bd98:	d106      	bne.n	800bda8 <__ieee754_pow+0x168>
 800bd9a:	4632      	mov	r2, r6
 800bd9c:	463b      	mov	r3, r7
 800bd9e:	4630      	mov	r0, r6
 800bda0:	4639      	mov	r1, r7
 800bda2:	f7f4 fc31 	bl	8000608 <__aeabi_dmul>
 800bda6:	e76a      	b.n	800bc7e <__ieee754_pow+0x3e>
 800bda8:	4b3e      	ldr	r3, [pc, #248]	; (800bea4 <__ieee754_pow+0x264>)
 800bdaa:	4599      	cmp	r9, r3
 800bdac:	d10c      	bne.n	800bdc8 <__ieee754_pow+0x188>
 800bdae:	2d00      	cmp	r5, #0
 800bdb0:	db0a      	blt.n	800bdc8 <__ieee754_pow+0x188>
 800bdb2:	ec47 6b10 	vmov	d0, r6, r7
 800bdb6:	b009      	add	sp, #36	; 0x24
 800bdb8:	ecbd 8b06 	vpop	{d8-d10}
 800bdbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	f000 bc6c 	b.w	800c69c <__ieee754_sqrt>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	9304      	str	r3, [sp, #16]
 800bdc8:	ec47 6b10 	vmov	d0, r6, r7
 800bdcc:	f000 fd48 	bl	800c860 <fabs>
 800bdd0:	ec51 0b10 	vmov	r0, r1, d0
 800bdd4:	f1ba 0f00 	cmp.w	sl, #0
 800bdd8:	d129      	bne.n	800be2e <__ieee754_pow+0x1ee>
 800bdda:	b124      	cbz	r4, 800bde6 <__ieee754_pow+0x1a6>
 800bddc:	4b2f      	ldr	r3, [pc, #188]	; (800be9c <__ieee754_pow+0x25c>)
 800bdde:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d123      	bne.n	800be2e <__ieee754_pow+0x1ee>
 800bde6:	f1b9 0f00 	cmp.w	r9, #0
 800bdea:	da05      	bge.n	800bdf8 <__ieee754_pow+0x1b8>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	492a      	ldr	r1, [pc, #168]	; (800be9c <__ieee754_pow+0x25c>)
 800bdf4:	f7f4 fd32 	bl	800085c <__aeabi_ddiv>
 800bdf8:	2d00      	cmp	r5, #0
 800bdfa:	f6bf af40 	bge.w	800bc7e <__ieee754_pow+0x3e>
 800bdfe:	9b04      	ldr	r3, [sp, #16]
 800be00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800be04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800be08:	4323      	orrs	r3, r4
 800be0a:	d108      	bne.n	800be1e <__ieee754_pow+0x1de>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4610      	mov	r0, r2
 800be12:	4619      	mov	r1, r3
 800be14:	f7f4 fa40 	bl	8000298 <__aeabi_dsub>
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	e78f      	b.n	800bd3e <__ieee754_pow+0xfe>
 800be1e:	9b04      	ldr	r3, [sp, #16]
 800be20:	2b01      	cmp	r3, #1
 800be22:	f47f af2c 	bne.w	800bc7e <__ieee754_pow+0x3e>
 800be26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be2a:	4619      	mov	r1, r3
 800be2c:	e727      	b.n	800bc7e <__ieee754_pow+0x3e>
 800be2e:	0feb      	lsrs	r3, r5, #31
 800be30:	3b01      	subs	r3, #1
 800be32:	9306      	str	r3, [sp, #24]
 800be34:	9a06      	ldr	r2, [sp, #24]
 800be36:	9b04      	ldr	r3, [sp, #16]
 800be38:	4313      	orrs	r3, r2
 800be3a:	d102      	bne.n	800be42 <__ieee754_pow+0x202>
 800be3c:	4632      	mov	r2, r6
 800be3e:	463b      	mov	r3, r7
 800be40:	e7e6      	b.n	800be10 <__ieee754_pow+0x1d0>
 800be42:	4b19      	ldr	r3, [pc, #100]	; (800bea8 <__ieee754_pow+0x268>)
 800be44:	4598      	cmp	r8, r3
 800be46:	f340 80fb 	ble.w	800c040 <__ieee754_pow+0x400>
 800be4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800be4e:	4598      	cmp	r8, r3
 800be50:	4b13      	ldr	r3, [pc, #76]	; (800bea0 <__ieee754_pow+0x260>)
 800be52:	dd0c      	ble.n	800be6e <__ieee754_pow+0x22e>
 800be54:	429c      	cmp	r4, r3
 800be56:	dc0f      	bgt.n	800be78 <__ieee754_pow+0x238>
 800be58:	f1b9 0f00 	cmp.w	r9, #0
 800be5c:	da0f      	bge.n	800be7e <__ieee754_pow+0x23e>
 800be5e:	2000      	movs	r0, #0
 800be60:	b009      	add	sp, #36	; 0x24
 800be62:	ecbd 8b06 	vpop	{d8-d10}
 800be66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6a:	f000 bcf0 	b.w	800c84e <__math_oflow>
 800be6e:	429c      	cmp	r4, r3
 800be70:	dbf2      	blt.n	800be58 <__ieee754_pow+0x218>
 800be72:	4b0a      	ldr	r3, [pc, #40]	; (800be9c <__ieee754_pow+0x25c>)
 800be74:	429c      	cmp	r4, r3
 800be76:	dd19      	ble.n	800beac <__ieee754_pow+0x26c>
 800be78:	f1b9 0f00 	cmp.w	r9, #0
 800be7c:	dcef      	bgt.n	800be5e <__ieee754_pow+0x21e>
 800be7e:	2000      	movs	r0, #0
 800be80:	b009      	add	sp, #36	; 0x24
 800be82:	ecbd 8b06 	vpop	{d8-d10}
 800be86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be8a:	f000 bcd7 	b.w	800c83c <__math_uflow>
 800be8e:	bf00      	nop
 800be90:	fff00000 	.word	0xfff00000
 800be94:	7ff00000 	.word	0x7ff00000
 800be98:	433fffff 	.word	0x433fffff
 800be9c:	3ff00000 	.word	0x3ff00000
 800bea0:	3fefffff 	.word	0x3fefffff
 800bea4:	3fe00000 	.word	0x3fe00000
 800bea8:	41e00000 	.word	0x41e00000
 800beac:	4b60      	ldr	r3, [pc, #384]	; (800c030 <__ieee754_pow+0x3f0>)
 800beae:	2200      	movs	r2, #0
 800beb0:	f7f4 f9f2 	bl	8000298 <__aeabi_dsub>
 800beb4:	a354      	add	r3, pc, #336	; (adr r3, 800c008 <__ieee754_pow+0x3c8>)
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	4604      	mov	r4, r0
 800bebc:	460d      	mov	r5, r1
 800bebe:	f7f4 fba3 	bl	8000608 <__aeabi_dmul>
 800bec2:	a353      	add	r3, pc, #332	; (adr r3, 800c010 <__ieee754_pow+0x3d0>)
 800bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec8:	4606      	mov	r6, r0
 800beca:	460f      	mov	r7, r1
 800becc:	4620      	mov	r0, r4
 800bece:	4629      	mov	r1, r5
 800bed0:	f7f4 fb9a 	bl	8000608 <__aeabi_dmul>
 800bed4:	4b57      	ldr	r3, [pc, #348]	; (800c034 <__ieee754_pow+0x3f4>)
 800bed6:	4682      	mov	sl, r0
 800bed8:	468b      	mov	fp, r1
 800beda:	2200      	movs	r2, #0
 800bedc:	4620      	mov	r0, r4
 800bede:	4629      	mov	r1, r5
 800bee0:	f7f4 fb92 	bl	8000608 <__aeabi_dmul>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	a14b      	add	r1, pc, #300	; (adr r1, 800c018 <__ieee754_pow+0x3d8>)
 800beea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beee:	f7f4 f9d3 	bl	8000298 <__aeabi_dsub>
 800bef2:	4622      	mov	r2, r4
 800bef4:	462b      	mov	r3, r5
 800bef6:	f7f4 fb87 	bl	8000608 <__aeabi_dmul>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	2000      	movs	r0, #0
 800bf00:	494d      	ldr	r1, [pc, #308]	; (800c038 <__ieee754_pow+0x3f8>)
 800bf02:	f7f4 f9c9 	bl	8000298 <__aeabi_dsub>
 800bf06:	4622      	mov	r2, r4
 800bf08:	4680      	mov	r8, r0
 800bf0a:	4689      	mov	r9, r1
 800bf0c:	462b      	mov	r3, r5
 800bf0e:	4620      	mov	r0, r4
 800bf10:	4629      	mov	r1, r5
 800bf12:	f7f4 fb79 	bl	8000608 <__aeabi_dmul>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4640      	mov	r0, r8
 800bf1c:	4649      	mov	r1, r9
 800bf1e:	f7f4 fb73 	bl	8000608 <__aeabi_dmul>
 800bf22:	a33f      	add	r3, pc, #252	; (adr r3, 800c020 <__ieee754_pow+0x3e0>)
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	f7f4 fb6e 	bl	8000608 <__aeabi_dmul>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4650      	mov	r0, sl
 800bf32:	4659      	mov	r1, fp
 800bf34:	f7f4 f9b0 	bl	8000298 <__aeabi_dsub>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	4689      	mov	r9, r1
 800bf40:	4630      	mov	r0, r6
 800bf42:	4639      	mov	r1, r7
 800bf44:	f7f4 f9aa 	bl	800029c <__adddf3>
 800bf48:	2000      	movs	r0, #0
 800bf4a:	4632      	mov	r2, r6
 800bf4c:	463b      	mov	r3, r7
 800bf4e:	4604      	mov	r4, r0
 800bf50:	460d      	mov	r5, r1
 800bf52:	f7f4 f9a1 	bl	8000298 <__aeabi_dsub>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4640      	mov	r0, r8
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	f7f4 f99b 	bl	8000298 <__aeabi_dsub>
 800bf62:	9b04      	ldr	r3, [sp, #16]
 800bf64:	9a06      	ldr	r2, [sp, #24]
 800bf66:	3b01      	subs	r3, #1
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	4682      	mov	sl, r0
 800bf6c:	468b      	mov	fp, r1
 800bf6e:	f040 81e7 	bne.w	800c340 <__ieee754_pow+0x700>
 800bf72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c028 <__ieee754_pow+0x3e8>
 800bf76:	eeb0 8a47 	vmov.f32	s16, s14
 800bf7a:	eef0 8a67 	vmov.f32	s17, s15
 800bf7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bf82:	2600      	movs	r6, #0
 800bf84:	4632      	mov	r2, r6
 800bf86:	463b      	mov	r3, r7
 800bf88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf8c:	f7f4 f984 	bl	8000298 <__aeabi_dsub>
 800bf90:	4622      	mov	r2, r4
 800bf92:	462b      	mov	r3, r5
 800bf94:	f7f4 fb38 	bl	8000608 <__aeabi_dmul>
 800bf98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf9c:	4680      	mov	r8, r0
 800bf9e:	4689      	mov	r9, r1
 800bfa0:	4650      	mov	r0, sl
 800bfa2:	4659      	mov	r1, fp
 800bfa4:	f7f4 fb30 	bl	8000608 <__aeabi_dmul>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	4640      	mov	r0, r8
 800bfae:	4649      	mov	r1, r9
 800bfb0:	f7f4 f974 	bl	800029c <__adddf3>
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	463b      	mov	r3, r7
 800bfb8:	4680      	mov	r8, r0
 800bfba:	4689      	mov	r9, r1
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	f7f4 fb22 	bl	8000608 <__aeabi_dmul>
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	4604      	mov	r4, r0
 800bfc8:	460d      	mov	r5, r1
 800bfca:	4602      	mov	r2, r0
 800bfcc:	4649      	mov	r1, r9
 800bfce:	4640      	mov	r0, r8
 800bfd0:	f7f4 f964 	bl	800029c <__adddf3>
 800bfd4:	4b19      	ldr	r3, [pc, #100]	; (800c03c <__ieee754_pow+0x3fc>)
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	ec45 4b19 	vmov	d9, r4, r5
 800bfdc:	4606      	mov	r6, r0
 800bfde:	460f      	mov	r7, r1
 800bfe0:	468b      	mov	fp, r1
 800bfe2:	f340 82f1 	ble.w	800c5c8 <__ieee754_pow+0x988>
 800bfe6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bfea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bfee:	4303      	orrs	r3, r0
 800bff0:	f000 81e4 	beq.w	800c3bc <__ieee754_pow+0x77c>
 800bff4:	ec51 0b18 	vmov	r0, r1, d8
 800bff8:	2200      	movs	r2, #0
 800bffa:	2300      	movs	r3, #0
 800bffc:	f7f4 fd76 	bl	8000aec <__aeabi_dcmplt>
 800c000:	3800      	subs	r0, #0
 800c002:	bf18      	it	ne
 800c004:	2001      	movne	r0, #1
 800c006:	e72b      	b.n	800be60 <__ieee754_pow+0x220>
 800c008:	60000000 	.word	0x60000000
 800c00c:	3ff71547 	.word	0x3ff71547
 800c010:	f85ddf44 	.word	0xf85ddf44
 800c014:	3e54ae0b 	.word	0x3e54ae0b
 800c018:	55555555 	.word	0x55555555
 800c01c:	3fd55555 	.word	0x3fd55555
 800c020:	652b82fe 	.word	0x652b82fe
 800c024:	3ff71547 	.word	0x3ff71547
 800c028:	00000000 	.word	0x00000000
 800c02c:	bff00000 	.word	0xbff00000
 800c030:	3ff00000 	.word	0x3ff00000
 800c034:	3fd00000 	.word	0x3fd00000
 800c038:	3fe00000 	.word	0x3fe00000
 800c03c:	408fffff 	.word	0x408fffff
 800c040:	4bd5      	ldr	r3, [pc, #852]	; (800c398 <__ieee754_pow+0x758>)
 800c042:	402b      	ands	r3, r5
 800c044:	2200      	movs	r2, #0
 800c046:	b92b      	cbnz	r3, 800c054 <__ieee754_pow+0x414>
 800c048:	4bd4      	ldr	r3, [pc, #848]	; (800c39c <__ieee754_pow+0x75c>)
 800c04a:	f7f4 fadd 	bl	8000608 <__aeabi_dmul>
 800c04e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c052:	460c      	mov	r4, r1
 800c054:	1523      	asrs	r3, r4, #20
 800c056:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c05a:	4413      	add	r3, r2
 800c05c:	9305      	str	r3, [sp, #20]
 800c05e:	4bd0      	ldr	r3, [pc, #832]	; (800c3a0 <__ieee754_pow+0x760>)
 800c060:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c064:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c068:	429c      	cmp	r4, r3
 800c06a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c06e:	dd08      	ble.n	800c082 <__ieee754_pow+0x442>
 800c070:	4bcc      	ldr	r3, [pc, #816]	; (800c3a4 <__ieee754_pow+0x764>)
 800c072:	429c      	cmp	r4, r3
 800c074:	f340 8162 	ble.w	800c33c <__ieee754_pow+0x6fc>
 800c078:	9b05      	ldr	r3, [sp, #20]
 800c07a:	3301      	adds	r3, #1
 800c07c:	9305      	str	r3, [sp, #20]
 800c07e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c082:	2400      	movs	r4, #0
 800c084:	00e3      	lsls	r3, r4, #3
 800c086:	9307      	str	r3, [sp, #28]
 800c088:	4bc7      	ldr	r3, [pc, #796]	; (800c3a8 <__ieee754_pow+0x768>)
 800c08a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c08e:	ed93 7b00 	vldr	d7, [r3]
 800c092:	4629      	mov	r1, r5
 800c094:	ec53 2b17 	vmov	r2, r3, d7
 800c098:	eeb0 9a47 	vmov.f32	s18, s14
 800c09c:	eef0 9a67 	vmov.f32	s19, s15
 800c0a0:	4682      	mov	sl, r0
 800c0a2:	f7f4 f8f9 	bl	8000298 <__aeabi_dsub>
 800c0a6:	4652      	mov	r2, sl
 800c0a8:	4606      	mov	r6, r0
 800c0aa:	460f      	mov	r7, r1
 800c0ac:	462b      	mov	r3, r5
 800c0ae:	ec51 0b19 	vmov	r0, r1, d9
 800c0b2:	f7f4 f8f3 	bl	800029c <__adddf3>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	2000      	movs	r0, #0
 800c0bc:	49bb      	ldr	r1, [pc, #748]	; (800c3ac <__ieee754_pow+0x76c>)
 800c0be:	f7f4 fbcd 	bl	800085c <__aeabi_ddiv>
 800c0c2:	ec41 0b1a 	vmov	d10, r0, r1
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	4639      	mov	r1, r7
 800c0ce:	f7f4 fa9b 	bl	8000608 <__aeabi_dmul>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d8:	9302      	str	r3, [sp, #8]
 800c0da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c0de:	46ab      	mov	fp, r5
 800c0e0:	106d      	asrs	r5, r5, #1
 800c0e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c0e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c0ea:	ec41 0b18 	vmov	d8, r0, r1
 800c0ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	4640      	mov	r0, r8
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	4614      	mov	r4, r2
 800c0fa:	461d      	mov	r5, r3
 800c0fc:	f7f4 fa84 	bl	8000608 <__aeabi_dmul>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4630      	mov	r0, r6
 800c106:	4639      	mov	r1, r7
 800c108:	f7f4 f8c6 	bl	8000298 <__aeabi_dsub>
 800c10c:	ec53 2b19 	vmov	r2, r3, d9
 800c110:	4606      	mov	r6, r0
 800c112:	460f      	mov	r7, r1
 800c114:	4620      	mov	r0, r4
 800c116:	4629      	mov	r1, r5
 800c118:	f7f4 f8be 	bl	8000298 <__aeabi_dsub>
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	4650      	mov	r0, sl
 800c122:	4659      	mov	r1, fp
 800c124:	f7f4 f8b8 	bl	8000298 <__aeabi_dsub>
 800c128:	4642      	mov	r2, r8
 800c12a:	464b      	mov	r3, r9
 800c12c:	f7f4 fa6c 	bl	8000608 <__aeabi_dmul>
 800c130:	4602      	mov	r2, r0
 800c132:	460b      	mov	r3, r1
 800c134:	4630      	mov	r0, r6
 800c136:	4639      	mov	r1, r7
 800c138:	f7f4 f8ae 	bl	8000298 <__aeabi_dsub>
 800c13c:	ec53 2b1a 	vmov	r2, r3, d10
 800c140:	f7f4 fa62 	bl	8000608 <__aeabi_dmul>
 800c144:	ec53 2b18 	vmov	r2, r3, d8
 800c148:	ec41 0b19 	vmov	d9, r0, r1
 800c14c:	ec51 0b18 	vmov	r0, r1, d8
 800c150:	f7f4 fa5a 	bl	8000608 <__aeabi_dmul>
 800c154:	a37c      	add	r3, pc, #496	; (adr r3, 800c348 <__ieee754_pow+0x708>)
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	4604      	mov	r4, r0
 800c15c:	460d      	mov	r5, r1
 800c15e:	f7f4 fa53 	bl	8000608 <__aeabi_dmul>
 800c162:	a37b      	add	r3, pc, #492	; (adr r3, 800c350 <__ieee754_pow+0x710>)
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	f7f4 f898 	bl	800029c <__adddf3>
 800c16c:	4622      	mov	r2, r4
 800c16e:	462b      	mov	r3, r5
 800c170:	f7f4 fa4a 	bl	8000608 <__aeabi_dmul>
 800c174:	a378      	add	r3, pc, #480	; (adr r3, 800c358 <__ieee754_pow+0x718>)
 800c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c17a:	f7f4 f88f 	bl	800029c <__adddf3>
 800c17e:	4622      	mov	r2, r4
 800c180:	462b      	mov	r3, r5
 800c182:	f7f4 fa41 	bl	8000608 <__aeabi_dmul>
 800c186:	a376      	add	r3, pc, #472	; (adr r3, 800c360 <__ieee754_pow+0x720>)
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	f7f4 f886 	bl	800029c <__adddf3>
 800c190:	4622      	mov	r2, r4
 800c192:	462b      	mov	r3, r5
 800c194:	f7f4 fa38 	bl	8000608 <__aeabi_dmul>
 800c198:	a373      	add	r3, pc, #460	; (adr r3, 800c368 <__ieee754_pow+0x728>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	f7f4 f87d 	bl	800029c <__adddf3>
 800c1a2:	4622      	mov	r2, r4
 800c1a4:	462b      	mov	r3, r5
 800c1a6:	f7f4 fa2f 	bl	8000608 <__aeabi_dmul>
 800c1aa:	a371      	add	r3, pc, #452	; (adr r3, 800c370 <__ieee754_pow+0x730>)
 800c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b0:	f7f4 f874 	bl	800029c <__adddf3>
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4606      	mov	r6, r0
 800c1b8:	460f      	mov	r7, r1
 800c1ba:	462b      	mov	r3, r5
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	f7f4 fa22 	bl	8000608 <__aeabi_dmul>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	4639      	mov	r1, r7
 800c1cc:	f7f4 fa1c 	bl	8000608 <__aeabi_dmul>
 800c1d0:	4642      	mov	r2, r8
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	464b      	mov	r3, r9
 800c1d8:	ec51 0b18 	vmov	r0, r1, d8
 800c1dc:	f7f4 f85e 	bl	800029c <__adddf3>
 800c1e0:	ec53 2b19 	vmov	r2, r3, d9
 800c1e4:	f7f4 fa10 	bl	8000608 <__aeabi_dmul>
 800c1e8:	4622      	mov	r2, r4
 800c1ea:	462b      	mov	r3, r5
 800c1ec:	f7f4 f856 	bl	800029c <__adddf3>
 800c1f0:	4642      	mov	r2, r8
 800c1f2:	4682      	mov	sl, r0
 800c1f4:	468b      	mov	fp, r1
 800c1f6:	464b      	mov	r3, r9
 800c1f8:	4640      	mov	r0, r8
 800c1fa:	4649      	mov	r1, r9
 800c1fc:	f7f4 fa04 	bl	8000608 <__aeabi_dmul>
 800c200:	4b6b      	ldr	r3, [pc, #428]	; (800c3b0 <__ieee754_pow+0x770>)
 800c202:	2200      	movs	r2, #0
 800c204:	4606      	mov	r6, r0
 800c206:	460f      	mov	r7, r1
 800c208:	f7f4 f848 	bl	800029c <__adddf3>
 800c20c:	4652      	mov	r2, sl
 800c20e:	465b      	mov	r3, fp
 800c210:	f7f4 f844 	bl	800029c <__adddf3>
 800c214:	2000      	movs	r0, #0
 800c216:	4604      	mov	r4, r0
 800c218:	460d      	mov	r5, r1
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4640      	mov	r0, r8
 800c220:	4649      	mov	r1, r9
 800c222:	f7f4 f9f1 	bl	8000608 <__aeabi_dmul>
 800c226:	4b62      	ldr	r3, [pc, #392]	; (800c3b0 <__ieee754_pow+0x770>)
 800c228:	4680      	mov	r8, r0
 800c22a:	4689      	mov	r9, r1
 800c22c:	2200      	movs	r2, #0
 800c22e:	4620      	mov	r0, r4
 800c230:	4629      	mov	r1, r5
 800c232:	f7f4 f831 	bl	8000298 <__aeabi_dsub>
 800c236:	4632      	mov	r2, r6
 800c238:	463b      	mov	r3, r7
 800c23a:	f7f4 f82d 	bl	8000298 <__aeabi_dsub>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4650      	mov	r0, sl
 800c244:	4659      	mov	r1, fp
 800c246:	f7f4 f827 	bl	8000298 <__aeabi_dsub>
 800c24a:	ec53 2b18 	vmov	r2, r3, d8
 800c24e:	f7f4 f9db 	bl	8000608 <__aeabi_dmul>
 800c252:	4622      	mov	r2, r4
 800c254:	4606      	mov	r6, r0
 800c256:	460f      	mov	r7, r1
 800c258:	462b      	mov	r3, r5
 800c25a:	ec51 0b19 	vmov	r0, r1, d9
 800c25e:	f7f4 f9d3 	bl	8000608 <__aeabi_dmul>
 800c262:	4602      	mov	r2, r0
 800c264:	460b      	mov	r3, r1
 800c266:	4630      	mov	r0, r6
 800c268:	4639      	mov	r1, r7
 800c26a:	f7f4 f817 	bl	800029c <__adddf3>
 800c26e:	4606      	mov	r6, r0
 800c270:	460f      	mov	r7, r1
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4640      	mov	r0, r8
 800c278:	4649      	mov	r1, r9
 800c27a:	f7f4 f80f 	bl	800029c <__adddf3>
 800c27e:	a33e      	add	r3, pc, #248	; (adr r3, 800c378 <__ieee754_pow+0x738>)
 800c280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c284:	2000      	movs	r0, #0
 800c286:	4604      	mov	r4, r0
 800c288:	460d      	mov	r5, r1
 800c28a:	f7f4 f9bd 	bl	8000608 <__aeabi_dmul>
 800c28e:	4642      	mov	r2, r8
 800c290:	ec41 0b18 	vmov	d8, r0, r1
 800c294:	464b      	mov	r3, r9
 800c296:	4620      	mov	r0, r4
 800c298:	4629      	mov	r1, r5
 800c29a:	f7f3 fffd 	bl	8000298 <__aeabi_dsub>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	4639      	mov	r1, r7
 800c2a6:	f7f3 fff7 	bl	8000298 <__aeabi_dsub>
 800c2aa:	a335      	add	r3, pc, #212	; (adr r3, 800c380 <__ieee754_pow+0x740>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7f4 f9aa 	bl	8000608 <__aeabi_dmul>
 800c2b4:	a334      	add	r3, pc, #208	; (adr r3, 800c388 <__ieee754_pow+0x748>)
 800c2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460f      	mov	r7, r1
 800c2be:	4620      	mov	r0, r4
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	f7f4 f9a1 	bl	8000608 <__aeabi_dmul>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	4639      	mov	r1, r7
 800c2ce:	f7f3 ffe5 	bl	800029c <__adddf3>
 800c2d2:	9a07      	ldr	r2, [sp, #28]
 800c2d4:	4b37      	ldr	r3, [pc, #220]	; (800c3b4 <__ieee754_pow+0x774>)
 800c2d6:	4413      	add	r3, r2
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f7f3 ffde 	bl	800029c <__adddf3>
 800c2e0:	4682      	mov	sl, r0
 800c2e2:	9805      	ldr	r0, [sp, #20]
 800c2e4:	468b      	mov	fp, r1
 800c2e6:	f7f4 f925 	bl	8000534 <__aeabi_i2d>
 800c2ea:	9a07      	ldr	r2, [sp, #28]
 800c2ec:	4b32      	ldr	r3, [pc, #200]	; (800c3b8 <__ieee754_pow+0x778>)
 800c2ee:	4413      	add	r3, r2
 800c2f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2f4:	4606      	mov	r6, r0
 800c2f6:	460f      	mov	r7, r1
 800c2f8:	4652      	mov	r2, sl
 800c2fa:	465b      	mov	r3, fp
 800c2fc:	ec51 0b18 	vmov	r0, r1, d8
 800c300:	f7f3 ffcc 	bl	800029c <__adddf3>
 800c304:	4642      	mov	r2, r8
 800c306:	464b      	mov	r3, r9
 800c308:	f7f3 ffc8 	bl	800029c <__adddf3>
 800c30c:	4632      	mov	r2, r6
 800c30e:	463b      	mov	r3, r7
 800c310:	f7f3 ffc4 	bl	800029c <__adddf3>
 800c314:	2000      	movs	r0, #0
 800c316:	4632      	mov	r2, r6
 800c318:	463b      	mov	r3, r7
 800c31a:	4604      	mov	r4, r0
 800c31c:	460d      	mov	r5, r1
 800c31e:	f7f3 ffbb 	bl	8000298 <__aeabi_dsub>
 800c322:	4642      	mov	r2, r8
 800c324:	464b      	mov	r3, r9
 800c326:	f7f3 ffb7 	bl	8000298 <__aeabi_dsub>
 800c32a:	ec53 2b18 	vmov	r2, r3, d8
 800c32e:	f7f3 ffb3 	bl	8000298 <__aeabi_dsub>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	4650      	mov	r0, sl
 800c338:	4659      	mov	r1, fp
 800c33a:	e610      	b.n	800bf5e <__ieee754_pow+0x31e>
 800c33c:	2401      	movs	r4, #1
 800c33e:	e6a1      	b.n	800c084 <__ieee754_pow+0x444>
 800c340:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c390 <__ieee754_pow+0x750>
 800c344:	e617      	b.n	800bf76 <__ieee754_pow+0x336>
 800c346:	bf00      	nop
 800c348:	4a454eef 	.word	0x4a454eef
 800c34c:	3fca7e28 	.word	0x3fca7e28
 800c350:	93c9db65 	.word	0x93c9db65
 800c354:	3fcd864a 	.word	0x3fcd864a
 800c358:	a91d4101 	.word	0xa91d4101
 800c35c:	3fd17460 	.word	0x3fd17460
 800c360:	518f264d 	.word	0x518f264d
 800c364:	3fd55555 	.word	0x3fd55555
 800c368:	db6fabff 	.word	0xdb6fabff
 800c36c:	3fdb6db6 	.word	0x3fdb6db6
 800c370:	33333303 	.word	0x33333303
 800c374:	3fe33333 	.word	0x3fe33333
 800c378:	e0000000 	.word	0xe0000000
 800c37c:	3feec709 	.word	0x3feec709
 800c380:	dc3a03fd 	.word	0xdc3a03fd
 800c384:	3feec709 	.word	0x3feec709
 800c388:	145b01f5 	.word	0x145b01f5
 800c38c:	be3e2fe0 	.word	0xbe3e2fe0
 800c390:	00000000 	.word	0x00000000
 800c394:	3ff00000 	.word	0x3ff00000
 800c398:	7ff00000 	.word	0x7ff00000
 800c39c:	43400000 	.word	0x43400000
 800c3a0:	0003988e 	.word	0x0003988e
 800c3a4:	000bb679 	.word	0x000bb679
 800c3a8:	0800d0a0 	.word	0x0800d0a0
 800c3ac:	3ff00000 	.word	0x3ff00000
 800c3b0:	40080000 	.word	0x40080000
 800c3b4:	0800d0c0 	.word	0x0800d0c0
 800c3b8:	0800d0b0 	.word	0x0800d0b0
 800c3bc:	a3b5      	add	r3, pc, #724	; (adr r3, 800c694 <__ieee754_pow+0xa54>)
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	4640      	mov	r0, r8
 800c3c4:	4649      	mov	r1, r9
 800c3c6:	f7f3 ff69 	bl	800029c <__adddf3>
 800c3ca:	4622      	mov	r2, r4
 800c3cc:	ec41 0b1a 	vmov	d10, r0, r1
 800c3d0:	462b      	mov	r3, r5
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	f7f3 ff5f 	bl	8000298 <__aeabi_dsub>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	ec51 0b1a 	vmov	r0, r1, d10
 800c3e2:	f7f4 fba1 	bl	8000b28 <__aeabi_dcmpgt>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	f47f ae04 	bne.w	800bff4 <__ieee754_pow+0x3b4>
 800c3ec:	4aa4      	ldr	r2, [pc, #656]	; (800c680 <__ieee754_pow+0xa40>)
 800c3ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	f340 8108 	ble.w	800c608 <__ieee754_pow+0x9c8>
 800c3f8:	151b      	asrs	r3, r3, #20
 800c3fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c3fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c402:	fa4a f303 	asr.w	r3, sl, r3
 800c406:	445b      	add	r3, fp
 800c408:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c40c:	4e9d      	ldr	r6, [pc, #628]	; (800c684 <__ieee754_pow+0xa44>)
 800c40e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c412:	4116      	asrs	r6, r2
 800c414:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c418:	2000      	movs	r0, #0
 800c41a:	ea23 0106 	bic.w	r1, r3, r6
 800c41e:	f1c2 0214 	rsb	r2, r2, #20
 800c422:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c426:	fa4a fa02 	asr.w	sl, sl, r2
 800c42a:	f1bb 0f00 	cmp.w	fp, #0
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4620      	mov	r0, r4
 800c434:	4629      	mov	r1, r5
 800c436:	bfb8      	it	lt
 800c438:	f1ca 0a00 	rsblt	sl, sl, #0
 800c43c:	f7f3 ff2c 	bl	8000298 <__aeabi_dsub>
 800c440:	ec41 0b19 	vmov	d9, r0, r1
 800c444:	4642      	mov	r2, r8
 800c446:	464b      	mov	r3, r9
 800c448:	ec51 0b19 	vmov	r0, r1, d9
 800c44c:	f7f3 ff26 	bl	800029c <__adddf3>
 800c450:	a37b      	add	r3, pc, #492	; (adr r3, 800c640 <__ieee754_pow+0xa00>)
 800c452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c456:	2000      	movs	r0, #0
 800c458:	4604      	mov	r4, r0
 800c45a:	460d      	mov	r5, r1
 800c45c:	f7f4 f8d4 	bl	8000608 <__aeabi_dmul>
 800c460:	ec53 2b19 	vmov	r2, r3, d9
 800c464:	4606      	mov	r6, r0
 800c466:	460f      	mov	r7, r1
 800c468:	4620      	mov	r0, r4
 800c46a:	4629      	mov	r1, r5
 800c46c:	f7f3 ff14 	bl	8000298 <__aeabi_dsub>
 800c470:	4602      	mov	r2, r0
 800c472:	460b      	mov	r3, r1
 800c474:	4640      	mov	r0, r8
 800c476:	4649      	mov	r1, r9
 800c478:	f7f3 ff0e 	bl	8000298 <__aeabi_dsub>
 800c47c:	a372      	add	r3, pc, #456	; (adr r3, 800c648 <__ieee754_pow+0xa08>)
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	f7f4 f8c1 	bl	8000608 <__aeabi_dmul>
 800c486:	a372      	add	r3, pc, #456	; (adr r3, 800c650 <__ieee754_pow+0xa10>)
 800c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48c:	4680      	mov	r8, r0
 800c48e:	4689      	mov	r9, r1
 800c490:	4620      	mov	r0, r4
 800c492:	4629      	mov	r1, r5
 800c494:	f7f4 f8b8 	bl	8000608 <__aeabi_dmul>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	4640      	mov	r0, r8
 800c49e:	4649      	mov	r1, r9
 800c4a0:	f7f3 fefc 	bl	800029c <__adddf3>
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	460d      	mov	r5, r1
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	4639      	mov	r1, r7
 800c4b0:	f7f3 fef4 	bl	800029c <__adddf3>
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	463b      	mov	r3, r7
 800c4b8:	4680      	mov	r8, r0
 800c4ba:	4689      	mov	r9, r1
 800c4bc:	f7f3 feec 	bl	8000298 <__aeabi_dsub>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f7f3 fee6 	bl	8000298 <__aeabi_dsub>
 800c4cc:	4642      	mov	r2, r8
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	460f      	mov	r7, r1
 800c4d2:	464b      	mov	r3, r9
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	f7f4 f896 	bl	8000608 <__aeabi_dmul>
 800c4dc:	a35e      	add	r3, pc, #376	; (adr r3, 800c658 <__ieee754_pow+0xa18>)
 800c4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	460d      	mov	r5, r1
 800c4e6:	f7f4 f88f 	bl	8000608 <__aeabi_dmul>
 800c4ea:	a35d      	add	r3, pc, #372	; (adr r3, 800c660 <__ieee754_pow+0xa20>)
 800c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f0:	f7f3 fed2 	bl	8000298 <__aeabi_dsub>
 800c4f4:	4622      	mov	r2, r4
 800c4f6:	462b      	mov	r3, r5
 800c4f8:	f7f4 f886 	bl	8000608 <__aeabi_dmul>
 800c4fc:	a35a      	add	r3, pc, #360	; (adr r3, 800c668 <__ieee754_pow+0xa28>)
 800c4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c502:	f7f3 fecb 	bl	800029c <__adddf3>
 800c506:	4622      	mov	r2, r4
 800c508:	462b      	mov	r3, r5
 800c50a:	f7f4 f87d 	bl	8000608 <__aeabi_dmul>
 800c50e:	a358      	add	r3, pc, #352	; (adr r3, 800c670 <__ieee754_pow+0xa30>)
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	f7f3 fec0 	bl	8000298 <__aeabi_dsub>
 800c518:	4622      	mov	r2, r4
 800c51a:	462b      	mov	r3, r5
 800c51c:	f7f4 f874 	bl	8000608 <__aeabi_dmul>
 800c520:	a355      	add	r3, pc, #340	; (adr r3, 800c678 <__ieee754_pow+0xa38>)
 800c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c526:	f7f3 feb9 	bl	800029c <__adddf3>
 800c52a:	4622      	mov	r2, r4
 800c52c:	462b      	mov	r3, r5
 800c52e:	f7f4 f86b 	bl	8000608 <__aeabi_dmul>
 800c532:	4602      	mov	r2, r0
 800c534:	460b      	mov	r3, r1
 800c536:	4640      	mov	r0, r8
 800c538:	4649      	mov	r1, r9
 800c53a:	f7f3 fead 	bl	8000298 <__aeabi_dsub>
 800c53e:	4604      	mov	r4, r0
 800c540:	460d      	mov	r5, r1
 800c542:	4602      	mov	r2, r0
 800c544:	460b      	mov	r3, r1
 800c546:	4640      	mov	r0, r8
 800c548:	4649      	mov	r1, r9
 800c54a:	f7f4 f85d 	bl	8000608 <__aeabi_dmul>
 800c54e:	2200      	movs	r2, #0
 800c550:	ec41 0b19 	vmov	d9, r0, r1
 800c554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c558:	4620      	mov	r0, r4
 800c55a:	4629      	mov	r1, r5
 800c55c:	f7f3 fe9c 	bl	8000298 <__aeabi_dsub>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	ec51 0b19 	vmov	r0, r1, d9
 800c568:	f7f4 f978 	bl	800085c <__aeabi_ddiv>
 800c56c:	4632      	mov	r2, r6
 800c56e:	4604      	mov	r4, r0
 800c570:	460d      	mov	r5, r1
 800c572:	463b      	mov	r3, r7
 800c574:	4640      	mov	r0, r8
 800c576:	4649      	mov	r1, r9
 800c578:	f7f4 f846 	bl	8000608 <__aeabi_dmul>
 800c57c:	4632      	mov	r2, r6
 800c57e:	463b      	mov	r3, r7
 800c580:	f7f3 fe8c 	bl	800029c <__adddf3>
 800c584:	4602      	mov	r2, r0
 800c586:	460b      	mov	r3, r1
 800c588:	4620      	mov	r0, r4
 800c58a:	4629      	mov	r1, r5
 800c58c:	f7f3 fe84 	bl	8000298 <__aeabi_dsub>
 800c590:	4642      	mov	r2, r8
 800c592:	464b      	mov	r3, r9
 800c594:	f7f3 fe80 	bl	8000298 <__aeabi_dsub>
 800c598:	460b      	mov	r3, r1
 800c59a:	4602      	mov	r2, r0
 800c59c:	493a      	ldr	r1, [pc, #232]	; (800c688 <__ieee754_pow+0xa48>)
 800c59e:	2000      	movs	r0, #0
 800c5a0:	f7f3 fe7a 	bl	8000298 <__aeabi_dsub>
 800c5a4:	ec41 0b10 	vmov	d0, r0, r1
 800c5a8:	ee10 3a90 	vmov	r3, s1
 800c5ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c5b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5b4:	da2b      	bge.n	800c60e <__ieee754_pow+0x9ce>
 800c5b6:	4650      	mov	r0, sl
 800c5b8:	f000 f966 	bl	800c888 <scalbn>
 800c5bc:	ec51 0b10 	vmov	r0, r1, d0
 800c5c0:	ec53 2b18 	vmov	r2, r3, d8
 800c5c4:	f7ff bbed 	b.w	800bda2 <__ieee754_pow+0x162>
 800c5c8:	4b30      	ldr	r3, [pc, #192]	; (800c68c <__ieee754_pow+0xa4c>)
 800c5ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c5ce:	429e      	cmp	r6, r3
 800c5d0:	f77f af0c 	ble.w	800c3ec <__ieee754_pow+0x7ac>
 800c5d4:	4b2e      	ldr	r3, [pc, #184]	; (800c690 <__ieee754_pow+0xa50>)
 800c5d6:	440b      	add	r3, r1
 800c5d8:	4303      	orrs	r3, r0
 800c5da:	d009      	beq.n	800c5f0 <__ieee754_pow+0x9b0>
 800c5dc:	ec51 0b18 	vmov	r0, r1, d8
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f7f4 fa82 	bl	8000aec <__aeabi_dcmplt>
 800c5e8:	3800      	subs	r0, #0
 800c5ea:	bf18      	it	ne
 800c5ec:	2001      	movne	r0, #1
 800c5ee:	e447      	b.n	800be80 <__ieee754_pow+0x240>
 800c5f0:	4622      	mov	r2, r4
 800c5f2:	462b      	mov	r3, r5
 800c5f4:	f7f3 fe50 	bl	8000298 <__aeabi_dsub>
 800c5f8:	4642      	mov	r2, r8
 800c5fa:	464b      	mov	r3, r9
 800c5fc:	f7f4 fa8a 	bl	8000b14 <__aeabi_dcmpge>
 800c600:	2800      	cmp	r0, #0
 800c602:	f43f aef3 	beq.w	800c3ec <__ieee754_pow+0x7ac>
 800c606:	e7e9      	b.n	800c5dc <__ieee754_pow+0x99c>
 800c608:	f04f 0a00 	mov.w	sl, #0
 800c60c:	e71a      	b.n	800c444 <__ieee754_pow+0x804>
 800c60e:	ec51 0b10 	vmov	r0, r1, d0
 800c612:	4619      	mov	r1, r3
 800c614:	e7d4      	b.n	800c5c0 <__ieee754_pow+0x980>
 800c616:	491c      	ldr	r1, [pc, #112]	; (800c688 <__ieee754_pow+0xa48>)
 800c618:	2000      	movs	r0, #0
 800c61a:	f7ff bb30 	b.w	800bc7e <__ieee754_pow+0x3e>
 800c61e:	2000      	movs	r0, #0
 800c620:	2100      	movs	r1, #0
 800c622:	f7ff bb2c 	b.w	800bc7e <__ieee754_pow+0x3e>
 800c626:	4630      	mov	r0, r6
 800c628:	4639      	mov	r1, r7
 800c62a:	f7ff bb28 	b.w	800bc7e <__ieee754_pow+0x3e>
 800c62e:	9204      	str	r2, [sp, #16]
 800c630:	f7ff bb7a 	b.w	800bd28 <__ieee754_pow+0xe8>
 800c634:	2300      	movs	r3, #0
 800c636:	f7ff bb64 	b.w	800bd02 <__ieee754_pow+0xc2>
 800c63a:	bf00      	nop
 800c63c:	f3af 8000 	nop.w
 800c640:	00000000 	.word	0x00000000
 800c644:	3fe62e43 	.word	0x3fe62e43
 800c648:	fefa39ef 	.word	0xfefa39ef
 800c64c:	3fe62e42 	.word	0x3fe62e42
 800c650:	0ca86c39 	.word	0x0ca86c39
 800c654:	be205c61 	.word	0xbe205c61
 800c658:	72bea4d0 	.word	0x72bea4d0
 800c65c:	3e663769 	.word	0x3e663769
 800c660:	c5d26bf1 	.word	0xc5d26bf1
 800c664:	3ebbbd41 	.word	0x3ebbbd41
 800c668:	af25de2c 	.word	0xaf25de2c
 800c66c:	3f11566a 	.word	0x3f11566a
 800c670:	16bebd93 	.word	0x16bebd93
 800c674:	3f66c16c 	.word	0x3f66c16c
 800c678:	5555553e 	.word	0x5555553e
 800c67c:	3fc55555 	.word	0x3fc55555
 800c680:	3fe00000 	.word	0x3fe00000
 800c684:	000fffff 	.word	0x000fffff
 800c688:	3ff00000 	.word	0x3ff00000
 800c68c:	4090cbff 	.word	0x4090cbff
 800c690:	3f6f3400 	.word	0x3f6f3400
 800c694:	652b82fe 	.word	0x652b82fe
 800c698:	3c971547 	.word	0x3c971547

0800c69c <__ieee754_sqrt>:
 800c69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a0:	ec55 4b10 	vmov	r4, r5, d0
 800c6a4:	4e55      	ldr	r6, [pc, #340]	; (800c7fc <__ieee754_sqrt+0x160>)
 800c6a6:	43ae      	bics	r6, r5
 800c6a8:	ee10 0a10 	vmov	r0, s0
 800c6ac:	ee10 3a10 	vmov	r3, s0
 800c6b0:	462a      	mov	r2, r5
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	d110      	bne.n	800c6d8 <__ieee754_sqrt+0x3c>
 800c6b6:	ee10 2a10 	vmov	r2, s0
 800c6ba:	462b      	mov	r3, r5
 800c6bc:	f7f3 ffa4 	bl	8000608 <__aeabi_dmul>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	f7f3 fde8 	bl	800029c <__adddf3>
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	460d      	mov	r5, r1
 800c6d0:	ec45 4b10 	vmov	d0, r4, r5
 800c6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d8:	2d00      	cmp	r5, #0
 800c6da:	dc10      	bgt.n	800c6fe <__ieee754_sqrt+0x62>
 800c6dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c6e0:	4330      	orrs	r0, r6
 800c6e2:	d0f5      	beq.n	800c6d0 <__ieee754_sqrt+0x34>
 800c6e4:	b15d      	cbz	r5, 800c6fe <__ieee754_sqrt+0x62>
 800c6e6:	ee10 2a10 	vmov	r2, s0
 800c6ea:	462b      	mov	r3, r5
 800c6ec:	ee10 0a10 	vmov	r0, s0
 800c6f0:	f7f3 fdd2 	bl	8000298 <__aeabi_dsub>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	f7f4 f8b0 	bl	800085c <__aeabi_ddiv>
 800c6fc:	e7e6      	b.n	800c6cc <__ieee754_sqrt+0x30>
 800c6fe:	1512      	asrs	r2, r2, #20
 800c700:	d074      	beq.n	800c7ec <__ieee754_sqrt+0x150>
 800c702:	07d4      	lsls	r4, r2, #31
 800c704:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c708:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c70c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c710:	bf5e      	ittt	pl
 800c712:	0fda      	lsrpl	r2, r3, #31
 800c714:	005b      	lslpl	r3, r3, #1
 800c716:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c71a:	2400      	movs	r4, #0
 800c71c:	0fda      	lsrs	r2, r3, #31
 800c71e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c722:	107f      	asrs	r7, r7, #1
 800c724:	005b      	lsls	r3, r3, #1
 800c726:	2516      	movs	r5, #22
 800c728:	4620      	mov	r0, r4
 800c72a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c72e:	1886      	adds	r6, r0, r2
 800c730:	428e      	cmp	r6, r1
 800c732:	bfde      	ittt	le
 800c734:	1b89      	suble	r1, r1, r6
 800c736:	18b0      	addle	r0, r6, r2
 800c738:	18a4      	addle	r4, r4, r2
 800c73a:	0049      	lsls	r1, r1, #1
 800c73c:	3d01      	subs	r5, #1
 800c73e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c742:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c746:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c74a:	d1f0      	bne.n	800c72e <__ieee754_sqrt+0x92>
 800c74c:	462a      	mov	r2, r5
 800c74e:	f04f 0e20 	mov.w	lr, #32
 800c752:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c756:	4281      	cmp	r1, r0
 800c758:	eb06 0c05 	add.w	ip, r6, r5
 800c75c:	dc02      	bgt.n	800c764 <__ieee754_sqrt+0xc8>
 800c75e:	d113      	bne.n	800c788 <__ieee754_sqrt+0xec>
 800c760:	459c      	cmp	ip, r3
 800c762:	d811      	bhi.n	800c788 <__ieee754_sqrt+0xec>
 800c764:	f1bc 0f00 	cmp.w	ip, #0
 800c768:	eb0c 0506 	add.w	r5, ip, r6
 800c76c:	da43      	bge.n	800c7f6 <__ieee754_sqrt+0x15a>
 800c76e:	2d00      	cmp	r5, #0
 800c770:	db41      	blt.n	800c7f6 <__ieee754_sqrt+0x15a>
 800c772:	f100 0801 	add.w	r8, r0, #1
 800c776:	1a09      	subs	r1, r1, r0
 800c778:	459c      	cmp	ip, r3
 800c77a:	bf88      	it	hi
 800c77c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c780:	eba3 030c 	sub.w	r3, r3, ip
 800c784:	4432      	add	r2, r6
 800c786:	4640      	mov	r0, r8
 800c788:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c78c:	f1be 0e01 	subs.w	lr, lr, #1
 800c790:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c794:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c798:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c79c:	d1db      	bne.n	800c756 <__ieee754_sqrt+0xba>
 800c79e:	430b      	orrs	r3, r1
 800c7a0:	d006      	beq.n	800c7b0 <__ieee754_sqrt+0x114>
 800c7a2:	1c50      	adds	r0, r2, #1
 800c7a4:	bf13      	iteet	ne
 800c7a6:	3201      	addne	r2, #1
 800c7a8:	3401      	addeq	r4, #1
 800c7aa:	4672      	moveq	r2, lr
 800c7ac:	f022 0201 	bicne.w	r2, r2, #1
 800c7b0:	1063      	asrs	r3, r4, #1
 800c7b2:	0852      	lsrs	r2, r2, #1
 800c7b4:	07e1      	lsls	r1, r4, #31
 800c7b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c7ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c7be:	bf48      	it	mi
 800c7c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c7c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c7c8:	4614      	mov	r4, r2
 800c7ca:	e781      	b.n	800c6d0 <__ieee754_sqrt+0x34>
 800c7cc:	0ad9      	lsrs	r1, r3, #11
 800c7ce:	3815      	subs	r0, #21
 800c7d0:	055b      	lsls	r3, r3, #21
 800c7d2:	2900      	cmp	r1, #0
 800c7d4:	d0fa      	beq.n	800c7cc <__ieee754_sqrt+0x130>
 800c7d6:	02cd      	lsls	r5, r1, #11
 800c7d8:	d50a      	bpl.n	800c7f0 <__ieee754_sqrt+0x154>
 800c7da:	f1c2 0420 	rsb	r4, r2, #32
 800c7de:	fa23 f404 	lsr.w	r4, r3, r4
 800c7e2:	1e55      	subs	r5, r2, #1
 800c7e4:	4093      	lsls	r3, r2
 800c7e6:	4321      	orrs	r1, r4
 800c7e8:	1b42      	subs	r2, r0, r5
 800c7ea:	e78a      	b.n	800c702 <__ieee754_sqrt+0x66>
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	e7f0      	b.n	800c7d2 <__ieee754_sqrt+0x136>
 800c7f0:	0049      	lsls	r1, r1, #1
 800c7f2:	3201      	adds	r2, #1
 800c7f4:	e7ef      	b.n	800c7d6 <__ieee754_sqrt+0x13a>
 800c7f6:	4680      	mov	r8, r0
 800c7f8:	e7bd      	b.n	800c776 <__ieee754_sqrt+0xda>
 800c7fa:	bf00      	nop
 800c7fc:	7ff00000 	.word	0x7ff00000

0800c800 <with_errno>:
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	4604      	mov	r4, r0
 800c804:	460d      	mov	r5, r1
 800c806:	4616      	mov	r6, r2
 800c808:	f7fc fa86 	bl	8008d18 <__errno>
 800c80c:	4629      	mov	r1, r5
 800c80e:	6006      	str	r6, [r0, #0]
 800c810:	4620      	mov	r0, r4
 800c812:	bd70      	pop	{r4, r5, r6, pc}

0800c814 <xflow>:
 800c814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c816:	4614      	mov	r4, r2
 800c818:	461d      	mov	r5, r3
 800c81a:	b108      	cbz	r0, 800c820 <xflow+0xc>
 800c81c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c820:	e9cd 2300 	strd	r2, r3, [sp]
 800c824:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c828:	4620      	mov	r0, r4
 800c82a:	4629      	mov	r1, r5
 800c82c:	f7f3 feec 	bl	8000608 <__aeabi_dmul>
 800c830:	2222      	movs	r2, #34	; 0x22
 800c832:	b003      	add	sp, #12
 800c834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c838:	f7ff bfe2 	b.w	800c800 <with_errno>

0800c83c <__math_uflow>:
 800c83c:	b508      	push	{r3, lr}
 800c83e:	2200      	movs	r2, #0
 800c840:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c844:	f7ff ffe6 	bl	800c814 <xflow>
 800c848:	ec41 0b10 	vmov	d0, r0, r1
 800c84c:	bd08      	pop	{r3, pc}

0800c84e <__math_oflow>:
 800c84e:	b508      	push	{r3, lr}
 800c850:	2200      	movs	r2, #0
 800c852:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c856:	f7ff ffdd 	bl	800c814 <xflow>
 800c85a:	ec41 0b10 	vmov	d0, r0, r1
 800c85e:	bd08      	pop	{r3, pc}

0800c860 <fabs>:
 800c860:	ec51 0b10 	vmov	r0, r1, d0
 800c864:	ee10 2a10 	vmov	r2, s0
 800c868:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c86c:	ec43 2b10 	vmov	d0, r2, r3
 800c870:	4770      	bx	lr

0800c872 <finite>:
 800c872:	b082      	sub	sp, #8
 800c874:	ed8d 0b00 	vstr	d0, [sp]
 800c878:	9801      	ldr	r0, [sp, #4]
 800c87a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c87e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c882:	0fc0      	lsrs	r0, r0, #31
 800c884:	b002      	add	sp, #8
 800c886:	4770      	bx	lr

0800c888 <scalbn>:
 800c888:	b570      	push	{r4, r5, r6, lr}
 800c88a:	ec55 4b10 	vmov	r4, r5, d0
 800c88e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c892:	4606      	mov	r6, r0
 800c894:	462b      	mov	r3, r5
 800c896:	b99a      	cbnz	r2, 800c8c0 <scalbn+0x38>
 800c898:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c89c:	4323      	orrs	r3, r4
 800c89e:	d036      	beq.n	800c90e <scalbn+0x86>
 800c8a0:	4b39      	ldr	r3, [pc, #228]	; (800c988 <scalbn+0x100>)
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	ee10 0a10 	vmov	r0, s0
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f7f3 fead 	bl	8000608 <__aeabi_dmul>
 800c8ae:	4b37      	ldr	r3, [pc, #220]	; (800c98c <scalbn+0x104>)
 800c8b0:	429e      	cmp	r6, r3
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	da10      	bge.n	800c8da <scalbn+0x52>
 800c8b8:	a32b      	add	r3, pc, #172	; (adr r3, 800c968 <scalbn+0xe0>)
 800c8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8be:	e03a      	b.n	800c936 <scalbn+0xae>
 800c8c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c8c4:	428a      	cmp	r2, r1
 800c8c6:	d10c      	bne.n	800c8e2 <scalbn+0x5a>
 800c8c8:	ee10 2a10 	vmov	r2, s0
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	f7f3 fce4 	bl	800029c <__adddf3>
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	460d      	mov	r5, r1
 800c8d8:	e019      	b.n	800c90e <scalbn+0x86>
 800c8da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c8de:	460b      	mov	r3, r1
 800c8e0:	3a36      	subs	r2, #54	; 0x36
 800c8e2:	4432      	add	r2, r6
 800c8e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c8e8:	428a      	cmp	r2, r1
 800c8ea:	dd08      	ble.n	800c8fe <scalbn+0x76>
 800c8ec:	2d00      	cmp	r5, #0
 800c8ee:	a120      	add	r1, pc, #128	; (adr r1, 800c970 <scalbn+0xe8>)
 800c8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8f4:	da1c      	bge.n	800c930 <scalbn+0xa8>
 800c8f6:	a120      	add	r1, pc, #128	; (adr r1, 800c978 <scalbn+0xf0>)
 800c8f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8fc:	e018      	b.n	800c930 <scalbn+0xa8>
 800c8fe:	2a00      	cmp	r2, #0
 800c900:	dd08      	ble.n	800c914 <scalbn+0x8c>
 800c902:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c906:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c90a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c90e:	ec45 4b10 	vmov	d0, r4, r5
 800c912:	bd70      	pop	{r4, r5, r6, pc}
 800c914:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c918:	da19      	bge.n	800c94e <scalbn+0xc6>
 800c91a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c91e:	429e      	cmp	r6, r3
 800c920:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c924:	dd0a      	ble.n	800c93c <scalbn+0xb4>
 800c926:	a112      	add	r1, pc, #72	; (adr r1, 800c970 <scalbn+0xe8>)
 800c928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1e2      	bne.n	800c8f6 <scalbn+0x6e>
 800c930:	a30f      	add	r3, pc, #60	; (adr r3, 800c970 <scalbn+0xe8>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	f7f3 fe67 	bl	8000608 <__aeabi_dmul>
 800c93a:	e7cb      	b.n	800c8d4 <scalbn+0x4c>
 800c93c:	a10a      	add	r1, pc, #40	; (adr r1, 800c968 <scalbn+0xe0>)
 800c93e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d0b8      	beq.n	800c8b8 <scalbn+0x30>
 800c946:	a10e      	add	r1, pc, #56	; (adr r1, 800c980 <scalbn+0xf8>)
 800c948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c94c:	e7b4      	b.n	800c8b8 <scalbn+0x30>
 800c94e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c952:	3236      	adds	r2, #54	; 0x36
 800c954:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c958:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c95c:	4620      	mov	r0, r4
 800c95e:	4b0c      	ldr	r3, [pc, #48]	; (800c990 <scalbn+0x108>)
 800c960:	2200      	movs	r2, #0
 800c962:	e7e8      	b.n	800c936 <scalbn+0xae>
 800c964:	f3af 8000 	nop.w
 800c968:	c2f8f359 	.word	0xc2f8f359
 800c96c:	01a56e1f 	.word	0x01a56e1f
 800c970:	8800759c 	.word	0x8800759c
 800c974:	7e37e43c 	.word	0x7e37e43c
 800c978:	8800759c 	.word	0x8800759c
 800c97c:	fe37e43c 	.word	0xfe37e43c
 800c980:	c2f8f359 	.word	0xc2f8f359
 800c984:	81a56e1f 	.word	0x81a56e1f
 800c988:	43500000 	.word	0x43500000
 800c98c:	ffff3cb0 	.word	0xffff3cb0
 800c990:	3c900000 	.word	0x3c900000

0800c994 <_init>:
 800c994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c996:	bf00      	nop
 800c998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99a:	bc08      	pop	{r3}
 800c99c:	469e      	mov	lr, r3
 800c99e:	4770      	bx	lr

0800c9a0 <_fini>:
 800c9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9a2:	bf00      	nop
 800c9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a6:	bc08      	pop	{r3}
 800c9a8:	469e      	mov	lr, r3
 800c9aa:	4770      	bx	lr
