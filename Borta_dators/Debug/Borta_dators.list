
Borta_dators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c884  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0800ca28  0800ca28  0001ca28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d160  0800d160  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800d160  0800d160  0001d160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d168  0800d168  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d168  0800d168  0001d168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d16c  0800d16c  0001d16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800d170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010d8  20000218  0800d384  00020218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012f0  0800d384  000212f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cda8  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000457f  00000000  00000000  0004cfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001c3eb  00000000  00000000  0005156b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  0006d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001808  00000000  00000000  0006f168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b5ae  00000000  00000000  00070970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a1f8  00000000  00000000  0008bf1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c444  00000000  00000000  000b6116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015255a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bc4  00000000  00000000  001525b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ca0c 	.word	0x0800ca0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800ca0c 	.word	0x0800ca0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <BME280_Init>:
struct BME280_temperature_data_struct Temperature_Data;
struct BME280_humidity_data_struct Humidity_Data;


HAL_StatusTypeDef BME280_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	b510      	push	{r4, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	ac08      	add	r4, sp, #32
 8000ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000efc:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
	HAL_StatusTypeDef status;
	uint8_t data;

	// RESET
	data = 0xB6;
 8000f00:	23b6      	movs	r3, #182	; 0xb6
 8000f02:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_reset, 1, &data, 1, Timeout);
 8000f06:	9402      	str	r4, [sp, #8]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f10d 0217 	add.w	r2, sp, #23
 8000f10:	9200      	str	r2, [sp, #0]
 8000f12:	22e0      	movs	r2, #224	; 0xe0
 8000f14:	21ec      	movs	r1, #236	; 0xec
 8000f16:	a808      	add	r0, sp, #32
 8000f18:	f004 f976 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b128      	cbz	r0, 8000f2c <BME280_Init+0x3c>

	// Temperature/Pressure measure settings
	data = 0b10001111;
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_meas, 1, &data, 1, Timeout);
	return status;
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	b006      	add	sp, #24
 8000f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f28:	b004      	add	sp, #16
 8000f2a:	4770      	bx	lr
	data = 0b10000000;
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_config, 1, &data, 1, Timeout);
 8000f32:	9402      	str	r4, [sp, #8]
 8000f34:	2301      	movs	r3, #1
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	f10d 0217 	add.w	r2, sp, #23
 8000f3c:	9200      	str	r2, [sp, #0]
 8000f3e:	22f5      	movs	r2, #245	; 0xf5
 8000f40:	21ec      	movs	r1, #236	; 0xec
 8000f42:	a808      	add	r0, sp, #32
 8000f44:	f004 f960 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2800      	cmp	r0, #0
 8000f4c:	d1e8      	bne.n	8000f20 <BME280_Init+0x30>
	data = 0b00000011;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_hum, 1, &data, 1, Timeout);
 8000f54:	9402      	str	r4, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f10d 0217 	add.w	r2, sp, #23
 8000f5e:	9200      	str	r2, [sp, #0]
 8000f60:	22f2      	movs	r2, #242	; 0xf2
 8000f62:	21ec      	movs	r1, #236	; 0xec
 8000f64:	a808      	add	r0, sp, #32
 8000f66:	f004 f94f 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2800      	cmp	r0, #0
 8000f6e:	d1d7      	bne.n	8000f20 <BME280_Init+0x30>
	data = 0b10001111;
 8000f70:	238f      	movs	r3, #143	; 0x8f
 8000f72:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, BME280_address, BME280_ctrl_meas, 1, &data, 1, Timeout);
 8000f76:	9402      	str	r4, [sp, #8]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	f10d 0217 	add.w	r2, sp, #23
 8000f80:	9200      	str	r2, [sp, #0]
 8000f82:	22f4      	movs	r2, #244	; 0xf4
 8000f84:	21ec      	movs	r1, #236	; 0xec
 8000f86:	a808      	add	r0, sp, #32
 8000f88:	f004 f93e 	bl	8005208 <HAL_I2C_Mem_Write>
 8000f8c:	4603      	mov	r3, r0
	return status;
 8000f8e:	e7c7      	b.n	8000f20 <BME280_Init+0x30>

08000f90 <BME280_Get_ID>:


HAL_StatusTypeDef BME280_Get_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 8000f90:	b084      	sub	sp, #16
 8000f92:	b500      	push	{lr}
 8000f94:	b085      	sub	sp, #20
 8000f96:	f10d 0c18 	add.w	ip, sp, #24
 8000f9a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	return HAL_I2C_Mem_Read(&handle, BME280_address, BME280_ID, 1, ptr_ID, 1, Timeout);
 8000f9e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	22d0      	movs	r2, #208	; 0xd0
 8000fae:	21ec      	movs	r1, #236	; 0xec
 8000fb0:	4660      	mov	r0, ip
 8000fb2:	f004 f9db 	bl	800536c <HAL_I2C_Mem_Read>
}
 8000fb6:	b005      	add	sp, #20
 8000fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000fbc:	b004      	add	sp, #16
 8000fbe:	4770      	bx	lr

08000fc0 <BME280_Calib_Read>:


HAL_StatusTypeDef BME280_Calib_Read(I2C_HandleTypeDef handle, BME280_Calib_Data_struct *Calib_data, uint16_t Timeout)
{
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	b530      	push	{r4, r5, lr}
 8000fc4:	b091      	sub	sp, #68	; 0x44
 8000fc6:	ac14      	add	r4, sp, #80	; 0x50
 8000fc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fcc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8000fce:	f8bd 50a8 	ldrh.w	r5, [sp, #168]	; 0xa8
	HAL_StatusTypeDef status;
	uint8_t calib0[26];
	uint8_t calib1[16];

	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_calib1, 1, calib0, 26, Timeout);
 8000fd2:	9502      	str	r5, [sp, #8]
 8000fd4:	231a      	movs	r3, #26
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	ab09      	add	r3, sp, #36	; 0x24
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2288      	movs	r2, #136	; 0x88
 8000fe0:	21ec      	movs	r1, #236	; 0xec
 8000fe2:	a814      	add	r0, sp, #80	; 0x50
 8000fe4:	f004 f9c2 	bl	800536c <HAL_I2C_Mem_Read>
	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_calib2, 1, calib1, 16, Timeout);
 8000fe8:	9502      	str	r5, [sp, #8]
 8000fea:	2310      	movs	r3, #16
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	ab05      	add	r3, sp, #20
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	22e1      	movs	r2, #225	; 0xe1
 8000ff6:	21ec      	movs	r1, #236	; 0xec
 8000ff8:	a814      	add	r0, sp, #80	; 0x50
 8000ffa:	f004 f9b7 	bl	800536c <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d173      	bne.n	80010ea <BME280_Calib_Read+0x12a>
		return status;

	Calib_data->dig_T1 = calib0[0];
 8001002:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	Calib_data->dig_T1 += calib0[1] << 8;
 8001006:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
 800100a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800100e:	8023      	strh	r3, [r4, #0]

	Calib_data->dig_T2 = calib0[2];
 8001010:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
	Calib_data->dig_T2 += calib0[3] << 8;
 8001014:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8001018:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800101c:	8063      	strh	r3, [r4, #2]

	Calib_data->dig_T3 = calib0[4];
 800101e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
	Calib_data->dig_T3 += calib0[5] << 8;
 8001022:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8001026:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800102a:	80a3      	strh	r3, [r4, #4]

	Calib_data->dig_P1 = calib0[6];
 800102c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
	Calib_data->dig_P1 += calib0[7] << 8;
 8001030:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8001034:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001038:	80e3      	strh	r3, [r4, #6]

	Calib_data->dig_P2 = calib0[8];
 800103a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	Calib_data->dig_P2 += calib0[9] << 8;
 800103e:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 8001042:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001046:	8123      	strh	r3, [r4, #8]

	Calib_data->dig_P3 = calib0[10];
 8001048:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
	Calib_data->dig_P3 += calib0[11] << 8;
 800104c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8001050:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001054:	8163      	strh	r3, [r4, #10]

	Calib_data->dig_P4 = calib0[12];
 8001056:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	Calib_data->dig_P4 += calib0[13] << 8;
 800105a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 800105e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001062:	81a3      	strh	r3, [r4, #12]

	Calib_data->dig_P5 = calib0[14];
 8001064:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
	Calib_data->dig_P5 += calib0[15] << 8;
 8001068:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800106c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001070:	81e3      	strh	r3, [r4, #14]

	Calib_data->dig_P6 = calib0[16];
 8001072:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
	Calib_data->dig_P6 += calib0[17] << 8;
 8001076:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 800107a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800107e:	8223      	strh	r3, [r4, #16]

	Calib_data->dig_P7 = calib0[18];
 8001080:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
	Calib_data->dig_P7 += calib0[19] << 8;
 8001084:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
 8001088:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800108c:	8263      	strh	r3, [r4, #18]

	Calib_data->dig_P8 = calib0[20];
 800108e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	Calib_data->dig_P8 += calib0[21] << 8;
 8001092:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8001096:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800109a:	82a3      	strh	r3, [r4, #20]

	Calib_data->dig_P9 = calib0[22];
 800109c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
	Calib_data->dig_P9 += calib0[23] << 8;
 80010a0:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
 80010a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80010a8:	82e3      	strh	r3, [r4, #22]

	Calib_data->dig_H1 = calib0[25];
 80010aa:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 80010ae:	7623      	strb	r3, [r4, #24]

	Calib_data->dig_H2 = calib1[0];
 80010b0:	f89d 3014 	ldrb.w	r3, [sp, #20]
	Calib_data->dig_H2 += calib1[1] << 8;
 80010b4:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80010b8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80010bc:	8363      	strh	r3, [r4, #26]

	Calib_data->dig_H3 = calib1[2];
 80010be:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80010c2:	7723      	strb	r3, [r4, #28]

	Calib_data->dig_H4 = calib1[3] << 4;
 80010c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
	Calib_data->dig_H4 += calib1[4] & 0b00001111;
 80010c8:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80010cc:	f001 020f 	and.w	r2, r1, #15
 80010d0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80010d4:	83e2      	strh	r2, [r4, #30]

	Calib_data->dig_H5 = calib1[4] >> 4;
	Calib_data->dig_H5 += calib1[5] << 4;
 80010d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80010da:	011b      	lsls	r3, r3, #4
 80010dc:	eb03 1311 	add.w	r3, r3, r1, lsr #4
 80010e0:	8423      	strh	r3, [r4, #32]

	Calib_data->dig_H6 = calib1[6];
 80010e2:	f99d 301a 	ldrsb.w	r3, [sp, #26]
 80010e6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

	return status;
}
 80010ea:	b011      	add	sp, #68	; 0x44
 80010ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80010f0:	b004      	add	sp, #16
 80010f2:	4770      	bx	lr

080010f4 <BME280_Get_All>:


HAL_StatusTypeDef BME280_Get_All(I2C_HandleTypeDef handle, uint16_t Timeout){
 80010f4:	b084      	sub	sp, #16
 80010f6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010fa:	b087      	sub	sp, #28
 80010fc:	ac0e      	add	r4, sp, #56	; 0x38
 80010fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t measure[8];

	status = HAL_I2C_Mem_Read(&handle, BME280_address, BME280_press, 1, measure, 8, Timeout);
 8001102:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2308      	movs	r3, #8
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	ab04      	add	r3, sp, #16
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	22f7      	movs	r2, #247	; 0xf7
 8001114:	21ec      	movs	r1, #236	; 0xec
 8001116:	4620      	mov	r0, r4
 8001118:	f004 f928 	bl	800536c <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 800111c:	bb68      	cbnz	r0, 800117a <BME280_Get_All+0x86>
		return status;

	Pressure_Data.press_msb = measure[0];
 800111e:	f89d e010 	ldrb.w	lr, [sp, #16]
 8001122:	4c18      	ldr	r4, [pc, #96]	; (8001184 <BME280_Get_All+0x90>)
 8001124:	f884 e000 	strb.w	lr, [r4]
	Pressure_Data.press_lsb = measure[1];
 8001128:	f89d 3011 	ldrb.w	r3, [sp, #17]
 800112c:	7063      	strb	r3, [r4, #1]
	Pressure_Data.press_xlsb = measure[2];
 800112e:	f89d c012 	ldrb.w	ip, [sp, #18]
 8001132:	f884 c002 	strb.w	ip, [r4, #2]

	Temperature_Data.temp_msb = measure[3];
 8001136:	f89d 9013 	ldrb.w	r9, [sp, #19]
 800113a:	4d13      	ldr	r5, [pc, #76]	; (8001188 <BME280_Get_All+0x94>)
 800113c:	f885 9000 	strb.w	r9, [r5]
	Temperature_Data.temp_lsb = measure[4];
 8001140:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001144:	706a      	strb	r2, [r5, #1]
	Temperature_Data.temp_xlsb = measure[5];
 8001146:	f89d 8015 	ldrb.w	r8, [sp, #21]
 800114a:	f885 8002 	strb.w	r8, [r5, #2]

	Humidity_Data.hum_msb = measure[6];
 800114e:	f89d 7016 	ldrb.w	r7, [sp, #22]
 8001152:	4e0e      	ldr	r6, [pc, #56]	; (800118c <BME280_Get_All+0x98>)
 8001154:	7037      	strb	r7, [r6, #0]
	Humidity_Data.hum_lsb = measure[7];
 8001156:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800115a:	7071      	strb	r1, [r6, #1]

	Temperature_Data.ADC_T = ((uint32_t)Temperature_Data.temp_msb << 12) | ((uint32_t)Temperature_Data.temp_lsb << 4) | ((uint32_t)Temperature_Data.temp_xlsb >> 4);
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
 8001162:	ea42 1218 	orr.w	r2, r2, r8, lsr #4
 8001166:	606a      	str	r2, [r5, #4]
	Pressure_Data.ADC_P = ((uint32_t)Pressure_Data.press_msb << 12) | ((uint32_t)Pressure_Data.press_lsb << 4) | ((uint32_t)Pressure_Data.press_xlsb >> 4);
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	ea43 330e 	orr.w	r3, r3, lr, lsl #12
 800116e:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8001172:	6063      	str	r3, [r4, #4]
	Humidity_Data.ADC_H = ((uint32_t)Humidity_Data.hum_msb << 8) | ((uint32_t)Humidity_Data.hum_lsb);
 8001174:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001178:	6071      	str	r1, [r6, #4]
	return status;
}
 800117a:	b007      	add	sp, #28
 800117c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr
 8001184:	200002d0 	.word	0x200002d0
 8001188:	200002c8 	.word	0x200002c8
 800118c:	20000278 	.word	0x20000278

08001190 <BME280_T_Double>:
	return status;
}


double BME280_T_Double (BME280_Calib_Data_struct *Calib_data)
{
 8001190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001194:	4604      	mov	r4, r0
//	BME280_Temperature(handle);
	double var1, var2, t;

	var1 = (((double) Temperature_Data.ADC_T)/16384.0 - ((double) Calib_data->dig_T1)/1024.0) * ((double) Calib_data->dig_T2);
 8001196:	4b31      	ldr	r3, [pc, #196]	; (800125c <BME280_T_Double+0xcc>)
 8001198:	6858      	ldr	r0, [r3, #4]
 800119a:	f7ff f9bb 	bl	8000514 <__aeabi_ui2d>
 800119e:	4606      	mov	r6, r0
 80011a0:	460f      	mov	r7, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	4b2e      	ldr	r3, [pc, #184]	; (8001260 <BME280_T_Double+0xd0>)
 80011a6:	f7ff fa2f 	bl	8000608 <__aeabi_dmul>
 80011aa:	4680      	mov	r8, r0
 80011ac:	4689      	mov	r9, r1
 80011ae:	8820      	ldrh	r0, [r4, #0]
 80011b0:	f7ff f9b0 	bl	8000514 <__aeabi_ui2d>
 80011b4:	4682      	mov	sl, r0
 80011b6:	468b      	mov	fp, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <BME280_T_Double+0xd4>)
 80011bc:	f7ff fa24 	bl	8000608 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4640      	mov	r0, r8
 80011c6:	4649      	mov	r1, r9
 80011c8:	f7ff f866 	bl	8000298 <__aeabi_dsub>
 80011cc:	4680      	mov	r8, r0
 80011ce:	4689      	mov	r9, r1
 80011d0:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80011d4:	f7ff f9ae 	bl	8000534 <__aeabi_i2d>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4640      	mov	r0, r8
 80011de:	4649      	mov	r1, r9
 80011e0:	f7ff fa12 	bl	8000608 <__aeabi_dmul>
 80011e4:	4680      	mov	r8, r0
 80011e6:	4689      	mov	r9, r1
	var2 = ((((double) Temperature_Data.ADC_T)/131072.0 - ((double) Calib_data->dig_T1)/8192.0) * (((double) Temperature_Data.ADC_T)/131072.0 - ((double) Calib_data->dig_T1)/8192.0)) * ((double) Calib_data->dig_T3);
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <BME280_T_Double+0xd8>)
 80011ec:	4630      	mov	r0, r6
 80011ee:	4639      	mov	r1, r7
 80011f0:	f7ff fa0a 	bl	8000608 <__aeabi_dmul>
 80011f4:	4606      	mov	r6, r0
 80011f6:	460f      	mov	r7, r1
 80011f8:	2200      	movs	r2, #0
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <BME280_T_Double+0xdc>)
 80011fc:	4650      	mov	r0, sl
 80011fe:	4659      	mov	r1, fp
 8001200:	f7ff fa02 	bl	8000608 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4630      	mov	r0, r6
 800120a:	4639      	mov	r1, r7
 800120c:	f7ff f844 	bl	8000298 <__aeabi_dsub>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	f7ff f9f8 	bl	8000608 <__aeabi_dmul>
 8001218:	4606      	mov	r6, r0
 800121a:	460f      	mov	r7, r1
 800121c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8001220:	f7ff f988 	bl	8000534 <__aeabi_i2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4630      	mov	r0, r6
 800122a:	4639      	mov	r1, r7
 800122c:	f7ff f9ec 	bl	8000608 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1

	t_fine =  (var1 + var2);
 8001234:	4640      	mov	r0, r8
 8001236:	4649      	mov	r1, r9
 8001238:	f7ff f830 	bl	800029c <__adddf3>
 800123c:	4604      	mov	r4, r0
 800123e:	460d      	mov	r5, r1
 8001240:	f7ff fc92 	bl	8000b68 <__aeabi_d2iz>
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <BME280_T_Double+0xe0>)
 8001246:	6018      	str	r0, [r3, #0]
	t = (var1 + var2)/5120.0;
 8001248:	2200      	movs	r2, #0
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <BME280_T_Double+0xe4>)
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	f7ff fb04 	bl	800085c <__aeabi_ddiv>

	return t;
}
 8001254:	ec41 0b10 	vmov	d0, r0, r1
 8001258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800125c:	200002c8 	.word	0x200002c8
 8001260:	3f100000 	.word	0x3f100000
 8001264:	3f500000 	.word	0x3f500000
 8001268:	3ee00000 	.word	0x3ee00000
 800126c:	3f200000 	.word	0x3f200000
 8001270:	200002d8 	.word	0x200002d8
 8001274:	40b40000 	.word	0x40b40000

08001278 <BME280_P_Double>:

double BME280_P_Double(BME280_Calib_Data_struct *Calib_data)
{
 8001278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800127c:	4682      	mov	sl, r0
//	BME280_Pressure(handle);
	double var1, var2, p;

	var1 = ((double)t_fine/2.0) - 64000.0;
 800127e:	4b82      	ldr	r3, [pc, #520]	; (8001488 <BME280_P_Double+0x210>)
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	f7ff f957 	bl	8000534 <__aeabi_i2d>
 8001286:	2200      	movs	r2, #0
 8001288:	4b80      	ldr	r3, [pc, #512]	; (800148c <BME280_P_Double+0x214>)
 800128a:	f7ff f9bd 	bl	8000608 <__aeabi_dmul>
 800128e:	2200      	movs	r2, #0
 8001290:	4b7f      	ldr	r3, [pc, #508]	; (8001490 <BME280_P_Double+0x218>)
 8001292:	f7ff f801 	bl	8000298 <__aeabi_dsub>
 8001296:	4604      	mov	r4, r0
 8001298:	460d      	mov	r5, r1
	var2 = var1 * var1 * ((double) Calib_data->dig_P6) / 32768.0;
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	f7ff f9b3 	bl	8000608 <__aeabi_dmul>
 80012a2:	4606      	mov	r6, r0
 80012a4:	460f      	mov	r7, r1
 80012a6:	f9ba 0010 	ldrsh.w	r0, [sl, #16]
 80012aa:	f7ff f943 	bl	8000534 <__aeabi_i2d>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4630      	mov	r0, r6
 80012b4:	4639      	mov	r1, r7
 80012b6:	f7ff f9a7 	bl	8000608 <__aeabi_dmul>
 80012ba:	2200      	movs	r2, #0
 80012bc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80012c0:	f7ff f9a2 	bl	8000608 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
	var2 = var2 + var1 + ((double) Calib_data->dig_P5) * 2.0;
 80012c8:	4620      	mov	r0, r4
 80012ca:	4629      	mov	r1, r5
 80012cc:	f7fe ffe6 	bl	800029c <__adddf3>
 80012d0:	4606      	mov	r6, r0
 80012d2:	460f      	mov	r7, r1
 80012d4:	f9ba 000e 	ldrsh.w	r0, [sl, #14]
 80012d8:	f7ff f92c 	bl	8000534 <__aeabi_i2d>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	f7fe ffdc 	bl	800029c <__adddf3>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4630      	mov	r0, r6
 80012ea:	4639      	mov	r1, r7
 80012ec:	f7fe ffd6 	bl	800029c <__adddf3>
	var2 = (var2/4.0) + (((double) Calib_data->dig_P4) * 65536.0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	4b68      	ldr	r3, [pc, #416]	; (8001494 <BME280_P_Double+0x21c>)
 80012f4:	f7ff f988 	bl	8000608 <__aeabi_dmul>
 80012f8:	4606      	mov	r6, r0
 80012fa:	460f      	mov	r7, r1
 80012fc:	f9ba 000c 	ldrsh.w	r0, [sl, #12]
 8001300:	f7ff f918 	bl	8000534 <__aeabi_i2d>
 8001304:	2200      	movs	r2, #0
 8001306:	4b64      	ldr	r3, [pc, #400]	; (8001498 <BME280_P_Double+0x220>)
 8001308:	f7ff f97e 	bl	8000608 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4630      	mov	r0, r6
 8001312:	4639      	mov	r1, r7
 8001314:	f7fe ffc2 	bl	800029c <__adddf3>
 8001318:	4680      	mov	r8, r0
 800131a:	4689      	mov	r9, r1
	var1 = (((double) Calib_data->dig_P3) * var1 * var1 / 524288.0 + ((double) Calib_data->dig_P2) * var1) / 524288.0;
 800131c:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
 8001320:	f7ff f908 	bl	8000534 <__aeabi_i2d>
 8001324:	4622      	mov	r2, r4
 8001326:	462b      	mov	r3, r5
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4622      	mov	r2, r4
 800132e:	462b      	mov	r3, r5
 8001330:	f7ff f96a 	bl	8000608 <__aeabi_dmul>
 8001334:	2200      	movs	r2, #0
 8001336:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 800133a:	f7ff f965 	bl	8000608 <__aeabi_dmul>
 800133e:	4606      	mov	r6, r0
 8001340:	460f      	mov	r7, r1
 8001342:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
 8001346:	f7ff f8f5 	bl	8000534 <__aeabi_i2d>
 800134a:	4622      	mov	r2, r4
 800134c:	462b      	mov	r3, r5
 800134e:	f7ff f95b 	bl	8000608 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4630      	mov	r0, r6
 8001358:	4639      	mov	r1, r7
 800135a:	f7fe ff9f 	bl	800029c <__adddf3>
 800135e:	2200      	movs	r2, #0
 8001360:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 8001364:	f7ff f950 	bl	8000608 <__aeabi_dmul>
	var1 = (1.0 + var1 / 32768.0)*((double) Calib_data->dig_P1);
 8001368:	2200      	movs	r2, #0
 800136a:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800136e:	f7ff f94b 	bl	8000608 <__aeabi_dmul>
 8001372:	2200      	movs	r2, #0
 8001374:	4b49      	ldr	r3, [pc, #292]	; (800149c <BME280_P_Double+0x224>)
 8001376:	f7fe ff91 	bl	800029c <__adddf3>
 800137a:	4604      	mov	r4, r0
 800137c:	460d      	mov	r5, r1
 800137e:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8001382:	f7ff f8c7 	bl	8000514 <__aeabi_ui2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4620      	mov	r0, r4
 800138c:	4629      	mov	r1, r5
 800138e:	f7ff f93b 	bl	8000608 <__aeabi_dmul>
 8001392:	4604      	mov	r4, r0
 8001394:	460d      	mov	r5, r1

	if (var1 == 0.0)
 8001396:	2200      	movs	r2, #0
 8001398:	2300      	movs	r3, #0
 800139a:	f7ff fb9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800139e:	2800      	cmp	r0, #0
 80013a0:	d164      	bne.n	800146c <BME280_P_Double+0x1f4>
	{
		return 0; // avoid exception caused by division by zero
	}

	p = 1048576.0 - (double) Pressure_Data.ADC_P;
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <BME280_P_Double+0x228>)
 80013a4:	6858      	ldr	r0, [r3, #4]
 80013a6:	f7ff f8b5 	bl	8000514 <__aeabi_ui2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	2000      	movs	r0, #0
 80013b0:	493c      	ldr	r1, [pc, #240]	; (80014a4 <BME280_P_Double+0x22c>)
 80013b2:	f7fe ff71 	bl	8000298 <__aeabi_dsub>
 80013b6:	4606      	mov	r6, r0
 80013b8:	460f      	mov	r7, r1
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 80013ba:	2200      	movs	r2, #0
 80013bc:	4b3a      	ldr	r3, [pc, #232]	; (80014a8 <BME280_P_Double+0x230>)
 80013be:	4640      	mov	r0, r8
 80013c0:	4649      	mov	r1, r9
 80013c2:	f7ff f921 	bl	8000608 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4630      	mov	r0, r6
 80013cc:	4639      	mov	r1, r7
 80013ce:	f7fe ff63 	bl	8000298 <__aeabi_dsub>
 80013d2:	a329      	add	r3, pc, #164	; (adr r3, 8001478 <BME280_P_Double+0x200>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff f916 	bl	8000608 <__aeabi_dmul>
 80013dc:	4622      	mov	r2, r4
 80013de:	462b      	mov	r3, r5
 80013e0:	f7ff fa3c 	bl	800085c <__aeabi_ddiv>
 80013e4:	4604      	mov	r4, r0
 80013e6:	460d      	mov	r5, r1

	var1 = ((double) Calib_data->dig_P9) * p* p / 2147483648.0;
 80013e8:	f9ba 0016 	ldrsh.w	r0, [sl, #22]
 80013ec:	f7ff f8a2 	bl	8000534 <__aeabi_i2d>
 80013f0:	4622      	mov	r2, r4
 80013f2:	462b      	mov	r3, r5
 80013f4:	f7ff f908 	bl	8000608 <__aeabi_dmul>
 80013f8:	4622      	mov	r2, r4
 80013fa:	462b      	mov	r3, r5
 80013fc:	f7ff f904 	bl	8000608 <__aeabi_dmul>
 8001400:	2200      	movs	r2, #0
 8001402:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8001406:	f7ff f8ff 	bl	8000608 <__aeabi_dmul>
 800140a:	4606      	mov	r6, r0
 800140c:	460f      	mov	r7, r1
	var2 = p * ((double) Calib_data->dig_P8) / 32768.0;
 800140e:	f9ba 0014 	ldrsh.w	r0, [sl, #20]
 8001412:	f7ff f88f 	bl	8000534 <__aeabi_i2d>
 8001416:	4622      	mov	r2, r4
 8001418:	462b      	mov	r3, r5
 800141a:	f7ff f8f5 	bl	8000608 <__aeabi_dmul>
 800141e:	2200      	movs	r2, #0
 8001420:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001424:	f7ff f8f0 	bl	8000608 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1

	p = p + (var1 + var2 + ((double) Calib_data->dig_P7)) / 16.0;
 800142c:	4630      	mov	r0, r6
 800142e:	4639      	mov	r1, r7
 8001430:	f7fe ff34 	bl	800029c <__adddf3>
 8001434:	4606      	mov	r6, r0
 8001436:	460f      	mov	r7, r1
 8001438:	f9ba 0012 	ldrsh.w	r0, [sl, #18]
 800143c:	f7ff f87a 	bl	8000534 <__aeabi_i2d>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4630      	mov	r0, r6
 8001446:	4639      	mov	r1, r7
 8001448:	f7fe ff28 	bl	800029c <__adddf3>
 800144c:	2200      	movs	r2, #0
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <BME280_P_Double+0x234>)
 8001450:	f7ff f8da 	bl	8000608 <__aeabi_dmul>
 8001454:	4622      	mov	r2, r4
 8001456:	462b      	mov	r3, r5
 8001458:	f7fe ff20 	bl	800029c <__adddf3>
	p = (p/1000);
 800145c:	2200      	movs	r2, #0
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <BME280_P_Double+0x238>)
 8001460:	f7ff f9fc 	bl	800085c <__aeabi_ddiv>
 8001464:	ec41 0b10 	vmov	d0, r0, r1

	return p;
}
 8001468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0; // avoid exception caused by division by zero
 800146c:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8001480 <BME280_P_Double+0x208>
 8001470:	e7fa      	b.n	8001468 <BME280_P_Double+0x1f0>
 8001472:	bf00      	nop
 8001474:	f3af 8000 	nop.w
 8001478:	00000000 	.word	0x00000000
 800147c:	40b86a00 	.word	0x40b86a00
	...
 8001488:	200002d8 	.word	0x200002d8
 800148c:	3fe00000 	.word	0x3fe00000
 8001490:	40ef4000 	.word	0x40ef4000
 8001494:	3fd00000 	.word	0x3fd00000
 8001498:	40f00000 	.word	0x40f00000
 800149c:	3ff00000 	.word	0x3ff00000
 80014a0:	200002d0 	.word	0x200002d0
 80014a4:	41300000 	.word	0x41300000
 80014a8:	3f300000 	.word	0x3f300000
 80014ac:	3fb00000 	.word	0x3fb00000
 80014b0:	408f4000 	.word	0x408f4000
 80014b4:	00000000 	.word	0x00000000

080014b8 <BME280_H_Double>:

double BME280_H_Double(BME280_Calib_Data_struct *Calib_data)
{
 80014b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014bc:	ed2d 8b02 	vpush	{d8}
 80014c0:	b082      	sub	sp, #8
 80014c2:	4682      	mov	sl, r0
//	BME280_Humidity(handle);
	long double var_H;

	var_H = (((double) t_fine) - 76800.0);
 80014c4:	4b58      	ldr	r3, [pc, #352]	; (8001628 <BME280_H_Double+0x170>)
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	f7ff f834 	bl	8000534 <__aeabi_i2d>
 80014cc:	2200      	movs	r2, #0
 80014ce:	4b57      	ldr	r3, [pc, #348]	; (800162c <BME280_H_Double+0x174>)
 80014d0:	f7fe fee2 	bl	8000298 <__aeabi_dsub>
 80014d4:	4604      	mov	r4, r0
 80014d6:	460d      	mov	r5, r1
	var_H = (((double) Humidity_Data.ADC_H) - (((double)Calib_data->dig_H4)*64.0 + ((double)Calib_data->dig_H5)/16384.0*var_H)) *
 80014d8:	4b55      	ldr	r3, [pc, #340]	; (8001630 <BME280_H_Double+0x178>)
 80014da:	6858      	ldr	r0, [r3, #4]
 80014dc:	f7ff f81a 	bl	8000514 <__aeabi_ui2d>
 80014e0:	4606      	mov	r6, r0
 80014e2:	460f      	mov	r7, r1
 80014e4:	f9ba 001e 	ldrsh.w	r0, [sl, #30]
 80014e8:	f7ff f824 	bl	8000534 <__aeabi_i2d>
 80014ec:	2200      	movs	r2, #0
 80014ee:	4b51      	ldr	r3, [pc, #324]	; (8001634 <BME280_H_Double+0x17c>)
 80014f0:	f7ff f88a 	bl	8000608 <__aeabi_dmul>
 80014f4:	4680      	mov	r8, r0
 80014f6:	4689      	mov	r9, r1
 80014f8:	f9ba 0020 	ldrsh.w	r0, [sl, #32]
 80014fc:	f7ff f81a 	bl	8000534 <__aeabi_i2d>
 8001500:	2200      	movs	r2, #0
 8001502:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <BME280_H_Double+0x180>)
 8001504:	f7ff f880 	bl	8000608 <__aeabi_dmul>
 8001508:	4622      	mov	r2, r4
 800150a:	462b      	mov	r3, r5
 800150c:	f7ff f87c 	bl	8000608 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4640      	mov	r0, r8
 8001516:	4649      	mov	r1, r9
 8001518:	f7fe fec0 	bl	800029c <__adddf3>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4630      	mov	r0, r6
 8001522:	4639      	mov	r1, r7
 8001524:	f7fe feb8 	bl	8000298 <__aeabi_dsub>
 8001528:	e9cd 0100 	strd	r0, r1, [sp]
			(((double) Calib_data->dig_H2)/65536.0 * (1.0 + ((double) Calib_data->dig_H6) / 67108864.0*var_H * (1.0 + ((double) Calib_data->dig_H3)/67108864.0*var_H)));
 800152c:	f9ba 001a 	ldrsh.w	r0, [sl, #26]
 8001530:	f7ff f800 	bl	8000534 <__aeabi_i2d>
 8001534:	2200      	movs	r2, #0
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <BME280_H_Double+0x184>)
 8001538:	f7ff f866 	bl	8000608 <__aeabi_dmul>
 800153c:	4680      	mov	r8, r0
 800153e:	4689      	mov	r9, r1
 8001540:	f99a 0022 	ldrsb.w	r0, [sl, #34]	; 0x22
 8001544:	f7fe fff6 	bl	8000534 <__aeabi_i2d>
 8001548:	2200      	movs	r2, #0
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <BME280_H_Double+0x188>)
 800154c:	f7ff f85c 	bl	8000608 <__aeabi_dmul>
 8001550:	4622      	mov	r2, r4
 8001552:	462b      	mov	r3, r5
 8001554:	f7ff f858 	bl	8000608 <__aeabi_dmul>
 8001558:	4606      	mov	r6, r0
 800155a:	460f      	mov	r7, r1
 800155c:	f89a 001c 	ldrb.w	r0, [sl, #28]
 8001560:	f7fe ffd8 	bl	8000514 <__aeabi_ui2d>
 8001564:	2200      	movs	r2, #0
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <BME280_H_Double+0x188>)
 8001568:	f7ff f84e 	bl	8000608 <__aeabi_dmul>
 800156c:	4622      	mov	r2, r4
 800156e:	462b      	mov	r3, r5
 8001570:	f7ff f84a 	bl	8000608 <__aeabi_dmul>
 8001574:	2200      	movs	r2, #0
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <BME280_H_Double+0x18c>)
 8001578:	f7fe fe90 	bl	800029c <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4630      	mov	r0, r6
 8001582:	4639      	mov	r1, r7
 8001584:	f7ff f840 	bl	8000608 <__aeabi_dmul>
 8001588:	2200      	movs	r2, #0
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <BME280_H_Double+0x18c>)
 800158c:	f7fe fe86 	bl	800029c <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4640      	mov	r0, r8
 8001596:	4649      	mov	r1, r9
 8001598:	f7ff f836 	bl	8000608 <__aeabi_dmul>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
	var_H = (((double) Humidity_Data.ADC_H) - (((double)Calib_data->dig_H4)*64.0 + ((double)Calib_data->dig_H5)/16384.0*var_H)) *
 80015a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80015a4:	f7ff f830 	bl	8000608 <__aeabi_dmul>
 80015a8:	4604      	mov	r4, r0
 80015aa:	460d      	mov	r5, r1
	var_H *= (1.0 - ((double)Calib_data->dig_H1)*var_H/524288.0);
 80015ac:	f89a 0018 	ldrb.w	r0, [sl, #24]
 80015b0:	f7fe ffb0 	bl	8000514 <__aeabi_ui2d>
 80015b4:	4622      	mov	r2, r4
 80015b6:	462b      	mov	r3, r5
 80015b8:	f7ff f826 	bl	8000608 <__aeabi_dmul>
 80015bc:	2200      	movs	r2, #0
 80015be:	f04f 537b 	mov.w	r3, #1052770304	; 0x3ec00000
 80015c2:	f7ff f821 	bl	8000608 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	2000      	movs	r0, #0
 80015cc:	491d      	ldr	r1, [pc, #116]	; (8001644 <BME280_H_Double+0x18c>)
 80015ce:	f7fe fe63 	bl	8000298 <__aeabi_dsub>
 80015d2:	4622      	mov	r2, r4
 80015d4:	462b      	mov	r3, r5
 80015d6:	f7ff f817 	bl	8000608 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	ec43 2b18 	vmov	d8, r2, r3

	if (var_H > 100.0){
 80015e2:	2200      	movs	r2, #0
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <BME280_H_Double+0x190>)
 80015e6:	f7ff fa9f 	bl	8000b28 <__aeabi_dcmpgt>
 80015ea:	b948      	cbnz	r0, 8001600 <BME280_H_Double+0x148>
		var_H = 100.0;
	}
	else if (var_H < 0.0){
 80015ec:	2200      	movs	r2, #0
 80015ee:	2300      	movs	r3, #0
 80015f0:	ec51 0b18 	vmov	r0, r1, d8
 80015f4:	f7ff fa7a 	bl	8000aec <__aeabi_dcmplt>
 80015f8:	b120      	cbz	r0, 8001604 <BME280_H_Double+0x14c>
		var_H = 0.0;
 80015fa:	ed9f 8b07 	vldr	d8, [pc, #28]	; 8001618 <BME280_H_Double+0x160>
	}

	return var_H;
 80015fe:	e001      	b.n	8001604 <BME280_H_Double+0x14c>
		var_H = 100.0;
 8001600:	ed9f 8b07 	vldr	d8, [pc, #28]	; 8001620 <BME280_H_Double+0x168>
}
 8001604:	eeb0 0a48 	vmov.f32	s0, s16
 8001608:	eef0 0a68 	vmov.f32	s1, s17
 800160c:	b002      	add	sp, #8
 800160e:	ecbd 8b02 	vpop	{d8}
 8001612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001616:	bf00      	nop
	...
 8001624:	40590000 	.word	0x40590000
 8001628:	200002d8 	.word	0x200002d8
 800162c:	40f2c000 	.word	0x40f2c000
 8001630:	20000278 	.word	0x20000278
 8001634:	40500000 	.word	0x40500000
 8001638:	3f100000 	.word	0x3f100000
 800163c:	3ef00000 	.word	0x3ef00000
 8001640:	3e500000 	.word	0x3e500000
 8001644:	3ff00000 	.word	0x3ff00000
 8001648:	40590000 	.word	0x40590000
 800164c:	00000000 	.word	0x00000000

08001650 <BME280_Altitude_Double>:


double BME280_Altitude_Double(double Pressure, double Pressure_ref)
{
 8001650:	b508      	push	{r3, lr}
 8001652:	ec51 0b10 	vmov	r0, r1, d0
 8001656:	ec53 2b11 	vmov	r2, r3, d1
	long double var1;
	var1 = pow(Pressure/Pressure_ref, 1/5.255);
 800165a:	f7ff f8ff 	bl	800085c <__aeabi_ddiv>
 800165e:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8001688 <BME280_Altitude_Double+0x38>
 8001662:	ec41 0b10 	vmov	d0, r0, r1
 8001666:	f00a fa1b 	bl	800baa0 <pow>
 800166a:	ec53 2b10 	vmov	r2, r3, d0
	return 44330*(1-var1);
 800166e:	2000      	movs	r0, #0
 8001670:	4909      	ldr	r1, [pc, #36]	; (8001698 <BME280_Altitude_Double+0x48>)
 8001672:	f7fe fe11 	bl	8000298 <__aeabi_dsub>
 8001676:	a306      	add	r3, pc, #24	; (adr r3, 8001690 <BME280_Altitude_Double+0x40>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe ffc4 	bl	8000608 <__aeabi_dmul>
}
 8001680:	ec41 0b10 	vmov	d0, r0, r1
 8001684:	bd08      	pop	{r3, pc}
 8001686:	bf00      	nop
 8001688:	ccd9456c 	.word	0xccd9456c
 800168c:	3fc85b95 	.word	0x3fc85b95
 8001690:	00000000 	.word	0x00000000
 8001694:	40e5a540 	.word	0x40e5a540
 8001698:	3ff00000 	.word	0x3ff00000

0800169c <MPU6050_Init>:
int16_t Temperature_raw;



HAL_StatusTypeDef MPU6050_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 800169c:	b084      	sub	sp, #16
 800169e:	b510      	push	{r4, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	ac08      	add	r4, sp, #32
 80016a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016a8:	f8bd 4074 	ldrh.w	r4, [sp, #116]	; 0x74
	HAL_StatusTypeDef status;
	uint8_t data;

	// Config register complete reset (everything to 0, except sleep enable and ID)
	data = 0x80;
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_PWR_MGMT_1, 1, &data, 1, Timeout);
 80016b2:	9402      	str	r4, [sp, #8]
 80016b4:	2301      	movs	r3, #1
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	f10d 0217 	add.w	r2, sp, #23
 80016bc:	9200      	str	r2, [sp, #0]
 80016be:	226b      	movs	r2, #107	; 0x6b
 80016c0:	21d0      	movs	r1, #208	; 0xd0
 80016c2:	a808      	add	r0, sp, #32
 80016c4:	f003 fda0 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80016c8:	b120      	cbz	r0, 80016d4 <MPU6050_Init+0x38>

	// Set sample rate to 8kHz/(1+19)=400Hz
	data = 0x13;
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_SMPLRT_DIV, 1, &data, 1, Timeout);
	return status;
}
 80016ca:	b006      	add	sp, #24
 80016cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016d0:	b004      	add	sp, #16
 80016d2:	4770      	bx	lr
	HAL_Delay(100);
 80016d4:	2064      	movs	r0, #100	; 0x64
 80016d6:	f003 f899 	bl	800480c <HAL_Delay>
	data = 0x01;
 80016da:	2301      	movs	r3, #1
 80016dc:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_USER_CTRL, 1, &data, 1, Timeout);
 80016e0:	9402      	str	r4, [sp, #8]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	f10d 0217 	add.w	r2, sp, #23
 80016e8:	9200      	str	r2, [sp, #0]
 80016ea:	226a      	movs	r2, #106	; 0x6a
 80016ec:	21d0      	movs	r1, #208	; 0xd0
 80016ee:	a808      	add	r0, sp, #32
 80016f0:	f003 fd8a 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d1e8      	bne.n	80016ca <MPU6050_Init+0x2e>
	HAL_Delay(100);
 80016f8:	2064      	movs	r0, #100	; 0x64
 80016fa:	f003 f887 	bl	800480c <HAL_Delay>
	data = 0x01;
 80016fe:	2301      	movs	r3, #1
 8001700:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_PWR_MGMT_1, 1, &data, 1, Timeout);
 8001704:	9402      	str	r4, [sp, #8]
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	f10d 0217 	add.w	r2, sp, #23
 800170c:	9200      	str	r2, [sp, #0]
 800170e:	226b      	movs	r2, #107	; 0x6b
 8001710:	21d0      	movs	r1, #208	; 0xd0
 8001712:	a808      	add	r0, sp, #32
 8001714:	f003 fd78 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001718:	2800      	cmp	r0, #0
 800171a:	d1d6      	bne.n	80016ca <MPU6050_Init+0x2e>
	data = 0x08;
 800171c:	2308      	movs	r3, #8
 800171e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_ACCEL_CONFIG, 1, &data, 1, Timeout);
 8001722:	9402      	str	r4, [sp, #8]
 8001724:	2301      	movs	r3, #1
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	f10d 0217 	add.w	r2, sp, #23
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	221c      	movs	r2, #28
 8001730:	21d0      	movs	r1, #208	; 0xd0
 8001732:	a808      	add	r0, sp, #32
 8001734:	f003 fd68 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001738:	2800      	cmp	r0, #0
 800173a:	d1c6      	bne.n	80016ca <MPU6050_Init+0x2e>
	data = 0x08;
 800173c:	2308      	movs	r3, #8
 800173e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_GYRO_CONFIG, 1, &data, 1, Timeout);
 8001742:	9402      	str	r4, [sp, #8]
 8001744:	2301      	movs	r3, #1
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f10d 0217 	add.w	r2, sp, #23
 800174c:	9200      	str	r2, [sp, #0]
 800174e:	221b      	movs	r2, #27
 8001750:	21d0      	movs	r1, #208	; 0xd0
 8001752:	a808      	add	r0, sp, #32
 8001754:	f003 fd58 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001758:	2800      	cmp	r0, #0
 800175a:	d1b6      	bne.n	80016ca <MPU6050_Init+0x2e>
	data = 0x13;
 800175c:	2313      	movs	r3, #19
 800175e:	f88d 3017 	strb.w	r3, [sp, #23]
	status = HAL_I2C_Mem_Write(&handle, MPU6050_Address, MPU6050_SMPLRT_DIV, 1, &data, 1, Timeout);
 8001762:	9402      	str	r4, [sp, #8]
 8001764:	2301      	movs	r3, #1
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	f10d 0217 	add.w	r2, sp, #23
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	2219      	movs	r2, #25
 8001770:	21d0      	movs	r1, #208	; 0xd0
 8001772:	a808      	add	r0, sp, #32
 8001774:	f003 fd48 	bl	8005208 <HAL_I2C_Mem_Write>
	return status;
 8001778:	e7a7      	b.n	80016ca <MPU6050_Init+0x2e>

0800177a <MPU6050_read_ID>:



HAL_StatusTypeDef MPU6050_read_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 800177a:	b084      	sub	sp, #16
 800177c:	b500      	push	{lr}
 800177e:	b085      	sub	sp, #20
 8001780:	f10d 0c18 	add.w	ip, sp, #24
 8001784:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	return HAL_I2C_Mem_Read(&handle, MPU6050_Address, MPU6050_WHO_AM_I, 1, ptr_ID, 1, Timeout);
 8001788:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800178c:	9302      	str	r3, [sp, #8]
 800178e:	2301      	movs	r3, #1
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001794:	9200      	str	r2, [sp, #0]
 8001796:	2275      	movs	r2, #117	; 0x75
 8001798:	21d0      	movs	r1, #208	; 0xd0
 800179a:	4660      	mov	r0, ip
 800179c:	f003 fde6 	bl	800536c <HAL_I2C_Mem_Read>
}
 80017a0:	b005      	add	sp, #20
 80017a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80017a6:	b004      	add	sp, #16
 80017a8:	4770      	bx	lr
	...

080017ac <MPU6050_read_All>:



HAL_StatusTypeDef MPU6050_read_All(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 80017ac:	b084      	sub	sp, #16
 80017ae:	b500      	push	{lr}
 80017b0:	b089      	sub	sp, #36	; 0x24
 80017b2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80017b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t data[14];

	status = HAL_I2C_Mem_Read(&handle, MPU6050_Address, MPU6050_ACCEL_XOUT_H, 1, data, 14, Timeout);
 80017ba:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	230e      	movs	r3, #14
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	ab04      	add	r3, sp, #16
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	223b      	movs	r2, #59	; 0x3b
 80017cc:	21d0      	movs	r1, #208	; 0xd0
 80017ce:	4660      	mov	r0, ip
 80017d0:	f003 fdcc 	bl	800536c <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 80017d4:	bb98      	cbnz	r0, 800183e <MPU6050_read_All+0x92>
		return status;

	MPU6050_Accel_raw.xdata = data[0] << 8 | data[1];
 80017d6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80017da:	f89d 2011 	ldrb.w	r2, [sp, #17]
 80017de:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <MPU6050_read_All+0x9c>)
 80017e4:	801a      	strh	r2, [r3, #0]
	MPU6050_Accel_raw.ydata = data[2] << 8 | data[3];
 80017e6:	f89d 1012 	ldrb.w	r1, [sp, #18]
 80017ea:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80017ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80017f2:	805a      	strh	r2, [r3, #2]
	MPU6050_Accel_raw.zdata = data[4] << 8 | data[5];
 80017f4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80017f8:	f89d 2015 	ldrb.w	r2, [sp, #21]
 80017fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001800:	809a      	strh	r2, [r3, #4]

	Temperature_raw = data[6] << 8 | data[7];
 8001802:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001806:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800180a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <MPU6050_read_All+0xa0>)
 8001810:	8013      	strh	r3, [r2, #0]

	MPU6050_Gyro_raw.xdata = data[8] << 8 | data[9];
 8001812:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001816:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800181a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <MPU6050_read_All+0xa4>)
 8001820:	801a      	strh	r2, [r3, #0]
	MPU6050_Gyro_raw.ydata = data[10] << 8 | data[11];
 8001822:	f89d 101a 	ldrb.w	r1, [sp, #26]
 8001826:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800182a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800182e:	805a      	strh	r2, [r3, #2]
	MPU6050_Gyro_raw.zdata = data[12] << 8 | data[13];
 8001830:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8001834:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8001838:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800183c:	809a      	strh	r2, [r3, #4]

	return status;
}
 800183e:	b009      	add	sp, #36	; 0x24
 8001840:	f85d eb04 	ldr.w	lr, [sp], #4
 8001844:	b004      	add	sp, #16
 8001846:	4770      	bx	lr
 8001848:	200002dc 	.word	0x200002dc
 800184c:	200002e2 	.word	0x200002e2
 8001850:	200002e4 	.word	0x200002e4

08001854 <MPU6050_Accel_double>:
}



void MPU6050_Accel_double(MPU6050_struct *pMPU6050)
{
 8001854:	b538      	push	{r3, r4, r5, lr}
 8001856:	4604      	mov	r4, r0
	pMPU6050->Accel_X = (double)MPU6050_Accel_raw.xdata / 8192.0;
 8001858:	4d0f      	ldr	r5, [pc, #60]	; (8001898 <MPU6050_Accel_double+0x44>)
 800185a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800185e:	f7fe fe69 	bl	8000534 <__aeabi_i2d>
 8001862:	2200      	movs	r2, #0
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <MPU6050_Accel_double+0x48>)
 8001866:	f7fe fecf 	bl	8000608 <__aeabi_dmul>
 800186a:	e9c4 0102 	strd	r0, r1, [r4, #8]
	pMPU6050->Accel_Y = (double)MPU6050_Accel_raw.ydata / 8192.0;
 800186e:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8001872:	f7fe fe5f 	bl	8000534 <__aeabi_i2d>
 8001876:	2200      	movs	r2, #0
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <MPU6050_Accel_double+0x48>)
 800187a:	f7fe fec5 	bl	8000608 <__aeabi_dmul>
 800187e:	e9c4 0104 	strd	r0, r1, [r4, #16]
	pMPU6050->Accel_Z = (double)MPU6050_Accel_raw.zdata / 8192.0;
 8001882:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8001886:	f7fe fe55 	bl	8000534 <__aeabi_i2d>
 800188a:	2200      	movs	r2, #0
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <MPU6050_Accel_double+0x48>)
 800188e:	f7fe febb 	bl	8000608 <__aeabi_dmul>
 8001892:	e9c4 0106 	strd	r0, r1, [r4, #24]
}
 8001896:	bd38      	pop	{r3, r4, r5, pc}
 8001898:	200002dc 	.word	0x200002dc
 800189c:	3f200000 	.word	0x3f200000

080018a0 <MPU6050_Temp_double>:

void MPU6050_Temp_double(MPU6050_struct *pMPU6050)
{
 80018a0:	b510      	push	{r4, lr}
 80018a2:	4604      	mov	r4, r0
	pMPU6050->Temperature = (double)Temperature_raw / 340 + 36.53;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MPU6050_Temp_double+0x30>)
 80018a6:	f9b3 0000 	ldrsh.w	r0, [r3]
 80018aa:	f7fe fe43 	bl	8000534 <__aeabi_i2d>
 80018ae:	2200      	movs	r2, #0
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <MPU6050_Temp_double+0x34>)
 80018b2:	f7fe ffd3 	bl	800085c <__aeabi_ddiv>
 80018b6:	a304      	add	r3, pc, #16	; (adr r3, 80018c8 <MPU6050_Temp_double+0x28>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fcee 	bl	800029c <__adddf3>
 80018c0:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
}
 80018c4:	bd10      	pop	{r4, pc}
 80018c6:	bf00      	nop
 80018c8:	0a3d70a4 	.word	0x0a3d70a4
 80018cc:	404243d7 	.word	0x404243d7
 80018d0:	200002e2 	.word	0x200002e2
 80018d4:	40754000 	.word	0x40754000

080018d8 <MPU6050_Gyro_double>:

void MPU6050_Gyro_double(MPU6050_struct *pMPU6050)
{
 80018d8:	b538      	push	{r3, r4, r5, lr}
 80018da:	4604      	mov	r4, r0
	pMPU6050->Gyro_X = (double)MPU6050_Gyro_raw.xdata / 65.5;
 80018dc:	4d14      	ldr	r5, [pc, #80]	; (8001930 <MPU6050_Gyro_double+0x58>)
 80018de:	f9b5 0000 	ldrsh.w	r0, [r5]
 80018e2:	f7fe fe27 	bl	8000534 <__aeabi_i2d>
 80018e6:	a310      	add	r3, pc, #64	; (adr r3, 8001928 <MPU6050_Gyro_double+0x50>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe ffb6 	bl	800085c <__aeabi_ddiv>
 80018f0:	e9c4 0108 	strd	r0, r1, [r4, #32]
	pMPU6050->Gyro_Y = (double)MPU6050_Gyro_raw.ydata / 65.5;
 80018f4:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 80018f8:	f7fe fe1c 	bl	8000534 <__aeabi_i2d>
 80018fc:	a30a      	add	r3, pc, #40	; (adr r3, 8001928 <MPU6050_Gyro_double+0x50>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe ffab 	bl	800085c <__aeabi_ddiv>
 8001906:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
	pMPU6050->Gyro_Z = (double)MPU6050_Gyro_raw.zdata / 65.5;
 800190a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 800190e:	f7fe fe11 	bl	8000534 <__aeabi_i2d>
 8001912:	a305      	add	r3, pc, #20	; (adr r3, 8001928 <MPU6050_Gyro_double+0x50>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe ffa0 	bl	800085c <__aeabi_ddiv>
 800191c:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
}
 8001920:	bd38      	pop	{r3, r4, r5, pc}
 8001922:	bf00      	nop
 8001924:	f3af 8000 	nop.w
 8001928:	00000000 	.word	0x00000000
 800192c:	40506000 	.word	0x40506000
 8001930:	200002e4 	.word	0x200002e4

08001934 <SI1145_Init>:
uint8_t Calib_data[12];	// Unused

struct SI1145_read SI1145_raw_data;

HAL_StatusTypeDef SI1145_Init(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 8001934:	b084      	sub	sp, #16
 8001936:	b570      	push	{r4, r5, r6, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	ac0a      	add	r4, sp, #40	; 0x28
 800193c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001940:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
	HAL_StatusTypeDef status;
	uint8_t data[2];


	// Mandatory before any I2C operations with this sensor
	data[0] = 0x17;
 8001944:	2317      	movs	r3, #23
 8001946:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_HW_KEY, 1, data, 1, Timeout);
 800194a:	9402      	str	r4, [sp, #8]
 800194c:	2301      	movs	r3, #1
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	aa05      	add	r2, sp, #20
 8001952:	9200      	str	r2, [sp, #0]
 8001954:	2207      	movs	r2, #7
 8001956:	21c0      	movs	r1, #192	; 0xc0
 8001958:	a80a      	add	r0, sp, #40	; 0x28
 800195a:	f003 fc55 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 800195e:	b120      	cbz	r0, 800196a <SI1145_Init+0x36>

	// Start autorun measurement
	data[0] = SI1145_ALS_AUTO;
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
	return status;
}
 8001960:	b006      	add	sp, #24
 8001962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001966:	b004      	add	sp, #16
 8001968:	4770      	bx	lr
	data[0] = SI1145_CMD_RESET;
 800196a:	2501      	movs	r5, #1
 800196c:	f88d 5014 	strb.w	r5, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001970:	9402      	str	r4, [sp, #8]
 8001972:	9501      	str	r5, [sp, #4]
 8001974:	ae05      	add	r6, sp, #20
 8001976:	9600      	str	r6, [sp, #0]
 8001978:	462b      	mov	r3, r5
 800197a:	2218      	movs	r2, #24
 800197c:	21c0      	movs	r1, #192	; 0xc0
 800197e:	a80a      	add	r0, sp, #40	; 0x28
 8001980:	f003 fc42 	bl	8005208 <HAL_I2C_Mem_Write>
	HAL_Delay(30);
 8001984:	201e      	movs	r0, #30
 8001986:	f002 ff41 	bl	800480c <HAL_Delay>
	data[0] = 0x17;
 800198a:	2317      	movs	r3, #23
 800198c:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_HW_KEY, 1, data, 1, Timeout);
 8001990:	9402      	str	r4, [sp, #8]
 8001992:	9501      	str	r5, [sp, #4]
 8001994:	9600      	str	r6, [sp, #0]
 8001996:	462b      	mov	r3, r5
 8001998:	2207      	movs	r2, #7
 800199a:	21c0      	movs	r1, #192	; 0xc0
 800199c:	a80a      	add	r0, sp, #40	; 0x28
 800199e:	f003 fc33 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80019a2:	2800      	cmp	r0, #0
 80019a4:	d1dc      	bne.n	8001960 <SI1145_Init+0x2c>
	data[0] = 224;	//LSB
 80019a6:	23e0      	movs	r3, #224	; 0xe0
 80019a8:	f88d 3014 	strb.w	r3, [sp, #20]
	data[1] = 124;	//MSB
 80019ac:	237c      	movs	r3, #124	; 0x7c
 80019ae:	f88d 3015 	strb.w	r3, [sp, #21]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_MEAS_RATE_L, 1, data, 4, Timeout);
 80019b2:	9402      	str	r4, [sp, #8]
 80019b4:	2304      	movs	r3, #4
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	ab05      	add	r3, sp, #20
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	462b      	mov	r3, r5
 80019be:	2208      	movs	r2, #8
 80019c0:	21c0      	movs	r1, #192	; 0xc0
 80019c2:	a80a      	add	r0, sp, #40	; 0x28
 80019c4:	f003 fc20 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d1c9      	bne.n	8001960 <SI1145_Init+0x2c>
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_UCOEF0, 1, UCOEF, 4, Timeout*2);
 80019cc:	fa04 f305 	lsl.w	r3, r4, r5
 80019d0:	9302      	str	r3, [sp, #8]
 80019d2:	2304      	movs	r3, #4
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <SI1145_Init+0x1b0>)
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	462b      	mov	r3, r5
 80019dc:	2213      	movs	r2, #19
 80019de:	21c0      	movs	r1, #192	; 0xc0
 80019e0:	a80a      	add	r0, sp, #40	; 0x28
 80019e2:	f003 fc11 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d1ba      	bne.n	8001960 <SI1145_Init+0x2c>
	data[0] = 0b00100000;
 80019ea:	2320      	movs	r3, #32
 80019ec:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_PARAM_WR, 1, data, 1, Timeout);
 80019f0:	9402      	str	r4, [sp, #8]
 80019f2:	9501      	str	r5, [sp, #4]
 80019f4:	ae05      	add	r6, sp, #20
 80019f6:	9600      	str	r6, [sp, #0]
 80019f8:	462b      	mov	r3, r5
 80019fa:	2217      	movs	r2, #23
 80019fc:	21c0      	movs	r1, #192	; 0xc0
 80019fe:	a80a      	add	r0, sp, #40	; 0x28
 8001a00:	f003 fc02 	bl	8005208 <HAL_I2C_Mem_Write>
	data[0] = SI1145_CMD_writeRAM | SI1145_RAM_VIS_ADC_MISC;
 8001a04:	23b2      	movs	r3, #178	; 0xb2
 8001a06:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001a0a:	9402      	str	r4, [sp, #8]
 8001a0c:	9501      	str	r5, [sp, #4]
 8001a0e:	9600      	str	r6, [sp, #0]
 8001a10:	462b      	mov	r3, r5
 8001a12:	2218      	movs	r2, #24
 8001a14:	21c0      	movs	r1, #192	; 0xc0
 8001a16:	a80a      	add	r0, sp, #40	; 0x28
 8001a18:	f003 fbf6 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d19f      	bne.n	8001960 <SI1145_Init+0x2c>
	data[0] = 0b00000000;
 8001a20:	f88d 0014 	strb.w	r0, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_PARAM_WR, 1, data, 1, Timeout);
 8001a24:	9402      	str	r4, [sp, #8]
 8001a26:	9501      	str	r5, [sp, #4]
 8001a28:	ae05      	add	r6, sp, #20
 8001a2a:	9600      	str	r6, [sp, #0]
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	2217      	movs	r2, #23
 8001a30:	21c0      	movs	r1, #192	; 0xc0
 8001a32:	a80a      	add	r0, sp, #40	; 0x28
 8001a34:	f003 fbe8 	bl	8005208 <HAL_I2C_Mem_Write>
	data[0] = SI1145_CMD_writeRAM | SI1145_RAM_IR_ADC_MISC;
 8001a38:	23bf      	movs	r3, #191	; 0xbf
 8001a3a:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001a3e:	9402      	str	r4, [sp, #8]
 8001a40:	9501      	str	r5, [sp, #4]
 8001a42:	9600      	str	r6, [sp, #0]
 8001a44:	462b      	mov	r3, r5
 8001a46:	2218      	movs	r2, #24
 8001a48:	21c0      	movs	r1, #192	; 0xc0
 8001a4a:	a80a      	add	r0, sp, #40	; 0x28
 8001a4c:	f003 fbdc 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001a50:	2800      	cmp	r0, #0
 8001a52:	d185      	bne.n	8001960 <SI1145_Init+0x2c>
	data[0] = SI1145_CMD_GET_CAL;
 8001a54:	2312      	movs	r3, #18
 8001a56:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001a5a:	9402      	str	r4, [sp, #8]
 8001a5c:	9501      	str	r5, [sp, #4]
 8001a5e:	ab05      	add	r3, sp, #20
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	462b      	mov	r3, r5
 8001a64:	2218      	movs	r2, #24
 8001a66:	21c0      	movs	r1, #192	; 0xc0
 8001a68:	a80a      	add	r0, sp, #40	; 0x28
 8001a6a:	f003 fbcd 	bl	8005208 <HAL_I2C_Mem_Write>
	status = HAL_I2C_Mem_Read(&handle, SI1145_Address, SI1145_VIS_DATA_L , 1, Calib_data, 12, Timeout*6);
 8001a6e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001a72:	40ab      	lsls	r3, r5
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	230c      	movs	r3, #12
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <SI1145_Init+0x1b4>)
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	462b      	mov	r3, r5
 8001a80:	2222      	movs	r2, #34	; 0x22
 8001a82:	21c0      	movs	r1, #192	; 0xc0
 8001a84:	a80a      	add	r0, sp, #40	; 0x28
 8001a86:	f003 fc71 	bl	800536c <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	f47f af68 	bne.w	8001960 <SI1145_Init+0x2c>
	data[0] = 0b10110000;
 8001a90:	23b0      	movs	r3, #176	; 0xb0
 8001a92:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_PARAM_WR, 1, data, 1, Timeout);
 8001a96:	9402      	str	r4, [sp, #8]
 8001a98:	9501      	str	r5, [sp, #4]
 8001a9a:	ae05      	add	r6, sp, #20
 8001a9c:	9600      	str	r6, [sp, #0]
 8001a9e:	462b      	mov	r3, r5
 8001aa0:	2217      	movs	r2, #23
 8001aa2:	21c0      	movs	r1, #192	; 0xc0
 8001aa4:	a80a      	add	r0, sp, #40	; 0x28
 8001aa6:	f003 fbaf 	bl	8005208 <HAL_I2C_Mem_Write>
	data[0] = SI1145_CMD_writeRAM | SI1145_RAM_CHLIST;
 8001aaa:	23a1      	movs	r3, #161	; 0xa1
 8001aac:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001ab0:	9402      	str	r4, [sp, #8]
 8001ab2:	9501      	str	r5, [sp, #4]
 8001ab4:	9600      	str	r6, [sp, #0]
 8001ab6:	462b      	mov	r3, r5
 8001ab8:	2218      	movs	r2, #24
 8001aba:	21c0      	movs	r1, #192	; 0xc0
 8001abc:	a80a      	add	r0, sp, #40	; 0x28
 8001abe:	f003 fba3 	bl	8005208 <HAL_I2C_Mem_Write>
	if(status != HAL_OK)
 8001ac2:	2800      	cmp	r0, #0
 8001ac4:	f47f af4c 	bne.w	8001960 <SI1145_Init+0x2c>
	data[0] = SI1145_ALS_AUTO;
 8001ac8:	230e      	movs	r3, #14
 8001aca:	f88d 3014 	strb.w	r3, [sp, #20]
	status = HAL_I2C_Mem_Write(&handle, SI1145_Address, SI1145_COMMAND, 1, data, 1, Timeout);
 8001ace:	9402      	str	r4, [sp, #8]
 8001ad0:	462b      	mov	r3, r5
 8001ad2:	9501      	str	r5, [sp, #4]
 8001ad4:	aa05      	add	r2, sp, #20
 8001ad6:	9200      	str	r2, [sp, #0]
 8001ad8:	2218      	movs	r2, #24
 8001ada:	21c0      	movs	r1, #192	; 0xc0
 8001adc:	a80a      	add	r0, sp, #40	; 0x28
 8001ade:	f003 fb93 	bl	8005208 <HAL_I2C_Mem_Write>
	return status;
 8001ae2:	e73d      	b.n	8001960 <SI1145_Init+0x2c>
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	200002ec 	.word	0x200002ec

08001aec <SI1145_read_ID>:



HAL_StatusTypeDef SI1145_read_ID(I2C_HandleTypeDef handle, uint8_t *ptr_ID, uint16_t Timeout)
{
 8001aec:	b084      	sub	sp, #16
 8001aee:	b500      	push	{lr}
 8001af0:	b085      	sub	sp, #20
 8001af2:	f10d 0c18 	add.w	ip, sp, #24
 8001af6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	return HAL_I2C_Mem_Read(&handle, SI1145_Address, SI1145_PART_ID, 1, ptr_ID, 1, Timeout);
 8001afa:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	2301      	movs	r3, #1
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001b06:	9200      	str	r2, [sp, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	21c0      	movs	r1, #192	; 0xc0
 8001b0c:	4660      	mov	r0, ip
 8001b0e:	f003 fc2d 	bl	800536c <HAL_I2C_Mem_Read>
}
 8001b12:	b005      	add	sp, #20
 8001b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b18:	b004      	add	sp, #16
 8001b1a:	4770      	bx	lr

08001b1c <SI1145_Read_Data>:



HAL_StatusTypeDef SI1145_Read_Data(I2C_HandleTypeDef handle, uint16_t Timeout)
{
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	b500      	push	{lr}
 8001b20:	b089      	sub	sp, #36	; 0x24
 8001b22:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8001b26:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_StatusTypeDef status;
	uint8_t data[12];

	status = HAL_I2C_Mem_Read(&handle, SI1145_Address, SI1145_VIS_DATA_L , 1, data, 12, Timeout);
 8001b2a:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	230c      	movs	r3, #12
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	ab05      	add	r3, sp, #20
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	2222      	movs	r2, #34	; 0x22
 8001b3c:	21c0      	movs	r1, #192	; 0xc0
 8001b3e:	4660      	mov	r0, ip
 8001b40:	f003 fc14 	bl	800536c <HAL_I2C_Mem_Read>
	if(status != HAL_OK)
 8001b44:	b9a8      	cbnz	r0, 8001b72 <SI1145_Read_Data+0x56>
		return status;

	SI1145_raw_data.VIS = data[1] << 8 | data[0];
 8001b46:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001b4a:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001b4e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <SI1145_Read_Data+0x60>)
 8001b54:	809a      	strh	r2, [r3, #4]
	SI1145_raw_data.IR = data[3] << 8 | data[2];
 8001b56:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8001b5a:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001b5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b62:	805a      	strh	r2, [r3, #2]
	SI1145_raw_data.UV = data[11] << 8 | data[10];
 8001b64:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8001b68:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8001b6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b70:	801a      	strh	r2, [r3, #0]

	return status;
}
 8001b72:	b009      	add	sp, #36	; 0x24
 8001b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b78:	b004      	add	sp, #16
 8001b7a:	4770      	bx	lr
 8001b7c:	200002f8 	.word	0x200002f8

08001b80 <SI1145_IR_raw>:


uint16_t SI1145_IR_raw()
{
	return SI1145_raw_data.IR;
}
 8001b80:	4b01      	ldr	r3, [pc, #4]	; (8001b88 <SI1145_IR_raw+0x8>)
 8001b82:	8858      	ldrh	r0, [r3, #2]
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200002f8 	.word	0x200002f8

08001b8c <SI1145_VIS_raw>:


uint16_t SI1145_VIS_raw()
{
	return SI1145_raw_data.VIS;
}
 8001b8c:	4b01      	ldr	r3, [pc, #4]	; (8001b94 <SI1145_VIS_raw+0x8>)
 8001b8e:	8898      	ldrh	r0, [r3, #4]
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	200002f8 	.word	0x200002f8

08001b98 <SI1145_UV_double>:


double SI1145_UV_double()
{
 8001b98:	b508      	push	{r3, lr}
	return (double)SI1145_raw_data.UV / 100;
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <SI1145_UV_double+0x18>)
 8001b9c:	8818      	ldrh	r0, [r3, #0]
 8001b9e:	f7fe fcb9 	bl	8000514 <__aeabi_ui2d>
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <SI1145_UV_double+0x1c>)
 8001ba6:	f7fe fe59 	bl	800085c <__aeabi_ddiv>
}
 8001baa:	ec41 0b10 	vmov	d0, r0, r1
 8001bae:	bd08      	pop	{r3, pc}
 8001bb0:	200002f8 	.word	0x200002f8
 8001bb4:	40590000 	.word	0x40590000

08001bb8 <SD_PowerOff>:
}

/* power off */
static void SD_PowerOff(void) 
{
	PowerFlag = 0;
 8001bb8:	4b01      	ldr	r3, [pc, #4]	; (8001bc0 <SD_PowerOff+0x8>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
}
 8001bbe:	4770      	bx	lr
 8001bc0:	20000235 	.word	0x20000235

08001bc4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
	return PowerFlag;
}
 8001bc4:	4b01      	ldr	r3, [pc, #4]	; (8001bcc <SD_CheckPower+0x8>)
 8001bc6:	7818      	ldrb	r0, [r3, #0]
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000235 	.word	0x20000235

08001bd0 <SPI_TxBuffer>:
{
 8001bd0:	b508      	push	{r3, lr}
 8001bd2:	460a      	mov	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SPI_TxBuffer+0x1c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f013 0f02 	tst.w	r3, #2
 8001bde:	d0f9      	beq.n	8001bd4 <SPI_TxBuffer+0x4>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001be0:	2364      	movs	r3, #100	; 0x64
 8001be2:	4601      	mov	r1, r0
 8001be4:	4801      	ldr	r0, [pc, #4]	; (8001bec <SPI_TxBuffer+0x1c>)
 8001be6:	f004 fbe6 	bl	80063b6 <HAL_SPI_Transmit>
}
 8001bea:	bd08      	pop	{r3, pc}
 8001bec:	20000b0c 	.word	0x20000b0c

08001bf0 <SPI_TxByte>:
{
 8001bf0:	b500      	push	{lr}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <SPI_TxByte+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f013 0f02 	tst.w	r3, #2
 8001c02:	d0f9      	beq.n	8001bf8 <SPI_TxByte+0x8>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001c04:	2364      	movs	r3, #100	; 0x64
 8001c06:	2201      	movs	r2, #1
 8001c08:	f10d 0107 	add.w	r1, sp, #7
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <SPI_TxByte+0x28>)
 8001c0e:	f004 fbd2 	bl	80063b6 <HAL_SPI_Transmit>
}
 8001c12:	b003      	add	sp, #12
 8001c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c18:	20000b0c 	.word	0x20000b0c

08001c1c <SELECT>:
{
 8001c1c:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2110      	movs	r1, #16
 8001c22:	4803      	ldr	r0, [pc, #12]	; (8001c30 <SELECT+0x14>)
 8001c24:	f002 ffad 	bl	8004b82 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f002 fdef 	bl	800480c <HAL_Delay>
}
 8001c2e:	bd08      	pop	{r3, pc}
 8001c30:	40020000 	.word	0x40020000

08001c34 <DESELECT>:
{
 8001c34:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001c36:	2201      	movs	r2, #1
 8001c38:	2110      	movs	r1, #16
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <DESELECT+0x14>)
 8001c3c:	f002 ffa1 	bl	8004b82 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c40:	2001      	movs	r0, #1
 8001c42:	f002 fde3 	bl	800480c <HAL_Delay>
}
 8001c46:	bd08      	pop	{r3, pc}
 8001c48:	40020000 	.word	0x40020000

08001c4c <SPI_RxByte>:
{
 8001c4c:	b500      	push	{lr}
 8001c4e:	b085      	sub	sp, #20
	dummy = 0xFF;
 8001c50:	23ff      	movs	r3, #255	; 0xff
 8001c52:	f88d 300f 	strb.w	r3, [sp, #15]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <SPI_RxByte+0x34>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f013 0f02 	tst.w	r3, #2
 8001c60:	d0f9      	beq.n	8001c56 <SPI_RxByte+0xa>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001c62:	2364      	movs	r3, #100	; 0x64
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2301      	movs	r3, #1
 8001c68:	f10d 020e 	add.w	r2, sp, #14
 8001c6c:	f10d 010f 	add.w	r1, sp, #15
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <SPI_RxByte+0x34>)
 8001c72:	f004 fc77 	bl	8006564 <HAL_SPI_TransmitReceive>
}
 8001c76:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001c7a:	b005      	add	sp, #20
 8001c7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c80:	20000b0c 	.word	0x20000b0c

08001c84 <SD_PowerOn>:
{
 8001c84:	b510      	push	{r4, lr}
 8001c86:	b082      	sub	sp, #8
	DESELECT();
 8001c88:	f7ff ffd4 	bl	8001c34 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001c8c:	2400      	movs	r4, #0
 8001c8e:	2c09      	cmp	r4, #9
 8001c90:	dc04      	bgt.n	8001c9c <SD_PowerOn+0x18>
		SPI_TxByte(0xFF);
 8001c92:	20ff      	movs	r0, #255	; 0xff
 8001c94:	f7ff ffac 	bl	8001bf0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001c98:	3401      	adds	r4, #1
 8001c9a:	e7f8      	b.n	8001c8e <SD_PowerOn+0xa>
	SELECT();
 8001c9c:	f7ff ffbe 	bl	8001c1c <SELECT>
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001ca0:	2340      	movs	r3, #64	; 0x40
 8001ca2:	f88d 3000 	strb.w	r3, [sp]
	args[1] = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f88d 3001 	strb.w	r3, [sp, #1]
	args[2] = 0;
 8001cac:	f88d 3002 	strb.w	r3, [sp, #2]
	args[3] = 0;
 8001cb0:	f88d 3003 	strb.w	r3, [sp, #3]
	args[4] = 0;
 8001cb4:	f88d 3004 	strb.w	r3, [sp, #4]
	args[5] = 0x95;		/* CRC */
 8001cb8:	2395      	movs	r3, #149	; 0x95
 8001cba:	f88d 3005 	strb.w	r3, [sp, #5]
	SPI_TxBuffer(args, sizeof(args));
 8001cbe:	2106      	movs	r1, #6
 8001cc0:	4668      	mov	r0, sp
 8001cc2:	f7ff ff85 	bl	8001bd0 <SPI_TxBuffer>
	uint32_t cnt = 0x1FFF;
 8001cc6:	f641 74ff 	movw	r4, #8191	; 0x1fff
	while ((SPI_RxByte() != 0x01) && cnt)
 8001cca:	f7ff ffbf 	bl	8001c4c <SPI_RxByte>
 8001cce:	2801      	cmp	r0, #1
 8001cd0:	d002      	beq.n	8001cd8 <SD_PowerOn+0x54>
 8001cd2:	b10c      	cbz	r4, 8001cd8 <SD_PowerOn+0x54>
		cnt--;
 8001cd4:	3c01      	subs	r4, #1
 8001cd6:	e7f8      	b.n	8001cca <SD_PowerOn+0x46>
	DESELECT();
 8001cd8:	f7ff ffac 	bl	8001c34 <DESELECT>
	SPI_TxByte(0XFF);
 8001cdc:	20ff      	movs	r0, #255	; 0xff
 8001cde:	f7ff ff87 	bl	8001bf0 <SPI_TxByte>
	PowerFlag = 1;
 8001ce2:	4b02      	ldr	r3, [pc, #8]	; (8001cec <SD_PowerOn+0x68>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
}
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd10      	pop	{r4, pc}
 8001cec:	20000235 	.word	0x20000235

08001cf0 <SD_ReadyWait>:
{
 8001cf0:	b538      	push	{r3, r4, r5, lr}
	tickstart = HAL_GetTick();
 8001cf2:	f002 fd85 	bl	8004800 <HAL_GetTick>
 8001cf6:	4605      	mov	r5, r0
		res = SPI_RxByte();
 8001cf8:	f7ff ffa8 	bl	8001c4c <SPI_RxByte>
 8001cfc:	4604      	mov	r4, r0
	} while ((res != 0xFF) && ((HAL_GetTick() - tickstart) < SD_ReadyWait_TIMEOUT));
 8001cfe:	28ff      	cmp	r0, #255	; 0xff
 8001d00:	d005      	beq.n	8001d0e <SD_ReadyWait+0x1e>
 8001d02:	f002 fd7d 	bl	8004800 <HAL_GetTick>
 8001d06:	1b40      	subs	r0, r0, r5
 8001d08:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001d0c:	d3f4      	bcc.n	8001cf8 <SD_ReadyWait+0x8>
}
 8001d0e:	4620      	mov	r0, r4
 8001d10:	bd38      	pop	{r3, r4, r5, pc}

08001d12 <SD_SendCmd>:
}
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001d12:	b538      	push	{r3, r4, r5, lr}
 8001d14:	4605      	mov	r5, r0
 8001d16:	460c      	mov	r4, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001d18:	f7ff ffea 	bl	8001cf0 <SD_ReadyWait>
 8001d1c:	28ff      	cmp	r0, #255	; 0xff
 8001d1e:	d001      	beq.n	8001d24 <SD_SendCmd+0x12>
 8001d20:	20ff      	movs	r0, #255	; 0xff
	do {
		res = SPI_RxByte();
	} while ((res & 0x80) && --n);

	return res;
}
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(cmd); 					/* Command */
 8001d24:	4628      	mov	r0, r5
 8001d26:	f7ff ff63 	bl	8001bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001d2a:	0e20      	lsrs	r0, r4, #24
 8001d2c:	f7ff ff60 	bl	8001bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001d30:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001d34:	f7ff ff5c 	bl	8001bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001d38:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8001d3c:	f7ff ff58 	bl	8001bf0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001d40:	b2e0      	uxtb	r0, r4
 8001d42:	f7ff ff55 	bl	8001bf0 <SPI_TxByte>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001d46:	2d40      	cmp	r5, #64	; 0x40
 8001d48:	d013      	beq.n	8001d72 <SD_SendCmd+0x60>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d4a:	2d48      	cmp	r5, #72	; 0x48
 8001d4c:	d00f      	beq.n	8001d6e <SD_SendCmd+0x5c>
	else crc = 1;
 8001d4e:	2001      	movs	r0, #1
	SPI_TxByte(crc);
 8001d50:	f7ff ff4e 	bl	8001bf0 <SPI_TxByte>
	if (cmd == CMD12) SPI_RxByte();
 8001d54:	2d4c      	cmp	r5, #76	; 0x4c
 8001d56:	d00e      	beq.n	8001d76 <SD_SendCmd+0x64>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d58:	240a      	movs	r4, #10
		res = SPI_RxByte();
 8001d5a:	f7ff ff77 	bl	8001c4c <SPI_RxByte>
	} while ((res & 0x80) && --n);
 8001d5e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d62:	d0de      	beq.n	8001d22 <SD_SendCmd+0x10>
 8001d64:	1e63      	subs	r3, r4, #1
 8001d66:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8001d6a:	d1f6      	bne.n	8001d5a <SD_SendCmd+0x48>
 8001d6c:	e7d9      	b.n	8001d22 <SD_SendCmd+0x10>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001d6e:	2087      	movs	r0, #135	; 0x87
 8001d70:	e7ee      	b.n	8001d50 <SD_SendCmd+0x3e>
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001d72:	2095      	movs	r0, #149	; 0x95
 8001d74:	e7ec      	b.n	8001d50 <SD_SendCmd+0x3e>
	if (cmd == CMD12) SPI_RxByte();
 8001d76:	f7ff ff69 	bl	8001c4c <SPI_RxByte>
 8001d7a:	e7ed      	b.n	8001d58 <SD_SendCmd+0x46>

08001d7c <SPI_RxBytePtr>:
{
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	4604      	mov	r4, r0
	*buff = SPI_RxByte();
 8001d80:	f7ff ff64 	bl	8001c4c <SPI_RxByte>
 8001d84:	7020      	strb	r0, [r4, #0]
}
 8001d86:	bd10      	pop	{r4, pc}

08001d88 <SD_RxDataBlock>:
{
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8a:	4605      	mov	r5, r0
 8001d8c:	460e      	mov	r6, r1
	tickstart = HAL_GetTick();
 8001d8e:	f002 fd37 	bl	8004800 <HAL_GetTick>
 8001d92:	4607      	mov	r7, r0
		token = SPI_RxByte();
 8001d94:	f7ff ff5a 	bl	8001c4c <SPI_RxByte>
 8001d98:	4604      	mov	r4, r0
	} while((token == 0xFF) && ((HAL_GetTick() - tickstart) < SD_RxDataBlock_TIMEOUT));
 8001d9a:	28ff      	cmp	r0, #255	; 0xff
 8001d9c:	d104      	bne.n	8001da8 <SD_RxDataBlock+0x20>
 8001d9e:	f002 fd2f 	bl	8004800 <HAL_GetTick>
 8001da2:	1bc0      	subs	r0, r0, r7
 8001da4:	28c7      	cmp	r0, #199	; 0xc7
 8001da6:	d9f5      	bls.n	8001d94 <SD_RxDataBlock+0xc>
	if(token != 0xFE) return FALSE;
 8001da8:	2cfe      	cmp	r4, #254	; 0xfe
 8001daa:	d10d      	bne.n	8001dc8 <SD_RxDataBlock+0x40>
		SPI_RxBytePtr(buff++);
 8001dac:	4628      	mov	r0, r5
 8001dae:	3501      	adds	r5, #1
 8001db0:	f7ff ffe4 	bl	8001d7c <SPI_RxBytePtr>
	} while(len--);
 8001db4:	4633      	mov	r3, r6
 8001db6:	3e01      	subs	r6, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f7      	bne.n	8001dac <SD_RxDataBlock+0x24>
	SPI_RxByte();
 8001dbc:	f7ff ff46 	bl	8001c4c <SPI_RxByte>
	SPI_RxByte();
 8001dc0:	f7ff ff44 	bl	8001c4c <SPI_RxByte>
	return TRUE;
 8001dc4:	2001      	movs	r0, #1
}
 8001dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(token != 0xFE) return FALSE;
 8001dc8:	2000      	movs	r0, #0
 8001dca:	e7fc      	b.n	8001dc6 <SD_RxDataBlock+0x3e>

08001dcc <SD_TxDataBlock>:
{
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	4605      	mov	r5, r0
 8001dd0:	460c      	mov	r4, r1
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001dd2:	f7ff ff8d 	bl	8001cf0 <SD_ReadyWait>
 8001dd6:	28ff      	cmp	r0, #255	; 0xff
 8001dd8:	d001      	beq.n	8001dde <SD_TxDataBlock+0x12>
 8001dda:	2000      	movs	r0, #0
}
 8001ddc:	bd38      	pop	{r3, r4, r5, pc}
	SPI_TxByte(token);
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff ff06 	bl	8001bf0 <SPI_TxByte>
	if (token != 0xFD)
 8001de4:	2cfd      	cmp	r4, #253	; 0xfd
 8001de6:	d106      	bne.n	8001df6 <SD_TxDataBlock+0x2a>
	uint8_t resp = 0;
 8001de8:	2500      	movs	r5, #0
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001dea:	f005 051f 	and.w	r5, r5, #31
 8001dee:	2d05      	cmp	r5, #5
 8001df0:	d01d      	beq.n	8001e2e <SD_TxDataBlock+0x62>
	return FALSE;
 8001df2:	2000      	movs	r0, #0
 8001df4:	e7f2      	b.n	8001ddc <SD_TxDataBlock+0x10>
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f7ff fee8 	bl	8001bd0 <SPI_TxBuffer>
		SPI_RxByte();
 8001e00:	f7ff ff24 	bl	8001c4c <SPI_RxByte>
		SPI_RxByte();
 8001e04:	f7ff ff22 	bl	8001c4c <SPI_RxByte>
	uint8_t i = 0;
 8001e08:	2400      	movs	r4, #0
	uint8_t resp = 0;
 8001e0a:	4625      	mov	r5, r4
		while (i <= 64)
 8001e0c:	e001      	b.n	8001e12 <SD_TxDataBlock+0x46>
			i++;
 8001e0e:	3401      	adds	r4, #1
 8001e10:	b2e4      	uxtb	r4, r4
		while (i <= 64)
 8001e12:	2c40      	cmp	r4, #64	; 0x40
 8001e14:	d806      	bhi.n	8001e24 <SD_TxDataBlock+0x58>
			resp = SPI_RxByte();
 8001e16:	f7ff ff19 	bl	8001c4c <SPI_RxByte>
 8001e1a:	4605      	mov	r5, r0
			if ((resp & 0x1F) == 0x05) break;
 8001e1c:	f000 031f 	and.w	r3, r0, #31
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d1f4      	bne.n	8001e0e <SD_TxDataBlock+0x42>
		while (SPI_RxByte() == 0);
 8001e24:	f7ff ff12 	bl	8001c4c <SPI_RxByte>
 8001e28:	2800      	cmp	r0, #0
 8001e2a:	d0fb      	beq.n	8001e24 <SD_TxDataBlock+0x58>
 8001e2c:	e7dd      	b.n	8001dea <SD_TxDataBlock+0x1e>
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001e2e:	2001      	movs	r0, #1
 8001e30:	e7d4      	b.n	8001ddc <SD_TxDataBlock+0x10>
	...

08001e34 <SD_disk_initialize>:
	uint8_t n, type, ocr[4];
	uint32_t tickstart;


	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001e34:	2800      	cmp	r0, #0
 8001e36:	f040 80b9 	bne.w	8001fac <SD_disk_initialize+0x178>
{
 8001e3a:	b570      	push	{r4, r5, r6, lr}
 8001e3c:	b082      	sub	sp, #8

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	; (8001fb0 <SD_disk_initialize+0x17c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	f013 0402 	ands.w	r4, r3, #2
 8001e46:	d004      	beq.n	8001e52 <SD_disk_initialize+0x1e>
 8001e48:	4b59      	ldr	r3, [pc, #356]	; (8001fb0 <SD_disk_initialize+0x17c>)
 8001e4a:	7818      	ldrb	r0, [r3, #0]
 8001e4c:	b2c0      	uxtb	r0, r0
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
}
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd70      	pop	{r4, r5, r6, pc}
	SD_PowerOn();
 8001e52:	f7ff ff17 	bl	8001c84 <SD_PowerOn>
	SELECT();
 8001e56:	f7ff fee1 	bl	8001c1c <SELECT>
	if (SD_SendCmd(CMD0, 0) == 1)
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	2040      	movs	r0, #64	; 0x40
 8001e5e:	f7ff ff58 	bl	8001d12 <SD_SendCmd>
 8001e62:	4605      	mov	r5, r0
 8001e64:	2801      	cmp	r0, #1
 8001e66:	d011      	beq.n	8001e8c <SD_disk_initialize+0x58>
	CardType = type;
 8001e68:	4b52      	ldr	r3, [pc, #328]	; (8001fb4 <SD_disk_initialize+0x180>)
 8001e6a:	701c      	strb	r4, [r3, #0]
	DESELECT();
 8001e6c:	f7ff fee2 	bl	8001c34 <DESELECT>
	SPI_RxByte();
 8001e70:	f7ff feec 	bl	8001c4c <SPI_RxByte>
	if (type)
 8001e74:	2c00      	cmp	r4, #0
 8001e76:	f000 8096 	beq.w	8001fa6 <SD_disk_initialize+0x172>
		Stat &= ~STA_NOINIT;
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <SD_disk_initialize+0x17c>)
 8001e7c:	7813      	ldrb	r3, [r2, #0]
 8001e7e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001e82:	7013      	strb	r3, [r2, #0]
	return Stat;
 8001e84:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <SD_disk_initialize+0x17c>)
 8001e86:	7818      	ldrb	r0, [r3, #0]
 8001e88:	b2c0      	uxtb	r0, r0
 8001e8a:	e7e0      	b.n	8001e4e <SD_disk_initialize+0x1a>
		tickstart = HAL_GetTick();
 8001e8c:	f002 fcb8 	bl	8004800 <HAL_GetTick>
 8001e90:	4606      	mov	r6, r0
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001e92:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001e96:	2048      	movs	r0, #72	; 0x48
 8001e98:	f7ff ff3b 	bl	8001d12 <SD_SendCmd>
 8001e9c:	2801      	cmp	r0, #1
 8001e9e:	d146      	bne.n	8001f2e <SD_disk_initialize+0xfa>
			for (n = 0; n < 4; n++)
 8001ea0:	4625      	mov	r5, r4
 8001ea2:	e007      	b.n	8001eb4 <SD_disk_initialize+0x80>
				ocr[n] = SPI_RxByte();
 8001ea4:	f7ff fed2 	bl	8001c4c <SPI_RxByte>
 8001ea8:	ab02      	add	r3, sp, #8
 8001eaa:	442b      	add	r3, r5
 8001eac:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++)
 8001eb0:	3501      	adds	r5, #1
 8001eb2:	b2ed      	uxtb	r5, r5
 8001eb4:	2d03      	cmp	r5, #3
 8001eb6:	d9f5      	bls.n	8001ea4 <SD_disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001eb8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d1d3      	bne.n	8001e68 <SD_disk_initialize+0x34>
 8001ec0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ec4:	2baa      	cmp	r3, #170	; 0xaa
 8001ec6:	d1cf      	bne.n	8001e68 <SD_disk_initialize+0x34>
 8001ec8:	e005      	b.n	8001ed6 <SD_disk_initialize+0xa2>
				} while ((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT);
 8001eca:	f002 fc99 	bl	8004800 <HAL_GetTick>
 8001ece:	1b80      	subs	r0, r0, r6
 8001ed0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ed4:	d20c      	bcs.n	8001ef0 <SD_disk_initialize+0xbc>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2077      	movs	r0, #119	; 0x77
 8001eda:	f7ff ff1a 	bl	8001d12 <SD_SendCmd>
 8001ede:	2801      	cmp	r0, #1
 8001ee0:	d8f3      	bhi.n	8001eca <SD_disk_initialize+0x96>
 8001ee2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ee6:	2069      	movs	r0, #105	; 0x69
 8001ee8:	f7ff ff13 	bl	8001d12 <SD_SendCmd>
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d1ec      	bne.n	8001eca <SD_disk_initialize+0x96>
				if (((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT) && SD_SendCmd(CMD58, 0) == 0)
 8001ef0:	f002 fc86 	bl	8004800 <HAL_GetTick>
 8001ef4:	1b86      	subs	r6, r0, r6
 8001ef6:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 8001efa:	d2b5      	bcs.n	8001e68 <SD_disk_initialize+0x34>
 8001efc:	2100      	movs	r1, #0
 8001efe:	207a      	movs	r0, #122	; 0x7a
 8001f00:	f7ff ff07 	bl	8001d12 <SD_SendCmd>
 8001f04:	4605      	mov	r5, r0
 8001f06:	2800      	cmp	r0, #0
 8001f08:	d1ae      	bne.n	8001e68 <SD_disk_initialize+0x34>
					for (n = 0; n < 4; n++)
 8001f0a:	2d03      	cmp	r5, #3
 8001f0c:	d808      	bhi.n	8001f20 <SD_disk_initialize+0xec>
						ocr[n] = SPI_RxByte();
 8001f0e:	f7ff fe9d 	bl	8001c4c <SPI_RxByte>
 8001f12:	ab02      	add	r3, sp, #8
 8001f14:	442b      	add	r3, r5
 8001f16:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)
 8001f1a:	3501      	adds	r5, #1
 8001f1c:	b2ed      	uxtb	r5, r5
 8001f1e:	e7f4      	b.n	8001f0a <SD_disk_initialize+0xd6>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001f20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001f28:	d03b      	beq.n	8001fa2 <SD_disk_initialize+0x16e>
 8001f2a:	240c      	movs	r4, #12
 8001f2c:	e79c      	b.n	8001e68 <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2077      	movs	r0, #119	; 0x77
 8001f32:	f7ff feee 	bl	8001d12 <SD_SendCmd>
 8001f36:	2801      	cmp	r0, #1
 8001f38:	d813      	bhi.n	8001f62 <SD_disk_initialize+0x12e>
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	2069      	movs	r0, #105	; 0x69
 8001f3e:	f7ff fee8 	bl	8001d12 <SD_SendCmd>
 8001f42:	2801      	cmp	r0, #1
 8001f44:	d80d      	bhi.n	8001f62 <SD_disk_initialize+0x12e>
 8001f46:	2502      	movs	r5, #2
 8001f48:	e00b      	b.n	8001f62 <SD_disk_initialize+0x12e>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2077      	movs	r0, #119	; 0x77
 8001f4e:	f7ff fee0 	bl	8001d12 <SD_SendCmd>
 8001f52:	2801      	cmp	r0, #1
 8001f54:	d91e      	bls.n	8001f94 <SD_disk_initialize+0x160>
			} while ((HAL_GetTick() - tickstart) < SD_disk_init_TIMEOUT);
 8001f56:	f002 fc53 	bl	8004800 <HAL_GetTick>
 8001f5a:	1b83      	subs	r3, r0, r6
 8001f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f60:	d207      	bcs.n	8001f72 <SD_disk_initialize+0x13e>
				if (type == CT_SD1)
 8001f62:	2d02      	cmp	r5, #2
 8001f64:	d0f1      	beq.n	8001f4a <SD_disk_initialize+0x116>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001f66:	2100      	movs	r1, #0
 8001f68:	2041      	movs	r0, #65	; 0x41
 8001f6a:	f7ff fed2 	bl	8001d12 <SD_SendCmd>
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d1f1      	bne.n	8001f56 <SD_disk_initialize+0x122>
			if (((HAL_GetTick() - tickstart) >= SD_disk_init_TIMEOUT) || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001f72:	f002 fc45 	bl	8004800 <HAL_GetTick>
 8001f76:	1b86      	subs	r6, r0, r6
 8001f78:	f5b6 7f7a 	cmp.w	r6, #1000	; 0x3e8
 8001f7c:	f4bf af74 	bcs.w	8001e68 <SD_disk_initialize+0x34>
 8001f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f84:	2050      	movs	r0, #80	; 0x50
 8001f86:	f7ff fec4 	bl	8001d12 <SD_SendCmd>
 8001f8a:	2800      	cmp	r0, #0
 8001f8c:	f47f af6c 	bne.w	8001e68 <SD_disk_initialize+0x34>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001f90:	462c      	mov	r4, r5
 8001f92:	e769      	b.n	8001e68 <SD_disk_initialize+0x34>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001f94:	2100      	movs	r1, #0
 8001f96:	2069      	movs	r0, #105	; 0x69
 8001f98:	f7ff febb 	bl	8001d12 <SD_SendCmd>
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d1da      	bne.n	8001f56 <SD_disk_initialize+0x122>
 8001fa0:	e7e7      	b.n	8001f72 <SD_disk_initialize+0x13e>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001fa2:	2404      	movs	r4, #4
 8001fa4:	e760      	b.n	8001e68 <SD_disk_initialize+0x34>
		SD_PowerOff();
 8001fa6:	f7ff fe07 	bl	8001bb8 <SD_PowerOff>
 8001faa:	e76b      	b.n	8001e84 <SD_disk_initialize+0x50>
	if(drv) return STA_NOINIT;
 8001fac:	2001      	movs	r0, #1
}
 8001fae:	4770      	bx	lr
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	20000234 	.word	0x20000234

08001fb8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
	if (drv) return STA_NOINIT;
 8001fb8:	b918      	cbnz	r0, 8001fc2 <SD_disk_status+0xa>
	return Stat;
 8001fba:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <SD_disk_status+0x10>)
 8001fbc:	7818      	ldrb	r0, [r3, #0]
 8001fbe:	b2c0      	uxtb	r0, r0
 8001fc0:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 8001fc2:	2001      	movs	r0, #1
}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000004 	.word	0x20000004

08001fcc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d13e      	bne.n	800204e <SD_disk_read+0x82>
{
 8001fd0:	b570      	push	{r4, r5, r6, lr}
 8001fd2:	460d      	mov	r5, r1
 8001fd4:	4616      	mov	r6, r2
 8001fd6:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d03a      	beq.n	8002052 <SD_disk_read+0x86>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001fdc:	4b1f      	ldr	r3, [pc, #124]	; (800205c <SD_disk_read+0x90>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f013 0f01 	tst.w	r3, #1
 8001fe4:	d137      	bne.n	8002056 <SD_disk_read+0x8a>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <SD_disk_read+0x94>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f013 0f04 	tst.w	r3, #4
 8001fee:	d100      	bne.n	8001ff2 <SD_disk_read+0x26>
 8001ff0:	0256      	lsls	r6, r2, #9

	SELECT();
 8001ff2:	f7ff fe13 	bl	8001c1c <SELECT>

	if (count == 1)
 8001ff6:	2c01      	cmp	r4, #1
 8001ff8:	d01a      	beq.n	8002030 <SD_disk_read+0x64>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001ffa:	4631      	mov	r1, r6
 8001ffc:	2052      	movs	r0, #82	; 0x52
 8001ffe:	f7ff fe88 	bl	8001d12 <SD_SendCmd>
 8002002:	b968      	cbnz	r0, 8002020 <SD_disk_read+0x54>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8002004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002008:	4628      	mov	r0, r5
 800200a:	f7ff febd 	bl	8001d88 <SD_RxDataBlock>
 800200e:	b118      	cbz	r0, 8002018 <SD_disk_read+0x4c>
				buff += 512;
 8002010:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 8002014:	3c01      	subs	r4, #1
 8002016:	d1f5      	bne.n	8002004 <SD_disk_read+0x38>

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002018:	2100      	movs	r1, #0
 800201a:	204c      	movs	r0, #76	; 0x4c
 800201c:	f7ff fe79 	bl	8001d12 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8002020:	f7ff fe08 	bl	8001c34 <DESELECT>
	SPI_RxByte();
 8002024:	f7ff fe12 	bl	8001c4c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002028:	1e20      	subs	r0, r4, #0
 800202a:	bf18      	it	ne
 800202c:	2001      	movne	r0, #1
}
 800202e:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8002030:	4631      	mov	r1, r6
 8002032:	2051      	movs	r0, #81	; 0x51
 8002034:	f7ff fe6d 	bl	8001d12 <SD_SendCmd>
 8002038:	2800      	cmp	r0, #0
 800203a:	d1f1      	bne.n	8002020 <SD_disk_read+0x54>
 800203c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002040:	4628      	mov	r0, r5
 8002042:	f7ff fea1 	bl	8001d88 <SD_RxDataBlock>
 8002046:	2800      	cmp	r0, #0
 8002048:	d0ea      	beq.n	8002020 <SD_disk_read+0x54>
 800204a:	2400      	movs	r4, #0
 800204c:	e7e8      	b.n	8002020 <SD_disk_read+0x54>
	if (pdrv || !count) return RES_PARERR;
 800204e:	2004      	movs	r0, #4
}
 8002050:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8002052:	2004      	movs	r0, #4
 8002054:	e7eb      	b.n	800202e <SD_disk_read+0x62>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002056:	2003      	movs	r0, #3
 8002058:	e7e9      	b.n	800202e <SD_disk_read+0x62>
 800205a:	bf00      	nop
 800205c:	20000004 	.word	0x20000004
 8002060:	20000234 	.word	0x20000234

08002064 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002064:	2800      	cmp	r0, #0
 8002066:	d152      	bne.n	800210e <SD_disk_write+0xaa>
{
 8002068:	b570      	push	{r4, r5, r6, lr}
 800206a:	460d      	mov	r5, r1
 800206c:	4616      	mov	r6, r2
 800206e:	461c      	mov	r4, r3
	if (pdrv || !count) return RES_PARERR;
 8002070:	2b00      	cmp	r3, #0
 8002072:	d04e      	beq.n	8002112 <SD_disk_write+0xae>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <SD_disk_write+0xbc>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f013 0f01 	tst.w	r3, #1
 800207c:	d14b      	bne.n	8002116 <SD_disk_write+0xb2>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800207e:	4b28      	ldr	r3, [pc, #160]	; (8002120 <SD_disk_write+0xbc>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f013 0f04 	tst.w	r3, #4
 8002086:	d148      	bne.n	800211a <SD_disk_write+0xb6>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <SD_disk_write+0xc0>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f013 0f04 	tst.w	r3, #4
 8002090:	d100      	bne.n	8002094 <SD_disk_write+0x30>
 8002092:	0256      	lsls	r6, r2, #9

	SELECT();
 8002094:	f7ff fdc2 	bl	8001c1c <SELECT>

	if (count == 1)
 8002098:	2c01      	cmp	r4, #1
 800209a:	d01f      	beq.n	80020dc <SD_disk_write+0x78>
			count = 0;
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800209c:	4b21      	ldr	r3, [pc, #132]	; (8002124 <SD_disk_write+0xc0>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	f013 0f02 	tst.w	r3, #2
 80020a4:	d128      	bne.n	80020f8 <SD_disk_write+0x94>
		{
			SD_SendCmd(CMD55, 0);
			SD_SendCmd(CMD23, count); /* ACMD23 */
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80020a6:	4631      	mov	r1, r6
 80020a8:	2059      	movs	r0, #89	; 0x59
 80020aa:	f7ff fe32 	bl	8001d12 <SD_SendCmd>
 80020ae:	b968      	cbnz	r0, 80020cc <SD_disk_write+0x68>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80020b0:	21fc      	movs	r1, #252	; 0xfc
 80020b2:	4628      	mov	r0, r5
 80020b4:	f7ff fe8a 	bl	8001dcc <SD_TxDataBlock>
 80020b8:	b118      	cbz	r0, 80020c2 <SD_disk_write+0x5e>
				buff += 512;
 80020ba:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 80020be:	3c01      	subs	r4, #1
 80020c0:	d1f6      	bne.n	80020b0 <SD_disk_write+0x4c>

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80020c2:	21fd      	movs	r1, #253	; 0xfd
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff fe81 	bl	8001dcc <SD_TxDataBlock>
 80020ca:	b1f0      	cbz	r0, 800210a <SD_disk_write+0xa6>
			}
		}
	}

	/* Idle */
	DESELECT();
 80020cc:	f7ff fdb2 	bl	8001c34 <DESELECT>
	SPI_RxByte();
 80020d0:	f7ff fdbc 	bl	8001c4c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80020d4:	1e20      	subs	r0, r4, #0
 80020d6:	bf18      	it	ne
 80020d8:	2001      	movne	r0, #1
}
 80020da:	bd70      	pop	{r4, r5, r6, pc}
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80020dc:	4631      	mov	r1, r6
 80020de:	2058      	movs	r0, #88	; 0x58
 80020e0:	f7ff fe17 	bl	8001d12 <SD_SendCmd>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d1f1      	bne.n	80020cc <SD_disk_write+0x68>
 80020e8:	21fe      	movs	r1, #254	; 0xfe
 80020ea:	4628      	mov	r0, r5
 80020ec:	f7ff fe6e 	bl	8001dcc <SD_TxDataBlock>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d0eb      	beq.n	80020cc <SD_disk_write+0x68>
			count = 0;
 80020f4:	2400      	movs	r4, #0
 80020f6:	e7e9      	b.n	80020cc <SD_disk_write+0x68>
			SD_SendCmd(CMD55, 0);
 80020f8:	2100      	movs	r1, #0
 80020fa:	2077      	movs	r0, #119	; 0x77
 80020fc:	f7ff fe09 	bl	8001d12 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8002100:	4621      	mov	r1, r4
 8002102:	2057      	movs	r0, #87	; 0x57
 8002104:	f7ff fe05 	bl	8001d12 <SD_SendCmd>
 8002108:	e7cd      	b.n	80020a6 <SD_disk_write+0x42>
				count = 1;
 800210a:	2401      	movs	r4, #1
 800210c:	e7de      	b.n	80020cc <SD_disk_write+0x68>
	if (pdrv || !count) return RES_PARERR;
 800210e:	2004      	movs	r0, #4
}
 8002110:	4770      	bx	lr
	if (pdrv || !count) return RES_PARERR;
 8002112:	2004      	movs	r0, #4
 8002114:	e7e1      	b.n	80020da <SD_disk_write+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002116:	2003      	movs	r0, #3
 8002118:	e7df      	b.n	80020da <SD_disk_write+0x76>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800211a:	2002      	movs	r0, #2
 800211c:	e7dd      	b.n	80020da <SD_disk_write+0x76>
 800211e:	bf00      	nop
 8002120:	20000004 	.word	0x20000004
 8002124:	20000234 	.word	0x20000234

08002128 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	b085      	sub	sp, #20
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800212c:	2800      	cmp	r0, #0
 800212e:	f040 80b2 	bne.w	8002296 <SD_disk_ioctl+0x16e>
 8002132:	460d      	mov	r5, r1
 8002134:	4616      	mov	r6, r2
 8002136:	4607      	mov	r7, r0
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8002138:	2905      	cmp	r1, #5
 800213a:	d013      	beq.n	8002164 <SD_disk_ioctl+0x3c>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800213c:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <SD_disk_ioctl+0x178>)
 800213e:	781c      	ldrb	r4, [r3, #0]
 8002140:	f014 0401 	ands.w	r4, r4, #1
 8002144:	f040 80a9 	bne.w	800229a <SD_disk_ioctl+0x172>

		SELECT();
 8002148:	f7ff fd68 	bl	8001c1c <SELECT>

		switch (ctrl)
 800214c:	2d0d      	cmp	r5, #13
 800214e:	f200 8096 	bhi.w	800227e <SD_disk_ioctl+0x156>
 8002152:	e8df f005 	tbb	[pc, r5]
 8002156:	1b5e      	.short	0x1b5e
 8002158:	9494945a 	.word	0x9494945a
 800215c:	94949494 	.word	0x94949494
 8002160:	82736494 	.word	0x82736494
		switch (*ptr)
 8002164:	7814      	ldrb	r4, [r2, #0]
 8002166:	2c01      	cmp	r4, #1
 8002168:	d007      	beq.n	800217a <SD_disk_ioctl+0x52>
 800216a:	2c02      	cmp	r4, #2
 800216c:	d009      	beq.n	8002182 <SD_disk_ioctl+0x5a>
 800216e:	b10c      	cbz	r4, 8002174 <SD_disk_ioctl+0x4c>
 8002170:	2404      	movs	r4, #4
 8002172:	e089      	b.n	8002288 <SD_disk_ioctl+0x160>
			SD_PowerOff();		/* Power Off */
 8002174:	f7ff fd20 	bl	8001bb8 <SD_PowerOff>
			break;
 8002178:	e086      	b.n	8002288 <SD_disk_ioctl+0x160>
			SD_PowerOn();		/* Power On */
 800217a:	f7ff fd83 	bl	8001c84 <SD_PowerOn>
			res = RES_OK;
 800217e:	463c      	mov	r4, r7
			break;
 8002180:	e082      	b.n	8002288 <SD_disk_ioctl+0x160>
			*(ptr + 1) = SD_CheckPower();
 8002182:	f7ff fd1f 	bl	8001bc4 <SD_CheckPower>
 8002186:	7070      	strb	r0, [r6, #1]
			res = RES_OK;		/* Power Check */
 8002188:	463c      	mov	r4, r7
			break;
 800218a:	e07d      	b.n	8002288 <SD_disk_ioctl+0x160>
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800218c:	2100      	movs	r1, #0
 800218e:	2049      	movs	r0, #73	; 0x49
 8002190:	f7ff fdbf 	bl	8001d12 <SD_SendCmd>
 8002194:	4604      	mov	r4, r0
 8002196:	b108      	cbz	r0, 800219c <SD_disk_ioctl+0x74>
	res = RES_ERROR;
 8002198:	462c      	mov	r4, r5
 800219a:	e071      	b.n	8002280 <SD_disk_ioctl+0x158>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800219c:	2110      	movs	r1, #16
 800219e:	4668      	mov	r0, sp
 80021a0:	f7ff fdf2 	bl	8001d88 <SD_RxDataBlock>
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d072      	beq.n	800228e <SD_disk_ioctl+0x166>
			{
				if ((csd[0] >> 6) == 1)
 80021a8:	f89d 3000 	ldrb.w	r3, [sp]
 80021ac:	099b      	lsrs	r3, r3, #6
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d01f      	beq.n	80021f2 <SD_disk_ioctl+0xca>
					*(DWORD*) buff = (DWORD) csize << 10;
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80021b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80021b6:	f002 020f 	and.w	r2, r2, #15
 80021ba:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80021be:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 80021c2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	f003 0306 	and.w	r3, r3, #6
 80021cc:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80021ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80021d2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80021dc:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80021e0:	0289      	lsls	r1, r1, #10
 80021e2:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80021e6:	440b      	add	r3, r1
 80021e8:	3301      	adds	r3, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80021ea:	3a07      	subs	r2, #7
 80021ec:	4093      	lsls	r3, r2
 80021ee:	6033      	str	r3, [r6, #0]
 80021f0:	e046      	b.n	8002280 <SD_disk_ioctl+0x158>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80021f2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80021f6:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80021fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3301      	adds	r3, #1
 8002202:	b29b      	uxth	r3, r3
					*(DWORD*) buff = (DWORD) csize << 10;
 8002204:	029b      	lsls	r3, r3, #10
 8002206:	6033      	str	r3, [r6, #0]
 8002208:	e03a      	b.n	8002280 <SD_disk_ioctl+0x158>
				}
				res = RES_OK;
			}
			break;
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800220a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220e:	8033      	strh	r3, [r6, #0]
			res = RES_OK;
			break;
 8002210:	e036      	b.n	8002280 <SD_disk_ioctl+0x158>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002212:	f7ff fd6d 	bl	8001cf0 <SD_ReadyWait>
 8002216:	28ff      	cmp	r0, #255	; 0xff
 8002218:	d03b      	beq.n	8002292 <SD_disk_ioctl+0x16a>
	res = RES_ERROR;
 800221a:	2401      	movs	r4, #1
 800221c:	e030      	b.n	8002280 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800221e:	2100      	movs	r1, #0
 8002220:	2049      	movs	r0, #73	; 0x49
 8002222:	f7ff fd76 	bl	8001d12 <SD_SendCmd>
 8002226:	4604      	mov	r4, r0
 8002228:	b108      	cbz	r0, 800222e <SD_disk_ioctl+0x106>
	res = RES_ERROR;
 800222a:	2401      	movs	r4, #1
 800222c:	e028      	b.n	8002280 <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800222e:	2110      	movs	r1, #16
 8002230:	4630      	mov	r0, r6
 8002232:	f7ff fda9 	bl	8001d88 <SD_RxDataBlock>
 8002236:	bb18      	cbnz	r0, 8002280 <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 8002238:	2401      	movs	r4, #1
 800223a:	e021      	b.n	8002280 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800223c:	2100      	movs	r1, #0
 800223e:	204a      	movs	r0, #74	; 0x4a
 8002240:	f7ff fd67 	bl	8001d12 <SD_SendCmd>
 8002244:	4604      	mov	r4, r0
 8002246:	b108      	cbz	r0, 800224c <SD_disk_ioctl+0x124>
	res = RES_ERROR;
 8002248:	2401      	movs	r4, #1
 800224a:	e019      	b.n	8002280 <SD_disk_ioctl+0x158>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800224c:	2110      	movs	r1, #16
 800224e:	4630      	mov	r0, r6
 8002250:	f7ff fd9a 	bl	8001d88 <SD_RxDataBlock>
 8002254:	b9a0      	cbnz	r0, 8002280 <SD_disk_ioctl+0x158>
	res = RES_ERROR;
 8002256:	2401      	movs	r4, #1
 8002258:	e012      	b.n	8002280 <SD_disk_ioctl+0x158>
			break;
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800225a:	2100      	movs	r1, #0
 800225c:	207a      	movs	r0, #122	; 0x7a
 800225e:	f7ff fd58 	bl	8001d12 <SD_SendCmd>
 8002262:	4604      	mov	r4, r0
 8002264:	b138      	cbz	r0, 8002276 <SD_disk_ioctl+0x14e>
					*ptr++ = SPI_RxByte();
				}
				res = RES_OK;
			}
		default:
			res = RES_PARERR;
 8002266:	2404      	movs	r4, #4
 8002268:	e00a      	b.n	8002280 <SD_disk_ioctl+0x158>
					*ptr++ = SPI_RxByte();
 800226a:	f7ff fcef 	bl	8001c4c <SPI_RxByte>
 800226e:	f806 0b01 	strb.w	r0, [r6], #1
				for (n = 0; n < 4; n++)
 8002272:	3401      	adds	r4, #1
 8002274:	b2e4      	uxtb	r4, r4
 8002276:	2c03      	cmp	r4, #3
 8002278:	d9f7      	bls.n	800226a <SD_disk_ioctl+0x142>
			res = RES_PARERR;
 800227a:	2404      	movs	r4, #4
 800227c:	e000      	b.n	8002280 <SD_disk_ioctl+0x158>
		SELECT();
 800227e:	2404      	movs	r4, #4
		}

		DESELECT();
 8002280:	f7ff fcd8 	bl	8001c34 <DESELECT>
		SPI_RxByte();
 8002284:	f7ff fce2 	bl	8001c4c <SPI_RxByte>
	}

	return res;
}
 8002288:	4620      	mov	r0, r4
 800228a:	b005      	add	sp, #20
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	res = RES_ERROR;
 800228e:	462c      	mov	r4, r5
 8002290:	e7f6      	b.n	8002280 <SD_disk_ioctl+0x158>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8002292:	462c      	mov	r4, r5
 8002294:	e7f4      	b.n	8002280 <SD_disk_ioctl+0x158>
	if (drv) return RES_PARERR;
 8002296:	2404      	movs	r4, #4
 8002298:	e7f6      	b.n	8002288 <SD_disk_ioctl+0x160>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800229a:	2403      	movs	r4, #3
 800229c:	e7f4      	b.n	8002288 <SD_disk_ioctl+0x160>
 800229e:	bf00      	nop
 80022a0:	20000004 	.word	0x20000004

080022a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	2400      	movs	r4, #0
 80022aa:	9403      	str	r4, [sp, #12]
 80022ac:	9404      	str	r4, [sp, #16]
 80022ae:	9405      	str	r4, [sp, #20]
 80022b0:	9406      	str	r4, [sp, #24]
 80022b2:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	9401      	str	r4, [sp, #4]
 80022b6:	4b39      	ldr	r3, [pc, #228]	; (800239c <MX_GPIO_Init+0xf8>)
 80022b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
 80022c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c2:	f002 0201 	and.w	r2, r2, #1
 80022c6:	9201      	str	r2, [sp, #4]
 80022c8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	9402      	str	r4, [sp, #8]
 80022cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ce:	f042 0202 	orr.w	r2, r2, #2
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROPE_CUT_EN_Pin|SD_CS_Pin|USER_LED1_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 80022de:	4f30      	ldr	r7, [pc, #192]	; (80023a0 <MX_GPIO_Init+0xfc>)
 80022e0:	4622      	mov	r2, r4
 80022e2:	f248 1112 	movw	r1, #33042	; 0x8112
 80022e6:	4638      	mov	r0, r7
 80022e8:	f002 fc4b 	bl	8004b82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CAM2_OK_Pin|CAM1_OK_Pin, GPIO_PIN_SET);
 80022ec:	4e2d      	ldr	r6, [pc, #180]	; (80023a4 <MX_GPIO_Init+0x100>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	2106      	movs	r1, #6
 80022f2:	4630      	mov	r0, r6
 80022f4:	f002 fc45 	bl	8004b82 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED3_Pin|USER_LED5_Pin|USER_LED2_Pin|USER_LED4_Pin
 80022f8:	4622      	mov	r2, r4
 80022fa:	f44f 4173 	mov.w	r1, #62208	; 0xf300
 80022fe:	4630      	mov	r0, r6
 8002300:	f002 fc3f 	bl	8004b82 <HAL_GPIO_WritePin>
                          |CAM2_ON_Pin|CAM1_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUS_SEL_1_Pin|BUS_SEL_2_Pin, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800230a:	4638      	mov	r0, r7
 800230c:	f002 fc39 	bl	8004b82 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROPE_CUT_EN_Pin SD_CS_Pin USER_LED1_Pin BUS_SEL_1_Pin
                           BUS_SEL_2_Pin */
  GPIO_InitStruct.Pin = ROPE_CUT_EN_Pin|SD_CS_Pin|USER_LED1_Pin|BUS_SEL_1_Pin
 8002310:	f641 1312 	movw	r3, #6418	; 0x1912
 8002314:	9303      	str	r3, [sp, #12]
                          |BUS_SEL_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002316:	2501      	movs	r5, #1
 8002318:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231e:	a903      	add	r1, sp, #12
 8002320:	4638      	mov	r0, r7
 8002322:	f002 fb4f 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM2_OK_Pin CAM1_OK_Pin */
  GPIO_InitStruct.Pin = CAM2_OK_Pin|CAM1_OK_Pin;
 8002326:	2306      	movs	r3, #6
 8002328:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800232a:	2311      	movs	r3, #17
 800232c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002330:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	a903      	add	r1, sp, #12
 8002334:	4630      	mov	r0, r6
 8002336:	f002 fb45 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED3_Pin USER_LED5_Pin USER_LED2_Pin USER_LED4_Pin
                           CAM2_ON_Pin CAM1_ON_Pin */
  GPIO_InitStruct.Pin = USER_LED3_Pin|USER_LED5_Pin|USER_LED2_Pin|USER_LED4_Pin
 800233a:	f44f 4373 	mov.w	r3, #62208	; 0xf300
 800233e:	9303      	str	r3, [sp, #12]
                          |CAM2_ON_Pin|CAM1_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	a903      	add	r1, sp, #12
 8002348:	4630      	mov	r0, r6
 800234a:	f002 fb3b 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 800234e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002352:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002356:	2302      	movs	r3, #2
 8002358:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800235c:	a903      	add	r1, sp, #12
 800235e:	4638      	mov	r0, r7
 8002360:	f002 fb30 	bl	80049c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM2_START_Pin CAM1_START_Pin */
  GPIO_InitStruct.Pin = CAM2_START_Pin|CAM1_START_Pin;
 8002364:	2330      	movs	r3, #48	; 0x30
 8002366:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002368:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800236c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	a903      	add	r1, sp, #12
 8002372:	4630      	mov	r0, r6
 8002374:	f002 fb26 	bl	80049c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8002378:	4622      	mov	r2, r4
 800237a:	4629      	mov	r1, r5
 800237c:	200a      	movs	r0, #10
 800237e:	f002 fa6b 	bl	8004858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002382:	200a      	movs	r0, #10
 8002384:	f002 fa9c 	bl	80048c0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002388:	4622      	mov	r2, r4
 800238a:	4629      	mov	r1, r5
 800238c:	2017      	movs	r0, #23
 800238e:	f002 fa63 	bl	8004858 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002392:	2017      	movs	r0, #23
 8002394:	f002 fa94 	bl	80048c0 <HAL_NVIC_EnableIRQ>

}
 8002398:	b009      	add	sp, #36	; 0x24
 800239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239c:	40023800 	.word	0x40023800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400

080023a8 <get_check_sum>:
{
 80023a8:	b570      	push	{r4, r5, r6, lr}
 80023aa:	4605      	mov	r5, r0
	for(uint8_t i = 0; i < strlen(string); i++)
 80023ac:	2400      	movs	r4, #0
	uint8_t XOR = 0;
 80023ae:	4626      	mov	r6, r4
	for(uint8_t i = 0; i < strlen(string); i++)
 80023b0:	4628      	mov	r0, r5
 80023b2:	f7fd ff15 	bl	80001e0 <strlen>
 80023b6:	4284      	cmp	r4, r0
 80023b8:	d204      	bcs.n	80023c4 <get_check_sum+0x1c>
		XOR = XOR ^ string[i];
 80023ba:	5d2b      	ldrb	r3, [r5, r4]
 80023bc:	405e      	eors	r6, r3
	for(uint8_t i = 0; i < strlen(string); i++)
 80023be:	3401      	adds	r4, #1
 80023c0:	b2e4      	uxtb	r4, r4
 80023c2:	e7f5      	b.n	80023b0 <get_check_sum+0x8>
}
 80023c4:	4630      	mov	r0, r6
 80023c6:	bd70      	pop	{r4, r5, r6, pc}

080023c8 <Get_System_Status>:
	if(Is_asleep == 1)
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <Get_System_Status+0x5c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
	if(Sensors.BME280_Internal.Status == HAL_OK)
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <Get_System_Status+0x60>)
 80023ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023d2:	b1fb      	cbz	r3, 8002414 <Get_System_Status+0x4c>
 80023d4:	2000      	movs	r0, #0
	if(Sensors.BME280_External.Status == HAL_OK)
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <Get_System_Status+0x60>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b90b      	cbnz	r3, 80023e0 <Get_System_Status+0x18>
		status |= 1 << 5;
 80023dc:	f040 0020 	orr.w	r0, r0, #32
	if(Sensors.MPU650.Status == HAL_OK)
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <Get_System_Status+0x60>)
 80023e2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80023e6:	b90b      	cbnz	r3, 80023ec <Get_System_Status+0x24>
		status |= 1 << 4;
 80023e8:	f040 0010 	orr.w	r0, r0, #16
	if(Sensors.SI1145.Status == HAL_OK)
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <Get_System_Status+0x60>)
 80023ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80023f2:	b90b      	cbnz	r3, 80023f8 <Get_System_Status+0x30>
		status |= 1 << 3;
 80023f4:	f040 0008 	orr.w	r0, r0, #8
	if(sd_status == FR_OK)
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <Get_System_Status+0x64>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b90b      	cbnz	r3, 8002402 <Get_System_Status+0x3a>
		status |= 1 << 2;
 80023fe:	f040 0004 	orr.w	r0, r0, #4
	if(CAM_1.REC_STATUS == CAM_REC)
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <Get_System_Status+0x68>)
 8002404:	7f1b      	ldrb	r3, [r3, #28]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d006      	beq.n	8002418 <Get_System_Status+0x50>
	if(CAM_2.REC_STATUS == CAM_REC)
 800240a:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <Get_System_Status+0x6c>)
 800240c:	7f1b      	ldrb	r3, [r3, #28]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d005      	beq.n	800241e <Get_System_Status+0x56>
}
 8002412:	4770      	bx	lr
		status |= 1 << 6;
 8002414:	2040      	movs	r0, #64	; 0x40
 8002416:	e7de      	b.n	80023d6 <Get_System_Status+0xe>
		status |= 1 << 1;
 8002418:	f040 0002 	orr.w	r0, r0, #2
 800241c:	e7f5      	b.n	800240a <Get_System_Status+0x42>
		status |= 1;
 800241e:	f040 0001 	orr.w	r0, r0, #1
 8002422:	e7f6      	b.n	8002412 <Get_System_Status+0x4a>
 8002424:	20000931 	.word	0x20000931
 8002428:	20000938 	.word	0x20000938
 800242c:	2000083c 	.word	0x2000083c
 8002430:	200008f0 	.word	0x200008f0
 8002434:	20000798 	.word	0x20000798

08002438 <I2C_Select_bus>:
{
 8002438:	b510      	push	{r4, lr}
	switch(select)
 800243a:	b178      	cbz	r0, 800245c <I2C_Select_bus+0x24>
 800243c:	2801      	cmp	r0, #1
 800243e:	d01b      	beq.n	8002478 <I2C_Select_bus+0x40>
		HAL_GPIO_WritePin(BUS_SEL_1_GPIO_Port, BUS_SEL_1_Pin, GPIO_PIN_SET);
 8002440:	4c14      	ldr	r4, [pc, #80]	; (8002494 <I2C_Select_bus+0x5c>)
 8002442:	2201      	movs	r2, #1
 8002444:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002448:	4620      	mov	r0, r4
 800244a:	f002 fb9a 	bl	8004b82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUS_SEL_2_GPIO_Port, BUS_SEL_2_Pin, GPIO_PIN_SET);
 800244e:	2201      	movs	r2, #1
 8002450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002454:	4620      	mov	r0, r4
 8002456:	f002 fb94 	bl	8004b82 <HAL_GPIO_WritePin>
}
 800245a:	e00c      	b.n	8002476 <I2C_Select_bus+0x3e>
		HAL_GPIO_WritePin(BUS_SEL_1_GPIO_Port, BUS_SEL_1_Pin, GPIO_PIN_SET);
 800245c:	4c0d      	ldr	r4, [pc, #52]	; (8002494 <I2C_Select_bus+0x5c>)
 800245e:	2201      	movs	r2, #1
 8002460:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002464:	4620      	mov	r0, r4
 8002466:	f002 fb8c 	bl	8004b82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUS_SEL_2_GPIO_Port, BUS_SEL_2_Pin, GPIO_PIN_RESET);
 800246a:	2200      	movs	r2, #0
 800246c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002470:	4620      	mov	r0, r4
 8002472:	f002 fb86 	bl	8004b82 <HAL_GPIO_WritePin>
}
 8002476:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(BUS_SEL_2_GPIO_Port, BUS_SEL_2_Pin, GPIO_PIN_SET);
 8002478:	4c06      	ldr	r4, [pc, #24]	; (8002494 <I2C_Select_bus+0x5c>)
 800247a:	2201      	movs	r2, #1
 800247c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002480:	4620      	mov	r0, r4
 8002482:	f002 fb7e 	bl	8004b82 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BUS_SEL_1_GPIO_Port, BUS_SEL_1_Pin, GPIO_PIN_RESET);
 8002486:	2200      	movs	r2, #0
 8002488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248c:	4620      	mov	r0, r4
 800248e:	f002 fb78 	bl	8004b82 <HAL_GPIO_WritePin>
		break;
 8002492:	e7f0      	b.n	8002476 <I2C_Select_bus+0x3e>
 8002494:	40020000 	.word	0x40020000

08002498 <Get_BME280_in_all_readings>:
{
 8002498:	b530      	push	{r4, r5, lr}
 800249a:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 800249c:	2000      	movs	r0, #0
 800249e:	f7ff ffcb 	bl	8002438 <I2C_Select_bus>
	if(Sensors.BME280_Internal.Status != HAL_OK)
 80024a2:	4b36      	ldr	r3, [pc, #216]	; (800257c <Get_BME280_in_all_readings+0xe4>)
 80024a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d13e      	bne.n	800252a <Get_BME280_in_all_readings+0x92>
	Sensors.BME280_Internal.Status = BME280_Get_ID(I2C_handle_BME_in__MPU, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 80024ac:	4c34      	ldr	r4, [pc, #208]	; (8002580 <Get_BME280_in_all_readings+0xe8>)
 80024ae:	2314      	movs	r3, #20
 80024b0:	9312      	str	r3, [sp, #72]	; 0x48
 80024b2:	4d34      	ldr	r5, [pc, #208]	; (8002584 <Get_BME280_in_all_readings+0xec>)
 80024b4:	9511      	str	r5, [sp, #68]	; 0x44
 80024b6:	2244      	movs	r2, #68	; 0x44
 80024b8:	f104 0110 	add.w	r1, r4, #16
 80024bc:	4668      	mov	r0, sp
 80024be:	f006 fc43 	bl	8008d48 <memcpy>
 80024c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024c6:	f7fe fd63 	bl	8000f90 <BME280_Get_ID>
 80024ca:	f805 0c01 	strb.w	r0, [r5, #-1]
	if(Sensors.BME280_Internal.Status != HAL_OK)
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d14f      	bne.n	8002572 <Get_BME280_in_all_readings+0xda>
	Sensors.BME280_Internal.Status = BME280_Get_All(I2C_handle_BME_in__MPU, I2C_long_timeout);
 80024d2:	4c2b      	ldr	r4, [pc, #172]	; (8002580 <Get_BME280_in_all_readings+0xe8>)
 80024d4:	23c8      	movs	r3, #200	; 0xc8
 80024d6:	9311      	str	r3, [sp, #68]	; 0x44
 80024d8:	2244      	movs	r2, #68	; 0x44
 80024da:	f104 0110 	add.w	r1, r4, #16
 80024de:	4668      	mov	r0, sp
 80024e0:	f006 fc32 	bl	8008d48 <memcpy>
 80024e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80024e8:	f7fe fe04 	bl	80010f4 <BME280_Get_All>
 80024ec:	4b23      	ldr	r3, [pc, #140]	; (800257c <Get_BME280_in_all_readings+0xe4>)
 80024ee:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	if(Sensors.BME280_Internal.Status != HAL_OK)
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d140      	bne.n	8002578 <Get_BME280_in_all_readings+0xe0>
	Sensors.BME280_Internal.Temperature = BME280_T_Double(&BME280_internal_Calib_Data);
 80024f6:	4d24      	ldr	r5, [pc, #144]	; (8002588 <Get_BME280_in_all_readings+0xf0>)
 80024f8:	4628      	mov	r0, r5
 80024fa:	f7fe fe49 	bl	8001190 <BME280_T_Double>
 80024fe:	4c1f      	ldr	r4, [pc, #124]	; (800257c <Get_BME280_in_all_readings+0xe4>)
 8002500:	ed84 0b0e 	vstr	d0, [r4, #56]	; 0x38
	Sensors.BME280_Internal.Pressure = BME280_P_Double(&BME280_internal_Calib_Data);
 8002504:	4628      	mov	r0, r5
 8002506:	f7fe feb7 	bl	8001278 <BME280_P_Double>
 800250a:	ed84 0b10 	vstr	d0, [r4, #64]	; 0x40
	Sensors.BME280_Internal.Humidity = BME280_H_Double(&BME280_internal_Calib_Data);
 800250e:	4628      	mov	r0, r5
 8002510:	f7fe ffd2 	bl	80014b8 <BME280_H_Double>
 8002514:	ed84 0b14 	vstr	d0, [r4, #80]	; 0x50
	Sensors.BME280_Internal.Altitude = BME280_Altitude_Double(Sensors.BME280_Internal.Pressure, Sensors.BME280_Internal.Pressure_ref);
 8002518:	ed94 1b12 	vldr	d1, [r4, #72]	; 0x48
 800251c:	ed94 0b10 	vldr	d0, [r4, #64]	; 0x40
 8002520:	f7ff f896 	bl	8001650 <BME280_Altitude_Double>
 8002524:	ed84 0b16 	vstr	d0, [r4, #88]	; 0x58
 8002528:	e026      	b.n	8002578 <Get_BME280_in_all_readings+0xe0>
		Sensors.BME280_Internal.Status = BME280_Get_ID(I2C_handle_BME_in__MPU, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 800252a:	4c15      	ldr	r4, [pc, #84]	; (8002580 <Get_BME280_in_all_readings+0xe8>)
 800252c:	2314      	movs	r3, #20
 800252e:	9312      	str	r3, [sp, #72]	; 0x48
 8002530:	4d14      	ldr	r5, [pc, #80]	; (8002584 <Get_BME280_in_all_readings+0xec>)
 8002532:	9511      	str	r5, [sp, #68]	; 0x44
 8002534:	2244      	movs	r2, #68	; 0x44
 8002536:	f104 0110 	add.w	r1, r4, #16
 800253a:	4668      	mov	r0, sp
 800253c:	f006 fc04 	bl	8008d48 <memcpy>
 8002540:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002544:	f7fe fd24 	bl	8000f90 <BME280_Get_ID>
 8002548:	f805 0c01 	strb.w	r0, [r5, #-1]
		if (Sensors.BME280_Internal.Status == HAL_OK)
 800254c:	2800      	cmp	r0, #0
 800254e:	d1ad      	bne.n	80024ac <Get_BME280_in_all_readings+0x14>
			Sensors.BME280_Internal.Status = BME280_Init(I2C_handle_BME_in__MPU, I2C_short_timeout);
 8002550:	2314      	movs	r3, #20
 8002552:	9311      	str	r3, [sp, #68]	; 0x44
 8002554:	2244      	movs	r2, #68	; 0x44
 8002556:	f104 0110 	add.w	r1, r4, #16
 800255a:	4668      	mov	r0, sp
 800255c:	f006 fbf4 	bl	8008d48 <memcpy>
 8002560:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002564:	f7fe fcc4 	bl	8000ef0 <BME280_Init>
 8002568:	f1a5 0331 	sub.w	r3, r5, #49	; 0x31
 800256c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
 8002570:	e79c      	b.n	80024ac <Get_BME280_in_all_readings+0x14>
		HAL_I2C_Init(&I2C_handle_BME_in__MPU);
 8002572:	4620      	mov	r0, r4
 8002574:	f002 fd6a 	bl	800504c <HAL_I2C_Init>
}
 8002578:	b015      	add	sp, #84	; 0x54
 800257a:	bd30      	pop	{r4, r5, pc}
 800257c:	20000938 	.word	0x20000938
 8002580:	20000620 	.word	0x20000620
 8002584:	20000969 	.word	0x20000969
 8002588:	200002a4 	.word	0x200002a4

0800258c <Get_BME280_ex_all_readings>:
{
 800258c:	b530      	push	{r4, r5, lr}
 800258e:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 8002590:	2000      	movs	r0, #0
 8002592:	f7ff ff51 	bl	8002438 <I2C_Select_bus>
	if(Sensors.BME280_External.Status != HAL_OK)
 8002596:	4b34      	ldr	r3, [pc, #208]	; (8002668 <Get_BME280_ex_all_readings+0xdc>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d13d      	bne.n	800261a <Get_BME280_ex_all_readings+0x8e>
	Sensors.BME280_External.Status = BME280_Get_ID(I2C_handle_BME_ex__SI, &Sensors.BME280_External.ID, I2C_short_timeout);
 800259e:	4c33      	ldr	r4, [pc, #204]	; (800266c <Get_BME280_ex_all_readings+0xe0>)
 80025a0:	2314      	movs	r3, #20
 80025a2:	9312      	str	r3, [sp, #72]	; 0x48
 80025a4:	4d32      	ldr	r5, [pc, #200]	; (8002670 <Get_BME280_ex_all_readings+0xe4>)
 80025a6:	9511      	str	r5, [sp, #68]	; 0x44
 80025a8:	2244      	movs	r2, #68	; 0x44
 80025aa:	f104 0110 	add.w	r1, r4, #16
 80025ae:	4668      	mov	r0, sp
 80025b0:	f006 fbca 	bl	8008d48 <memcpy>
 80025b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025b8:	f7fe fcea 	bl	8000f90 <BME280_Get_ID>
 80025bc:	f805 0c01 	strb.w	r0, [r5, #-1]
	if(Sensors.BME280_External.Status != HAL_OK)
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d14c      	bne.n	800265e <Get_BME280_ex_all_readings+0xd2>
	Sensors.BME280_External.Status = BME280_Get_All(I2C_handle_BME_ex__SI, I2C_long_timeout);
 80025c4:	4c29      	ldr	r4, [pc, #164]	; (800266c <Get_BME280_ex_all_readings+0xe0>)
 80025c6:	23c8      	movs	r3, #200	; 0xc8
 80025c8:	9311      	str	r3, [sp, #68]	; 0x44
 80025ca:	2244      	movs	r2, #68	; 0x44
 80025cc:	f104 0110 	add.w	r1, r4, #16
 80025d0:	4668      	mov	r0, sp
 80025d2:	f006 fbb9 	bl	8008d48 <memcpy>
 80025d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80025da:	f7fe fd8b 	bl	80010f4 <BME280_Get_All>
 80025de:	4b22      	ldr	r3, [pc, #136]	; (8002668 <Get_BME280_ex_all_readings+0xdc>)
 80025e0:	7018      	strb	r0, [r3, #0]
	if(Sensors.BME280_External.Status != HAL_OK)
 80025e2:	2800      	cmp	r0, #0
 80025e4:	d13e      	bne.n	8002664 <Get_BME280_ex_all_readings+0xd8>
	Sensors.BME280_External.Temperature = BME280_T_Double(&BME280_external_Calib_Data);
 80025e6:	4d23      	ldr	r5, [pc, #140]	; (8002674 <Get_BME280_ex_all_readings+0xe8>)
 80025e8:	4628      	mov	r0, r5
 80025ea:	f7fe fdd1 	bl	8001190 <BME280_T_Double>
 80025ee:	4c1e      	ldr	r4, [pc, #120]	; (8002668 <Get_BME280_ex_all_readings+0xdc>)
 80025f0:	ed84 0b02 	vstr	d0, [r4, #8]
	Sensors.BME280_External.Pressure = BME280_P_Double(&BME280_external_Calib_Data);
 80025f4:	4628      	mov	r0, r5
 80025f6:	f7fe fe3f 	bl	8001278 <BME280_P_Double>
 80025fa:	ed84 0b04 	vstr	d0, [r4, #16]
	Sensors.BME280_External.Humidity = BME280_H_Double(&BME280_external_Calib_Data);
 80025fe:	4628      	mov	r0, r5
 8002600:	f7fe ff5a 	bl	80014b8 <BME280_H_Double>
 8002604:	ed84 0b08 	vstr	d0, [r4, #32]
	Sensors.BME280_External.Altitude = BME280_Altitude_Double(Sensors.BME280_External.Pressure, Sensors.BME280_External.Pressure_ref);
 8002608:	ed94 1b06 	vldr	d1, [r4, #24]
 800260c:	ed94 0b04 	vldr	d0, [r4, #16]
 8002610:	f7ff f81e 	bl	8001650 <BME280_Altitude_Double>
 8002614:	ed84 0b0a 	vstr	d0, [r4, #40]	; 0x28
 8002618:	e024      	b.n	8002664 <Get_BME280_ex_all_readings+0xd8>
		Sensors.BME280_External.Status = BME280_Get_ID(I2C_handle_BME_ex__SI, &Sensors.BME280_External.ID, I2C_short_timeout);
 800261a:	4c14      	ldr	r4, [pc, #80]	; (800266c <Get_BME280_ex_all_readings+0xe0>)
 800261c:	2314      	movs	r3, #20
 800261e:	9312      	str	r3, [sp, #72]	; 0x48
 8002620:	4d13      	ldr	r5, [pc, #76]	; (8002670 <Get_BME280_ex_all_readings+0xe4>)
 8002622:	9511      	str	r5, [sp, #68]	; 0x44
 8002624:	2244      	movs	r2, #68	; 0x44
 8002626:	f104 0110 	add.w	r1, r4, #16
 800262a:	4668      	mov	r0, sp
 800262c:	f006 fb8c 	bl	8008d48 <memcpy>
 8002630:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002634:	f7fe fcac 	bl	8000f90 <BME280_Get_ID>
 8002638:	f805 0c01 	strb.w	r0, [r5, #-1]
		if (Sensors.BME280_External.Status == HAL_OK)
 800263c:	2800      	cmp	r0, #0
 800263e:	d1ae      	bne.n	800259e <Get_BME280_ex_all_readings+0x12>
			Sensors.BME280_External.Status = BME280_Init(I2C_handle_BME_ex__SI, I2C_short_timeout);
 8002640:	2314      	movs	r3, #20
 8002642:	9311      	str	r3, [sp, #68]	; 0x44
 8002644:	2244      	movs	r2, #68	; 0x44
 8002646:	f104 0110 	add.w	r1, r4, #16
 800264a:	4668      	mov	r0, sp
 800264c:	f006 fb7c 	bl	8008d48 <memcpy>
 8002650:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002654:	f7fe fc4c 	bl	8000ef0 <BME280_Init>
 8002658:	1e6b      	subs	r3, r5, #1
 800265a:	7018      	strb	r0, [r3, #0]
 800265c:	e79f      	b.n	800259e <Get_BME280_ex_all_readings+0x12>
		HAL_I2C_Init(&I2C_handle_BME_ex__SI);
 800265e:	4620      	mov	r0, r4
 8002660:	f002 fcf4 	bl	800504c <HAL_I2C_Init>
}
 8002664:	b015      	add	sp, #84	; 0x54
 8002666:	bd30      	pop	{r4, r5, pc}
 8002668:	20000938 	.word	0x20000938
 800266c:	20000584 	.word	0x20000584
 8002670:	20000939 	.word	0x20000939
 8002674:	20000280 	.word	0x20000280

08002678 <Get_MPU6050_all_readings>:
{
 8002678:	b530      	push	{r4, r5, lr}
 800267a:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 800267c:	2001      	movs	r0, #1
 800267e:	f7ff fedb 	bl	8002438 <I2C_Select_bus>
	if(Sensors.MPU650.Status != HAL_OK)
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <Get_MPU6050_all_readings+0xc4>)
 8002684:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002688:	bb7b      	cbnz	r3, 80026ea <Get_MPU6050_all_readings+0x72>
	Sensors.MPU650.Status = MPU6050_read_ID(I2C_handle_BME_in__MPU, &Sensors.MPU650.ID, I2C_short_timeout);
 800268a:	4c2d      	ldr	r4, [pc, #180]	; (8002740 <Get_MPU6050_all_readings+0xc8>)
 800268c:	2314      	movs	r3, #20
 800268e:	9312      	str	r3, [sp, #72]	; 0x48
 8002690:	4d2c      	ldr	r5, [pc, #176]	; (8002744 <Get_MPU6050_all_readings+0xcc>)
 8002692:	9511      	str	r5, [sp, #68]	; 0x44
 8002694:	2244      	movs	r2, #68	; 0x44
 8002696:	f104 0110 	add.w	r1, r4, #16
 800269a:	4668      	mov	r0, sp
 800269c:	f006 fb54 	bl	8008d48 <memcpy>
 80026a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026a4:	f7ff f869 	bl	800177a <MPU6050_read_ID>
 80026a8:	f805 0c01 	strb.w	r0, [r5, #-1]
	if(Sensors.MPU650.Status != HAL_OK)
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d140      	bne.n	8002732 <Get_MPU6050_all_readings+0xba>
	Sensors.MPU650.Status = MPU6050_read_All(I2C_handle_BME_in__MPU, I2C_long_timeout);
 80026b0:	4c23      	ldr	r4, [pc, #140]	; (8002740 <Get_MPU6050_all_readings+0xc8>)
 80026b2:	23c8      	movs	r3, #200	; 0xc8
 80026b4:	9311      	str	r3, [sp, #68]	; 0x44
 80026b6:	2244      	movs	r2, #68	; 0x44
 80026b8:	f104 0110 	add.w	r1, r4, #16
 80026bc:	4668      	mov	r0, sp
 80026be:	f006 fb43 	bl	8008d48 <memcpy>
 80026c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80026c6:	f7ff f871 	bl	80017ac <MPU6050_read_All>
 80026ca:	4b1c      	ldr	r3, [pc, #112]	; (800273c <Get_MPU6050_all_readings+0xc4>)
 80026cc:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
	if(Sensors.MPU650.Status != HAL_OK)
 80026d0:	bb90      	cbnz	r0, 8002738 <Get_MPU6050_all_readings+0xc0>
	MPU6050_Accel_double(&Sensors.MPU650);
 80026d2:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80026d6:	4620      	mov	r0, r4
 80026d8:	f7ff f8bc 	bl	8001854 <MPU6050_Accel_double>
	MPU6050_Gyro_double(&Sensors.MPU650);
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff f8fb 	bl	80018d8 <MPU6050_Gyro_double>
	MPU6050_Temp_double(&Sensors.MPU650);
 80026e2:	4620      	mov	r0, r4
 80026e4:	f7ff f8dc 	bl	80018a0 <MPU6050_Temp_double>
 80026e8:	e026      	b.n	8002738 <Get_MPU6050_all_readings+0xc0>
		Sensors.MPU650.Status = MPU6050_read_ID(I2C_handle_BME_in__MPU, &Sensors.MPU650.ID, I2C_short_timeout);
 80026ea:	4c15      	ldr	r4, [pc, #84]	; (8002740 <Get_MPU6050_all_readings+0xc8>)
 80026ec:	2314      	movs	r3, #20
 80026ee:	9312      	str	r3, [sp, #72]	; 0x48
 80026f0:	4d14      	ldr	r5, [pc, #80]	; (8002744 <Get_MPU6050_all_readings+0xcc>)
 80026f2:	9511      	str	r5, [sp, #68]	; 0x44
 80026f4:	2244      	movs	r2, #68	; 0x44
 80026f6:	f104 0110 	add.w	r1, r4, #16
 80026fa:	4668      	mov	r0, sp
 80026fc:	f006 fb24 	bl	8008d48 <memcpy>
 8002700:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002704:	f7ff f839 	bl	800177a <MPU6050_read_ID>
 8002708:	f805 0c01 	strb.w	r0, [r5, #-1]
		if (Sensors.MPU650.Status == HAL_OK)
 800270c:	2800      	cmp	r0, #0
 800270e:	d1bc      	bne.n	800268a <Get_MPU6050_all_readings+0x12>
			Sensors.MPU650.Status = MPU6050_Init(I2C_handle_BME_in__MPU, I2C_short_timeout);
 8002710:	2314      	movs	r3, #20
 8002712:	9311      	str	r3, [sp, #68]	; 0x44
 8002714:	2244      	movs	r2, #68	; 0x44
 8002716:	f104 0110 	add.w	r1, r4, #16
 800271a:	4668      	mov	r0, sp
 800271c:	f006 fb14 	bl	8008d48 <memcpy>
 8002720:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002724:	f7fe ffba 	bl	800169c <MPU6050_Init>
 8002728:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 800272c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
 8002730:	e7ab      	b.n	800268a <Get_MPU6050_all_readings+0x12>
		HAL_I2C_Init(&I2C_handle_BME_in__MPU);
 8002732:	4620      	mov	r0, r4
 8002734:	f002 fc8a 	bl	800504c <HAL_I2C_Init>
}
 8002738:	b015      	add	sp, #84	; 0x54
 800273a:	bd30      	pop	{r4, r5, pc}
 800273c:	20000938 	.word	0x20000938
 8002740:	20000620 	.word	0x20000620
 8002744:	20000999 	.word	0x20000999

08002748 <Get_SI1145_all_readings>:
{
 8002748:	b530      	push	{r4, r5, lr}
 800274a:	b095      	sub	sp, #84	; 0x54
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 800274c:	2001      	movs	r0, #1
 800274e:	f7ff fe73 	bl	8002438 <I2C_Select_bus>
	if(Sensors.SI1145.Status != HAL_OK)
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <Get_SI1145_all_readings+0xa0>)
 8002754:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002758:	bb83      	cbnz	r3, 80027bc <Get_SI1145_all_readings+0x74>
	Sensors.SI1145.Status = SI1145_read_ID(I2C_handle_BME_ex__SI, &Sensors.SI1145.ID, I2C_short_timeout);
 800275a:	4c24      	ldr	r4, [pc, #144]	; (80027ec <Get_SI1145_all_readings+0xa4>)
 800275c:	2314      	movs	r3, #20
 800275e:	9312      	str	r3, [sp, #72]	; 0x48
 8002760:	4d23      	ldr	r5, [pc, #140]	; (80027f0 <Get_SI1145_all_readings+0xa8>)
 8002762:	9511      	str	r5, [sp, #68]	; 0x44
 8002764:	2244      	movs	r2, #68	; 0x44
 8002766:	f104 0110 	add.w	r1, r4, #16
 800276a:	4668      	mov	r0, sp
 800276c:	f006 faec 	bl	8008d48 <memcpy>
 8002770:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002774:	f7ff f9ba 	bl	8001aec <SI1145_read_ID>
 8002778:	f805 0c01 	strb.w	r0, [r5, #-1]
	if(Sensors.SI1145.Status != HAL_OK)
 800277c:	bb78      	cbnz	r0, 80027de <Get_SI1145_all_readings+0x96>
	Sensors.SI1145.Status = SI1145_Read_Data(I2C_handle_BME_ex__SI, I2C_long_timeout);
 800277e:	4c1b      	ldr	r4, [pc, #108]	; (80027ec <Get_SI1145_all_readings+0xa4>)
 8002780:	23c8      	movs	r3, #200	; 0xc8
 8002782:	9311      	str	r3, [sp, #68]	; 0x44
 8002784:	2244      	movs	r2, #68	; 0x44
 8002786:	f104 0110 	add.w	r1, r4, #16
 800278a:	4668      	mov	r0, sp
 800278c:	f006 fadc 	bl	8008d48 <memcpy>
 8002790:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002794:	f7ff f9c2 	bl	8001b1c <SI1145_Read_Data>
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <Get_SI1145_all_readings+0xa0>)
 800279a:	f883 00a0 	strb.w	r0, [r3, #160]	; 0xa0
	if(Sensors.SI1145.Status != HAL_OK)
 800279e:	bb08      	cbnz	r0, 80027e4 <Get_SI1145_all_readings+0x9c>
	Sensors.SI1145.VIS = SI1145_VIS_raw();
 80027a0:	f7ff f9f4 	bl	8001b8c <SI1145_VIS_raw>
 80027a4:	4c10      	ldr	r4, [pc, #64]	; (80027e8 <Get_SI1145_all_readings+0xa0>)
 80027a6:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
	Sensors.SI1145.IR = SI1145_IR_raw();
 80027aa:	f7ff f9e9 	bl	8001b80 <SI1145_IR_raw>
 80027ae:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
	Sensors.SI1145.UV = SI1145_UV_double();
 80027b2:	f7ff f9f1 	bl	8001b98 <SI1145_UV_double>
 80027b6:	ed84 0b2a 	vstr	d0, [r4, #168]	; 0xa8
 80027ba:	e013      	b.n	80027e4 <Get_SI1145_all_readings+0x9c>
		Sensors.SI1145.Status = SI1145_Init(I2C_handle_BME_ex__SI, I2C_short_timeout);
 80027bc:	4c0b      	ldr	r4, [pc, #44]	; (80027ec <Get_SI1145_all_readings+0xa4>)
 80027be:	2314      	movs	r3, #20
 80027c0:	9311      	str	r3, [sp, #68]	; 0x44
 80027c2:	2244      	movs	r2, #68	; 0x44
 80027c4:	f104 0110 	add.w	r1, r4, #16
 80027c8:	4668      	mov	r0, sp
 80027ca:	f006 fabd 	bl	8008d48 <memcpy>
 80027ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027d2:	f7ff f8af 	bl	8001934 <SI1145_Init>
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <Get_SI1145_all_readings+0xa0>)
 80027d8:	f883 00a0 	strb.w	r0, [r3, #160]	; 0xa0
 80027dc:	e7bd      	b.n	800275a <Get_SI1145_all_readings+0x12>
		HAL_I2C_Init(&I2C_handle_BME_ex__SI);
 80027de:	4620      	mov	r0, r4
 80027e0:	f002 fc34 	bl	800504c <HAL_I2C_Init>
}
 80027e4:	b015      	add	sp, #84	; 0x54
 80027e6:	bd30      	pop	{r4, r5, pc}
 80027e8:	20000938 	.word	0x20000938
 80027ec:	20000584 	.word	0x20000584
 80027f0:	200009d9 	.word	0x200009d9

080027f4 <Mount_open_SD_Card>:
{
 80027f4:	b510      	push	{r4, lr}
	sd_mounting_status = f_mount(&fs, "", 1);
 80027f6:	2201      	movs	r2, #1
 80027f8:	4932      	ldr	r1, [pc, #200]	; (80028c4 <Mount_open_SD_Card+0xd0>)
 80027fa:	4833      	ldr	r0, [pc, #204]	; (80028c8 <Mount_open_SD_Card+0xd4>)
 80027fc:	f005 fde2 	bl	80083c4 <f_mount>
	if(sd_mounting_status != FR_OK)
 8002800:	4603      	mov	r3, r0
 8002802:	b108      	cbz	r0, 8002808 <Mount_open_SD_Card+0x14>
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd10      	pop	{r4, pc}
	sd_mounting_status = f_open(&fil, "Data0.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8002808:	2212      	movs	r2, #18
 800280a:	4930      	ldr	r1, [pc, #192]	; (80028cc <Mount_open_SD_Card+0xd8>)
 800280c:	4830      	ldr	r0, [pc, #192]	; (80028d0 <Mount_open_SD_Card+0xdc>)
 800280e:	f005 fe07 	bl	8008420 <f_open>
	if(sd_mounting_status != FR_OK)
 8002812:	4603      	mov	r3, r0
 8002814:	2800      	cmp	r0, #0
 8002816:	d1f5      	bne.n	8002804 <Mount_open_SD_Card+0x10>
	sd_mounting_status = f_getfree("", &fre_clust, &pfs);
 8002818:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <Mount_open_SD_Card+0xe0>)
 800281a:	492f      	ldr	r1, [pc, #188]	; (80028d8 <Mount_open_SD_Card+0xe4>)
 800281c:	4829      	ldr	r0, [pc, #164]	; (80028c4 <Mount_open_SD_Card+0xd0>)
 800281e:	f006 f8b7 	bl	8008990 <f_getfree>
	if(sd_mounting_status != FR_OK)
 8002822:	4603      	mov	r3, r0
 8002824:	2800      	cmp	r0, #0
 8002826:	d1ed      	bne.n	8002804 <Mount_open_SD_Card+0x10>
	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <Mount_open_SD_Card+0xe0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6958      	ldr	r0, [r3, #20]
 800282e:	3802      	subs	r0, #2
 8002830:	895c      	ldrh	r4, [r3, #10]
 8002832:	fb04 f000 	mul.w	r0, r4, r0
 8002836:	f7fd fe6d 	bl	8000514 <__aeabi_ui2d>
 800283a:	2200      	movs	r2, #0
 800283c:	4b27      	ldr	r3, [pc, #156]	; (80028dc <Mount_open_SD_Card+0xe8>)
 800283e:	f7fd fee3 	bl	8000608 <__aeabi_dmul>
 8002842:	f7fe f9b9 	bl	8000bb8 <__aeabi_d2uiz>
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <Mount_open_SD_Card+0xec>)
 8002848:	6018      	str	r0, [r3, #0]
	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800284a:	4b23      	ldr	r3, [pc, #140]	; (80028d8 <Mount_open_SD_Card+0xe4>)
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	fb00 f004 	mul.w	r0, r0, r4
 8002852:	f7fd fe5f 	bl	8000514 <__aeabi_ui2d>
 8002856:	2200      	movs	r2, #0
 8002858:	4b20      	ldr	r3, [pc, #128]	; (80028dc <Mount_open_SD_Card+0xe8>)
 800285a:	f7fd fed5 	bl	8000608 <__aeabi_dmul>
 800285e:	f7fe f9ab 	bl	8000bb8 <__aeabi_d2uiz>
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <Mount_open_SD_Card+0xf0>)
 8002864:	6018      	str	r0, [r3, #0]
	if(freeSpace < 1)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	b34b      	cbz	r3, 80028be <Mount_open_SD_Card+0xca>
	f_printf(&fil, "STM32 SD Card data logger\n");
 800286a:	4c19      	ldr	r4, [pc, #100]	; (80028d0 <Mount_open_SD_Card+0xdc>)
 800286c:	491e      	ldr	r1, [pc, #120]	; (80028e8 <Mount_open_SD_Card+0xf4>)
 800286e:	4620      	mov	r0, r4
 8002870:	f006 f8fc 	bl	8008a6c <f_printf>
	f_printf(&fil, "RTC time and sensor readings (SI VIS and SI IR are raw values)\n");
 8002874:	491d      	ldr	r1, [pc, #116]	; (80028ec <Mount_open_SD_Card+0xf8>)
 8002876:	4620      	mov	r0, r4
 8002878:	f006 f8f8 	bl	8008a6c <f_printf>
	f_printf(&fil, "SD-CARD-MEMORY = %d \n SD-CARD-FREE-MEMORY = %d\n", totalSpace, freeSpace);
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <Mount_open_SD_Card+0xec>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <Mount_open_SD_Card+0xf0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	491a      	ldr	r1, [pc, #104]	; (80028f0 <Mount_open_SD_Card+0xfc>)
 8002886:	4620      	mov	r0, r4
 8002888:	f006 f8f0 	bl	8008a6c <f_printf>
	f_printf(&fil, "| Dt | Hr | Mn | Sc |");
 800288c:	4919      	ldr	r1, [pc, #100]	; (80028f4 <Mount_open_SD_Card+0x100>)
 800288e:	4620      	mov	r0, r4
 8002890:	f006 f8ec 	bl	8008a6c <f_printf>
	f_printf(&fil, " BME_in T | BME_in P | BME_in H | BME_in A |");
 8002894:	4918      	ldr	r1, [pc, #96]	; (80028f8 <Mount_open_SD_Card+0x104>)
 8002896:	4620      	mov	r0, r4
 8002898:	f006 f8e8 	bl	8008a6c <f_printf>
	f_printf(&fil, " BME_ex T | BME_ex P | BME_ex H | BME_in A |");
 800289c:	4917      	ldr	r1, [pc, #92]	; (80028fc <Mount_open_SD_Card+0x108>)
 800289e:	4620      	mov	r0, r4
 80028a0:	f006 f8e4 	bl	8008a6c <f_printf>
	f_printf(&fil, " MPU Acc_X | MPU Acc_Y | MPU Acc_Z | MPU Gyr_X | MPU Gyr_Y | MPU Gyr_Z | MPU Tmpr  |");
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <Mount_open_SD_Card+0x10c>)
 80028a6:	4620      	mov	r0, r4
 80028a8:	f006 f8e0 	bl	8008a6c <f_printf>
	f_printf(&fil, " SI VIS | SI IR  | SI UV  |\n");
 80028ac:	4915      	ldr	r1, [pc, #84]	; (8002904 <Mount_open_SD_Card+0x110>)
 80028ae:	4620      	mov	r0, r4
 80028b0:	f006 f8dc 	bl	8008a6c <f_printf>
	sd_mounting_status = f_sync(&fil);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f006 f80a 	bl	80088ce <f_sync>
 80028ba:	4603      	mov	r3, r0
	return sd_mounting_status;
 80028bc:	e7a2      	b.n	8002804 <Mount_open_SD_Card+0x10>
		return sd_mounting_status;
 80028be:	23df      	movs	r3, #223	; 0xdf
 80028c0:	e7a0      	b.n	8002804 <Mount_open_SD_Card+0x10>
 80028c2:	bf00      	nop
 80028c4:	0800cbac 	.word	0x0800cbac
 80028c8:	20000350 	.word	0x20000350
 80028cc:	0800ca28 	.word	0x0800ca28
 80028d0:	20000bb0 	.word	0x20000bb0
 80028d4:	20000b08 	.word	0x20000b08
 80028d8:	20000300 	.word	0x20000300
 80028dc:	3fe00000 	.word	0x3fe00000
 80028e0:	200006b4 	.word	0x200006b4
 80028e4:	20000a3c 	.word	0x20000a3c
 80028e8:	0800ca34 	.word	0x0800ca34
 80028ec:	0800ca50 	.word	0x0800ca50
 80028f0:	0800ca90 	.word	0x0800ca90
 80028f4:	0800cac0 	.word	0x0800cac0
 80028f8:	0800cad8 	.word	0x0800cad8
 80028fc:	0800cb08 	.word	0x0800cb08
 8002900:	0800cb38 	.word	0x0800cb38
 8002904:	0800cb90 	.word	0x0800cb90

08002908 <CAM_ON>:
{
 8002908:	b510      	push	{r4, lr}
 800290a:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 0)
 800290c:	8981      	ldrh	r1, [r0, #12]
 800290e:	6880      	ldr	r0, [r0, #8]
 8002910:	f002 f930 	bl	8004b74 <HAL_GPIO_ReadPin>
 8002914:	b110      	cbz	r0, 800291c <CAM_ON+0x14>
	CAM->Do_EXTI = 1;
 8002916:	2301      	movs	r3, #1
 8002918:	77a3      	strb	r3, [r4, #30]
}
 800291a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CAM->ON_PORT, CAM->ON_PIN, GPIO_PIN_SET);
 800291c:	2201      	movs	r2, #1
 800291e:	88a1      	ldrh	r1, [r4, #4]
 8002920:	6820      	ldr	r0, [r4, #0]
 8002922:	f002 f92e 	bl	8004b82 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8002926:	2064      	movs	r0, #100	; 0x64
 8002928:	f001 ff70 	bl	800480c <HAL_Delay>
		HAL_GPIO_WritePin(CAM->ON_PORT, CAM->ON_PIN, GPIO_PIN_RESET);
 800292c:	2200      	movs	r2, #0
 800292e:	88a1      	ldrh	r1, [r4, #4]
 8002930:	6820      	ldr	r0, [r4, #0]
 8002932:	f002 f926 	bl	8004b82 <HAL_GPIO_WritePin>
		CAM->Startup_delay = CAM_STARTUP_TIME;
 8002936:	2306      	movs	r3, #6
 8002938:	77e3      	strb	r3, [r4, #31]
 800293a:	e7ec      	b.n	8002916 <CAM_ON+0xe>

0800293c <CAM_START>:
{
 800293c:	b510      	push	{r4, lr}
 800293e:	4604      	mov	r4, r0
	if((CAM->REC_STATUS == CAM_NREC) && (HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 1) && (CAM->Startup_delay == 0))
 8002940:	7f03      	ldrb	r3, [r0, #28]
 8002942:	b13b      	cbz	r3, 8002954 <CAM_START+0x18>
	if(HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 0)
 8002944:	89a1      	ldrh	r1, [r4, #12]
 8002946:	68a0      	ldr	r0, [r4, #8]
 8002948:	f002 f914 	bl	8004b74 <HAL_GPIO_ReadPin>
 800294c:	b1c8      	cbz	r0, 8002982 <CAM_START+0x46>
	CAM->Do_Restart = 1;
 800294e:	2301      	movs	r3, #1
 8002950:	7763      	strb	r3, [r4, #29]
}
 8002952:	bd10      	pop	{r4, pc}
	if((CAM->REC_STATUS == CAM_NREC) && (HAL_GPIO_ReadPin(CAM->OK_PORT, CAM->OK_PIN) == 1) && (CAM->Startup_delay == 0))
 8002954:	8981      	ldrh	r1, [r0, #12]
 8002956:	6880      	ldr	r0, [r0, #8]
 8002958:	f002 f90c 	bl	8004b74 <HAL_GPIO_ReadPin>
 800295c:	2801      	cmp	r0, #1
 800295e:	d1f1      	bne.n	8002944 <CAM_START+0x8>
 8002960:	7fe3      	ldrb	r3, [r4, #31]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1ee      	bne.n	8002944 <CAM_START+0x8>
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_RESET);
 8002966:	2200      	movs	r2, #0
 8002968:	89a1      	ldrh	r1, [r4, #12]
 800296a:	68a0      	ldr	r0, [r4, #8]
 800296c:	f002 f909 	bl	8004b82 <HAL_GPIO_WritePin>
		HAL_Delay(30);
 8002970:	201e      	movs	r0, #30
 8002972:	f001 ff4b 	bl	800480c <HAL_Delay>
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_SET);
 8002976:	2201      	movs	r2, #1
 8002978:	89a1      	ldrh	r1, [r4, #12]
 800297a:	68a0      	ldr	r0, [r4, #8]
 800297c:	f002 f901 	bl	8004b82 <HAL_GPIO_WritePin>
 8002980:	e7e0      	b.n	8002944 <CAM_START+0x8>
		CAM_ON(CAM);
 8002982:	4620      	mov	r0, r4
 8002984:	f7ff ffc0 	bl	8002908 <CAM_ON>
 8002988:	e7e1      	b.n	800294e <CAM_START+0x12>

0800298a <CAM_STOP>:
{
 800298a:	b510      	push	{r4, lr}
 800298c:	4604      	mov	r4, r0
	if(CAM->REC_STATUS == CAM_REC)
 800298e:	7f03      	ldrb	r3, [r0, #28]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d002      	beq.n	800299a <CAM_STOP+0x10>
	CAM->Do_Restart = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	7763      	strb	r3, [r4, #29]
}
 8002998:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_RESET);
 800299a:	2200      	movs	r2, #0
 800299c:	8981      	ldrh	r1, [r0, #12]
 800299e:	6880      	ldr	r0, [r0, #8]
 80029a0:	f002 f8ef 	bl	8004b82 <HAL_GPIO_WritePin>
		HAL_Delay(30);
 80029a4:	201e      	movs	r0, #30
 80029a6:	f001 ff31 	bl	800480c <HAL_Delay>
		HAL_GPIO_WritePin(CAM->OK_PORT, CAM->OK_PIN, GPIO_PIN_SET);
 80029aa:	2201      	movs	r2, #1
 80029ac:	89a1      	ldrh	r1, [r4, #12]
 80029ae:	68a0      	ldr	r0, [r4, #8]
 80029b0:	f002 f8e7 	bl	8004b82 <HAL_GPIO_WritePin>
		CAM->REC_STATUS = CAM_NREC;
 80029b4:	2300      	movs	r3, #0
 80029b6:	7723      	strb	r3, [r4, #28]
 80029b8:	e7ec      	b.n	8002994 <CAM_STOP+0xa>
 80029ba:	0000      	movs	r0, r0
 80029bc:	0000      	movs	r0, r0
	...

080029c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029c4:	ed2d 8b02 	vpush	{d8}
 80029c8:	b0a0      	sub	sp, #128	; 0x80
 80029ca:	4605      	mov	r5, r0

	// Core cycle, runs every 1s
	if (htim == &htim3)
 80029cc:	4baa      	ldr	r3, [pc, #680]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80029ce:	4298      	cmp	r0, r3
 80029d0:	d01a      	beq.n	8002a08 <HAL_TIM_PeriodElapsedCallback+0x48>
	}



	// LED flasher
	if (htim == &htim4)
 80029d2:	4baa      	ldr	r3, [pc, #680]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80029d4:	429d      	cmp	r5, r3
 80029d6:	f000 82c3 	beq.w	8002f60 <HAL_TIM_PeriodElapsedCallback+0x5a0>
	}



	// Camera_1 recording restart
	if (htim == CAM_1.TIM)
 80029da:	4ba9      	ldr	r3, [pc, #676]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	42ab      	cmp	r3, r5
 80029e0:	f000 8312 	beq.w	8003008 <HAL_TIM_PeriodElapsedCallback+0x648>
		if(CAM_1.Do_Restart)
			CAM_START(&CAM_1);
	}

	// Camera_2 recording restart
	if (htim == CAM_2.TIM)
 80029e4:	4ba7      	ldr	r3, [pc, #668]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	42ab      	cmp	r3, r5
 80029ea:	f000 831e 	beq.w	800302a <HAL_TIM_PeriodElapsedCallback+0x66a>
			CAM_START(&CAM_2);
	}


	// Buzzer control
	if (htim == &htim10)
 80029ee:	4ba6      	ldr	r3, [pc, #664]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80029f0:	429d      	cmp	r5, r3
 80029f2:	f000 832b 	beq.w	800304c <HAL_TIM_PeriodElapsedCallback+0x68c>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}


	// UART2 management
	if (htim == &htim11)
 80029f6:	4ba5      	ldr	r3, [pc, #660]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80029f8:	429d      	cmp	r5, r3
 80029fa:	f000 833a 	beq.w	8003072 <HAL_TIM_PeriodElapsedCallback+0x6b2>

			UART2_Send_Sensor_Data = 0;
		}

	}
}
 80029fe:	b020      	add	sp, #128	; 0x80
 8002a00:	ecbd 8b02 	vpop	{d8}
 8002a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t tickstart = HAL_GetTick();
 8002a08:	f001 fefa 	bl	8004800 <HAL_GetTick>
 8002a0c:	fa1f fa80 	uxth.w	sl, r0
		HAL_RTC_GetTime(&hrtc, &Current_Time, RTC_FORMAT_BIN);
 8002a10:	4c9f      	ldr	r4, [pc, #636]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	499f      	ldr	r1, [pc, #636]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002a16:	4620      	mov	r0, r4
 8002a18:	f003 fb8b 	bl	8006132 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &Current_Date, RTC_FORMAT_BIN);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	499e      	ldr	r1, [pc, #632]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002a20:	4620      	mov	r0, r4
 8002a22:	f003 fbae 	bl	8006182 <HAL_RTC_GetDate>
		Get_BME280_in_all_readings();
 8002a26:	f7ff fd37 	bl	8002498 <Get_BME280_in_all_readings>
		Get_BME280_ex_all_readings();
 8002a2a:	f7ff fdaf 	bl	800258c <Get_BME280_ex_all_readings>
		Get_MPU6050_all_readings();
 8002a2e:	f7ff fe23 	bl	8002678 <Get_MPU6050_all_readings>
		Get_SI1145_all_readings();
 8002a32:	f7ff fe89 	bl	8002748 <Get_SI1145_all_readings>
		for(uint8_t i = 0; i < ALTITUDE_BUFFER_SIZE; i++)
 8002a36:	2400      	movs	r4, #0
		double Altitude_last_sum = 0;
 8002a38:	2000      	movs	r0, #0
 8002a3a:	2100      	movs	r1, #0
		for(uint8_t i = 0; i < ALTITUDE_BUFFER_SIZE; i++)
 8002a3c:	2c09      	cmp	r4, #9
 8002a3e:	d809      	bhi.n	8002a54 <HAL_TIM_PeriodElapsedCallback+0x94>
			Altitude_last_sum += Altitude_last[i];
 8002a40:	4b96      	ldr	r3, [pc, #600]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002a42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f7fd fc27 	bl	800029c <__adddf3>
		for(uint8_t i = 0; i < ALTITUDE_BUFFER_SIZE; i++)
 8002a4e:	3401      	adds	r4, #1
 8002a50:	b2e4      	uxtb	r4, r4
 8002a52:	e7f3      	b.n	8002a3c <HAL_TIM_PeriodElapsedCallback+0x7c>
		double Altitude_last_avrg = Altitude_last_sum/ALTITUDE_BUFFER_SIZE;
 8002a54:	2200      	movs	r2, #0
 8002a56:	4b92      	ldr	r3, [pc, #584]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002a58:	f7fd ff00 	bl	800085c <__aeabi_ddiv>
 8002a5c:	4606      	mov	r6, r0
 8002a5e:	460f      	mov	r7, r1
		double Altitude_read = Sensors.BME280_External.Altitude;
 8002a60:	4b90      	ldr	r3, [pc, #576]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002a62:	ed93 8b0a 	vldr	d8, [r3, #40]	; 0x28
		if((abs(Altitude_read - Altitude_last_avrg) < VERTICAL_SPEED_MAX) && (Sensors.BME280_External.Status == HAL_OK))
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	ec51 0b18 	vmov	r0, r1, d8
 8002a6e:	f7fd fc13 	bl	8000298 <__aeabi_dsub>
 8002a72:	4680      	mov	r8, r0
 8002a74:	4689      	mov	r9, r1
 8002a76:	f7fe f877 	bl	8000b68 <__aeabi_d2iz>
 8002a7a:	3063      	adds	r0, #99	; 0x63
 8002a7c:	28c6      	cmp	r0, #198	; 0xc6
 8002a7e:	d812      	bhi.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0xe6>
 8002a80:	4b88      	ldr	r3, [pc, #544]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	b97b      	cbnz	r3, 8002aa6 <HAL_TIM_PeriodElapsedCallback+0xe6>
			Altitude_last[Altitude_index] = Altitude_read;
 8002a86:	4a88      	ldr	r2, [pc, #544]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002a88:	7811      	ldrb	r1, [r2, #0]
 8002a8a:	4b84      	ldr	r3, [pc, #528]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002a8c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002a90:	ed83 8b00 	vstr	d8, [r3]
			if(Altitude_index < (ALTITUDE_BUFFER_SIZE-1))
 8002a94:	7813      	ldrb	r3, [r2, #0]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	f200 80a6 	bhi.w	8002bea <HAL_TIM_PeriodElapsedCallback+0x22a>
				Altitude_index++;
 8002a9e:	7813      	ldrb	r3, [r2, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	7013      	strb	r3, [r2, #0]
		if(((Altitude_read - Altitude_last_avrg) < ASCENDING_SPEED_MAX) && (Altitude_read > Altitude_max))
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4b80      	ldr	r3, [pc, #512]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002aaa:	4640      	mov	r0, r8
 8002aac:	4649      	mov	r1, r9
 8002aae:	f7fe f81d 	bl	8000aec <__aeabi_dcmplt>
 8002ab2:	b150      	cbz	r0, 8002aca <HAL_TIM_PeriodElapsedCallback+0x10a>
 8002ab4:	ec53 2b18 	vmov	r2, r3, d8
 8002ab8:	497d      	ldr	r1, [pc, #500]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002aba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002abe:	f7fe f815 	bl	8000aec <__aeabi_dcmplt>
 8002ac2:	b110      	cbz	r0, 8002aca <HAL_TIM_PeriodElapsedCallback+0x10a>
			Altitude_max = Altitude_read;
 8002ac4:	4b7a      	ldr	r3, [pc, #488]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002ac6:	ed83 8b00 	vstr	d8, [r3]
		if((Altitude_max > LOWER_ALTITUDE_LIMIT+200) && (Altitude_last_avrg < LOWER_ALTITUDE_LIMIT))
 8002aca:	2200      	movs	r2, #0
 8002acc:	4b79      	ldr	r3, [pc, #484]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002ace:	4978      	ldr	r1, [pc, #480]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002ad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ad4:	f7fe f828 	bl	8000b28 <__aeabi_dcmpgt>
 8002ad8:	b140      	cbz	r0, 8002aec <HAL_TIM_PeriodElapsedCallback+0x12c>
 8002ada:	2200      	movs	r2, #0
 8002adc:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002ade:	4630      	mov	r0, r6
 8002ae0:	4639      	mov	r1, r7
 8002ae2:	f7fe f803 	bl	8000aec <__aeabi_dcmplt>
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	f040 8083 	bne.w	8002bf2 <HAL_TIM_PeriodElapsedCallback+0x232>
		if((Altitude_last_avrg > UPPER_ALTITUDE_LIMIT) && (Rope_cut_status != ROPE_CUTTING))
 8002aec:	a360      	add	r3, pc, #384	; (adr r3, 8002c70 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af2:	4630      	mov	r0, r6
 8002af4:	4639      	mov	r1, r7
 8002af6:	f7fe f817 	bl	8000b28 <__aeabi_dcmpgt>
 8002afa:	b150      	cbz	r0, 8002b12 <HAL_TIM_PeriodElapsedCallback+0x152>
 8002afc:	4b6f      	ldr	r3, [pc, #444]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d005      	beq.n	8002b12 <HAL_TIM_PeriodElapsedCallback+0x152>
			Rope_cut_status = ROPE_CUTTING;
 8002b06:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
			Rope_cut_delay = ROPE_CUT_TIME;
 8002b0c:	4b6c      	ldr	r3, [pc, #432]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002b0e:	220a      	movs	r2, #10
 8002b10:	701a      	strb	r2, [r3, #0]
		if(Rope_cut_status == ROPE_CUTTING)
 8002b12:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d074      	beq.n	8002c06 <HAL_TIM_PeriodElapsedCallback+0x246>
		memset(Data_to_send, 0, sizeof(Data_to_send));
 8002b1c:	4c69      	ldr	r4, [pc, #420]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002b1e:	223c      	movs	r2, #60	; 0x3c
 8002b20:	2100      	movs	r1, #0
 8002b22:	4620      	mov	r0, r4
 8002b24:	f006 f91e 	bl	8008d64 <memset>
		Data_to_send[0] = ',';
 8002b28:	232c      	movs	r3, #44	; 0x2c
 8002b2a:	7023      	strb	r3, [r4, #0]
		if(Sensors.BME280_Internal.Status == HAL_OK)
 8002b2c:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d17e      	bne.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x274>
			sprintf(TempStr, "%.2f", Sensors.BME280_Internal.Temperature);
 8002b36:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b38:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b3c:	4962      	ldr	r1, [pc, #392]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002b3e:	a807      	add	r0, sp, #28
 8002b40:	f006 fd82 	bl	8009648 <siprintf>
			strcat(Data_to_send, TempStr);
 8002b44:	a907      	add	r1, sp, #28
 8002b46:	4620      	mov	r0, r4
 8002b48:	f006 fd9e 	bl	8009688 <strcat>
		if(Sensors.BME280_External.Status == HAL_OK)
 8002b4c:	4b55      	ldr	r3, [pc, #340]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d176      	bne.n	8002c42 <HAL_TIM_PeriodElapsedCallback+0x282>
			sprintf(TempStr, ",%.2f,%d", Sensors.BME280_External.Temperature, (int16_t)Sensors.BME280_External.Altitude);
 8002b54:	4c53      	ldr	r4, [pc, #332]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b56:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 8002b5a:	f7fe f805 	bl	8000b68 <__aeabi_d2iz>
 8002b5e:	b200      	sxth	r0, r0
 8002b60:	9000      	str	r0, [sp, #0]
 8002b62:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8002b66:	4959      	ldr	r1, [pc, #356]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002b68:	a807      	add	r0, sp, #28
 8002b6a:	f006 fd6d 	bl	8009648 <siprintf>
			strcat(Data_to_send, TempStr);
 8002b6e:	a907      	add	r1, sp, #28
 8002b70:	4854      	ldr	r0, [pc, #336]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002b72:	f006 fd89 	bl	8009688 <strcat>
		if(Sensors.SI1145.Status == HAL_OK)
 8002b76:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b78:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d16e      	bne.n	8002c5e <HAL_TIM_PeriodElapsedCallback+0x29e>
			sprintf(TempStr, ",%.2f", Sensors.SI1145.UV);
 8002b80:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002b82:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8002b86:	4952      	ldr	r1, [pc, #328]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002b88:	a807      	add	r0, sp, #28
 8002b8a:	f006 fd5d 	bl	8009648 <siprintf>
			strcat(Data_to_send, TempStr);
 8002b8e:	a907      	add	r1, sp, #28
 8002b90:	484c      	ldr	r0, [pc, #304]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002b92:	f006 fd79 	bl	8009688 <strcat>
		if((sd_mounted == 1) && (sd_status == FR_OK))
 8002b96:	4b4f      	ldr	r3, [pc, #316]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	f000 80af 	beq.w	8002d00 <HAL_TIM_PeriodElapsedCallback+0x340>
		if((sd_status != FR_OK) && (sd_error_cnt <= SD_MAX_RETRIES))
 8002ba2:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	b12b      	cbz	r3, 8002bb4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 8002ba8:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b05      	cmp	r3, #5
 8002bb0:	f240 8169 	bls.w	8002e86 <HAL_TIM_PeriodElapsedCallback+0x4c6>
		uint16_t Cycle_runtime = HAL_GetTick() - tickstart;
 8002bb4:	f001 fe24 	bl	8004800 <HAL_GetTick>
 8002bb8:	b280      	uxth	r0, r0
 8002bba:	eba0 0a0a 	sub.w	sl, r0, sl
 8002bbe:	fa1f fa8a 	uxth.w	sl, sl
		if(Cycle_runtime > Cycle_runtime_max)
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	4553      	cmp	r3, sl
 8002bca:	d202      	bcs.n	8002bd2 <HAL_TIM_PeriodElapsedCallback+0x212>
			Cycle_runtime_max = Cycle_runtime;
 8002bcc:	4b44      	ldr	r3, [pc, #272]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002bce:	f8a3 a000 	strh.w	sl, [r3]
		if(Cycle_runtime < Cycle_runtime_min)
 8002bd2:	4b44      	ldr	r3, [pc, #272]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4553      	cmp	r3, sl
 8002bda:	d902      	bls.n	8002be2 <HAL_TIM_PeriodElapsedCallback+0x222>
			Cycle_runtime_min = Cycle_runtime;
 8002bdc:	4b41      	ldr	r3, [pc, #260]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002bde:	f8a3 a000 	strh.w	sl, [r3]
		Cycle_runtime_last = Cycle_runtime;
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002be4:	f8a3 a000 	strh.w	sl, [r3]
 8002be8:	e6f3      	b.n	80029d2 <HAL_TIM_PeriodElapsedCallback+0x12>
				Altitude_index = 0;
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e759      	b.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0xe6>
			HAL_TIM_Base_Stop_IT(&htim3);
 8002bf2:	4821      	ldr	r0, [pc, #132]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002bf4:	f003 fe92 	bl	800691c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim10);
 8002bf8:	4823      	ldr	r0, [pc, #140]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002bfa:	f003 fe53 	bl	80068a4 <HAL_TIM_Base_Start_IT>
			Is_asleep = 1;
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e772      	b.n	8002aec <HAL_TIM_PeriodElapsedCallback+0x12c>
			if(Rope_cut_delay > 0)
 8002c06:	4b2e      	ldr	r3, [pc, #184]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b153      	cbz	r3, 8002c22 <HAL_TIM_PeriodElapsedCallback+0x262>
				Rope_cut_delay--;
 8002c0c:	4a2c      	ldr	r2, [pc, #176]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002c0e:	7813      	ldrb	r3, [r2, #0]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	7013      	strb	r3, [r2, #0]
				HAL_GPIO_WritePin(ROPE_CUT_EN_GPIO_Port, ROPE_CUT_EN_Pin, GPIO_PIN_SET);
 8002c16:	2201      	movs	r2, #1
 8002c18:	2102      	movs	r1, #2
 8002c1a:	4835      	ldr	r0, [pc, #212]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002c1c:	f001 ffb1 	bl	8004b82 <HAL_GPIO_WritePin>
 8002c20:	e77c      	b.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x15c>
				HAL_GPIO_WritePin(ROPE_CUT_EN_GPIO_Port, ROPE_CUT_EN_Pin, GPIO_PIN_RESET);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2102      	movs	r1, #2
 8002c26:	4832      	ldr	r0, [pc, #200]	; (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002c28:	f001 ffab 	bl	8004b82 <HAL_GPIO_WritePin>
				Rope_cut_status = ROPE_CUT_DONE;
 8002c2c:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002c2e:	2202      	movs	r2, #2
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e773      	b.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x15c>
			sprintf(Data_to_send, "00");
 8002c34:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c36:	4a2f      	ldr	r2, [pc, #188]	; (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002c38:	8811      	ldrh	r1, [r2, #0]
 8002c3a:	7892      	ldrb	r2, [r2, #2]
 8002c3c:	8019      	strh	r1, [r3, #0]
 8002c3e:	709a      	strb	r2, [r3, #2]
 8002c40:	e784      	b.n	8002b4c <HAL_TIM_PeriodElapsedCallback+0x18c>
			strcat(Data_to_send, ",00,00");
 8002c42:	4c20      	ldr	r4, [pc, #128]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7fd facb 	bl	80001e0 <strlen>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	1901      	adds	r1, r0, r4
 8002c4e:	4a2a      	ldr	r2, [pc, #168]	; (8002cf8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002c50:	6810      	ldr	r0, [r2, #0]
 8002c52:	5118      	str	r0, [r3, r4]
 8002c54:	8890      	ldrh	r0, [r2, #4]
 8002c56:	7993      	ldrb	r3, [r2, #6]
 8002c58:	8088      	strh	r0, [r1, #4]
 8002c5a:	718b      	strb	r3, [r1, #6]
 8002c5c:	e78b      	b.n	8002b76 <HAL_TIM_PeriodElapsedCallback+0x1b6>
			strcat(Data_to_send, ",00");
 8002c5e:	4c19      	ldr	r4, [pc, #100]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002c60:	4620      	mov	r0, r4
 8002c62:	f7fd fabd 	bl	80001e0 <strlen>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002c6a:	6810      	ldr	r0, [r2, #0]
 8002c6c:	50e0      	str	r0, [r4, r3]
 8002c6e:	e792      	b.n	8002b96 <HAL_TIM_PeriodElapsedCallback+0x1d6>
 8002c70:	00000000 	.word	0x00000000
 8002c74:	40db5800 	.word	0x40db5800
 8002c78:	20000704 	.word	0x20000704
 8002c7c:	20000308 	.word	0x20000308
 8002c80:	200008f0 	.word	0x200008f0
 8002c84:	20000798 	.word	0x20000798
 8002c88:	200005d8 	.word	0x200005d8
 8002c8c:	20000840 	.word	0x20000840
 8002c90:	20000910 	.word	0x20000910
 8002c94:	20000e20 	.word	0x20000e20
 8002c98:	20000ba8 	.word	0x20000ba8
 8002c9c:	20000ab8 	.word	0x20000ab8
 8002ca0:	40240000 	.word	0x40240000
 8002ca4:	20000938 	.word	0x20000938
 8002ca8:	20000e1c 	.word	0x20000e1c
 8002cac:	40340000 	.word	0x40340000
 8002cb0:	20000750 	.word	0x20000750
 8002cb4:	4092c000 	.word	0x4092c000
 8002cb8:	408f4000 	.word	0x408f4000
 8002cbc:	20000a38 	.word	0x20000a38
 8002cc0:	20000305 	.word	0x20000305
 8002cc4:	20000de0 	.word	0x20000de0
 8002cc8:	0800cbb0 	.word	0x0800cbb0
 8002ccc:	0800cbb8 	.word	0x0800cbb8
 8002cd0:	0800cbcc 	.word	0x0800cbcc
 8002cd4:	200008ec 	.word	0x200008ec
 8002cd8:	2000083c 	.word	0x2000083c
 8002cdc:	20000306 	.word	0x20000306
 8002ce0:	20000758 	.word	0x20000758
 8002ce4:	200006ba 	.word	0x200006ba
 8002ce8:	20000e70 	.word	0x20000e70
 8002cec:	20000931 	.word	0x20000931
 8002cf0:	40020000 	.word	0x40020000
 8002cf4:	0800cbc8 	.word	0x0800cbc8
 8002cf8:	0800cbc4 	.word	0x0800cbc4
 8002cfc:	0800cbd4 	.word	0x0800cbd4
		if((sd_mounted == 1) && (sd_status == FR_OK))
 8002d00:	4b81      	ldr	r3, [pc, #516]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f47f af4a 	bne.w	8002ba2 <HAL_TIM_PeriodElapsedCallback+0x1e2>
			sd_error_cnt = 0;
 8002d0e:	4b7f      	ldr	r3, [pc, #508]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
			f_printf(&fil, "| %2u | %2u | %2u | %2u |", Current_Date.Date, Current_Time.Hours, Current_Time.Minutes, Current_Time.Seconds);
 8002d14:	4b7e      	ldr	r3, [pc, #504]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002d16:	785a      	ldrb	r2, [r3, #1]
 8002d18:	7899      	ldrb	r1, [r3, #2]
 8002d1a:	9101      	str	r1, [sp, #4]
 8002d1c:	9200      	str	r2, [sp, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4a7c      	ldr	r2, [pc, #496]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002d22:	7892      	ldrb	r2, [r2, #2]
 8002d24:	497c      	ldr	r1, [pc, #496]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002d26:	487d      	ldr	r0, [pc, #500]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002d28:	f005 fea0 	bl	8008a6c <f_printf>
			if(Sensors.BME280_Internal.Status == HAL_OK)
 8002d2c:	4b7c      	ldr	r3, [pc, #496]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002d2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d32:	b10b      	cbz	r3, 8002d38 <HAL_TIM_PeriodElapsedCallback+0x378>
				for(uint8_t i = 0; i < 3; i++)
 8002d34:	4634      	mov	r4, r6
 8002d36:	e01d      	b.n	8002d74 <HAL_TIM_PeriodElapsedCallback+0x3b4>
				sprintf(TempStr, " %8.3f | %8.3f | %8.3f | %8.1f |", Sensors.BME280_Internal.Temperature, Sensors.BME280_Internal.Pressure, Sensors.BME280_Internal.Humidity, Sensors.BME280_Internal.Altitude);
 8002d38:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002d3a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002d3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002d42:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002d46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d4a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002d4e:	e9cd 0100 	strd	r0, r1, [sp]
 8002d52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d56:	4973      	ldr	r1, [pc, #460]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002d58:	a807      	add	r0, sp, #28
 8002d5a:	f006 fc75 	bl	8009648 <siprintf>
				f_printf(&fil, TempStr);
 8002d5e:	a907      	add	r1, sp, #28
 8002d60:	486e      	ldr	r0, [pc, #440]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002d62:	f005 fe83 	bl	8008a6c <f_printf>
 8002d66:	e007      	b.n	8002d78 <HAL_TIM_PeriodElapsedCallback+0x3b8>
					f_printf(&fil, "    N/A    |");
 8002d68:	496f      	ldr	r1, [pc, #444]	; (8002f28 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002d6a:	486c      	ldr	r0, [pc, #432]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002d6c:	f005 fe7e 	bl	8008a6c <f_printf>
				for(uint8_t i = 0; i < 3; i++)
 8002d70:	3401      	adds	r4, #1
 8002d72:	b2e4      	uxtb	r4, r4
 8002d74:	2c02      	cmp	r4, #2
 8002d76:	d9f7      	bls.n	8002d68 <HAL_TIM_PeriodElapsedCallback+0x3a8>
			if(Sensors.BME280_External.Status == HAL_OK)
 8002d78:	4b69      	ldr	r3, [pc, #420]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b10b      	cbz	r3, 8002d82 <HAL_TIM_PeriodElapsedCallback+0x3c2>
				for(uint8_t i = 0; i < 3; i++)
 8002d7e:	4634      	mov	r4, r6
 8002d80:	e01d      	b.n	8002dbe <HAL_TIM_PeriodElapsedCallback+0x3fe>
				sprintf(TempStr, " %8.3f | %8.3f | %8.3f | %8.1f |", Sensors.BME280_External.Temperature, Sensors.BME280_External.Pressure, Sensors.BME280_External.Humidity, Sensors.BME280_External.Altitude);
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002d84:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002d8c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d94:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002d98:	e9cd 0100 	strd	r0, r1, [sp]
 8002d9c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002da0:	4960      	ldr	r1, [pc, #384]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0x564>)
 8002da2:	a807      	add	r0, sp, #28
 8002da4:	f006 fc50 	bl	8009648 <siprintf>
				f_printf(&fil, TempStr);
 8002da8:	a907      	add	r1, sp, #28
 8002daa:	485c      	ldr	r0, [pc, #368]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002dac:	f005 fe5e 	bl	8008a6c <f_printf>
 8002db0:	e007      	b.n	8002dc2 <HAL_TIM_PeriodElapsedCallback+0x402>
					f_printf(&fil, "    N/A    |");
 8002db2:	495d      	ldr	r1, [pc, #372]	; (8002f28 <HAL_TIM_PeriodElapsedCallback+0x568>)
 8002db4:	4859      	ldr	r0, [pc, #356]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002db6:	f005 fe59 	bl	8008a6c <f_printf>
				for(uint8_t i = 0; i < 3; i++)
 8002dba:	3401      	adds	r4, #1
 8002dbc:	b2e4      	uxtb	r4, r4
 8002dbe:	2c02      	cmp	r4, #2
 8002dc0:	d9f7      	bls.n	8002db2 <HAL_TIM_PeriodElapsedCallback+0x3f2>
			if(Sensors.MPU650.Status == HAL_OK)
 8002dc2:	4b57      	ldr	r3, [pc, #348]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002dc4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002dc8:	b10b      	cbz	r3, 8002dce <HAL_TIM_PeriodElapsedCallback+0x40e>
				for(uint8_t i = 0; i < 7; i++)
 8002dca:	4634      	mov	r4, r6
 8002dcc:	e030      	b.n	8002e30 <HAL_TIM_PeriodElapsedCallback+0x470>
				sprintf(TempStr, " %9.3f | %9.3f | %9.3f |", Sensors.MPU650.Accel_X, Sensors.MPU650.Accel_Y, Sensors.MPU650.Accel_Z);
 8002dce:	4c54      	ldr	r4, [pc, #336]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002dd0:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	; 0x78
 8002dd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002dd8:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 8002ddc:	e9cd 2300 	strd	r2, r3, [sp]
 8002de0:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8002de4:	4951      	ldr	r1, [pc, #324]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8002de6:	a807      	add	r0, sp, #28
 8002de8:	f006 fc2e 	bl	8009648 <siprintf>
				f_printf(&fil, TempStr);
 8002dec:	4f4b      	ldr	r7, [pc, #300]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002dee:	a907      	add	r1, sp, #28
 8002df0:	4638      	mov	r0, r7
 8002df2:	f005 fe3b 	bl	8008a6c <f_printf>
				sprintf(TempStr, " %9.3f | %9.3f | %9.3f | %9.3f |", Sensors.MPU650.Gyro_X, Sensors.MPU650.Gyro_Y, Sensors.MPU650.Gyro_Z, Sensors.MPU650.Temperature);
 8002df6:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
 8002dfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002dfe:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
 8002e02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e06:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	; 0x88
 8002e0a:	e9cd 2300 	strd	r2, r3, [sp]
 8002e0e:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
 8002e12:	4947      	ldr	r1, [pc, #284]	; (8002f30 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8002e14:	a807      	add	r0, sp, #28
 8002e16:	f006 fc17 	bl	8009648 <siprintf>
				f_printf(&fil, TempStr);
 8002e1a:	a907      	add	r1, sp, #28
 8002e1c:	4638      	mov	r0, r7
 8002e1e:	f005 fe25 	bl	8008a6c <f_printf>
 8002e22:	e007      	b.n	8002e34 <HAL_TIM_PeriodElapsedCallback+0x474>
					f_printf(&fil, "      N/A     |");
 8002e24:	4943      	ldr	r1, [pc, #268]	; (8002f34 <HAL_TIM_PeriodElapsedCallback+0x574>)
 8002e26:	483d      	ldr	r0, [pc, #244]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002e28:	f005 fe20 	bl	8008a6c <f_printf>
				for(uint8_t i = 0; i < 7; i++)
 8002e2c:	3401      	adds	r4, #1
 8002e2e:	b2e4      	uxtb	r4, r4
 8002e30:	2c06      	cmp	r4, #6
 8002e32:	d9f7      	bls.n	8002e24 <HAL_TIM_PeriodElapsedCallback+0x464>
			if(Sensors.SI1145.Status == HAL_OK)
 8002e34:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002e36:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002e3a:	b9bb      	cbnz	r3, 8002e6c <HAL_TIM_PeriodElapsedCallback+0x4ac>
				sprintf(TempStr, " %6d | %6d | %6.2f |", Sensors.SI1145.VIS, Sensors.SI1145.IR, Sensors.SI1145.UV);
 8002e3c:	4a38      	ldr	r2, [pc, #224]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002e3e:	e9d2 012a 	ldrd	r0, r1, [r2, #168]	; 0xa8
 8002e42:	e9cd 0100 	strd	r0, r1, [sp]
 8002e46:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8002e4a:	f8b2 20b2 	ldrh.w	r2, [r2, #178]	; 0xb2
 8002e4e:	493a      	ldr	r1, [pc, #232]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0x578>)
 8002e50:	a807      	add	r0, sp, #28
 8002e52:	f006 fbf9 	bl	8009648 <siprintf>
				f_printf(&fil, TempStr);
 8002e56:	a907      	add	r1, sp, #28
 8002e58:	4830      	ldr	r0, [pc, #192]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002e5a:	f005 fe07 	bl	8008a6c <f_printf>
 8002e5e:	e007      	b.n	8002e70 <HAL_TIM_PeriodElapsedCallback+0x4b0>
					f_printf(&fil, "  N/A   |");
 8002e60:	4936      	ldr	r1, [pc, #216]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0x57c>)
 8002e62:	482e      	ldr	r0, [pc, #184]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002e64:	f005 fe02 	bl	8008a6c <f_printf>
				for(uint8_t i = 0; i < 3; i++)
 8002e68:	3601      	adds	r6, #1
 8002e6a:	b2f6      	uxtb	r6, r6
 8002e6c:	2e02      	cmp	r6, #2
 8002e6e:	d9f7      	bls.n	8002e60 <HAL_TIM_PeriodElapsedCallback+0x4a0>
			f_printf(&fil, "\n");
 8002e70:	4c2a      	ldr	r4, [pc, #168]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002e72:	4933      	ldr	r1, [pc, #204]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002e74:	4620      	mov	r0, r4
 8002e76:	f005 fdf9 	bl	8008a6c <f_printf>
			sd_status = f_sync(&fil);
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f005 fd27 	bl	80088ce <f_sync>
 8002e80:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002e82:	7018      	strb	r0, [r3, #0]
 8002e84:	e68d      	b.n	8002ba2 <HAL_TIM_PeriodElapsedCallback+0x1e2>
			sd_status = f_mount(NULL, "", 1);
 8002e86:	4e2f      	ldr	r6, [pc, #188]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4631      	mov	r1, r6
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f005 fa99 	bl	80083c4 <f_mount>
 8002e92:	4c1d      	ldr	r4, [pc, #116]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002e94:	7020      	strb	r0, [r4, #0]
			sd_status = f_mount(&fs, "", 1);
 8002e96:	2201      	movs	r2, #1
 8002e98:	4631      	mov	r1, r6
 8002e9a:	482b      	ldr	r0, [pc, #172]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002e9c:	f005 fa92 	bl	80083c4 <f_mount>
 8002ea0:	7020      	strb	r0, [r4, #0]
			if(sd_status == FR_OK)
 8002ea2:	7823      	ldrb	r3, [r4, #0]
 8002ea4:	b1c3      	cbz	r3, 8002ed8 <HAL_TIM_PeriodElapsedCallback+0x518>
				sd_error_cnt++;
 8002ea6:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002ea8:	7813      	ldrb	r3, [r2, #0]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	7013      	strb	r3, [r2, #0]
			if(sd_error_cnt > SD_MAX_RETRIES)
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	f67f ae7c 	bls.w	8002bb4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
				UART1_TxBuf[0] = 0xD0;
 8002ebc:	4923      	ldr	r1, [pc, #140]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002ebe:	23d0      	movs	r3, #208	; 0xd0
 8002ec0:	700b      	strb	r3, [r1, #0]
				UART1_TxBuf[1] = sd_status;
 8002ec2:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	704b      	strb	r3, [r1, #1]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8002ec8:	2202      	movs	r2, #2
 8002eca:	4821      	ldr	r0, [pc, #132]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002ecc:	f004 f861 	bl	8006f92 <HAL_UART_Transmit_IT>
				sd_mounted = 0;
 8002ed0:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e66d      	b.n	8002bb4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
				sd_error_cnt = 0;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
				sd_mounted = 1;
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
				sd_file_cnt++;
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002ee6:	7813      	ldrb	r3, [r2, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	7013      	strb	r3, [r2, #0]
				sprintf(TempStr, "Data%d.txt", sd_file_cnt);
 8002eee:	7812      	ldrb	r2, [r2, #0]
 8002ef0:	491a      	ldr	r1, [pc, #104]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x59c>)
 8002ef2:	a807      	add	r0, sp, #28
 8002ef4:	f006 fba8 	bl	8009648 <siprintf>
				sd_status = f_open(&fil, TempStr, FA_OPEN_ALWAYS | FA_WRITE);
 8002ef8:	2212      	movs	r2, #18
 8002efa:	a907      	add	r1, sp, #28
 8002efc:	4807      	ldr	r0, [pc, #28]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002efe:	f005 fa8f 	bl	8008420 <f_open>
 8002f02:	7020      	strb	r0, [r4, #0]
 8002f04:	e7d4      	b.n	8002eb0 <HAL_TIM_PeriodElapsedCallback+0x4f0>
 8002f06:	bf00      	nop
 8002f08:	2000083c 	.word	0x2000083c
 8002f0c:	20000306 	.word	0x20000306
 8002f10:	20000e20 	.word	0x20000e20
 8002f14:	20000ba8 	.word	0x20000ba8
 8002f18:	0800cbd8 	.word	0x0800cbd8
 8002f1c:	20000bb0 	.word	0x20000bb0
 8002f20:	20000938 	.word	0x20000938
 8002f24:	0800cbf4 	.word	0x0800cbf4
 8002f28:	0800cc18 	.word	0x0800cc18
 8002f2c:	0800cc30 	.word	0x0800cc30
 8002f30:	0800cc28 	.word	0x0800cc28
 8002f34:	0800cc4c 	.word	0x0800cc4c
 8002f38:	0800cc5c 	.word	0x0800cc5c
 8002f3c:	0800cc74 	.word	0x0800cc74
 8002f40:	0800cc80 	.word	0x0800cc80
 8002f44:	0800cbac 	.word	0x0800cbac
 8002f48:	20000350 	.word	0x20000350
 8002f4c:	20000a40 	.word	0x20000a40
 8002f50:	200007f8 	.word	0x200007f8
 8002f54:	200008ec 	.word	0x200008ec
 8002f58:	200007f4 	.word	0x200007f4
 8002f5c:	0800cc84 	.word	0x0800cc84
		  if((sd_mounted == 1) && (sd_status == FR_OK))
 8002f60:	4b5c      	ldr	r3, [pc, #368]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x714>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d102      	bne.n	8002f70 <HAL_TIM_PeriodElapsedCallback+0x5b0>
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	b34b      	cbz	r3, 8002fc4 <HAL_TIM_PeriodElapsedCallback+0x604>
			  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 8002f70:	2200      	movs	r2, #0
 8002f72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f76:	4859      	ldr	r0, [pc, #356]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8002f78:	f001 fe03 	bl	8004b82 <HAL_GPIO_WritePin>
		  if(Sensors.BME280_Internal.Status == HAL_OK)
 8002f7c:	4b58      	ldr	r3, [pc, #352]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8002f7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f82:	bb2b      	cbnz	r3, 8002fd0 <HAL_TIM_PeriodElapsedCallback+0x610>
			  HAL_GPIO_TogglePin(USER_LED4_GPIO_Port, USER_LED4_Pin);
 8002f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f88:	4856      	ldr	r0, [pc, #344]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002f8a:	f001 fe00 	bl	8004b8e <HAL_GPIO_TogglePin>
		  if(Sensors.BME280_External.Status == HAL_OK)
 8002f8e:	4b54      	ldr	r3, [pc, #336]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	bb23      	cbnz	r3, 8002fde <HAL_TIM_PeriodElapsedCallback+0x61e>
			  HAL_GPIO_TogglePin(USER_LED2_GPIO_Port, USER_LED2_Pin);
 8002f94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f98:	4852      	ldr	r0, [pc, #328]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002f9a:	f001 fdf8 	bl	8004b8e <HAL_GPIO_TogglePin>
		  if(Sensors.MPU650.Status == HAL_OK)
 8002f9e:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8002fa0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002fa4:	bb13      	cbnz	r3, 8002fec <HAL_TIM_PeriodElapsedCallback+0x62c>
			  HAL_GPIO_TogglePin(USER_LED5_GPIO_Port, USER_LED5_Pin);
 8002fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002faa:	484e      	ldr	r0, [pc, #312]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002fac:	f001 fdef 	bl	8004b8e <HAL_GPIO_TogglePin>
		  if(Sensors.SI1145.Status == HAL_OK)
 8002fb0:	4b4b      	ldr	r3, [pc, #300]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8002fb2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002fb6:	bb03      	cbnz	r3, 8002ffa <HAL_TIM_PeriodElapsedCallback+0x63a>
			  HAL_GPIO_TogglePin(USER_LED3_GPIO_Port, USER_LED3_Pin);
 8002fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fbc:	4849      	ldr	r0, [pc, #292]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002fbe:	f001 fde6 	bl	8004b8e <HAL_GPIO_TogglePin>
 8002fc2:	e50a      	b.n	80029da <HAL_TIM_PeriodElapsedCallback+0x1a>
			  HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8002fc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fc8:	4844      	ldr	r0, [pc, #272]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8002fca:	f001 fde0 	bl	8004b8e <HAL_GPIO_TogglePin>
 8002fce:	e7d5      	b.n	8002f7c <HAL_TIM_PeriodElapsedCallback+0x5bc>
			  HAL_GPIO_WritePin(USER_LED4_GPIO_Port, USER_LED4_Pin, GPIO_PIN_RESET);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd6:	4843      	ldr	r0, [pc, #268]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002fd8:	f001 fdd3 	bl	8004b82 <HAL_GPIO_WritePin>
 8002fdc:	e7d7      	b.n	8002f8e <HAL_TIM_PeriodElapsedCallback+0x5ce>
			  HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, GPIO_PIN_RESET);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fe4:	483f      	ldr	r0, [pc, #252]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002fe6:	f001 fdcc 	bl	8004b82 <HAL_GPIO_WritePin>
 8002fea:	e7d8      	b.n	8002f9e <HAL_TIM_PeriodElapsedCallback+0x5de>
			  HAL_GPIO_WritePin(USER_LED5_GPIO_Port, USER_LED5_Pin, GPIO_PIN_RESET);
 8002fec:	2200      	movs	r2, #0
 8002fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ff2:	483c      	ldr	r0, [pc, #240]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8002ff4:	f001 fdc5 	bl	8004b82 <HAL_GPIO_WritePin>
 8002ff8:	e7da      	b.n	8002fb0 <HAL_TIM_PeriodElapsedCallback+0x5f0>
			  HAL_GPIO_WritePin(USER_LED3_GPIO_Port, USER_LED3_Pin, GPIO_PIN_RESET);
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003000:	4838      	ldr	r0, [pc, #224]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003002:	f001 fdbe 	bl	8004b82 <HAL_GPIO_WritePin>
 8003006:	e4e8      	b.n	80029da <HAL_TIM_PeriodElapsedCallback+0x1a>
		CAM_1.REC_STATUS = CAM_NREC;
 8003008:	4b37      	ldr	r3, [pc, #220]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 800300a:	2200      	movs	r2, #0
 800300c:	771a      	strb	r2, [r3, #28]
		if(CAM_1.Startup_delay > 0)
 800300e:	7fdb      	ldrb	r3, [r3, #31]
 8003010:	b113      	cbz	r3, 8003018 <HAL_TIM_PeriodElapsedCallback+0x658>
			CAM_1.Startup_delay--;
 8003012:	3b01      	subs	r3, #1
 8003014:	4a34      	ldr	r2, [pc, #208]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003016:	77d3      	strb	r3, [r2, #31]
		if(CAM_1.Do_Restart)
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 800301a:	7f5b      	ldrb	r3, [r3, #29]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f43f ace1 	beq.w	80029e4 <HAL_TIM_PeriodElapsedCallback+0x24>
			CAM_START(&CAM_1);
 8003022:	4831      	ldr	r0, [pc, #196]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8003024:	f7ff fc8a 	bl	800293c <CAM_START>
 8003028:	e4dc      	b.n	80029e4 <HAL_TIM_PeriodElapsedCallback+0x24>
		CAM_2.REC_STATUS = CAM_NREC;
 800302a:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
		if(CAM_2.Startup_delay > 0)
 8003030:	7fdb      	ldrb	r3, [r3, #31]
 8003032:	b113      	cbz	r3, 800303a <HAL_TIM_PeriodElapsedCallback+0x67a>
			CAM_2.Startup_delay--;
 8003034:	3b01      	subs	r3, #1
 8003036:	4a2d      	ldr	r2, [pc, #180]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003038:	77d3      	strb	r3, [r2, #31]
		if(CAM_2.Do_Restart)
 800303a:	4b2c      	ldr	r3, [pc, #176]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 800303c:	7f5b      	ldrb	r3, [r3, #29]
 800303e:	2b00      	cmp	r3, #0
 8003040:	f43f acd5 	beq.w	80029ee <HAL_TIM_PeriodElapsedCallback+0x2e>
			CAM_START(&CAM_2);
 8003044:	4829      	ldr	r0, [pc, #164]	; (80030ec <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8003046:	f7ff fc79 	bl	800293c <CAM_START>
 800304a:	e4d0      	b.n	80029ee <HAL_TIM_PeriodElapsedCallback+0x2e>
		if((Current_Time.Seconds == 30) || (Current_Time.Seconds == 0))
 800304c:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <HAL_TIM_PeriodElapsedCallback+0x730>)
 800304e:	789b      	ldrb	r3, [r3, #2]
 8003050:	2b1e      	cmp	r3, #30
 8003052:	d000      	beq.n	8003056 <HAL_TIM_PeriodElapsedCallback+0x696>
 8003054:	b933      	cbnz	r3, 8003064 <HAL_TIM_PeriodElapsedCallback+0x6a4>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8003056:	2201      	movs	r2, #1
 8003058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800305c:	481f      	ldr	r0, [pc, #124]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 800305e:	f001 fd90 	bl	8004b82 <HAL_GPIO_WritePin>
 8003062:	e4c8      	b.n	80029f6 <HAL_TIM_PeriodElapsedCallback+0x36>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8003064:	2200      	movs	r2, #0
 8003066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800306a:	481c      	ldr	r0, [pc, #112]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x71c>)
 800306c:	f001 fd89 	bl	8004b82 <HAL_GPIO_WritePin>
 8003070:	e4c1      	b.n	80029f6 <HAL_TIM_PeriodElapsedCallback+0x36>
		if(UART2_Reset_Countdown > 300)	// 10ms * 300 = 3s
 8003072:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8003074:	7813      	ldrb	r3, [r2, #0]
			UART2_Reset_Countdown++;
 8003076:	7813      	ldrb	r3, [r2, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	7013      	strb	r3, [r2, #0]
		if(UART2_Send_Sensor_Data == 1)
 800307e:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	f47f acba 	bne.w	80029fe <HAL_TIM_PeriodElapsedCallback+0x3e>
			uint8_t buffer_len = strlen(Data_to_send) - 1;	// Ignore first symbol in string (which always is ',')
 800308a:	481c      	ldr	r0, [pc, #112]	; (80030fc <HAL_TIM_PeriodElapsedCallback+0x73c>)
 800308c:	f7fd f8a8 	bl	80001e0 <strlen>
 8003090:	b2c4      	uxtb	r4, r0
 8003092:	3c01      	subs	r4, #1
 8003094:	b2e4      	uxtb	r4, r4
			for(uint8_t i = 0; i < buffer_len; i++)
 8003096:	2300      	movs	r3, #0
 8003098:	42a3      	cmp	r3, r4
 800309a:	d206      	bcs.n	80030aa <HAL_TIM_PeriodElapsedCallback+0x6ea>
				UART2_TxBuf[i] = Data_to_send[i+1];
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	4917      	ldr	r1, [pc, #92]	; (80030fc <HAL_TIM_PeriodElapsedCallback+0x73c>)
 80030a0:	5c88      	ldrb	r0, [r1, r2]
 80030a2:	4917      	ldr	r1, [pc, #92]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80030a4:	54c8      	strb	r0, [r1, r3]
			for(uint8_t i = 0; i < buffer_len; i++)
 80030a6:	b2d3      	uxtb	r3, r2
 80030a8:	e7f6      	b.n	8003098 <HAL_TIM_PeriodElapsedCallback+0x6d8>
			uint8_t checksum = get_check_sum((char *)UART2_TxBuf);
 80030aa:	4d15      	ldr	r5, [pc, #84]	; (8003100 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80030ac:	4628      	mov	r0, r5
 80030ae:	f7ff f97b 	bl	80023a8 <get_check_sum>
			UART2_TxBuf[buffer_len] = '*';
 80030b2:	232a      	movs	r3, #42	; 0x2a
 80030b4:	552b      	strb	r3, [r5, r4]
			UART2_TxBuf[buffer_len+1] = checksum;
 80030b6:	3401      	adds	r4, #1
 80030b8:	5528      	strb	r0, [r5, r4]
			HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, strlen((char *)UART2_TxBuf));
 80030ba:	4628      	mov	r0, r5
 80030bc:	f7fd f890 	bl	80001e0 <strlen>
 80030c0:	b282      	uxth	r2, r0
 80030c2:	4629      	mov	r1, r5
 80030c4:	480f      	ldr	r0, [pc, #60]	; (8003104 <HAL_TIM_PeriodElapsedCallback+0x744>)
 80030c6:	f003 ff64 	bl	8006f92 <HAL_UART_Transmit_IT>
			UART2_Send_Sensor_Data = 0;
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <HAL_TIM_PeriodElapsedCallback+0x738>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
}
 80030d0:	e495      	b.n	80029fe <HAL_TIM_PeriodElapsedCallback+0x3e>
 80030d2:	bf00      	nop
 80030d4:	200008ec 	.word	0x200008ec
 80030d8:	2000083c 	.word	0x2000083c
 80030dc:	40020000 	.word	0x40020000
 80030e0:	20000938 	.word	0x20000938
 80030e4:	40020400 	.word	0x40020400
 80030e8:	200008f0 	.word	0x200008f0
 80030ec:	20000798 	.word	0x20000798
 80030f0:	20000e20 	.word	0x20000e20
 80030f4:	20000930 	.word	0x20000930
 80030f8:	20000304 	.word	0x20000304
 80030fc:	20000de0 	.word	0x20000de0
 8003100:	20000e34 	.word	0x20000e34
 8003104:	20000b64 	.word	0x20000b64

08003108 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	4604      	mov	r4, r0
	if((GPIO_PIN == CAM1_START_Pin) && CAM_1.Do_EXTI && (CAM_1.Startup_delay == 0))
 800310c:	2820      	cmp	r0, #32
 800310e:	d002      	beq.n	8003116 <HAL_GPIO_EXTI_Callback+0xe>
		HAL_TIM_Base_Stop_IT(CAM_1.TIM);
		__HAL_TIM_SET_COUNTER(CAM_1.TIM, 1);
		HAL_TIM_Base_Start_IT(CAM_1.TIM);
	}

	if((GPIO_PIN == CAM2_START_Pin) && CAM_2.Do_EXTI && (CAM_2.Startup_delay == 0))
 8003110:	2c10      	cmp	r4, #16
 8003112:	d014      	beq.n	800313e <HAL_GPIO_EXTI_Callback+0x36>
		CAM_2.REC_STATUS = CAM_REC;
		HAL_TIM_Base_Stop_IT(CAM_2.TIM);
		__HAL_TIM_SET_COUNTER(CAM_2.TIM, 1);
		HAL_TIM_Base_Start_IT(CAM_2.TIM);
	}
}
 8003114:	bd70      	pop	{r4, r5, r6, pc}
	if((GPIO_PIN == CAM1_START_Pin) && CAM_1.Do_EXTI && (CAM_1.Startup_delay == 0))
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <HAL_GPIO_EXTI_Callback+0x60>)
 8003118:	7f9b      	ldrb	r3, [r3, #30]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f8      	beq.n	8003110 <HAL_GPIO_EXTI_Callback+0x8>
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <HAL_GPIO_EXTI_Callback+0x60>)
 8003120:	7fdb      	ldrb	r3, [r3, #31]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f4      	bne.n	8003110 <HAL_GPIO_EXTI_Callback+0x8>
		CAM_1.REC_STATUS = CAM_REC;
 8003126:	4d10      	ldr	r5, [pc, #64]	; (8003168 <HAL_GPIO_EXTI_Callback+0x60>)
 8003128:	2601      	movs	r6, #1
 800312a:	772e      	strb	r6, [r5, #28]
		HAL_TIM_Base_Stop_IT(CAM_1.TIM);
 800312c:	69a8      	ldr	r0, [r5, #24]
 800312e:	f003 fbf5 	bl	800691c <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(CAM_1.TIM, 1);
 8003132:	69a8      	ldr	r0, [r5, #24]
 8003134:	6803      	ldr	r3, [r0, #0]
 8003136:	625e      	str	r6, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(CAM_1.TIM);
 8003138:	f003 fbb4 	bl	80068a4 <HAL_TIM_Base_Start_IT>
 800313c:	e7e8      	b.n	8003110 <HAL_GPIO_EXTI_Callback+0x8>
	if((GPIO_PIN == CAM2_START_Pin) && CAM_2.Do_EXTI && (CAM_2.Startup_delay == 0))
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_GPIO_EXTI_Callback+0x64>)
 8003140:	7f9b      	ldrb	r3, [r3, #30]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0e6      	beq.n	8003114 <HAL_GPIO_EXTI_Callback+0xc>
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_GPIO_EXTI_Callback+0x64>)
 8003148:	7fdb      	ldrb	r3, [r3, #31]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1e2      	bne.n	8003114 <HAL_GPIO_EXTI_Callback+0xc>
		CAM_2.REC_STATUS = CAM_REC;
 800314e:	4c07      	ldr	r4, [pc, #28]	; (800316c <HAL_GPIO_EXTI_Callback+0x64>)
 8003150:	2501      	movs	r5, #1
 8003152:	7725      	strb	r5, [r4, #28]
		HAL_TIM_Base_Stop_IT(CAM_2.TIM);
 8003154:	69a0      	ldr	r0, [r4, #24]
 8003156:	f003 fbe1 	bl	800691c <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_SET_COUNTER(CAM_2.TIM, 1);
 800315a:	69a0      	ldr	r0, [r4, #24]
 800315c:	6803      	ldr	r3, [r0, #0]
 800315e:	625d      	str	r5, [r3, #36]	; 0x24
		HAL_TIM_Base_Start_IT(CAM_2.TIM);
 8003160:	f003 fba0 	bl	80068a4 <HAL_TIM_Base_Start_IT>
}
 8003164:	e7d6      	b.n	8003114 <HAL_GPIO_EXTI_Callback+0xc>
 8003166:	bf00      	nop
 8003168:	200008f0 	.word	0x200008f0
 800316c:	20000798 	.word	0x20000798

08003170 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003172:	b089      	sub	sp, #36	; 0x24
 8003174:	4604      	mov	r4, r0

	// UART1 connects to the bluetooth module for debugging
	if (huart == &huart1)
 8003176:	4ba4      	ldr	r3, [pc, #656]	; (8003408 <HAL_UART_RxCpltCallback+0x298>)
 8003178:	4298      	cmp	r0, r3
 800317a:	d005      	beq.n	8003188 <HAL_UART_RxCpltCallback+0x18>
		memset(UART1_RxBuf, 0, UART_Buffer_size);
	}


	// UART2 connects to the COM computer
	if (huart == &huart2)
 800317c:	4ba3      	ldr	r3, [pc, #652]	; (800340c <HAL_UART_RxCpltCallback+0x29c>)
 800317e:	429c      	cmp	r4, r3
 8003180:	f000 8217 	beq.w	80035b2 <HAL_UART_RxCpltCallback+0x442>
			memset(UART2_RxBuf, 0, UART_Buffer_size);
		}

		HAL_UART_Receive_IT(&huart2, UART2_RxBuf, UART2_RxBytes);
	}
}
 8003184:	b009      	add	sp, #36	; 0x24
 8003186:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (UART1_RxIsData == 1)
 8003188:	4ba1      	ldr	r3, [pc, #644]	; (8003410 <HAL_UART_RxCpltCallback+0x2a0>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d028      	beq.n	80031e4 <HAL_UART_RxCpltCallback+0x74>
			volatile uint8_t Command = UART1_RxBuf[0];
 8003192:	4ba0      	ldr	r3, [pc, #640]	; (8003414 <HAL_UART_RxCpltCallback+0x2a4>)
 8003194:	781a      	ldrb	r2, [r3, #0]
 8003196:	f88d 2004 	strb.w	r2, [sp, #4]
			volatile uint8_t Parameter = UART1_RxBuf[1];
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	f88d 3005 	strb.w	r3, [sp, #5]
			if(Command != 0x02)
 80031a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d144      	bne.n	8003234 <HAL_UART_RxCpltCallback+0xc4>
			memset(UART1_TxBuf, 0, UART_Buffer_size);
 80031aa:	223c      	movs	r2, #60	; 0x3c
 80031ac:	2100      	movs	r1, #0
 80031ae:	489a      	ldr	r0, [pc, #616]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 80031b0:	f005 fdd8 	bl	8008d64 <memset>
			switch(Command)
 80031b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2bcb      	cmp	r3, #203	; 0xcb
 80031bc:	d834      	bhi.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
 80031be:	2bc0      	cmp	r3, #192	; 0xc0
 80031c0:	d340      	bcc.n	8003244 <HAL_UART_RxCpltCallback+0xd4>
 80031c2:	3bc0      	subs	r3, #192	; 0xc0
 80031c4:	2b0b      	cmp	r3, #11
 80031c6:	d82f      	bhi.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
 80031c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80031cc:	00da00d0 	.word	0x00da00d0
 80031d0:	010100f6 	.word	0x010100f6
 80031d4:	015e013a 	.word	0x015e013a
 80031d8:	01a2019f 	.word	0x01a2019f
 80031dc:	01d301b6 	.word	0x01d301b6
 80031e0:	01ec01e5 	.word	0x01ec01e5
			for (uint8_t i = 0; i < UART1_RxBytes; i++)
 80031e4:	2300      	movs	r3, #0
 80031e6:	4a8d      	ldr	r2, [pc, #564]	; (800341c <HAL_UART_RxCpltCallback+0x2ac>)
 80031e8:	7812      	ldrb	r2, [r2, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d906      	bls.n	80031fe <HAL_UART_RxCpltCallback+0x8e>
				UART1_DataBuf[i] = UART1_RxBuf[i];
 80031f0:	4a88      	ldr	r2, [pc, #544]	; (8003414 <HAL_UART_RxCpltCallback+0x2a4>)
 80031f2:	5cd1      	ldrb	r1, [r2, r3]
 80031f4:	4a8a      	ldr	r2, [pc, #552]	; (8003420 <HAL_UART_RxCpltCallback+0x2b0>)
 80031f6:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < UART1_RxBytes; i++)
 80031f8:	3301      	adds	r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	e7f3      	b.n	80031e6 <HAL_UART_RxCpltCallback+0x76>
			UART1_TxBuf[0] = 0x00;
 80031fe:	4d86      	ldr	r5, [pc, #536]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 8003200:	2700      	movs	r7, #0
 8003202:	702f      	strb	r7, [r5, #0]
			UART1_TxBuf[1] = Get_System_Status();
 8003204:	f7ff f8e0 	bl	80023c8 <Get_System_Status>
 8003208:	7068      	strb	r0, [r5, #1]
			HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 800320a:	4e7f      	ldr	r6, [pc, #508]	; (8003408 <HAL_UART_RxCpltCallback+0x298>)
 800320c:	2202      	movs	r2, #2
 800320e:	4629      	mov	r1, r5
 8003210:	4630      	mov	r0, r6
 8003212:	f003 febe 	bl	8006f92 <HAL_UART_Transmit_IT>
			UART1_RxIsData = 0;
 8003216:	4b7e      	ldr	r3, [pc, #504]	; (8003410 <HAL_UART_RxCpltCallback+0x2a0>)
 8003218:	701f      	strb	r7, [r3, #0]
			UART1_RxBytes = 2;
 800321a:	2202      	movs	r2, #2
 800321c:	4b7f      	ldr	r3, [pc, #508]	; (800341c <HAL_UART_RxCpltCallback+0x2ac>)
 800321e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 8003220:	497c      	ldr	r1, [pc, #496]	; (8003414 <HAL_UART_RxCpltCallback+0x2a4>)
 8003222:	4630      	mov	r0, r6
 8003224:	f004 f8bd 	bl	80073a2 <HAL_UART_Receive_IT>
		memset(UART1_RxBuf, 0, UART_Buffer_size);
 8003228:	223c      	movs	r2, #60	; 0x3c
 800322a:	2100      	movs	r1, #0
 800322c:	4879      	ldr	r0, [pc, #484]	; (8003414 <HAL_UART_RxCpltCallback+0x2a4>)
 800322e:	f005 fd99 	bl	8008d64 <memset>
 8003232:	e7a3      	b.n	800317c <HAL_UART_RxCpltCallback+0xc>
				UART1_RxBytes = 2;
 8003234:	2202      	movs	r2, #2
 8003236:	4b79      	ldr	r3, [pc, #484]	; (800341c <HAL_UART_RxCpltCallback+0x2ac>)
 8003238:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 800323a:	4976      	ldr	r1, [pc, #472]	; (8003414 <HAL_UART_RxCpltCallback+0x2a4>)
 800323c:	4872      	ldr	r0, [pc, #456]	; (8003408 <HAL_UART_RxCpltCallback+0x298>)
 800323e:	f004 f8b0 	bl	80073a2 <HAL_UART_Receive_IT>
 8003242:	e7b2      	b.n	80031aa <HAL_UART_RxCpltCallback+0x3a>
			switch(Command)
 8003244:	2b41      	cmp	r3, #65	; 0x41
 8003246:	d06c      	beq.n	8003322 <HAL_UART_RxCpltCallback+0x1b2>
 8003248:	d914      	bls.n	8003274 <HAL_UART_RxCpltCallback+0x104>
 800324a:	2b42      	cmp	r3, #66	; 0x42
 800324c:	d06f      	beq.n	800332e <HAL_UART_RxCpltCallback+0x1be>
 800324e:	2b4f      	cmp	r3, #79	; 0x4f
 8003250:	d1ea      	bne.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				if((Parameter == 0xCC) && (Rope_cut_status != ROPE_CUTTING))
 8003252:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2bcc      	cmp	r3, #204	; 0xcc
 800325a:	d1e5      	bne.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
 800325c:	4b71      	ldr	r3, [pc, #452]	; (8003424 <HAL_UART_RxCpltCallback+0x2b4>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d0e0      	beq.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
					Rope_cut_status = ROPE_CUTTING;
 8003266:	4b6f      	ldr	r3, [pc, #444]	; (8003424 <HAL_UART_RxCpltCallback+0x2b4>)
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
					Rope_cut_delay = ROPE_CUT_TIME;
 800326c:	4b6e      	ldr	r3, [pc, #440]	; (8003428 <HAL_UART_RxCpltCallback+0x2b8>)
 800326e:	220a      	movs	r2, #10
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e7d9      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
			switch(Command)
 8003274:	2b02      	cmp	r3, #2
 8003276:	d01a      	beq.n	80032ae <HAL_UART_RxCpltCallback+0x13e>
 8003278:	2b03      	cmp	r3, #3
 800327a:	d10a      	bne.n	8003292 <HAL_UART_RxCpltCallback+0x122>
				if (Parameter == 0)
 800327c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003280:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8003284:	bb8a      	cbnz	r2, 80032ea <HAL_UART_RxCpltCallback+0x17a>
					UART1_TxBuf[0] = 0x02;
 8003286:	4a64      	ldr	r2, [pc, #400]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 8003288:	2102      	movs	r1, #2
 800328a:	7011      	strb	r1, [r2, #0]
					UART1_TxBuf[1] = temp;
 800328c:	2117      	movs	r1, #23
 800328e:	7051      	strb	r1, [r2, #1]
					for(uint8_t i = 0; i < temp; i++)
 8003290:	e023      	b.n	80032da <HAL_UART_RxCpltCallback+0x16a>
			switch(Command)
 8003292:	2b01      	cmp	r3, #1
 8003294:	d1c8      	bne.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				UART1_TxBuf[0] = 0x00;
 8003296:	4d60      	ldr	r5, [pc, #384]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 8003298:	2300      	movs	r3, #0
 800329a:	702b      	strb	r3, [r5, #0]
				UART1_TxBuf[1] = Get_System_Status();
 800329c:	f7ff f894 	bl	80023c8 <Get_System_Status>
 80032a0:	7068      	strb	r0, [r5, #1]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80032a2:	2202      	movs	r2, #2
 80032a4:	4629      	mov	r1, r5
 80032a6:	4858      	ldr	r0, [pc, #352]	; (8003408 <HAL_UART_RxCpltCallback+0x298>)
 80032a8:	f003 fe73 	bl	8006f92 <HAL_UART_Transmit_IT>
			break;
 80032ac:	e7bc      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				UART1_RxIsData = 1;
 80032ae:	4b58      	ldr	r3, [pc, #352]	; (8003410 <HAL_UART_RxCpltCallback+0x2a0>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
				UART1_RxBytes = Parameter;
 80032b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_UART_RxCpltCallback+0x2ac>)
 80032bc:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_IT(&huart1, UART1_RxBuf, Parameter);
 80032be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80032c2:	4954      	ldr	r1, [pc, #336]	; (8003414 <HAL_UART_RxCpltCallback+0x2a4>)
 80032c4:	4850      	ldr	r0, [pc, #320]	; (8003408 <HAL_UART_RxCpltCallback+0x298>)
 80032c6:	f004 f86c 	bl	80073a2 <HAL_UART_Receive_IT>
			break;
 80032ca:	e7ad      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
						UART1_TxBuf[2+i] = message[i];
 80032cc:	1c9a      	adds	r2, r3, #2
 80032ce:	4957      	ldr	r1, [pc, #348]	; (800342c <HAL_UART_RxCpltCallback+0x2bc>)
 80032d0:	5cc8      	ldrb	r0, [r1, r3]
 80032d2:	4951      	ldr	r1, [pc, #324]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 80032d4:	5488      	strb	r0, [r1, r2]
					for(uint8_t i = 0; i < temp; i++)
 80032d6:	3301      	adds	r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b16      	cmp	r3, #22
 80032dc:	d9f6      	bls.n	80032cc <HAL_UART_RxCpltCallback+0x15c>
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2+temp);
 80032de:	2219      	movs	r2, #25
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 80032e2:	4849      	ldr	r0, [pc, #292]	; (8003408 <HAL_UART_RxCpltCallback+0x298>)
 80032e4:	f003 fe55 	bl	8006f92 <HAL_UART_Transmit_IT>
 80032e8:	e79e      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
					UART1_TxBuf[0] = 0x02;
 80032ea:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 80032ec:	2202      	movs	r2, #2
 80032ee:	701a      	strb	r2, [r3, #0]
					UART1_TxBuf[1] = Parameter;
 80032f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80032f4:	705a      	strb	r2, [r3, #1]
					for(uint8_t i = 0; i < Parameter; i++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	e006      	b.n	8003308 <HAL_UART_RxCpltCallback+0x198>
						UART1_TxBuf[2+i] = UART1_DataBuf[i];
 80032fa:	1c9a      	adds	r2, r3, #2
 80032fc:	4948      	ldr	r1, [pc, #288]	; (8003420 <HAL_UART_RxCpltCallback+0x2b0>)
 80032fe:	5cc8      	ldrb	r0, [r1, r3]
 8003300:	4945      	ldr	r1, [pc, #276]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 8003302:	5488      	strb	r0, [r1, r2]
					for(uint8_t i = 0; i < Parameter; i++)
 8003304:	3301      	adds	r3, #1
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	429a      	cmp	r2, r3
 8003310:	d8f3      	bhi.n	80032fa <HAL_UART_RxCpltCallback+0x18a>
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2+Parameter);
 8003312:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003316:	3202      	adds	r2, #2
 8003318:	493f      	ldr	r1, [pc, #252]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 800331a:	483b      	ldr	r0, [pc, #236]	; (8003408 <HAL_UART_RxCpltCallback+0x298>)
 800331c:	f003 fe39 	bl	8006f92 <HAL_UART_Transmit_IT>
 8003320:	e782      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8003322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003326:	4842      	ldr	r0, [pc, #264]	; (8003430 <HAL_UART_RxCpltCallback+0x2c0>)
 8003328:	f001 fc31 	bl	8004b8e <HAL_GPIO_TogglePin>
			break;
 800332c:	e77c      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				sTime.Seconds = UART2_DataBuf[0];
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_UART_RxCpltCallback+0x2c4>)
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	f88d 200e 	strb.w	r2, [sp, #14]
				sTime.Minutes = UART2_DataBuf[1];
 8003336:	785a      	ldrb	r2, [r3, #1]
 8003338:	f88d 200d 	strb.w	r2, [sp, #13]
				sTime.Hours = UART2_DataBuf[2];
 800333c:	789a      	ldrb	r2, [r3, #2]
 800333e:	f88d 200c 	strb.w	r2, [sp, #12]
				sDate.Date = UART2_DataBuf[3];
 8003342:	78da      	ldrb	r2, [r3, #3]
 8003344:	f88d 200a 	strb.w	r2, [sp, #10]
				sDate.Month = UART2_DataBuf[4];
 8003348:	791a      	ldrb	r2, [r3, #4]
 800334a:	f88d 2009 	strb.w	r2, [sp, #9]
				sDate.Year = UART2_DataBuf[5];
 800334e:	795b      	ldrb	r3, [r3, #5]
 8003350:	f88d 300b 	strb.w	r3, [sp, #11]
				HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8003354:	4d38      	ldr	r5, [pc, #224]	; (8003438 <HAL_UART_RxCpltCallback+0x2c8>)
 8003356:	2201      	movs	r2, #1
 8003358:	a903      	add	r1, sp, #12
 800335a:	4628      	mov	r0, r5
 800335c:	f002 fdf4 	bl	8005f48 <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8003360:	2201      	movs	r2, #1
 8003362:	a902      	add	r1, sp, #8
 8003364:	4628      	mov	r0, r5
 8003366:	f002 fe6e 	bl	8006046 <HAL_RTC_SetDate>
			break;
 800336a:	e75d      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				UART2_TxBuf[0] = 0x01;
 800336c:	4933      	ldr	r1, [pc, #204]	; (800343c <HAL_UART_RxCpltCallback+0x2cc>)
 800336e:	2301      	movs	r3, #1
 8003370:	700b      	strb	r3, [r1, #0]
				UART2_TxBuf[1] = 0x00;
 8003372:	2300      	movs	r3, #0
 8003374:	704b      	strb	r3, [r1, #1]
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 2);
 8003376:	2202      	movs	r2, #2
 8003378:	4824      	ldr	r0, [pc, #144]	; (800340c <HAL_UART_RxCpltCallback+0x29c>)
 800337a:	f003 fe0a 	bl	8006f92 <HAL_UART_Transmit_IT>
			break;
 800337e:	e753      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				UART2_TxBuf[0] = 0x02;
 8003380:	4b2e      	ldr	r3, [pc, #184]	; (800343c <HAL_UART_RxCpltCallback+0x2cc>)
 8003382:	2202      	movs	r2, #2
 8003384:	701a      	strb	r2, [r3, #0]
				UART2_TxBuf[1] = Parameter;
 8003386:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800338a:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0; i < Parameter; i++)
 800338c:	2300      	movs	r3, #0
 800338e:	e006      	b.n	800339e <HAL_UART_RxCpltCallback+0x22e>
					UART2_TxBuf[2+i] = UART1_DataBuf[i];
 8003390:	1c9a      	adds	r2, r3, #2
 8003392:	4923      	ldr	r1, [pc, #140]	; (8003420 <HAL_UART_RxCpltCallback+0x2b0>)
 8003394:	5cc8      	ldrb	r0, [r1, r3]
 8003396:	4929      	ldr	r1, [pc, #164]	; (800343c <HAL_UART_RxCpltCallback+0x2cc>)
 8003398:	5488      	strb	r0, [r1, r2]
				for(uint8_t i = 0; i < Parameter; i++)
 800339a:	3301      	adds	r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d8f3      	bhi.n	8003390 <HAL_UART_RxCpltCallback+0x220>
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 2+Parameter);
 80033a8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80033ac:	3202      	adds	r2, #2
 80033ae:	4923      	ldr	r1, [pc, #140]	; (800343c <HAL_UART_RxCpltCallback+0x2cc>)
 80033b0:	4816      	ldr	r0, [pc, #88]	; (800340c <HAL_UART_RxCpltCallback+0x29c>)
 80033b2:	f003 fdee 	bl	8006f92 <HAL_UART_Transmit_IT>
			break;
 80033b6:	e737      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				UART2_TxBuf[0] = 0x03;
 80033b8:	4920      	ldr	r1, [pc, #128]	; (800343c <HAL_UART_RxCpltCallback+0x2cc>)
 80033ba:	2303      	movs	r3, #3
 80033bc:	700b      	strb	r3, [r1, #0]
				UART2_TxBuf[1] = Parameter;
 80033be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80033c2:	704b      	strb	r3, [r1, #1]
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, 2);
 80033c4:	2202      	movs	r2, #2
 80033c6:	4811      	ldr	r0, [pc, #68]	; (800340c <HAL_UART_RxCpltCallback+0x29c>)
 80033c8:	f003 fde3 	bl	8006f92 <HAL_UART_Transmit_IT>
			break;
 80033cc:	e72c      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				UART1_TxBuf[0] = 0x02;
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 80033d0:	2202      	movs	r2, #2
 80033d2:	701a      	strb	r2, [r3, #0]
				UART1_TxBuf[1] = Parameter;
 80033d4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80033d8:	705a      	strb	r2, [r3, #1]
				for(uint8_t i = 0; i < Parameter; i++)
 80033da:	2300      	movs	r3, #0
 80033dc:	e006      	b.n	80033ec <HAL_UART_RxCpltCallback+0x27c>
					UART1_TxBuf[2+i] = UART2_DataBuf[i];
 80033de:	1c9a      	adds	r2, r3, #2
 80033e0:	4914      	ldr	r1, [pc, #80]	; (8003434 <HAL_UART_RxCpltCallback+0x2c4>)
 80033e2:	5cc8      	ldrb	r0, [r1, r3]
 80033e4:	490c      	ldr	r1, [pc, #48]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 80033e6:	5488      	strb	r0, [r1, r2]
				for(uint8_t i = 0; i < Parameter; i++)
 80033e8:	3301      	adds	r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d8f3      	bhi.n	80033de <HAL_UART_RxCpltCallback+0x26e>
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2+Parameter);
 80033f6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80033fa:	3202      	adds	r2, #2
 80033fc:	4906      	ldr	r1, [pc, #24]	; (8003418 <HAL_UART_RxCpltCallback+0x2a8>)
 80033fe:	4802      	ldr	r0, [pc, #8]	; (8003408 <HAL_UART_RxCpltCallback+0x298>)
 8003400:	f003 fdc7 	bl	8006f92 <HAL_UART_Transmit_IT>
			break;
 8003404:	e710      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
 8003406:	bf00      	nop
 8003408:	200007f8 	.word	0x200007f8
 800340c:	20000b64 	.word	0x20000b64
 8003410:	200006b8 	.word	0x200006b8
 8003414:	200007b8 	.word	0x200007b8
 8003418:	20000a40 	.word	0x20000a40
 800341c:	20000580 	.word	0x20000580
 8003420:	20000674 	.word	0x20000674
 8003424:	20000a38 	.word	0x20000a38
 8003428:	20000305 	.word	0x20000305
 800342c:	20000008 	.word	0x20000008
 8003430:	40020000 	.word	0x40020000
 8003434:	2000075c 	.word	0x2000075c
 8003438:	20000910 	.word	0x20000910
 800343c:	20000e34 	.word	0x20000e34
				if (sd_mounted == 0)
 8003440:	4bac      	ldr	r3, [pc, #688]	; (80036f4 <HAL_UART_RxCpltCallback+0x584>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	b9b3      	cbnz	r3, 8003474 <HAL_UART_RxCpltCallback+0x304>
					sd_status = Mount_open_SD_Card();
 8003446:	f7ff f9d5 	bl	80027f4 <Mount_open_SD_Card>
 800344a:	4bab      	ldr	r3, [pc, #684]	; (80036f8 <HAL_UART_RxCpltCallback+0x588>)
 800344c:	7018      	strb	r0, [r3, #0]
					sd_file_cnt = 0;
 800344e:	4aab      	ldr	r2, [pc, #684]	; (80036fc <HAL_UART_RxCpltCallback+0x58c>)
 8003450:	2100      	movs	r1, #0
 8003452:	7011      	strb	r1, [r2, #0]
					if (sd_status == FR_OK)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b913      	cbnz	r3, 800345e <HAL_UART_RxCpltCallback+0x2ee>
						sd_mounted = 1;
 8003458:	4ba6      	ldr	r3, [pc, #664]	; (80036f4 <HAL_UART_RxCpltCallback+0x584>)
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
					UART1_TxBuf[0] = 0xD0;
 800345e:	49a8      	ldr	r1, [pc, #672]	; (8003700 <HAL_UART_RxCpltCallback+0x590>)
 8003460:	23d0      	movs	r3, #208	; 0xd0
 8003462:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = sd_status;
 8003464:	4ba4      	ldr	r3, [pc, #656]	; (80036f8 <HAL_UART_RxCpltCallback+0x588>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 800346a:	2202      	movs	r2, #2
 800346c:	48a5      	ldr	r0, [pc, #660]	; (8003704 <HAL_UART_RxCpltCallback+0x594>)
 800346e:	f003 fd90 	bl	8006f92 <HAL_UART_Transmit_IT>
 8003472:	e6d9      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
					UART1_TxBuf[0] = 0xD0;
 8003474:	49a2      	ldr	r1, [pc, #648]	; (8003700 <HAL_UART_RxCpltCallback+0x590>)
 8003476:	23d0      	movs	r3, #208	; 0xd0
 8003478:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = 0xD1;
 800347a:	23d1      	movs	r3, #209	; 0xd1
 800347c:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 800347e:	2202      	movs	r2, #2
 8003480:	48a0      	ldr	r0, [pc, #640]	; (8003704 <HAL_UART_RxCpltCallback+0x594>)
 8003482:	f003 fd86 	bl	8006f92 <HAL_UART_Transmit_IT>
 8003486:	e6cf      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				if (sd_mounted == 1)
 8003488:	4b9a      	ldr	r3, [pc, #616]	; (80036f4 <HAL_UART_RxCpltCallback+0x584>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b01      	cmp	r3, #1
 8003490:	d008      	beq.n	80034a4 <HAL_UART_RxCpltCallback+0x334>
					UART1_TxBuf[0] = 0xD0;
 8003492:	499b      	ldr	r1, [pc, #620]	; (8003700 <HAL_UART_RxCpltCallback+0x590>)
 8003494:	23d0      	movs	r3, #208	; 0xd0
 8003496:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = 0xD0;
 8003498:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 800349a:	2202      	movs	r2, #2
 800349c:	4899      	ldr	r0, [pc, #612]	; (8003704 <HAL_UART_RxCpltCallback+0x594>)
 800349e:	f003 fd78 	bl	8006f92 <HAL_UART_Transmit_IT>
 80034a2:	e6c1      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
					sd_status = f_close(&fil);
 80034a4:	4898      	ldr	r0, [pc, #608]	; (8003708 <HAL_UART_RxCpltCallback+0x598>)
 80034a6:	f005 fa5e 	bl	8008966 <f_close>
 80034aa:	4d93      	ldr	r5, [pc, #588]	; (80036f8 <HAL_UART_RxCpltCallback+0x588>)
 80034ac:	7028      	strb	r0, [r5, #0]
					sd_status = f_mount(NULL, "", 1);
 80034ae:	2201      	movs	r2, #1
 80034b0:	4996      	ldr	r1, [pc, #600]	; (800370c <HAL_UART_RxCpltCallback+0x59c>)
 80034b2:	2000      	movs	r0, #0
 80034b4:	f004 ff86 	bl	80083c4 <f_mount>
 80034b8:	7028      	strb	r0, [r5, #0]
					sd_mounted = 0;
 80034ba:	4b8e      	ldr	r3, [pc, #568]	; (80036f4 <HAL_UART_RxCpltCallback+0x584>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
					UART1_TxBuf[0] = 0xD0;
 80034c0:	498f      	ldr	r1, [pc, #572]	; (8003700 <HAL_UART_RxCpltCallback+0x590>)
 80034c2:	23d0      	movs	r3, #208	; 0xd0
 80034c4:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = sd_status;
 80034c6:	782b      	ldrb	r3, [r5, #0]
 80034c8:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80034ca:	2202      	movs	r2, #2
 80034cc:	488d      	ldr	r0, [pc, #564]	; (8003704 <HAL_UART_RxCpltCallback+0x594>)
 80034ce:	f003 fd60 	bl	8006f92 <HAL_UART_Transmit_IT>
 80034d2:	e6a9      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
					temp += UART1_DataBuf[i] << ((3 - i)*8);
 80034d4:	4a8e      	ldr	r2, [pc, #568]	; (8003710 <HAL_UART_RxCpltCallback+0x5a0>)
 80034d6:	5cd2      	ldrb	r2, [r2, r3]
 80034d8:	f1c3 0103 	rsb	r1, r3, #3
 80034dc:	00c9      	lsls	r1, r1, #3
 80034de:	408a      	lsls	r2, r1
 80034e0:	4415      	add	r5, r2
 80034e2:	b2ad      	uxth	r5, r5
				for (uint8_t i = 0; i < 4; i++)
 80034e4:	3301      	adds	r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d9f3      	bls.n	80034d4 <HAL_UART_RxCpltCallback+0x364>
				HAL_TIM_Base_Stop_IT(&htim4);
 80034ec:	4889      	ldr	r0, [pc, #548]	; (8003714 <HAL_UART_RxCpltCallback+0x5a4>)
 80034ee:	f003 fa15 	bl	800691c <HAL_TIM_Base_Stop_IT>
				if(temp > 0)
 80034f2:	2d00      	cmp	r5, #0
 80034f4:	f43f ae98 	beq.w	8003228 <HAL_UART_RxCpltCallback+0xb8>
					__HAL_TIM_SET_AUTORELOAD(&htim4, temp);
 80034f8:	4886      	ldr	r0, [pc, #536]	; (8003714 <HAL_UART_RxCpltCallback+0x5a4>)
 80034fa:	6803      	ldr	r3, [r0, #0]
 80034fc:	62dd      	str	r5, [r3, #44]	; 0x2c
 80034fe:	60c5      	str	r5, [r0, #12]
					__HAL_TIM_SET_COUNTER(&htim4, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
					HAL_TIM_Base_Start_IT(&htim4);
 8003504:	f003 f9ce 	bl	80068a4 <HAL_TIM_Base_Start_IT>
 8003508:	e68e      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
			switch(Command)
 800350a:	2300      	movs	r3, #0
 800350c:	461d      	mov	r5, r3
 800350e:	e7eb      	b.n	80034e8 <HAL_UART_RxCpltCallback+0x378>
				UART1_TxBuf[0] = 0xD1;
 8003510:	497b      	ldr	r1, [pc, #492]	; (8003700 <HAL_UART_RxCpltCallback+0x590>)
 8003512:	23d1      	movs	r3, #209	; 0xd1
 8003514:	700b      	strb	r3, [r1, #0]
				UART1_TxBuf[1] = Sensors.BME280_Internal.ID;
 8003516:	4b80      	ldr	r3, [pc, #512]	; (8003718 <HAL_UART_RxCpltCallback+0x5a8>)
 8003518:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800351c:	704a      	strb	r2, [r1, #1]
				UART1_TxBuf[2] = Sensors.BME280_External.ID;
 800351e:	785a      	ldrb	r2, [r3, #1]
 8003520:	708a      	strb	r2, [r1, #2]
				UART1_TxBuf[3] = Sensors.MPU650.ID;
 8003522:	f893 2061 	ldrb.w	r2, [r3, #97]	; 0x61
 8003526:	70ca      	strb	r2, [r1, #3]
				UART1_TxBuf[4] = Sensors.SI1145.ID;
 8003528:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800352c:	710b      	strb	r3, [r1, #4]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 5);
 800352e:	2205      	movs	r2, #5
 8003530:	4874      	ldr	r0, [pc, #464]	; (8003704 <HAL_UART_RxCpltCallback+0x594>)
 8003532:	f003 fd2e 	bl	8006f92 <HAL_UART_Transmit_IT>
			break;
 8003536:	e677      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				UART1_TxBuf[0] = 0xD2;
 8003538:	4971      	ldr	r1, [pc, #452]	; (8003700 <HAL_UART_RxCpltCallback+0x590>)
 800353a:	23d2      	movs	r3, #210	; 0xd2
 800353c:	700b      	strb	r3, [r1, #0]
				UART1_TxBuf[1] = Cycle_runtime_min >> 8;
 800353e:	4a77      	ldr	r2, [pc, #476]	; (800371c <HAL_UART_RxCpltCallback+0x5ac>)
 8003540:	8813      	ldrh	r3, [r2, #0]
 8003542:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003546:	704b      	strb	r3, [r1, #1]
				UART1_TxBuf[2] = Cycle_runtime_min & 0x00FF;
 8003548:	8813      	ldrh	r3, [r2, #0]
 800354a:	708b      	strb	r3, [r1, #2]
				UART1_TxBuf[3] = Cycle_runtime_max >> 8;
 800354c:	4a74      	ldr	r2, [pc, #464]	; (8003720 <HAL_UART_RxCpltCallback+0x5b0>)
 800354e:	8813      	ldrh	r3, [r2, #0]
 8003550:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003554:	70cb      	strb	r3, [r1, #3]
				UART1_TxBuf[4] = Cycle_runtime_max & 0x00FF;
 8003556:	8813      	ldrh	r3, [r2, #0]
 8003558:	710b      	strb	r3, [r1, #4]
				UART1_TxBuf[5] = Cycle_runtime_last >> 8;
 800355a:	4a72      	ldr	r2, [pc, #456]	; (8003724 <HAL_UART_RxCpltCallback+0x5b4>)
 800355c:	8813      	ldrh	r3, [r2, #0]
 800355e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003562:	714b      	strb	r3, [r1, #5]
				UART1_TxBuf[6] = Cycle_runtime_last & 0x00FF;
 8003564:	8813      	ldrh	r3, [r2, #0]
 8003566:	718b      	strb	r3, [r1, #6]
				HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 7);
 8003568:	2207      	movs	r2, #7
 800356a:	4866      	ldr	r0, [pc, #408]	; (8003704 <HAL_UART_RxCpltCallback+0x594>)
 800356c:	f003 fd11 	bl	8006f92 <HAL_UART_Transmit_IT>
			break;
 8003570:	e65a      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				Sensors.BME280_Internal.Pressure_ref = 90 + (((double)temp)/1000);
 8003572:	4b67      	ldr	r3, [pc, #412]	; (8003710 <HAL_UART_RxCpltCallback+0x5a0>)
 8003574:	7818      	ldrb	r0, [r3, #0]
 8003576:	f7fc ffcd 	bl	8000514 <__aeabi_ui2d>
 800357a:	2200      	movs	r2, #0
 800357c:	4b6a      	ldr	r3, [pc, #424]	; (8003728 <HAL_UART_RxCpltCallback+0x5b8>)
 800357e:	f7fd f96d 	bl	800085c <__aeabi_ddiv>
 8003582:	2200      	movs	r2, #0
 8003584:	4b69      	ldr	r3, [pc, #420]	; (800372c <HAL_UART_RxCpltCallback+0x5bc>)
 8003586:	f7fc fe89 	bl	800029c <__adddf3>
 800358a:	4b63      	ldr	r3, [pc, #396]	; (8003718 <HAL_UART_RxCpltCallback+0x5a8>)
 800358c:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
				Sensors.BME280_External.Pressure_ref = 90 + (((double)temp)/1000);
 8003590:	e9c3 0106 	strd	r0, r1, [r3, #24]
			break;
 8003594:	e648      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				CAM_START(&CAM_1);
 8003596:	4866      	ldr	r0, [pc, #408]	; (8003730 <HAL_UART_RxCpltCallback+0x5c0>)
 8003598:	f7ff f9d0 	bl	800293c <CAM_START>
				CAM_START(&CAM_2);
 800359c:	4865      	ldr	r0, [pc, #404]	; (8003734 <HAL_UART_RxCpltCallback+0x5c4>)
 800359e:	f7ff f9cd 	bl	800293c <CAM_START>
			break;
 80035a2:	e641      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
				CAM_STOP(&CAM_1);
 80035a4:	4862      	ldr	r0, [pc, #392]	; (8003730 <HAL_UART_RxCpltCallback+0x5c0>)
 80035a6:	f7ff f9f0 	bl	800298a <CAM_STOP>
				CAM_STOP(&CAM_2);
 80035aa:	4862      	ldr	r0, [pc, #392]	; (8003734 <HAL_UART_RxCpltCallback+0x5c4>)
 80035ac:	f7ff f9ed 	bl	800298a <CAM_STOP>
			break;
 80035b0:	e63a      	b.n	8003228 <HAL_UART_RxCpltCallback+0xb8>
		buffer_len = strlen((char *)UART2_RxBuf);
 80035b2:	4c61      	ldr	r4, [pc, #388]	; (8003738 <HAL_UART_RxCpltCallback+0x5c8>)
 80035b4:	4620      	mov	r0, r4
 80035b6:	f7fc fe13 	bl	80001e0 <strlen>
		marker = UART2_RxBuf[buffer_len-2];
 80035ba:	1e82      	subs	r2, r0, #2
 80035bc:	5ca5      	ldrb	r5, [r4, r2]
		checksum1 = UART2_RxBuf[buffer_len-1];
 80035be:	3801      	subs	r0, #1
 80035c0:	5c26      	ldrb	r6, [r4, r0]
		UART2_RxBuf[buffer_len-2] = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	54a3      	strb	r3, [r4, r2]
		UART2_RxBuf[buffer_len-1] = 0;
 80035c6:	5423      	strb	r3, [r4, r0]
		checksum2 = get_check_sum((char *)UART2_RxBuf);
 80035c8:	4620      	mov	r0, r4
 80035ca:	f7fe feed 	bl	80023a8 <get_check_sum>
		if((marker == '*') && (checksum1 == checksum2))
 80035ce:	2d2a      	cmp	r5, #42	; 0x2a
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_RxCpltCallback+0x466>
 80035d2:	4286      	cmp	r6, r0
 80035d4:	d00e      	beq.n	80035f4 <HAL_UART_RxCpltCallback+0x484>
			UART2_RxBytes = 4;
 80035d6:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_UART_RxCpltCallback+0x5cc>)
 80035d8:	2204      	movs	r2, #4
 80035da:	701a      	strb	r2, [r3, #0]
			memset(UART2_RxBuf, 0, UART_Buffer_size);
 80035dc:	223c      	movs	r2, #60	; 0x3c
 80035de:	2100      	movs	r1, #0
 80035e0:	4855      	ldr	r0, [pc, #340]	; (8003738 <HAL_UART_RxCpltCallback+0x5c8>)
 80035e2:	f005 fbbf 	bl	8008d64 <memset>
		HAL_UART_Receive_IT(&huart2, UART2_RxBuf, UART2_RxBytes);
 80035e6:	4b55      	ldr	r3, [pc, #340]	; (800373c <HAL_UART_RxCpltCallback+0x5cc>)
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	4953      	ldr	r1, [pc, #332]	; (8003738 <HAL_UART_RxCpltCallback+0x5c8>)
 80035ec:	4854      	ldr	r0, [pc, #336]	; (8003740 <HAL_UART_RxCpltCallback+0x5d0>)
 80035ee:	f003 fed8 	bl	80073a2 <HAL_UART_Receive_IT>
}
 80035f2:	e5c7      	b.n	8003184 <HAL_UART_RxCpltCallback+0x14>
			UART2_Reset_Countdown = 0;
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <HAL_UART_RxCpltCallback+0x5d4>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
			if (UART2_RxIsData == 1)
 80035fa:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_UART_RxCpltCallback+0x5d8>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d044      	beq.n	800368e <HAL_UART_RxCpltCallback+0x51e>
				volatile uint8_t Command = UART2_RxBuf[0];
 8003604:	4b4c      	ldr	r3, [pc, #304]	; (8003738 <HAL_UART_RxCpltCallback+0x5c8>)
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	f88d 2006 	strb.w	r2, [sp, #6]
				volatile uint8_t Parameter = UART2_RxBuf[1];
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	f88d 3007 	strb.w	r3, [sp, #7]
				if(Command != 0x02)
 8003612:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d13a      	bne.n	8003692 <HAL_UART_RxCpltCallback+0x522>
				memset(UART2_TxBuf, 0, UART_Buffer_size);
 800361c:	223c      	movs	r2, #60	; 0x3c
 800361e:	2100      	movs	r1, #0
 8003620:	484a      	ldr	r0, [pc, #296]	; (800374c <HAL_UART_RxCpltCallback+0x5dc>)
 8003622:	f005 fb9f 	bl	8008d64 <memset>
				switch(Command)
 8003626:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b03      	cmp	r3, #3
 800362e:	d839      	bhi.n	80036a4 <HAL_UART_RxCpltCallback+0x534>
 8003630:	2b03      	cmp	r3, #3
 8003632:	d814      	bhi.n	800365e <HAL_UART_RxCpltCallback+0x4ee>
 8003634:	e8df f003 	tbb	[pc, r3]
 8003638:	9b92564b 	.word	0x9b92564b
					UART2_DataBuf[i] = UART2_RxBuf[i];
 800363c:	4a3e      	ldr	r2, [pc, #248]	; (8003738 <HAL_UART_RxCpltCallback+0x5c8>)
 800363e:	5cd1      	ldrb	r1, [r2, r3]
 8003640:	4a43      	ldr	r2, [pc, #268]	; (8003750 <HAL_UART_RxCpltCallback+0x5e0>)
 8003642:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < UART2_RxBytes; i++)
 8003644:	3301      	adds	r3, #1
 8003646:	b2db      	uxtb	r3, r3
 8003648:	4a3c      	ldr	r2, [pc, #240]	; (800373c <HAL_UART_RxCpltCallback+0x5cc>)
 800364a:	7812      	ldrb	r2, [r2, #0]
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	429a      	cmp	r2, r3
 8003650:	d8f4      	bhi.n	800363c <HAL_UART_RxCpltCallback+0x4cc>
				UART2_RxIsData = 0;
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_UART_RxCpltCallback+0x5d8>)
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
				UART2_RxBytes = 4;
 8003658:	4b38      	ldr	r3, [pc, #224]	; (800373c <HAL_UART_RxCpltCallback+0x5cc>)
 800365a:	2204      	movs	r2, #4
 800365c:	701a      	strb	r2, [r3, #0]
			buffer_len = strlen((char *)UART2_TxBuf);
 800365e:	483b      	ldr	r0, [pc, #236]	; (800374c <HAL_UART_RxCpltCallback+0x5dc>)
 8003660:	f7fc fdbe 	bl	80001e0 <strlen>
 8003664:	4604      	mov	r4, r0
			if(buffer_len > 0)
 8003666:	f010 0fff 	tst.w	r0, #255	; 0xff
 800366a:	d0bc      	beq.n	80035e6 <HAL_UART_RxCpltCallback+0x476>
				checksum1 = get_check_sum((char *)UART2_TxBuf);
 800366c:	4d37      	ldr	r5, [pc, #220]	; (800374c <HAL_UART_RxCpltCallback+0x5dc>)
 800366e:	4628      	mov	r0, r5
 8003670:	f7fe fe9a 	bl	80023a8 <get_check_sum>
				UART2_TxBuf[buffer_len] = '*';
 8003674:	232a      	movs	r3, #42	; 0x2a
 8003676:	552b      	strb	r3, [r5, r4]
				UART2_TxBuf[buffer_len+1] = checksum1;
 8003678:	3401      	adds	r4, #1
 800367a:	5528      	strb	r0, [r5, r4]
				HAL_UART_Transmit_IT(&huart2, UART2_TxBuf, strlen((char *)UART2_TxBuf));
 800367c:	4628      	mov	r0, r5
 800367e:	f7fc fdaf 	bl	80001e0 <strlen>
 8003682:	b282      	uxth	r2, r0
 8003684:	4629      	mov	r1, r5
 8003686:	482e      	ldr	r0, [pc, #184]	; (8003740 <HAL_UART_RxCpltCallback+0x5d0>)
 8003688:	f003 fc83 	bl	8006f92 <HAL_UART_Transmit_IT>
 800368c:	e7ab      	b.n	80035e6 <HAL_UART_RxCpltCallback+0x476>
				for (uint8_t i = 0; i < UART2_RxBytes; i++)
 800368e:	2300      	movs	r3, #0
 8003690:	e7da      	b.n	8003648 <HAL_UART_RxCpltCallback+0x4d8>
					UART2_RxBytes = 4;
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_UART_RxCpltCallback+0x5cc>)
 8003694:	2204      	movs	r2, #4
 8003696:	701a      	strb	r2, [r3, #0]
					memset(UART2_RxBuf, 0, UART_Buffer_size);
 8003698:	223c      	movs	r2, #60	; 0x3c
 800369a:	2100      	movs	r1, #0
 800369c:	4826      	ldr	r0, [pc, #152]	; (8003738 <HAL_UART_RxCpltCallback+0x5c8>)
 800369e:	f005 fb61 	bl	8008d64 <memset>
 80036a2:	e7bb      	b.n	800361c <HAL_UART_RxCpltCallback+0x4ac>
				switch(Command)
 80036a4:	2b42      	cmp	r3, #66	; 0x42
 80036a6:	d075      	beq.n	8003794 <HAL_UART_RxCpltCallback+0x624>
 80036a8:	2b4f      	cmp	r3, #79	; 0x4f
 80036aa:	d1d8      	bne.n	800365e <HAL_UART_RxCpltCallback+0x4ee>
					if((Parameter == 0xCC) && (Rope_cut_status != ROPE_CUTTING))
 80036ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2bcc      	cmp	r3, #204	; 0xcc
 80036b4:	d1d3      	bne.n	800365e <HAL_UART_RxCpltCallback+0x4ee>
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_UART_RxCpltCallback+0x5e4>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d0ce      	beq.n	800365e <HAL_UART_RxCpltCallback+0x4ee>
						Rope_cut_status = ROPE_CUTTING;
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_UART_RxCpltCallback+0x5e4>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
						Rope_cut_delay = ROPE_CUT_TIME;
 80036c6:	4b24      	ldr	r3, [pc, #144]	; (8003758 <HAL_UART_RxCpltCallback+0x5e8>)
 80036c8:	220a      	movs	r2, #10
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e7c7      	b.n	800365e <HAL_UART_RxCpltCallback+0x4ee>
					UART1_TxBuf[0] = 0x00;
 80036ce:	490c      	ldr	r1, [pc, #48]	; (8003700 <HAL_UART_RxCpltCallback+0x590>)
 80036d0:	2300      	movs	r3, #0
 80036d2:	700b      	strb	r3, [r1, #0]
					UART1_TxBuf[1] = Parameter;
 80036d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036d8:	704b      	strb	r3, [r1, #1]
					HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 80036da:	2202      	movs	r2, #2
 80036dc:	4809      	ldr	r0, [pc, #36]	; (8003704 <HAL_UART_RxCpltCallback+0x594>)
 80036de:	f003 fc58 	bl	8006f92 <HAL_UART_Transmit_IT>
				break;
 80036e2:	e7bc      	b.n	800365e <HAL_UART_RxCpltCallback+0x4ee>
					UART2_TxBuf[0] = 0x00;
 80036e4:	4c19      	ldr	r4, [pc, #100]	; (800374c <HAL_UART_RxCpltCallback+0x5dc>)
 80036e6:	2300      	movs	r3, #0
 80036e8:	7023      	strb	r3, [r4, #0]
					UART2_TxBuf[1] = Get_System_Status();
 80036ea:	f7fe fe6d 	bl	80023c8 <Get_System_Status>
 80036ee:	7060      	strb	r0, [r4, #1]
				break;
 80036f0:	e7b5      	b.n	800365e <HAL_UART_RxCpltCallback+0x4ee>
 80036f2:	bf00      	nop
 80036f4:	200008ec 	.word	0x200008ec
 80036f8:	2000083c 	.word	0x2000083c
 80036fc:	200007f4 	.word	0x200007f4
 8003700:	20000a40 	.word	0x20000a40
 8003704:	200007f8 	.word	0x200007f8
 8003708:	20000bb0 	.word	0x20000bb0
 800370c:	0800cbac 	.word	0x0800cbac
 8003710:	20000674 	.word	0x20000674
 8003714:	20000308 	.word	0x20000308
 8003718:	20000938 	.word	0x20000938
 800371c:	200006ba 	.word	0x200006ba
 8003720:	20000758 	.word	0x20000758
 8003724:	20000e70 	.word	0x20000e70
 8003728:	408f4000 	.word	0x408f4000
 800372c:	40568000 	.word	0x40568000
 8003730:	200008f0 	.word	0x200008f0
 8003734:	20000798 	.word	0x20000798
 8003738:	20000a7c 	.word	0x20000a7c
 800373c:	2000074c 	.word	0x2000074c
 8003740:	20000b64 	.word	0x20000b64
 8003744:	20000930 	.word	0x20000930
 8003748:	200006b0 	.word	0x200006b0
 800374c:	20000e34 	.word	0x20000e34
 8003750:	2000075c 	.word	0x2000075c
 8003754:	20000a38 	.word	0x20000a38
 8003758:	20000305 	.word	0x20000305
					UART2_RxIsData = 1;
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_UART_RxCpltCallback+0x67c>)
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
					UART2_RxBytes = Parameter;
 8003762:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <HAL_UART_RxCpltCallback+0x680>)
 800376a:	7013      	strb	r3, [r2, #0]
				break;
 800376c:	e777      	b.n	800365e <HAL_UART_RxCpltCallback+0x4ee>
					if(Parameter == 0x99)
 800376e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b99      	cmp	r3, #153	; 0x99
 8003776:	f47f af72 	bne.w	800365e <HAL_UART_RxCpltCallback+0x4ee>
						buffer_len = strlen(Data_to_send) - 1;
 800377a:	481e      	ldr	r0, [pc, #120]	; (80037f4 <HAL_UART_RxCpltCallback+0x684>)
 800377c:	f7fc fd30 	bl	80001e0 <strlen>
 8003780:	b2c3      	uxtb	r3, r0
						UART2_TxBuf[0] = 0x02;
 8003782:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_UART_RxCpltCallback+0x688>)
 8003784:	2102      	movs	r1, #2
 8003786:	7011      	strb	r1, [r2, #0]
						UART2_TxBuf[1] = buffer_len+2;
 8003788:	3301      	adds	r3, #1
 800378a:	7053      	strb	r3, [r2, #1]
						UART2_Send_Sensor_Data = 1;
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_UART_RxCpltCallback+0x68c>)
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
 8003792:	e764      	b.n	800365e <HAL_UART_RxCpltCallback+0x4ee>
					if(Parameter == 0x88)
 8003794:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b88      	cmp	r3, #136	; 0x88
 800379c:	f47f af5f 	bne.w	800365e <HAL_UART_RxCpltCallback+0x4ee>
						sTime.Seconds = UART2_DataBuf[0];
 80037a0:	4b17      	ldr	r3, [pc, #92]	; (8003800 <HAL_UART_RxCpltCallback+0x690>)
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	f88d 200e 	strb.w	r2, [sp, #14]
						sTime.Minutes = UART2_DataBuf[1];
 80037a8:	785a      	ldrb	r2, [r3, #1]
 80037aa:	f88d 200d 	strb.w	r2, [sp, #13]
						sTime.Hours = UART2_DataBuf[2];
 80037ae:	789a      	ldrb	r2, [r3, #2]
 80037b0:	f88d 200c 	strb.w	r2, [sp, #12]
						sDate.Date = UART2_DataBuf[3];
 80037b4:	78da      	ldrb	r2, [r3, #3]
 80037b6:	f88d 200a 	strb.w	r2, [sp, #10]
						sDate.Month = UART2_DataBuf[4];
 80037ba:	791a      	ldrb	r2, [r3, #4]
 80037bc:	f88d 2009 	strb.w	r2, [sp, #9]
						sDate.Year = UART2_DataBuf[5];
 80037c0:	795b      	ldrb	r3, [r3, #5]
 80037c2:	f88d 300b 	strb.w	r3, [sp, #11]
						HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80037c6:	4c0f      	ldr	r4, [pc, #60]	; (8003804 <HAL_UART_RxCpltCallback+0x694>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	a903      	add	r1, sp, #12
 80037cc:	4620      	mov	r0, r4
 80037ce:	f002 fbbb 	bl	8005f48 <HAL_RTC_SetTime>
						HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80037d2:	2201      	movs	r2, #1
 80037d4:	a902      	add	r1, sp, #8
 80037d6:	4620      	mov	r0, r4
 80037d8:	f002 fc35 	bl	8006046 <HAL_RTC_SetDate>
						UART2_TxBuf[0] = 0x42;
 80037dc:	4c06      	ldr	r4, [pc, #24]	; (80037f8 <HAL_UART_RxCpltCallback+0x688>)
 80037de:	2342      	movs	r3, #66	; 0x42
 80037e0:	7023      	strb	r3, [r4, #0]
						UART2_TxBuf[1] = Get_System_Status();
 80037e2:	f7fe fdf1 	bl	80023c8 <Get_System_Status>
 80037e6:	7060      	strb	r0, [r4, #1]
 80037e8:	e739      	b.n	800365e <HAL_UART_RxCpltCallback+0x4ee>
 80037ea:	bf00      	nop
 80037ec:	200006b0 	.word	0x200006b0
 80037f0:	2000074c 	.word	0x2000074c
 80037f4:	20000de0 	.word	0x20000de0
 80037f8:	20000e34 	.word	0x20000e34
 80037fc:	20000304 	.word	0x20000304
 8003800:	2000075c 	.word	0x2000075c
 8003804:	20000910 	.word	0x20000910

08003808 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4604      	mov	r4, r0
	if(huart == &huart1)
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <HAL_UART_ErrorCallback+0x44>)
 800380e:	4298      	cmp	r0, r3
 8003810:	d003      	beq.n	800381a <HAL_UART_ErrorCallback+0x12>
	{
		memset(UART1_RxBuf, 0, UART_Buffer_size);
		HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
	}

	if(huart == &huart2)
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <HAL_UART_ErrorCallback+0x48>)
 8003814:	429c      	cmp	r4, r3
 8003816:	d00c      	beq.n	8003832 <HAL_UART_ErrorCallback+0x2a>
	{
		memset(UART2_RxBuf, 0, UART_Buffer_size);
		HAL_UART_Receive_IT(&huart2, UART2_RxBuf, 4);
	}
}
 8003818:	bd38      	pop	{r3, r4, r5, pc}
		memset(UART1_RxBuf, 0, UART_Buffer_size);
 800381a:	4d0e      	ldr	r5, [pc, #56]	; (8003854 <HAL_UART_ErrorCallback+0x4c>)
 800381c:	223c      	movs	r2, #60	; 0x3c
 800381e:	2100      	movs	r1, #0
 8003820:	4628      	mov	r0, r5
 8003822:	f005 fa9f 	bl	8008d64 <memset>
		HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 8003826:	2202      	movs	r2, #2
 8003828:	4629      	mov	r1, r5
 800382a:	4808      	ldr	r0, [pc, #32]	; (800384c <HAL_UART_ErrorCallback+0x44>)
 800382c:	f003 fdb9 	bl	80073a2 <HAL_UART_Receive_IT>
 8003830:	e7ef      	b.n	8003812 <HAL_UART_ErrorCallback+0xa>
		memset(UART2_RxBuf, 0, UART_Buffer_size);
 8003832:	4c09      	ldr	r4, [pc, #36]	; (8003858 <HAL_UART_ErrorCallback+0x50>)
 8003834:	223c      	movs	r2, #60	; 0x3c
 8003836:	2100      	movs	r1, #0
 8003838:	4620      	mov	r0, r4
 800383a:	f005 fa93 	bl	8008d64 <memset>
		HAL_UART_Receive_IT(&huart2, UART2_RxBuf, 4);
 800383e:	2204      	movs	r2, #4
 8003840:	4621      	mov	r1, r4
 8003842:	4803      	ldr	r0, [pc, #12]	; (8003850 <HAL_UART_ErrorCallback+0x48>)
 8003844:	f003 fdad 	bl	80073a2 <HAL_UART_Receive_IT>
}
 8003848:	e7e6      	b.n	8003818 <HAL_UART_ErrorCallback+0x10>
 800384a:	bf00      	nop
 800384c:	200007f8 	.word	0x200007f8
 8003850:	20000b64 	.word	0x20000b64
 8003854:	200007b8 	.word	0x200007b8
 8003858:	20000a7c 	.word	0x20000a7c

0800385c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800385c:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800385e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
	UART1_TxBuf[0] = 0xEE;
 8003860:	4c05      	ldr	r4, [pc, #20]	; (8003878 <Error_Handler+0x1c>)
 8003862:	23ee      	movs	r3, #238	; 0xee
 8003864:	7023      	strb	r3, [r4, #0]
	UART1_TxBuf[1] = Get_System_Status();
 8003866:	f7fe fdaf 	bl	80023c8 <Get_System_Status>
 800386a:	7060      	strb	r0, [r4, #1]
	HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 800386c:	2202      	movs	r2, #2
 800386e:	4621      	mov	r1, r4
 8003870:	4802      	ldr	r0, [pc, #8]	; (800387c <Error_Handler+0x20>)
 8003872:	f003 fb8e 	bl	8006f92 <HAL_UART_Transmit_IT>
  while (1)
 8003876:	e7fe      	b.n	8003876 <Error_Handler+0x1a>
 8003878:	20000a40 	.word	0x20000a40
 800387c:	200007f8 	.word	0x200007f8

08003880 <MX_USART2_UART_Init>:
{
 8003880:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8003882:	480a      	ldr	r0, [pc, #40]	; (80038ac <MX_USART2_UART_Init+0x2c>)
 8003884:	4b0a      	ldr	r3, [pc, #40]	; (80038b0 <MX_USART2_UART_Init+0x30>)
 8003886:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003888:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800388c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800388e:	2300      	movs	r3, #0
 8003890:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003892:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003894:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003896:	220c      	movs	r2, #12
 8003898:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800389a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800389c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800389e:	f003 fb49 	bl	8006f34 <HAL_UART_Init>
 80038a2:	b900      	cbnz	r0, 80038a6 <MX_USART2_UART_Init+0x26>
}
 80038a4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80038a6:	f7ff ffd9 	bl	800385c <Error_Handler>
 80038aa:	bf00      	nop
 80038ac:	20000b64 	.word	0x20000b64
 80038b0:	40004400 	.word	0x40004400

080038b4 <MX_TIM4_Init>:
{
 80038b4:	b500      	push	{lr}
 80038b6:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b8:	2300      	movs	r3, #0
 80038ba:	9308      	str	r3, [sp, #32]
 80038bc:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	9302      	str	r3, [sp, #8]
 80038c2:	9303      	str	r3, [sp, #12]
 80038c4:	9304      	str	r3, [sp, #16]
 80038c6:	9305      	str	r3, [sp, #20]
 80038c8:	9306      	str	r3, [sp, #24]
 80038ca:	9307      	str	r3, [sp, #28]
  htim4.Instance = TIM4;
 80038cc:	4814      	ldr	r0, [pc, #80]	; (8003920 <MX_TIM4_Init+0x6c>)
 80038ce:	4a15      	ldr	r2, [pc, #84]	; (8003924 <MX_TIM4_Init+0x70>)
 80038d0:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 16000;
 80038d2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80038d6:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d8:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 500;
 80038da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038de:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038e0:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80038e4:	f003 f96e 	bl	8006bc4 <HAL_TIM_OC_Init>
 80038e8:	b9a0      	cbnz	r0, 8003914 <MX_TIM4_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ee:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80038f0:	a908      	add	r1, sp, #32
 80038f2:	480b      	ldr	r0, [pc, #44]	; (8003920 <MX_TIM4_Init+0x6c>)
 80038f4:	f003 f9f4 	bl	8006ce0 <HAL_TIMEx_MasterConfigSynchronization>
 80038f8:	b970      	cbnz	r0, 8003918 <MX_TIM4_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80038fa:	2200      	movs	r2, #0
 80038fc:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 80038fe:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003900:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003902:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003904:	a901      	add	r1, sp, #4
 8003906:	4806      	ldr	r0, [pc, #24]	; (8003920 <MX_TIM4_Init+0x6c>)
 8003908:	f003 f9ba 	bl	8006c80 <HAL_TIM_OC_ConfigChannel>
 800390c:	b930      	cbnz	r0, 800391c <MX_TIM4_Init+0x68>
}
 800390e:	b00b      	add	sp, #44	; 0x2c
 8003910:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003914:	f7ff ffa2 	bl	800385c <Error_Handler>
    Error_Handler();
 8003918:	f7ff ffa0 	bl	800385c <Error_Handler>
    Error_Handler();
 800391c:	f7ff ff9e 	bl	800385c <Error_Handler>
 8003920:	20000308 	.word	0x20000308
 8003924:	40000800 	.word	0x40000800

08003928 <MX_USART1_UART_Init>:
{
 8003928:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800392a:	480a      	ldr	r0, [pc, #40]	; (8003954 <MX_USART1_UART_Init+0x2c>)
 800392c:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <MX_USART1_UART_Init+0x30>)
 800392e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8003930:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003934:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003936:	2300      	movs	r3, #0
 8003938:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800393a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800393c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800393e:	220c      	movs	r2, #12
 8003940:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003942:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003944:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003946:	f003 faf5 	bl	8006f34 <HAL_UART_Init>
 800394a:	b900      	cbnz	r0, 800394e <MX_USART1_UART_Init+0x26>
}
 800394c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800394e:	f7ff ff85 	bl	800385c <Error_Handler>
 8003952:	bf00      	nop
 8003954:	200007f8 	.word	0x200007f8
 8003958:	40011000 	.word	0x40011000

0800395c <MX_SPI1_Init>:
{
 800395c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800395e:	480d      	ldr	r0, [pc, #52]	; (8003994 <MX_SPI1_Init+0x38>)
 8003960:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <MX_SPI1_Init+0x3c>)
 8003962:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003964:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003968:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800396a:	2300      	movs	r3, #0
 800396c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800396e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003970:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003972:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003978:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800397a:	2230      	movs	r2, #48	; 0x30
 800397c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800397e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003980:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003982:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003984:	230a      	movs	r3, #10
 8003986:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003988:	f002 fcb6 	bl	80062f8 <HAL_SPI_Init>
 800398c:	b900      	cbnz	r0, 8003990 <MX_SPI1_Init+0x34>
}
 800398e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003990:	f7ff ff64 	bl	800385c <Error_Handler>
 8003994:	20000b0c 	.word	0x20000b0c
 8003998:	40013000 	.word	0x40013000

0800399c <MX_RTC_Init>:
{
 800399c:	b508      	push	{r3, lr}
  hrtc.Instance = RTC;
 800399e:	4809      	ldr	r0, [pc, #36]	; (80039c4 <MX_RTC_Init+0x28>)
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <MX_RTC_Init+0x2c>)
 80039a2:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80039a4:	2300      	movs	r3, #0
 80039a6:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80039a8:	227f      	movs	r2, #127	; 0x7f
 80039aa:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80039ac:	22ff      	movs	r2, #255	; 0xff
 80039ae:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80039b0:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80039b2:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80039b4:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80039b6:	f002 fa5a 	bl	8005e6e <HAL_RTC_Init>
 80039ba:	b900      	cbnz	r0, 80039be <MX_RTC_Init+0x22>
}
 80039bc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80039be:	f7ff ff4d 	bl	800385c <Error_Handler>
 80039c2:	bf00      	nop
 80039c4:	20000910 	.word	0x20000910
 80039c8:	40002800 	.word	0x40002800

080039cc <MX_TIM3_Init>:
{
 80039cc:	b500      	push	{lr}
 80039ce:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039d0:	2300      	movs	r3, #0
 80039d2:	9308      	str	r3, [sp, #32]
 80039d4:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039d6:	9301      	str	r3, [sp, #4]
 80039d8:	9302      	str	r3, [sp, #8]
 80039da:	9303      	str	r3, [sp, #12]
 80039dc:	9304      	str	r3, [sp, #16]
 80039de:	9305      	str	r3, [sp, #20]
 80039e0:	9306      	str	r3, [sp, #24]
 80039e2:	9307      	str	r3, [sp, #28]
  htim3.Instance = TIM3;
 80039e4:	4814      	ldr	r0, [pc, #80]	; (8003a38 <MX_TIM3_Init+0x6c>)
 80039e6:	4a15      	ldr	r2, [pc, #84]	; (8003a3c <MX_TIM3_Init+0x70>)
 80039e8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 16000;
 80039ea:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80039ee:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 80039f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039f6:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039f8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039fa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80039fc:	f003 f8e2 	bl	8006bc4 <HAL_TIM_OC_Init>
 8003a00:	b9a0      	cbnz	r0, 8003a2c <MX_TIM3_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a06:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a08:	a908      	add	r1, sp, #32
 8003a0a:	480b      	ldr	r0, [pc, #44]	; (8003a38 <MX_TIM3_Init+0x6c>)
 8003a0c:	f003 f968 	bl	8006ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a10:	b970      	cbnz	r0, 8003a30 <MX_TIM3_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003a12:	2200      	movs	r2, #0
 8003a14:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003a16:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a18:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a1a:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1c:	a901      	add	r1, sp, #4
 8003a1e:	4806      	ldr	r0, [pc, #24]	; (8003a38 <MX_TIM3_Init+0x6c>)
 8003a20:	f003 f92e 	bl	8006c80 <HAL_TIM_OC_ConfigChannel>
 8003a24:	b930      	cbnz	r0, 8003a34 <MX_TIM3_Init+0x68>
}
 8003a26:	b00b      	add	sp, #44	; 0x2c
 8003a28:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003a2c:	f7ff ff16 	bl	800385c <Error_Handler>
    Error_Handler();
 8003a30:	f7ff ff14 	bl	800385c <Error_Handler>
    Error_Handler();
 8003a34:	f7ff ff12 	bl	800385c <Error_Handler>
 8003a38:	20000704 	.word	0x20000704
 8003a3c:	40000400 	.word	0x40000400

08003a40 <MX_I2C1_Init>:
{
 8003a40:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8003a42:	480a      	ldr	r0, [pc, #40]	; (8003a6c <MX_I2C1_Init+0x2c>)
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <MX_I2C1_Init+0x30>)
 8003a46:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <MX_I2C1_Init+0x34>)
 8003a4a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a50:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a56:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a58:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a5a:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a5c:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a5e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a60:	f001 faf4 	bl	800504c <HAL_I2C_Init>
 8003a64:	b900      	cbnz	r0, 8003a68 <MX_I2C1_Init+0x28>
}
 8003a66:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003a68:	f7ff fef8 	bl	800385c <Error_Handler>
 8003a6c:	20000584 	.word	0x20000584
 8003a70:	40005400 	.word	0x40005400
 8003a74:	000186a0 	.word	0x000186a0

08003a78 <MX_I2C2_Init>:
{
 8003a78:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8003a7a:	480a      	ldr	r0, [pc, #40]	; (8003aa4 <MX_I2C2_Init+0x2c>)
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <MX_I2C2_Init+0x30>)
 8003a7e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003a80:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <MX_I2C2_Init+0x34>)
 8003a82:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a84:	2300      	movs	r3, #0
 8003a86:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003a88:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a8e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a90:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003a92:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a94:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a96:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a98:	f001 fad8 	bl	800504c <HAL_I2C_Init>
 8003a9c:	b900      	cbnz	r0, 8003aa0 <MX_I2C2_Init+0x28>
}
 8003a9e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003aa0:	f7ff fedc 	bl	800385c <Error_Handler>
 8003aa4:	20000620 	.word	0x20000620
 8003aa8:	40005800 	.word	0x40005800
 8003aac:	000186a0 	.word	0x000186a0

08003ab0 <MX_TIM5_Init>:
{
 8003ab0:	b500      	push	{lr}
 8003ab2:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	9308      	str	r3, [sp, #32]
 8003ab8:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	9302      	str	r3, [sp, #8]
 8003abe:	9303      	str	r3, [sp, #12]
 8003ac0:	9304      	str	r3, [sp, #16]
 8003ac2:	9305      	str	r3, [sp, #20]
 8003ac4:	9306      	str	r3, [sp, #24]
 8003ac6:	9307      	str	r3, [sp, #28]
  htim5.Instance = TIM5;
 8003ac8:	4814      	ldr	r0, [pc, #80]	; (8003b1c <MX_TIM5_Init+0x6c>)
 8003aca:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <MX_TIM5_Init+0x70>)
 8003acc:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 16000;
 8003ace:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003ad2:	6042      	str	r2, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad4:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 5000;
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	60c2      	str	r2, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003adc:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ade:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8003ae0:	f003 f870 	bl	8006bc4 <HAL_TIM_OC_Init>
 8003ae4:	b9a0      	cbnz	r0, 8003b10 <MX_TIM5_Init+0x60>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aea:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003aec:	a908      	add	r1, sp, #32
 8003aee:	480b      	ldr	r0, [pc, #44]	; (8003b1c <MX_TIM5_Init+0x6c>)
 8003af0:	f003 f8f6 	bl	8006ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8003af4:	b970      	cbnz	r0, 8003b14 <MX_TIM5_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003af6:	2200      	movs	r2, #0
 8003af8:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003afa:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003afc:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003afe:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b00:	a901      	add	r1, sp, #4
 8003b02:	4806      	ldr	r0, [pc, #24]	; (8003b1c <MX_TIM5_Init+0x6c>)
 8003b04:	f003 f8bc 	bl	8006c80 <HAL_TIM_OC_ConfigChannel>
 8003b08:	b930      	cbnz	r0, 8003b18 <MX_TIM5_Init+0x68>
}
 8003b0a:	b00b      	add	sp, #44	; 0x2c
 8003b0c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003b10:	f7ff fea4 	bl	800385c <Error_Handler>
    Error_Handler();
 8003b14:	f7ff fea2 	bl	800385c <Error_Handler>
    Error_Handler();
 8003b18:	f7ff fea0 	bl	800385c <Error_Handler>
 8003b1c:	200006bc 	.word	0x200006bc
 8003b20:	40000c00 	.word	0x40000c00

08003b24 <MX_TIM9_Init>:
{
 8003b24:	b500      	push	{lr}
 8003b26:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	9302      	str	r3, [sp, #8]
 8003b2e:	9303      	str	r3, [sp, #12]
 8003b30:	9304      	str	r3, [sp, #16]
 8003b32:	9305      	str	r3, [sp, #20]
 8003b34:	9306      	str	r3, [sp, #24]
 8003b36:	9307      	str	r3, [sp, #28]
  htim9.Instance = TIM9;
 8003b38:	480f      	ldr	r0, [pc, #60]	; (8003b78 <MX_TIM9_Init+0x54>)
 8003b3a:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <MX_TIM9_Init+0x58>)
 8003b3c:	6002      	str	r2, [r0, #0]
  htim9.Init.Prescaler = 16000;
 8003b3e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003b42:	6042      	str	r2, [r0, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b44:	6083      	str	r3, [r0, #8]
  htim9.Init.Period = 5000;
 8003b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4a:	60c2      	str	r2, [r0, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4c:	6103      	str	r3, [r0, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b4e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8003b50:	f003 f838 	bl	8006bc4 <HAL_TIM_OC_Init>
 8003b54:	b960      	cbnz	r0, 8003b70 <MX_TIM9_Init+0x4c>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003b56:	2200      	movs	r2, #0
 8003b58:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003b5a:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b5c:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b5e:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b60:	a901      	add	r1, sp, #4
 8003b62:	4805      	ldr	r0, [pc, #20]	; (8003b78 <MX_TIM9_Init+0x54>)
 8003b64:	f003 f88c 	bl	8006c80 <HAL_TIM_OC_ConfigChannel>
 8003b68:	b920      	cbnz	r0, 8003b74 <MX_TIM9_Init+0x50>
}
 8003b6a:	b009      	add	sp, #36	; 0x24
 8003b6c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003b70:	f7ff fe74 	bl	800385c <Error_Handler>
    Error_Handler();
 8003b74:	f7ff fe72 	bl	800385c <Error_Handler>
 8003b78:	200009f0 	.word	0x200009f0
 8003b7c:	40014000 	.word	0x40014000

08003b80 <MX_TIM10_Init>:
{
 8003b80:	b500      	push	{lr}
 8003b82:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b84:	2300      	movs	r3, #0
 8003b86:	9301      	str	r3, [sp, #4]
 8003b88:	9302      	str	r3, [sp, #8]
 8003b8a:	9303      	str	r3, [sp, #12]
 8003b8c:	9304      	str	r3, [sp, #16]
 8003b8e:	9305      	str	r3, [sp, #20]
 8003b90:	9306      	str	r3, [sp, #24]
 8003b92:	9307      	str	r3, [sp, #28]
  htim10.Instance = TIM10;
 8003b94:	4812      	ldr	r0, [pc, #72]	; (8003be0 <MX_TIM10_Init+0x60>)
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <MX_TIM10_Init+0x64>)
 8003b98:	6002      	str	r2, [r0, #0]
  htim10.Init.Prescaler = 16000;
 8003b9a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003b9e:	6042      	str	r2, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba0:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 1000;
 8003ba2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ba6:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ba8:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003baa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003bac:	f002 ffde 	bl	8006b6c <HAL_TIM_Base_Init>
 8003bb0:	b980      	cbnz	r0, 8003bd4 <MX_TIM10_Init+0x54>
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8003bb2:	480b      	ldr	r0, [pc, #44]	; (8003be0 <MX_TIM10_Init+0x60>)
 8003bb4:	f003 f806 	bl	8006bc4 <HAL_TIM_OC_Init>
 8003bb8:	b970      	cbnz	r0, 8003bd8 <MX_TIM10_Init+0x58>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003bba:	2200      	movs	r2, #0
 8003bbc:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003bbe:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bc0:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bc2:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bc4:	a901      	add	r1, sp, #4
 8003bc6:	4806      	ldr	r0, [pc, #24]	; (8003be0 <MX_TIM10_Init+0x60>)
 8003bc8:	f003 f85a 	bl	8006c80 <HAL_TIM_OC_ConfigChannel>
 8003bcc:	b930      	cbnz	r0, 8003bdc <MX_TIM10_Init+0x5c>
}
 8003bce:	b009      	add	sp, #36	; 0x24
 8003bd0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003bd4:	f7ff fe42 	bl	800385c <Error_Handler>
    Error_Handler();
 8003bd8:	f7ff fe40 	bl	800385c <Error_Handler>
    Error_Handler();
 8003bdc:	f7ff fe3e 	bl	800385c <Error_Handler>
 8003be0:	200005d8 	.word	0x200005d8
 8003be4:	40014400 	.word	0x40014400

08003be8 <MX_TIM11_Init>:
{
 8003be8:	b500      	push	{lr}
 8003bea:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bec:	2300      	movs	r3, #0
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	9302      	str	r3, [sp, #8]
 8003bf2:	9303      	str	r3, [sp, #12]
 8003bf4:	9304      	str	r3, [sp, #16]
 8003bf6:	9305      	str	r3, [sp, #20]
 8003bf8:	9306      	str	r3, [sp, #24]
 8003bfa:	9307      	str	r3, [sp, #28]
  htim11.Instance = TIM11;
 8003bfc:	4812      	ldr	r0, [pc, #72]	; (8003c48 <MX_TIM11_Init+0x60>)
 8003bfe:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <MX_TIM11_Init+0x64>)
 8003c00:	6002      	str	r2, [r0, #0]
  htim11.Init.Prescaler = 16000;
 8003c02:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003c06:	6042      	str	r2, [r0, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c08:	6083      	str	r3, [r0, #8]
  htim11.Init.Period = 10;
 8003c0a:	220a      	movs	r2, #10
 8003c0c:	60c2      	str	r2, [r0, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c0e:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c10:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003c12:	f002 ffab 	bl	8006b6c <HAL_TIM_Base_Init>
 8003c16:	b980      	cbnz	r0, 8003c3a <MX_TIM11_Init+0x52>
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8003c18:	480b      	ldr	r0, [pc, #44]	; (8003c48 <MX_TIM11_Init+0x60>)
 8003c1a:	f002 ffd3 	bl	8006bc4 <HAL_TIM_OC_Init>
 8003c1e:	b970      	cbnz	r0, 8003c3e <MX_TIM11_Init+0x56>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003c20:	2200      	movs	r2, #0
 8003c22:	9201      	str	r2, [sp, #4]
  sConfigOC.Pulse = 0;
 8003c24:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c26:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c28:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c2a:	a901      	add	r1, sp, #4
 8003c2c:	4806      	ldr	r0, [pc, #24]	; (8003c48 <MX_TIM11_Init+0x60>)
 8003c2e:	f003 f827 	bl	8006c80 <HAL_TIM_OC_ConfigChannel>
 8003c32:	b930      	cbnz	r0, 8003c42 <MX_TIM11_Init+0x5a>
}
 8003c34:	b009      	add	sp, #36	; 0x24
 8003c36:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003c3a:	f7ff fe0f 	bl	800385c <Error_Handler>
    Error_Handler();
 8003c3e:	f7ff fe0d 	bl	800385c <Error_Handler>
    Error_Handler();
 8003c42:	f7ff fe0b 	bl	800385c <Error_Handler>
 8003c46:	bf00      	nop
 8003c48:	20000840 	.word	0x20000840
 8003c4c:	40014800 	.word	0x40014800

08003c50 <SystemClock_Config>:
{
 8003c50:	b500      	push	{lr}
 8003c52:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c54:	2230      	movs	r2, #48	; 0x30
 8003c56:	2100      	movs	r1, #0
 8003c58:	a808      	add	r0, sp, #32
 8003c5a:	f005 f883 	bl	8008d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c5e:	2300      	movs	r3, #0
 8003c60:	9303      	str	r3, [sp, #12]
 8003c62:	9304      	str	r3, [sp, #16]
 8003c64:	9305      	str	r3, [sp, #20]
 8003c66:	9306      	str	r3, [sp, #24]
 8003c68:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	4a1b      	ldr	r2, [pc, #108]	; (8003cdc <SystemClock_Config+0x8c>)
 8003c6e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003c70:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003c74:	6411      	str	r1, [r2, #64]	; 0x40
 8003c76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c78:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003c7c:	9201      	str	r2, [sp, #4]
 8003c7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	4917      	ldr	r1, [pc, #92]	; (8003ce0 <SystemClock_Config+0x90>)
 8003c84:	680a      	ldr	r2, [r1, #0]
 8003c86:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003c8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8e:	600a      	str	r2, [r1, #0]
 8003c90:	680a      	ldr	r2, [r1, #0]
 8003c92:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003c96:	9202      	str	r2, [sp, #8]
 8003c98:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003c9a:	220a      	movs	r2, #10
 8003c9c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003ca6:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ca8:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003caa:	a808      	add	r0, sp, #32
 8003cac:	f001 fcd0 	bl	8005650 <HAL_RCC_OscConfig>
 8003cb0:	b978      	cbnz	r0, 8003cd2 <SystemClock_Config+0x82>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cb2:	230f      	movs	r3, #15
 8003cb4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cba:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cc0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cc2:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003cc4:	a803      	add	r0, sp, #12
 8003cc6:	f001 ff0f 	bl	8005ae8 <HAL_RCC_ClockConfig>
 8003cca:	b920      	cbnz	r0, 8003cd6 <SystemClock_Config+0x86>
}
 8003ccc:	b015      	add	sp, #84	; 0x54
 8003cce:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003cd2:	f7ff fdc3 	bl	800385c <Error_Handler>
    Error_Handler();
 8003cd6:	f7ff fdc1 	bl	800385c <Error_Handler>
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40007000 	.word	0x40007000

08003ce4 <main>:
{
 8003ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce6:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8003ce8:	f000 fd64 	bl	80047b4 <HAL_Init>
  SystemClock_Config();
 8003cec:	f7ff ffb0 	bl	8003c50 <SystemClock_Config>
  MX_GPIO_Init();
 8003cf0:	f7fe fad8 	bl	80022a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003cf4:	f7ff fdc4 	bl	8003880 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8003cf8:	f7ff fddc 	bl	80038b4 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003cfc:	f7ff fe14 	bl	8003928 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8003d00:	f7ff fe2c 	bl	800395c <MX_SPI1_Init>
  MX_RTC_Init();
 8003d04:	f7ff fe4a 	bl	800399c <MX_RTC_Init>
  MX_FATFS_Init();
 8003d08:	f003 fb68 	bl	80073dc <MX_FATFS_Init>
  MX_TIM3_Init();
 8003d0c:	f7ff fe5e 	bl	80039cc <MX_TIM3_Init>
  MX_I2C1_Init();
 8003d10:	f7ff fe96 	bl	8003a40 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003d14:	f7ff feb0 	bl	8003a78 <MX_I2C2_Init>
  MX_TIM5_Init();
 8003d18:	f7ff feca 	bl	8003ab0 <MX_TIM5_Init>
  MX_TIM9_Init();
 8003d1c:	f7ff ff02 	bl	8003b24 <MX_TIM9_Init>
  MX_TIM10_Init();
 8003d20:	f7ff ff2e 	bl	8003b80 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003d24:	f7ff ff60 	bl	8003be8 <MX_TIM11_Init>
	Is_asleep = 0;
 8003d28:	2400      	movs	r4, #0
 8003d2a:	4bba      	ldr	r3, [pc, #744]	; (8004014 <main+0x330>)
 8003d2c:	701c      	strb	r4, [r3, #0]
	Rope_cut_status = ROPE_NOT_CUT;
 8003d2e:	4bba      	ldr	r3, [pc, #744]	; (8004018 <main+0x334>)
 8003d30:	701c      	strb	r4, [r3, #0]
	Rope_cut_delay = ROPE_CUT_TIME;
 8003d32:	4bba      	ldr	r3, [pc, #744]	; (800401c <main+0x338>)
 8003d34:	220a      	movs	r2, #10
 8003d36:	701a      	strb	r2, [r3, #0]
	Cycle_runtime_last = 0;
 8003d38:	4bb9      	ldr	r3, [pc, #740]	; (8004020 <main+0x33c>)
 8003d3a:	801c      	strh	r4, [r3, #0]
	Cycle_runtime_min = 0xFFFF;
 8003d3c:	4bb9      	ldr	r3, [pc, #740]	; (8004024 <main+0x340>)
 8003d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d42:	801a      	strh	r2, [r3, #0]
	Cycle_runtime_max = 0;
 8003d44:	4bb8      	ldr	r3, [pc, #736]	; (8004028 <main+0x344>)
 8003d46:	801c      	strh	r4, [r3, #0]
	HAL_RTC_GetTime(&hrtc, &Current_Time, RTC_FORMAT_BIN);
 8003d48:	4db8      	ldr	r5, [pc, #736]	; (800402c <main+0x348>)
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	49b8      	ldr	r1, [pc, #736]	; (8004030 <main+0x34c>)
 8003d4e:	4628      	mov	r0, r5
 8003d50:	f002 f9ef 	bl	8006132 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Current_Date, RTC_FORMAT_BIN);
 8003d54:	4622      	mov	r2, r4
 8003d56:	49b7      	ldr	r1, [pc, #732]	; (8004034 <main+0x350>)
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f002 fa12 	bl	8006182 <HAL_RTC_GetDate>
	HAL_Delay(2000);
 8003d5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d62:	f000 fd53 	bl	800480c <HAL_Delay>
	sd_file_cnt = 0;
 8003d66:	4bb4      	ldr	r3, [pc, #720]	; (8004038 <main+0x354>)
 8003d68:	701c      	strb	r4, [r3, #0]
	sd_error_cnt = 0;
 8003d6a:	4bb4      	ldr	r3, [pc, #720]	; (800403c <main+0x358>)
 8003d6c:	701c      	strb	r4, [r3, #0]
	sd_mounted = 0;
 8003d6e:	4bb4      	ldr	r3, [pc, #720]	; (8004040 <main+0x35c>)
 8003d70:	701c      	strb	r4, [r3, #0]
	sd_status = Mount_open_SD_Card();
 8003d72:	f7fe fd3f 	bl	80027f4 <Mount_open_SD_Card>
 8003d76:	4ab3      	ldr	r2, [pc, #716]	; (8004044 <main+0x360>)
 8003d78:	7010      	strb	r0, [r2, #0]
	while(sd_status == FR_NOT_READY)
 8003d7a:	e003      	b.n	8003d84 <main+0xa0>
		sd_status = Mount_open_SD_Card();
 8003d7c:	f7fe fd3a 	bl	80027f4 <Mount_open_SD_Card>
 8003d80:	4ab0      	ldr	r2, [pc, #704]	; (8004044 <main+0x360>)
 8003d82:	7010      	strb	r0, [r2, #0]
	while(sd_status == FR_NOT_READY)
 8003d84:	4baf      	ldr	r3, [pc, #700]	; (8004044 <main+0x360>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d0f6      	beq.n	8003d7c <main+0x98>
	if(sd_status == FR_OK)
 8003d8e:	4bad      	ldr	r3, [pc, #692]	; (8004044 <main+0x360>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	b95b      	cbnz	r3, 8003dac <main+0xc8>
		sd_mounted = 1;
 8003d94:	4baa      	ldr	r3, [pc, #680]	; (8004040 <main+0x35c>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	701a      	strb	r2, [r3, #0]
	Sensors.BME280_Internal.Pressure_ref = PRESSURE_REFERENCE;
 8003d9a:	4bab      	ldr	r3, [pc, #684]	; (8004048 <main+0x364>)
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	49ab      	ldr	r1, [pc, #684]	; (800404c <main+0x368>)
 8003da0:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
	Sensors.BME280_External.Pressure_ref = PRESSURE_REFERENCE;
 8003da4:	e9c3 0106 	strd	r0, r1, [r3, #24]
	for(uint8_t i = 0; i < ALTITUDE_BUFFER_SIZE; i++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	e013      	b.n	8003dd4 <main+0xf0>
		UART1_TxBuf[0] = 0xD0;
 8003dac:	49a8      	ldr	r1, [pc, #672]	; (8004050 <main+0x36c>)
 8003dae:	23d0      	movs	r3, #208	; 0xd0
 8003db0:	700b      	strb	r3, [r1, #0]
		UART1_TxBuf[1] = sd_status;
 8003db2:	4ba4      	ldr	r3, [pc, #656]	; (8004044 <main+0x360>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	704b      	strb	r3, [r1, #1]
		HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003db8:	2202      	movs	r2, #2
 8003dba:	48a6      	ldr	r0, [pc, #664]	; (8004054 <main+0x370>)
 8003dbc:	f003 f8e9 	bl	8006f92 <HAL_UART_Transmit_IT>
 8003dc0:	e7eb      	b.n	8003d9a <main+0xb6>
		Altitude_last[i] = 0;
 8003dc2:	4aa5      	ldr	r2, [pc, #660]	; (8004058 <main+0x374>)
 8003dc4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003dc8:	2000      	movs	r0, #0
 8003dca:	2100      	movs	r1, #0
 8003dcc:	e9c2 0100 	strd	r0, r1, [r2]
	for(uint8_t i = 0; i < ALTITUDE_BUFFER_SIZE; i++)
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b09      	cmp	r3, #9
 8003dd6:	d9f4      	bls.n	8003dc2 <main+0xde>
	Altitude_max = 0;
 8003dd8:	4ba0      	ldr	r3, [pc, #640]	; (800405c <main+0x378>)
 8003dda:	2000      	movs	r0, #0
 8003ddc:	2100      	movs	r1, #0
 8003dde:	e9c3 0100 	strd	r0, r1, [r3]
	Altitude_index = 0;
 8003de2:	2400      	movs	r4, #0
 8003de4:	4b9e      	ldr	r3, [pc, #632]	; (8004060 <main+0x37c>)
 8003de6:	701c      	strb	r4, [r3, #0]
	HAL_Delay(1000);
 8003de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dec:	f000 fd0e 	bl	800480c <HAL_Delay>
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7fe fb21 	bl	8002438 <I2C_Select_bus>
	Sensors.BME280_Internal.Status = BME280_Get_ID(I2C_handle_BME_in__MPU, &Sensors.BME280_Internal.ID, I2C_short_timeout);
 8003df6:	4c9b      	ldr	r4, [pc, #620]	; (8004064 <main+0x380>)
 8003df8:	2314      	movs	r3, #20
 8003dfa:	9312      	str	r3, [sp, #72]	; 0x48
 8003dfc:	4d9a      	ldr	r5, [pc, #616]	; (8004068 <main+0x384>)
 8003dfe:	9511      	str	r5, [sp, #68]	; 0x44
 8003e00:	2244      	movs	r2, #68	; 0x44
 8003e02:	f104 0110 	add.w	r1, r4, #16
 8003e06:	4668      	mov	r0, sp
 8003e08:	f004 ff9e 	bl	8008d48 <memcpy>
 8003e0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e10:	f7fd f8be 	bl	8000f90 <BME280_Get_ID>
 8003e14:	f805 0c01 	strb.w	r0, [r5, #-1]
	if (Sensors.BME280_Internal.Status == HAL_OK)
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	f000 80b6 	beq.w	8003f8a <main+0x2a6>
	I2C_Select_bus(I2C_BUS_SEL_BMEs);
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f7fe fb0a 	bl	8002438 <I2C_Select_bus>
	Sensors.BME280_External.Status = BME280_Get_ID(I2C_handle_BME_ex__SI, &Sensors.BME280_External.ID, I2C_short_timeout);
 8003e24:	4c91      	ldr	r4, [pc, #580]	; (800406c <main+0x388>)
 8003e26:	2314      	movs	r3, #20
 8003e28:	9312      	str	r3, [sp, #72]	; 0x48
 8003e2a:	4d91      	ldr	r5, [pc, #580]	; (8004070 <main+0x38c>)
 8003e2c:	9511      	str	r5, [sp, #68]	; 0x44
 8003e2e:	2244      	movs	r2, #68	; 0x44
 8003e30:	f104 0110 	add.w	r1, r4, #16
 8003e34:	4668      	mov	r0, sp
 8003e36:	f004 ff87 	bl	8008d48 <memcpy>
 8003e3a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e3e:	f7fd f8a7 	bl	8000f90 <BME280_Get_ID>
 8003e42:	f805 0c01 	strb.w	r0, [r5, #-1]
	if (Sensors.BME280_External.Status == HAL_OK)
 8003e46:	2800      	cmp	r0, #0
 8003e48:	f000 80c2 	beq.w	8003fd0 <main+0x2ec>
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	f7fe faf3 	bl	8002438 <I2C_Select_bus>
	Sensors.MPU650.Status = MPU6050_read_ID(I2C_handle_BME_in__MPU, &Sensors.MPU650.ID, I2C_short_timeout);
 8003e52:	4c84      	ldr	r4, [pc, #528]	; (8004064 <main+0x380>)
 8003e54:	2314      	movs	r3, #20
 8003e56:	9312      	str	r3, [sp, #72]	; 0x48
 8003e58:	4d86      	ldr	r5, [pc, #536]	; (8004074 <main+0x390>)
 8003e5a:	9511      	str	r5, [sp, #68]	; 0x44
 8003e5c:	2244      	movs	r2, #68	; 0x44
 8003e5e:	f104 0110 	add.w	r1, r4, #16
 8003e62:	4668      	mov	r0, sp
 8003e64:	f004 ff70 	bl	8008d48 <memcpy>
 8003e68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e6c:	f7fd fc85 	bl	800177a <MPU6050_read_ID>
 8003e70:	f805 0c01 	strb.w	r0, [r5, #-1]
	if (Sensors.MPU650.Status == HAL_OK)
 8003e74:	2800      	cmp	r0, #0
 8003e76:	f000 8127 	beq.w	80040c8 <main+0x3e4>
	I2C_Select_bus(I2C_BUS_SEL_MPU__SI);
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7fe fadc 	bl	8002438 <I2C_Select_bus>
	Sensors.SI1145.Status = SI1145_Init(I2C_handle_BME_ex__SI, I2C_short_timeout);
 8003e80:	4c7a      	ldr	r4, [pc, #488]	; (800406c <main+0x388>)
 8003e82:	2314      	movs	r3, #20
 8003e84:	9311      	str	r3, [sp, #68]	; 0x44
 8003e86:	2244      	movs	r2, #68	; 0x44
 8003e88:	f104 0110 	add.w	r1, r4, #16
 8003e8c:	4668      	mov	r0, sp
 8003e8e:	f004 ff5b 	bl	8008d48 <memcpy>
 8003e92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003e96:	f7fd fd4d 	bl	8001934 <SI1145_Init>
 8003e9a:	4a6b      	ldr	r2, [pc, #428]	; (8004048 <main+0x364>)
 8003e9c:	f882 00a0 	strb.w	r0, [r2, #160]	; 0xa0
	if (Sensors.SI1145.Status == HAL_OK)
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	f000 8124 	beq.w	80040ee <main+0x40a>
	UART1_RxIsData = 0;
 8003ea6:	4b74      	ldr	r3, [pc, #464]	; (8004078 <main+0x394>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
	UART1_RxBytes = 2;
 8003eac:	4b73      	ldr	r3, [pc, #460]	; (800407c <main+0x398>)
 8003eae:	2202      	movs	r2, #2
 8003eb0:	701a      	strb	r2, [r3, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == 0);
 8003eb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003eb6:	4872      	ldr	r0, [pc, #456]	; (8004080 <main+0x39c>)
 8003eb8:	f000 fe5c 	bl	8004b74 <HAL_GPIO_ReadPin>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d0f8      	beq.n	8003eb2 <main+0x1ce>
	HAL_UART_Receive_IT(&huart1, UART1_RxBuf, 2);
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	4970      	ldr	r1, [pc, #448]	; (8004084 <main+0x3a0>)
 8003ec4:	4863      	ldr	r0, [pc, #396]	; (8004054 <main+0x370>)
 8003ec6:	f003 fa6c 	bl	80073a2 <HAL_UART_Receive_IT>
	UART2_RxIsData = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	4a6e      	ldr	r2, [pc, #440]	; (8004088 <main+0x3a4>)
 8003ece:	7013      	strb	r3, [r2, #0]
	UART2_RxBytes = 4;
 8003ed0:	4a6e      	ldr	r2, [pc, #440]	; (800408c <main+0x3a8>)
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	7011      	strb	r1, [r2, #0]
	UART2_Send_Sensor_Data = 0;
 8003ed6:	4a6e      	ldr	r2, [pc, #440]	; (8004090 <main+0x3ac>)
 8003ed8:	7013      	strb	r3, [r2, #0]
	UART2_Reset_Countdown = 0;
 8003eda:	4a6e      	ldr	r2, [pc, #440]	; (8004094 <main+0x3b0>)
 8003edc:	7013      	strb	r3, [r2, #0]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 0);
 8003ede:	2108      	movs	r1, #8
 8003ee0:	4867      	ldr	r0, [pc, #412]	; (8004080 <main+0x39c>)
 8003ee2:	f000 fe47 	bl	8004b74 <HAL_GPIO_ReadPin>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	d0f9      	beq.n	8003ede <main+0x1fa>
	HAL_UART_Receive_IT(&huart2, UART2_RxBuf, 2);
 8003eea:	2202      	movs	r2, #2
 8003eec:	496a      	ldr	r1, [pc, #424]	; (8004098 <main+0x3b4>)
 8003eee:	486b      	ldr	r0, [pc, #428]	; (800409c <main+0x3b8>)
 8003ef0:	f003 fa57 	bl	80073a2 <HAL_UART_Receive_IT>
	UART1_TxBuf[0] = 0x00;
 8003ef4:	4c56      	ldr	r4, [pc, #344]	; (8004050 <main+0x36c>)
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	7026      	strb	r6, [r4, #0]
	UART1_TxBuf[1] = Get_System_Status();
 8003efa:	f7fe fa65 	bl	80023c8 <Get_System_Status>
 8003efe:	7060      	strb	r0, [r4, #1]
	HAL_UART_Transmit_IT(&huart1, UART1_TxBuf, 2);
 8003f00:	2202      	movs	r2, #2
 8003f02:	4621      	mov	r1, r4
 8003f04:	4853      	ldr	r0, [pc, #332]	; (8004054 <main+0x370>)
 8003f06:	f003 f844 	bl	8006f92 <HAL_UART_Transmit_IT>
	HAL_TIM_Base_Start_IT(&htim3);	// Sensor read cycle timer, T = 1s
 8003f0a:	4865      	ldr	r0, [pc, #404]	; (80040a0 <main+0x3bc>)
 8003f0c:	f002 fcca 	bl	80068a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);	// Flashes LEDs, T = 0.5s
 8003f10:	4864      	ldr	r0, [pc, #400]	; (80040a4 <main+0x3c0>)
 8003f12:	f002 fcc7 	bl	80068a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);	// CAM1 heartbeat timer, T = 5s
 8003f16:	4c64      	ldr	r4, [pc, #400]	; (80040a8 <main+0x3c4>)
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f002 fcc3 	bl	80068a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim9);	// CAM2 heartbeat timer, T = 5s
 8003f1e:	4f63      	ldr	r7, [pc, #396]	; (80040ac <main+0x3c8>)
 8003f20:	4638      	mov	r0, r7
 8003f22:	f002 fcbf 	bl	80068a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);	// UART management, T = 10ms
 8003f26:	4862      	ldr	r0, [pc, #392]	; (80040b0 <main+0x3cc>)
 8003f28:	f002 fcbc 	bl	80068a4 <HAL_TIM_Base_Start_IT>
	CAM_1.OK_PIN = CAM1_OK_Pin;
 8003f2c:	4d61      	ldr	r5, [pc, #388]	; (80040b4 <main+0x3d0>)
 8003f2e:	2304      	movs	r3, #4
 8003f30:	81ab      	strh	r3, [r5, #12]
	CAM_1.OK_PORT = CAM1_OK_GPIO_Port;
 8003f32:	4b61      	ldr	r3, [pc, #388]	; (80040b8 <main+0x3d4>)
 8003f34:	60ab      	str	r3, [r5, #8]
	CAM_1.ON_PIN = CAM1_ON_Pin;
 8003f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f3a:	80aa      	strh	r2, [r5, #4]
	CAM_1.ON_PORT = CAM1_ON_GPIO_Port;
 8003f3c:	602b      	str	r3, [r5, #0]
	CAM_1.START_PIN = CAM1_START_Pin;
 8003f3e:	2220      	movs	r2, #32
 8003f40:	82aa      	strh	r2, [r5, #20]
	CAM_1.START_PORT = CAM1_START_GPIO_Port;
 8003f42:	612b      	str	r3, [r5, #16]
	CAM_1.REC_STATUS = CAM_NREC;
 8003f44:	772e      	strb	r6, [r5, #28]
	CAM_1.TIM = &htim5;
 8003f46:	61ac      	str	r4, [r5, #24]
	CAM_1.Do_Restart = 0;
 8003f48:	776e      	strb	r6, [r5, #29]
	CAM_1.Do_EXTI = 0;
 8003f4a:	77ae      	strb	r6, [r5, #30]
	CAM_1.Startup_delay = CAM_STARTUP_TIME;
 8003f4c:	2206      	movs	r2, #6
 8003f4e:	77ea      	strb	r2, [r5, #31]
	CAM_2.OK_PIN = CAM2_OK_Pin;
 8003f50:	4c5a      	ldr	r4, [pc, #360]	; (80040bc <main+0x3d8>)
 8003f52:	2102      	movs	r1, #2
 8003f54:	81a1      	strh	r1, [r4, #12]
	CAM_2.OK_PORT = CAM2_OK_GPIO_Port;
 8003f56:	60a3      	str	r3, [r4, #8]
	CAM_2.ON_PIN = CAM2_ON_Pin;
 8003f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f5c:	80a1      	strh	r1, [r4, #4]
	CAM_2.ON_PORT = CAM2_ON_GPIO_Port;
 8003f5e:	6023      	str	r3, [r4, #0]
	CAM_2.START_PIN = CAM2_START_Pin;
 8003f60:	2110      	movs	r1, #16
 8003f62:	82a1      	strh	r1, [r4, #20]
	CAM_2.START_PORT = CAM2_START_GPIO_Port;
 8003f64:	6123      	str	r3, [r4, #16]
	CAM_2.REC_STATUS = CAM_NREC;
 8003f66:	7726      	strb	r6, [r4, #28]
	CAM_2.TIM = &htim9;
 8003f68:	61a7      	str	r7, [r4, #24]
	CAM_2.Do_Restart = 0;
 8003f6a:	7766      	strb	r6, [r4, #29]
	CAM_2.Do_EXTI = 0;
 8003f6c:	77a6      	strb	r6, [r4, #30]
	CAM_2.Startup_delay = CAM_STARTUP_TIME;
 8003f6e:	77e2      	strb	r2, [r4, #31]
	CAM_ON(&CAM_1);
 8003f70:	4628      	mov	r0, r5
 8003f72:	f7fe fcc9 	bl	8002908 <CAM_ON>
	CAM_ON(&CAM_2);
 8003f76:	4620      	mov	r0, r4
 8003f78:	f7fe fcc6 	bl	8002908 <CAM_ON>
	CAM_START(&CAM_1);
 8003f7c:	4628      	mov	r0, r5
 8003f7e:	f7fe fcdd 	bl	800293c <CAM_START>
	CAM_START(&CAM_2);
 8003f82:	4620      	mov	r0, r4
 8003f84:	f7fe fcda 	bl	800293c <CAM_START>
 8003f88:	e0c8      	b.n	800411c <main+0x438>
		Sensors.BME280_Internal.Status = BME280_Init(I2C_handle_BME_in__MPU, I2C_short_timeout);
 8003f8a:	2314      	movs	r3, #20
 8003f8c:	9311      	str	r3, [sp, #68]	; 0x44
 8003f8e:	f104 0610 	add.w	r6, r4, #16
 8003f92:	2744      	movs	r7, #68	; 0x44
 8003f94:	463a      	mov	r2, r7
 8003f96:	4631      	mov	r1, r6
 8003f98:	4668      	mov	r0, sp
 8003f9a:	f004 fed5 	bl	8008d48 <memcpy>
 8003f9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003fa2:	f7fc ffa5 	bl	8000ef0 <BME280_Init>
 8003fa6:	3d31      	subs	r5, #49	; 0x31
 8003fa8:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
		Sensors.BME280_Internal.Status = BME280_Calib_Read(I2C_handle_BME_in__MPU, &BME280_internal_Calib_Data, I2C_long_timeout);
 8003fac:	23c8      	movs	r3, #200	; 0xc8
 8003fae:	9312      	str	r3, [sp, #72]	; 0x48
 8003fb0:	4b43      	ldr	r3, [pc, #268]	; (80040c0 <main+0x3dc>)
 8003fb2:	9311      	str	r3, [sp, #68]	; 0x44
 8003fb4:	463a      	mov	r2, r7
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4668      	mov	r0, sp
 8003fba:	f004 fec5 	bl	8008d48 <memcpy>
 8003fbe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003fc2:	f7fc fffd 	bl	8000fc0 <BME280_Calib_Read>
 8003fc6:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
		Get_BME280_in_all_readings();
 8003fca:	f7fe fa65 	bl	8002498 <Get_BME280_in_all_readings>
 8003fce:	e726      	b.n	8003e1e <main+0x13a>
		Sensors.BME280_External.Status = BME280_Init(I2C_handle_BME_ex__SI, I2C_short_timeout);
 8003fd0:	2314      	movs	r3, #20
 8003fd2:	9311      	str	r3, [sp, #68]	; 0x44
 8003fd4:	f104 0610 	add.w	r6, r4, #16
 8003fd8:	2744      	movs	r7, #68	; 0x44
 8003fda:	463a      	mov	r2, r7
 8003fdc:	4631      	mov	r1, r6
 8003fde:	4668      	mov	r0, sp
 8003fe0:	f004 feb2 	bl	8008d48 <memcpy>
 8003fe4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003fe8:	f7fc ff82 	bl	8000ef0 <BME280_Init>
 8003fec:	3d01      	subs	r5, #1
 8003fee:	7028      	strb	r0, [r5, #0]
		Sensors.BME280_External.Status = BME280_Calib_Read(I2C_handle_BME_ex__SI, &BME280_external_Calib_Data, I2C_long_timeout);
 8003ff0:	23c8      	movs	r3, #200	; 0xc8
 8003ff2:	9312      	str	r3, [sp, #72]	; 0x48
 8003ff4:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <main+0x3e0>)
 8003ff6:	9311      	str	r3, [sp, #68]	; 0x44
 8003ff8:	463a      	mov	r2, r7
 8003ffa:	4631      	mov	r1, r6
 8003ffc:	4668      	mov	r0, sp
 8003ffe:	f004 fea3 	bl	8008d48 <memcpy>
 8004002:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004006:	f7fc ffdb 	bl	8000fc0 <BME280_Calib_Read>
 800400a:	7028      	strb	r0, [r5, #0]
		Get_BME280_ex_all_readings();
 800400c:	f7fe fabe 	bl	800258c <Get_BME280_ex_all_readings>
 8004010:	e71c      	b.n	8003e4c <main+0x168>
 8004012:	bf00      	nop
 8004014:	20000931 	.word	0x20000931
 8004018:	20000a38 	.word	0x20000a38
 800401c:	20000305 	.word	0x20000305
 8004020:	20000e70 	.word	0x20000e70
 8004024:	200006ba 	.word	0x200006ba
 8004028:	20000758 	.word	0x20000758
 800402c:	20000910 	.word	0x20000910
 8004030:	20000e20 	.word	0x20000e20
 8004034:	20000ba8 	.word	0x20000ba8
 8004038:	200007f4 	.word	0x200007f4
 800403c:	20000306 	.word	0x20000306
 8004040:	200008ec 	.word	0x200008ec
 8004044:	2000083c 	.word	0x2000083c
 8004048:	20000938 	.word	0x20000938
 800404c:	40590000 	.word	0x40590000
 8004050:	20000a40 	.word	0x20000a40
 8004054:	200007f8 	.word	0x200007f8
 8004058:	20000ab8 	.word	0x20000ab8
 800405c:	20000750 	.word	0x20000750
 8004060:	20000e1c 	.word	0x20000e1c
 8004064:	20000620 	.word	0x20000620
 8004068:	20000969 	.word	0x20000969
 800406c:	20000584 	.word	0x20000584
 8004070:	20000939 	.word	0x20000939
 8004074:	20000999 	.word	0x20000999
 8004078:	200006b8 	.word	0x200006b8
 800407c:	20000580 	.word	0x20000580
 8004080:	40020000 	.word	0x40020000
 8004084:	200007b8 	.word	0x200007b8
 8004088:	200006b0 	.word	0x200006b0
 800408c:	2000074c 	.word	0x2000074c
 8004090:	20000304 	.word	0x20000304
 8004094:	20000930 	.word	0x20000930
 8004098:	20000a7c 	.word	0x20000a7c
 800409c:	20000b64 	.word	0x20000b64
 80040a0:	20000704 	.word	0x20000704
 80040a4:	20000308 	.word	0x20000308
 80040a8:	200006bc 	.word	0x200006bc
 80040ac:	200009f0 	.word	0x200009f0
 80040b0:	20000840 	.word	0x20000840
 80040b4:	200008f0 	.word	0x200008f0
 80040b8:	40020400 	.word	0x40020400
 80040bc:	20000798 	.word	0x20000798
 80040c0:	200002a4 	.word	0x200002a4
 80040c4:	20000280 	.word	0x20000280
		Sensors.MPU650.Status = MPU6050_Init(I2C_handle_BME_in__MPU, I2C_short_timeout);
 80040c8:	2314      	movs	r3, #20
 80040ca:	9311      	str	r3, [sp, #68]	; 0x44
 80040cc:	2244      	movs	r2, #68	; 0x44
 80040ce:	f104 0110 	add.w	r1, r4, #16
 80040d2:	4668      	mov	r0, sp
 80040d4:	f004 fe38 	bl	8008d48 <memcpy>
 80040d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80040dc:	f7fd fade 	bl	800169c <MPU6050_Init>
 80040e0:	f1a5 0361 	sub.w	r3, r5, #97	; 0x61
 80040e4:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
		Get_MPU6050_all_readings();
 80040e8:	f7fe fac6 	bl	8002678 <Get_MPU6050_all_readings>
 80040ec:	e6c5      	b.n	8003e7a <main+0x196>
		Sensors.SI1145.Status = SI1145_read_ID(I2C_handle_BME_ex__SI, &Sensors.SI1145.ID, I2C_short_timeout);
 80040ee:	2314      	movs	r3, #20
 80040f0:	9312      	str	r3, [sp, #72]	; 0x48
 80040f2:	f102 05a1 	add.w	r5, r2, #161	; 0xa1
 80040f6:	9511      	str	r5, [sp, #68]	; 0x44
 80040f8:	2244      	movs	r2, #68	; 0x44
 80040fa:	f104 0110 	add.w	r1, r4, #16
 80040fe:	4668      	mov	r0, sp
 8004100:	f004 fe22 	bl	8008d48 <memcpy>
 8004104:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004108:	f7fd fcf0 	bl	8001aec <SI1145_read_ID>
 800410c:	f805 0c01 	strb.w	r0, [r5, #-1]
		Get_SI1145_all_readings();
 8004110:	f7fe fb1a 	bl	8002748 <Get_SI1145_all_readings>
 8004114:	e6c7      	b.n	8003ea6 <main+0x1c2>
		  UART2_RxBytes = 4;
 8004116:	4b07      	ldr	r3, [pc, #28]	; (8004134 <main+0x450>)
 8004118:	2204      	movs	r2, #4
 800411a:	701a      	strb	r2, [r3, #0]
	  if(UART1_RxIsData == 0)
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <main+0x454>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	b913      	cbnz	r3, 8004128 <main+0x444>
		  UART1_RxBytes = 2;
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <main+0x458>)
 8004124:	2202      	movs	r2, #2
 8004126:	701a      	strb	r2, [r3, #0]
	  if(UART2_RxIsData == 0)
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <main+0x45c>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f5      	bne.n	800411c <main+0x438>
 8004130:	e7f1      	b.n	8004116 <main+0x432>
 8004132:	bf00      	nop
 8004134:	2000074c 	.word	0x2000074c
 8004138:	200006b8 	.word	0x200006b8
 800413c:	20000580 	.word	0x20000580
 8004140:	200006b0 	.word	0x200006b0

08004144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004144:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004146:	2100      	movs	r1, #0
 8004148:	9100      	str	r1, [sp, #0]
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_MspInit+0x34>)
 800414c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
 8004154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004156:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800415a:	9200      	str	r2, [sp, #0]
 800415c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800415e:	9101      	str	r1, [sp, #4]
 8004160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004162:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004166:	641a      	str	r2, [r3, #64]	; 0x40
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004172:	b002      	add	sp, #8
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800

0800417c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800417c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004180:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004182:	2300      	movs	r3, #0
 8004184:	9305      	str	r3, [sp, #20]
 8004186:	9306      	str	r3, [sp, #24]
 8004188:	9307      	str	r3, [sp, #28]
 800418a:	9308      	str	r3, [sp, #32]
 800418c:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 800418e:	6803      	ldr	r3, [r0, #0]
 8004190:	4a30      	ldr	r2, [pc, #192]	; (8004254 <HAL_I2C_MspInit+0xd8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d005      	beq.n	80041a2 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8004196:	4a30      	ldr	r2, [pc, #192]	; (8004258 <HAL_I2C_MspInit+0xdc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d026      	beq.n	80041ea <HAL_I2C_MspInit+0x6e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800419c:	b00a      	add	sp, #40	; 0x28
 800419e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a2:	2500      	movs	r5, #0
 80041a4:	9501      	str	r5, [sp, #4]
 80041a6:	4c2d      	ldr	r4, [pc, #180]	; (800425c <HAL_I2C_MspInit+0xe0>)
 80041a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	6323      	str	r3, [r4, #48]	; 0x30
 80041b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041ba:	23c0      	movs	r3, #192	; 0xc0
 80041bc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041be:	2312      	movs	r3, #18
 80041c0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c4:	2303      	movs	r3, #3
 80041c6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041c8:	2304      	movs	r3, #4
 80041ca:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041cc:	a905      	add	r1, sp, #20
 80041ce:	4824      	ldr	r0, [pc, #144]	; (8004260 <HAL_I2C_MspInit+0xe4>)
 80041d0:	f000 fbf8 	bl	80049c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041d4:	9502      	str	r5, [sp, #8]
 80041d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041dc:	6423      	str	r3, [r4, #64]	; 0x40
 80041de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e4:	9302      	str	r3, [sp, #8]
 80041e6:	9b02      	ldr	r3, [sp, #8]
 80041e8:	e7d8      	b.n	800419c <HAL_I2C_MspInit+0x20>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041ea:	2500      	movs	r5, #0
 80041ec:	9503      	str	r5, [sp, #12]
 80041ee:	4c1b      	ldr	r4, [pc, #108]	; (800425c <HAL_I2C_MspInit+0xe0>)
 80041f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041f2:	f043 0302 	orr.w	r3, r3, #2
 80041f6:	6323      	str	r3, [r4, #48]	; 0x30
 80041f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	9303      	str	r3, [sp, #12]
 8004200:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004206:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004208:	f04f 0812 	mov.w	r8, #18
 800420c:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004210:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004212:	2703      	movs	r7, #3
 8004214:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004216:	2304      	movs	r3, #4
 8004218:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800421a:	4e11      	ldr	r6, [pc, #68]	; (8004260 <HAL_I2C_MspInit+0xe4>)
 800421c:	a905      	add	r1, sp, #20
 800421e:	4630      	mov	r0, r6
 8004220:	f000 fbd0 	bl	80049c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004224:	2308      	movs	r3, #8
 8004226:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004228:	f8cd 8018 	str.w	r8, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800422e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004230:	2309      	movs	r3, #9
 8004232:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004234:	a905      	add	r1, sp, #20
 8004236:	4630      	mov	r0, r6
 8004238:	f000 fbc4 	bl	80049c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800423c:	9504      	str	r5, [sp, #16]
 800423e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004244:	6423      	str	r3, [r4, #64]	; 0x40
 8004246:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424c:	9304      	str	r3, [sp, #16]
 800424e:	9b04      	ldr	r3, [sp, #16]
}
 8004250:	e7a4      	b.n	800419c <HAL_I2C_MspInit+0x20>
 8004252:	bf00      	nop
 8004254:	40005400 	.word	0x40005400
 8004258:	40005800 	.word	0x40005800
 800425c:	40023800 	.word	0x40023800
 8004260:	40020400 	.word	0x40020400

08004264 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004264:	b500      	push	{lr}
 8004266:	b087      	sub	sp, #28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004268:	2300      	movs	r3, #0
 800426a:	9302      	str	r3, [sp, #8]
 800426c:	9303      	str	r3, [sp, #12]
 800426e:	9305      	str	r3, [sp, #20]
  if(hrtc->Instance==RTC)
 8004270:	6802      	ldr	r2, [r0, #0]
 8004272:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RTC_MspInit+0x3c>)
 8004274:	429a      	cmp	r2, r3
 8004276:	d002      	beq.n	800427e <HAL_RTC_MspInit+0x1a>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004278:	b007      	add	sp, #28
 800427a:	f85d fb04 	ldr.w	pc, [sp], #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800427e:	2302      	movs	r3, #2
 8004280:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004286:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004288:	a801      	add	r0, sp, #4
 800428a:	f001 fd03 	bl	8005c94 <HAL_RCCEx_PeriphCLKConfig>
 800428e:	b918      	cbnz	r0, 8004298 <HAL_RTC_MspInit+0x34>
    __HAL_RCC_RTC_ENABLE();
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <HAL_RTC_MspInit+0x40>)
 8004292:	2201      	movs	r2, #1
 8004294:	601a      	str	r2, [r3, #0]
}
 8004296:	e7ef      	b.n	8004278 <HAL_RTC_MspInit+0x14>
      Error_Handler();
 8004298:	f7ff fae0 	bl	800385c <Error_Handler>
 800429c:	e7f8      	b.n	8004290 <HAL_RTC_MspInit+0x2c>
 800429e:	bf00      	nop
 80042a0:	40002800 	.word	0x40002800
 80042a4:	42470e3c 	.word	0x42470e3c

080042a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80042a8:	b500      	push	{lr}
 80042aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ac:	2300      	movs	r3, #0
 80042ae:	9303      	str	r3, [sp, #12]
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	9305      	str	r3, [sp, #20]
 80042b4:	9306      	str	r3, [sp, #24]
 80042b6:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80042b8:	6802      	ldr	r2, [r0, #0]
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_SPI_MspInit+0x68>)
 80042bc:	429a      	cmp	r2, r3
 80042be:	d002      	beq.n	80042c6 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80042c0:	b009      	add	sp, #36	; 0x24
 80042c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042c6:	2200      	movs	r2, #0
 80042c8:	9201      	str	r2, [sp, #4]
 80042ca:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80042ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80042d0:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 80042d4:	6459      	str	r1, [r3, #68]	; 0x44
 80042d6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80042d8:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 80042dc:	9101      	str	r1, [sp, #4]
 80042de:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e0:	9202      	str	r2, [sp, #8]
 80042e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042e4:	f041 0101 	orr.w	r1, r1, #1
 80042e8:	6319      	str	r1, [r3, #48]	; 0x30
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	9302      	str	r3, [sp, #8]
 80042f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80042f4:	23e0      	movs	r3, #224	; 0xe0
 80042f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f8:	2302      	movs	r3, #2
 80042fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fc:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fe:	2303      	movs	r3, #3
 8004300:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004302:	2305      	movs	r3, #5
 8004304:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004306:	a903      	add	r1, sp, #12
 8004308:	4802      	ldr	r0, [pc, #8]	; (8004314 <HAL_SPI_MspInit+0x6c>)
 800430a:	f000 fb5b 	bl	80049c4 <HAL_GPIO_Init>
}
 800430e:	e7d7      	b.n	80042c0 <HAL_SPI_MspInit+0x18>
 8004310:	40013000 	.word	0x40013000
 8004314:	40020000 	.word	0x40020000

08004318 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8004318:	b500      	push	{lr}
 800431a:	b085      	sub	sp, #20
  if(htim_oc->Instance==TIM3)
 800431c:	6803      	ldr	r3, [r0, #0]
 800431e:	4a2f      	ldr	r2, [pc, #188]	; (80043dc <HAL_TIM_OC_MspInit+0xc4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00b      	beq.n	800433c <HAL_TIM_OC_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_oc->Instance==TIM4)
 8004324:	4a2e      	ldr	r2, [pc, #184]	; (80043e0 <HAL_TIM_OC_MspInit+0xc8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01c      	beq.n	8004364 <HAL_TIM_OC_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_oc->Instance==TIM5)
 800432a:	4a2e      	ldr	r2, [pc, #184]	; (80043e4 <HAL_TIM_OC_MspInit+0xcc>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d02d      	beq.n	800438c <HAL_TIM_OC_MspInit+0x74>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_oc->Instance==TIM9)
 8004330:	4a2d      	ldr	r2, [pc, #180]	; (80043e8 <HAL_TIM_OC_MspInit+0xd0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d03e      	beq.n	80043b4 <HAL_TIM_OC_MspInit+0x9c>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8004336:	b005      	add	sp, #20
 8004338:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 800433c:	2200      	movs	r2, #0
 800433e:	9200      	str	r2, [sp, #0]
 8004340:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <HAL_TIM_OC_MspInit+0xd4>)
 8004342:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004344:	f041 0102 	orr.w	r1, r1, #2
 8004348:	6419      	str	r1, [r3, #64]	; 0x40
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8004354:	2101      	movs	r1, #1
 8004356:	201d      	movs	r0, #29
 8004358:	f000 fa7e 	bl	8004858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800435c:	201d      	movs	r0, #29
 800435e:	f000 faaf 	bl	80048c0 <HAL_NVIC_EnableIRQ>
 8004362:	e7e8      	b.n	8004336 <HAL_TIM_OC_MspInit+0x1e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004364:	2200      	movs	r2, #0
 8004366:	9201      	str	r2, [sp, #4]
 8004368:	4b20      	ldr	r3, [pc, #128]	; (80043ec <HAL_TIM_OC_MspInit+0xd4>)
 800436a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800436c:	f041 0104 	orr.w	r1, r1, #4
 8004370:	6419      	str	r1, [r3, #64]	; 0x40
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	9301      	str	r3, [sp, #4]
 800437a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800437c:	2101      	movs	r1, #1
 800437e:	201e      	movs	r0, #30
 8004380:	f000 fa6a 	bl	8004858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004384:	201e      	movs	r0, #30
 8004386:	f000 fa9b 	bl	80048c0 <HAL_NVIC_EnableIRQ>
 800438a:	e7d4      	b.n	8004336 <HAL_TIM_OC_MspInit+0x1e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800438c:	2200      	movs	r2, #0
 800438e:	9202      	str	r2, [sp, #8]
 8004390:	4b16      	ldr	r3, [pc, #88]	; (80043ec <HAL_TIM_OC_MspInit+0xd4>)
 8004392:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004394:	f041 0108 	orr.w	r1, r1, #8
 8004398:	6419      	str	r1, [r3, #64]	; 0x40
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f003 0308 	and.w	r3, r3, #8
 80043a0:	9302      	str	r3, [sp, #8]
 80043a2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80043a4:	2101      	movs	r1, #1
 80043a6:	2032      	movs	r0, #50	; 0x32
 80043a8:	f000 fa56 	bl	8004858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80043ac:	2032      	movs	r0, #50	; 0x32
 80043ae:	f000 fa87 	bl	80048c0 <HAL_NVIC_EnableIRQ>
 80043b2:	e7c0      	b.n	8004336 <HAL_TIM_OC_MspInit+0x1e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80043b4:	2200      	movs	r2, #0
 80043b6:	9203      	str	r2, [sp, #12]
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <HAL_TIM_OC_MspInit+0xd4>)
 80043ba:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80043bc:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80043c0:	6459      	str	r1, [r3, #68]	; 0x44
 80043c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c8:	9303      	str	r3, [sp, #12]
 80043ca:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 1, 0);
 80043cc:	2101      	movs	r1, #1
 80043ce:	2018      	movs	r0, #24
 80043d0:	f000 fa42 	bl	8004858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80043d4:	2018      	movs	r0, #24
 80043d6:	f000 fa73 	bl	80048c0 <HAL_NVIC_EnableIRQ>
}
 80043da:	e7ac      	b.n	8004336 <HAL_TIM_OC_MspInit+0x1e>
 80043dc:	40000400 	.word	0x40000400
 80043e0:	40000800 	.word	0x40000800
 80043e4:	40000c00 	.word	0x40000c00
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40023800 	.word	0x40023800

080043f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043f0:	b500      	push	{lr}
 80043f2:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM10)
 80043f4:	6803      	ldr	r3, [r0, #0]
 80043f6:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_TIM_Base_MspInit+0x68>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d005      	beq.n	8004408 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 80043fc:	4a17      	ldr	r2, [pc, #92]	; (800445c <HAL_TIM_Base_MspInit+0x6c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d016      	beq.n	8004430 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004402:	b003      	add	sp, #12
 8004404:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004408:	2200      	movs	r2, #0
 800440a:	9200      	str	r2, [sp, #0]
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <HAL_TIM_Base_MspInit+0x70>)
 800440e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004410:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004414:	6459      	str	r1, [r3, #68]	; 0x44
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8004420:	2101      	movs	r1, #1
 8004422:	2019      	movs	r0, #25
 8004424:	f000 fa18 	bl	8004858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004428:	2019      	movs	r0, #25
 800442a:	f000 fa49 	bl	80048c0 <HAL_NVIC_EnableIRQ>
 800442e:	e7e8      	b.n	8004402 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004430:	2100      	movs	r1, #0
 8004432:	9101      	str	r1, [sp, #4]
 8004434:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_TIM_Base_MspInit+0x70>)
 8004436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004438:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800443c:	645a      	str	r2, [r3, #68]	; 0x44
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004448:	460a      	mov	r2, r1
 800444a:	201a      	movs	r0, #26
 800444c:	f000 fa04 	bl	8004858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004450:	201a      	movs	r0, #26
 8004452:	f000 fa35 	bl	80048c0 <HAL_NVIC_EnableIRQ>
}
 8004456:	e7d4      	b.n	8004402 <HAL_TIM_Base_MspInit+0x12>
 8004458:	40014400 	.word	0x40014400
 800445c:	40014800 	.word	0x40014800
 8004460:	40023800 	.word	0x40023800

08004464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004464:	b510      	push	{r4, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	2300      	movs	r3, #0
 800446a:	9305      	str	r3, [sp, #20]
 800446c:	9306      	str	r3, [sp, #24]
 800446e:	9307      	str	r3, [sp, #28]
 8004470:	9308      	str	r3, [sp, #32]
 8004472:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8004474:	6803      	ldr	r3, [r0, #0]
 8004476:	4a30      	ldr	r2, [pc, #192]	; (8004538 <HAL_UART_MspInit+0xd4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800447c:	4a2f      	ldr	r2, [pc, #188]	; (800453c <HAL_UART_MspInit+0xd8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d02e      	beq.n	80044e0 <HAL_UART_MspInit+0x7c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004482:	b00a      	add	sp, #40	; 0x28
 8004484:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004486:	2400      	movs	r4, #0
 8004488:	9401      	str	r4, [sp, #4]
 800448a:	4b2d      	ldr	r3, [pc, #180]	; (8004540 <HAL_UART_MspInit+0xdc>)
 800448c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800448e:	f042 0210 	orr.w	r2, r2, #16
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
 8004494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004496:	f002 0210 	and.w	r2, r2, #16
 800449a:	9201      	str	r2, [sp, #4]
 800449c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449e:	9402      	str	r4, [sp, #8]
 80044a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	9302      	str	r3, [sp, #8]
 80044b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80044b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b8:	2302      	movs	r3, #2
 80044ba:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044bc:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044be:	2303      	movs	r3, #3
 80044c0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044c2:	2307      	movs	r3, #7
 80044c4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c6:	a905      	add	r1, sp, #20
 80044c8:	481e      	ldr	r0, [pc, #120]	; (8004544 <HAL_UART_MspInit+0xe0>)
 80044ca:	f000 fa7b 	bl	80049c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80044ce:	4622      	mov	r2, r4
 80044d0:	2101      	movs	r1, #1
 80044d2:	2025      	movs	r0, #37	; 0x25
 80044d4:	f000 f9c0 	bl	8004858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044d8:	2025      	movs	r0, #37	; 0x25
 80044da:	f000 f9f1 	bl	80048c0 <HAL_NVIC_EnableIRQ>
 80044de:	e7d0      	b.n	8004482 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80044e0:	2400      	movs	r4, #0
 80044e2:	9403      	str	r4, [sp, #12]
 80044e4:	4b16      	ldr	r3, [pc, #88]	; (8004540 <HAL_UART_MspInit+0xdc>)
 80044e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
 80044ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044f0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80044f4:	9203      	str	r2, [sp, #12]
 80044f6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f8:	9404      	str	r4, [sp, #16]
 80044fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	9304      	str	r3, [sp, #16]
 800450a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800450c:	230c      	movs	r3, #12
 800450e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004510:	2302      	movs	r3, #2
 8004512:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004514:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004516:	2303      	movs	r3, #3
 8004518:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800451a:	2307      	movs	r3, #7
 800451c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800451e:	a905      	add	r1, sp, #20
 8004520:	4808      	ldr	r0, [pc, #32]	; (8004544 <HAL_UART_MspInit+0xe0>)
 8004522:	f000 fa4f 	bl	80049c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8004526:	4622      	mov	r2, r4
 8004528:	2101      	movs	r1, #1
 800452a:	2026      	movs	r0, #38	; 0x26
 800452c:	f000 f994 	bl	8004858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004530:	2026      	movs	r0, #38	; 0x26
 8004532:	f000 f9c5 	bl	80048c0 <HAL_NVIC_EnableIRQ>
}
 8004536:	e7a4      	b.n	8004482 <HAL_UART_MspInit+0x1e>
 8004538:	40011000 	.word	0x40011000
 800453c:	40004400 	.word	0x40004400
 8004540:	40023800 	.word	0x40023800
 8004544:	40020000 	.word	0x40020000

08004548 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004548:	e7fe      	b.n	8004548 <NMI_Handler>

0800454a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800454a:	e7fe      	b.n	800454a <HardFault_Handler>

0800454c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800454c:	e7fe      	b.n	800454c <MemManage_Handler>

0800454e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800454e:	e7fe      	b.n	800454e <BusFault_Handler>

08004550 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004550:	e7fe      	b.n	8004550 <UsageFault_Handler>

08004552 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004552:	4770      	bx	lr

08004554 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004554:	4770      	bx	lr

08004556 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004556:	4770      	bx	lr

08004558 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004558:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SD_CS_Pin);
 800455a:	2010      	movs	r0, #16
 800455c:	f000 fb20 	bl	8004ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004560:	bd08      	pop	{r3, pc}

08004562 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004562:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAM1_START_Pin);
 8004564:	2020      	movs	r0, #32
 8004566:	f000 fb1b 	bl	8004ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800456a:	bd08      	pop	{r3, pc}

0800456c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800456c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800456e:	4802      	ldr	r0, [pc, #8]	; (8004578 <TIM1_BRK_TIM9_IRQHandler+0xc>)
 8004570:	f002 f9f1 	bl	8006956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004574:	bd08      	pop	{r3, pc}
 8004576:	bf00      	nop
 8004578:	200009f0 	.word	0x200009f0

0800457c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800457c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800457e:	4802      	ldr	r0, [pc, #8]	; (8004588 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8004580:	f002 f9e9 	bl	8006956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004584:	bd08      	pop	{r3, pc}
 8004586:	bf00      	nop
 8004588:	200005d8 	.word	0x200005d8

0800458c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800458c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800458e:	4802      	ldr	r0, [pc, #8]	; (8004598 <TIM1_TRG_COM_TIM11_IRQHandler+0xc>)
 8004590:	f002 f9e1 	bl	8006956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004594:	bd08      	pop	{r3, pc}
 8004596:	bf00      	nop
 8004598:	20000840 	.word	0x20000840

0800459c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800459c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800459e:	4802      	ldr	r0, [pc, #8]	; (80045a8 <TIM3_IRQHandler+0xc>)
 80045a0:	f002 f9d9 	bl	8006956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045a4:	bd08      	pop	{r3, pc}
 80045a6:	bf00      	nop
 80045a8:	20000704 	.word	0x20000704

080045ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80045ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80045ae:	4802      	ldr	r0, [pc, #8]	; (80045b8 <TIM4_IRQHandler+0xc>)
 80045b0:	f002 f9d1 	bl	8006956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80045b4:	bd08      	pop	{r3, pc}
 80045b6:	bf00      	nop
 80045b8:	20000308 	.word	0x20000308

080045bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80045bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045be:	4802      	ldr	r0, [pc, #8]	; (80045c8 <USART1_IRQHandler+0xc>)
 80045c0:	f002 fd94 	bl	80070ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80045c4:	bd08      	pop	{r3, pc}
 80045c6:	bf00      	nop
 80045c8:	200007f8 	.word	0x200007f8

080045cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80045cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045ce:	4802      	ldr	r0, [pc, #8]	; (80045d8 <USART2_IRQHandler+0xc>)
 80045d0:	f002 fd8c 	bl	80070ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045d4:	bd08      	pop	{r3, pc}
 80045d6:	bf00      	nop
 80045d8:	20000b64 	.word	0x20000b64

080045dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80045dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80045de:	4802      	ldr	r0, [pc, #8]	; (80045e8 <TIM5_IRQHandler+0xc>)
 80045e0:	f002 f9b9 	bl	8006956 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80045e4:	bd08      	pop	{r3, pc}
 80045e6:	bf00      	nop
 80045e8:	200006bc 	.word	0x200006bc

080045ec <SDTimer_Handler>:

/* USER CODE BEGIN 1 */
void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 80045ec:	4b08      	ldr	r3, [pc, #32]	; (8004610 <SDTimer_Handler+0x24>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b123      	cbz	r3, 80045fc <SDTimer_Handler+0x10>
    Timer1--;
 80045f2:	4a07      	ldr	r2, [pc, #28]	; (8004610 <SDTimer_Handler+0x24>)
 80045f4:	7813      	ldrb	r3, [r2, #0]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <SDTimer_Handler+0x28>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	b123      	cbz	r3, 800460c <SDTimer_Handler+0x20>
    Timer2--;
 8004602:	4a04      	ldr	r2, [pc, #16]	; (8004614 <SDTimer_Handler+0x28>)
 8004604:	7813      	ldrb	r3, [r2, #0]
 8004606:	3b01      	subs	r3, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	7013      	strb	r3, [r2, #0]
}
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000e73 	.word	0x20000e73
 8004614:	20000e72 	.word	0x20000e72

08004618 <SysTick_Handler>:
{
 8004618:	b508      	push	{r3, lr}
	FatFsCnt++;
 800461a:	4a09      	ldr	r2, [pc, #36]	; (8004640 <SysTick_Handler+0x28>)
 800461c:	7813      	ldrb	r3, [r2, #0]
 800461e:	3301      	adds	r3, #1
 8004620:	b2db      	uxtb	r3, r3
 8004622:	7013      	strb	r3, [r2, #0]
	if(FatFsCnt >= 10)
 8004624:	7813      	ldrb	r3, [r2, #0]
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b09      	cmp	r3, #9
 800462a:	d802      	bhi.n	8004632 <SysTick_Handler+0x1a>
  HAL_IncTick();
 800462c:	f000 f8dc 	bl	80047e8 <HAL_IncTick>
}
 8004630:	bd08      	pop	{r3, pc}
		FatFsCnt = 0;
 8004632:	4613      	mov	r3, r2
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8004638:	f7ff ffd8 	bl	80045ec <SDTimer_Handler>
 800463c:	e7f6      	b.n	800462c <SysTick_Handler+0x14>
 800463e:	bf00      	nop
 8004640:	20000236 	.word	0x20000236

08004644 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004644:	2001      	movs	r0, #1
 8004646:	4770      	bx	lr

08004648 <_kill>:

int _kill(int pid, int sig)
{
 8004648:	b508      	push	{r3, lr}
	errno = EINVAL;
 800464a:	f004 fb53 	bl	8008cf4 <__errno>
 800464e:	2316      	movs	r3, #22
 8004650:	6003      	str	r3, [r0, #0]
	return -1;
}
 8004652:	f04f 30ff 	mov.w	r0, #4294967295
 8004656:	bd08      	pop	{r3, pc}

08004658 <_exit>:

void _exit (int status)
{
 8004658:	b508      	push	{r3, lr}
	_kill(status, -1);
 800465a:	f04f 31ff 	mov.w	r1, #4294967295
 800465e:	f7ff fff3 	bl	8004648 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004662:	e7fe      	b.n	8004662 <_exit+0xa>

08004664 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	460c      	mov	r4, r1
 8004668:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800466a:	2500      	movs	r5, #0
 800466c:	42b5      	cmp	r5, r6
 800466e:	da07      	bge.n	8004680 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8004670:	f3af 8000 	nop.w
 8004674:	4621      	mov	r1, r4
 8004676:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467a:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800467c:	460c      	mov	r4, r1
 800467e:	e7f5      	b.n	800466c <_read+0x8>
	}

return len;
}
 8004680:	4630      	mov	r0, r6
 8004682:	bd70      	pop	{r4, r5, r6, pc}

08004684 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	460c      	mov	r4, r1
 8004688:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800468a:	2500      	movs	r5, #0
 800468c:	42b5      	cmp	r5, r6
 800468e:	da05      	bge.n	800469c <_write+0x18>
	{
		__io_putchar(*ptr++);
 8004690:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004694:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004698:	3501      	adds	r5, #1
 800469a:	e7f7      	b.n	800468c <_write+0x8>
	}
	return len;
}
 800469c:	4630      	mov	r0, r6
 800469e:	bd70      	pop	{r4, r5, r6, pc}

080046a0 <_close>:

int _close(int file)
{
	return -1;
}
 80046a0:	f04f 30ff 	mov.w	r0, #4294967295
 80046a4:	4770      	bx	lr

080046a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80046a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046aa:	604b      	str	r3, [r1, #4]
	return 0;
}
 80046ac:	2000      	movs	r0, #0
 80046ae:	4770      	bx	lr

080046b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80046b0:	2001      	movs	r0, #1
 80046b2:	4770      	bx	lr

080046b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80046b4:	2000      	movs	r0, #0
 80046b6:	4770      	bx	lr

080046b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046bc:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <_sbrk+0x38>)
 80046be:	490d      	ldr	r1, [pc, #52]	; (80046f4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046c0:	480d      	ldr	r0, [pc, #52]	; (80046f8 <_sbrk+0x40>)
 80046c2:	6800      	ldr	r0, [r0, #0]
 80046c4:	b140      	cbz	r0, 80046d8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046c6:	480c      	ldr	r0, [pc, #48]	; (80046f8 <_sbrk+0x40>)
 80046c8:	6800      	ldr	r0, [r0, #0]
 80046ca:	4403      	add	r3, r0
 80046cc:	1a52      	subs	r2, r2, r1
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d806      	bhi.n	80046e0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80046d2:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <_sbrk+0x40>)
 80046d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80046d6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80046d8:	4807      	ldr	r0, [pc, #28]	; (80046f8 <_sbrk+0x40>)
 80046da:	4c08      	ldr	r4, [pc, #32]	; (80046fc <_sbrk+0x44>)
 80046dc:	6004      	str	r4, [r0, #0]
 80046de:	e7f2      	b.n	80046c6 <_sbrk+0xe>
    errno = ENOMEM;
 80046e0:	f004 fb08 	bl	8008cf4 <__errno>
 80046e4:	230c      	movs	r3, #12
 80046e6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	e7f3      	b.n	80046d6 <_sbrk+0x1e>
 80046ee:	bf00      	nop
 80046f0:	20018000 	.word	0x20018000
 80046f4:	00000400 	.word	0x00000400
 80046f8:	20000238 	.word	0x20000238
 80046fc:	200012f0 	.word	0x200012f0

08004700 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004700:	4a03      	ldr	r2, [pc, #12]	; (8004710 <SystemInit+0x10>)
 8004702:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004706:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800470a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800470e:	4770      	bx	lr
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800474c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004718:	480d      	ldr	r0, [pc, #52]	; (8004750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800471a:	490e      	ldr	r1, [pc, #56]	; (8004754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800471c:	4a0e      	ldr	r2, [pc, #56]	; (8004758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800471e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004720:	e002      	b.n	8004728 <LoopCopyDataInit>

08004722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004726:	3304      	adds	r3, #4

08004728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800472a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800472c:	d3f9      	bcc.n	8004722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800472e:	4a0b      	ldr	r2, [pc, #44]	; (800475c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004730:	4c0b      	ldr	r4, [pc, #44]	; (8004760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004734:	e001      	b.n	800473a <LoopFillZerobss>

08004736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004738:	3204      	adds	r2, #4

0800473a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800473a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800473c:	d3fb      	bcc.n	8004736 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800473e:	f7ff ffdf 	bl	8004700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004742:	f004 fadd 	bl	8008d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004746:	f7ff facd 	bl	8003ce4 <main>
  bx  lr    
 800474a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800474c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004754:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8004758:	0800d170 	.word	0x0800d170
  ldr r2, =_sbss
 800475c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8004760:	200012f0 	.word	0x200012f0

08004764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004764:	e7fe      	b.n	8004764 <ADC_IRQHandler>
	...

08004768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004768:	b510      	push	{r4, lr}
 800476a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800476c:	4b0e      	ldr	r3, [pc, #56]	; (80047a8 <HAL_InitTick+0x40>)
 800476e:	7818      	ldrb	r0, [r3, #0]
 8004770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004774:	fbb3 f3f0 	udiv	r3, r3, r0
 8004778:	4a0c      	ldr	r2, [pc, #48]	; (80047ac <HAL_InitTick+0x44>)
 800477a:	6810      	ldr	r0, [r2, #0]
 800477c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004780:	f000 f8ac 	bl	80048dc <HAL_SYSTICK_Config>
 8004784:	b968      	cbnz	r0, 80047a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004786:	2c0f      	cmp	r4, #15
 8004788:	d901      	bls.n	800478e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800478a:	2001      	movs	r0, #1
 800478c:	e00a      	b.n	80047a4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800478e:	2200      	movs	r2, #0
 8004790:	4621      	mov	r1, r4
 8004792:	f04f 30ff 	mov.w	r0, #4294967295
 8004796:	f000 f85f 	bl	8004858 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_InitTick+0x48>)
 800479c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800479e:	2000      	movs	r0, #0
 80047a0:	e000      	b.n	80047a4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80047a2:	2001      	movs	r0, #1
}
 80047a4:	bd10      	pop	{r4, pc}
 80047a6:	bf00      	nop
 80047a8:	20000024 	.word	0x20000024
 80047ac:	20000020 	.word	0x20000020
 80047b0:	20000028 	.word	0x20000028

080047b4 <HAL_Init>:
{
 80047b4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047b6:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_Init+0x30>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ce:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047d0:	2003      	movs	r0, #3
 80047d2:	f000 f82f 	bl	8004834 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80047d6:	2000      	movs	r0, #0
 80047d8:	f7ff ffc6 	bl	8004768 <HAL_InitTick>
  HAL_MspInit();
 80047dc:	f7ff fcb2 	bl	8004144 <HAL_MspInit>
}
 80047e0:	2000      	movs	r0, #0
 80047e2:	bd08      	pop	{r3, pc}
 80047e4:	40023c00 	.word	0x40023c00

080047e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80047e8:	4a03      	ldr	r2, [pc, #12]	; (80047f8 <HAL_IncTick+0x10>)
 80047ea:	6811      	ldr	r1, [r2, #0]
 80047ec:	4b03      	ldr	r3, [pc, #12]	; (80047fc <HAL_IncTick+0x14>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	440b      	add	r3, r1
 80047f2:	6013      	str	r3, [r2, #0]
}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000e74 	.word	0x20000e74
 80047fc:	20000024 	.word	0x20000024

08004800 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004800:	4b01      	ldr	r3, [pc, #4]	; (8004808 <HAL_GetTick+0x8>)
 8004802:	6818      	ldr	r0, [r3, #0]
}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000e74 	.word	0x20000e74

0800480c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004810:	f7ff fff6 	bl	8004800 <HAL_GetTick>
 8004814:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004816:	f1b4 3fff 	cmp.w	r4, #4294967295
 800481a:	d002      	beq.n	8004822 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800481c:	4b04      	ldr	r3, [pc, #16]	; (8004830 <HAL_Delay+0x24>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004822:	f7ff ffed 	bl	8004800 <HAL_GetTick>
 8004826:	1b40      	subs	r0, r0, r5
 8004828:	42a0      	cmp	r0, r4
 800482a:	d3fa      	bcc.n	8004822 <HAL_Delay+0x16>
  {
  }
}
 800482c:	bd38      	pop	{r3, r4, r5, pc}
 800482e:	bf00      	nop
 8004830:	20000024 	.word	0x20000024

08004834 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004834:	4a07      	ldr	r2, [pc, #28]	; (8004854 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004836:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004838:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800483c:	041b      	lsls	r3, r3, #16
 800483e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004840:	0200      	lsls	r0, r0, #8
 8004842:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004846:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800484c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004850:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004852:	4770      	bx	lr
 8004854:	e000ed00 	.word	0xe000ed00

08004858 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004858:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_NVIC_SetPriority+0x60>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004862:	f1c3 0407 	rsb	r4, r3, #7
 8004866:	2c04      	cmp	r4, #4
 8004868:	bf28      	it	cs
 800486a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800486c:	1d1d      	adds	r5, r3, #4
 800486e:	2d06      	cmp	r5, #6
 8004870:	d918      	bls.n	80048a4 <HAL_NVIC_SetPriority+0x4c>
 8004872:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	f04f 35ff 	mov.w	r5, #4294967295
 8004878:	fa05 f404 	lsl.w	r4, r5, r4
 800487c:	ea21 0104 	bic.w	r1, r1, r4
 8004880:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004882:	fa05 f303 	lsl.w	r3, r5, r3
 8004886:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800488a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800488c:	2800      	cmp	r0, #0
 800488e:	db0b      	blt.n	80048a8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004890:	0109      	lsls	r1, r1, #4
 8004892:	b2c9      	uxtb	r1, r1
 8004894:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004898:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800489c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80048a0:	bc30      	pop	{r4, r5}
 80048a2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048a4:	2300      	movs	r3, #0
 80048a6:	e7e5      	b.n	8004874 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a8:	f000 000f 	and.w	r0, r0, #15
 80048ac:	0109      	lsls	r1, r1, #4
 80048ae:	b2c9      	uxtb	r1, r1
 80048b0:	4b02      	ldr	r3, [pc, #8]	; (80048bc <HAL_NVIC_SetPriority+0x64>)
 80048b2:	5419      	strb	r1, [r3, r0]
 80048b4:	e7f4      	b.n	80048a0 <HAL_NVIC_SetPriority+0x48>
 80048b6:	bf00      	nop
 80048b8:	e000ed00 	.word	0xe000ed00
 80048bc:	e000ed14 	.word	0xe000ed14

080048c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80048c0:	2800      	cmp	r0, #0
 80048c2:	db07      	blt.n	80048d4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048c4:	f000 021f 	and.w	r2, r0, #31
 80048c8:	0940      	lsrs	r0, r0, #5
 80048ca:	2301      	movs	r3, #1
 80048cc:	4093      	lsls	r3, r2
 80048ce:	4a02      	ldr	r2, [pc, #8]	; (80048d8 <HAL_NVIC_EnableIRQ+0x18>)
 80048d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	e000e100 	.word	0xe000e100

080048dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048dc:	3801      	subs	r0, #1
 80048de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80048e2:	d20a      	bcs.n	80048fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048e4:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_SYSTICK_Config+0x24>)
 80048e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e8:	4a06      	ldr	r2, [pc, #24]	; (8004904 <HAL_SYSTICK_Config+0x28>)
 80048ea:	21f0      	movs	r1, #240	; 0xf0
 80048ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048f0:	2000      	movs	r0, #0
 80048f2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048f4:	2207      	movs	r2, #7
 80048f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80048fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	e000e010 	.word	0xe000e010
 8004904:	e000ed00 	.word	0xe000ed00

08004908 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800490c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 800490e:	f7ff ff77 	bl	8004800 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004912:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d006      	beq.n	800492a <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	6563      	str	r3, [r4, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004920:	2300      	movs	r3, #0
 8004922:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    
    return HAL_ERROR;
 8004926:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8004928:	bd70      	pop	{r4, r5, r6, pc}
 800492a:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	6813      	ldr	r3, [r2, #0]
 8004930:	f023 0316 	bic.w	r3, r3, #22
 8004934:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	6953      	ldr	r3, [r2, #20]
 800493a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800493e:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004940:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004942:	b1e3      	cbz	r3, 800497e <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004944:	6822      	ldr	r2, [r4, #0]
 8004946:	6813      	ldr	r3, [r2, #0]
 8004948:	f023 0308 	bic.w	r3, r3, #8
 800494c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	6813      	ldr	r3, [r2, #0]
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f013 0f01 	tst.w	r3, #1
 8004960:	d011      	beq.n	8004986 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004962:	f7ff ff4d 	bl	8004800 <HAL_GetTick>
 8004966:	1b43      	subs	r3, r0, r5
 8004968:	2b05      	cmp	r3, #5
 800496a:	d9f5      	bls.n	8004958 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800496c:	2320      	movs	r3, #32
 800496e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004970:	2003      	movs	r0, #3
 8004972:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004976:	2300      	movs	r3, #0
 8004978:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800497c:	e7d4      	b.n	8004928 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800497e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1df      	bne.n	8004944 <HAL_DMA_Abort+0x3c>
 8004984:	e7e3      	b.n	800494e <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004986:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004988:	233f      	movs	r3, #63	; 0x3f
 800498a:	4093      	lsls	r3, r2
 800498c:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800498e:	2301      	movs	r3, #1
 8004990:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004994:	2000      	movs	r0, #0
 8004996:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 800499a:	e7c5      	b.n	8004928 <HAL_DMA_Abort+0x20>

0800499c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800499c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d003      	beq.n	80049ae <HAL_DMA_Abort_IT+0x12>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80049aa:	2001      	movs	r0, #1
 80049ac:	4770      	bx	lr
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80049ae:	2305      	movs	r3, #5
 80049b0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80049b4:	6802      	ldr	r2, [r0, #0]
 80049b6:	6813      	ldr	r3, [r2, #0]
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049be:	2000      	movs	r0, #0
}
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049c4:	2300      	movs	r3, #0
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	f200 80cb 	bhi.w	8004b62 <HAL_GPIO_Init+0x19e>
{
 80049cc:	b4f0      	push	{r4, r5, r6, r7}
 80049ce:	b082      	sub	sp, #8
 80049d0:	e05d      	b.n	8004a8e <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049d2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049d4:	005f      	lsls	r7, r3, #1
 80049d6:	2403      	movs	r4, #3
 80049d8:	40bc      	lsls	r4, r7
 80049da:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049de:	68cc      	ldr	r4, [r1, #12]
 80049e0:	40bc      	lsls	r4, r7
 80049e2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80049e4:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049e6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049e8:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ec:	684c      	ldr	r4, [r1, #4]
 80049ee:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80049f2:	409a      	lsls	r2, r3
 80049f4:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80049f6:	6042      	str	r2, [r0, #4]
 80049f8:	e057      	b.n	8004aaa <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049fa:	08dc      	lsrs	r4, r3, #3
 80049fc:	3408      	adds	r4, #8
 80049fe:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a02:	f003 0207 	and.w	r2, r3, #7
 8004a06:	0096      	lsls	r6, r2, #2
 8004a08:	220f      	movs	r2, #15
 8004a0a:	40b2      	lsls	r2, r6
 8004a0c:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a10:	690a      	ldr	r2, [r1, #16]
 8004a12:	40b2      	lsls	r2, r6
 8004a14:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8004a16:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8004a1a:	e05a      	b.n	8004ad2 <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	e000      	b.n	8004a22 <HAL_GPIO_Init+0x5e>
 8004a20:	2200      	movs	r2, #0
 8004a22:	40b2      	lsls	r2, r6
 8004a24:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a26:	3402      	adds	r4, #2
 8004a28:	4e4e      	ldr	r6, [pc, #312]	; (8004b64 <HAL_GPIO_Init+0x1a0>)
 8004a2a:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a2e:	4a4e      	ldr	r2, [pc, #312]	; (8004b68 <HAL_GPIO_Init+0x1a4>)
 8004a30:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004a32:	43ea      	mvns	r2, r5
 8004a34:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a38:	684f      	ldr	r7, [r1, #4]
 8004a3a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8004a3e:	d001      	beq.n	8004a44 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 8004a40:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8004a44:	4c48      	ldr	r4, [pc, #288]	; (8004b68 <HAL_GPIO_Init+0x1a4>)
 8004a46:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8004a48:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8004a4a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a4e:	684f      	ldr	r7, [r1, #4]
 8004a50:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004a54:	d001      	beq.n	8004a5a <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8004a56:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8004a5a:	4c43      	ldr	r4, [pc, #268]	; (8004b68 <HAL_GPIO_Init+0x1a4>)
 8004a5c:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a5e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004a60:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a64:	684f      	ldr	r7, [r1, #4]
 8004a66:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004a6a:	d001      	beq.n	8004a70 <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8004a6c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8004a70:	4c3d      	ldr	r4, [pc, #244]	; (8004b68 <HAL_GPIO_Init+0x1a4>)
 8004a72:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8004a74:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8004a76:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a78:	684e      	ldr	r6, [r1, #4]
 8004a7a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8004a7e:	d001      	beq.n	8004a84 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 8004a80:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8004a84:	4c38      	ldr	r4, [pc, #224]	; (8004b68 <HAL_GPIO_Init+0x1a4>)
 8004a86:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a88:	3301      	adds	r3, #1
 8004a8a:	2b0f      	cmp	r3, #15
 8004a8c:	d866      	bhi.n	8004b5c <HAL_GPIO_Init+0x198>
    ioposition = 0x01U << position;
 8004a8e:	2201      	movs	r2, #1
 8004a90:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a92:	680c      	ldr	r4, [r1, #0]
 8004a94:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8004a98:	ea32 0404 	bics.w	r4, r2, r4
 8004a9c:	d1f4      	bne.n	8004a88 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a9e:	684c      	ldr	r4, [r1, #4]
 8004aa0:	f004 0403 	and.w	r4, r4, #3
 8004aa4:	3c01      	subs	r4, #1
 8004aa6:	2c01      	cmp	r4, #1
 8004aa8:	d993      	bls.n	80049d2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aaa:	684a      	ldr	r2, [r1, #4]
 8004aac:	f002 0203 	and.w	r2, r2, #3
 8004ab0:	2a03      	cmp	r2, #3
 8004ab2:	d009      	beq.n	8004ac8 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8004ab4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ab6:	005e      	lsls	r6, r3, #1
 8004ab8:	2203      	movs	r2, #3
 8004aba:	40b2      	lsls	r2, r6
 8004abc:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ac0:	688a      	ldr	r2, [r1, #8]
 8004ac2:	40b2      	lsls	r2, r6
 8004ac4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8004ac6:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac8:	684a      	ldr	r2, [r1, #4]
 8004aca:	f002 0203 	and.w	r2, r2, #3
 8004ace:	2a02      	cmp	r2, #2
 8004ad0:	d093      	beq.n	80049fa <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8004ad2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ad4:	005e      	lsls	r6, r3, #1
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	40b2      	lsls	r2, r6
 8004ada:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ade:	684a      	ldr	r2, [r1, #4]
 8004ae0:	f002 0203 	and.w	r2, r2, #3
 8004ae4:	40b2      	lsls	r2, r6
 8004ae6:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004ae8:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aea:	684a      	ldr	r2, [r1, #4]
 8004aec:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8004af0:	d0ca      	beq.n	8004a88 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af2:	2200      	movs	r2, #0
 8004af4:	9201      	str	r2, [sp, #4]
 8004af6:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <HAL_GPIO_Init+0x1a8>)
 8004af8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8004afa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004afe:	6454      	str	r4, [r2, #68]	; 0x44
 8004b00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004b06:	9201      	str	r2, [sp, #4]
 8004b08:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004b0a:	089c      	lsrs	r4, r3, #2
 8004b0c:	1ca6      	adds	r6, r4, #2
 8004b0e:	4a15      	ldr	r2, [pc, #84]	; (8004b64 <HAL_GPIO_Init+0x1a0>)
 8004b10:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b14:	f003 0203 	and.w	r2, r3, #3
 8004b18:	0096      	lsls	r6, r2, #2
 8004b1a:	220f      	movs	r2, #15
 8004b1c:	40b2      	lsls	r2, r6
 8004b1e:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b22:	4a13      	ldr	r2, [pc, #76]	; (8004b70 <HAL_GPIO_Init+0x1ac>)
 8004b24:	4290      	cmp	r0, r2
 8004b26:	f43f af7b 	beq.w	8004a20 <HAL_GPIO_Init+0x5c>
 8004b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b2e:	4290      	cmp	r0, r2
 8004b30:	d00e      	beq.n	8004b50 <HAL_GPIO_Init+0x18c>
 8004b32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b36:	4290      	cmp	r0, r2
 8004b38:	d00c      	beq.n	8004b54 <HAL_GPIO_Init+0x190>
 8004b3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b3e:	4290      	cmp	r0, r2
 8004b40:	d00a      	beq.n	8004b58 <HAL_GPIO_Init+0x194>
 8004b42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004b46:	4290      	cmp	r0, r2
 8004b48:	f43f af68 	beq.w	8004a1c <HAL_GPIO_Init+0x58>
 8004b4c:	2207      	movs	r2, #7
 8004b4e:	e768      	b.n	8004a22 <HAL_GPIO_Init+0x5e>
 8004b50:	2201      	movs	r2, #1
 8004b52:	e766      	b.n	8004a22 <HAL_GPIO_Init+0x5e>
 8004b54:	2202      	movs	r2, #2
 8004b56:	e764      	b.n	8004a22 <HAL_GPIO_Init+0x5e>
 8004b58:	2203      	movs	r2, #3
 8004b5a:	e762      	b.n	8004a22 <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bcf0      	pop	{r4, r5, r6, r7}
 8004b60:	4770      	bx	lr
 8004b62:	4770      	bx	lr
 8004b64:	40013800 	.word	0x40013800
 8004b68:	40013c00 	.word	0x40013c00
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	40020000 	.word	0x40020000

08004b74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b74:	6903      	ldr	r3, [r0, #16]
 8004b76:	4219      	tst	r1, r3
 8004b78:	d001      	beq.n	8004b7e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8004b7a:	2001      	movs	r0, #1
 8004b7c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b7e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8004b80:	4770      	bx	lr

08004b82 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b82:	b10a      	cbz	r2, 8004b88 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b84:	6181      	str	r1, [r0, #24]
 8004b86:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b88:	0409      	lsls	r1, r1, #16
 8004b8a:	6181      	str	r1, [r0, #24]
  }
}
 8004b8c:	4770      	bx	lr

08004b8e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004b8e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b90:	ea01 0203 	and.w	r2, r1, r3
 8004b94:	ea21 0103 	bic.w	r1, r1, r3
 8004b98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004b9c:	6181      	str	r1, [r0, #24]
}
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ba0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ba2:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	4203      	tst	r3, r0
 8004ba8:	d100      	bne.n	8004bac <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8004baa:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bac:	4b02      	ldr	r3, [pc, #8]	; (8004bb8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004bae:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bb0:	f7fe faaa 	bl	8003108 <HAL_GPIO_EXTI_Callback>
}
 8004bb4:	e7f9      	b.n	8004baa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004bb6:	bf00      	nop
 8004bb8:	40013c00 	.word	0x40013c00

08004bbc <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bbc:	6803      	ldr	r3, [r0, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004bc4:	d101      	bne.n	8004bca <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8004bc6:	2000      	movs	r0, #0
}
 8004bc8:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bce:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bda:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bde:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004be0:	f042 0204 	orr.w	r2, r2, #4
 8004be4:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8004be6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8004bea:	2001      	movs	r0, #1
 8004bec:	4770      	bx	lr

08004bee <I2C_WaitOnFlagUntilTimeout>:
{
 8004bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf2:	4607      	mov	r7, r0
 8004bf4:	460d      	mov	r5, r1
 8004bf6:	4690      	mov	r8, r2
 8004bf8:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bfa:	e022      	b.n	8004c42 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfc:	f7ff fe00 	bl	8004800 <HAL_GetTick>
 8004c00:	9b06      	ldr	r3, [sp, #24]
 8004c02:	1ac0      	subs	r0, r0, r3
 8004c04:	42b0      	cmp	r0, r6
 8004c06:	d800      	bhi.n	8004c0a <I2C_WaitOnFlagUntilTimeout+0x1c>
 8004c08:	b9de      	cbnz	r6, 8004c42 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004c0e:	2220      	movs	r2, #32
 8004c10:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c14:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c1a:	f042 0220 	orr.w	r2, r2, #32
 8004c1e:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004c20:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8004c24:	2001      	movs	r0, #1
 8004c26:	e01a      	b.n	8004c5e <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	699c      	ldr	r4, [r3, #24]
 8004c2c:	ea25 0404 	bic.w	r4, r5, r4
 8004c30:	b2a4      	uxth	r4, r4
 8004c32:	fab4 f484 	clz	r4, r4
 8004c36:	0964      	lsrs	r4, r4, #5
 8004c38:	45a0      	cmp	r8, r4
 8004c3a:	d10f      	bne.n	8004c5c <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8004c3c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004c40:	d1dc      	bne.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c42:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d1ee      	bne.n	8004c28 <I2C_WaitOnFlagUntilTimeout+0x3a>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	695c      	ldr	r4, [r3, #20]
 8004c4e:	ea25 0404 	bic.w	r4, r5, r4
 8004c52:	b2a4      	uxth	r4, r4
 8004c54:	fab4 f484 	clz	r4, r4
 8004c58:	0964      	lsrs	r4, r4, #5
 8004c5a:	e7ed      	b.n	8004c38 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8004c5c:	2000      	movs	r0, #0
}
 8004c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c66:	4605      	mov	r5, r0
 8004c68:	460e      	mov	r6, r1
 8004c6a:	4617      	mov	r7, r2
 8004c6c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c6e:	e03d      	b.n	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c76:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c7e:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c84:	2220      	movs	r2, #32
 8004c86:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c8e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004c90:	f042 0204 	orr.w	r2, r2, #4
 8004c94:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004c96:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	e034      	b.n	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9e:	f7ff fdaf 	bl	8004800 <HAL_GetTick>
 8004ca2:	eba0 0008 	sub.w	r0, r0, r8
 8004ca6:	42b8      	cmp	r0, r7
 8004ca8:	d800      	bhi.n	8004cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8004caa:	b9ff      	cbnz	r7, 8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cba:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004cbc:	f042 0220 	orr.w	r2, r2, #32
 8004cc0:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004cc2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	e01e      	b.n	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cca:	682b      	ldr	r3, [r5, #0]
 8004ccc:	699c      	ldr	r4, [r3, #24]
 8004cce:	ea26 0404 	bic.w	r4, r6, r4
 8004cd2:	b2a4      	uxth	r4, r4
 8004cd4:	3c00      	subs	r4, #0
 8004cd6:	bf18      	it	ne
 8004cd8:	2401      	movne	r4, #1
 8004cda:	b1a4      	cbz	r4, 8004d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004ce4:	d1c4      	bne.n	8004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8004ce6:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004cea:	d1d8      	bne.n	8004c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cec:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d1ea      	bne.n	8004cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	695c      	ldr	r4, [r3, #20]
 8004cf8:	ea26 0404 	bic.w	r4, r6, r4
 8004cfc:	b2a4      	uxth	r4, r4
 8004cfe:	3c00      	subs	r4, #0
 8004d00:	bf18      	it	ne
 8004d02:	2401      	movne	r4, #1
 8004d04:	e7e9      	b.n	8004cda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8004d06:	2000      	movs	r0, #0
}
 8004d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d0c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	4604      	mov	r4, r0
 8004d10:	460d      	mov	r5, r1
 8004d12:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d1c:	d11c      	bne.n	8004d58 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7ff ff4c 	bl	8004bbc <I2C_IsAcknowledgeFailed>
 8004d24:	b9d0      	cbnz	r0, 8004d5c <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004d2a:	d0f3      	beq.n	8004d14 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2c:	f7ff fd68 	bl	8004800 <HAL_GetTick>
 8004d30:	1b80      	subs	r0, r0, r6
 8004d32:	42a8      	cmp	r0, r5
 8004d34:	d801      	bhi.n	8004d3a <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004d36:	2d00      	cmp	r5, #0
 8004d38:	d1ec      	bne.n	8004d14 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d48:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d4a:	f042 0220 	orr.w	r2, r2, #32
 8004d4e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004d50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004d54:	2001      	movs	r0, #1
 8004d56:	e000      	b.n	8004d5a <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004d58:	2000      	movs	r0, #0
}
 8004d5a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	e7fc      	b.n	8004d5a <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08004d60 <I2C_RequestMemoryWrite>:
{
 8004d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d64:	b085      	sub	sp, #20
 8004d66:	4604      	mov	r4, r0
 8004d68:	460d      	mov	r5, r1
 8004d6a:	4691      	mov	r9, r2
 8004d6c:	461f      	mov	r7, r3
 8004d6e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004d72:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d74:	6803      	ldr	r3, [r0, #0]
 8004d76:	6819      	ldr	r1, [r3, #0]
 8004d78:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004d7c:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d7e:	9600      	str	r6, [sp, #0]
 8004d80:	4643      	mov	r3, r8
 8004d82:	2200      	movs	r2, #0
 8004d84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d88:	f7ff ff31 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 8004d8c:	b960      	cbnz	r0, 8004da8 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004d94:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d96:	4633      	mov	r3, r6
 8004d98:	4642      	mov	r2, r8
 8004d9a:	4926      	ldr	r1, [pc, #152]	; (8004e34 <I2C_RequestMemoryWrite+0xd4>)
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7ff ff60 	bl	8004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da2:	b168      	cbz	r0, 8004dc0 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 8004da4:	2001      	movs	r0, #1
 8004da6:	e008      	b.n	8004dba <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004db0:	d002      	beq.n	8004db8 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004db6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004db8:	2003      	movs	r0, #3
}
 8004dba:	b005      	add	sp, #20
 8004dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	9203      	str	r2, [sp, #12]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	9303      	str	r3, [sp, #12]
 8004dce:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f7ff ff99 	bl	8004d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dda:	b930      	cbnz	r0, 8004dea <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ddc:	2f01      	cmp	r7, #1
 8004dde:	d10f      	bne.n	8004e00 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	fa5f f689 	uxtb.w	r6, r9
 8004de6:	611e      	str	r6, [r3, #16]
 8004de8:	e7e7      	b.n	8004dba <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d001      	beq.n	8004df4 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8004df0:	2001      	movs	r0, #1
 8004df2:	e7e2      	b.n	8004dba <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df4:	6822      	ldr	r2, [r4, #0]
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e7f7      	b.n	8004df0 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8004e06:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e08:	4632      	mov	r2, r6
 8004e0a:	4641      	mov	r1, r8
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f7ff ff7d 	bl	8004d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e12:	b920      	cbnz	r0, 8004e1e <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	fa5f f689 	uxtb.w	r6, r9
 8004e1a:	611e      	str	r6, [r3, #16]
 8004e1c:	e7cd      	b.n	8004dba <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d001      	beq.n	8004e28 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8004e24:	2001      	movs	r0, #1
 8004e26:	e7c8      	b.n	8004dba <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	6813      	ldr	r3, [r2, #0]
 8004e2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e7f7      	b.n	8004e24 <I2C_RequestMemoryWrite+0xc4>
 8004e34:	00010002 	.word	0x00010002

08004e38 <I2C_RequestMemoryRead>:
{
 8004e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	4604      	mov	r4, r0
 8004e40:	460d      	mov	r5, r1
 8004e42:	4616      	mov	r6, r2
 8004e44:	4699      	mov	r9, r3
 8004e46:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004e48:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4c:	6802      	ldr	r2, [r0, #0]
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e54:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e56:	6803      	ldr	r3, [r0, #0]
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004e5e:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e60:	f8cd 8000 	str.w	r8, [sp]
 8004e64:	463b      	mov	r3, r7
 8004e66:	2200      	movs	r2, #0
 8004e68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e6c:	f7ff febf 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 8004e70:	b970      	cbnz	r0, 8004e90 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e72:	fa5f fa85 	uxtb.w	sl, r5
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004e7c:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e7e:	4643      	mov	r3, r8
 8004e80:	463a      	mov	r2, r7
 8004e82:	4941      	ldr	r1, [pc, #260]	; (8004f88 <I2C_RequestMemoryRead+0x150>)
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7ff feec 	bl	8004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e8a:	b168      	cbz	r0, 8004ea8 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	e008      	b.n	8004ea2 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004e98:	d002      	beq.n	8004ea0 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e9e:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004ea0:	2003      	movs	r0, #3
}
 8004ea2:	b004      	add	sp, #16
 8004ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	9303      	str	r3, [sp, #12]
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	9203      	str	r2, [sp, #12]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	9303      	str	r3, [sp, #12]
 8004eb6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb8:	4642      	mov	r2, r8
 8004eba:	4639      	mov	r1, r7
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f7ff ff25 	bl	8004d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004ec2:	b980      	cbnz	r0, 8004ee6 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ec4:	f1b9 0f01 	cmp.w	r9, #1
 8004ec8:	d118      	bne.n	8004efc <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	b2f6      	uxtb	r6, r6
 8004ece:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	4639      	mov	r1, r7
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	f7ff ff19 	bl	8004d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004eda:	b368      	cbz	r0, 8004f38 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004edc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d024      	beq.n	8004f2c <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8004ee2:	2001      	movs	r0, #1
 8004ee4:	e7dd      	b.n	8004ea2 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d001      	beq.n	8004ef0 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 8004eec:	2001      	movs	r0, #1
 8004eee:	e7d8      	b.n	8004ea2 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef0:	6822      	ldr	r2, [r4, #0]
 8004ef2:	6813      	ldr	r3, [r2, #0]
 8004ef4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e7f7      	b.n	8004eec <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	0a32      	lsrs	r2, r6, #8
 8004f00:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f02:	4642      	mov	r2, r8
 8004f04:	4639      	mov	r1, r7
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7ff ff00 	bl	8004d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8004f0c:	b918      	cbnz	r0, 8004f16 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	b2f6      	uxtb	r6, r6
 8004f12:	611e      	str	r6, [r3, #16]
 8004f14:	e7dc      	b.n	8004ed0 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d001      	beq.n	8004f20 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	e7c0      	b.n	8004ea2 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f20:	6822      	ldr	r2, [r4, #0]
 8004f22:	6813      	ldr	r3, [r2, #0]
 8004f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e7f7      	b.n	8004f1c <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2c:	6822      	ldr	r2, [r4, #0]
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e7d4      	b.n	8004ee2 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	6813      	ldr	r3, [r2, #0]
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f40:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f42:	f8cd 8000 	str.w	r8, [sp]
 8004f46:	463b      	mov	r3, r7
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f7ff fe4d 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 8004f54:	b968      	cbnz	r0, 8004f72 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f56:	6822      	ldr	r2, [r4, #0]
 8004f58:	f04a 0301 	orr.w	r3, sl, #1
 8004f5c:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f5e:	4643      	mov	r3, r8
 8004f60:	463a      	mov	r2, r7
 8004f62:	4909      	ldr	r1, [pc, #36]	; (8004f88 <I2C_RequestMemoryRead+0x150>)
 8004f64:	4620      	mov	r0, r4
 8004f66:	f7ff fe7c 	bl	8004c62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d099      	beq.n	8004ea2 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 8004f6e:	2001      	movs	r0, #1
 8004f70:	e797      	b.n	8004ea2 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f7a:	d002      	beq.n	8004f82 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f80:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004f82:	2003      	movs	r0, #3
 8004f84:	e78d      	b.n	8004ea2 <I2C_RequestMemoryRead+0x6a>
 8004f86:	bf00      	nop
 8004f88:	00010002 	.word	0x00010002

08004f8c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	4604      	mov	r4, r0
 8004f90:	460d      	mov	r5, r1
 8004f92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f013 0f04 	tst.w	r3, #4
 8004f9c:	d11c      	bne.n	8004fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f7ff fe0c 	bl	8004bbc <I2C_IsAcknowledgeFailed>
 8004fa4:	b9d0      	cbnz	r0, 8004fdc <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004faa:	d0f3      	beq.n	8004f94 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fac:	f7ff fc28 	bl	8004800 <HAL_GetTick>
 8004fb0:	1b80      	subs	r0, r0, r6
 8004fb2:	42a8      	cmp	r0, r5
 8004fb4:	d801      	bhi.n	8004fba <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	d1ec      	bne.n	8004f94 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004fca:	f042 0220 	orr.w	r2, r2, #32
 8004fce:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004fd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	e000      	b.n	8004fda <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004fd8:	2000      	movs	r0, #0
}
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004fdc:	2001      	movs	r0, #1
 8004fde:	e7fc      	b.n	8004fda <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08004fe0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	6959      	ldr	r1, [r3, #20]
 8004fec:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004ff0:	d129      	bne.n	8005046 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ff2:	6959      	ldr	r1, [r3, #20]
 8004ff4:	f011 0f10 	tst.w	r1, #16
 8004ff8:	d115      	bne.n	8005026 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffa:	f7ff fc01 	bl	8004800 <HAL_GetTick>
 8004ffe:	1b80      	subs	r0, r0, r6
 8005000:	42a0      	cmp	r0, r4
 8005002:	d801      	bhi.n	8005008 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 8005004:	2c00      	cmp	r4, #0
 8005006:	d1ef      	bne.n	8004fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005008:	2300      	movs	r3, #0
 800500a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800500c:	2220      	movs	r2, #32
 800500e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005012:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005016:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005018:	f042 0220 	orr.w	r2, r2, #32
 800501c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800501e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8005022:	2001      	movs	r0, #1
}
 8005024:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005026:	f06f 0210 	mvn.w	r2, #16
 800502a:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800502c:	2300      	movs	r3, #0
 800502e:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005030:	2220      	movs	r2, #32
 8005032:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005036:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800503a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800503c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800503e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8005042:	2001      	movs	r0, #1
 8005044:	e7ee      	b.n	8005024 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8005046:	2000      	movs	r0, #0
 8005048:	e7ec      	b.n	8005024 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

0800504c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800504c:	2800      	cmp	r0, #0
 800504e:	f000 80cc 	beq.w	80051ea <HAL_I2C_Init+0x19e>
{
 8005052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005054:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005056:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800505a:	2b00      	cmp	r3, #0
 800505c:	d077      	beq.n	800514e <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800505e:	2324      	movs	r3, #36	; 0x24
 8005060:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	6813      	ldr	r3, [r2, #0]
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	6813      	ldr	r3, [r2, #0]
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005078:	6822      	ldr	r2, [r4, #0]
 800507a:	6813      	ldr	r3, [r2, #0]
 800507c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005080:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005082:	f000 fde7 	bl	8005c54 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005086:	6862      	ldr	r2, [r4, #4]
 8005088:	4b5a      	ldr	r3, [pc, #360]	; (80051f4 <HAL_I2C_Init+0x1a8>)
 800508a:	429a      	cmp	r2, r3
 800508c:	d864      	bhi.n	8005158 <HAL_I2C_Init+0x10c>
 800508e:	4b5a      	ldr	r3, [pc, #360]	; (80051f8 <HAL_I2C_Init+0x1ac>)
 8005090:	4298      	cmp	r0, r3
 8005092:	bf8c      	ite	hi
 8005094:	2300      	movhi	r3, #0
 8005096:	2301      	movls	r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	f040 80a8 	bne.w	80051ee <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 800509e:	4d57      	ldr	r5, [pc, #348]	; (80051fc <HAL_I2C_Init+0x1b0>)
 80050a0:	fba5 3500 	umull	r3, r5, r5, r0
 80050a4:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80050a6:	6826      	ldr	r6, [r4, #0]
 80050a8:	6871      	ldr	r1, [r6, #4]
 80050aa:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80050ae:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80050b2:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050b4:	6821      	ldr	r1, [r4, #0]
 80050b6:	6a0b      	ldr	r3, [r1, #32]
 80050b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80050bc:	6865      	ldr	r5, [r4, #4]
 80050be:	4a4d      	ldr	r2, [pc, #308]	; (80051f4 <HAL_I2C_Init+0x1a8>)
 80050c0:	4295      	cmp	r5, r2
 80050c2:	d84f      	bhi.n	8005164 <HAL_I2C_Init+0x118>
 80050c4:	1c7a      	adds	r2, r7, #1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050ca:	6825      	ldr	r5, [r4, #0]
 80050cc:	69e9      	ldr	r1, [r5, #28]
 80050ce:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80050d2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80050d6:	6863      	ldr	r3, [r4, #4]
 80050d8:	4a46      	ldr	r2, [pc, #280]	; (80051f4 <HAL_I2C_Init+0x1a8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d84c      	bhi.n	8005178 <HAL_I2C_Init+0x12c>
 80050de:	3801      	subs	r0, #1
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80050e6:	3001      	adds	r0, #1
 80050e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050ec:	4218      	tst	r0, r3
 80050ee:	d078      	beq.n	80051e2 <HAL_I2C_Init+0x196>
 80050f0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80050f4:	430b      	orrs	r3, r1
 80050f6:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050f8:	6821      	ldr	r1, [r4, #0]
 80050fa:	680b      	ldr	r3, [r1, #0]
 80050fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005100:	69e2      	ldr	r2, [r4, #28]
 8005102:	6a20      	ldr	r0, [r4, #32]
 8005104:	4302      	orrs	r2, r0
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800510a:	6821      	ldr	r1, [r4, #0]
 800510c:	688b      	ldr	r3, [r1, #8]
 800510e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005112:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005116:	6922      	ldr	r2, [r4, #16]
 8005118:	68e0      	ldr	r0, [r4, #12]
 800511a:	4302      	orrs	r2, r0
 800511c:	4313      	orrs	r3, r2
 800511e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005120:	6821      	ldr	r1, [r4, #0]
 8005122:	68cb      	ldr	r3, [r1, #12]
 8005124:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005128:	6962      	ldr	r2, [r4, #20]
 800512a:	69a0      	ldr	r0, [r4, #24]
 800512c:	4302      	orrs	r2, r0
 800512e:	4313      	orrs	r3, r2
 8005130:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8005132:	6822      	ldr	r2, [r4, #0]
 8005134:	6813      	ldr	r3, [r2, #0]
 8005136:	f043 0301 	orr.w	r3, r3, #1
 800513a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800513c:	2000      	movs	r0, #0
 800513e:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005140:	2320      	movs	r3, #32
 8005142:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005146:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005148:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800514c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800514e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005152:	f7ff f813 	bl	800417c <HAL_I2C_MspInit>
 8005156:	e782      	b.n	800505e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005158:	4b29      	ldr	r3, [pc, #164]	; (8005200 <HAL_I2C_Init+0x1b4>)
 800515a:	4298      	cmp	r0, r3
 800515c:	bf8c      	ite	hi
 800515e:	2300      	movhi	r3, #0
 8005160:	2301      	movls	r3, #1
 8005162:	e799      	b.n	8005098 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005164:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005168:	fb02 f207 	mul.w	r2, r2, r7
 800516c:	4d25      	ldr	r5, [pc, #148]	; (8005204 <HAL_I2C_Init+0x1b8>)
 800516e:	fba5 5202 	umull	r5, r2, r5, r2
 8005172:	0992      	lsrs	r2, r2, #6
 8005174:	3201      	adds	r2, #1
 8005176:	e7a6      	b.n	80050c6 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005178:	68a2      	ldr	r2, [r4, #8]
 800517a:	b9ba      	cbnz	r2, 80051ac <HAL_I2C_Init+0x160>
 800517c:	1e46      	subs	r6, r0, #1
 800517e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8005182:	fbb6 f6f7 	udiv	r6, r6, r7
 8005186:	3601      	adds	r6, #1
 8005188:	f3c6 060b 	ubfx	r6, r6, #0, #12
 800518c:	fab6 f686 	clz	r6, r6
 8005190:	0976      	lsrs	r6, r6, #5
 8005192:	bb46      	cbnz	r6, 80051e6 <HAL_I2C_Init+0x19a>
 8005194:	b9c2      	cbnz	r2, 80051c8 <HAL_I2C_Init+0x17c>
 8005196:	1e42      	subs	r2, r0, #1
 8005198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800519c:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a0:	3201      	adds	r2, #1
 80051a2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80051a6:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80051aa:	e7a3      	b.n	80050f4 <HAL_I2C_Init+0xa8>
 80051ac:	1e46      	subs	r6, r0, #1
 80051ae:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80051b2:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80051b6:	fbb6 f6f7 	udiv	r6, r6, r7
 80051ba:	3601      	adds	r6, #1
 80051bc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80051c0:	fab6 f686 	clz	r6, r6
 80051c4:	0976      	lsrs	r6, r6, #5
 80051c6:	e7e4      	b.n	8005192 <HAL_I2C_Init+0x146>
 80051c8:	1e42      	subs	r2, r0, #1
 80051ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80051d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80051d6:	3201      	adds	r2, #1
 80051d8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80051dc:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80051e0:	e788      	b.n	80050f4 <HAL_I2C_Init+0xa8>
 80051e2:	2304      	movs	r3, #4
 80051e4:	e786      	b.n	80050f4 <HAL_I2C_Init+0xa8>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e784      	b.n	80050f4 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80051ea:	2001      	movs	r0, #1
}
 80051ec:	4770      	bx	lr
    return HAL_ERROR;
 80051ee:	2001      	movs	r0, #1
 80051f0:	e7ac      	b.n	800514c <HAL_I2C_Init+0x100>
 80051f2:	bf00      	nop
 80051f4:	000186a0 	.word	0x000186a0
 80051f8:	001e847f 	.word	0x001e847f
 80051fc:	431bde83 	.word	0x431bde83
 8005200:	003d08ff 	.word	0x003d08ff
 8005204:	10624dd3 	.word	0x10624dd3

08005208 <HAL_I2C_Mem_Write>:
{
 8005208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800520c:	b083      	sub	sp, #12
 800520e:	4604      	mov	r4, r0
 8005210:	460f      	mov	r7, r1
 8005212:	4690      	mov	r8, r2
 8005214:	4699      	mov	r9, r3
 8005216:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005218:	f7ff faf2 	bl	8004800 <HAL_GetTick>
 800521c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800521e:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8005222:	b2c0      	uxtb	r0, r0
 8005224:	2820      	cmp	r0, #32
 8005226:	d003      	beq.n	8005230 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8005228:	2002      	movs	r0, #2
}
 800522a:	b003      	add	sp, #12
 800522c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005230:	9500      	str	r5, [sp, #0]
 8005232:	2319      	movs	r3, #25
 8005234:	2201      	movs	r2, #1
 8005236:	494b      	ldr	r1, [pc, #300]	; (8005364 <HAL_I2C_Mem_Write+0x15c>)
 8005238:	4620      	mov	r0, r4
 800523a:	f7ff fcd8 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 800523e:	2800      	cmp	r0, #0
 8005240:	f040 8089 	bne.w	8005356 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8005244:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005248:	2b01      	cmp	r3, #1
 800524a:	f000 8086 	beq.w	800535a <HAL_I2C_Mem_Write+0x152>
 800524e:	2301      	movs	r3, #1
 8005250:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	f012 0f01 	tst.w	r2, #1
 800525c:	d103      	bne.n	8005266 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	f042 0201 	orr.w	r2, r2, #1
 8005264:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005266:	6822      	ldr	r2, [r4, #0]
 8005268:	6813      	ldr	r3, [r2, #0]
 800526a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800526e:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005270:	2321      	movs	r3, #33	; 0x21
 8005272:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005276:	2340      	movs	r3, #64	; 0x40
 8005278:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800527c:	2300      	movs	r3, #0
 800527e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005282:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005284:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8005288:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800528a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800528c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800528e:	4b36      	ldr	r3, [pc, #216]	; (8005368 <HAL_I2C_Mem_Write+0x160>)
 8005290:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005292:	9501      	str	r5, [sp, #4]
 8005294:	9600      	str	r6, [sp, #0]
 8005296:	464b      	mov	r3, r9
 8005298:	4642      	mov	r2, r8
 800529a:	4639      	mov	r1, r7
 800529c:	4620      	mov	r0, r4
 800529e:	f7ff fd5f 	bl	8004d60 <I2C_RequestMemoryWrite>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d15b      	bne.n	800535e <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80052a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d035      	beq.n	8005318 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ac:	462a      	mov	r2, r5
 80052ae:	4631      	mov	r1, r6
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7ff fd2b 	bl	8004d0c <I2C_WaitOnTXEFlagUntilTimeout>
 80052b6:	bb20      	cbnz	r0, 8005302 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	7812      	ldrb	r2, [r2, #0]
 80052be:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80052c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80052c2:	1c4b      	adds	r3, r1, #1
 80052c4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80052c6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80052c8:	3a01      	subs	r2, #1
 80052ca:	b292      	uxth	r2, r2
 80052cc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80052ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	6958      	ldr	r0, [r3, #20]
 80052dc:	f010 0f04 	tst.w	r0, #4
 80052e0:	d0e1      	beq.n	80052a6 <HAL_I2C_Mem_Write+0x9e>
 80052e2:	2a00      	cmp	r2, #0
 80052e4:	d0df      	beq.n	80052a6 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052e6:	784a      	ldrb	r2, [r1, #1]
 80052e8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80052ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ec:	3301      	adds	r3, #1
 80052ee:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80052f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80052f2:	3b01      	subs	r3, #1
 80052f4:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80052f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005300:	e7d1      	b.n	80052a6 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005304:	2b04      	cmp	r3, #4
 8005306:	d001      	beq.n	800530c <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8005308:	2001      	movs	r0, #1
 800530a:	e78e      	b.n	800522a <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530c:	6822      	ldr	r2, [r4, #0]
 800530e:	6813      	ldr	r3, [r2, #0]
 8005310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	e7f7      	b.n	8005308 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005318:	462a      	mov	r2, r5
 800531a:	4631      	mov	r1, r6
 800531c:	4620      	mov	r0, r4
 800531e:	f7ff fe35 	bl	8004f8c <I2C_WaitOnBTFFlagUntilTimeout>
 8005322:	b150      	cbz	r0, 800533a <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005324:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005326:	2b04      	cmp	r3, #4
 8005328:	d001      	beq.n	800532e <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 800532a:	2001      	movs	r0, #1
 800532c:	e77d      	b.n	800522a <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532e:	6822      	ldr	r2, [r4, #0]
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e7f7      	b.n	800532a <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800533a:	6822      	ldr	r2, [r4, #0]
 800533c:	6813      	ldr	r3, [r2, #0]
 800533e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005342:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005344:	2320      	movs	r3, #32
 8005346:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800534a:	2300      	movs	r3, #0
 800534c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005350:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005354:	e769      	b.n	800522a <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8005356:	2002      	movs	r0, #2
 8005358:	e767      	b.n	800522a <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 800535a:	2002      	movs	r0, #2
 800535c:	e765      	b.n	800522a <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 800535e:	2001      	movs	r0, #1
 8005360:	e763      	b.n	800522a <HAL_I2C_Mem_Write+0x22>
 8005362:	bf00      	nop
 8005364:	00100002 	.word	0x00100002
 8005368:	ffff0000 	.word	0xffff0000

0800536c <HAL_I2C_Mem_Read>:
{
 800536c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005370:	b087      	sub	sp, #28
 8005372:	4604      	mov	r4, r0
 8005374:	460f      	mov	r7, r1
 8005376:	4690      	mov	r8, r2
 8005378:	4699      	mov	r9, r3
 800537a:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800537c:	f7ff fa40 	bl	8004800 <HAL_GetTick>
 8005380:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005382:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8005386:	b2c0      	uxtb	r0, r0
 8005388:	2820      	cmp	r0, #32
 800538a:	d004      	beq.n	8005396 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 800538c:	2702      	movs	r7, #2
}
 800538e:	4638      	mov	r0, r7
 8005390:	b007      	add	sp, #28
 8005392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005396:	9500      	str	r5, [sp, #0]
 8005398:	2319      	movs	r3, #25
 800539a:	2201      	movs	r2, #1
 800539c:	499d      	ldr	r1, [pc, #628]	; (8005614 <HAL_I2C_Mem_Read+0x2a8>)
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff fc25 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	f040 8144 	bne.w	8005632 <HAL_I2C_Mem_Read+0x2c6>
    __HAL_LOCK(hi2c);
 80053aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	f000 8141 	beq.w	8005636 <HAL_I2C_Mem_Read+0x2ca>
 80053b4:	2301      	movs	r3, #1
 80053b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	f012 0f01 	tst.w	r2, #1
 80053c2:	d103      	bne.n	80053cc <HAL_I2C_Mem_Read+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053cc:	6822      	ldr	r2, [r4, #0]
 80053ce:	6813      	ldr	r3, [r2, #0]
 80053d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053d4:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053d6:	2322      	movs	r3, #34	; 0x22
 80053d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053dc:	2340      	movs	r3, #64	; 0x40
 80053de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80053e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053e8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053ea:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80053ee:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053f2:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053f4:	4b88      	ldr	r3, [pc, #544]	; (8005618 <HAL_I2C_Mem_Read+0x2ac>)
 80053f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053f8:	9501      	str	r5, [sp, #4]
 80053fa:	9600      	str	r6, [sp, #0]
 80053fc:	464b      	mov	r3, r9
 80053fe:	4642      	mov	r2, r8
 8005400:	4639      	mov	r1, r7
 8005402:	4620      	mov	r0, r4
 8005404:	f7ff fd18 	bl	8004e38 <I2C_RequestMemoryRead>
 8005408:	4607      	mov	r7, r0
 800540a:	2800      	cmp	r0, #0
 800540c:	f040 8115 	bne.w	800563a <HAL_I2C_Mem_Read+0x2ce>
    if (hi2c->XferSize == 0U)
 8005410:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005412:	b95b      	cbnz	r3, 800542c <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005414:	9302      	str	r3, [sp, #8]
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	9202      	str	r2, [sp, #8]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	9202      	str	r2, [sp, #8]
 8005420:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e098      	b.n	800555e <HAL_I2C_Mem_Read+0x1f2>
    else if (hi2c->XferSize == 1U)
 800542c:	2b01      	cmp	r3, #1
 800542e:	d00a      	beq.n	8005446 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8005430:	2b02      	cmp	r3, #2
 8005432:	d01a      	beq.n	800546a <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005434:	2300      	movs	r3, #0
 8005436:	9305      	str	r3, [sp, #20]
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	9205      	str	r2, [sp, #20]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	9305      	str	r3, [sp, #20]
 8005442:	9b05      	ldr	r3, [sp, #20]
 8005444:	e08b      	b.n	800555e <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	6813      	ldr	r3, [r2, #0]
 800544a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800544e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005450:	2300      	movs	r3, #0
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	9203      	str	r2, [sp, #12]
 800545a:	699a      	ldr	r2, [r3, #24]
 800545c:	9203      	str	r2, [sp, #12]
 800545e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e079      	b.n	800555e <HAL_I2C_Mem_Read+0x1f2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546a:	6822      	ldr	r2, [r4, #0]
 800546c:	6813      	ldr	r3, [r2, #0]
 800546e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005472:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800547c:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547e:	2300      	movs	r3, #0
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	6823      	ldr	r3, [r4, #0]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	9204      	str	r2, [sp, #16]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	9304      	str	r3, [sp, #16]
 800548c:	9b04      	ldr	r3, [sp, #16]
 800548e:	e066      	b.n	800555e <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005490:	462a      	mov	r2, r5
 8005492:	4631      	mov	r1, r6
 8005494:	4620      	mov	r0, r4
 8005496:	f7ff fda3 	bl	8004fe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800549a:	2800      	cmp	r0, #0
 800549c:	f040 80cf 	bne.w	800563e <HAL_I2C_Mem_Read+0x2d2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054a6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80054a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054aa:	3301      	adds	r3, #1
 80054ac:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80054ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054b0:	3b01      	subs	r3, #1
 80054b2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80054b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80054be:	e04e      	b.n	800555e <HAL_I2C_Mem_Read+0x1f2>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054c0:	9500      	str	r5, [sp, #0]
 80054c2:	4633      	mov	r3, r6
 80054c4:	2200      	movs	r2, #0
 80054c6:	4955      	ldr	r1, [pc, #340]	; (800561c <HAL_I2C_Mem_Read+0x2b0>)
 80054c8:	4620      	mov	r0, r4
 80054ca:	f7ff fb90 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f040 80b7 	bne.w	8005642 <HAL_I2C_Mem_Read+0x2d6>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	6813      	ldr	r3, [r2, #0]
 80054d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054dc:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	691a      	ldr	r2, [r3, #16]
 80054e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80054e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80054e8:	1c53      	adds	r3, r2, #1
 80054ea:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80054ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80054ee:	3b01      	subs	r3, #1
 80054f0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80054f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005504:	3301      	adds	r3, #1
 8005506:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005508:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800550a:	3b01      	subs	r3, #1
 800550c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800550e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005510:	b29b      	uxth	r3, r3
 8005512:	3b01      	subs	r3, #1
 8005514:	b29b      	uxth	r3, r3
 8005516:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005518:	e021      	b.n	800555e <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	6813      	ldr	r3, [r2, #0]
 800551e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005522:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800552c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800552e:	1c53      	adds	r3, r2, #1
 8005530:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005532:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005534:	3b01      	subs	r3, #1
 8005536:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005538:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29b      	uxth	r3, r3
 8005540:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8005548:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800554a:	3301      	adds	r3, #1
 800554c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800554e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005550:	3b01      	subs	r3, #1
 8005552:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005554:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29b      	uxth	r3, r3
 800555c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800555e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	d05d      	beq.n	8005620 <HAL_I2C_Mem_Read+0x2b4>
      if (hi2c->XferSize <= 3U)
 8005564:	2b03      	cmp	r3, #3
 8005566:	d82b      	bhi.n	80055c0 <HAL_I2C_Mem_Read+0x254>
        if (hi2c->XferSize == 1U)
 8005568:	2b01      	cmp	r3, #1
 800556a:	d091      	beq.n	8005490 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 800556c:	2b02      	cmp	r3, #2
 800556e:	d0a7      	beq.n	80054c0 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005570:	9500      	str	r5, [sp, #0]
 8005572:	4633      	mov	r3, r6
 8005574:	2200      	movs	r2, #0
 8005576:	4929      	ldr	r1, [pc, #164]	; (800561c <HAL_I2C_Mem_Read+0x2b0>)
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff fb38 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 800557e:	2800      	cmp	r0, #0
 8005580:	d161      	bne.n	8005646 <HAL_I2C_Mem_Read+0x2da>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	6813      	ldr	r3, [r2, #0]
 8005586:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800558a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005592:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005596:	3301      	adds	r3, #1
 8005598:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800559a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800559c:	3b01      	subs	r3, #1
 800559e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80055a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	3b01      	subs	r3, #1
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055aa:	9500      	str	r5, [sp, #0]
 80055ac:	4633      	mov	r3, r6
 80055ae:	2200      	movs	r2, #0
 80055b0:	491a      	ldr	r1, [pc, #104]	; (800561c <HAL_I2C_Mem_Read+0x2b0>)
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff fb1b 	bl	8004bee <I2C_WaitOnFlagUntilTimeout>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d0ae      	beq.n	800551a <HAL_I2C_Mem_Read+0x1ae>
            return HAL_ERROR;
 80055bc:	2701      	movs	r7, #1
 80055be:	e6e6      	b.n	800538e <HAL_I2C_Mem_Read+0x22>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c0:	462a      	mov	r2, r5
 80055c2:	4631      	mov	r1, r6
 80055c4:	4620      	mov	r0, r4
 80055c6:	f7ff fd0b 	bl	8004fe0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	d13d      	bne.n	800564a <HAL_I2C_Mem_Read+0x2de>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80055d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055d8:	1c53      	adds	r3, r2, #1
 80055da:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80055dc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80055de:	3b01      	subs	r3, #1
 80055e0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80055e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	6959      	ldr	r1, [r3, #20]
 80055f0:	f011 0f04 	tst.w	r1, #4
 80055f4:	d0b3      	beq.n	800555e <HAL_I2C_Mem_Read+0x1f2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80055fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055fc:	3301      	adds	r3, #1
 80055fe:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005600:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005602:	3b01      	subs	r3, #1
 8005604:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005606:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29b      	uxth	r3, r3
 800560e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005610:	e7a5      	b.n	800555e <HAL_I2C_Mem_Read+0x1f2>
 8005612:	bf00      	nop
 8005614:	00100002 	.word	0x00100002
 8005618:	ffff0000 	.word	0xffff0000
 800561c:	00010004 	.word	0x00010004
    hi2c->State = HAL_I2C_STATE_READY;
 8005620:	2320      	movs	r3, #32
 8005622:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005626:	2300      	movs	r3, #0
 8005628:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 800562c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005630:	e6ad      	b.n	800538e <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 8005632:	2702      	movs	r7, #2
 8005634:	e6ab      	b.n	800538e <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8005636:	2702      	movs	r7, #2
 8005638:	e6a9      	b.n	800538e <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 800563a:	2701      	movs	r7, #1
 800563c:	e6a7      	b.n	800538e <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 800563e:	2701      	movs	r7, #1
 8005640:	e6a5      	b.n	800538e <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8005642:	2701      	movs	r7, #1
 8005644:	e6a3      	b.n	800538e <HAL_I2C_Mem_Read+0x22>
            return HAL_ERROR;
 8005646:	2701      	movs	r7, #1
 8005648:	e6a1      	b.n	800538e <HAL_I2C_Mem_Read+0x22>
          return HAL_ERROR;
 800564a:	2701      	movs	r7, #1
 800564c:	e69f      	b.n	800538e <HAL_I2C_Mem_Read+0x22>
 800564e:	bf00      	nop

08005650 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005650:	2800      	cmp	r0, #0
 8005652:	f000 81df 	beq.w	8005a14 <HAL_RCC_OscConfig+0x3c4>
{
 8005656:	b570      	push	{r4, r5, r6, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800565c:	6803      	ldr	r3, [r0, #0]
 800565e:	f013 0f01 	tst.w	r3, #1
 8005662:	d03b      	beq.n	80056dc <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005664:	4ba6      	ldr	r3, [pc, #664]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 030c 	and.w	r3, r3, #12
 800566c:	2b04      	cmp	r3, #4
 800566e:	d02c      	beq.n	80056ca <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005670:	4ba3      	ldr	r3, [pc, #652]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005678:	2b08      	cmp	r3, #8
 800567a:	d021      	beq.n	80056c0 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567c:	6863      	ldr	r3, [r4, #4]
 800567e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005682:	d04f      	beq.n	8005724 <HAL_RCC_OscConfig+0xd4>
 8005684:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005688:	d052      	beq.n	8005730 <HAL_RCC_OscConfig+0xe0>
 800568a:	4b9d      	ldr	r3, [pc, #628]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800569a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800569c:	6863      	ldr	r3, [r4, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d050      	beq.n	8005744 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a2:	f7ff f8ad 	bl	8004800 <HAL_GetTick>
 80056a6:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a8:	4b95      	ldr	r3, [pc, #596]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80056b0:	d114      	bne.n	80056dc <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b2:	f7ff f8a5 	bl	8004800 <HAL_GetTick>
 80056b6:	1b40      	subs	r0, r0, r5
 80056b8:	2864      	cmp	r0, #100	; 0x64
 80056ba:	d9f5      	bls.n	80056a8 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80056bc:	2003      	movs	r0, #3
 80056be:	e1b0      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c0:	4b8f      	ldr	r3, [pc, #572]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80056c8:	d0d8      	beq.n	800567c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ca:	4b8d      	ldr	r3, [pc, #564]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80056d2:	d003      	beq.n	80056dc <HAL_RCC_OscConfig+0x8c>
 80056d4:	6863      	ldr	r3, [r4, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 819e 	beq.w	8005a18 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	f013 0f02 	tst.w	r3, #2
 80056e2:	d054      	beq.n	800578e <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056e4:	4b86      	ldr	r3, [pc, #536]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f013 0f0c 	tst.w	r3, #12
 80056ec:	d03e      	beq.n	800576c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ee:	4b84      	ldr	r3, [pc, #528]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	d033      	beq.n	8005762 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056fa:	68e3      	ldr	r3, [r4, #12]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d067      	beq.n	80057d0 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005700:	4b80      	ldr	r3, [pc, #512]	; (8005904 <HAL_RCC_OscConfig+0x2b4>)
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7ff f87b 	bl	8004800 <HAL_GetTick>
 800570a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800570c:	4b7c      	ldr	r3, [pc, #496]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f013 0f02 	tst.w	r3, #2
 8005714:	d153      	bne.n	80057be <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005716:	f7ff f873 	bl	8004800 <HAL_GetTick>
 800571a:	1b40      	subs	r0, r0, r5
 800571c:	2802      	cmp	r0, #2
 800571e:	d9f5      	bls.n	800570c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8005720:	2003      	movs	r0, #3
 8005722:	e17e      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005724:	4a76      	ldr	r2, [pc, #472]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 8005726:	6813      	ldr	r3, [r2, #0]
 8005728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e7b5      	b.n	800569c <HAL_RCC_OscConfig+0x4c>
 8005730:	4b73      	ldr	r3, [pc, #460]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e7ab      	b.n	800569c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8005744:	f7ff f85c 	bl	8004800 <HAL_GetTick>
 8005748:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800574a:	4b6d      	ldr	r3, [pc, #436]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005752:	d0c3      	beq.n	80056dc <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005754:	f7ff f854 	bl	8004800 <HAL_GetTick>
 8005758:	1b40      	subs	r0, r0, r5
 800575a:	2864      	cmp	r0, #100	; 0x64
 800575c:	d9f5      	bls.n	800574a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800575e:	2003      	movs	r0, #3
 8005760:	e15f      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005762:	4b67      	ldr	r3, [pc, #412]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800576a:	d1c6      	bne.n	80056fa <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800576c:	4b64      	ldr	r3, [pc, #400]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f013 0f02 	tst.w	r3, #2
 8005774:	d003      	beq.n	800577e <HAL_RCC_OscConfig+0x12e>
 8005776:	68e3      	ldr	r3, [r4, #12]
 8005778:	2b01      	cmp	r3, #1
 800577a:	f040 814f 	bne.w	8005a1c <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577e:	4a60      	ldr	r2, [pc, #384]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 8005780:	6813      	ldr	r3, [r2, #0]
 8005782:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005786:	6921      	ldr	r1, [r4, #16]
 8005788:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800578c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f013 0f08 	tst.w	r3, #8
 8005794:	d040      	beq.n	8005818 <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005796:	6963      	ldr	r3, [r4, #20]
 8005798:	b363      	cbz	r3, 80057f4 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800579a:	4b5b      	ldr	r3, [pc, #364]	; (8005908 <HAL_RCC_OscConfig+0x2b8>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a0:	f7ff f82e 	bl	8004800 <HAL_GetTick>
 80057a4:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a6:	4b56      	ldr	r3, [pc, #344]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80057a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057aa:	f013 0f02 	tst.w	r3, #2
 80057ae:	d133      	bne.n	8005818 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b0:	f7ff f826 	bl	8004800 <HAL_GetTick>
 80057b4:	1b40      	subs	r0, r0, r5
 80057b6:	2802      	cmp	r0, #2
 80057b8:	d9f5      	bls.n	80057a6 <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 80057ba:	2003      	movs	r0, #3
 80057bc:	e131      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057be:	4a50      	ldr	r2, [pc, #320]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80057c0:	6813      	ldr	r3, [r2, #0]
 80057c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80057c6:	6921      	ldr	r1, [r4, #16]
 80057c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e7de      	b.n	800578e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80057d0:	4b4c      	ldr	r3, [pc, #304]	; (8005904 <HAL_RCC_OscConfig+0x2b4>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80057d6:	f7ff f813 	bl	8004800 <HAL_GetTick>
 80057da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057dc:	4b48      	ldr	r3, [pc, #288]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f013 0f02 	tst.w	r3, #2
 80057e4:	d0d3      	beq.n	800578e <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057e6:	f7ff f80b 	bl	8004800 <HAL_GetTick>
 80057ea:	1b40      	subs	r0, r0, r5
 80057ec:	2802      	cmp	r0, #2
 80057ee:	d9f5      	bls.n	80057dc <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 80057f0:	2003      	movs	r0, #3
 80057f2:	e116      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057f4:	4b44      	ldr	r3, [pc, #272]	; (8005908 <HAL_RCC_OscConfig+0x2b8>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057fa:	f7ff f801 	bl	8004800 <HAL_GetTick>
 80057fe:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005800:	4b3f      	ldr	r3, [pc, #252]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 8005802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005804:	f013 0f02 	tst.w	r3, #2
 8005808:	d006      	beq.n	8005818 <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800580a:	f7fe fff9 	bl	8004800 <HAL_GetTick>
 800580e:	1b40      	subs	r0, r0, r5
 8005810:	2802      	cmp	r0, #2
 8005812:	d9f5      	bls.n	8005800 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8005814:	2003      	movs	r0, #3
 8005816:	e104      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	f013 0f04 	tst.w	r3, #4
 800581e:	d078      	beq.n	8005912 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005820:	4b37      	ldr	r3, [pc, #220]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005828:	d10d      	bne.n	8005846 <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	2300      	movs	r3, #0
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	4b34      	ldr	r3, [pc, #208]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 8005830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005832:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005836:	641a      	str	r2, [r3, #64]	; 0x40
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005842:	2501      	movs	r5, #1
 8005844:	e000      	b.n	8005848 <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8005846:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005848:	4b30      	ldr	r3, [pc, #192]	; (800590c <HAL_RCC_OscConfig+0x2bc>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005850:	d021      	beq.n	8005896 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005852:	68a3      	ldr	r3, [r4, #8]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d032      	beq.n	80058be <HAL_RCC_OscConfig+0x26e>
 8005858:	2b05      	cmp	r3, #5
 800585a:	d036      	beq.n	80058ca <HAL_RCC_OscConfig+0x27a>
 800585c:	4b28      	ldr	r3, [pc, #160]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 800585e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	671a      	str	r2, [r3, #112]	; 0x70
 8005866:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005868:	f022 0204 	bic.w	r2, r2, #4
 800586c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800586e:	68a3      	ldr	r3, [r4, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d034      	beq.n	80058de <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005874:	f7fe ffc4 	bl	8004800 <HAL_GetTick>
 8005878:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587a:	4b21      	ldr	r3, [pc, #132]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	f013 0f02 	tst.w	r3, #2
 8005882:	d145      	bne.n	8005910 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005884:	f7fe ffbc 	bl	8004800 <HAL_GetTick>
 8005888:	1b80      	subs	r0, r0, r6
 800588a:	f241 3388 	movw	r3, #5000	; 0x1388
 800588e:	4298      	cmp	r0, r3
 8005890:	d9f3      	bls.n	800587a <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8005892:	2003      	movs	r0, #3
 8005894:	e0c5      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005896:	4a1d      	ldr	r2, [pc, #116]	; (800590c <HAL_RCC_OscConfig+0x2bc>)
 8005898:	6813      	ldr	r3, [r2, #0]
 800589a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80058a0:	f7fe ffae 	bl	8004800 <HAL_GetTick>
 80058a4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <HAL_RCC_OscConfig+0x2bc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80058ae:	d1d0      	bne.n	8005852 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b0:	f7fe ffa6 	bl	8004800 <HAL_GetTick>
 80058b4:	1b80      	subs	r0, r0, r6
 80058b6:	2802      	cmp	r0, #2
 80058b8:	d9f5      	bls.n	80058a6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 80058ba:	2003      	movs	r0, #3
 80058bc:	e0b1      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058be:	4a10      	ldr	r2, [pc, #64]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80058c0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	6713      	str	r3, [r2, #112]	; 0x70
 80058c8:	e7d1      	b.n	800586e <HAL_RCC_OscConfig+0x21e>
 80058ca:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80058cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058ce:	f042 0204 	orr.w	r2, r2, #4
 80058d2:	671a      	str	r2, [r3, #112]	; 0x70
 80058d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	671a      	str	r2, [r3, #112]	; 0x70
 80058dc:	e7c7      	b.n	800586e <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058de:	f7fe ff8f 	bl	8004800 <HAL_GetTick>
 80058e2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_RCC_OscConfig+0x2b0>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	f013 0f02 	tst.w	r3, #2
 80058ec:	d010      	beq.n	8005910 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ee:	f7fe ff87 	bl	8004800 <HAL_GetTick>
 80058f2:	1b80      	subs	r0, r0, r6
 80058f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80058f8:	4298      	cmp	r0, r3
 80058fa:	d9f3      	bls.n	80058e4 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 80058fc:	2003      	movs	r0, #3
 80058fe:	e090      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
 8005900:	40023800 	.word	0x40023800
 8005904:	42470000 	.word	0x42470000
 8005908:	42470e80 	.word	0x42470e80
 800590c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005910:	b9ed      	cbnz	r5, 800594e <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005912:	69a3      	ldr	r3, [r4, #24]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8083 	beq.w	8005a20 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800591a:	4a49      	ldr	r2, [pc, #292]	; (8005a40 <HAL_RCC_OscConfig+0x3f0>)
 800591c:	6892      	ldr	r2, [r2, #8]
 800591e:	f002 020c 	and.w	r2, r2, #12
 8005922:	2a08      	cmp	r2, #8
 8005924:	d051      	beq.n	80059ca <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005926:	2b02      	cmp	r3, #2
 8005928:	d017      	beq.n	800595a <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800592a:	4b46      	ldr	r3, [pc, #280]	; (8005a44 <HAL_RCC_OscConfig+0x3f4>)
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005930:	f7fe ff66 	bl	8004800 <HAL_GetTick>
 8005934:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005936:	4b42      	ldr	r3, [pc, #264]	; (8005a40 <HAL_RCC_OscConfig+0x3f0>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800593e:	d042      	beq.n	80059c6 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005940:	f7fe ff5e 	bl	8004800 <HAL_GetTick>
 8005944:	1b00      	subs	r0, r0, r4
 8005946:	2802      	cmp	r0, #2
 8005948:	d9f5      	bls.n	8005936 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800594a:	2003      	movs	r0, #3
 800594c:	e069      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800594e:	4a3c      	ldr	r2, [pc, #240]	; (8005a40 <HAL_RCC_OscConfig+0x3f0>)
 8005950:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005956:	6413      	str	r3, [r2, #64]	; 0x40
 8005958:	e7db      	b.n	8005912 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 800595a:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <HAL_RCC_OscConfig+0x3f4>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005960:	f7fe ff4e 	bl	8004800 <HAL_GetTick>
 8005964:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005966:	4b36      	ldr	r3, [pc, #216]	; (8005a40 <HAL_RCC_OscConfig+0x3f0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800596e:	d006      	beq.n	800597e <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005970:	f7fe ff46 	bl	8004800 <HAL_GetTick>
 8005974:	1b40      	subs	r0, r0, r5
 8005976:	2802      	cmp	r0, #2
 8005978:	d9f5      	bls.n	8005966 <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 800597a:	2003      	movs	r0, #3
 800597c:	e051      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800597e:	69e3      	ldr	r3, [r4, #28]
 8005980:	6a22      	ldr	r2, [r4, #32]
 8005982:	4313      	orrs	r3, r2
 8005984:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005986:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800598a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800598c:	0852      	lsrs	r2, r2, #1
 800598e:	3a01      	subs	r2, #1
 8005990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005994:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005996:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800599a:	4a29      	ldr	r2, [pc, #164]	; (8005a40 <HAL_RCC_OscConfig+0x3f0>)
 800599c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800599e:	4b29      	ldr	r3, [pc, #164]	; (8005a44 <HAL_RCC_OscConfig+0x3f4>)
 80059a0:	2201      	movs	r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80059a4:	f7fe ff2c 	bl	8004800 <HAL_GetTick>
 80059a8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059aa:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <HAL_RCC_OscConfig+0x3f0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80059b2:	d106      	bne.n	80059c2 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059b4:	f7fe ff24 	bl	8004800 <HAL_GetTick>
 80059b8:	1b00      	subs	r0, r0, r4
 80059ba:	2802      	cmp	r0, #2
 80059bc:	d9f5      	bls.n	80059aa <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80059be:	2003      	movs	r0, #3
 80059c0:	e02f      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80059c2:	2000      	movs	r0, #0
 80059c4:	e02d      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e02b      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d02b      	beq.n	8005a26 <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 80059ce:	4b1c      	ldr	r3, [pc, #112]	; (8005a40 <HAL_RCC_OscConfig+0x3f0>)
 80059d0:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 80059d6:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d8:	4291      	cmp	r1, r2
 80059da:	d126      	bne.n	8005a2a <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059e0:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e2:	428a      	cmp	r2, r1
 80059e4:	d123      	bne.n	8005a2e <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059e8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80059ec:	401a      	ands	r2, r3
 80059ee:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80059f2:	d11e      	bne.n	8005a32 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059f4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80059f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80059fa:	0852      	lsrs	r2, r2, #1
 80059fc:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059fe:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005a02:	d118      	bne.n	8005a36 <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a04:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8005a08:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a0a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005a0e:	d114      	bne.n	8005a3a <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8005a10:	2000      	movs	r0, #0
 8005a12:	e006      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8005a14:	2001      	movs	r0, #1
}
 8005a16:	4770      	bx	lr
        return HAL_ERROR;
 8005a18:	2001      	movs	r0, #1
 8005a1a:	e002      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	e000      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8005a20:	2000      	movs	r0, #0
}
 8005a22:	b002      	add	sp, #8
 8005a24:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005a26:	2001      	movs	r0, #1
 8005a28:	e7fb      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	e7f9      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
 8005a2e:	2001      	movs	r0, #1
 8005a30:	e7f7      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
 8005a32:	2001      	movs	r0, #1
 8005a34:	e7f5      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
 8005a36:	2001      	movs	r0, #1
 8005a38:	e7f3      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	e7f1      	b.n	8005a22 <HAL_RCC_OscConfig+0x3d2>
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
 8005a44:	42470060 	.word	0x42470060

08005a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a4a:	4b24      	ldr	r3, [pc, #144]	; (8005adc <HAL_RCC_GetSysClockFreq+0x94>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d03d      	beq.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x8a>
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d13d      	bne.n	8005ad6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a5a:	4b20      	ldr	r3, [pc, #128]	; (8005adc <HAL_RCC_GetSysClockFreq+0x94>)
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005a68:	d012      	beq.n	8005a90 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a6a:	4b1c      	ldr	r3, [pc, #112]	; (8005adc <HAL_RCC_GetSysClockFreq+0x94>)
 8005a6c:	6859      	ldr	r1, [r3, #4]
 8005a6e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005a72:	2300      	movs	r3, #0
 8005a74:	481a      	ldr	r0, [pc, #104]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a76:	fba1 0100 	umull	r0, r1, r1, r0
 8005a7a:	f7fb f8bd 	bl	8000bf8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a7e:	4b17      	ldr	r3, [pc, #92]	; (8005adc <HAL_RCC_GetSysClockFreq+0x94>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005a86:	3301      	adds	r3, #1
 8005a88:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005a8a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005a8e:	e023      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x90>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a90:	4b12      	ldr	r3, [pc, #72]	; (8005adc <HAL_RCC_GetSysClockFreq+0x94>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8005a98:	015c      	lsls	r4, r3, #5
 8005a9a:	2500      	movs	r5, #0
 8005a9c:	1ae4      	subs	r4, r4, r3
 8005a9e:	f165 0500 	sbc.w	r5, r5, #0
 8005aa2:	01ae      	lsls	r6, r5, #6
 8005aa4:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8005aa8:	01a7      	lsls	r7, r4, #6
 8005aaa:	1b38      	subs	r0, r7, r4
 8005aac:	eb66 0105 	sbc.w	r1, r6, r5
 8005ab0:	00cc      	lsls	r4, r1, #3
 8005ab2:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8005ab6:	00c5      	lsls	r5, r0, #3
 8005ab8:	18e8      	adds	r0, r5, r3
 8005aba:	f144 0100 	adc.w	r1, r4, #0
 8005abe:	028b      	lsls	r3, r1, #10
 8005ac0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8005ac4:	0284      	lsls	r4, r0, #10
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	f7fb f894 	bl	8000bf8 <__aeabi_uldivmod>
 8005ad0:	e7d5      	b.n	8005a7e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8005ad2:	4803      	ldr	r0, [pc, #12]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ad4:	e000      	b.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x90>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ad6:	4803      	ldr	r0, [pc, #12]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0x9c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	017d7840 	.word	0x017d7840
 8005ae4:	00f42400 	.word	0x00f42400

08005ae8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	f000 809b 	beq.w	8005c24 <HAL_RCC_ClockConfig+0x13c>
{
 8005aee:	b570      	push	{r4, r5, r6, lr}
 8005af0:	460d      	mov	r5, r1
 8005af2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005af4:	4b4f      	ldr	r3, [pc, #316]	; (8005c34 <HAL_RCC_ClockConfig+0x14c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	428b      	cmp	r3, r1
 8005afe:	d208      	bcs.n	8005b12 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b00:	b2cb      	uxtb	r3, r1
 8005b02:	4a4c      	ldr	r2, [pc, #304]	; (8005c34 <HAL_RCC_ClockConfig+0x14c>)
 8005b04:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b06:	6813      	ldr	r3, [r2, #0]
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	428b      	cmp	r3, r1
 8005b0e:	f040 808b 	bne.w	8005c28 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	f013 0f02 	tst.w	r3, #2
 8005b18:	d017      	beq.n	8005b4a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1a:	f013 0f04 	tst.w	r3, #4
 8005b1e:	d004      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b20:	4a45      	ldr	r2, [pc, #276]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005b22:	6893      	ldr	r3, [r2, #8]
 8005b24:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b28:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	f013 0f08 	tst.w	r3, #8
 8005b30:	d004      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b32:	4a41      	ldr	r2, [pc, #260]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005b34:	6893      	ldr	r3, [r2, #8]
 8005b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b3a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b3c:	4a3e      	ldr	r2, [pc, #248]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005b3e:	6893      	ldr	r3, [r2, #8]
 8005b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b44:	68a1      	ldr	r1, [r4, #8]
 8005b46:	430b      	orrs	r3, r1
 8005b48:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	f013 0f01 	tst.w	r3, #1
 8005b50:	d032      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b52:	6863      	ldr	r3, [r4, #4]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d021      	beq.n	8005b9c <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b58:	1e9a      	subs	r2, r3, #2
 8005b5a:	2a01      	cmp	r2, #1
 8005b5c:	d925      	bls.n	8005baa <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b5e:	4a36      	ldr	r2, [pc, #216]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	f012 0f02 	tst.w	r2, #2
 8005b66:	d061      	beq.n	8005c2c <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b68:	4933      	ldr	r1, [pc, #204]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005b6a:	688a      	ldr	r2, [r1, #8]
 8005b6c:	f022 0203 	bic.w	r2, r2, #3
 8005b70:	4313      	orrs	r3, r2
 8005b72:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005b74:	f7fe fe44 	bl	8004800 <HAL_GetTick>
 8005b78:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7a:	4b2f      	ldr	r3, [pc, #188]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
 8005b82:	6862      	ldr	r2, [r4, #4]
 8005b84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005b88:	d016      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8a:	f7fe fe39 	bl	8004800 <HAL_GetTick>
 8005b8e:	1b80      	subs	r0, r0, r6
 8005b90:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b94:	4298      	cmp	r0, r3
 8005b96:	d9f0      	bls.n	8005b7a <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8005b98:	2003      	movs	r0, #3
 8005b9a:	e042      	b.n	8005c22 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9c:	4a26      	ldr	r2, [pc, #152]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005ba4:	d1e0      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	e03b      	b.n	8005c22 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005baa:	4a23      	ldr	r2, [pc, #140]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005bb2:	d1d9      	bne.n	8005b68 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	e034      	b.n	8005c22 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb8:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <HAL_RCC_ClockConfig+0x14c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	d907      	bls.n	8005bd4 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc4:	b2ea      	uxtb	r2, r5
 8005bc6:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <HAL_RCC_ClockConfig+0x14c>)
 8005bc8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	42ab      	cmp	r3, r5
 8005bd2:	d12d      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	f013 0f04 	tst.w	r3, #4
 8005bda:	d006      	beq.n	8005bea <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bdc:	4a16      	ldr	r2, [pc, #88]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005bde:	6893      	ldr	r3, [r2, #8]
 8005be0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8005be4:	68e1      	ldr	r1, [r4, #12]
 8005be6:	430b      	orrs	r3, r1
 8005be8:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	f013 0f08 	tst.w	r3, #8
 8005bf0:	d007      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bf2:	4a11      	ldr	r2, [pc, #68]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005bf4:	6893      	ldr	r3, [r2, #8]
 8005bf6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005bfa:	6921      	ldr	r1, [r4, #16]
 8005bfc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005c00:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c02:	f7ff ff21 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 8005c06:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_RCC_ClockConfig+0x150>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005c0e:	4a0b      	ldr	r2, [pc, #44]	; (8005c3c <HAL_RCC_ClockConfig+0x154>)
 8005c10:	5cd3      	ldrb	r3, [r2, r3]
 8005c12:	40d8      	lsrs	r0, r3
 8005c14:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <HAL_RCC_ClockConfig+0x158>)
 8005c16:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <HAL_RCC_ClockConfig+0x15c>)
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	f7fe fda4 	bl	8004768 <HAL_InitTick>
  return HAL_OK;
 8005c20:	2000      	movs	r0, #0
}
 8005c22:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005c24:	2001      	movs	r0, #1
}
 8005c26:	4770      	bx	lr
      return HAL_ERROR;
 8005c28:	2001      	movs	r0, #1
 8005c2a:	e7fa      	b.n	8005c22 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	e7f8      	b.n	8005c22 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8005c30:	2001      	movs	r0, #1
 8005c32:	e7f6      	b.n	8005c22 <HAL_RCC_ClockConfig+0x13a>
 8005c34:	40023c00 	.word	0x40023c00
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	0800cc90 	.word	0x0800cc90
 8005c40:	20000020 	.word	0x20000020
 8005c44:	20000028 	.word	0x20000028

08005c48 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005c48:	4b01      	ldr	r3, [pc, #4]	; (8005c50 <HAL_RCC_GetHCLKFreq+0x8>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000020 	.word	0x20000020

08005c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c54:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c56:	f7ff fff7 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c5a:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005c62:	4a03      	ldr	r2, [pc, #12]	; (8005c70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c64:	5cd3      	ldrb	r3, [r2, r3]
}
 8005c66:	40d8      	lsrs	r0, r3
 8005c68:	bd08      	pop	{r3, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	0800cca0 	.word	0x0800cca0

08005c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c74:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c76:	f7ff ffe7 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c7a:	4b04      	ldr	r3, [pc, #16]	; (8005c8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005c82:	4a03      	ldr	r2, [pc, #12]	; (8005c90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005c84:	5cd3      	ldrb	r3, [r2, r3]
}
 8005c86:	40d8      	lsrs	r0, r3
 8005c88:	bd08      	pop	{r3, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	0800cca0 	.word	0x0800cca0

08005c94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c94:	b530      	push	{r4, r5, lr}
 8005c96:	b083      	sub	sp, #12
 8005c98:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c9a:	6803      	ldr	r3, [r0, #0]
 8005c9c:	f013 0f05 	tst.w	r3, #5
 8005ca0:	d10e      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	f013 0f02 	tst.w	r3, #2
 8005ca8:	d136      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	f013 0f08 	tst.w	r3, #8
 8005cb0:	f000 8099 	beq.w	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cb4:	7c22      	ldrb	r2, [r4, #16]
 8005cb6:	4b4d      	ldr	r3, [pc, #308]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005cb8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005cba:	2000      	movs	r0, #0
}
 8005cbc:	b003      	add	sp, #12
 8005cbe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8005cc0:	4b4b      	ldr	r3, [pc, #300]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005cc6:	f7fe fd9b 	bl	8004800 <HAL_GetTick>
 8005cca:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ccc:	4b49      	ldr	r3, [pc, #292]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005cd4:	d006      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x50>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cd6:	f7fe fd93 	bl	8004800 <HAL_GetTick>
 8005cda:	1b43      	subs	r3, r0, r5
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d9f5      	bls.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x38>
        return HAL_TIMEOUT;
 8005ce0:	2003      	movs	r0, #3
 8005ce2:	e7eb      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005ce4:	6862      	ldr	r2, [r4, #4]
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	071b      	lsls	r3, r3, #28
 8005cea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005cee:	4a41      	ldr	r2, [pc, #260]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005cf4:	4b3e      	ldr	r3, [pc, #248]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005cfa:	f7fe fd81 	bl	8004800 <HAL_GetTick>
 8005cfe:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d00:	4b3c      	ldr	r3, [pc, #240]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005d08:	d1cb      	bne.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d0a:	f7fe fd79 	bl	8004800 <HAL_GetTick>
 8005d0e:	1b40      	subs	r0, r0, r5
 8005d10:	2802      	cmp	r0, #2
 8005d12:	d9f5      	bls.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        return HAL_TIMEOUT;
 8005d14:	2003      	movs	r0, #3
 8005d16:	e7d1      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	4b35      	ldr	r3, [pc, #212]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005d30:	4a31      	ldr	r2, [pc, #196]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d32:	6813      	ldr	r3, [r2, #0]
 8005d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d38:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005d3a:	f7fe fd61 	bl	8004800 <HAL_GetTick>
 8005d3e:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d40:	4b2d      	ldr	r3, [pc, #180]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005d48:	d106      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d4a:	f7fe fd59 	bl	8004800 <HAL_GetTick>
 8005d4e:	1b43      	subs	r3, r0, r5
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d9f5      	bls.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xac>
        return HAL_TIMEOUT;
 8005d54:	2003      	movs	r0, #3
 8005d56:	e7b1      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x28>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d58:	4b26      	ldr	r3, [pc, #152]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d5c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005d60:	d012      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d62:	68e2      	ldr	r2, [r4, #12]
 8005d64:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d00d      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d6c:	4b21      	ldr	r3, [pc, #132]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d74:	4921      	ldr	r1, [pc, #132]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d76:	2001      	movs	r0, #1
 8005d78:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8005d7e:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d82:	f013 0f01 	tst.w	r3, #1
 8005d86:	d112      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x11a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d88:	68e3      	ldr	r3, [r4, #12]
 8005d8a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005d8e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005d92:	d01d      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d94:	4a17      	ldr	r2, [pc, #92]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d96:	6893      	ldr	r3, [r2, #8]
 8005d98:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d9c:	6093      	str	r3, [r2, #8]
 8005d9e:	4915      	ldr	r1, [pc, #84]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005da0:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005da2:	68e2      	ldr	r2, [r4, #12]
 8005da4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005da8:	4313      	orrs	r3, r2
 8005daa:	670b      	str	r3, [r1, #112]	; 0x70
 8005dac:	e77d      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x16>
        tickstart = HAL_GetTick();
 8005dae:	f7fe fd27 	bl	8004800 <HAL_GetTick>
 8005db2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	f013 0f02 	tst.w	r3, #2
 8005dbc:	d1e4      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dbe:	f7fe fd1f 	bl	8004800 <HAL_GetTick>
 8005dc2:	1b40      	subs	r0, r0, r5
 8005dc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005dc8:	4298      	cmp	r0, r3
 8005dca:	d9f3      	bls.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x120>
            return HAL_TIMEOUT;
 8005dcc:	2003      	movs	r0, #3
 8005dce:	e775      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x28>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dd0:	4908      	ldr	r1, [pc, #32]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd2:	688a      	ldr	r2, [r1, #8]
 8005dd4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005dd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de0:	4313      	orrs	r3, r2
 8005de2:	608b      	str	r3, [r1, #8]
 8005de4:	e7db      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 8005de6:	2000      	movs	r0, #0
 8005de8:	e768      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005dea:	bf00      	nop
 8005dec:	424711e0 	.word	0x424711e0
 8005df0:	42470068 	.word	0x42470068
 8005df4:	40023800 	.word	0x40023800
 8005df8:	40007000 	.word	0x40007000
 8005dfc:	42470e40 	.word	0x42470e40

08005e00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e04:	6802      	ldr	r2, [r0, #0]
 8005e06:	68d3      	ldr	r3, [r2, #12]
 8005e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e0c:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e0e:	f7fe fcf7 	bl	8004800 <HAL_GetTick>
 8005e12:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f013 0f20 	tst.w	r3, #32
 8005e1c:	d107      	bne.n	8005e2e <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e1e:	f7fe fcef 	bl	8004800 <HAL_GetTick>
 8005e22:	1b40      	subs	r0, r0, r5
 8005e24:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005e28:	d9f4      	bls.n	8005e14 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8005e2a:	2003      	movs	r0, #3
 8005e2c:	e000      	b.n	8005e30 <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 8005e2e:	2000      	movs	r0, #0
}
 8005e30:	bd38      	pop	{r3, r4, r5, pc}

08005e32 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005e32:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e34:	6803      	ldr	r3, [r0, #0]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005e3c:	d001      	beq.n	8005e42 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8005e3e:	2000      	movs	r0, #0
}
 8005e40:	bd38      	pop	{r3, r4, r5, pc}
 8005e42:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005e44:	f04f 32ff 	mov.w	r2, #4294967295
 8005e48:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8005e4a:	f7fe fcd9 	bl	8004800 <HAL_GetTick>
 8005e4e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e58:	d107      	bne.n	8005e6a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005e5a:	f7fe fcd1 	bl	8004800 <HAL_GetTick>
 8005e5e:	1b43      	subs	r3, r0, r5
 8005e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e64:	d9f4      	bls.n	8005e50 <RTC_EnterInitMode+0x1e>
        return HAL_TIMEOUT;
 8005e66:	2003      	movs	r0, #3
 8005e68:	e7ea      	b.n	8005e40 <RTC_EnterInitMode+0xe>
  return HAL_OK;
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e7e8      	b.n	8005e40 <RTC_EnterInitMode+0xe>

08005e6e <HAL_RTC_Init>:
{
 8005e6e:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d05c      	beq.n	8005f2e <HAL_RTC_Init+0xc0>
 8005e74:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005e76:	7f43      	ldrb	r3, [r0, #29]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d041      	beq.n	8005f00 <HAL_RTC_Init+0x92>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	22ca      	movs	r2, #202	; 0xca
 8005e84:	625a      	str	r2, [r3, #36]	; 0x24
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	2253      	movs	r2, #83	; 0x53
 8005e8a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f7ff ffd0 	bl	8005e32 <RTC_EnterInitMode>
 8005e92:	4605      	mov	r5, r0
 8005e94:	2800      	cmp	r0, #0
 8005e96:	d137      	bne.n	8005f08 <HAL_RTC_Init+0x9a>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e98:	6822      	ldr	r2, [r4, #0]
 8005e9a:	6893      	ldr	r3, [r2, #8]
 8005e9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ea6:	6821      	ldr	r1, [r4, #0]
 8005ea8:	688a      	ldr	r2, [r1, #8]
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	6920      	ldr	r0, [r4, #16]
 8005eae:	4303      	orrs	r3, r0
 8005eb0:	6960      	ldr	r0, [r4, #20]
 8005eb2:	4303      	orrs	r3, r0
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	608b      	str	r3, [r1, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	68e2      	ldr	r2, [r4, #12]
 8005ebc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	6913      	ldr	r3, [r2, #16]
 8005ec2:	68a1      	ldr	r1, [r4, #8]
 8005ec4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005ec8:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	68d3      	ldr	r3, [r2, #12]
 8005ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f013 0f20 	tst.w	r3, #32
 8005edc:	d01b      	beq.n	8005f16 <HAL_RTC_Init+0xa8>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ee6:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005ee8:	6822      	ldr	r2, [r4, #0]
 8005eea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005eec:	69a1      	ldr	r1, [r4, #24]
 8005eee:	430b      	orrs	r3, r1
 8005ef0:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	22ff      	movs	r2, #255	; 0xff
 8005ef6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	7763      	strb	r3, [r4, #29]
}
 8005efc:	4628      	mov	r0, r5
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8005f00:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8005f02:	f7fe f9af 	bl	8004264 <HAL_RTC_MspInit>
 8005f06:	e7b9      	b.n	8005e7c <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	22ff      	movs	r2, #255	; 0xff
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f0e:	2304      	movs	r3, #4
 8005f10:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8005f12:	2501      	movs	r5, #1
 8005f14:	e7f2      	b.n	8005efc <HAL_RTC_Init+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f16:	4620      	mov	r0, r4
 8005f18:	f7ff ff72 	bl	8005e00 <HAL_RTC_WaitForSynchro>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d0de      	beq.n	8005ede <HAL_RTC_Init+0x70>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	22ff      	movs	r2, #255	; 0xff
 8005f24:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f26:	2304      	movs	r3, #4
 8005f28:	7763      	strb	r3, [r4, #29]
        return HAL_ERROR;
 8005f2a:	2501      	movs	r5, #1
 8005f2c:	e7e6      	b.n	8005efc <HAL_RTC_Init+0x8e>
     return HAL_ERROR;
 8005f2e:	2501      	movs	r5, #1
 8005f30:	e7e4      	b.n	8005efc <HAL_RTC_Init+0x8e>

08005f32 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8005f32:	2300      	movs	r3, #0

  while(Value >= 10U)
 8005f34:	2809      	cmp	r0, #9
 8005f36:	d903      	bls.n	8005f40 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8005f38:	3301      	adds	r3, #1
    Value -= 10U;
 8005f3a:	380a      	subs	r0, #10
 8005f3c:	b2c0      	uxtb	r0, r0
 8005f3e:	e7f9      	b.n	8005f34 <RTC_ByteToBcd2+0x2>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	b2db      	uxtb	r3, r3
}
 8005f44:	4318      	orrs	r0, r3
 8005f46:	4770      	bx	lr

08005f48 <HAL_RTC_SetTime>:
{
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8005f4a:	7f03      	ldrb	r3, [r0, #28]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d078      	beq.n	8006042 <HAL_RTC_SetTime+0xfa>
 8005f50:	4604      	mov	r4, r0
 8005f52:	460e      	mov	r6, r1
 8005f54:	2301      	movs	r3, #1
 8005f56:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	d147      	bne.n	8005ff0 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005f60:	6803      	ldr	r3, [r0, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005f68:	d101      	bne.n	8005f6e <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	70cb      	strb	r3, [r1, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f6e:	7830      	ldrb	r0, [r6, #0]
 8005f70:	f7ff ffdf 	bl	8005f32 <RTC_ByteToBcd2>
 8005f74:	0405      	lsls	r5, r0, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005f76:	7870      	ldrb	r0, [r6, #1]
 8005f78:	f7ff ffdb 	bl	8005f32 <RTC_ByteToBcd2>
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f7c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005f80:	78b0      	ldrb	r0, [r6, #2]
 8005f82:	f7ff ffd6 	bl	8005f32 <RTC_ByteToBcd2>
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005f86:	4305      	orrs	r5, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005f88:	78f0      	ldrb	r0, [r6, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005f8a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	22ca      	movs	r2, #202	; 0xca
 8005f92:	625a      	str	r2, [r3, #36]	; 0x24
 8005f94:	6823      	ldr	r3, [r4, #0]
 8005f96:	2253      	movs	r2, #83	; 0x53
 8005f98:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f7ff ff49 	bl	8005e32 <RTC_EnterInitMode>
 8005fa0:	4607      	mov	r7, r0
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	d136      	bne.n	8006014 <HAL_RTC_SetTime+0xcc>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	f005 357f 	and.w	r5, r5, #2139062143	; 0x7f7f7f7f
 8005fac:	f025 45fe 	bic.w	r5, r5, #2130706432	; 0x7f000000
 8005fb0:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	6893      	ldr	r3, [r2, #8]
 8005fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fba:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005fbc:	6821      	ldr	r1, [r4, #0]
 8005fbe:	688b      	ldr	r3, [r1, #8]
 8005fc0:	68f2      	ldr	r2, [r6, #12]
 8005fc2:	6930      	ldr	r0, [r6, #16]
 8005fc4:	4302      	orrs	r2, r0
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	608b      	str	r3, [r1, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005fca:	6822      	ldr	r2, [r4, #0]
 8005fcc:	68d3      	ldr	r3, [r2, #12]
 8005fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fd2:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f013 0f20 	tst.w	r3, #32
 8005fdc:	d023      	beq.n	8006026 <HAL_RTC_SetTime+0xde>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	22ff      	movs	r2, #255	; 0xff
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	7723      	strb	r3, [r4, #28]
}
 8005fec:	4638      	mov	r0, r7
 8005fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ff0:	6803      	ldr	r3, [r0, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ff8:	d101      	bne.n	8005ffe <HAL_RTC_SetTime+0xb6>
      sTime->TimeFormat = 0x00U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005ffe:	7835      	ldrb	r5, [r6, #0]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006000:	7870      	ldrb	r0, [r6, #1]
 8006002:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006004:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
              ((uint32_t)sTime->Seconds) | \
 8006008:	78b5      	ldrb	r5, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800600a:	4328      	orrs	r0, r5
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800600c:	78f5      	ldrb	r5, [r6, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800600e:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8006012:	e7bc      	b.n	8005f8e <HAL_RTC_SetTime+0x46>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	22ff      	movs	r2, #255	; 0xff
 8006018:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800601a:	2304      	movs	r3, #4
 800601c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 800601e:	2300      	movs	r3, #0
 8006020:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8006022:	2701      	movs	r7, #1
 8006024:	e7e2      	b.n	8005fec <HAL_RTC_SetTime+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006026:	4620      	mov	r0, r4
 8006028:	f7ff feea 	bl	8005e00 <HAL_RTC_WaitForSynchro>
 800602c:	2800      	cmp	r0, #0
 800602e:	d0d6      	beq.n	8005fde <HAL_RTC_SetTime+0x96>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	22ff      	movs	r2, #255	; 0xff
 8006034:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006036:	2304      	movs	r3, #4
 8006038:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 800603a:	2300      	movs	r3, #0
 800603c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 800603e:	2701      	movs	r7, #1
 8006040:	e7d4      	b.n	8005fec <HAL_RTC_SetTime+0xa4>
  __HAL_LOCK(hrtc);
 8006042:	2702      	movs	r7, #2
 8006044:	e7d2      	b.n	8005fec <HAL_RTC_SetTime+0xa4>

08006046 <HAL_RTC_SetDate>:
{
 8006046:	b570      	push	{r4, r5, r6, lr}
 __HAL_LOCK(hrtc);
 8006048:	7f03      	ldrb	r3, [r0, #28]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d066      	beq.n	800611c <HAL_RTC_SetDate+0xd6>
 800604e:	4604      	mov	r4, r0
 8006050:	460e      	mov	r6, r1
 8006052:	2301      	movs	r3, #1
 8006054:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006056:	2302      	movs	r3, #2
 8006058:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800605a:	b93a      	cbnz	r2, 800606c <HAL_RTC_SetDate+0x26>
 800605c:	784b      	ldrb	r3, [r1, #1]
 800605e:	f013 0f10 	tst.w	r3, #16
 8006062:	d003      	beq.n	800606c <HAL_RTC_SetDate+0x26>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006064:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8006068:	330a      	adds	r3, #10
 800606a:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 800606c:	2a00      	cmp	r2, #0
 800606e:	d133      	bne.n	80060d8 <HAL_RTC_SetDate+0x92>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006070:	78f0      	ldrb	r0, [r6, #3]
 8006072:	f7ff ff5e 	bl	8005f32 <RTC_ByteToBcd2>
 8006076:	0405      	lsls	r5, r0, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006078:	7870      	ldrb	r0, [r6, #1]
 800607a:	f7ff ff5a 	bl	8005f32 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800607e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006082:	78b0      	ldrb	r0, [r6, #2]
 8006084:	f7ff ff55 	bl	8005f32 <RTC_ByteToBcd2>
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006088:	4305      	orrs	r5, r0
                 ((uint32_t)sDate->WeekDay << 13U));
 800608a:	7830      	ldrb	r0, [r6, #0]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800608c:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	22ca      	movs	r2, #202	; 0xca
 8006094:	625a      	str	r2, [r3, #36]	; 0x24
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	2253      	movs	r2, #83	; 0x53
 800609a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800609c:	4620      	mov	r0, r4
 800609e:	f7ff fec8 	bl	8005e32 <RTC_EnterInitMode>
 80060a2:	4606      	mov	r6, r0
 80060a4:	bb18      	cbnz	r0, 80060ee <HAL_RTC_SetDate+0xa8>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80060ac:	f025 05c0 	bic.w	r5, r5, #192	; 0xc0
 80060b0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	68d3      	ldr	r3, [r2, #12]
 80060b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ba:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f013 0f20 	tst.w	r3, #32
 80060c4:	d01c      	beq.n	8006100 <HAL_RTC_SetDate+0xba>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	22ff      	movs	r2, #255	; 0xff
 80060ca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80060cc:	2301      	movs	r3, #1
 80060ce:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80060d0:	2300      	movs	r3, #0
 80060d2:	7723      	strb	r3, [r4, #28]
}
 80060d4:	4630      	mov	r0, r6
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060d8:	78f5      	ldrb	r5, [r6, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80060da:	7870      	ldrb	r0, [r6, #1]
 80060dc:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060de:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
                  ((uint32_t)sDate->Date) | \
 80060e2:	78b5      	ldrb	r5, [r6, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80060e4:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->WeekDay) << 13U));
 80060e6:	7835      	ldrb	r5, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060e8:	ea40 3545 	orr.w	r5, r0, r5, lsl #13
 80060ec:	e7d0      	b.n	8006090 <HAL_RTC_SetDate+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	22ff      	movs	r2, #255	; 0xff
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060f4:	2304      	movs	r3, #4
 80060f6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80060f8:	2300      	movs	r3, #0
 80060fa:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80060fc:	2601      	movs	r6, #1
 80060fe:	e7e9      	b.n	80060d4 <HAL_RTC_SetDate+0x8e>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006100:	4620      	mov	r0, r4
 8006102:	f7ff fe7d 	bl	8005e00 <HAL_RTC_WaitForSynchro>
 8006106:	2800      	cmp	r0, #0
 8006108:	d0dd      	beq.n	80060c6 <HAL_RTC_SetDate+0x80>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	22ff      	movs	r2, #255	; 0xff
 800610e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006110:	2304      	movs	r3, #4
 8006112:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8006114:	2300      	movs	r3, #0
 8006116:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8006118:	2601      	movs	r6, #1
 800611a:	e7db      	b.n	80060d4 <HAL_RTC_SetDate+0x8e>
 __HAL_LOCK(hrtc);
 800611c:	2602      	movs	r6, #2
 800611e:	e7d9      	b.n	80060d4 <HAL_RTC_SetDate+0x8e>

08006120 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006120:	0903      	lsrs	r3, r0, #4
 8006122:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8006126:	f000 000f 	and.w	r0, r0, #15
 800612a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800612e:	b2c0      	uxtb	r0, r0
 8006130:	4770      	bx	lr

08006132 <HAL_RTC_GetTime>:
{
 8006132:	b570      	push	{r4, r5, r6, lr}
 8006134:	460c      	mov	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006136:	6803      	ldr	r3, [r0, #0]
 8006138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613a:	604b      	str	r3, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800613c:	6803      	ldr	r3, [r0, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006144:	608b      	str	r3, [r1, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006146:	6803      	ldr	r3, [r0, #0]
 8006148:	681d      	ldr	r5, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800614a:	f3c5 4106 	ubfx	r1, r5, #16, #7
 800614e:	f3c5 4005 	ubfx	r0, r5, #16, #6
 8006152:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006154:	f3c5 2606 	ubfx	r6, r5, #8, #7
 8006158:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800615a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 800615e:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006160:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8006164:	70e3      	strb	r3, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8006166:	b952      	cbnz	r2, 800617e <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006168:	f7ff ffda 	bl	8006120 <RTC_Bcd2ToByte>
 800616c:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800616e:	4630      	mov	r0, r6
 8006170:	f7ff ffd6 	bl	8006120 <RTC_Bcd2ToByte>
 8006174:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006176:	4628      	mov	r0, r5
 8006178:	f7ff ffd2 	bl	8006120 <RTC_Bcd2ToByte>
 800617c:	70a0      	strb	r0, [r4, #2]
}
 800617e:	2000      	movs	r0, #0
 8006180:	bd70      	pop	{r4, r5, r6, pc}

08006182 <HAL_RTC_GetDate>:
{
 8006182:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006184:	6803      	ldr	r3, [r0, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006188:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800618c:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800618e:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8006192:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006194:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8006198:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800619a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800619e:	700b      	strb	r3, [r1, #0]
  if(Format == RTC_FORMAT_BIN)
 80061a0:	b95a      	cbnz	r2, 80061ba <HAL_RTC_GetDate+0x38>
 80061a2:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80061a4:	f7ff ffbc 	bl	8006120 <RTC_Bcd2ToByte>
 80061a8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80061aa:	4630      	mov	r0, r6
 80061ac:	f7ff ffb8 	bl	8006120 <RTC_Bcd2ToByte>
 80061b0:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80061b2:	4628      	mov	r0, r5
 80061b4:	f7ff ffb4 	bl	8006120 <RTC_Bcd2ToByte>
 80061b8:	70a0      	strb	r0, [r4, #2]
}
 80061ba:	2000      	movs	r0, #0
 80061bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080061c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	4605      	mov	r5, r0
 80061c8:	4688      	mov	r8, r1
 80061ca:	4617      	mov	r7, r2
 80061cc:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061ce:	f7fe fb17 	bl	8004800 <HAL_GetTick>
 80061d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d4:	1a1b      	subs	r3, r3, r0
 80061d6:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80061da:	f7fe fb11 	bl	8004800 <HAL_GetTick>
 80061de:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061e0:	4b2a      	ldr	r3, [pc, #168]	; (800628c <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80061e8:	fb09 f303 	mul.w	r3, r9, r3
 80061ec:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ee:	682b      	ldr	r3, [r5, #0]
 80061f0:	689c      	ldr	r4, [r3, #8]
 80061f2:	ea38 0304 	bics.w	r3, r8, r4
 80061f6:	bf0c      	ite	eq
 80061f8:	2401      	moveq	r4, #1
 80061fa:	2400      	movne	r4, #0
 80061fc:	42bc      	cmp	r4, r7
 80061fe:	d040      	beq.n	8006282 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006200:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006204:	d0f3      	beq.n	80061ee <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006206:	f7fe fafb 	bl	8004800 <HAL_GetTick>
 800620a:	eba0 000a 	sub.w	r0, r0, sl
 800620e:	4548      	cmp	r0, r9
 8006210:	d20a      	bcs.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x68>
 8006212:	f1b9 0f00 	cmp.w	r9, #0
 8006216:	d007      	beq.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006218:	9a01      	ldr	r2, [sp, #4]
 800621a:	b102      	cbz	r2, 800621e <SPI_WaitFlagStateUntilTimeout+0x5e>
 800621c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800621e:	9b01      	ldr	r3, [sp, #4]
 8006220:	3b01      	subs	r3, #1
 8006222:	9301      	str	r3, [sp, #4]
 8006224:	4691      	mov	r9, r2
 8006226:	e7e2      	b.n	80061ee <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006228:	682a      	ldr	r2, [r5, #0]
 800622a:	6853      	ldr	r3, [r2, #4]
 800622c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006230:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006232:	686b      	ldr	r3, [r5, #4]
 8006234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006238:	d00b      	beq.n	8006252 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800623a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006240:	d014      	beq.n	800626c <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8006242:	2301      	movs	r3, #1
 8006244:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006248:	2300      	movs	r3, #0
 800624a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 800624e:	2003      	movs	r0, #3
 8006250:	e018      	b.n	8006284 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006252:	68ab      	ldr	r3, [r5, #8]
 8006254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006258:	d002      	beq.n	8006260 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800625a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625e:	d1ec      	bne.n	800623a <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8006260:	682a      	ldr	r2, [r5, #0]
 8006262:	6813      	ldr	r3, [r2, #0]
 8006264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	e7e6      	b.n	800623a <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800626c:	682a      	ldr	r2, [r5, #0]
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	682a      	ldr	r2, [r5, #0]
 8006278:	6813      	ldr	r3, [r2, #0]
 800627a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800627e:	6013      	str	r3, [r2, #0]
 8006280:	e7df      	b.n	8006242 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8006282:	2000      	movs	r0, #0
}
 8006284:	b002      	add	sp, #8
 8006286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800628a:	bf00      	nop
 800628c:	20000020 	.word	0x20000020

08006290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b530      	push	{r4, r5, lr}
 8006292:	b085      	sub	sp, #20
 8006294:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006296:	4b16      	ldr	r3, [pc, #88]	; (80062f0 <SPI_EndRxTxTransaction+0x60>)
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	4b16      	ldr	r3, [pc, #88]	; (80062f4 <SPI_EndRxTxTransaction+0x64>)
 800629c:	fba3 3000 	umull	r3, r0, r3, r0
 80062a0:	0d40      	lsrs	r0, r0, #21
 80062a2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80062a6:	fb05 f000 	mul.w	r0, r5, r0
 80062aa:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ac:	6863      	ldr	r3, [r4, #4]
 80062ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b2:	d00b      	beq.n	80062cc <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	b1bb      	cbz	r3, 80062e8 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80062c6:	d1f5      	bne.n	80062b4 <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 80062c8:	2000      	movs	r0, #0
 80062ca:	e00e      	b.n	80062ea <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062cc:	9200      	str	r2, [sp, #0]
 80062ce:	460b      	mov	r3, r1
 80062d0:	2200      	movs	r2, #0
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	4620      	mov	r0, r4
 80062d6:	f7ff ff73 	bl	80061c0 <SPI_WaitFlagStateUntilTimeout>
 80062da:	b130      	cbz	r0, 80062ea <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80062de:	f043 0320 	orr.w	r3, r3, #32
 80062e2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80062e4:	2003      	movs	r0, #3
 80062e6:	e000      	b.n	80062ea <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80062e8:	2000      	movs	r0, #0
}
 80062ea:	b005      	add	sp, #20
 80062ec:	bd30      	pop	{r4, r5, pc}
 80062ee:	bf00      	nop
 80062f0:	20000020 	.word	0x20000020
 80062f4:	165e9f81 	.word	0x165e9f81

080062f8 <HAL_SPI_Init>:
  if (hspi == NULL)
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d05a      	beq.n	80063b2 <HAL_SPI_Init+0xba>
{
 80062fc:	b510      	push	{r4, lr}
 80062fe:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006300:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006302:	b933      	cbnz	r3, 8006312 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006304:	6843      	ldr	r3, [r0, #4]
 8006306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800630a:	d005      	beq.n	8006318 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800630c:	2300      	movs	r3, #0
 800630e:	61c3      	str	r3, [r0, #28]
 8006310:	e002      	b.n	8006318 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006312:	2300      	movs	r3, #0
 8006314:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006316:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006318:	2300      	movs	r3, #0
 800631a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800631c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006320:	2b00      	cmp	r3, #0
 8006322:	d040      	beq.n	80063a6 <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006324:	2302      	movs	r3, #2
 8006326:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800632a:	6822      	ldr	r2, [r4, #0]
 800632c:	6813      	ldr	r3, [r2, #0]
 800632e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006332:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006334:	6863      	ldr	r3, [r4, #4]
 8006336:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800633a:	68a2      	ldr	r2, [r4, #8]
 800633c:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8006340:	4313      	orrs	r3, r2
 8006342:	68e2      	ldr	r2, [r4, #12]
 8006344:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006348:	4313      	orrs	r3, r2
 800634a:	6922      	ldr	r2, [r4, #16]
 800634c:	f002 0202 	and.w	r2, r2, #2
 8006350:	4313      	orrs	r3, r2
 8006352:	6962      	ldr	r2, [r4, #20]
 8006354:	f002 0201 	and.w	r2, r2, #1
 8006358:	4313      	orrs	r3, r2
 800635a:	69a2      	ldr	r2, [r4, #24]
 800635c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8006360:	4313      	orrs	r3, r2
 8006362:	69e2      	ldr	r2, [r4, #28]
 8006364:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8006368:	4313      	orrs	r3, r2
 800636a:	6a22      	ldr	r2, [r4, #32]
 800636c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006370:	4313      	orrs	r3, r2
 8006372:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006374:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006378:	6821      	ldr	r1, [r4, #0]
 800637a:	4313      	orrs	r3, r2
 800637c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800637e:	8b63      	ldrh	r3, [r4, #26]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006386:	f002 0210 	and.w	r2, r2, #16
 800638a:	6821      	ldr	r1, [r4, #0]
 800638c:	4313      	orrs	r3, r2
 800638e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006390:	6822      	ldr	r2, [r4, #0]
 8006392:	69d3      	ldr	r3, [r2, #28]
 8006394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006398:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800639a:	2000      	movs	r0, #0
 800639c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800639e:	2301      	movs	r3, #1
 80063a0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80063a4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80063a6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80063aa:	4620      	mov	r0, r4
 80063ac:	f7fd ff7c 	bl	80042a8 <HAL_SPI_MspInit>
 80063b0:	e7b8      	b.n	8006324 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80063b2:	2001      	movs	r0, #1
}
 80063b4:	4770      	bx	lr

080063b6 <HAL_SPI_Transmit>:
{
 80063b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063ba:	b083      	sub	sp, #12
 80063bc:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80063be:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	f000 80cc 	beq.w	8006560 <HAL_SPI_Transmit+0x1aa>
 80063c8:	4604      	mov	r4, r0
 80063ca:	4688      	mov	r8, r1
 80063cc:	4691      	mov	r9, r2
 80063ce:	2301      	movs	r3, #1
 80063d0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80063d4:	f7fe fa14 	bl	8004800 <HAL_GetTick>
 80063d8:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80063da:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80063de:	b2f6      	uxtb	r6, r6
 80063e0:	2e01      	cmp	r6, #1
 80063e2:	f040 80aa 	bne.w	800653a <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 80063e6:	f1b8 0f00 	cmp.w	r8, #0
 80063ea:	f000 80a7 	beq.w	800653c <HAL_SPI_Transmit+0x186>
 80063ee:	f1b9 0f00 	cmp.w	r9, #0
 80063f2:	f000 80a3 	beq.w	800653c <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063f6:	2303      	movs	r3, #3
 80063f8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006400:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006404:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006408:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800640c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800640e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006410:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006412:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006414:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006416:	68a3      	ldr	r3, [r4, #8]
 8006418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800641c:	d01e      	beq.n	800645c <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006426:	d103      	bne.n	8006430 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800642e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006430:	68e3      	ldr	r3, [r4, #12]
 8006432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006436:	d01c      	beq.n	8006472 <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	b113      	cbz	r3, 8006442 <HAL_SPI_Transmit+0x8c>
 800643c:	f1b9 0f01 	cmp.w	r9, #1
 8006440:	d152      	bne.n	80064e8 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006442:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	7812      	ldrb	r2, [r2, #0]
 8006448:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800644a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800644c:	3301      	adds	r3, #1
 800644e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006450:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	b29b      	uxth	r3, r3
 8006458:	86e3      	strh	r3, [r4, #54]	; 0x36
 800645a:	e045      	b.n	80064e8 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 800645c:	6822      	ldr	r2, [r4, #0]
 800645e:	6813      	ldr	r3, [r2, #0]
 8006460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006464:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8006466:	6822      	ldr	r2, [r4, #0]
 8006468:	6813      	ldr	r3, [r2, #0]
 800646a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	e7d5      	b.n	800641e <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006472:	6863      	ldr	r3, [r4, #4]
 8006474:	b113      	cbz	r3, 800647c <HAL_SPI_Transmit+0xc6>
 8006476:	f1b9 0f01 	cmp.w	r9, #1
 800647a:	d116      	bne.n	80064aa <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800647c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	8812      	ldrh	r2, [r2, #0]
 8006482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006484:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006486:	3302      	adds	r3, #2
 8006488:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800648a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29b      	uxth	r3, r3
 8006492:	86e3      	strh	r3, [r4, #54]	; 0x36
 8006494:	e009      	b.n	80064aa <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006496:	f7fe f9b3 	bl	8004800 <HAL_GetTick>
 800649a:	1bc0      	subs	r0, r0, r7
 800649c:	42a8      	cmp	r0, r5
 800649e:	d302      	bcc.n	80064a6 <HAL_SPI_Transmit+0xf0>
 80064a0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80064a4:	d154      	bne.n	8006550 <HAL_SPI_Transmit+0x19a>
 80064a6:	2d00      	cmp	r5, #0
 80064a8:	d054      	beq.n	8006554 <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 80064aa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d02e      	beq.n	8006510 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	f012 0f02 	tst.w	r2, #2
 80064ba:	d0ec      	beq.n	8006496 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80064be:	8812      	ldrh	r2, [r2, #0]
 80064c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064c4:	3302      	adds	r3, #2
 80064c6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80064c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	86e3      	strh	r3, [r4, #54]	; 0x36
 80064d2:	e7ea      	b.n	80064aa <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064d4:	f7fe f994 	bl	8004800 <HAL_GetTick>
 80064d8:	1bc0      	subs	r0, r0, r7
 80064da:	42a8      	cmp	r0, r5
 80064dc:	d302      	bcc.n	80064e4 <HAL_SPI_Transmit+0x12e>
 80064de:	f1b5 3fff 	cmp.w	r5, #4294967295
 80064e2:	d139      	bne.n	8006558 <HAL_SPI_Transmit+0x1a2>
 80064e4:	2d00      	cmp	r5, #0
 80064e6:	d039      	beq.n	800655c <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 80064e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	b183      	cbz	r3, 8006510 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	f012 0f02 	tst.w	r2, #2
 80064f6:	d0ed      	beq.n	80064d4 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80064fa:	7812      	ldrb	r2, [r2, #0]
 80064fc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80064fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006500:	3301      	adds	r3, #1
 8006502:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006504:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006506:	b292      	uxth	r2, r2
 8006508:	3a01      	subs	r2, #1
 800650a:	b292      	uxth	r2, r2
 800650c:	86e2      	strh	r2, [r4, #54]	; 0x36
 800650e:	e7eb      	b.n	80064e8 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006510:	463a      	mov	r2, r7
 8006512:	4629      	mov	r1, r5
 8006514:	4620      	mov	r0, r4
 8006516:	f7ff febb 	bl	8006290 <SPI_EndRxTxTransaction>
 800651a:	b108      	cbz	r0, 8006520 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800651c:	2320      	movs	r3, #32
 800651e:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006520:	68a3      	ldr	r3, [r4, #8]
 8006522:	b933      	cbnz	r3, 8006532 <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	9201      	str	r2, [sp, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006532:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006534:	b913      	cbnz	r3, 800653c <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006536:	2600      	movs	r6, #0
 8006538:	e000      	b.n	800653c <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 800653a:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800653c:	2301      	movs	r3, #1
 800653e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006542:	2300      	movs	r3, #0
 8006544:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006548:	4630      	mov	r0, r6
 800654a:	b003      	add	sp, #12
 800654c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8006550:	2603      	movs	r6, #3
 8006552:	e7f3      	b.n	800653c <HAL_SPI_Transmit+0x186>
 8006554:	2603      	movs	r6, #3
 8006556:	e7f1      	b.n	800653c <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 8006558:	2603      	movs	r6, #3
 800655a:	e7ef      	b.n	800653c <HAL_SPI_Transmit+0x186>
 800655c:	2603      	movs	r6, #3
 800655e:	e7ed      	b.n	800653c <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 8006560:	2602      	movs	r6, #2
 8006562:	e7f1      	b.n	8006548 <HAL_SPI_Transmit+0x192>

08006564 <HAL_SPI_TransmitReceive>:
{
 8006564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006568:	b083      	sub	sp, #12
 800656a:	461f      	mov	r7, r3
 800656c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800656e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006572:	2b01      	cmp	r3, #1
 8006574:	f000 8110 	beq.w	8006798 <HAL_SPI_TransmitReceive+0x234>
 8006578:	4604      	mov	r4, r0
 800657a:	4688      	mov	r8, r1
 800657c:	4691      	mov	r9, r2
 800657e:	2301      	movs	r3, #1
 8006580:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006584:	f7fe f93c 	bl	8004800 <HAL_GetTick>
 8006588:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800658a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800658e:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8006590:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006592:	2b01      	cmp	r3, #1
 8006594:	d00a      	beq.n	80065ac <HAL_SPI_TransmitReceive+0x48>
 8006596:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800659a:	f040 80e3 	bne.w	8006764 <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800659e:	68a2      	ldr	r2, [r4, #8]
 80065a0:	2a00      	cmp	r2, #0
 80065a2:	f040 80e9 	bne.w	8006778 <HAL_SPI_TransmitReceive+0x214>
 80065a6:	2b04      	cmp	r3, #4
 80065a8:	f040 80e8 	bne.w	800677c <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065ac:	f1b8 0f00 	cmp.w	r8, #0
 80065b0:	f000 80e6 	beq.w	8006780 <HAL_SPI_TransmitReceive+0x21c>
 80065b4:	f1b9 0f00 	cmp.w	r9, #0
 80065b8:	f000 80e4 	beq.w	8006784 <HAL_SPI_TransmitReceive+0x220>
 80065bc:	2f00      	cmp	r7, #0
 80065be:	f000 80e3 	beq.w	8006788 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065c2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d002      	beq.n	80065d2 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065cc:	2305      	movs	r3, #5
 80065ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065d6:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80065da:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80065dc:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065de:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80065e2:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80065e4:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80065e6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80065e8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80065f2:	d103      	bne.n	80065fc <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065fa:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065fc:	68e3      	ldr	r3, [r4, #12]
 80065fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006602:	d011      	beq.n	8006628 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006604:	6863      	ldr	r3, [r4, #4]
 8006606:	b10b      	cbz	r3, 800660c <HAL_SPI_TransmitReceive+0xa8>
 8006608:	2f01      	cmp	r7, #1
 800660a:	d10b      	bne.n	8006624 <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800660c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	7812      	ldrb	r2, [r2, #0]
 8006612:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006614:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006616:	3301      	adds	r3, #1
 8006618:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800661a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800661c:	b29b      	uxth	r3, r3
 800661e:	3b01      	subs	r3, #1
 8006620:	b29b      	uxth	r3, r3
 8006622:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006624:	2701      	movs	r7, #1
 8006626:	e06b      	b.n	8006700 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	b10b      	cbz	r3, 8006630 <HAL_SPI_TransmitReceive+0xcc>
 800662c:	2f01      	cmp	r7, #1
 800662e:	d10b      	bne.n	8006648 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006630:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	8812      	ldrh	r2, [r2, #0]
 8006636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006638:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800663a:	3302      	adds	r3, #2
 800663c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800663e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006640:	b29b      	uxth	r3, r3
 8006642:	3b01      	subs	r3, #1
 8006644:	b29b      	uxth	r3, r3
 8006646:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006648:	2701      	movs	r7, #1
 800664a:	e01c      	b.n	8006686 <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	f012 0f01 	tst.w	r2, #1
 8006654:	d00e      	beq.n	8006674 <HAL_SPI_TransmitReceive+0x110>
 8006656:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006658:	b292      	uxth	r2, r2
 800665a:	b15a      	cbz	r2, 8006674 <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006660:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006662:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006664:	3302      	adds	r3, #2
 8006666:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006668:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800666a:	b29b      	uxth	r3, r3
 800666c:	3b01      	subs	r3, #1
 800666e:	b29b      	uxth	r3, r3
 8006670:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006672:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006674:	f7fe f8c4 	bl	8004800 <HAL_GetTick>
 8006678:	1b80      	subs	r0, r0, r6
 800667a:	42a8      	cmp	r0, r5
 800667c:	d303      	bcc.n	8006686 <HAL_SPI_TransmitReceive+0x122>
 800667e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006682:	f040 8083 	bne.w	800678c <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006686:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006688:	b29b      	uxth	r3, r3
 800668a:	b91b      	cbnz	r3, 8006694 <HAL_SPI_TransmitReceive+0x130>
 800668c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	d053      	beq.n	800673c <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	689a      	ldr	r2, [r3, #8]
 8006698:	f012 0f02 	tst.w	r2, #2
 800669c:	d0d6      	beq.n	800664c <HAL_SPI_TransmitReceive+0xe8>
 800669e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80066a0:	b292      	uxth	r2, r2
 80066a2:	2a00      	cmp	r2, #0
 80066a4:	d0d2      	beq.n	800664c <HAL_SPI_TransmitReceive+0xe8>
 80066a6:	2f00      	cmp	r7, #0
 80066a8:	d0d0      	beq.n	800664c <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80066ac:	8812      	ldrh	r2, [r2, #0]
 80066ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80066b2:	3302      	adds	r3, #2
 80066b4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80066b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	3b01      	subs	r3, #1
 80066bc:	b29b      	uxth	r3, r3
 80066be:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80066c0:	2700      	movs	r7, #0
 80066c2:	e7c3      	b.n	800664c <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	f012 0f01 	tst.w	r2, #1
 80066cc:	d00e      	beq.n	80066ec <HAL_SPI_TransmitReceive+0x188>
 80066ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80066d0:	b292      	uxth	r2, r2
 80066d2:	b15a      	cbz	r2, 80066ec <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80066dc:	3301      	adds	r3, #1
 80066de:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80066e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80066ea:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066ec:	f7fe f888 	bl	8004800 <HAL_GetTick>
 80066f0:	1b83      	subs	r3, r0, r6
 80066f2:	42ab      	cmp	r3, r5
 80066f4:	d302      	bcc.n	80066fc <HAL_SPI_TransmitReceive+0x198>
 80066f6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80066fa:	d149      	bne.n	8006790 <HAL_SPI_TransmitReceive+0x22c>
 80066fc:	2d00      	cmp	r5, #0
 80066fe:	d049      	beq.n	8006794 <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006700:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006702:	b29b      	uxth	r3, r3
 8006704:	b913      	cbnz	r3, 800670c <HAL_SPI_TransmitReceive+0x1a8>
 8006706:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006708:	b29b      	uxth	r3, r3
 800670a:	b1bb      	cbz	r3, 800673c <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	689a      	ldr	r2, [r3, #8]
 8006710:	f012 0f02 	tst.w	r2, #2
 8006714:	d0d6      	beq.n	80066c4 <HAL_SPI_TransmitReceive+0x160>
 8006716:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006718:	b292      	uxth	r2, r2
 800671a:	2a00      	cmp	r2, #0
 800671c:	d0d2      	beq.n	80066c4 <HAL_SPI_TransmitReceive+0x160>
 800671e:	2f00      	cmp	r7, #0
 8006720:	d0d0      	beq.n	80066c4 <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006722:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006724:	7812      	ldrb	r2, [r2, #0]
 8006726:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006728:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800672a:	3301      	adds	r3, #1
 800672c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800672e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29b      	uxth	r3, r3
 8006736:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006738:	2700      	movs	r7, #0
 800673a:	e7c3      	b.n	80066c4 <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800673c:	4632      	mov	r2, r6
 800673e:	4629      	mov	r1, r5
 8006740:	4620      	mov	r0, r4
 8006742:	f7ff fda5 	bl	8006290 <SPI_EndRxTxTransaction>
 8006746:	b948      	cbnz	r0, 800675c <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006748:	68a3      	ldr	r3, [r4, #8]
 800674a:	b963      	cbnz	r3, 8006766 <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	9201      	str	r2, [sp, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	9b01      	ldr	r3, [sp, #4]
 800675a:	e004      	b.n	8006766 <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800675c:	2320      	movs	r3, #32
 800675e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006760:	2001      	movs	r0, #1
    goto error;
 8006762:	e000      	b.n	8006766 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 8006764:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8006766:	2301      	movs	r3, #1
 8006768:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800676c:	2300      	movs	r3, #0
 800676e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006772:	b003      	add	sp, #12
 8006774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8006778:	2002      	movs	r0, #2
 800677a:	e7f4      	b.n	8006766 <HAL_SPI_TransmitReceive+0x202>
 800677c:	2002      	movs	r0, #2
 800677e:	e7f2      	b.n	8006766 <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8006780:	2001      	movs	r0, #1
 8006782:	e7f0      	b.n	8006766 <HAL_SPI_TransmitReceive+0x202>
 8006784:	2001      	movs	r0, #1
 8006786:	e7ee      	b.n	8006766 <HAL_SPI_TransmitReceive+0x202>
 8006788:	2001      	movs	r0, #1
 800678a:	e7ec      	b.n	8006766 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 800678c:	2003      	movs	r0, #3
 800678e:	e7ea      	b.n	8006766 <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8006790:	2003      	movs	r0, #3
 8006792:	e7e8      	b.n	8006766 <HAL_SPI_TransmitReceive+0x202>
 8006794:	2003      	movs	r0, #3
 8006796:	e7e6      	b.n	8006766 <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 8006798:	2002      	movs	r0, #2
 800679a:	e7ea      	b.n	8006772 <HAL_SPI_TransmitReceive+0x20e>

0800679c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800679c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800679e:	6a03      	ldr	r3, [r0, #32]
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067a8:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067aa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067ac:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b0:	680c      	ldr	r4, [r1, #0]
 80067b2:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067b6:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ba:	688b      	ldr	r3, [r1, #8]
 80067bc:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067be:	4c0d      	ldr	r4, [pc, #52]	; (80067f4 <TIM_OC1_SetConfig+0x58>)
 80067c0:	42a0      	cmp	r0, r4
 80067c2:	d009      	beq.n	80067d8 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c4:	4c0b      	ldr	r4, [pc, #44]	; (80067f4 <TIM_OC1_SetConfig+0x58>)
 80067c6:	42a0      	cmp	r0, r4
 80067c8:	d00d      	beq.n	80067e6 <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ca:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067cc:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ce:	684a      	ldr	r2, [r1, #4]
 80067d0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d2:	6203      	str	r3, [r0, #32]
}
 80067d4:	bc70      	pop	{r4, r5, r6}
 80067d6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80067d8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80067dc:	68ca      	ldr	r2, [r1, #12]
 80067de:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 80067e0:	f023 0304 	bic.w	r3, r3, #4
 80067e4:	e7ee      	b.n	80067c4 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067e6:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80067ea:	694a      	ldr	r2, [r1, #20]
 80067ec:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80067ee:	698e      	ldr	r6, [r1, #24]
 80067f0:	4316      	orrs	r6, r2
 80067f2:	e7ea      	b.n	80067ca <TIM_OC1_SetConfig+0x2e>
 80067f4:	40010000 	.word	0x40010000

080067f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067fa:	6a03      	ldr	r3, [r0, #32]
 80067fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006800:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006802:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006806:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006808:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800680c:	680c      	ldr	r4, [r1, #0]
 800680e:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006814:	688c      	ldr	r4, [r1, #8]
 8006816:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800681a:	4c0f      	ldr	r4, [pc, #60]	; (8006858 <TIM_OC3_SetConfig+0x60>)
 800681c:	42a0      	cmp	r0, r4
 800681e:	d009      	beq.n	8006834 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006820:	4c0d      	ldr	r4, [pc, #52]	; (8006858 <TIM_OC3_SetConfig+0x60>)
 8006822:	42a0      	cmp	r0, r4
 8006824:	d00e      	beq.n	8006844 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006826:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006828:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800682a:	684a      	ldr	r2, [r1, #4]
 800682c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682e:	6203      	str	r3, [r0, #32]
}
 8006830:	bc30      	pop	{r4, r5}
 8006832:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006838:	68cc      	ldr	r4, [r1, #12]
 800683a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800683e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006842:	e7ed      	b.n	8006820 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006844:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006848:	694c      	ldr	r4, [r1, #20]
 800684a:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800684e:	698c      	ldr	r4, [r1, #24]
 8006850:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8006854:	e7e7      	b.n	8006826 <TIM_OC3_SetConfig+0x2e>
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000

0800685c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800685c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800685e:	6a03      	ldr	r3, [r0, #32]
 8006860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006864:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006866:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800686c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006870:	680d      	ldr	r5, [r1, #0]
 8006872:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800687a:	688d      	ldr	r5, [r1, #8]
 800687c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006880:	4d07      	ldr	r5, [pc, #28]	; (80068a0 <TIM_OC4_SetConfig+0x44>)
 8006882:	42a8      	cmp	r0, r5
 8006884:	d006      	beq.n	8006894 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006886:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006888:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800688a:	684a      	ldr	r2, [r1, #4]
 800688c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800688e:	6203      	str	r3, [r0, #32]
}
 8006890:	bc30      	pop	{r4, r5}
 8006892:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006894:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006898:	694d      	ldr	r5, [r1, #20]
 800689a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800689e:	e7f2      	b.n	8006886 <TIM_OC4_SetConfig+0x2a>
 80068a0:	40010000 	.word	0x40010000

080068a4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80068a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d12f      	bne.n	800690e <HAL_TIM_Base_Start_IT+0x6a>
  htim->State = HAL_TIM_STATE_BUSY;
 80068ae:	2302      	movs	r3, #2
 80068b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068b4:	6802      	ldr	r2, [r0, #0]
 80068b6:	68d3      	ldr	r3, [r2, #12]
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068be:	6803      	ldr	r3, [r0, #0]
 80068c0:	4a15      	ldr	r2, [pc, #84]	; (8006918 <HAL_TIM_Base_Start_IT+0x74>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d018      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x54>
 80068c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ca:	d015      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x54>
 80068cc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d011      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x54>
 80068d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068d8:	4293      	cmp	r3, r2
 80068da:	d00d      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x54>
 80068dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d009      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x54>
 80068e4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d005      	beq.n	80068f8 <HAL_TIM_Base_Start_IT+0x54>
    __HAL_TIM_ENABLE(htim);
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80068f4:	2000      	movs	r0, #0
 80068f6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fe:	2a06      	cmp	r2, #6
 8006900:	d007      	beq.n	8006912 <HAL_TIM_Base_Start_IT+0x6e>
      __HAL_TIM_ENABLE(htim);
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	f042 0201 	orr.w	r2, r2, #1
 8006908:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800690a:	2000      	movs	r0, #0
 800690c:	4770      	bx	lr
    return HAL_ERROR;
 800690e:	2001      	movs	r0, #1
 8006910:	4770      	bx	lr
  return HAL_OK;
 8006912:	2000      	movs	r0, #0
}
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	40010000 	.word	0x40010000

0800691c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800691c:	6802      	ldr	r2, [r0, #0]
 800691e:	68d3      	ldr	r3, [r2, #12]
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8006926:	6803      	ldr	r3, [r0, #0]
 8006928:	6a19      	ldr	r1, [r3, #32]
 800692a:	f241 1211 	movw	r2, #4369	; 0x1111
 800692e:	4211      	tst	r1, r2
 8006930:	d108      	bne.n	8006944 <HAL_TIM_Base_Stop_IT+0x28>
 8006932:	6a19      	ldr	r1, [r3, #32]
 8006934:	f240 4244 	movw	r2, #1092	; 0x444
 8006938:	4211      	tst	r1, r2
 800693a:	d103      	bne.n	8006944 <HAL_TIM_Base_Stop_IT+0x28>
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	f022 0201 	bic.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006944:	2301      	movs	r3, #1
 8006946:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 800694a:	2000      	movs	r0, #0
 800694c:	4770      	bx	lr

0800694e <HAL_TIM_OC_DelayElapsedCallback>:
}
 800694e:	4770      	bx	lr

08006950 <HAL_TIM_IC_CaptureCallback>:
}
 8006950:	4770      	bx	lr

08006952 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006952:	4770      	bx	lr

08006954 <HAL_TIM_TriggerCallback>:
}
 8006954:	4770      	bx	lr

08006956 <HAL_TIM_IRQHandler>:
{
 8006956:	b510      	push	{r4, lr}
 8006958:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800695a:	6803      	ldr	r3, [r0, #0]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	f012 0f02 	tst.w	r2, #2
 8006962:	d011      	beq.n	8006988 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	f012 0f02 	tst.w	r2, #2
 800696a:	d00d      	beq.n	8006988 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800696c:	f06f 0202 	mvn.w	r2, #2
 8006970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006972:	2301      	movs	r3, #1
 8006974:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006976:	6803      	ldr	r3, [r0, #0]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	f013 0f03 	tst.w	r3, #3
 800697e:	d070      	beq.n	8006a62 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006980:	f7ff ffe6 	bl	8006950 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006984:	2300      	movs	r3, #0
 8006986:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	f012 0f04 	tst.w	r2, #4
 8006990:	d012      	beq.n	80069b8 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	f012 0f04 	tst.w	r2, #4
 8006998:	d00e      	beq.n	80069b8 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800699a:	f06f 0204 	mvn.w	r2, #4
 800699e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a0:	2302      	movs	r3, #2
 80069a2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80069ac:	d05f      	beq.n	8006a6e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7ff ffce 	bl	8006950 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b4:	2300      	movs	r3, #0
 80069b6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	f012 0f08 	tst.w	r2, #8
 80069c0:	d012      	beq.n	80069e8 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	f012 0f08 	tst.w	r2, #8
 80069c8:	d00e      	beq.n	80069e8 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ca:	f06f 0208 	mvn.w	r2, #8
 80069ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069d0:	2304      	movs	r3, #4
 80069d2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	f013 0f03 	tst.w	r3, #3
 80069dc:	d04e      	beq.n	8006a7c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80069de:	4620      	mov	r0, r4
 80069e0:	f7ff ffb6 	bl	8006950 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e4:	2300      	movs	r3, #0
 80069e6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	691a      	ldr	r2, [r3, #16]
 80069ec:	f012 0f10 	tst.w	r2, #16
 80069f0:	d012      	beq.n	8006a18 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	f012 0f10 	tst.w	r2, #16
 80069f8:	d00e      	beq.n	8006a18 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069fa:	f06f 0210 	mvn.w	r2, #16
 80069fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a00:	2308      	movs	r3, #8
 8006a02:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006a0c:	d03d      	beq.n	8006a8a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f7ff ff9e 	bl	8006950 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a14:	2300      	movs	r3, #0
 8006a16:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	f012 0f01 	tst.w	r2, #1
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	f012 0f01 	tst.w	r2, #1
 8006a28:	d136      	bne.n	8006a98 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	691a      	ldr	r2, [r3, #16]
 8006a2e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a32:	d003      	beq.n	8006a3c <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a34:	68da      	ldr	r2, [r3, #12]
 8006a36:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a3a:	d134      	bne.n	8006aa6 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a44:	d003      	beq.n	8006a4e <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006a4c:	d132      	bne.n	8006ab4 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	f012 0f20 	tst.w	r2, #32
 8006a56:	d003      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	f012 0f20 	tst.w	r2, #32
 8006a5e:	d130      	bne.n	8006ac2 <HAL_TIM_IRQHandler+0x16c>
}
 8006a60:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a62:	f7ff ff74 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7ff ff73 	bl	8006952 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a6c:	e78a      	b.n	8006984 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f7ff ff6d 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7ff ff6c 	bl	8006952 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a7a:	e79b      	b.n	80069b4 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f7ff ff66 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a82:	4620      	mov	r0, r4
 8006a84:	f7ff ff65 	bl	8006952 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a88:	e7ac      	b.n	80069e4 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff ff5f 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	4620      	mov	r0, r4
 8006a92:	f7ff ff5e 	bl	8006952 <HAL_TIM_PWM_PulseFinishedCallback>
 8006a96:	e7bd      	b.n	8006a14 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a98:	f06f 0201 	mvn.w	r2, #1
 8006a9c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f7fb ff8e 	bl	80029c0 <HAL_TIM_PeriodElapsedCallback>
 8006aa4:	e7c1      	b.n	8006a2a <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aa6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006aaa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 f954 	bl	8006d5a <HAL_TIMEx_BreakCallback>
 8006ab2:	e7c3      	b.n	8006a3c <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ab8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006aba:	4620      	mov	r0, r4
 8006abc:	f7ff ff4a 	bl	8006954 <HAL_TIM_TriggerCallback>
 8006ac0:	e7c5      	b.n	8006a4e <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ac2:	f06f 0220 	mvn.w	r2, #32
 8006ac6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 f945 	bl	8006d58 <HAL_TIMEx_CommutCallback>
}
 8006ace:	e7c7      	b.n	8006a60 <HAL_TIM_IRQHandler+0x10a>

08006ad0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006ad0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ad2:	4a25      	ldr	r2, [pc, #148]	; (8006b68 <TIM_Base_SetConfig+0x98>)
 8006ad4:	4290      	cmp	r0, r2
 8006ad6:	d00e      	beq.n	8006af6 <TIM_Base_SetConfig+0x26>
 8006ad8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006adc:	d00b      	beq.n	8006af6 <TIM_Base_SetConfig+0x26>
 8006ade:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006ae2:	4290      	cmp	r0, r2
 8006ae4:	d007      	beq.n	8006af6 <TIM_Base_SetConfig+0x26>
 8006ae6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aea:	4290      	cmp	r0, r2
 8006aec:	d003      	beq.n	8006af6 <TIM_Base_SetConfig+0x26>
 8006aee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006af2:	4290      	cmp	r0, r2
 8006af4:	d103      	bne.n	8006afe <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006afa:	684a      	ldr	r2, [r1, #4]
 8006afc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006afe:	4a1a      	ldr	r2, [pc, #104]	; (8006b68 <TIM_Base_SetConfig+0x98>)
 8006b00:	4290      	cmp	r0, r2
 8006b02:	d01a      	beq.n	8006b3a <TIM_Base_SetConfig+0x6a>
 8006b04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006b08:	d017      	beq.n	8006b3a <TIM_Base_SetConfig+0x6a>
 8006b0a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006b0e:	4290      	cmp	r0, r2
 8006b10:	d013      	beq.n	8006b3a <TIM_Base_SetConfig+0x6a>
 8006b12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b16:	4290      	cmp	r0, r2
 8006b18:	d00f      	beq.n	8006b3a <TIM_Base_SetConfig+0x6a>
 8006b1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b1e:	4290      	cmp	r0, r2
 8006b20:	d00b      	beq.n	8006b3a <TIM_Base_SetConfig+0x6a>
 8006b22:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006b26:	4290      	cmp	r0, r2
 8006b28:	d007      	beq.n	8006b3a <TIM_Base_SetConfig+0x6a>
 8006b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b2e:	4290      	cmp	r0, r2
 8006b30:	d003      	beq.n	8006b3a <TIM_Base_SetConfig+0x6a>
 8006b32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b36:	4290      	cmp	r0, r2
 8006b38:	d103      	bne.n	8006b42 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b3e:	68ca      	ldr	r2, [r1, #12]
 8006b40:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b46:	694a      	ldr	r2, [r1, #20]
 8006b48:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006b4a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b4c:	688b      	ldr	r3, [r1, #8]
 8006b4e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006b50:	680b      	ldr	r3, [r1, #0]
 8006b52:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b54:	4b04      	ldr	r3, [pc, #16]	; (8006b68 <TIM_Base_SetConfig+0x98>)
 8006b56:	4298      	cmp	r0, r3
 8006b58:	d002      	beq.n	8006b60 <TIM_Base_SetConfig+0x90>
  TIMx->EGR = TIM_EGR_UG;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	6143      	str	r3, [r0, #20]
}
 8006b5e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8006b60:	690b      	ldr	r3, [r1, #16]
 8006b62:	6303      	str	r3, [r0, #48]	; 0x30
 8006b64:	e7f9      	b.n	8006b5a <TIM_Base_SetConfig+0x8a>
 8006b66:	bf00      	nop
 8006b68:	40010000 	.word	0x40010000

08006b6c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006b6c:	b340      	cbz	r0, 8006bc0 <HAL_TIM_Base_Init+0x54>
{
 8006b6e:	b510      	push	{r4, lr}
 8006b70:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006b76:	b1f3      	cbz	r3, 8006bb6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	2302      	movs	r3, #2
 8006b7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b7e:	4621      	mov	r1, r4
 8006b80:	f851 0b04 	ldr.w	r0, [r1], #4
 8006b84:	f7ff ffa4 	bl	8006ad0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006b92:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006b96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006b9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ba6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006bae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006bb2:	2000      	movs	r0, #0
}
 8006bb4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006bb6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006bba:	f7fd fc19 	bl	80043f0 <HAL_TIM_Base_MspInit>
 8006bbe:	e7db      	b.n	8006b78 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006bc0:	2001      	movs	r0, #1
}
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8006bc4:	b340      	cbz	r0, 8006c18 <HAL_TIM_OC_Init+0x54>
{
 8006bc6:	b510      	push	{r4, lr}
 8006bc8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006bca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006bce:	b1f3      	cbz	r3, 8006c0e <HAL_TIM_OC_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	f851 0b04 	ldr.w	r0, [r1], #4
 8006bdc:	f7ff ff78 	bl	8006ad0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006be0:	2301      	movs	r3, #1
 8006be2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006bea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006bee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006bf2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006c06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006c0a:	2000      	movs	r0, #0
}
 8006c0c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006c0e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8006c12:	f7fd fb81 	bl	8004318 <HAL_TIM_OC_MspInit>
 8006c16:	e7db      	b.n	8006bd0 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 8006c18:	2001      	movs	r0, #1
}
 8006c1a:	4770      	bx	lr

08006c1c <TIM_OC2_SetConfig>:
{
 8006c1c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c1e:	6a03      	ldr	r3, [r0, #32]
 8006c20:	f023 0310 	bic.w	r3, r3, #16
 8006c24:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006c26:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006c28:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006c2a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c2c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c30:	680d      	ldr	r5, [r1, #0]
 8006c32:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006c36:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c3a:	688d      	ldr	r5, [r1, #8]
 8006c3c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c40:	4d0e      	ldr	r5, [pc, #56]	; (8006c7c <TIM_OC2_SetConfig+0x60>)
 8006c42:	42a8      	cmp	r0, r5
 8006c44:	d009      	beq.n	8006c5a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c46:	4d0d      	ldr	r5, [pc, #52]	; (8006c7c <TIM_OC2_SetConfig+0x60>)
 8006c48:	42a8      	cmp	r0, r5
 8006c4a:	d00e      	beq.n	8006c6a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8006c4c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006c4e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006c50:	684a      	ldr	r2, [r1, #4]
 8006c52:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006c54:	6203      	str	r3, [r0, #32]
}
 8006c56:	bc30      	pop	{r4, r5}
 8006c58:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c5e:	68cd      	ldr	r5, [r1, #12]
 8006c60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c68:	e7ed      	b.n	8006c46 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c6a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c6e:	694d      	ldr	r5, [r1, #20]
 8006c70:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c74:	698d      	ldr	r5, [r1, #24]
 8006c76:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8006c7a:	e7e7      	b.n	8006c4c <TIM_OC2_SetConfig+0x30>
 8006c7c:	40010000 	.word	0x40010000

08006c80 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8006c80:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d028      	beq.n	8006cda <HAL_TIM_OC_ConfigChannel+0x5a>
{
 8006c88:	b510      	push	{r4, lr}
 8006c8a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006c92:	2a0c      	cmp	r2, #12
 8006c94:	d81c      	bhi.n	8006cd0 <HAL_TIM_OC_ConfigChannel+0x50>
 8006c96:	e8df f002 	tbb	[pc, r2]
 8006c9a:	1b07      	.short	0x1b07
 8006c9c:	1b0c1b1b 	.word	0x1b0c1b1b
 8006ca0:	1b111b1b 	.word	0x1b111b1b
 8006ca4:	1b1b      	.short	0x1b1b
 8006ca6:	16          	.byte	0x16
 8006ca7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca8:	6800      	ldr	r0, [r0, #0]
 8006caa:	f7ff fd77 	bl	800679c <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006cae:	2000      	movs	r0, #0
      break;
 8006cb0:	e00f      	b.n	8006cd2 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cb2:	6800      	ldr	r0, [r0, #0]
 8006cb4:	f7ff ffb2 	bl	8006c1c <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006cb8:	2000      	movs	r0, #0
      break;
 8006cba:	e00a      	b.n	8006cd2 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cbc:	6800      	ldr	r0, [r0, #0]
 8006cbe:	f7ff fd9b 	bl	80067f8 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006cc2:	2000      	movs	r0, #0
      break;
 8006cc4:	e005      	b.n	8006cd2 <HAL_TIM_OC_ConfigChannel+0x52>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cc6:	6800      	ldr	r0, [r0, #0]
 8006cc8:	f7ff fdc8 	bl	800685c <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006ccc:	2000      	movs	r0, #0
      break;
 8006cce:	e000      	b.n	8006cd2 <HAL_TIM_OC_ConfigChannel+0x52>
  __HAL_LOCK(htim);
 8006cd0:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006cd8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8006cda:	2002      	movs	r0, #2
}
 8006cdc:	4770      	bx	lr
	...

08006ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ce0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d033      	beq.n	8006d50 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8006ce8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8006cea:	2301      	movs	r3, #1
 8006cec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cf6:	6803      	ldr	r3, [r0, #0]
 8006cf8:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cfa:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cfc:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d00:	680a      	ldr	r2, [r1, #0]
 8006d02:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d06:	6803      	ldr	r3, [r0, #0]
 8006d08:	4a12      	ldr	r2, [pc, #72]	; (8006d54 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d012      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d12:	d00f      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006d14:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d00b      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006d1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d007      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006d24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006d2c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d104      	bne.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d34:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d38:	684a      	ldr	r2, [r1, #4]
 8006d3a:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d3c:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d44:	2300      	movs	r3, #0
 8006d46:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006d4a:	4618      	mov	r0, r3
}
 8006d4c:	bc30      	pop	{r4, r5}
 8006d4e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006d50:	2002      	movs	r0, #2
}
 8006d52:	4770      	bx	lr
 8006d54:	40010000 	.word	0x40010000

08006d58 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d58:	4770      	bx	lr

08006d5a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d5a:	4770      	bx	lr

08006d5c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d5c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	f102 030c 	add.w	r3, r2, #12
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6a:	320c      	adds	r2, #12
 8006d6c:	e842 3100 	strex	r1, r3, [r2]
 8006d70:	2900      	cmp	r1, #0
 8006d72:	d1f3      	bne.n	8006d5c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d74:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	f102 0314 	add.w	r3, r2, #20
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d82:	3214      	adds	r2, #20
 8006d84:	e842 3100 	strex	r1, r3, [r2]
 8006d88:	2900      	cmp	r1, #0
 8006d8a:	d1f3      	bne.n	8006d74 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d005      	beq.n	8006d9e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d92:	2320      	movs	r3, #32
 8006d94:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	6303      	str	r3, [r0, #48]	; 0x30
}
 8006d9c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	f102 030c 	add.w	r3, r2, #12
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	320c      	adds	r2, #12
 8006dae:	e842 3100 	strex	r1, r3, [r2]
 8006db2:	2900      	cmp	r1, #0
 8006db4:	d1f3      	bne.n	8006d9e <UART_EndRxTransfer+0x42>
 8006db6:	e7ec      	b.n	8006d92 <UART_EndRxTransfer+0x36>

08006db8 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006db8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b21      	cmp	r3, #33	; 0x21
 8006dc0:	d001      	beq.n	8006dc6 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8006dc2:	2002      	movs	r0, #2
  }
}
 8006dc4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dc6:	6883      	ldr	r3, [r0, #8]
 8006dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dcc:	d017      	beq.n	8006dfe <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006dce:	6a03      	ldr	r3, [r0, #32]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	6202      	str	r2, [r0, #32]
 8006dd4:	781a      	ldrb	r2, [r3, #0]
 8006dd6:	6803      	ldr	r3, [r0, #0]
 8006dd8:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8006dda:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	84c3      	strh	r3, [r0, #38]	; 0x26
 8006de4:	b94b      	cbnz	r3, 8006dfa <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006de6:	6802      	ldr	r2, [r0, #0]
 8006de8:	68d3      	ldr	r3, [r2, #12]
 8006dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dee:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006df0:	6802      	ldr	r2, [r0, #0]
 8006df2:	68d3      	ldr	r3, [r2, #12]
 8006df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df8:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dfe:	6903      	ldr	r3, [r0, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e4      	bne.n	8006dce <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006e04:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	6802      	ldr	r2, [r0, #0]
 8006e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0e:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8006e10:	6a03      	ldr	r3, [r0, #32]
 8006e12:	3302      	adds	r3, #2
 8006e14:	6203      	str	r3, [r0, #32]
 8006e16:	e7e0      	b.n	8006dda <UART_Transmit_IT+0x22>

08006e18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e1c:	6802      	ldr	r2, [r0, #0]
 8006e1e:	6913      	ldr	r3, [r2, #16]
 8006e20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e24:	68c1      	ldr	r1, [r0, #12]
 8006e26:	430b      	orrs	r3, r1
 8006e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e2a:	6883      	ldr	r3, [r0, #8]
 8006e2c:	6902      	ldr	r2, [r0, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	6942      	ldr	r2, [r0, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	69c2      	ldr	r2, [r0, #28]
 8006e36:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8006e38:	6801      	ldr	r1, [r0, #0]
 8006e3a:	68cb      	ldr	r3, [r1, #12]
 8006e3c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e40:	f023 030c 	bic.w	r3, r3, #12
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e48:	6802      	ldr	r2, [r0, #0]
 8006e4a:	6953      	ldr	r3, [r2, #20]
 8006e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e50:	6981      	ldr	r1, [r0, #24]
 8006e52:	430b      	orrs	r3, r1
 8006e54:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e56:	6803      	ldr	r3, [r0, #0]
 8006e58:	4a34      	ldr	r2, [pc, #208]	; (8006f2c <UART_SetConfig+0x114>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d006      	beq.n	8006e6c <UART_SetConfig+0x54>
 8006e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d002      	beq.n	8006e6c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e66:	f7fe fef5 	bl	8005c54 <HAL_RCC_GetPCLK1Freq>
 8006e6a:	e001      	b.n	8006e70 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e6c:	f7fe ff02 	bl	8005c74 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e70:	69e3      	ldr	r3, [r4, #28]
 8006e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e76:	d02a      	beq.n	8006ece <UART_SetConfig+0xb6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e78:	2600      	movs	r6, #0
 8006e7a:	1805      	adds	r5, r0, r0
 8006e7c:	eb46 0106 	adc.w	r1, r6, r6
 8006e80:	182d      	adds	r5, r5, r0
 8006e82:	eb46 0101 	adc.w	r1, r6, r1
 8006e86:	00cb      	lsls	r3, r1, #3
 8006e88:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006e8c:	00ea      	lsls	r2, r5, #3
 8006e8e:	4615      	mov	r5, r2
 8006e90:	4619      	mov	r1, r3
 8006e92:	6863      	ldr	r3, [r4, #4]
 8006e94:	009a      	lsls	r2, r3, #2
 8006e96:	0f9b      	lsrs	r3, r3, #30
 8006e98:	1828      	adds	r0, r5, r0
 8006e9a:	eb46 0101 	adc.w	r1, r6, r1
 8006e9e:	f7f9 feab 	bl	8000bf8 <__aeabi_uldivmod>
 8006ea2:	4d23      	ldr	r5, [pc, #140]	; (8006f30 <UART_SetConfig+0x118>)
 8006ea4:	fba5 3200 	umull	r3, r2, r5, r0
 8006ea8:	0951      	lsrs	r1, r2, #5
 8006eaa:	2364      	movs	r3, #100	; 0x64
 8006eac:	fb03 0311 	mls	r3, r3, r1, r0
 8006eb0:	011b      	lsls	r3, r3, #4
 8006eb2:	3332      	adds	r3, #50	; 0x32
 8006eb4:	fba5 2303 	umull	r2, r3, r5, r3
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ebe:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	6821      	ldr	r1, [r4, #0]
 8006ec8:	4413      	add	r3, r2
 8006eca:	608b      	str	r3, [r1, #8]
  }
}
 8006ecc:	bd70      	pop	{r4, r5, r6, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ece:	2600      	movs	r6, #0
 8006ed0:	1805      	adds	r5, r0, r0
 8006ed2:	eb46 0106 	adc.w	r1, r6, r6
 8006ed6:	182d      	adds	r5, r5, r0
 8006ed8:	eb46 0101 	adc.w	r1, r6, r1
 8006edc:	00cb      	lsls	r3, r1, #3
 8006ede:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8006ee2:	00ea      	lsls	r2, r5, #3
 8006ee4:	4615      	mov	r5, r2
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6862      	ldr	r2, [r4, #4]
 8006eea:	4633      	mov	r3, r6
 8006eec:	1892      	adds	r2, r2, r2
 8006eee:	eb46 0303 	adc.w	r3, r6, r3
 8006ef2:	1828      	adds	r0, r5, r0
 8006ef4:	eb46 0101 	adc.w	r1, r6, r1
 8006ef8:	f7f9 fe7e 	bl	8000bf8 <__aeabi_uldivmod>
 8006efc:	4d0c      	ldr	r5, [pc, #48]	; (8006f30 <UART_SetConfig+0x118>)
 8006efe:	fba5 3200 	umull	r3, r2, r5, r0
 8006f02:	0951      	lsrs	r1, r2, #5
 8006f04:	2364      	movs	r3, #100	; 0x64
 8006f06:	fb03 0311 	mls	r3, r3, r1, r0
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	3332      	adds	r3, #50	; 0x32
 8006f0e:	fba5 2303 	umull	r2, r3, r5, r3
 8006f12:	095b      	lsrs	r3, r3, #5
 8006f14:	005a      	lsls	r2, r3, #1
 8006f16:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8006f1a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	6821      	ldr	r1, [r4, #0]
 8006f24:	4413      	add	r3, r2
 8006f26:	608b      	str	r3, [r1, #8]
 8006f28:	e7d0      	b.n	8006ecc <UART_SetConfig+0xb4>
 8006f2a:	bf00      	nop
 8006f2c:	40011000 	.word	0x40011000
 8006f30:	51eb851f 	.word	0x51eb851f

08006f34 <HAL_UART_Init>:
  if (huart == NULL)
 8006f34:	b358      	cbz	r0, 8006f8e <HAL_UART_Init+0x5a>
{
 8006f36:	b510      	push	{r4, lr}
 8006f38:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f3e:	b30b      	cbz	r3, 8006f84 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8006f40:	2324      	movs	r3, #36	; 0x24
 8006f42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	68d3      	ldr	r3, [r2, #12]
 8006f4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f4e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006f50:	4620      	mov	r0, r4
 8006f52:	f7ff ff61 	bl	8006e18 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f56:	6822      	ldr	r2, [r4, #0]
 8006f58:	6913      	ldr	r3, [r2, #16]
 8006f5a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006f5e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f60:	6822      	ldr	r2, [r4, #0]
 8006f62:	6953      	ldr	r3, [r2, #20]
 8006f64:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006f68:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006f6a:	6822      	ldr	r2, [r4, #0]
 8006f6c:	68d3      	ldr	r3, [r2, #12]
 8006f6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f72:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f74:	2000      	movs	r0, #0
 8006f76:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f78:	2320      	movs	r3, #32
 8006f7a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8006f82:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006f84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8006f88:	f7fd fa6c 	bl	8004464 <HAL_UART_MspInit>
 8006f8c:	e7d8      	b.n	8006f40 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8006f8e:	2001      	movs	r0, #1
}
 8006f90:	4770      	bx	lr

08006f92 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8006f92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d116      	bne.n	8006fca <HAL_UART_Transmit_IT+0x38>
    if ((pData == NULL) || (Size == 0U))
 8006f9c:	b1b9      	cbz	r1, 8006fce <HAL_UART_Transmit_IT+0x3c>
 8006f9e:	b1c2      	cbz	r2, 8006fd2 <HAL_UART_Transmit_IT+0x40>
    __HAL_LOCK(huart);
 8006fa0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d016      	beq.n	8006fd6 <HAL_UART_Transmit_IT+0x44>
    huart->pTxBuffPtr = pData;
 8006fa8:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8006faa:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fac:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fb2:	2221      	movs	r2, #33	; 0x21
 8006fb4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(huart);
 8006fb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006fbc:	6801      	ldr	r1, [r0, #0]
 8006fbe:	68ca      	ldr	r2, [r1, #12]
 8006fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006fc4:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	4770      	bx	lr
    return HAL_BUSY;
 8006fca:	2002      	movs	r0, #2
 8006fcc:	4770      	bx	lr
      return HAL_ERROR;
 8006fce:	2001      	movs	r0, #1
 8006fd0:	4770      	bx	lr
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	4770      	bx	lr
    __HAL_LOCK(huart);
 8006fd6:	2002      	movs	r0, #2
}
 8006fd8:	4770      	bx	lr

08006fda <HAL_UART_TxCpltCallback>:
}
 8006fda:	4770      	bx	lr

08006fdc <UART_EndTransmit_IT>:
{
 8006fdc:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006fde:	6801      	ldr	r1, [r0, #0]
 8006fe0:	68ca      	ldr	r2, [r1, #12]
 8006fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe6:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8006fee:	f7ff fff4 	bl	8006fda <HAL_UART_TxCpltCallback>
}
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	bd08      	pop	{r3, pc}

08006ff6 <UART_DMAAbortOnError>:
{
 8006ff6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ff8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ffe:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007000:	f7fc fc02 	bl	8003808 <HAL_UART_ErrorCallback>
}
 8007004:	bd08      	pop	{r3, pc}

08007006 <HAL_UARTEx_RxEventCallback>:
}
 8007006:	4770      	bx	lr

08007008 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007008:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b22      	cmp	r3, #34	; 0x22
 8007010:	d167      	bne.n	80070e2 <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007012:	6883      	ldr	r3, [r0, #8]
 8007014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007018:	d04d      	beq.n	80070b6 <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800701a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800701c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007020:	d004      	beq.n	800702c <UART_Receive_IT+0x24>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d154      	bne.n	80070d0 <UART_Receive_IT+0xc8>
 8007026:	6903      	ldr	r3, [r0, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d151      	bne.n	80070d0 <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800702c:	6803      	ldr	r3, [r0, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8007032:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007034:	3301      	adds	r3, #1
 8007036:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007038:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29b      	uxth	r3, r3
 8007040:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8007042:	2b00      	cmp	r3, #0
 8007044:	d14f      	bne.n	80070e6 <UART_Receive_IT+0xde>
{
 8007046:	b500      	push	{lr}
 8007048:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800704a:	6802      	ldr	r2, [r0, #0]
 800704c:	68d3      	ldr	r3, [r2, #12]
 800704e:	f023 0320 	bic.w	r3, r3, #32
 8007052:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007054:	6802      	ldr	r2, [r0, #0]
 8007056:	68d3      	ldr	r3, [r2, #12]
 8007058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800705c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800705e:	6802      	ldr	r2, [r0, #0]
 8007060:	6953      	ldr	r3, [r2, #20]
 8007062:	f023 0301 	bic.w	r3, r3, #1
 8007066:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007068:	2320      	movs	r3, #32
 800706a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800706e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007070:	2b01      	cmp	r3, #1
 8007072:	d133      	bne.n	80070dc <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007074:	2300      	movs	r3, #0
 8007076:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007078:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	f102 030c 	add.w	r3, r2, #12
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	320c      	adds	r2, #12
 8007088:	e842 3100 	strex	r1, r3, [r2]
 800708c:	2900      	cmp	r1, #0
 800708e:	d1f3      	bne.n	8007078 <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007090:	6803      	ldr	r3, [r0, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	f012 0f10 	tst.w	r2, #16
 8007098:	d006      	beq.n	80070a8 <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800709a:	2200      	movs	r2, #0
 800709c:	9201      	str	r2, [sp, #4]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	9201      	str	r2, [sp, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070a8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80070aa:	f7ff ffac 	bl	8007006 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80070ae:	2000      	movs	r0, #0
}
 80070b0:	b003      	add	sp, #12
 80070b2:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b6:	6902      	ldr	r2, [r0, #16]
 80070b8:	2a00      	cmp	r2, #0
 80070ba:	d1ae      	bne.n	800701a <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070be:	6803      	ldr	r3, [r0, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c6:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80070c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80070ca:	3302      	adds	r3, #2
 80070cc:	6283      	str	r3, [r0, #40]	; 0x28
 80070ce:	e7b3      	b.n	8007038 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070d0:	6803      	ldr	r3, [r0, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d8:	7013      	strb	r3, [r2, #0]
 80070da:	e7aa      	b.n	8007032 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80070dc:	f7fc f848 	bl	8003170 <HAL_UART_RxCpltCallback>
 80070e0:	e7e5      	b.n	80070ae <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 80070e2:	2002      	movs	r0, #2
 80070e4:	4770      	bx	lr
    return HAL_OK;
 80070e6:	2000      	movs	r0, #0
}
 80070e8:	4770      	bx	lr
	...

080070ec <HAL_UART_IRQHandler>:
{
 80070ec:	b530      	push	{r4, r5, lr}
 80070ee:	b083      	sub	sp, #12
 80070f0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070f2:	6802      	ldr	r2, [r0, #0]
 80070f4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070f6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070f8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80070fa:	f013 050f 	ands.w	r5, r3, #15
 80070fe:	d105      	bne.n	800710c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007100:	f013 0f20 	tst.w	r3, #32
 8007104:	d002      	beq.n	800710c <HAL_UART_IRQHandler+0x20>
 8007106:	f010 0f20 	tst.w	r0, #32
 800710a:	d119      	bne.n	8007140 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800710c:	b12d      	cbz	r5, 800711a <HAL_UART_IRQHandler+0x2e>
 800710e:	f011 0101 	ands.w	r1, r1, #1
 8007112:	d119      	bne.n	8007148 <HAL_UART_IRQHandler+0x5c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007114:	f410 7f90 	tst.w	r0, #288	; 0x120
 8007118:	d116      	bne.n	8007148 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800711c:	2901      	cmp	r1, #1
 800711e:	d07d      	beq.n	800721c <HAL_UART_IRQHandler+0x130>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007120:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007124:	d003      	beq.n	800712e <HAL_UART_IRQHandler+0x42>
 8007126:	f010 0f80 	tst.w	r0, #128	; 0x80
 800712a:	f040 8115 	bne.w	8007358 <HAL_UART_IRQHandler+0x26c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800712e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007132:	d003      	beq.n	800713c <HAL_UART_IRQHandler+0x50>
 8007134:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007138:	f040 8112 	bne.w	8007360 <HAL_UART_IRQHandler+0x274>
}
 800713c:	b003      	add	sp, #12
 800713e:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8007140:	4620      	mov	r0, r4
 8007142:	f7ff ff61 	bl	8007008 <UART_Receive_IT>
      return;
 8007146:	e7f9      	b.n	800713c <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007148:	f013 0f01 	tst.w	r3, #1
 800714c:	d006      	beq.n	800715c <HAL_UART_IRQHandler+0x70>
 800714e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007152:	d003      	beq.n	800715c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007154:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800715c:	f013 0f04 	tst.w	r3, #4
 8007160:	d004      	beq.n	800716c <HAL_UART_IRQHandler+0x80>
 8007162:	b119      	cbz	r1, 800716c <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007164:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007166:	f042 0202 	orr.w	r2, r2, #2
 800716a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800716c:	f013 0f02 	tst.w	r3, #2
 8007170:	d004      	beq.n	800717c <HAL_UART_IRQHandler+0x90>
 8007172:	b119      	cbz	r1, 800717c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007174:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007176:	f042 0204 	orr.w	r2, r2, #4
 800717a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800717c:	f013 0f08 	tst.w	r3, #8
 8007180:	d007      	beq.n	8007192 <HAL_UART_IRQHandler+0xa6>
 8007182:	f010 0f20 	tst.w	r0, #32
 8007186:	d100      	bne.n	800718a <HAL_UART_IRQHandler+0x9e>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007188:	b119      	cbz	r1, 8007192 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800718a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800718c:	f042 0208 	orr.w	r2, r2, #8
 8007190:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007192:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007194:	2a00      	cmp	r2, #0
 8007196:	d0d1      	beq.n	800713c <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007198:	f013 0f20 	tst.w	r3, #32
 800719c:	d002      	beq.n	80071a4 <HAL_UART_IRQHandler+0xb8>
 800719e:	f010 0f20 	tst.w	r0, #32
 80071a2:	d129      	bne.n	80071f8 <HAL_UART_IRQHandler+0x10c>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80071ae:	f012 0f08 	tst.w	r2, #8
 80071b2:	d100      	bne.n	80071b6 <HAL_UART_IRQHandler+0xca>
 80071b4:	b363      	cbz	r3, 8007210 <HAL_UART_IRQHandler+0x124>
        UART_EndRxTransfer(huart);
 80071b6:	4620      	mov	r0, r4
 80071b8:	f7ff fdd0 	bl	8006d5c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80071c4:	d020      	beq.n	8007208 <HAL_UART_IRQHandler+0x11c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071c6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	f102 0314 	add.w	r3, r2, #20
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	3214      	adds	r2, #20
 80071d6:	e842 3100 	strex	r1, r3, [r2]
 80071da:	2900      	cmp	r1, #0
 80071dc:	d1f3      	bne.n	80071c6 <HAL_UART_IRQHandler+0xda>
          if (huart->hdmarx != NULL)
 80071de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80071e0:	b173      	cbz	r3, 8007200 <HAL_UART_IRQHandler+0x114>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071e2:	4a61      	ldr	r2, [pc, #388]	; (8007368 <HAL_UART_IRQHandler+0x27c>)
 80071e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80071e8:	f7fd fbd8 	bl	800499c <HAL_DMA_Abort_IT>
 80071ec:	2800      	cmp	r0, #0
 80071ee:	d0a5      	beq.n	800713c <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80071f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80071f4:	4798      	blx	r3
 80071f6:	e7a1      	b.n	800713c <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7ff ff05 	bl	8007008 <UART_Receive_IT>
 80071fe:	e7d1      	b.n	80071a4 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8007200:	4620      	mov	r0, r4
 8007202:	f7fc fb01 	bl	8003808 <HAL_UART_ErrorCallback>
 8007206:	e799      	b.n	800713c <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8007208:	4620      	mov	r0, r4
 800720a:	f7fc fafd 	bl	8003808 <HAL_UART_ErrorCallback>
 800720e:	e795      	b.n	800713c <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8007210:	4620      	mov	r0, r4
 8007212:	f7fc faf9 	bl	8003808 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007216:	2300      	movs	r3, #0
 8007218:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 800721a:	e78f      	b.n	800713c <HAL_UART_IRQHandler+0x50>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800721c:	f013 0f10 	tst.w	r3, #16
 8007220:	f43f af7e 	beq.w	8007120 <HAL_UART_IRQHandler+0x34>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007224:	f010 0f10 	tst.w	r0, #16
 8007228:	f43f af7a 	beq.w	8007120 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800722c:	2300      	movs	r3, #0
 800722e:	9301      	str	r3, [sp, #4]
 8007230:	6813      	ldr	r3, [r2, #0]
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	6853      	ldr	r3, [r2, #4]
 8007236:	9301      	str	r3, [sp, #4]
 8007238:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800723a:	6953      	ldr	r3, [r2, #20]
 800723c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007240:	d050      	beq.n	80072e4 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007242:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007244:	6813      	ldr	r3, [r2, #0]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800724a:	2b00      	cmp	r3, #0
 800724c:	f43f af76 	beq.w	800713c <HAL_UART_IRQHandler+0x50>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007250:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007252:	4299      	cmp	r1, r3
 8007254:	f67f af72 	bls.w	800713c <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8007258:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800725a:	69d3      	ldr	r3, [r2, #28]
 800725c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007260:	d037      	beq.n	80072d2 <HAL_UART_IRQHandler+0x1e6>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007262:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007264:	f102 030c 	add.w	r3, r2, #12
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	320c      	adds	r2, #12
 8007272:	e842 3100 	strex	r1, r3, [r2]
 8007276:	2900      	cmp	r1, #0
 8007278:	d1f3      	bne.n	8007262 <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	f102 0314 	add.w	r3, r2, #20
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	3214      	adds	r2, #20
 800728a:	e842 3100 	strex	r1, r3, [r2]
 800728e:	2900      	cmp	r1, #0
 8007290:	d1f3      	bne.n	800727a <HAL_UART_IRQHandler+0x18e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007292:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	f102 0314 	add.w	r3, r2, #20
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	3214      	adds	r2, #20
 80072a2:	e842 3100 	strex	r1, r3, [r2]
 80072a6:	2900      	cmp	r1, #0
 80072a8:	d1f3      	bne.n	8007292 <HAL_UART_IRQHandler+0x1a6>
          huart->RxState = HAL_UART_STATE_READY;
 80072aa:	2320      	movs	r3, #32
 80072ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b0:	2300      	movs	r3, #0
 80072b2:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	f102 030c 	add.w	r3, r2, #12
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	320c      	adds	r2, #12
 80072c4:	e842 3100 	strex	r1, r3, [r2]
 80072c8:	2900      	cmp	r1, #0
 80072ca:	d1f3      	bne.n	80072b4 <HAL_UART_IRQHandler+0x1c8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80072ce:	f7fd fb1b 	bl	8004908 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072d2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80072d4:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	1ac9      	subs	r1, r1, r3
 80072da:	b289      	uxth	r1, r1
 80072dc:	4620      	mov	r0, r4
 80072de:	f7ff fe92 	bl	8007006 <HAL_UARTEx_RxEventCallback>
      return;
 80072e2:	e72b      	b.n	800713c <HAL_UART_IRQHandler+0x50>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80072e4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80072e6:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	1ac9      	subs	r1, r1, r3
 80072ec:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80072ee:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f43f af22 	beq.w	800713c <HAL_UART_IRQHandler+0x50>
          && (nb_rx_data > 0U))
 80072f8:	2900      	cmp	r1, #0
 80072fa:	f43f af1f 	beq.w	800713c <HAL_UART_IRQHandler+0x50>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	f102 030c 	add.w	r3, r2, #12
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	320c      	adds	r2, #12
 800730e:	e842 3000 	strex	r0, r3, [r2]
 8007312:	2800      	cmp	r0, #0
 8007314:	d1f3      	bne.n	80072fe <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007316:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	f102 0314 	add.w	r3, r2, #20
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	3214      	adds	r2, #20
 8007326:	e842 3000 	strex	r0, r3, [r2]
 800732a:	2800      	cmp	r0, #0
 800732c:	d1f3      	bne.n	8007316 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 800732e:	2320      	movs	r3, #32
 8007330:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007334:	2300      	movs	r3, #0
 8007336:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007338:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	f102 030c 	add.w	r3, r2, #12
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007346:	320c      	adds	r2, #12
 8007348:	e842 3000 	strex	r0, r3, [r2]
 800734c:	2800      	cmp	r0, #0
 800734e:	d1f3      	bne.n	8007338 <HAL_UART_IRQHandler+0x24c>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007350:	4620      	mov	r0, r4
 8007352:	f7ff fe58 	bl	8007006 <HAL_UARTEx_RxEventCallback>
      return;
 8007356:	e6f1      	b.n	800713c <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8007358:	4620      	mov	r0, r4
 800735a:	f7ff fd2d 	bl	8006db8 <UART_Transmit_IT>
    return;
 800735e:	e6ed      	b.n	800713c <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8007360:	4620      	mov	r0, r4
 8007362:	f7ff fe3b 	bl	8006fdc <UART_EndTransmit_IT>
    return;
 8007366:	e6e9      	b.n	800713c <HAL_UART_IRQHandler+0x50>
 8007368:	08006ff7 	.word	0x08006ff7

0800736c <UART_Start_Receive_IT>:
{
 800736c:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 800736e:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8007370:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007372:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007374:	2000      	movs	r0, #0
 8007376:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007378:	2222      	movs	r2, #34	; 0x22
 800737a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 800737e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007382:	6819      	ldr	r1, [r3, #0]
 8007384:	68ca      	ldr	r2, [r1, #12]
 8007386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800738a:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800738c:	6819      	ldr	r1, [r3, #0]
 800738e:	694a      	ldr	r2, [r1, #20]
 8007390:	f042 0201 	orr.w	r2, r2, #1
 8007394:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68d3      	ldr	r3, [r2, #12]
 800739a:	f043 0320 	orr.w	r3, r3, #32
 800739e:	60d3      	str	r3, [r2, #12]
}
 80073a0:	4770      	bx	lr

080073a2 <HAL_UART_Receive_IT>:
{
 80073a2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80073a4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d10d      	bne.n	80073ca <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 80073ae:	b171      	cbz	r1, 80073ce <HAL_UART_Receive_IT+0x2c>
 80073b0:	b17a      	cbz	r2, 80073d2 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 80073b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d00d      	beq.n	80073d6 <HAL_UART_Receive_IT+0x34>
 80073ba:	2301      	movs	r3, #1
 80073bc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c0:	2300      	movs	r3, #0
 80073c2:	6303      	str	r3, [r0, #48]	; 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 80073c4:	f7ff ffd2 	bl	800736c <UART_Start_Receive_IT>
 80073c8:	e000      	b.n	80073cc <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 80073ca:	2002      	movs	r0, #2
}
 80073cc:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 80073ce:	2001      	movs	r0, #1
 80073d0:	e7fc      	b.n	80073cc <HAL_UART_Receive_IT+0x2a>
 80073d2:	2001      	movs	r0, #1
 80073d4:	e7fa      	b.n	80073cc <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 80073d6:	2002      	movs	r0, #2
 80073d8:	e7f8      	b.n	80073cc <HAL_UART_Receive_IT+0x2a>
	...

080073dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80073dc:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80073de:	4903      	ldr	r1, [pc, #12]	; (80073ec <MX_FATFS_Init+0x10>)
 80073e0:	4803      	ldr	r0, [pc, #12]	; (80073f0 <MX_FATFS_Init+0x14>)
 80073e2:	f001 fc81 	bl	8008ce8 <FATFS_LinkDriver>
 80073e6:	4b03      	ldr	r3, [pc, #12]	; (80073f4 <MX_FATFS_Init+0x18>)
 80073e8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80073ea:	bd08      	pop	{r3, pc}
 80073ec:	20000e78 	.word	0x20000e78
 80073f0:	2000002c 	.word	0x2000002c
 80073f4:	20000e7c 	.word	0x20000e7c

080073f8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80073f8:	2000      	movs	r0, #0
 80073fa:	4770      	bx	lr

080073fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80073fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 80073fe:	f7fa fd19 	bl	8001e34 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 8007402:	bd08      	pop	{r3, pc}

08007404 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007404:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8007406:	f7fa fdd7 	bl	8001fb8 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800740a:	bd08      	pop	{r3, pc}

0800740c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800740c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff, sector, count);
 800740e:	f7fa fddd 	bl	8001fcc <SD_disk_read>
  /* USER CODE END READ */
}
 8007412:	bd08      	pop	{r3, pc}

08007414 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007414:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector, count);
 8007416:	f7fa fe25 	bl	8002064 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800741a:	bd08      	pop	{r3, pc}

0800741c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800741c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 800741e:	f7fa fe83 	bl	8002128 <SD_disk_ioctl>
  /* USER CODE END IOCTL */
}
 8007422:	bd08      	pop	{r3, pc}

08007424 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007424:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007426:	4b04      	ldr	r3, [pc, #16]	; (8007438 <disk_status+0x14>)
 8007428:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800742c:	6852      	ldr	r2, [r2, #4]
 800742e:	6852      	ldr	r2, [r2, #4]
 8007430:	4403      	add	r3, r0
 8007432:	7a18      	ldrb	r0, [r3, #8]
 8007434:	4790      	blx	r2
  return stat;
}
 8007436:	bd08      	pop	{r3, pc}
 8007438:	20000264 	.word	0x20000264

0800743c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800743c:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800743e:	4b08      	ldr	r3, [pc, #32]	; (8007460 <disk_initialize+0x24>)
 8007440:	5c1b      	ldrb	r3, [r3, r0]
 8007442:	b953      	cbnz	r3, 800745a <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 8007444:	4b06      	ldr	r3, [pc, #24]	; (8007460 <disk_initialize+0x24>)
 8007446:	2201      	movs	r2, #1
 8007448:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800744a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800744e:	6852      	ldr	r2, [r2, #4]
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	4418      	add	r0, r3
 8007454:	7a00      	ldrb	r0, [r0, #8]
 8007456:	4790      	blx	r2
  }
  return stat;
}
 8007458:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 800745a:	2000      	movs	r0, #0
 800745c:	e7fc      	b.n	8007458 <disk_initialize+0x1c>
 800745e:	bf00      	nop
 8007460:	20000264 	.word	0x20000264

08007464 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007464:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007466:	4c04      	ldr	r4, [pc, #16]	; (8007478 <disk_read+0x14>)
 8007468:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800746c:	686d      	ldr	r5, [r5, #4]
 800746e:	68ad      	ldr	r5, [r5, #8]
 8007470:	4404      	add	r4, r0
 8007472:	7a20      	ldrb	r0, [r4, #8]
 8007474:	47a8      	blx	r5
  return res;
}
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20000264 	.word	0x20000264

0800747c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800747c:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800747e:	4c04      	ldr	r4, [pc, #16]	; (8007490 <disk_write+0x14>)
 8007480:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8007484:	686d      	ldr	r5, [r5, #4]
 8007486:	68ed      	ldr	r5, [r5, #12]
 8007488:	4404      	add	r4, r0
 800748a:	7a20      	ldrb	r0, [r4, #8]
 800748c:	47a8      	blx	r5
  return res;
}
 800748e:	bd38      	pop	{r3, r4, r5, pc}
 8007490:	20000264 	.word	0x20000264

08007494 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007494:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007496:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <disk_ioctl+0x14>)
 8007498:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800749c:	6864      	ldr	r4, [r4, #4]
 800749e:	6924      	ldr	r4, [r4, #16]
 80074a0:	4403      	add	r3, r0
 80074a2:	7a18      	ldrb	r0, [r3, #8]
 80074a4:	47a0      	blx	r4
  return res;
}
 80074a6:	bd10      	pop	{r4, pc}
 80074a8:	20000264 	.word	0x20000264

080074ac <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 80074ac:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 80074ae:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80074b0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80074b4:	4770      	bx	lr

080074b6 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 80074b6:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
 80074b8:	7883      	ldrb	r3, [r0, #2]
 80074ba:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
 80074be:	7843      	ldrb	r3, [r0, #1]
 80074c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80074c4:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 80074c6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80074ca:	4770      	bx	lr

080074cc <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80074cc:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80074ce:	0a09      	lsrs	r1, r1, #8
 80074d0:	7041      	strb	r1, [r0, #1]
}
 80074d2:	4770      	bx	lr

080074d4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80074d4:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074d6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80074da:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80074dc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80074e0:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80074e2:	0e09      	lsrs	r1, r1, #24
 80074e4:	70c1      	strb	r1, [r0, #3]
}
 80074e6:	4770      	bx	lr

080074e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80074e8:	b410      	push	{r4}
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 80074ea:	4614      	mov	r4, r2
 80074ec:	b12a      	cbz	r2, 80074fa <mem_cpy+0x12>
		do {
			*d++ = *s++;
 80074ee:	780a      	ldrb	r2, [r1, #0]
 80074f0:	3101      	adds	r1, #1
 80074f2:	7002      	strb	r2, [r0, #0]
 80074f4:	3001      	adds	r0, #1
		} while (--cnt);
 80074f6:	3c01      	subs	r4, #1
 80074f8:	d1f9      	bne.n	80074ee <mem_cpy+0x6>
	}
}
 80074fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8007500:	7001      	strb	r1, [r0, #0]
 8007502:	3001      	adds	r0, #1
	} while (--cnt);
 8007504:	3a01      	subs	r2, #1
 8007506:	d1fb      	bne.n	8007500 <mem_set>
}
 8007508:	4770      	bx	lr

0800750a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800750a:	b410      	push	{r4}
 800750c:	4604      	mov	r4, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800750e:	7820      	ldrb	r0, [r4, #0]
 8007510:	3401      	adds	r4, #1
 8007512:	780b      	ldrb	r3, [r1, #0]
 8007514:	3101      	adds	r1, #1
 8007516:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 8007518:	3a01      	subs	r2, #1
 800751a:	d001      	beq.n	8007520 <mem_cmp+0x16>
 800751c:	2800      	cmp	r0, #0
 800751e:	d0f6      	beq.n	800750e <mem_cmp+0x4>

	return r;
}
 8007520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007524:	4770      	bx	lr

08007526 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007526:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 8007528:	7818      	ldrb	r0, [r3, #0]
 800752a:	b118      	cbz	r0, 8007534 <chk_chr+0xe>
 800752c:	4288      	cmp	r0, r1
 800752e:	d001      	beq.n	8007534 <chk_chr+0xe>
 8007530:	3301      	adds	r3, #1
 8007532:	e7f9      	b.n	8007528 <chk_chr+0x2>
	return *str;
}
 8007534:	4770      	bx	lr
	...

08007538 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007538:	b430      	push	{r4, r5}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800753a:	2500      	movs	r5, #0
 800753c:	462b      	mov	r3, r5
 800753e:	e001      	b.n	8007544 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8007540:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007542:	3301      	adds	r3, #1
 8007544:	2b01      	cmp	r3, #1
 8007546:	d815      	bhi.n	8007574 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8007548:	011a      	lsls	r2, r3, #4
 800754a:	4c17      	ldr	r4, [pc, #92]	; (80075a8 <chk_lock+0x70>)
 800754c:	58a2      	ldr	r2, [r4, r2]
 800754e:	2a00      	cmp	r2, #0
 8007550:	d0f6      	beq.n	8007540 <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007552:	6804      	ldr	r4, [r0, #0]
 8007554:	42a2      	cmp	r2, r4
 8007556:	d1f4      	bne.n	8007542 <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8007558:	4a13      	ldr	r2, [pc, #76]	; (80075a8 <chk_lock+0x70>)
 800755a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800755e:	6854      	ldr	r4, [r2, #4]
 8007560:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007562:	4294      	cmp	r4, r2
 8007564:	d1ed      	bne.n	8007542 <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8007566:	4a10      	ldr	r2, [pc, #64]	; (80075a8 <chk_lock+0x70>)
 8007568:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800756c:	6894      	ldr	r4, [r2, #8]
 800756e:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 8007570:	4294      	cmp	r4, r2
 8007572:	d1e6      	bne.n	8007542 <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007574:	2b02      	cmp	r3, #2
 8007576:	d00a      	beq.n	800758e <chk_lock+0x56>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007578:	b9a1      	cbnz	r1, 80075a4 <chk_lock+0x6c>
 800757a:	4a0b      	ldr	r2, [pc, #44]	; (80075a8 <chk_lock+0x70>)
 800757c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007580:	899b      	ldrh	r3, [r3, #12]
 8007582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007586:	d00b      	beq.n	80075a0 <chk_lock+0x68>
 8007588:	2000      	movs	r0, #0
}
 800758a:	bc30      	pop	{r4, r5}
 800758c:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800758e:	b92d      	cbnz	r5, 800759c <chk_lock+0x64>
 8007590:	2902      	cmp	r1, #2
 8007592:	d001      	beq.n	8007598 <chk_lock+0x60>
 8007594:	2012      	movs	r0, #18
 8007596:	e7f8      	b.n	800758a <chk_lock+0x52>
 8007598:	2000      	movs	r0, #0
 800759a:	e7f6      	b.n	800758a <chk_lock+0x52>
 800759c:	2000      	movs	r0, #0
 800759e:	e7f4      	b.n	800758a <chk_lock+0x52>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80075a0:	2010      	movs	r0, #16
 80075a2:	e7f2      	b.n	800758a <chk_lock+0x52>
 80075a4:	2010      	movs	r0, #16
 80075a6:	e7f0      	b.n	800758a <chk_lock+0x52>
 80075a8:	20000240 	.word	0x20000240

080075ac <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80075ac:	2000      	movs	r0, #0
 80075ae:	e000      	b.n	80075b2 <enq_lock+0x6>
 80075b0:	3001      	adds	r0, #1
 80075b2:	2801      	cmp	r0, #1
 80075b4:	d804      	bhi.n	80075c0 <enq_lock+0x14>
 80075b6:	0103      	lsls	r3, r0, #4
 80075b8:	4a03      	ldr	r2, [pc, #12]	; (80075c8 <enq_lock+0x1c>)
 80075ba:	58d3      	ldr	r3, [r2, r3]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1f7      	bne.n	80075b0 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 80075c0:	3802      	subs	r0, #2
 80075c2:	bf18      	it	ne
 80075c4:	2001      	movne	r0, #1
 80075c6:	4770      	bx	lr
 80075c8:	20000240 	.word	0x20000240

080075cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80075cc:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80075ce:	2300      	movs	r3, #0
 80075d0:	e000      	b.n	80075d4 <inc_lock+0x8>
 80075d2:	3301      	adds	r3, #1
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d813      	bhi.n	8007600 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 80075d8:	011a      	lsls	r2, r3, #4
 80075da:	4c24      	ldr	r4, [pc, #144]	; (800766c <inc_lock+0xa0>)
 80075dc:	58a4      	ldr	r4, [r4, r2]
 80075de:	6802      	ldr	r2, [r0, #0]
 80075e0:	4294      	cmp	r4, r2
 80075e2:	d1f6      	bne.n	80075d2 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 80075e4:	4a21      	ldr	r2, [pc, #132]	; (800766c <inc_lock+0xa0>)
 80075e6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80075ea:	6854      	ldr	r4, [r2, #4]
 80075ec:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 80075ee:	4294      	cmp	r4, r2
 80075f0:	d1ef      	bne.n	80075d2 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 80075f2:	4a1e      	ldr	r2, [pc, #120]	; (800766c <inc_lock+0xa0>)
 80075f4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80075f8:	6894      	ldr	r4, [r2, #8]
 80075fa:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 80075fc:	4294      	cmp	r4, r2
 80075fe:	d1e8      	bne.n	80075d2 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007600:	2b02      	cmp	r3, #2
 8007602:	d013      	beq.n	800762c <inc_lock+0x60>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007604:	b121      	cbz	r1, 8007610 <inc_lock+0x44>
 8007606:	4a19      	ldr	r2, [pc, #100]	; (800766c <inc_lock+0xa0>)
 8007608:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800760c:	8992      	ldrh	r2, [r2, #12]
 800760e:	bb52      	cbnz	r2, 8007666 <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007610:	bb21      	cbnz	r1, 800765c <inc_lock+0x90>
 8007612:	4a16      	ldr	r2, [pc, #88]	; (800766c <inc_lock+0xa0>)
 8007614:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007618:	8991      	ldrh	r1, [r2, #12]
 800761a:	3101      	adds	r1, #1
 800761c:	b289      	uxth	r1, r1
 800761e:	4a13      	ldr	r2, [pc, #76]	; (800766c <inc_lock+0xa0>)
 8007620:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8007624:	8191      	strh	r1, [r2, #12]

	return i + 1;
 8007626:	1c58      	adds	r0, r3, #1
}
 8007628:	bc70      	pop	{r4, r5, r6}
 800762a:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800762c:	2300      	movs	r3, #0
 800762e:	2b01      	cmp	r3, #1
 8007630:	d805      	bhi.n	800763e <inc_lock+0x72>
 8007632:	011a      	lsls	r2, r3, #4
 8007634:	4c0d      	ldr	r4, [pc, #52]	; (800766c <inc_lock+0xa0>)
 8007636:	58a2      	ldr	r2, [r4, r2]
 8007638:	b10a      	cbz	r2, 800763e <inc_lock+0x72>
 800763a:	3301      	adds	r3, #1
 800763c:	e7f7      	b.n	800762e <inc_lock+0x62>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800763e:	2b02      	cmp	r3, #2
 8007640:	d00f      	beq.n	8007662 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 8007642:	6806      	ldr	r6, [r0, #0]
 8007644:	4d09      	ldr	r5, [pc, #36]	; (800766c <inc_lock+0xa0>)
 8007646:	011c      	lsls	r4, r3, #4
 8007648:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 800764c:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800764e:	6884      	ldr	r4, [r0, #8]
 8007650:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 8007652:	6940      	ldr	r0, [r0, #20]
 8007654:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8007656:	2000      	movs	r0, #0
 8007658:	8190      	strh	r0, [r2, #12]
 800765a:	e7d3      	b.n	8007604 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800765c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007660:	e7dd      	b.n	800761e <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007662:	2000      	movs	r0, #0
 8007664:	e7e0      	b.n	8007628 <inc_lock+0x5c>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007666:	2000      	movs	r0, #0
 8007668:	e7de      	b.n	8007628 <inc_lock+0x5c>
 800766a:	bf00      	nop
 800766c:	20000240 	.word	0x20000240

08007670 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007670:	3801      	subs	r0, #1
 8007672:	2801      	cmp	r0, #1
 8007674:	d815      	bhi.n	80076a2 <dec_lock+0x32>
		n = Files[i].ctr;
 8007676:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <dec_lock+0x3c>)
 8007678:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800767c:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800767e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007682:	d003      	beq.n	800768c <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 8007684:	b11b      	cbz	r3, 800768e <dec_lock+0x1e>
 8007686:	3b01      	subs	r3, #1
 8007688:	b29b      	uxth	r3, r3
 800768a:	e000      	b.n	800768e <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800768c:	2300      	movs	r3, #0
		Files[i].ctr = n;
 800768e:	4a07      	ldr	r2, [pc, #28]	; (80076ac <dec_lock+0x3c>)
 8007690:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8007694:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007696:	b933      	cbnz	r3, 80076a6 <dec_lock+0x36>
 8007698:	0103      	lsls	r3, r0, #4
 800769a:	2000      	movs	r0, #0
 800769c:	4a03      	ldr	r2, [pc, #12]	; (80076ac <dec_lock+0x3c>)
 800769e:	50d0      	str	r0, [r2, r3]
 80076a0:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80076a2:	2002      	movs	r0, #2
 80076a4:	4770      	bx	lr
		res = FR_OK;
 80076a6:	2000      	movs	r0, #0
	}
	return res;
}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000240 	.word	0x20000240

080076b0 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80076b0:	2300      	movs	r3, #0
 80076b2:	e003      	b.n	80076bc <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 80076b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b8:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 80076ba:	3301      	adds	r3, #1
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d811      	bhi.n	80076e4 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80076c0:	011a      	lsls	r2, r3, #4
 80076c2:	4909      	ldr	r1, [pc, #36]	; (80076e8 <clear_lock+0x38>)
 80076c4:	588a      	ldr	r2, [r1, r2]
 80076c6:	4282      	cmp	r2, r0
 80076c8:	d1f7      	bne.n	80076ba <clear_lock+0xa>
{
 80076ca:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 80076cc:	011a      	lsls	r2, r3, #4
 80076ce:	2400      	movs	r4, #0
 80076d0:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 80076d2:	3301      	adds	r3, #1
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d8ed      	bhi.n	80076b4 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80076d8:	011a      	lsls	r2, r3, #4
 80076da:	4903      	ldr	r1, [pc, #12]	; (80076e8 <clear_lock+0x38>)
 80076dc:	588a      	ldr	r2, [r1, r2]
 80076de:	4282      	cmp	r2, r0
 80076e0:	d1f7      	bne.n	80076d2 <clear_lock+0x22>
 80076e2:	e7f3      	b.n	80076cc <clear_lock+0x1c>
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	20000240 	.word	0x20000240

080076ec <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 80076ec:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80076ee:	6943      	ldr	r3, [r0, #20]
 80076f0:	3b02      	subs	r3, #2
 80076f2:	428b      	cmp	r3, r1
 80076f4:	d904      	bls.n	8007700 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 80076f6:	8943      	ldrh	r3, [r0, #10]
 80076f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80076fa:	fb01 0003 	mla	r0, r1, r3, r0
 80076fe:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007700:	2000      	movs	r0, #0
}
 8007702:	4770      	bx	lr

08007704 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007704:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007706:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007708:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800770a:	0a49      	lsrs	r1, r1, #9
 800770c:	8952      	ldrh	r2, [r2, #10]
 800770e:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007712:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007714:	b130      	cbz	r0, 8007724 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8007716:	4281      	cmp	r1, r0
 8007718:	d302      	bcc.n	8007720 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800771a:	1a09      	subs	r1, r1, r0
 800771c:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800771e:	e7f8      	b.n	8007712 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8007720:	6858      	ldr	r0, [r3, #4]
 8007722:	4408      	add	r0, r1
}
 8007724:	4770      	bx	lr

08007726 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007726:	b570      	push	{r4, r5, r6, lr}
 8007728:	4606      	mov	r6, r0
 800772a:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800772c:	f101 001a 	add.w	r0, r1, #26
 8007730:	f7ff febc 	bl	80074ac <ld_word>
	if (fs->fs_type == FS_FAT32) {
 8007734:	7833      	ldrb	r3, [r6, #0]
 8007736:	2b03      	cmp	r3, #3
 8007738:	d000      	beq.n	800773c <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800773e:	f105 0014 	add.w	r0, r5, #20
 8007742:	f7ff feb3 	bl	80074ac <ld_word>
 8007746:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800774a:	e7f6      	b.n	800773a <ld_clust+0x14>

0800774c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	4606      	mov	r6, r0
 8007750:	460c      	mov	r4, r1
 8007752:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007754:	b291      	uxth	r1, r2
 8007756:	f104 001a 	add.w	r0, r4, #26
 800775a:	f7ff feb7 	bl	80074cc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800775e:	7833      	ldrb	r3, [r6, #0]
 8007760:	2b03      	cmp	r3, #3
 8007762:	d000      	beq.n	8007766 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 8007764:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007766:	0c29      	lsrs	r1, r5, #16
 8007768:	f104 0014 	add.w	r0, r4, #20
 800776c:	f7ff feae 	bl	80074cc <st_word>
}
 8007770:	e7f8      	b.n	8007764 <st_clust+0x18>
	...

08007774 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007774:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	4681      	mov	r9, r0
 800777a:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800777c:	680f      	ldr	r7, [r1, #0]
 800777e:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8007782:	220b      	movs	r2, #11
 8007784:	2120      	movs	r1, #32
 8007786:	4658      	mov	r0, fp
 8007788:	f7ff feba 	bl	8007500 <mem_set>
	si = i = 0; ni = 8;
 800778c:	2600      	movs	r6, #0
 800778e:	4633      	mov	r3, r6
 8007790:	f04f 0808 	mov.w	r8, #8
 8007794:	e02c      	b.n	80077f0 <create_name+0x7c>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007796:	3501      	adds	r5, #1
 8007798:	5d7b      	ldrb	r3, [r7, r5]
 800779a:	2b2f      	cmp	r3, #47	; 0x2f
 800779c:	d0fb      	beq.n	8007796 <create_name+0x22>
 800779e:	2b5c      	cmp	r3, #92	; 0x5c
 80077a0:	d0f9      	beq.n	8007796 <create_name+0x22>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80077a2:	443d      	add	r5, r7
 80077a4:	f8ca 5000 	str.w	r5, [sl]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80077a8:	2e00      	cmp	r6, #0
 80077aa:	d043      	beq.n	8007834 <create_name+0xc0>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80077ac:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
 80077b0:	2be5      	cmp	r3, #229	; 0xe5
 80077b2:	d035      	beq.n	8007820 <create_name+0xac>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077b4:	2c20      	cmp	r4, #32
 80077b6:	d837      	bhi.n	8007828 <create_name+0xb4>
 80077b8:	2304      	movs	r3, #4
 80077ba:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f

	return FR_OK;
 80077be:	2000      	movs	r0, #0
 80077c0:	e028      	b.n	8007814 <create_name+0xa0>
			i = 8; ni = 11;				/* Goto extension */
 80077c2:	2608      	movs	r6, #8
 80077c4:	f04f 080b 	mov.w	r8, #11
 80077c8:	e011      	b.n	80077ee <create_name+0x7a>
		if (c >= 0x80) {				/* Extended character? */
 80077ca:	f014 0f80 	tst.w	r4, #128	; 0x80
 80077ce:	d123      	bne.n	8007818 <create_name+0xa4>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80077d0:	4621      	mov	r1, r4
 80077d2:	4819      	ldr	r0, [pc, #100]	; (8007838 <create_name+0xc4>)
 80077d4:	f7ff fea7 	bl	8007526 <chk_chr>
 80077d8:	bb50      	cbnz	r0, 8007830 <create_name+0xbc>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80077da:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b19      	cmp	r3, #25
 80077e2:	d801      	bhi.n	80077e8 <create_name+0x74>
 80077e4:	3c20      	subs	r4, #32
 80077e6:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 80077e8:	f80b 4006 	strb.w	r4, [fp, r6]
 80077ec:	3601      	adds	r6, #1
			i = 8; ni = 11;				/* Goto extension */
 80077ee:	462b      	mov	r3, r5
		c = (BYTE)p[si++];
 80077f0:	1c5d      	adds	r5, r3, #1
 80077f2:	5cfc      	ldrb	r4, [r7, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80077f4:	2c20      	cmp	r4, #32
 80077f6:	d9d4      	bls.n	80077a2 <create_name+0x2e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80077f8:	2c2f      	cmp	r4, #47	; 0x2f
 80077fa:	d0cd      	beq.n	8007798 <create_name+0x24>
 80077fc:	2c5c      	cmp	r4, #92	; 0x5c
 80077fe:	d0cb      	beq.n	8007798 <create_name+0x24>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007800:	2c2e      	cmp	r4, #46	; 0x2e
 8007802:	d001      	beq.n	8007808 <create_name+0x94>
 8007804:	45b0      	cmp	r8, r6
 8007806:	d8e0      	bhi.n	80077ca <create_name+0x56>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007808:	f1b8 0f0b 	cmp.w	r8, #11
 800780c:	d00e      	beq.n	800782c <create_name+0xb8>
 800780e:	2c2e      	cmp	r4, #46	; 0x2e
 8007810:	d0d7      	beq.n	80077c2 <create_name+0x4e>
 8007812:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 8007814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007818:	3c80      	subs	r4, #128	; 0x80
 800781a:	4b08      	ldr	r3, [pc, #32]	; (800783c <create_name+0xc8>)
 800781c:	5d1c      	ldrb	r4, [r3, r4]
 800781e:	e7d7      	b.n	80077d0 <create_name+0x5c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007820:	2305      	movs	r3, #5
 8007822:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
 8007826:	e7c5      	b.n	80077b4 <create_name+0x40>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007828:	2300      	movs	r3, #0
 800782a:	e7c6      	b.n	80077ba <create_name+0x46>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800782c:	2006      	movs	r0, #6
 800782e:	e7f1      	b.n	8007814 <create_name+0xa0>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007830:	2006      	movs	r0, #6
 8007832:	e7ef      	b.n	8007814 <create_name+0xa0>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007834:	2006      	movs	r0, #6
 8007836:	e7ed      	b.n	8007814 <create_name+0xa0>
 8007838:	0800cca8 	.word	0x0800cca8
 800783c:	0800ccb8 	.word	0x0800ccb8

08007840 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007840:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007842:	6800      	ldr	r0, [r0, #0]
 8007844:	b108      	cbz	r0, 800784a <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007846:	4602      	mov	r2, r0
 8007848:	e003      	b.n	8007852 <get_ldnumber+0x12>
	int vol = -1;
 800784a:	f04f 30ff 	mov.w	r0, #4294967295
 800784e:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007850:	3201      	adds	r2, #1
 8007852:	7813      	ldrb	r3, [r2, #0]
 8007854:	2b20      	cmp	r3, #32
 8007856:	d901      	bls.n	800785c <get_ldnumber+0x1c>
 8007858:	2b3a      	cmp	r3, #58	; 0x3a
 800785a:	d1f9      	bne.n	8007850 <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800785c:	2b3a      	cmp	r3, #58	; 0x3a
 800785e:	d001      	beq.n	8007864 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007860:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8007862:	4770      	bx	lr
{
 8007864:	b410      	push	{r4}
			i = *tp++ - '0';
 8007866:	4603      	mov	r3, r0
 8007868:	f813 0b01 	ldrb.w	r0, [r3], #1
 800786c:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800786e:	2809      	cmp	r0, #9
 8007870:	d808      	bhi.n	8007884 <get_ldnumber+0x44>
 8007872:	429a      	cmp	r2, r3
 8007874:	d002      	beq.n	800787c <get_ldnumber+0x3c>
	int vol = -1;
 8007876:	f04f 30ff 	mov.w	r0, #4294967295
 800787a:	e005      	b.n	8007888 <get_ldnumber+0x48>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800787c:	b938      	cbnz	r0, 800788e <get_ldnumber+0x4e>
					*path = ++tt;
 800787e:	3201      	adds	r2, #1
 8007880:	600a      	str	r2, [r1, #0]
 8007882:	e001      	b.n	8007888 <get_ldnumber+0x48>
	int vol = -1;
 8007884:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800788c:	4770      	bx	lr
	int vol = -1;
 800788e:	f04f 30ff 	mov.w	r0, #4294967295
			return vol;
 8007892:	e7f9      	b.n	8007888 <get_ldnumber+0x48>

08007894 <putc_init>:
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
 8007894:	6001      	str	r1, [r0, #0]
	pb->nchr = pb->idx = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	6043      	str	r3, [r0, #4]
 800789a:	6083      	str	r3, [r0, #8]
}
 800789c:	4770      	bx	lr

0800789e <validate>:
{
 800789e:	b538      	push	{r3, r4, r5, lr}
 80078a0:	460d      	mov	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80078a2:	4604      	mov	r4, r0
 80078a4:	b198      	cbz	r0, 80078ce <validate+0x30>
 80078a6:	6803      	ldr	r3, [r0, #0]
 80078a8:	b19b      	cbz	r3, 80078d2 <validate+0x34>
 80078aa:	781a      	ldrb	r2, [r3, #0]
 80078ac:	b1a2      	cbz	r2, 80078d8 <validate+0x3a>
 80078ae:	8881      	ldrh	r1, [r0, #4]
 80078b0:	88da      	ldrh	r2, [r3, #6]
 80078b2:	4291      	cmp	r1, r2
 80078b4:	d003      	beq.n	80078be <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 80078b6:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078b8:	2400      	movs	r4, #0
 80078ba:	602c      	str	r4, [r5, #0]
}
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80078be:	7858      	ldrb	r0, [r3, #1]
 80078c0:	f7ff fdb0 	bl	8007424 <disk_status>
 80078c4:	f010 0001 	ands.w	r0, r0, #1
 80078c8:	d109      	bne.n	80078de <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078ca:	6824      	ldr	r4, [r4, #0]
 80078cc:	e7f5      	b.n	80078ba <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80078ce:	2009      	movs	r0, #9
 80078d0:	e7f3      	b.n	80078ba <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078d2:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 80078d4:	2009      	movs	r0, #9
 80078d6:	e7f0      	b.n	80078ba <validate+0x1c>
 80078d8:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078da:	2400      	movs	r4, #0
 80078dc:	e7ed      	b.n	80078ba <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 80078de:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80078e0:	2400      	movs	r4, #0
 80078e2:	e7ea      	b.n	80078ba <validate+0x1c>

080078e4 <sync_window>:
{
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80078e8:	78c5      	ldrb	r5, [r0, #3]
 80078ea:	b915      	cbnz	r5, 80078f2 <sync_window+0xe>
}
 80078ec:	4628      	mov	r0, r5
 80078ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f2:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 80078f4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80078f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80078fa:	2301      	movs	r3, #1
 80078fc:	463a      	mov	r2, r7
 80078fe:	4641      	mov	r1, r8
 8007900:	7840      	ldrb	r0, [r0, #1]
 8007902:	f7ff fdbb 	bl	800747c <disk_write>
 8007906:	4605      	mov	r5, r0
 8007908:	b998      	cbnz	r0, 8007932 <sync_window+0x4e>
			fs->wflag = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800790e:	6a23      	ldr	r3, [r4, #32]
 8007910:	1afb      	subs	r3, r7, r3
 8007912:	69a2      	ldr	r2, [r4, #24]
 8007914:	4293      	cmp	r3, r2
 8007916:	d2e9      	bcs.n	80078ec <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007918:	78a6      	ldrb	r6, [r4, #2]
 800791a:	2e01      	cmp	r6, #1
 800791c:	d9e6      	bls.n	80078ec <sync_window+0x8>
					wsect += fs->fsize;
 800791e:	69a3      	ldr	r3, [r4, #24]
 8007920:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8007922:	2301      	movs	r3, #1
 8007924:	463a      	mov	r2, r7
 8007926:	4641      	mov	r1, r8
 8007928:	7860      	ldrb	r0, [r4, #1]
 800792a:	f7ff fda7 	bl	800747c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800792e:	3e01      	subs	r6, #1
 8007930:	e7f3      	b.n	800791a <sync_window+0x36>
			res = FR_DISK_ERR;
 8007932:	2501      	movs	r5, #1
 8007934:	e7da      	b.n	80078ec <sync_window+0x8>

08007936 <move_window>:
{
 8007936:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8007938:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800793a:	428b      	cmp	r3, r1
 800793c:	d102      	bne.n	8007944 <move_window+0xe>
	FRESULT res = FR_OK;
 800793e:	2600      	movs	r6, #0
}
 8007940:	4630      	mov	r0, r6
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	4604      	mov	r4, r0
 8007946:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 8007948:	f7ff ffcc 	bl	80078e4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800794c:	4606      	mov	r6, r0
 800794e:	2800      	cmp	r0, #0
 8007950:	d1f6      	bne.n	8007940 <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007952:	2301      	movs	r3, #1
 8007954:	462a      	mov	r2, r5
 8007956:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800795a:	7860      	ldrb	r0, [r4, #1]
 800795c:	f7ff fd82 	bl	8007464 <disk_read>
 8007960:	b110      	cbz	r0, 8007968 <move_window+0x32>
				res = FR_DISK_ERR;
 8007962:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007964:	f04f 35ff 	mov.w	r5, #4294967295
			fs->winsect = sector;
 8007968:	62e5      	str	r5, [r4, #44]	; 0x2c
 800796a:	e7e9      	b.n	8007940 <move_window+0xa>

0800796c <check_fs>:
{
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007970:	2300      	movs	r3, #0
 8007972:	70c3      	strb	r3, [r0, #3]
 8007974:	f04f 33ff 	mov.w	r3, #4294967295
 8007978:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800797a:	f7ff ffdc 	bl	8007936 <move_window>
 800797e:	bb30      	cbnz	r0, 80079ce <check_fs+0x62>
 8007980:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007982:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8007986:	f7ff fd91 	bl	80074ac <ld_word>
 800798a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800798e:	4298      	cmp	r0, r3
 8007990:	d11f      	bne.n	80079d2 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007992:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007996:	2be9      	cmp	r3, #233	; 0xe9
 8007998:	d007      	beq.n	80079aa <check_fs+0x3e>
 800799a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800799c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80079a0:	4a0d      	ldr	r2, [pc, #52]	; (80079d8 <check_fs+0x6c>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d001      	beq.n	80079aa <check_fs+0x3e>
	return 2;
 80079a6:	2502      	movs	r5, #2
 80079a8:	e014      	b.n	80079d4 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80079aa:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80079ae:	f7ff fd82 	bl	80074b6 <ld_dword>
 80079b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80079b6:	4b09      	ldr	r3, [pc, #36]	; (80079dc <check_fs+0x70>)
 80079b8:	4298      	cmp	r0, r3
 80079ba:	d00b      	beq.n	80079d4 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80079bc:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80079c0:	f7ff fd79 	bl	80074b6 <ld_dword>
 80079c4:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <check_fs+0x74>)
 80079c6:	4298      	cmp	r0, r3
 80079c8:	d004      	beq.n	80079d4 <check_fs+0x68>
	return 2;
 80079ca:	2502      	movs	r5, #2
 80079cc:	e002      	b.n	80079d4 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079ce:	2504      	movs	r5, #4
 80079d0:	e000      	b.n	80079d4 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80079d2:	2503      	movs	r5, #3
}
 80079d4:	4628      	mov	r0, r5
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	009000eb 	.word	0x009000eb
 80079dc:	00544146 	.word	0x00544146
 80079e0:	33544146 	.word	0x33544146

080079e4 <find_volume>:
{
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	b085      	sub	sp, #20
 80079ea:	460d      	mov	r5, r1
 80079ec:	4616      	mov	r6, r2
	*rfs = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80079f2:	f7ff ff25 	bl	8007840 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80079f6:	1e07      	subs	r7, r0, #0
 80079f8:	f2c0 8144 	blt.w	8007c84 <find_volume+0x2a0>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80079fc:	4bb5      	ldr	r3, [pc, #724]	; (8007cd4 <find_volume+0x2f0>)
 80079fe:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a02:	2c00      	cmp	r4, #0
 8007a04:	f000 8143 	beq.w	8007c8e <find_volume+0x2aa>
	*rfs = fs;							/* Return pointer to the file system object */
 8007a08:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a0a:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a0e:	7823      	ldrb	r3, [r4, #0]
 8007a10:	b173      	cbz	r3, 8007a30 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8007a12:	7860      	ldrb	r0, [r4, #1]
 8007a14:	f7ff fd06 	bl	8007424 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a18:	f010 0501 	ands.w	r5, r0, #1
 8007a1c:	d108      	bne.n	8007a30 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007a1e:	2e00      	cmp	r6, #0
 8007a20:	f000 8131 	beq.w	8007c86 <find_volume+0x2a2>
 8007a24:	f010 0f04 	tst.w	r0, #4
 8007a28:	f000 812d 	beq.w	8007c86 <find_volume+0x2a2>
				return FR_WRITE_PROTECTED;
 8007a2c:	250a      	movs	r5, #10
 8007a2e:	e12a      	b.n	8007c86 <find_volume+0x2a2>
	fs->fs_type = 0;					/* Clear the file system object */
 8007a30:	2300      	movs	r3, #0
 8007a32:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007a34:	b2f8      	uxtb	r0, r7
 8007a36:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007a38:	f7ff fd00 	bl	800743c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007a3c:	f010 0501 	ands.w	r5, r0, #1
 8007a40:	f040 8127 	bne.w	8007c92 <find_volume+0x2ae>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a44:	b11e      	cbz	r6, 8007a4e <find_volume+0x6a>
 8007a46:	f010 0f04 	tst.w	r0, #4
 8007a4a:	f040 8124 	bne.w	8007c96 <find_volume+0x2b2>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4620      	mov	r0, r4
 8007a52:	f7ff ff8b 	bl	800796c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a56:	2802      	cmp	r0, #2
 8007a58:	f000 80b6 	beq.w	8007bc8 <find_volume+0x1e4>
	bsect = 0;
 8007a5c:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007a5e:	2804      	cmp	r0, #4
 8007a60:	f000 811b 	beq.w	8007c9a <find_volume+0x2b6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007a64:	2801      	cmp	r0, #1
 8007a66:	f200 811a 	bhi.w	8007c9e <find_volume+0x2ba>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007a6a:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8007a6e:	f7ff fd1d 	bl	80074ac <ld_word>
 8007a72:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007a76:	f040 8114 	bne.w	8007ca2 <find_volume+0x2be>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007a7a:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8007a7e:	f7ff fd15 	bl	80074ac <ld_word>
 8007a82:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007a84:	b920      	cbnz	r0, 8007a90 <find_volume+0xac>
 8007a86:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8007a8a:	f7ff fd14 	bl	80074b6 <ld_dword>
 8007a8e:	4606      	mov	r6, r0
		fs->fsize = fasize;
 8007a90:	61a6      	str	r6, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007a92:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8007a96:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007a98:	1e53      	subs	r3, r2, #1
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	f200 8102 	bhi.w	8007ca6 <find_volume+0x2c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007aa2:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007aa6:	f894 903d 	ldrb.w	r9, [r4, #61]	; 0x3d
 8007aaa:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007aae:	f1b9 0f00 	cmp.w	r9, #0
 8007ab2:	f000 80fa 	beq.w	8007caa <find_volume+0x2c6>
 8007ab6:	f109 33ff 	add.w	r3, r9, #4294967295
 8007aba:	ea19 0f03 	tst.w	r9, r3
 8007abe:	f040 80f6 	bne.w	8007cae <find_volume+0x2ca>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007ac2:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8007ac6:	f7ff fcf1 	bl	80074ac <ld_word>
 8007aca:	4682      	mov	sl, r0
 8007acc:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ace:	f010 0f0f 	tst.w	r0, #15
 8007ad2:	f040 80ee 	bne.w	8007cb2 <find_volume+0x2ce>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007ad6:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8007ada:	f7ff fce7 	bl	80074ac <ld_word>
 8007ade:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007ae0:	b920      	cbnz	r0, 8007aec <find_volume+0x108>
 8007ae2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ae6:	f7ff fce6 	bl	80074b6 <ld_dword>
 8007aea:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007aec:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8007af0:	f7ff fcdc 	bl	80074ac <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007af4:	4602      	mov	r2, r0
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f000 80dd 	beq.w	8007cb6 <find_volume+0x2d2>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007afc:	eb00 0308 	add.w	r3, r0, r8
 8007b00:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007b04:	459b      	cmp	fp, r3
 8007b06:	f0c0 80d8 	bcc.w	8007cba <find_volume+0x2d6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007b0a:	ebab 0b03 	sub.w	fp, fp, r3
 8007b0e:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007b12:	45cb      	cmp	fp, r9
 8007b14:	f0c0 80d3 	bcc.w	8007cbe <find_volume+0x2da>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007b18:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8007b1c:	4281      	cmp	r1, r0
 8007b1e:	d96b      	bls.n	8007bf8 <find_volume+0x214>
		fmt = FS_FAT32;
 8007b20:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007b24:	f640 70f5 	movw	r0, #4085	; 0xff5
 8007b28:	4281      	cmp	r1, r0
 8007b2a:	d801      	bhi.n	8007b30 <find_volume+0x14c>
 8007b2c:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007b30:	f101 0902 	add.w	r9, r1, #2
 8007b34:	f8c4 9014 	str.w	r9, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007b38:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007b3a:	443a      	add	r2, r7
 8007b3c:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007b3e:	443b      	add	r3, r7
 8007b40:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007b42:	f1bb 0f03 	cmp.w	fp, #3
 8007b46:	d05a      	beq.n	8007bfe <find_volume+0x21a>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b48:	f1ba 0f00 	cmp.w	sl, #0
 8007b4c:	f000 80bd 	beq.w	8007cca <find_volume+0x2e6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b50:	4442      	add	r2, r8
 8007b52:	6262      	str	r2, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b54:	f1bb 0f02 	cmp.w	fp, #2
 8007b58:	d062      	beq.n	8007c20 <find_volume+0x23c>
 8007b5a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8007b5e:	f009 0901 	and.w	r9, r9, #1
 8007b62:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b66:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 8007b6a:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
 8007b6e:	f0c0 80ae 	bcc.w	8007cce <find_volume+0x2ea>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007b72:	f04f 33ff 	mov.w	r3, #4294967295
 8007b76:	6123      	str	r3, [r4, #16]
 8007b78:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8007b7a:	2380      	movs	r3, #128	; 0x80
 8007b7c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007b7e:	f1bb 0f03 	cmp.w	fp, #3
 8007b82:	d050      	beq.n	8007c26 <find_volume+0x242>
	fs->fs_type = fmt;		/* FAT sub-type */
 8007b84:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b88:	4a53      	ldr	r2, [pc, #332]	; (8007cd8 <find_volume+0x2f4>)
 8007b8a:	8813      	ldrh	r3, [r2, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	8013      	strh	r3, [r2, #0]
 8007b92:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7ff fd8b 	bl	80076b0 <clear_lock>
	return FR_OK;
 8007b9a:	e074      	b.n	8007c86 <find_volume+0x2a2>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	ab04      	add	r3, sp, #16
 8007ba0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8007ba4:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ba8:	3601      	adds	r6, #1
 8007baa:	2e03      	cmp	r6, #3
 8007bac:	d80e      	bhi.n	8007bcc <find_volume+0x1e8>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007bae:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007bb2:	0133      	lsls	r3, r6, #4
 8007bb4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007bb8:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007bba:	7903      	ldrb	r3, [r0, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0ed      	beq.n	8007b9c <find_volume+0x1b8>
 8007bc0:	3008      	adds	r0, #8
 8007bc2:	f7ff fc78 	bl	80074b6 <ld_dword>
 8007bc6:	e7ea      	b.n	8007b9e <find_volume+0x1ba>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bc8:	2600      	movs	r6, #0
 8007bca:	e7ee      	b.n	8007baa <find_volume+0x1c6>
 8007bcc:	2600      	movs	r6, #0
 8007bce:	e00a      	b.n	8007be6 <find_volume+0x202>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f7ff feca 	bl	800796c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007bd8:	2801      	cmp	r0, #1
 8007bda:	f67f af40 	bls.w	8007a5e <find_volume+0x7a>
 8007bde:	3601      	adds	r6, #1
 8007be0:	2e03      	cmp	r6, #3
 8007be2:	f63f af3c 	bhi.w	8007a5e <find_volume+0x7a>
			bsect = br[i];
 8007be6:	ab04      	add	r3, sp, #16
 8007be8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8007bec:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007bf0:	2f00      	cmp	r7, #0
 8007bf2:	d1ed      	bne.n	8007bd0 <find_volume+0x1ec>
 8007bf4:	2003      	movs	r0, #3
 8007bf6:	e7f2      	b.n	8007bde <find_volume+0x1fa>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007bf8:	f04f 0b02 	mov.w	fp, #2
 8007bfc:	e792      	b.n	8007b24 <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007bfe:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8007c02:	f7ff fc53 	bl	80074ac <ld_word>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d15b      	bne.n	8007cc2 <find_volume+0x2de>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007c0a:	f1ba 0f00 	cmp.w	sl, #0
 8007c0e:	d15a      	bne.n	8007cc6 <find_volume+0x2e2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007c10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c14:	f7ff fc4f 	bl	80074b6 <ld_dword>
 8007c18:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007c1a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8007c1e:	e7a2      	b.n	8007b66 <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007c20:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8007c24:	e79f      	b.n	8007b66 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007c26:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8007c2a:	f7ff fc3f 	bl	80074ac <ld_word>
 8007c2e:	2801      	cmp	r0, #1
 8007c30:	d1a8      	bne.n	8007b84 <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007c32:	1c79      	adds	r1, r7, #1
 8007c34:	4620      	mov	r0, r4
 8007c36:	f7ff fe7e 	bl	8007936 <move_window>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d1a2      	bne.n	8007b84 <find_volume+0x1a0>
			fs->fsi_flag = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007c42:	f204 202e 	addw	r0, r4, #558	; 0x22e
 8007c46:	f7ff fc31 	bl	80074ac <ld_word>
 8007c4a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c4e:	4298      	cmp	r0, r3
 8007c50:	d198      	bne.n	8007b84 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007c52:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007c56:	f7ff fc2e 	bl	80074b6 <ld_dword>
 8007c5a:	4b20      	ldr	r3, [pc, #128]	; (8007cdc <find_volume+0x2f8>)
 8007c5c:	4298      	cmp	r0, r3
 8007c5e:	d191      	bne.n	8007b84 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007c60:	f504 7005 	add.w	r0, r4, #532	; 0x214
 8007c64:	f7ff fc27 	bl	80074b6 <ld_dword>
 8007c68:	4b1d      	ldr	r3, [pc, #116]	; (8007ce0 <find_volume+0x2fc>)
 8007c6a:	4298      	cmp	r0, r3
 8007c6c:	d18a      	bne.n	8007b84 <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007c6e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8007c72:	f7ff fc20 	bl	80074b6 <ld_dword>
 8007c76:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007c78:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007c7c:	f7ff fc1b 	bl	80074b6 <ld_dword>
 8007c80:	60e0      	str	r0, [r4, #12]
 8007c82:	e77f      	b.n	8007b84 <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c84:	250b      	movs	r5, #11
}
 8007c86:	4628      	mov	r0, r5
 8007c88:	b005      	add	sp, #20
 8007c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c8e:	250c      	movs	r5, #12
 8007c90:	e7f9      	b.n	8007c86 <find_volume+0x2a2>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007c92:	2503      	movs	r5, #3
 8007c94:	e7f7      	b.n	8007c86 <find_volume+0x2a2>
		return FR_WRITE_PROTECTED;
 8007c96:	250a      	movs	r5, #10
 8007c98:	e7f5      	b.n	8007c86 <find_volume+0x2a2>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c9a:	2501      	movs	r5, #1
 8007c9c:	e7f3      	b.n	8007c86 <find_volume+0x2a2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c9e:	250d      	movs	r5, #13
 8007ca0:	e7f1      	b.n	8007c86 <find_volume+0x2a2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007ca2:	250d      	movs	r5, #13
 8007ca4:	e7ef      	b.n	8007c86 <find_volume+0x2a2>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007ca6:	250d      	movs	r5, #13
 8007ca8:	e7ed      	b.n	8007c86 <find_volume+0x2a2>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007caa:	250d      	movs	r5, #13
 8007cac:	e7eb      	b.n	8007c86 <find_volume+0x2a2>
 8007cae:	250d      	movs	r5, #13
 8007cb0:	e7e9      	b.n	8007c86 <find_volume+0x2a2>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007cb2:	250d      	movs	r5, #13
 8007cb4:	e7e7      	b.n	8007c86 <find_volume+0x2a2>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007cb6:	250d      	movs	r5, #13
 8007cb8:	e7e5      	b.n	8007c86 <find_volume+0x2a2>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007cba:	250d      	movs	r5, #13
 8007cbc:	e7e3      	b.n	8007c86 <find_volume+0x2a2>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007cbe:	250d      	movs	r5, #13
 8007cc0:	e7e1      	b.n	8007c86 <find_volume+0x2a2>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007cc2:	250d      	movs	r5, #13
 8007cc4:	e7df      	b.n	8007c86 <find_volume+0x2a2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007cc6:	250d      	movs	r5, #13
 8007cc8:	e7dd      	b.n	8007c86 <find_volume+0x2a2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007cca:	250d      	movs	r5, #13
 8007ccc:	e7db      	b.n	8007c86 <find_volume+0x2a2>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007cce:	250d      	movs	r5, #13
 8007cd0:	e7d9      	b.n	8007c86 <find_volume+0x2a2>
 8007cd2:	bf00      	nop
 8007cd4:	2000023c 	.word	0x2000023c
 8007cd8:	20000260 	.word	0x20000260
 8007cdc:	41615252 	.word	0x41615252
 8007ce0:	61417272 	.word	0x61417272

08007ce4 <put_fat>:
{
 8007ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007ce8:	2901      	cmp	r1, #1
 8007cea:	d97e      	bls.n	8007dea <put_fat+0x106>
 8007cec:	4607      	mov	r7, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	4616      	mov	r6, r2
 8007cf2:	6943      	ldr	r3, [r0, #20]
 8007cf4:	428b      	cmp	r3, r1
 8007cf6:	d97a      	bls.n	8007dee <put_fat+0x10a>
		switch (fs->fs_type) {
 8007cf8:	7803      	ldrb	r3, [r0, #0]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d045      	beq.n	8007d8a <put_fat+0xa6>
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d057      	beq.n	8007db2 <put_fat+0xce>
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d003      	beq.n	8007d0e <put_fat+0x2a>
 8007d06:	2502      	movs	r5, #2
}
 8007d08:	4628      	mov	r0, r5
 8007d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 8007d0e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d12:	6a01      	ldr	r1, [r0, #32]
 8007d14:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8007d18:	f7ff fe0d 	bl	8007936 <move_window>
			if (res != FR_OK) break;
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	d1f2      	bne.n	8007d08 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 8007d22:	f107 0a30 	add.w	sl, r7, #48	; 0x30
 8007d26:	f108 0901 	add.w	r9, r8, #1
 8007d2a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d2e:	f014 0401 	ands.w	r4, r4, #1
 8007d32:	d01f      	beq.n	8007d74 <put_fat+0x90>
 8007d34:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 8007d38:	f003 030f 	and.w	r3, r3, #15
 8007d3c:	0132      	lsls	r2, r6, #4
 8007d3e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8007d42:	4313      	orrs	r3, r2
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d4e:	6a39      	ldr	r1, [r7, #32]
 8007d50:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 8007d54:	4638      	mov	r0, r7
 8007d56:	f7ff fdee 	bl	8007936 <move_window>
			if (res != FR_OK) break;
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d1d3      	bne.n	8007d08 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 8007d60:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d64:	b144      	cbz	r4, 8007d78 <put_fat+0x94>
 8007d66:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8007d6a:	f80a 2009 	strb.w	r2, [sl, r9]
			fs->wflag = 1;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	70fb      	strb	r3, [r7, #3]
			break;
 8007d72:	e7c9      	b.n	8007d08 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d74:	b2f3      	uxtb	r3, r6
 8007d76:	e7e6      	b.n	8007d46 <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d78:	f91a 2009 	ldrsb.w	r2, [sl, r9]
 8007d7c:	f022 020f 	bic.w	r2, r2, #15
 8007d80:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8007d84:	4332      	orrs	r2, r6
 8007d86:	b2d2      	uxtb	r2, r2
 8007d88:	e7ef      	b.n	8007d6a <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007d8a:	6a01      	ldr	r1, [r0, #32]
 8007d8c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007d90:	f7ff fdd1 	bl	8007936 <move_window>
			if (res != FR_OK) break;
 8007d94:	4605      	mov	r5, r0
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d1b6      	bne.n	8007d08 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d9a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8007d9e:	0064      	lsls	r4, r4, #1
 8007da0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8007da4:	b2b1      	uxth	r1, r6
 8007da6:	4420      	add	r0, r4
 8007da8:	f7ff fb90 	bl	80074cc <st_word>
			fs->wflag = 1;
 8007dac:	2301      	movs	r3, #1
 8007dae:	70fb      	strb	r3, [r7, #3]
			break;
 8007db0:	e7aa      	b.n	8007d08 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007db2:	6a01      	ldr	r1, [r0, #32]
 8007db4:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007db8:	f7ff fdbd 	bl	8007936 <move_window>
			if (res != FR_OK) break;
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d1a2      	bne.n	8007d08 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007dc2:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 8007dc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007dca:	00a4      	lsls	r4, r4, #2
 8007dcc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8007dd0:	441c      	add	r4, r3
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f7ff fb6f 	bl	80074b6 <ld_dword>
 8007dd8:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007ddc:	4331      	orrs	r1, r6
 8007dde:	4620      	mov	r0, r4
 8007de0:	f7ff fb78 	bl	80074d4 <st_dword>
			fs->wflag = 1;
 8007de4:	2301      	movs	r3, #1
 8007de6:	70fb      	strb	r3, [r7, #3]
			break;
 8007de8:	e78e      	b.n	8007d08 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 8007dea:	2502      	movs	r5, #2
 8007dec:	e78c      	b.n	8007d08 <put_fat+0x24>
 8007dee:	2502      	movs	r5, #2
 8007df0:	e78a      	b.n	8007d08 <put_fat+0x24>

08007df2 <get_fat>:
{
 8007df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 8007df4:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007df6:	2901      	cmp	r1, #1
 8007df8:	d956      	bls.n	8007ea8 <get_fat+0xb6>
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	696b      	ldr	r3, [r5, #20]
 8007dfe:	428b      	cmp	r3, r1
 8007e00:	d954      	bls.n	8007eac <get_fat+0xba>
		switch (fs->fs_type) {
 8007e02:	782b      	ldrb	r3, [r5, #0]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d02d      	beq.n	8007e64 <get_fat+0x72>
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	d03b      	beq.n	8007e84 <get_fat+0x92>
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d001      	beq.n	8007e14 <get_fat+0x22>
 8007e10:	2001      	movs	r0, #1
 8007e12:	e04a      	b.n	8007eaa <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 8007e14:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e18:	6a29      	ldr	r1, [r5, #32]
 8007e1a:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f7ff fd89 	bl	8007936 <move_window>
 8007e24:	b110      	cbz	r0, 8007e2c <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007e26:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2a:	e03e      	b.n	8007eaa <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 8007e2c:	1c77      	adds	r7, r6, #1
 8007e2e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8007e32:	442e      	add	r6, r5
 8007e34:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e38:	6a29      	ldr	r1, [r5, #32]
 8007e3a:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f7ff fd79 	bl	8007936 <move_window>
 8007e44:	bba0      	cbnz	r0, 8007eb0 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007e46:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8007e4a:	443d      	add	r5, r7
 8007e4c:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8007e50:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007e54:	f014 0f01 	tst.w	r4, #1
 8007e58:	d001      	beq.n	8007e5e <get_fat+0x6c>
 8007e5a:	0900      	lsrs	r0, r0, #4
 8007e5c:	e025      	b.n	8007eaa <get_fat+0xb8>
 8007e5e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8007e62:	e022      	b.n	8007eaa <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e64:	6a29      	ldr	r1, [r5, #32]
 8007e66:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f7ff fd63 	bl	8007936 <move_window>
 8007e70:	bb08      	cbnz	r0, 8007eb6 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007e72:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8007e76:	0064      	lsls	r4, r4, #1
 8007e78:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8007e7c:	4420      	add	r0, r4
 8007e7e:	f7ff fb15 	bl	80074ac <ld_word>
			break;
 8007e82:	e012      	b.n	8007eaa <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e84:	6a29      	ldr	r1, [r5, #32]
 8007e86:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f7ff fd53 	bl	8007936 <move_window>
 8007e90:	b9a0      	cbnz	r0, 8007ebc <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007e92:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8007e96:	00a4      	lsls	r4, r4, #2
 8007e98:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8007e9c:	4420      	add	r0, r4
 8007e9e:	f7ff fb0a 	bl	80074b6 <ld_dword>
 8007ea2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8007ea6:	e000      	b.n	8007eaa <get_fat+0xb8>
		val = 1;	/* Internal error */
 8007ea8:	2001      	movs	r0, #1
}
 8007eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8007eac:	2001      	movs	r0, #1
 8007eae:	e7fc      	b.n	8007eaa <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	e7f9      	b.n	8007eaa <get_fat+0xb8>
 8007eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eba:	e7f6      	b.n	8007eaa <get_fat+0xb8>
 8007ebc:	f04f 30ff 	mov.w	r0, #4294967295
	return val;
 8007ec0:	e7f3      	b.n	8007eaa <get_fat+0xb8>

08007ec2 <dir_sdi>:
{
 8007ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8007ec6:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007eca:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007ece:	d242      	bcs.n	8007f56 <dir_sdi+0x94>
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	460f      	mov	r7, r1
 8007ed4:	f011 0f1f 	tst.w	r1, #31
 8007ed8:	d13f      	bne.n	8007f5a <dir_sdi+0x98>
	dp->dptr = ofs;				/* Set current offset */
 8007eda:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007edc:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007ede:	b92c      	cbnz	r4, 8007eec <dir_sdi+0x2a>
 8007ee0:	f898 3000 	ldrb.w	r3, [r8]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <dir_sdi+0x2a>
		clst = fs->dirbase;
 8007ee8:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007eec:	b9b4      	cbnz	r4, 8007f1c <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007eee:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007ef2:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 8007ef6:	d932      	bls.n	8007f5e <dir_sdi+0x9c>
		dp->sect = fs->dirbase;
 8007ef8:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8007efc:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8007efe:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007f00:	69f3      	ldr	r3, [r6, #28]
 8007f02:	b393      	cbz	r3, 8007f6a <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007f04:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 8007f08:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007f0a:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8007f0e:	f3c7 0108 	ubfx	r1, r7, #0, #9
 8007f12:	4419      	add	r1, r3
 8007f14:	6231      	str	r1, [r6, #32]
	return FR_OK;
 8007f16:	2000      	movs	r0, #0
}
 8007f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007f1c:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 8007f20:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f22:	e000      	b.n	8007f26 <dir_sdi+0x64>
			ofs -= csz;
 8007f24:	1b7f      	subs	r7, r7, r5
		while (ofs >= csz) {				/* Follow cluster chain */
 8007f26:	42af      	cmp	r7, r5
 8007f28:	d30f      	bcc.n	8007f4a <dir_sdi+0x88>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	f7ff ff60 	bl	8007df2 <get_fat>
 8007f32:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f38:	d013      	beq.n	8007f62 <dir_sdi+0xa0>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f3a:	2801      	cmp	r0, #1
 8007f3c:	d913      	bls.n	8007f66 <dir_sdi+0xa4>
 8007f3e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007f42:	4283      	cmp	r3, r0
 8007f44:	d8ee      	bhi.n	8007f24 <dir_sdi+0x62>
 8007f46:	2002      	movs	r0, #2
 8007f48:	e7e6      	b.n	8007f18 <dir_sdi+0x56>
		dp->sect = clust2sect(fs, clst);
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	f7ff fbcd 	bl	80076ec <clust2sect>
 8007f52:	61f0      	str	r0, [r6, #28]
 8007f54:	e7d3      	b.n	8007efe <dir_sdi+0x3c>
		return FR_INT_ERR;
 8007f56:	2002      	movs	r0, #2
 8007f58:	e7de      	b.n	8007f18 <dir_sdi+0x56>
 8007f5a:	2002      	movs	r0, #2
 8007f5c:	e7dc      	b.n	8007f18 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007f5e:	2002      	movs	r0, #2
 8007f60:	e7da      	b.n	8007f18 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f62:	2001      	movs	r0, #1
 8007f64:	e7d8      	b.n	8007f18 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007f66:	2002      	movs	r0, #2
 8007f68:	e7d6      	b.n	8007f18 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 8007f6a:	2002      	movs	r0, #2
 8007f6c:	e7d4      	b.n	8007f18 <dir_sdi+0x56>

08007f6e <create_chain>:
{
 8007f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f72:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 8007f74:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8007f76:	460f      	mov	r7, r1
 8007f78:	b951      	cbnz	r1, 8007f90 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f7a:	f8d6 800c 	ldr.w	r8, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007f7e:	f1b8 0f00 	cmp.w	r8, #0
 8007f82:	d012      	beq.n	8007faa <create_chain+0x3c>
 8007f84:	6973      	ldr	r3, [r6, #20]
 8007f86:	4543      	cmp	r3, r8
 8007f88:	d811      	bhi.n	8007fae <create_chain+0x40>
 8007f8a:	f04f 0801 	mov.w	r8, #1
 8007f8e:	e00e      	b.n	8007fae <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f90:	f7ff ff2f 	bl	8007df2 <get_fat>
 8007f94:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007f96:	2801      	cmp	r0, #1
 8007f98:	d947      	bls.n	800802a <create_chain+0xbc>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007f9a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f9e:	d049      	beq.n	8008034 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fa0:	6972      	ldr	r2, [r6, #20]
 8007fa2:	4282      	cmp	r2, r0
 8007fa4:	d846      	bhi.n	8008034 <create_chain+0xc6>
		scl = clst;
 8007fa6:	46b8      	mov	r8, r7
 8007fa8:	e001      	b.n	8007fae <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007faa:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 8007fae:	4644      	mov	r4, r8
 8007fb0:	e00c      	b.n	8007fcc <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f7ff ff1c 	bl	8007df2 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8007fba:	4603      	mov	r3, r0
 8007fbc:	b178      	cbz	r0, 8007fde <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007fbe:	2801      	cmp	r0, #1
 8007fc0:	d038      	beq.n	8008034 <create_chain+0xc6>
 8007fc2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007fc6:	d035      	beq.n	8008034 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8007fc8:	4544      	cmp	r4, r8
 8007fca:	d032      	beq.n	8008032 <create_chain+0xc4>
			ncl++;							/* Next cluster */
 8007fcc:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007fce:	6973      	ldr	r3, [r6, #20]
 8007fd0:	42a3      	cmp	r3, r4
 8007fd2:	d8ee      	bhi.n	8007fb2 <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 8007fd4:	f1b8 0f01 	cmp.w	r8, #1
 8007fd8:	d929      	bls.n	800802e <create_chain+0xc0>
				ncl = 2;
 8007fda:	2402      	movs	r4, #2
 8007fdc:	e7e9      	b.n	8007fb2 <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007fde:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7ff fe7d 	bl	8007ce4 <put_fat>
		if (res == FR_OK && clst != 0) {
 8007fea:	4603      	mov	r3, r0
 8007fec:	b900      	cbnz	r0, 8007ff0 <create_chain+0x82>
 8007fee:	b977      	cbnz	r7, 800800e <create_chain+0xa0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007ff0:	b9a3      	cbnz	r3, 800801c <create_chain+0xae>
		fs->last_clst = ncl;
 8007ff2:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007ff4:	6932      	ldr	r2, [r6, #16]
 8007ff6:	6973      	ldr	r3, [r6, #20]
 8007ff8:	3b02      	subs	r3, #2
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d801      	bhi.n	8008002 <create_chain+0x94>
 8007ffe:	3a01      	subs	r2, #1
 8008000:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
 8008002:	7933      	ldrb	r3, [r6, #4]
 8008004:	f043 0301 	orr.w	r3, r3, #1
 8008008:	7133      	strb	r3, [r6, #4]
 800800a:	4623      	mov	r3, r4
 800800c:	e012      	b.n	8008034 <create_chain+0xc6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800800e:	4622      	mov	r2, r4
 8008010:	4639      	mov	r1, r7
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff fe66 	bl	8007ce4 <put_fat>
 8008018:	4603      	mov	r3, r0
 800801a:	e7e9      	b.n	8007ff0 <create_chain+0x82>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800801c:	2b01      	cmp	r3, #1
 800801e:	d001      	beq.n	8008024 <create_chain+0xb6>
 8008020:	2301      	movs	r3, #1
 8008022:	e007      	b.n	8008034 <create_chain+0xc6>
 8008024:	f04f 33ff 	mov.w	r3, #4294967295
 8008028:	e004      	b.n	8008034 <create_chain+0xc6>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800802a:	2301      	movs	r3, #1
 800802c:	e002      	b.n	8008034 <create_chain+0xc6>
				if (ncl > scl) return 0;	/* No free cluster */
 800802e:	2300      	movs	r3, #0
 8008030:	e000      	b.n	8008034 <create_chain+0xc6>
			if (ncl == scl) return 0;		/* No free cluster */
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800803a <remove_chain>:
{
 800803a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803c:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800803e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008040:	2901      	cmp	r1, #1
 8008042:	d92e      	bls.n	80080a2 <remove_chain+0x68>
 8008044:	4606      	mov	r6, r0
 8008046:	4611      	mov	r1, r2
 8008048:	696b      	ldr	r3, [r5, #20]
 800804a:	42a3      	cmp	r3, r4
 800804c:	d92b      	bls.n	80080a6 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800804e:	b14a      	cbz	r2, 8008064 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008050:	f04f 32ff 	mov.w	r2, #4294967295
 8008054:	4628      	mov	r0, r5
 8008056:	f7ff fe45 	bl	8007ce4 <put_fat>
		if (res != FR_OK) return res;
 800805a:	4607      	mov	r7, r0
 800805c:	b110      	cbz	r0, 8008064 <remove_chain+0x2a>
 800805e:	e023      	b.n	80080a8 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008060:	42a2      	cmp	r2, r4
 8008062:	d921      	bls.n	80080a8 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008064:	4627      	mov	r7, r4
 8008066:	4621      	mov	r1, r4
 8008068:	4630      	mov	r0, r6
 800806a:	f7ff fec2 	bl	8007df2 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800806e:	4604      	mov	r4, r0
 8008070:	b1e0      	cbz	r0, 80080ac <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008072:	2801      	cmp	r0, #1
 8008074:	d01c      	beq.n	80080b0 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008076:	f1b0 3fff 	cmp.w	r0, #4294967295
 800807a:	d01b      	beq.n	80080b4 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800807c:	2200      	movs	r2, #0
 800807e:	4639      	mov	r1, r7
 8008080:	4628      	mov	r0, r5
 8008082:	f7ff fe2f 	bl	8007ce4 <put_fat>
			if (res != FR_OK) return res;
 8008086:	4607      	mov	r7, r0
 8008088:	b970      	cbnz	r0, 80080a8 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800808a:	692b      	ldr	r3, [r5, #16]
 800808c:	696a      	ldr	r2, [r5, #20]
 800808e:	1e91      	subs	r1, r2, #2
 8008090:	428b      	cmp	r3, r1
 8008092:	d2e5      	bcs.n	8008060 <remove_chain+0x26>
			fs->free_clst++;
 8008094:	3301      	adds	r3, #1
 8008096:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8008098:	792b      	ldrb	r3, [r5, #4]
 800809a:	f043 0301 	orr.w	r3, r3, #1
 800809e:	712b      	strb	r3, [r5, #4]
 80080a0:	e7de      	b.n	8008060 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80080a2:	2702      	movs	r7, #2
 80080a4:	e000      	b.n	80080a8 <remove_chain+0x6e>
 80080a6:	2702      	movs	r7, #2
}
 80080a8:	4638      	mov	r0, r7
 80080aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 80080ac:	2700      	movs	r7, #0
 80080ae:	e7fb      	b.n	80080a8 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80080b0:	2702      	movs	r7, #2
 80080b2:	e7f9      	b.n	80080a8 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80080b4:	2701      	movs	r7, #1
 80080b6:	e7f7      	b.n	80080a8 <remove_chain+0x6e>

080080b8 <dir_next>:
{
 80080b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 80080bc:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80080be:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80080c0:	69c3      	ldr	r3, [r0, #28]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d06c      	beq.n	80081a0 <dir_next+0xe8>
 80080c6:	4604      	mov	r4, r0
 80080c8:	4688      	mov	r8, r1
 80080ca:	3520      	adds	r5, #32
 80080cc:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80080d0:	d268      	bcs.n	80081a4 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80080d2:	f3c5 0708 	ubfx	r7, r5, #0, #9
 80080d6:	b93f      	cbnz	r7, 80080e8 <dir_next+0x30>
		dp->sect++;				/* Next sector */
 80080d8:	3301      	adds	r3, #1
 80080da:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80080dc:	6981      	ldr	r1, [r0, #24]
 80080de:	b979      	cbnz	r1, 8008100 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80080e0:	8933      	ldrh	r3, [r6, #8]
 80080e2:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80080e6:	d907      	bls.n	80080f8 <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 80080e8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80080ea:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80080ee:	443b      	add	r3, r7
 80080f0:	6223      	str	r3, [r4, #32]
	return FR_OK;
 80080f2:	2000      	movs	r0, #0
}
 80080f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61c3      	str	r3, [r0, #28]
 80080fc:	2004      	movs	r0, #4
 80080fe:	e7f9      	b.n	80080f4 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008100:	8973      	ldrh	r3, [r6, #10]
 8008102:	3b01      	subs	r3, #1
 8008104:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 8008108:	d1ee      	bne.n	80080e8 <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800810a:	f7ff fe72 	bl	8007df2 <get_fat>
 800810e:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008110:	2801      	cmp	r0, #1
 8008112:	d949      	bls.n	80081a8 <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008114:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008118:	d048      	beq.n	80081ac <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800811a:	6973      	ldr	r3, [r6, #20]
 800811c:	4283      	cmp	r3, r0
 800811e:	d837      	bhi.n	8008190 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 8008120:	f1b8 0f00 	cmp.w	r8, #0
 8008124:	d011      	beq.n	800814a <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008126:	69a1      	ldr	r1, [r4, #24]
 8008128:	4620      	mov	r0, r4
 800812a:	f7ff ff20 	bl	8007f6e <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800812e:	4682      	mov	sl, r0
 8008130:	2800      	cmp	r0, #0
 8008132:	d03d      	beq.n	80081b0 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008134:	2801      	cmp	r0, #1
 8008136:	d03d      	beq.n	80081b4 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008138:	f1b0 3fff 	cmp.w	r0, #4294967295
 800813c:	d03c      	beq.n	80081b8 <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800813e:	4630      	mov	r0, r6
 8008140:	f7ff fbd0 	bl	80078e4 <sync_window>
 8008144:	b128      	cbz	r0, 8008152 <dir_next+0x9a>
 8008146:	2001      	movs	r0, #1
 8008148:	e7d4      	b.n	80080f4 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 800814a:	2300      	movs	r3, #0
 800814c:	61e3      	str	r3, [r4, #28]
 800814e:	2004      	movs	r0, #4
 8008150:	e7d0      	b.n	80080f4 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008156:	2100      	movs	r1, #0
 8008158:	f106 0030 	add.w	r0, r6, #48	; 0x30
 800815c:	f7ff f9d0 	bl	8007500 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008160:	4651      	mov	r1, sl
 8008162:	4630      	mov	r0, r6
 8008164:	f7ff fac2 	bl	80076ec <clust2sect>
 8008168:	62f0      	str	r0, [r6, #44]	; 0x2c
 800816a:	8973      	ldrh	r3, [r6, #10]
 800816c:	4599      	cmp	r9, r3
 800816e:	d20b      	bcs.n	8008188 <dir_next+0xd0>
						fs->wflag = 1;
 8008170:	2301      	movs	r3, #1
 8008172:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008174:	4630      	mov	r0, r6
 8008176:	f7ff fbb5 	bl	80078e4 <sync_window>
 800817a:	b9f8      	cbnz	r0, 80081bc <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800817c:	f109 0901 	add.w	r9, r9, #1
 8008180:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008182:	3301      	adds	r3, #1
 8008184:	62f3      	str	r3, [r6, #44]	; 0x2c
 8008186:	e7f0      	b.n	800816a <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 8008188:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800818a:	eba3 0309 	sub.w	r3, r3, r9
 800818e:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8008190:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8008194:	4651      	mov	r1, sl
 8008196:	4630      	mov	r0, r6
 8008198:	f7ff faa8 	bl	80076ec <clust2sect>
 800819c:	61e0      	str	r0, [r4, #28]
 800819e:	e7a3      	b.n	80080e8 <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80081a0:	2004      	movs	r0, #4
 80081a2:	e7a7      	b.n	80080f4 <dir_next+0x3c>
 80081a4:	2004      	movs	r0, #4
 80081a6:	e7a5      	b.n	80080f4 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80081a8:	2002      	movs	r0, #2
 80081aa:	e7a3      	b.n	80080f4 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80081ac:	2001      	movs	r0, #1
 80081ae:	e7a1      	b.n	80080f4 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80081b0:	2007      	movs	r0, #7
 80081b2:	e79f      	b.n	80080f4 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80081b4:	2002      	movs	r0, #2
 80081b6:	e79d      	b.n	80080f4 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081b8:	2001      	movs	r0, #1
 80081ba:	e79b      	b.n	80080f4 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80081bc:	2001      	movs	r0, #1
 80081be:	e799      	b.n	80080f4 <dir_next+0x3c>

080081c0 <dir_find>:
{
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80081c4:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80081c6:	2100      	movs	r1, #0
 80081c8:	f7ff fe7b 	bl	8007ec2 <dir_sdi>
	if (res != FR_OK) return res;
 80081cc:	4605      	mov	r5, r0
 80081ce:	b140      	cbz	r0, 80081e2 <dir_find+0x22>
}
 80081d0:	4628      	mov	r0, r5
 80081d2:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 80081d4:	2100      	movs	r1, #0
 80081d6:	4620      	mov	r0, r4
 80081d8:	f7ff ff6e 	bl	80080b8 <dir_next>
	} while (res == FR_OK);
 80081dc:	4605      	mov	r5, r0
 80081de:	2800      	cmp	r0, #0
 80081e0:	d1f6      	bne.n	80081d0 <dir_find+0x10>
		res = move_window(fs, dp->sect);
 80081e2:	69e1      	ldr	r1, [r4, #28]
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7ff fba6 	bl	8007936 <move_window>
		if (res != FR_OK) break;
 80081ea:	4605      	mov	r5, r0
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d1ef      	bne.n	80081d0 <dir_find+0x10>
		c = dp->dir[DIR_Name];
 80081f0:	6a20      	ldr	r0, [r4, #32]
 80081f2:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80081f4:	b17b      	cbz	r3, 8008216 <dir_find+0x56>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80081f6:	7ac3      	ldrb	r3, [r0, #11]
 80081f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081fc:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80081fe:	7ac3      	ldrb	r3, [r0, #11]
 8008200:	f013 0f08 	tst.w	r3, #8
 8008204:	d1e6      	bne.n	80081d4 <dir_find+0x14>
 8008206:	220b      	movs	r2, #11
 8008208:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800820c:	f7ff f97d 	bl	800750a <mem_cmp>
 8008210:	2800      	cmp	r0, #0
 8008212:	d1df      	bne.n	80081d4 <dir_find+0x14>
 8008214:	e7dc      	b.n	80081d0 <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008216:	2504      	movs	r5, #4
 8008218:	e7da      	b.n	80081d0 <dir_find+0x10>

0800821a <follow_path>:
{
 800821a:	b530      	push	{r4, r5, lr}
 800821c:	b083      	sub	sp, #12
 800821e:	4604      	mov	r4, r0
 8008220:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8008222:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008224:	e001      	b.n	800822a <follow_path+0x10>
 8008226:	3301      	adds	r3, #1
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	781a      	ldrb	r2, [r3, #0]
 800822e:	2a2f      	cmp	r2, #47	; 0x2f
 8008230:	d0f9      	beq.n	8008226 <follow_path+0xc>
 8008232:	2a5c      	cmp	r2, #92	; 0x5c
 8008234:	d0f7      	beq.n	8008226 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8008236:	2200      	movs	r2, #0
 8008238:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b1f      	cmp	r3, #31
 800823e:	d81b      	bhi.n	8008278 <follow_path+0x5e>
		dp->fn[NSFLAG] = NS_NONAME;
 8008240:	2380      	movs	r3, #128	; 0x80
 8008242:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008246:	4611      	mov	r1, r2
 8008248:	4620      	mov	r0, r4
 800824a:	f7ff fe3a 	bl	8007ec2 <dir_sdi>
 800824e:	4603      	mov	r3, r0
}
 8008250:	4618      	mov	r0, r3
 8008252:	b003      	add	sp, #12
 8008254:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008256:	2804      	cmp	r0, #4
 8008258:	d1fa      	bne.n	8008250 <follow_path+0x36>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800825a:	f012 0f04 	tst.w	r2, #4
 800825e:	d1f7      	bne.n	8008250 <follow_path+0x36>
 8008260:	2305      	movs	r3, #5
 8008262:	e7f5      	b.n	8008250 <follow_path+0x36>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008264:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8008268:	6963      	ldr	r3, [r4, #20]
 800826a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826e:	4419      	add	r1, r3
 8008270:	4628      	mov	r0, r5
 8008272:	f7ff fa58 	bl	8007726 <ld_clust>
 8008276:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008278:	a901      	add	r1, sp, #4
 800827a:	4620      	mov	r0, r4
 800827c:	f7ff fa7a 	bl	8007774 <create_name>
			if (res != FR_OK) break;
 8008280:	4603      	mov	r3, r0
 8008282:	2800      	cmp	r0, #0
 8008284:	d1e4      	bne.n	8008250 <follow_path+0x36>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008286:	4620      	mov	r0, r4
 8008288:	f7ff ff9a 	bl	80081c0 <dir_find>
			ns = dp->fn[NSFLAG];
 800828c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8008290:	4603      	mov	r3, r0
 8008292:	2800      	cmp	r0, #0
 8008294:	d1df      	bne.n	8008256 <follow_path+0x3c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008296:	f012 0f04 	tst.w	r2, #4
 800829a:	d1d9      	bne.n	8008250 <follow_path+0x36>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800829c:	79a3      	ldrb	r3, [r4, #6]
 800829e:	f013 0f10 	tst.w	r3, #16
 80082a2:	d1df      	bne.n	8008264 <follow_path+0x4a>
				res = FR_NO_PATH; break;
 80082a4:	2305      	movs	r3, #5
 80082a6:	e7d3      	b.n	8008250 <follow_path+0x36>

080082a8 <dir_alloc>:
{
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	4604      	mov	r4, r0
 80082ac:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 80082ae:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 80082b0:	2100      	movs	r1, #0
 80082b2:	f7ff fe06 	bl	8007ec2 <dir_sdi>
	if (res == FR_OK) {
 80082b6:	4602      	mov	r2, r0
 80082b8:	b9c0      	cbnz	r0, 80082ec <dir_alloc+0x44>
		n = 0;
 80082ba:	2500      	movs	r5, #0
 80082bc:	e008      	b.n	80082d0 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80082be:	3501      	adds	r5, #1
 80082c0:	42b5      	cmp	r5, r6
 80082c2:	d013      	beq.n	80082ec <dir_alloc+0x44>
			res = dir_next(dp, 1);
 80082c4:	2101      	movs	r1, #1
 80082c6:	4620      	mov	r0, r4
 80082c8:	f7ff fef6 	bl	80080b8 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80082cc:	4602      	mov	r2, r0
 80082ce:	b968      	cbnz	r0, 80082ec <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 80082d0:	69e1      	ldr	r1, [r4, #28]
 80082d2:	4638      	mov	r0, r7
 80082d4:	f7ff fb2f 	bl	8007936 <move_window>
			if (res != FR_OK) break;
 80082d8:	4602      	mov	r2, r0
 80082da:	b938      	cbnz	r0, 80082ec <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80082dc:	6a23      	ldr	r3, [r4, #32]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2be5      	cmp	r3, #229	; 0xe5
 80082e2:	d0ec      	beq.n	80082be <dir_alloc+0x16>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0ea      	beq.n	80082be <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 80082e8:	2500      	movs	r5, #0
 80082ea:	e7eb      	b.n	80082c4 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80082ec:	2a04      	cmp	r2, #4
 80082ee:	d001      	beq.n	80082f4 <dir_alloc+0x4c>
}
 80082f0:	4610      	mov	r0, r2
 80082f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80082f4:	2207      	movs	r2, #7
 80082f6:	e7fb      	b.n	80082f0 <dir_alloc+0x48>

080082f8 <dir_register>:
{
 80082f8:	b570      	push	{r4, r5, r6, lr}
 80082fa:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80082fc:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80082fe:	2101      	movs	r1, #1
 8008300:	f7ff ffd2 	bl	80082a8 <dir_alloc>
	if (res == FR_OK) {
 8008304:	4605      	mov	r5, r0
 8008306:	b108      	cbz	r0, 800830c <dir_register+0x14>
}
 8008308:	4628      	mov	r0, r5
 800830a:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 800830c:	69e1      	ldr	r1, [r4, #28]
 800830e:	4630      	mov	r0, r6
 8008310:	f7ff fb11 	bl	8007936 <move_window>
		if (res == FR_OK) {
 8008314:	4605      	mov	r5, r0
 8008316:	2800      	cmp	r0, #0
 8008318:	d1f6      	bne.n	8008308 <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800831a:	2220      	movs	r2, #32
 800831c:	2100      	movs	r1, #0
 800831e:	6a20      	ldr	r0, [r4, #32]
 8008320:	f7ff f8ee 	bl	8007500 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008324:	220b      	movs	r2, #11
 8008326:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800832a:	6a20      	ldr	r0, [r4, #32]
 800832c:	f7ff f8dc 	bl	80074e8 <mem_cpy>
			fs->wflag = 1;
 8008330:	2301      	movs	r3, #1
 8008332:	70f3      	strb	r3, [r6, #3]
 8008334:	e7e8      	b.n	8008308 <dir_register+0x10>
	...

08008338 <sync_fs>:
{
 8008338:	b570      	push	{r4, r5, r6, lr}
 800833a:	4604      	mov	r4, r0
	res = sync_window(fs);
 800833c:	f7ff fad2 	bl	80078e4 <sync_window>
	if (res == FR_OK) {
 8008340:	4605      	mov	r5, r0
 8008342:	b948      	cbnz	r0, 8008358 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008344:	7823      	ldrb	r3, [r4, #0]
 8008346:	2b03      	cmp	r3, #3
 8008348:	d008      	beq.n	800835c <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800834a:	2200      	movs	r2, #0
 800834c:	4611      	mov	r1, r2
 800834e:	7860      	ldrb	r0, [r4, #1]
 8008350:	f7ff f8a0 	bl	8007494 <disk_ioctl>
 8008354:	b100      	cbz	r0, 8008358 <sync_fs+0x20>
 8008356:	2501      	movs	r5, #1
}
 8008358:	4628      	mov	r0, r5
 800835a:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800835c:	7923      	ldrb	r3, [r4, #4]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d1f3      	bne.n	800834a <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 8008362:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800836a:	2100      	movs	r1, #0
 800836c:	4630      	mov	r0, r6
 800836e:	f7ff f8c7 	bl	8007500 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008372:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008376:	f204 202e 	addw	r0, r4, #558	; 0x22e
 800837a:	f7ff f8a7 	bl	80074cc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800837e:	490f      	ldr	r1, [pc, #60]	; (80083bc <sync_fs+0x84>)
 8008380:	4630      	mov	r0, r6
 8008382:	f7ff f8a7 	bl	80074d4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008386:	490e      	ldr	r1, [pc, #56]	; (80083c0 <sync_fs+0x88>)
 8008388:	f504 7005 	add.w	r0, r4, #532	; 0x214
 800838c:	f7ff f8a2 	bl	80074d4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008390:	6921      	ldr	r1, [r4, #16]
 8008392:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008396:	f7ff f89d 	bl	80074d4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800839a:	68e1      	ldr	r1, [r4, #12]
 800839c:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80083a0:	f7ff f898 	bl	80074d4 <st_dword>
			fs->winsect = fs->volbase + 1;
 80083a4:	69e2      	ldr	r2, [r4, #28]
 80083a6:	3201      	adds	r2, #1
 80083a8:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80083aa:	2301      	movs	r3, #1
 80083ac:	4631      	mov	r1, r6
 80083ae:	7860      	ldrb	r0, [r4, #1]
 80083b0:	f7ff f864 	bl	800747c <disk_write>
			fs->fsi_flag = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	7123      	strb	r3, [r4, #4]
 80083b8:	e7c7      	b.n	800834a <sync_fs+0x12>
 80083ba:	bf00      	nop
 80083bc:	41615252 	.word	0x41615252
 80083c0:	61417272 	.word	0x61417272

080083c4 <f_mount>:
{
 80083c4:	b570      	push	{r4, r5, r6, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	9001      	str	r0, [sp, #4]
 80083ca:	9100      	str	r1, [sp, #0]
 80083cc:	4616      	mov	r6, r2
	const TCHAR *rp = path;
 80083ce:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80083d0:	a803      	add	r0, sp, #12
 80083d2:	f7ff fa35 	bl	8007840 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80083d6:	1e04      	subs	r4, r0, #0
 80083d8:	db1c      	blt.n	8008414 <f_mount+0x50>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80083da:	4b10      	ldr	r3, [pc, #64]	; (800841c <f_mount+0x58>)
 80083dc:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (cfs) {
 80083e0:	b125      	cbz	r5, 80083ec <f_mount+0x28>
		clear_lock(cfs);
 80083e2:	4628      	mov	r0, r5
 80083e4:	f7ff f964 	bl	80076b0 <clear_lock>
		cfs->fs_type = 0;				/* Clear old fs object */
 80083e8:	2300      	movs	r3, #0
 80083ea:	702b      	strb	r3, [r5, #0]
	if (fs) {
 80083ec:	9b01      	ldr	r3, [sp, #4]
 80083ee:	b10b      	cbz	r3, 80083f4 <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 80083f0:	2200      	movs	r2, #0
 80083f2:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	4a09      	ldr	r2, [pc, #36]	; (800841c <f_mount+0x58>)
 80083f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80083fc:	b163      	cbz	r3, 8008418 <f_mount+0x54>
 80083fe:	2e01      	cmp	r6, #1
 8008400:	d002      	beq.n	8008408 <f_mount+0x44>
 8008402:	2000      	movs	r0, #0
}
 8008404:	b004      	add	sp, #16
 8008406:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008408:	2200      	movs	r2, #0
 800840a:	a901      	add	r1, sp, #4
 800840c:	4668      	mov	r0, sp
 800840e:	f7ff fae9 	bl	80079e4 <find_volume>
	LEAVE_FF(fs, res);
 8008412:	e7f7      	b.n	8008404 <f_mount+0x40>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008414:	200b      	movs	r0, #11
 8008416:	e7f5      	b.n	8008404 <f_mount+0x40>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008418:	2000      	movs	r0, #0
 800841a:	e7f3      	b.n	8008404 <f_mount+0x40>
 800841c:	2000023c 	.word	0x2000023c

08008420 <f_open>:
{
 8008420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008424:	b091      	sub	sp, #68	; 0x44
 8008426:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8008428:	2800      	cmp	r0, #0
 800842a:	f000 810a 	beq.w	8008642 <f_open+0x222>
 800842e:	4615      	mov	r5, r2
 8008430:	4606      	mov	r6, r0
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008432:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8008436:	463a      	mov	r2, r7
 8008438:	a903      	add	r1, sp, #12
 800843a:	a801      	add	r0, sp, #4
 800843c:	f7ff fad2 	bl	80079e4 <find_volume>
	if (res == FR_OK) {
 8008440:	4604      	mov	r4, r0
 8008442:	b130      	cbz	r0, 8008452 <f_open+0x32>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008444:	b10c      	cbz	r4, 800844a <f_open+0x2a>
 8008446:	2300      	movs	r3, #0
 8008448:	6033      	str	r3, [r6, #0]
}
 800844a:	4620      	mov	r0, r4
 800844c:	b011      	add	sp, #68	; 0x44
 800844e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008456:	9901      	ldr	r1, [sp, #4]
 8008458:	a804      	add	r0, sp, #16
 800845a:	f7ff fede 	bl	800821a <follow_path>
		if (res == FR_OK) {
 800845e:	4604      	mov	r4, r0
 8008460:	b960      	cbnz	r0, 800847c <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008462:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8008466:	2b00      	cmp	r3, #0
 8008468:	db50      	blt.n	800850c <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800846a:	f037 0301 	bics.w	r3, r7, #1
 800846e:	bf14      	ite	ne
 8008470:	2101      	movne	r1, #1
 8008472:	2100      	moveq	r1, #0
 8008474:	a804      	add	r0, sp, #16
 8008476:	f7ff f85f 	bl	8007538 <chk_lock>
 800847a:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800847c:	f015 0f1c 	tst.w	r5, #28
 8008480:	d05a      	beq.n	8008538 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 8008482:	2c00      	cmp	r4, #0
 8008484:	d04e      	beq.n	8008524 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008486:	2c04      	cmp	r4, #4
 8008488:	d042      	beq.n	8008510 <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800848a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800848e:	2c00      	cmp	r4, #0
 8008490:	d161      	bne.n	8008556 <f_open+0x136>
 8008492:	f017 0f08 	tst.w	r7, #8
 8008496:	d05e      	beq.n	8008556 <f_open+0x136>
				dw = GET_FATTIME();
 8008498:	f7fe ffae 	bl	80073f8 <get_fattime>
 800849c:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800849e:	4601      	mov	r1, r0
 80084a0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084a2:	300e      	adds	r0, #14
 80084a4:	f7ff f816 	bl	80074d4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80084a8:	4629      	mov	r1, r5
 80084aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084ac:	3016      	adds	r0, #22
 80084ae:	f7ff f811 	bl	80074d4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80084b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b4:	2220      	movs	r2, #32
 80084b6:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80084b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80084bc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80084c0:	4649      	mov	r1, r9
 80084c2:	4640      	mov	r0, r8
 80084c4:	f7ff f92f 	bl	8007726 <ld_clust>
 80084c8:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80084ca:	2200      	movs	r2, #0
 80084cc:	4649      	mov	r1, r9
 80084ce:	4640      	mov	r0, r8
 80084d0:	f7ff f93c 	bl	800774c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80084d4:	2100      	movs	r1, #0
 80084d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80084d8:	301c      	adds	r0, #28
 80084da:	f7fe fffb 	bl	80074d4 <st_dword>
					fs->wflag = 1;
 80084de:	9b03      	ldr	r3, [sp, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80084e4:	b3bd      	cbz	r5, 8008556 <f_open+0x136>
						dw = fs->winsect;
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80084ec:	2200      	movs	r2, #0
 80084ee:	4629      	mov	r1, r5
 80084f0:	a804      	add	r0, sp, #16
 80084f2:	f7ff fda2 	bl	800803a <remove_chain>
						if (res == FR_OK) {
 80084f6:	4604      	mov	r4, r0
 80084f8:	bb68      	cbnz	r0, 8008556 <f_open+0x136>
							res = move_window(fs, dw);
 80084fa:	4641      	mov	r1, r8
 80084fc:	9803      	ldr	r0, [sp, #12]
 80084fe:	f7ff fa1a 	bl	8007936 <move_window>
 8008502:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008504:	3d01      	subs	r5, #1
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	60dd      	str	r5, [r3, #12]
 800850a:	e024      	b.n	8008556 <f_open+0x136>
				res = FR_INVALID_NAME;
 800850c:	2406      	movs	r4, #6
 800850e:	e7b5      	b.n	800847c <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008510:	f7ff f84c 	bl	80075ac <enq_lock>
 8008514:	b908      	cbnz	r0, 800851a <f_open+0xfa>
 8008516:	2412      	movs	r4, #18
 8008518:	e7b7      	b.n	800848a <f_open+0x6a>
 800851a:	a804      	add	r0, sp, #16
 800851c:	f7ff feec 	bl	80082f8 <dir_register>
 8008520:	4604      	mov	r4, r0
 8008522:	e7b2      	b.n	800848a <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008524:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8008528:	f013 0f11 	tst.w	r3, #17
 800852c:	d112      	bne.n	8008554 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800852e:	f015 0f04 	tst.w	r5, #4
 8008532:	d0ac      	beq.n	800848e <f_open+0x6e>
 8008534:	2408      	movs	r4, #8
 8008536:	e00e      	b.n	8008556 <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 8008538:	b96c      	cbnz	r4, 8008556 <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800853a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800853e:	f013 0f10 	tst.w	r3, #16
 8008542:	d14c      	bne.n	80085de <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008544:	f015 0f02 	tst.w	r5, #2
 8008548:	d005      	beq.n	8008556 <f_open+0x136>
 800854a:	f013 0f01 	tst.w	r3, #1
 800854e:	d002      	beq.n	8008556 <f_open+0x136>
						res = FR_DENIED;
 8008550:	2407      	movs	r4, #7
 8008552:	e016      	b.n	8008582 <f_open+0x162>
					res = FR_DENIED;
 8008554:	2407      	movs	r4, #7
		if (res == FR_OK) {
 8008556:	b9a4      	cbnz	r4, 8008582 <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008558:	f017 0f08 	tst.w	r7, #8
 800855c:	d001      	beq.n	8008562 <f_open+0x142>
				mode |= FA_MODIFIED;
 800855e:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008562:	9b03      	ldr	r3, [sp, #12]
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800856a:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800856c:	f037 0301 	bics.w	r3, r7, #1
 8008570:	bf14      	ite	ne
 8008572:	2101      	movne	r1, #1
 8008574:	2100      	moveq	r1, #0
 8008576:	a804      	add	r0, sp, #16
 8008578:	f7ff f828 	bl	80075cc <inc_lock>
 800857c:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800857e:	2800      	cmp	r0, #0
 8008580:	d05d      	beq.n	800863e <f_open+0x21e>
		if (res == FR_OK) {
 8008582:	2c00      	cmp	r4, #0
 8008584:	f47f af5e 	bne.w	8008444 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008588:	9d03      	ldr	r5, [sp, #12]
 800858a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800858e:	4641      	mov	r1, r8
 8008590:	4628      	mov	r0, r5
 8008592:	f7ff f8c8 	bl	8007726 <ld_clust>
 8008596:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008598:	f108 001c 	add.w	r0, r8, #28
 800859c:	f7fe ff8b 	bl	80074b6 <ld_dword>
 80085a0:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80085a2:	2100      	movs	r1, #0
 80085a4:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 80085a6:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 80085a8:	88eb      	ldrh	r3, [r5, #6]
 80085aa:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 80085ac:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 80085ae:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80085b0:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80085b2:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80085b4:	f106 0830 	add.w	r8, r6, #48	; 0x30
 80085b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085bc:	4640      	mov	r0, r8
 80085be:	f7fe ff9f 	bl	8007500 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80085c2:	f017 0f20 	tst.w	r7, #32
 80085c6:	f43f af3d 	beq.w	8008444 <f_open+0x24>
 80085ca:	68f5      	ldr	r5, [r6, #12]
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	f43f af39 	beq.w	8008444 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80085d2:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80085d4:	9b03      	ldr	r3, [sp, #12]
 80085d6:	895f      	ldrh	r7, [r3, #10]
 80085d8:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80085da:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085dc:	e005      	b.n	80085ea <f_open+0x1ca>
					res = FR_NO_FILE;
 80085de:	2404      	movs	r4, #4
 80085e0:	e7cf      	b.n	8008582 <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80085e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80085e6:	d00b      	beq.n	8008600 <f_open+0x1e0>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085e8:	1bed      	subs	r5, r5, r7
 80085ea:	b95c      	cbnz	r4, 8008604 <f_open+0x1e4>
 80085ec:	42bd      	cmp	r5, r7
 80085ee:	d909      	bls.n	8008604 <f_open+0x1e4>
					clst = get_fat(&fp->obj, clst);
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7ff fbfe 	bl	8007df2 <get_fat>
 80085f6:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80085f8:	2801      	cmp	r0, #1
 80085fa:	d8f2      	bhi.n	80085e2 <f_open+0x1c2>
 80085fc:	2402      	movs	r4, #2
 80085fe:	e7f0      	b.n	80085e2 <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008600:	2401      	movs	r4, #1
 8008602:	e7f1      	b.n	80085e8 <f_open+0x1c8>
				fp->clust = clst;
 8008604:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008606:	2c00      	cmp	r4, #0
 8008608:	f47f af1c 	bne.w	8008444 <f_open+0x24>
 800860c:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8008610:	2b00      	cmp	r3, #0
 8008612:	f43f af17 	beq.w	8008444 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008616:	9f03      	ldr	r7, [sp, #12]
 8008618:	4638      	mov	r0, r7
 800861a:	f7ff f867 	bl	80076ec <clust2sect>
 800861e:	b908      	cbnz	r0, 8008624 <f_open+0x204>
						res = FR_INT_ERR;
 8008620:	2402      	movs	r4, #2
 8008622:	e710      	b.n	8008446 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008624:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8008628:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800862a:	2301      	movs	r3, #1
 800862c:	4641      	mov	r1, r8
 800862e:	7878      	ldrb	r0, [r7, #1]
 8008630:	f7fe ff18 	bl	8007464 <disk_read>
 8008634:	2800      	cmp	r0, #0
 8008636:	f43f af05 	beq.w	8008444 <f_open+0x24>
 800863a:	2401      	movs	r4, #1
 800863c:	e703      	b.n	8008446 <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800863e:	2402      	movs	r4, #2
 8008640:	e700      	b.n	8008444 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8008642:	2409      	movs	r4, #9
 8008644:	e701      	b.n	800844a <f_open+0x2a>

08008646 <f_write>:
{
 8008646:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864a:	b085      	sub	sp, #20
 800864c:	4604      	mov	r4, r0
 800864e:	460e      	mov	r6, r1
 8008650:	4615      	mov	r5, r2
 8008652:	4698      	mov	r8, r3
	*bw = 0;	/* Clear write byte counter */
 8008654:	2300      	movs	r3, #0
 8008656:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800865a:	9001      	str	r0, [sp, #4]
 800865c:	a903      	add	r1, sp, #12
 800865e:	f7ff f91e 	bl	800789e <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008662:	9000      	str	r0, [sp, #0]
 8008664:	2800      	cmp	r0, #0
 8008666:	d14a      	bne.n	80086fe <f_write+0xb8>
 8008668:	7d63      	ldrb	r3, [r4, #21]
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d146      	bne.n	80086fe <f_write+0xb8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008670:	7d23      	ldrb	r3, [r4, #20]
 8008672:	f013 0f02 	tst.w	r3, #2
 8008676:	f000 80e3 	beq.w	8008840 <f_write+0x1fa>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800867a:	69a3      	ldr	r3, [r4, #24]
 800867c:	42eb      	cmn	r3, r5
 800867e:	f0c0 80b1 	bcc.w	80087e4 <f_write+0x19e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008682:	43dd      	mvns	r5, r3
 8008684:	e0ae      	b.n	80087e4 <f_write+0x19e>
					if (fp->cltbl) {
 8008686:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008688:	2b00      	cmp	r3, #0
 800868a:	d03c      	beq.n	8008706 <f_write+0xc0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800868c:	4620      	mov	r0, r4
 800868e:	f7ff f839 	bl	8007704 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008692:	2800      	cmp	r0, #0
 8008694:	f000 80cf 	beq.w	8008836 <f_write+0x1f0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008698:	2801      	cmp	r0, #1
 800869a:	d039      	beq.n	8008710 <f_write+0xca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800869c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80086a0:	d03d      	beq.n	800871e <f_write+0xd8>
				fp->clust = clst;			/* Update current cluster */
 80086a2:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	b903      	cbnz	r3, 80086aa <f_write+0x64>
 80086a8:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80086aa:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	db3c      	blt.n	800872c <f_write+0xe6>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80086b2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80086b6:	69e1      	ldr	r1, [r4, #28]
 80086b8:	4658      	mov	r0, fp
 80086ba:	f7ff f817 	bl	80076ec <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086be:	4681      	mov	r9, r0
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d048      	beq.n	8008756 <f_write+0x110>
			sect += csect;
 80086c4:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80086c6:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 80086ca:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80086ce:	d35e      	bcc.n	800878e <f_write+0x148>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80086d0:	eb07 030a 	add.w	r3, r7, sl
 80086d4:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 80086d8:	4293      	cmp	r3, r2
 80086da:	d901      	bls.n	80086e0 <f_write+0x9a>
					cc = fs->csize - csect;
 80086dc:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086e0:	4653      	mov	r3, sl
 80086e2:	464a      	mov	r2, r9
 80086e4:	4631      	mov	r1, r6
 80086e6:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80086ea:	f7fe fec7 	bl	800747c <disk_write>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d038      	beq.n	8008764 <f_write+0x11e>
 80086f2:	f04f 0a01 	mov.w	sl, #1
 80086f6:	f884 a015 	strb.w	sl, [r4, #21]
 80086fa:	f8cd a000 	str.w	sl, [sp]
}
 80086fe:	9800      	ldr	r0, [sp, #0]
 8008700:	b005      	add	sp, #20
 8008702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008706:	69e1      	ldr	r1, [r4, #28]
 8008708:	9801      	ldr	r0, [sp, #4]
 800870a:	f7ff fc30 	bl	8007f6e <create_chain>
 800870e:	e7c0      	b.n	8008692 <f_write+0x4c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008710:	f04f 0a02 	mov.w	sl, #2
 8008714:	f884 a015 	strb.w	sl, [r4, #21]
 8008718:	f8cd a000 	str.w	sl, [sp]
 800871c:	e7ef      	b.n	80086fe <f_write+0xb8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800871e:	f04f 0a01 	mov.w	sl, #1
 8008722:	f884 a015 	strb.w	sl, [r4, #21]
 8008726:	f8cd a000 	str.w	sl, [sp]
 800872a:	e7e8      	b.n	80086fe <f_write+0xb8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800872c:	2301      	movs	r3, #1
 800872e:	6a22      	ldr	r2, [r4, #32]
 8008730:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008734:	9803      	ldr	r0, [sp, #12]
 8008736:	7840      	ldrb	r0, [r0, #1]
 8008738:	f7fe fea0 	bl	800747c <disk_write>
 800873c:	b920      	cbnz	r0, 8008748 <f_write+0x102>
				fp->flag &= (BYTE)~FA_DIRTY;
 800873e:	7d23      	ldrb	r3, [r4, #20]
 8008740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008744:	7523      	strb	r3, [r4, #20]
 8008746:	e7b4      	b.n	80086b2 <f_write+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008748:	f04f 0a01 	mov.w	sl, #1
 800874c:	f884 a015 	strb.w	sl, [r4, #21]
 8008750:	f8cd a000 	str.w	sl, [sp]
 8008754:	e7d3      	b.n	80086fe <f_write+0xb8>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008756:	f04f 0a02 	mov.w	sl, #2
 800875a:	f884 a015 	strb.w	sl, [r4, #21]
 800875e:	f8cd a000 	str.w	sl, [sp]
 8008762:	e7cc      	b.n	80086fe <f_write+0xb8>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008764:	6a21      	ldr	r1, [r4, #32]
 8008766:	eba1 0109 	sub.w	r1, r1, r9
 800876a:	4551      	cmp	r1, sl
 800876c:	d302      	bcc.n	8008774 <f_write+0x12e>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800876e:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 8008772:	e028      	b.n	80087c6 <f_write+0x180>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008778:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 800877c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008780:	f7fe feb2 	bl	80074e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008784:	7d23      	ldrb	r3, [r4, #20]
 8008786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800878a:	7523      	strb	r3, [r4, #20]
 800878c:	e7ef      	b.n	800876e <f_write+0x128>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800878e:	6a23      	ldr	r3, [r4, #32]
 8008790:	454b      	cmp	r3, r9
 8008792:	d003      	beq.n	800879c <f_write+0x156>
				fp->fptr < fp->obj.objsize &&
 8008794:	69a2      	ldr	r2, [r4, #24]
 8008796:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008798:	429a      	cmp	r2, r3
 800879a:	d33b      	bcc.n	8008814 <f_write+0x1ce>
			fp->sect = sect;
 800879c:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087a0:	69a3      	ldr	r3, [r4, #24]
 80087a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a6:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80087aa:	42bd      	cmp	r5, r7
 80087ac:	d200      	bcs.n	80087b0 <f_write+0x16a>
 80087ae:	462f      	mov	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80087b0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80087b4:	463a      	mov	r2, r7
 80087b6:	4631      	mov	r1, r6
 80087b8:	4418      	add	r0, r3
 80087ba:	f7fe fe95 	bl	80074e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80087be:	7d23      	ldrb	r3, [r4, #20]
 80087c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087c4:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80087c6:	443e      	add	r6, r7
 80087c8:	69a3      	ldr	r3, [r4, #24]
 80087ca:	443b      	add	r3, r7
 80087cc:	61a3      	str	r3, [r4, #24]
 80087ce:	68e2      	ldr	r2, [r4, #12]
 80087d0:	4293      	cmp	r3, r2
 80087d2:	bf38      	it	cc
 80087d4:	4613      	movcc	r3, r2
 80087d6:	60e3      	str	r3, [r4, #12]
 80087d8:	f8d8 3000 	ldr.w	r3, [r8]
 80087dc:	443b      	add	r3, r7
 80087de:	f8c8 3000 	str.w	r3, [r8]
 80087e2:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 80087e4:	b33d      	cbz	r5, 8008836 <f_write+0x1f0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80087e6:	69a1      	ldr	r1, [r4, #24]
 80087e8:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1d7      	bne.n	80087a0 <f_write+0x15a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80087f0:	9b03      	ldr	r3, [sp, #12]
 80087f2:	895f      	ldrh	r7, [r3, #10]
 80087f4:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 80087f6:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 80087fa:	f47f af56 	bne.w	80086aa <f_write+0x64>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80087fe:	2900      	cmp	r1, #0
 8008800:	f47f af41 	bne.w	8008686 <f_write+0x40>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008804:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8008806:	2800      	cmp	r0, #0
 8008808:	f47f af43 	bne.w	8008692 <f_write+0x4c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800880c:	9801      	ldr	r0, [sp, #4]
 800880e:	f7ff fbae 	bl	8007f6e <create_chain>
 8008812:	e73e      	b.n	8008692 <f_write+0x4c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008814:	2301      	movs	r3, #1
 8008816:	464a      	mov	r2, r9
 8008818:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800881c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8008820:	f7fe fe20 	bl	8007464 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8008824:	2800      	cmp	r0, #0
 8008826:	d0b9      	beq.n	800879c <f_write+0x156>
					ABORT(fs, FR_DISK_ERR);
 8008828:	f04f 0a01 	mov.w	sl, #1
 800882c:	f884 a015 	strb.w	sl, [r4, #21]
 8008830:	f8cd a000 	str.w	sl, [sp]
 8008834:	e763      	b.n	80086fe <f_write+0xb8>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008836:	7d23      	ldrb	r3, [r4, #20]
 8008838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800883c:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800883e:	e75e      	b.n	80086fe <f_write+0xb8>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008840:	2307      	movs	r3, #7
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	e75b      	b.n	80086fe <f_write+0xb8>

08008846 <putc_bfd>:
{
 8008846:	b570      	push	{r4, r5, r6, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	4604      	mov	r4, r0
 800884c:	460d      	mov	r5, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800884e:	290a      	cmp	r1, #10
 8008850:	d00d      	beq.n	800886e <putc_bfd+0x28>
	i = pb->idx;		/* Write index of pb->buf[] */
 8008852:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 8008854:	2b00      	cmp	r3, #0
 8008856:	db08      	blt.n	800886a <putc_bfd+0x24>
	pb->buf[i++] = (BYTE)c;
 8008858:	1c5e      	adds	r6, r3, #1
 800885a:	4423      	add	r3, r4
 800885c:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800885e:	2e3c      	cmp	r6, #60	; 0x3c
 8008860:	dc09      	bgt.n	8008876 <putc_bfd+0x30>
	pb->idx = i;
 8008862:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 8008864:	68a3      	ldr	r3, [r4, #8]
 8008866:	3301      	adds	r3, #1
 8008868:	60a3      	str	r3, [r4, #8]
}
 800886a:	b002      	add	sp, #8
 800886c:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 800886e:	210d      	movs	r1, #13
 8008870:	f7ff ffe9 	bl	8008846 <putc_bfd>
 8008874:	e7ed      	b.n	8008852 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008876:	4621      	mov	r1, r4
 8008878:	f851 0b0c 	ldr.w	r0, [r1], #12
 800887c:	ab01      	add	r3, sp, #4
 800887e:	4632      	mov	r2, r6
 8008880:	f7ff fee1 	bl	8008646 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	429e      	cmp	r6, r3
 8008888:	d002      	beq.n	8008890 <putc_bfd+0x4a>
 800888a:	f04f 36ff 	mov.w	r6, #4294967295
 800888e:	e7e8      	b.n	8008862 <putc_bfd+0x1c>
 8008890:	2600      	movs	r6, #0
 8008892:	e7e6      	b.n	8008862 <putc_bfd+0x1c>

08008894 <putc_flush>:
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008894:	6842      	ldr	r2, [r0, #4]
 8008896:	2a00      	cmp	r2, #0
 8008898:	db10      	blt.n	80088bc <putc_flush+0x28>
{
 800889a:	b510      	push	{r4, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	4604      	mov	r4, r0
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80088a0:	4601      	mov	r1, r0
 80088a2:	f851 0b0c 	ldr.w	r0, [r1], #12
 80088a6:	ab01      	add	r3, sp, #4
 80088a8:	f7ff fecd 	bl	8008646 <f_write>
 80088ac:	b948      	cbnz	r0, 80088c2 <putc_flush+0x2e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80088ae:	6862      	ldr	r2, [r4, #4]
 80088b0:	9b01      	ldr	r3, [sp, #4]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d108      	bne.n	80088c8 <putc_flush+0x34>
 80088b6:	68a0      	ldr	r0, [r4, #8]
}
 80088b8:	b002      	add	sp, #8
 80088ba:	bd10      	pop	{r4, pc}
	return EOF;
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80088c0:	4770      	bx	lr
	return EOF;
 80088c2:	f04f 30ff 	mov.w	r0, #4294967295
 80088c6:	e7f7      	b.n	80088b8 <putc_flush+0x24>
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	e7f4      	b.n	80088b8 <putc_flush+0x24>

080088ce <f_sync>:
{
 80088ce:	b570      	push	{r4, r5, r6, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80088d4:	a901      	add	r1, sp, #4
 80088d6:	f7fe ffe2 	bl	800789e <validate>
	if (res == FR_OK) {
 80088da:	b970      	cbnz	r0, 80088fa <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80088dc:	7d23      	ldrb	r3, [r4, #20]
 80088de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80088e2:	d00a      	beq.n	80088fa <f_sync+0x2c>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80088e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088e8:	d109      	bne.n	80088fe <f_sync+0x30>
			tm = GET_FATTIME();				/* Modified time */
 80088ea:	f7fe fd85 	bl	80073f8 <get_fattime>
 80088ee:	4605      	mov	r5, r0
				res = move_window(fs, fp->dir_sect);
 80088f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80088f2:	9801      	ldr	r0, [sp, #4]
 80088f4:	f7ff f81f 	bl	8007936 <move_window>
				if (res == FR_OK) {
 80088f8:	b178      	cbz	r0, 800891a <f_sync+0x4c>
}
 80088fa:	b002      	add	sp, #8
 80088fc:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80088fe:	2301      	movs	r3, #1
 8008900:	6a22      	ldr	r2, [r4, #32]
 8008902:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008906:	9801      	ldr	r0, [sp, #4]
 8008908:	7840      	ldrb	r0, [r0, #1]
 800890a:	f7fe fdb7 	bl	800747c <disk_write>
 800890e:	bb40      	cbnz	r0, 8008962 <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008910:	7d23      	ldrb	r3, [r4, #20]
 8008912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008916:	7523      	strb	r3, [r4, #20]
 8008918:	e7e7      	b.n	80088ea <f_sync+0x1c>
					dir = fp->dir_ptr;
 800891a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800891c:	7af3      	ldrb	r3, [r6, #11]
 800891e:	f043 0320 	orr.w	r3, r3, #32
 8008922:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008924:	68a2      	ldr	r2, [r4, #8]
 8008926:	4631      	mov	r1, r6
 8008928:	6820      	ldr	r0, [r4, #0]
 800892a:	f7fe ff0f 	bl	800774c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800892e:	68e1      	ldr	r1, [r4, #12]
 8008930:	f106 001c 	add.w	r0, r6, #28
 8008934:	f7fe fdce 	bl	80074d4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008938:	4629      	mov	r1, r5
 800893a:	f106 0016 	add.w	r0, r6, #22
 800893e:	f7fe fdc9 	bl	80074d4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008942:	2100      	movs	r1, #0
 8008944:	f106 0012 	add.w	r0, r6, #18
 8008948:	f7fe fdc0 	bl	80074cc <st_word>
					fs->wflag = 1;
 800894c:	9b01      	ldr	r3, [sp, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008952:	9801      	ldr	r0, [sp, #4]
 8008954:	f7ff fcf0 	bl	8008338 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008958:	7d23      	ldrb	r3, [r4, #20]
 800895a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800895e:	7523      	strb	r3, [r4, #20]
 8008960:	e7cb      	b.n	80088fa <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008962:	2001      	movs	r0, #1
 8008964:	e7c9      	b.n	80088fa <f_sync+0x2c>

08008966 <f_close>:
{
 8008966:	b510      	push	{r4, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 800896c:	f7ff ffaf 	bl	80088ce <f_sync>
	if (res == FR_OK)
 8008970:	b108      	cbz	r0, 8008976 <f_close+0x10>
}
 8008972:	b002      	add	sp, #8
 8008974:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008976:	a901      	add	r1, sp, #4
 8008978:	4620      	mov	r0, r4
 800897a:	f7fe ff90 	bl	800789e <validate>
		if (res == FR_OK) {
 800897e:	2800      	cmp	r0, #0
 8008980:	d1f7      	bne.n	8008972 <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008982:	6920      	ldr	r0, [r4, #16]
 8008984:	f7fe fe74 	bl	8007670 <dec_lock>
			if (res == FR_OK)
 8008988:	2800      	cmp	r0, #0
 800898a:	d1f2      	bne.n	8008972 <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800898c:	6020      	str	r0, [r4, #0]
 800898e:	e7f0      	b.n	8008972 <f_close+0xc>

08008990 <f_getfree>:
{
 8008990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	b088      	sub	sp, #32
 8008996:	9001      	str	r0, [sp, #4]
 8008998:	4688      	mov	r8, r1
 800899a:	4614      	mov	r4, r2
	res = find_volume(&path, &fs, 0);
 800899c:	2200      	movs	r2, #0
 800899e:	a907      	add	r1, sp, #28
 80089a0:	a801      	add	r0, sp, #4
 80089a2:	f7ff f81f 	bl	80079e4 <find_volume>
	if (res == FR_OK) {
 80089a6:	4681      	mov	r9, r0
 80089a8:	b940      	cbnz	r0, 80089bc <f_getfree+0x2c>
		*fatfs = fs;				/* Return ptr to the fs object */
 80089aa:	9b07      	ldr	r3, [sp, #28]
 80089ac:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 80089ae:	691a      	ldr	r2, [r3, #16]
 80089b0:	695d      	ldr	r5, [r3, #20]
 80089b2:	1ea9      	subs	r1, r5, #2
 80089b4:	428a      	cmp	r2, r1
 80089b6:	d805      	bhi.n	80089c4 <f_getfree+0x34>
			*nclst = fs->free_clst;
 80089b8:	f8c8 2000 	str.w	r2, [r8]
}
 80089bc:	4648      	mov	r0, r9
 80089be:	b008      	add	sp, #32
 80089c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80089c4:	781e      	ldrb	r6, [r3, #0]
 80089c6:	2e01      	cmp	r6, #1
 80089c8:	d005      	beq.n	80089d6 <f_getfree+0x46>
					clst = fs->n_fatent; sect = fs->fatbase;
 80089ca:	f8d3 a020 	ldr.w	sl, [r3, #32]
					i = 0; p = 0;
 80089ce:	2400      	movs	r4, #0
 80089d0:	4626      	mov	r6, r4
			nfree = 0;
 80089d2:	4627      	mov	r7, r4
 80089d4:	e02f      	b.n	8008a36 <f_getfree+0xa6>
				clst = 2; obj.fs = fs;
 80089d6:	9302      	str	r3, [sp, #8]
 80089d8:	2402      	movs	r4, #2
			nfree = 0;
 80089da:	2700      	movs	r7, #0
 80089dc:	e004      	b.n	80089e8 <f_getfree+0x58>
				} while (++clst < fs->n_fatent);
 80089de:	3401      	adds	r4, #1
 80089e0:	9b07      	ldr	r3, [sp, #28]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	d935      	bls.n	8008a54 <f_getfree+0xc4>
					stat = get_fat(&obj, clst);
 80089e8:	4621      	mov	r1, r4
 80089ea:	a802      	add	r0, sp, #8
 80089ec:	f7ff fa01 	bl	8007df2 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80089f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089f4:	d02d      	beq.n	8008a52 <f_getfree+0xc2>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80089f6:	2801      	cmp	r0, #1
 80089f8:	d035      	beq.n	8008a66 <f_getfree+0xd6>
					if (stat == 0) nfree++;
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1ef      	bne.n	80089de <f_getfree+0x4e>
 80089fe:	3701      	adds	r7, #1
 8008a00:	e7ed      	b.n	80089de <f_getfree+0x4e>
							res = move_window(fs, sect++);
 8008a02:	f10a 0601 	add.w	r6, sl, #1
 8008a06:	4651      	mov	r1, sl
 8008a08:	9807      	ldr	r0, [sp, #28]
 8008a0a:	f7fe ff94 	bl	8007936 <move_window>
							if (res != FR_OK) break;
 8008a0e:	4681      	mov	r9, r0
 8008a10:	bb00      	cbnz	r0, 8008a54 <f_getfree+0xc4>
							p = fs->win;
 8008a12:	9c07      	ldr	r4, [sp, #28]
 8008a14:	3430      	adds	r4, #48	; 0x30
							res = move_window(fs, sect++);
 8008a16:	46b2      	mov	sl, r6
							i = SS(fs);
 8008a18:	f44f 7600 	mov.w	r6, #512	; 0x200
 8008a1c:	e00d      	b.n	8008a3a <f_getfree+0xaa>
							if (ld_word(p) == 0) nfree++;
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f7fe fd44 	bl	80074ac <ld_word>
 8008a24:	b900      	cbnz	r0, 8008a28 <f_getfree+0x98>
 8008a26:	3701      	adds	r7, #1
							p += 2; i -= 2;
 8008a28:	3402      	adds	r4, #2
 8008a2a:	3e02      	subs	r6, #2
 8008a2c:	e001      	b.n	8008a32 <f_getfree+0xa2>
							p += 4; i -= 4;
 8008a2e:	3404      	adds	r4, #4
 8008a30:	3e04      	subs	r6, #4
					} while (--clst);
 8008a32:	3d01      	subs	r5, #1
 8008a34:	d00e      	beq.n	8008a54 <f_getfree+0xc4>
						if (i == 0) {
 8008a36:	2e00      	cmp	r6, #0
 8008a38:	d0e3      	beq.n	8008a02 <f_getfree+0x72>
						if (fs->fs_type == FS_FAT16) {
 8008a3a:	9b07      	ldr	r3, [sp, #28]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d0ed      	beq.n	8008a1e <f_getfree+0x8e>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008a42:	4620      	mov	r0, r4
 8008a44:	f7fe fd37 	bl	80074b6 <ld_dword>
 8008a48:	f030 4370 	bics.w	r3, r0, #4026531840	; 0xf0000000
 8008a4c:	d1ef      	bne.n	8008a2e <f_getfree+0x9e>
 8008a4e:	3701      	adds	r7, #1
 8008a50:	e7ed      	b.n	8008a2e <f_getfree+0x9e>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008a52:	46b1      	mov	r9, r6
			*nclst = nfree;			/* Return the free clusters */
 8008a54:	f8c8 7000 	str.w	r7, [r8]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008a58:	9b07      	ldr	r3, [sp, #28]
 8008a5a:	611f      	str	r7, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008a5c:	791a      	ldrb	r2, [r3, #4]
 8008a5e:	f042 0201 	orr.w	r2, r2, #1
 8008a62:	711a      	strb	r2, [r3, #4]
 8008a64:	e7aa      	b.n	80089bc <f_getfree+0x2c>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008a66:	f04f 0902 	mov.w	r9, #2
 8008a6a:	e7f3      	b.n	8008a54 <f_getfree+0xc4>

08008a6c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008a6c:	b40e      	push	{r1, r2, r3}
 8008a6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a72:	b09d      	sub	sp, #116	; 0x74
 8008a74:	4601      	mov	r1, r0
 8008a76:	ac25      	add	r4, sp, #148	; 0x94
 8008a78:	f854 5b04 	ldr.w	r5, [r4], #4
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 8008a7c:	a808      	add	r0, sp, #32
 8008a7e:	f7fe ff09 	bl	8007894 <putc_init>

	va_start(arp, fmt);
 8008a82:	941b      	str	r4, [sp, #108]	; 0x6c
 8008a84:	e003      	b.n	8008a8e <f_printf+0x22>

	for (;;) {
		c = *fmt++;
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
 8008a86:	a808      	add	r0, sp, #32
 8008a88:	f7ff fedd 	bl	8008846 <putc_bfd>
		c = *fmt++;
 8008a8c:	4625      	mov	r5, r4
 8008a8e:	462c      	mov	r4, r5
 8008a90:	f814 1b01 	ldrb.w	r1, [r4], #1
		if (c == 0) break;			/* End of string */
 8008a94:	2900      	cmp	r1, #0
 8008a96:	f000 80fa 	beq.w	8008c8e <f_printf+0x222>
		if (c != '%') {				/* Non escape character */
 8008a9a:	2925      	cmp	r1, #37	; 0x25
 8008a9c:	d1f3      	bne.n	8008a86 <f_printf+0x1a>
			continue;
		}
		w = f = 0;
		c = *fmt++;
 8008a9e:	3502      	adds	r5, #2
 8008aa0:	7821      	ldrb	r1, [r4, #0]
		if (c == '0') {				/* Flag: '0' padding */
 8008aa2:	2930      	cmp	r1, #48	; 0x30
 8008aa4:	d004      	beq.n	8008ab0 <f_printf+0x44>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 8008aa6:	292d      	cmp	r1, #45	; 0x2d
 8008aa8:	d006      	beq.n	8008ab8 <f_printf+0x4c>
		w = f = 0;
 8008aaa:	2700      	movs	r7, #0
 8008aac:	2400      	movs	r4, #0
 8008aae:	e00e      	b.n	8008ace <f_printf+0x62>
			f = 1; c = *fmt++;
 8008ab0:	1ca5      	adds	r5, r4, #2
 8008ab2:	7861      	ldrb	r1, [r4, #1]
 8008ab4:	2701      	movs	r7, #1
 8008ab6:	e7f9      	b.n	8008aac <f_printf+0x40>
				f = 2; c = *fmt++;
 8008ab8:	1ca5      	adds	r5, r4, #2
 8008aba:	7861      	ldrb	r1, [r4, #1]
 8008abc:	2702      	movs	r7, #2
 8008abe:	e7f5      	b.n	8008aac <f_printf+0x40>
			}
		}
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
 8008ac0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008ac4:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 8008ac8:	3c30      	subs	r4, #48	; 0x30
			c = *fmt++;
 8008aca:	f815 1b01 	ldrb.w	r1, [r5], #1
		while (IsDigit(c)) {		/* Precision */
 8008ace:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b09      	cmp	r3, #9
 8008ad6:	d9f3      	bls.n	8008ac0 <f_printf+0x54>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8008ad8:	296c      	cmp	r1, #108	; 0x6c
 8008ada:	d001      	beq.n	8008ae0 <f_printf+0x74>
 8008adc:	294c      	cmp	r1, #76	; 0x4c
 8008ade:	d103      	bne.n	8008ae8 <f_printf+0x7c>
			f |= 4; c = *fmt++;
 8008ae0:	f047 0704 	orr.w	r7, r7, #4
 8008ae4:	f815 1b01 	ldrb.w	r1, [r5], #1
		}
		if (!c) break;
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	f000 80d0 	beq.w	8008c8e <f_printf+0x222>
		d = c;
		if (IsLower(d)) d -= 0x20;
 8008aee:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b19      	cmp	r3, #25
 8008af6:	d803      	bhi.n	8008b00 <f_printf+0x94>
 8008af8:	f1a1 0320 	sub.w	r3, r1, #32
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	e000      	b.n	8008b02 <f_printf+0x96>
		d = c;
 8008b00:	460b      	mov	r3, r1
		switch (d) {				/* Type is... */
 8008b02:	f1a3 0242 	sub.w	r2, r3, #66	; 0x42
 8008b06:	2a16      	cmp	r2, #22
 8008b08:	d853      	bhi.n	8008bb2 <f_printf+0x146>
 8008b0a:	e8df f002 	tbb	[pc, r2]
 8008b0e:	3b56      	.short	0x3b56
 8008b10:	52525243 	.word	0x52525243
 8008b14:	52525252 	.word	0x52525252
 8008b18:	58525252 	.word	0x58525252
 8008b1c:	0c525252 	.word	0x0c525252
 8008b20:	52524352 	.word	0x52524352
 8008b24:	50          	.byte	0x50
 8008b25:	00          	.byte	0x00
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8008b26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b28:	1d1a      	adds	r2, r3, #4
 8008b2a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b2c:	f8d3 8000 	ldr.w	r8, [r3]
			for (j = 0; p[j]; j++) ;
 8008b30:	2600      	movs	r6, #0
 8008b32:	e000      	b.n	8008b36 <f_printf+0xca>
 8008b34:	3601      	adds	r6, #1
 8008b36:	f818 3006 	ldrb.w	r3, [r8, r6]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1fa      	bne.n	8008b34 <f_printf+0xc8>
			if (!(f & 2)) {
 8008b3e:	f017 0f02 	tst.w	r7, #2
 8008b42:	d110      	bne.n	8008b66 <f_printf+0xfa>
 8008b44:	e005      	b.n	8008b52 <f_printf+0xe6>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008b46:	2120      	movs	r1, #32
 8008b48:	eb0d 0001 	add.w	r0, sp, r1
 8008b4c:	f7ff fe7b 	bl	8008846 <putc_bfd>
 8008b50:	463e      	mov	r6, r7
 8008b52:	1c77      	adds	r7, r6, #1
 8008b54:	42a6      	cmp	r6, r4
 8008b56:	d3f6      	bcc.n	8008b46 <f_printf+0xda>
 8008b58:	463e      	mov	r6, r7
 8008b5a:	e004      	b.n	8008b66 <f_printf+0xfa>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008b5c:	f108 0801 	add.w	r8, r8, #1
 8008b60:	a808      	add	r0, sp, #32
 8008b62:	f7ff fe70 	bl	8008846 <putc_bfd>
 8008b66:	f898 1000 	ldrb.w	r1, [r8]
 8008b6a:	2900      	cmp	r1, #0
 8008b6c:	d1f6      	bne.n	8008b5c <f_printf+0xf0>
 8008b6e:	e005      	b.n	8008b7c <f_printf+0x110>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008b70:	2120      	movs	r1, #32
 8008b72:	eb0d 0001 	add.w	r0, sp, r1
 8008b76:	f7ff fe66 	bl	8008846 <putc_bfd>
 8008b7a:	463e      	mov	r6, r7
 8008b7c:	1c77      	adds	r7, r6, #1
 8008b7e:	42a6      	cmp	r6, r4
 8008b80:	d3f6      	bcc.n	8008b70 <f_printf+0x104>
 8008b82:	e784      	b.n	8008a8e <f_printf+0x22>
			continue;

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008b84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b86:	1d1a      	adds	r2, r3, #4
 8008b88:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b8a:	7819      	ldrb	r1, [r3, #0]
 8008b8c:	a808      	add	r0, sp, #32
 8008b8e:	f7ff fe5a 	bl	8008846 <putc_bfd>
 8008b92:	e77c      	b.n	8008a8e <f_printf+0x22>
		case 'O' :					/* Octal */
			r = 8; break;

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8008b94:	200a      	movs	r0, #10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008b96:	f017 0f04 	tst.w	r7, #4
 8008b9a:	d012      	beq.n	8008bc2 <f_printf+0x156>
 8008b9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008b9e:	1d16      	adds	r6, r2, #4
 8008ba0:	961b      	str	r6, [sp, #108]	; 0x6c
 8008ba2:	6812      	ldr	r2, [r2, #0]
		if (d == 'D' && (v & 0x80000000)) {
 8008ba4:	2b44      	cmp	r3, #68	; 0x44
 8008ba6:	d018      	beq.n	8008bda <f_printf+0x16e>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
 8008ba8:	f04f 0c00 	mov.w	ip, #0
 8008bac:	e02b      	b.n	8008c06 <f_printf+0x19a>
			r = 16; break;
 8008bae:	2010      	movs	r0, #16
 8008bb0:	e7f1      	b.n	8008b96 <f_printf+0x12a>
			putc_bfd(&pb, c); continue;
 8008bb2:	a808      	add	r0, sp, #32
 8008bb4:	f7ff fe47 	bl	8008846 <putc_bfd>
 8008bb8:	e769      	b.n	8008a8e <f_printf+0x22>
			r = 10; break;
 8008bba:	2002      	movs	r0, #2
 8008bbc:	e7eb      	b.n	8008b96 <f_printf+0x12a>
			r = 8; break;
 8008bbe:	2008      	movs	r0, #8
 8008bc0:	e7e9      	b.n	8008b96 <f_printf+0x12a>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8008bc2:	2b44      	cmp	r3, #68	; 0x44
 8008bc4:	d004      	beq.n	8008bd0 <f_printf+0x164>
 8008bc6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008bc8:	1d16      	adds	r6, r2, #4
 8008bca:	961b      	str	r6, [sp, #108]	; 0x6c
 8008bcc:	6812      	ldr	r2, [r2, #0]
 8008bce:	e7e9      	b.n	8008ba4 <f_printf+0x138>
 8008bd0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008bd2:	1d16      	adds	r6, r2, #4
 8008bd4:	961b      	str	r6, [sp, #108]	; 0x6c
 8008bd6:	6812      	ldr	r2, [r2, #0]
 8008bd8:	e7e4      	b.n	8008ba4 <f_printf+0x138>
		if (d == 'D' && (v & 0x80000000)) {
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	dae4      	bge.n	8008ba8 <f_printf+0x13c>
			v = 0 - v;
 8008bde:	4252      	negs	r2, r2
			f |= 8;
 8008be0:	f047 0708 	orr.w	r7, r7, #8
 8008be4:	e7e0      	b.n	8008ba8 <f_printf+0x13c>
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008be6:	2627      	movs	r6, #39	; 0x27
 8008be8:	4433      	add	r3, r6
 8008bea:	b2db      	uxtb	r3, r3
			str[i++] = d + '0';
 8008bec:	f10c 0601 	add.w	r6, ip, #1
 8008bf0:	3330      	adds	r3, #48	; 0x30
 8008bf2:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 8008bf6:	44e1      	add	r9, ip
 8008bf8:	f809 3c70 	strb.w	r3, [r9, #-112]
		} while (v && i < sizeof str / sizeof str[0]);
 8008bfc:	45c6      	cmp	lr, r8
 8008bfe:	d810      	bhi.n	8008c22 <f_printf+0x1b6>
 8008c00:	2e1f      	cmp	r6, #31
 8008c02:	d80e      	bhi.n	8008c22 <f_printf+0x1b6>
			str[i++] = d + '0';
 8008c04:	46b4      	mov	ip, r6
			d = (TCHAR)(v % r); v /= r;
 8008c06:	4686      	mov	lr, r0
 8008c08:	fbb2 f6f0 	udiv	r6, r2, r0
 8008c0c:	fb00 2316 	mls	r3, r0, r6, r2
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	4690      	mov	r8, r2
 8008c14:	4632      	mov	r2, r6
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008c16:	2b09      	cmp	r3, #9
 8008c18:	d9e8      	bls.n	8008bec <f_printf+0x180>
 8008c1a:	2978      	cmp	r1, #120	; 0x78
 8008c1c:	d0e3      	beq.n	8008be6 <f_printf+0x17a>
 8008c1e:	2607      	movs	r6, #7
 8008c20:	e7e2      	b.n	8008be8 <f_printf+0x17c>
		if (f & 8) str[i++] = '-';
 8008c22:	f017 0f08 	tst.w	r7, #8
 8008c26:	d006      	beq.n	8008c36 <f_printf+0x1ca>
 8008c28:	ab1c      	add	r3, sp, #112	; 0x70
 8008c2a:	441e      	add	r6, r3
 8008c2c:	232d      	movs	r3, #45	; 0x2d
 8008c2e:	f806 3c70 	strb.w	r3, [r6, #-112]
 8008c32:	f10c 0602 	add.w	r6, ip, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8008c36:	f017 0f01 	tst.w	r7, #1
 8008c3a:	d003      	beq.n	8008c44 <f_printf+0x1d8>
 8008c3c:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8008c40:	46b0      	mov	r8, r6
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008c42:	e007      	b.n	8008c54 <f_printf+0x1e8>
		j = i; d = (f & 1) ? '0' : ' ';
 8008c44:	f04f 0a20 	mov.w	sl, #32
 8008c48:	e7fa      	b.n	8008c40 <f_printf+0x1d4>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8008c4a:	4651      	mov	r1, sl
 8008c4c:	a808      	add	r0, sp, #32
 8008c4e:	f7ff fdfa 	bl	8008846 <putc_bfd>
 8008c52:	46c8      	mov	r8, r9
 8008c54:	f017 0f02 	tst.w	r7, #2
 8008c58:	d104      	bne.n	8008c64 <f_printf+0x1f8>
 8008c5a:	f108 0901 	add.w	r9, r8, #1
 8008c5e:	45a0      	cmp	r8, r4
 8008c60:	d3f3      	bcc.n	8008c4a <f_printf+0x1de>
 8008c62:	46c8      	mov	r8, r9
		do {
			putc_bfd(&pb, str[--i]);
 8008c64:	3e01      	subs	r6, #1
 8008c66:	ab1c      	add	r3, sp, #112	; 0x70
 8008c68:	4433      	add	r3, r6
 8008c6a:	f813 1c70 	ldrb.w	r1, [r3, #-112]
 8008c6e:	a808      	add	r0, sp, #32
 8008c70:	f7ff fde9 	bl	8008846 <putc_bfd>
		} while (i);
 8008c74:	2e00      	cmp	r6, #0
 8008c76:	d1f5      	bne.n	8008c64 <f_printf+0x1f8>
		while (j++ < w) putc_bfd(&pb, d);
 8008c78:	f108 0601 	add.w	r6, r8, #1
 8008c7c:	45a0      	cmp	r8, r4
 8008c7e:	f4bf af06 	bcs.w	8008a8e <f_printf+0x22>
 8008c82:	4651      	mov	r1, sl
 8008c84:	a808      	add	r0, sp, #32
 8008c86:	f7ff fdde 	bl	8008846 <putc_bfd>
 8008c8a:	46b0      	mov	r8, r6
 8008c8c:	e7f4      	b.n	8008c78 <f_printf+0x20c>
	}

	va_end(arp);

	return putc_flush(&pb);
 8008c8e:	a808      	add	r0, sp, #32
 8008c90:	f7ff fe00 	bl	8008894 <putc_flush>
}
 8008c94:	b01d      	add	sp, #116	; 0x74
 8008c96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c9a:	b003      	add	sp, #12
 8008c9c:	4770      	bx	lr
	...

08008ca0 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008ca0:	4b10      	ldr	r3, [pc, #64]	; (8008ce4 <FATFS_LinkDriverEx+0x44>)
 8008ca2:	7a5b      	ldrb	r3, [r3, #9]
 8008ca4:	b9e3      	cbnz	r3, 8008ce0 <FATFS_LinkDriverEx+0x40>
{
 8008ca6:	b470      	push	{r4, r5, r6}
 8008ca8:	4604      	mov	r4, r0
 8008caa:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 8008cae:	4b0d      	ldr	r3, [pc, #52]	; (8008ce4 <FATFS_LinkDriverEx+0x44>)
 8008cb0:	7a5d      	ldrb	r5, [r3, #9]
 8008cb2:	b2ed      	uxtb	r5, r5
 8008cb4:	2600      	movs	r6, #0
 8008cb6:	555e      	strb	r6, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8008cb8:	7a5d      	ldrb	r5, [r3, #9]
 8008cba:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8008cbe:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8008cc0:	7a5c      	ldrb	r4, [r3, #9]
 8008cc2:	441c      	add	r4, r3
 8008cc4:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8008cc6:	7a5a      	ldrb	r2, [r3, #9]
 8008cc8:	1c54      	adds	r4, r2, #1
 8008cca:	b2e4      	uxtb	r4, r4
 8008ccc:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 8008cce:	3230      	adds	r2, #48	; 0x30
 8008cd0:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008cd2:	233a      	movs	r3, #58	; 0x3a
 8008cd4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8008cd6:	232f      	movs	r3, #47	; 0x2f
 8008cd8:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8008cda:	70ce      	strb	r6, [r1, #3]
    ret = 0;
  }

  return ret;
}
 8008cdc:	bc70      	pop	{r4, r5, r6}
 8008cde:	4770      	bx	lr
  uint8_t ret = 1;
 8008ce0:	2001      	movs	r0, #1
}
 8008ce2:	4770      	bx	lr
 8008ce4:	20000264 	.word	0x20000264

08008ce8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ce8:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8008cea:	2200      	movs	r2, #0
 8008cec:	f7ff ffd8 	bl	8008ca0 <FATFS_LinkDriverEx>
}
 8008cf0:	bd08      	pop	{r3, pc}
	...

08008cf4 <__errno>:
 8008cf4:	4b01      	ldr	r3, [pc, #4]	; (8008cfc <__errno+0x8>)
 8008cf6:	6818      	ldr	r0, [r3, #0]
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	20000040 	.word	0x20000040

08008d00 <__libc_init_array>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	4d0d      	ldr	r5, [pc, #52]	; (8008d38 <__libc_init_array+0x38>)
 8008d04:	4c0d      	ldr	r4, [pc, #52]	; (8008d3c <__libc_init_array+0x3c>)
 8008d06:	1b64      	subs	r4, r4, r5
 8008d08:	10a4      	asrs	r4, r4, #2
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	42a6      	cmp	r6, r4
 8008d0e:	d109      	bne.n	8008d24 <__libc_init_array+0x24>
 8008d10:	4d0b      	ldr	r5, [pc, #44]	; (8008d40 <__libc_init_array+0x40>)
 8008d12:	4c0c      	ldr	r4, [pc, #48]	; (8008d44 <__libc_init_array+0x44>)
 8008d14:	f003 fe7a 	bl	800ca0c <_init>
 8008d18:	1b64      	subs	r4, r4, r5
 8008d1a:	10a4      	asrs	r4, r4, #2
 8008d1c:	2600      	movs	r6, #0
 8008d1e:	42a6      	cmp	r6, r4
 8008d20:	d105      	bne.n	8008d2e <__libc_init_array+0x2e>
 8008d22:	bd70      	pop	{r4, r5, r6, pc}
 8008d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d28:	4798      	blx	r3
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	e7ee      	b.n	8008d0c <__libc_init_array+0xc>
 8008d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d32:	4798      	blx	r3
 8008d34:	3601      	adds	r6, #1
 8008d36:	e7f2      	b.n	8008d1e <__libc_init_array+0x1e>
 8008d38:	0800d168 	.word	0x0800d168
 8008d3c:	0800d168 	.word	0x0800d168
 8008d40:	0800d168 	.word	0x0800d168
 8008d44:	0800d16c 	.word	0x0800d16c

08008d48 <memcpy>:
 8008d48:	440a      	add	r2, r1
 8008d4a:	4291      	cmp	r1, r2
 8008d4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d50:	d100      	bne.n	8008d54 <memcpy+0xc>
 8008d52:	4770      	bx	lr
 8008d54:	b510      	push	{r4, lr}
 8008d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5e:	4291      	cmp	r1, r2
 8008d60:	d1f9      	bne.n	8008d56 <memcpy+0xe>
 8008d62:	bd10      	pop	{r4, pc}

08008d64 <memset>:
 8008d64:	4402      	add	r2, r0
 8008d66:	4603      	mov	r3, r0
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d100      	bne.n	8008d6e <memset+0xa>
 8008d6c:	4770      	bx	lr
 8008d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d72:	e7f9      	b.n	8008d68 <memset+0x4>

08008d74 <__cvt>:
 8008d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d78:	ec55 4b10 	vmov	r4, r5, d0
 8008d7c:	2d00      	cmp	r5, #0
 8008d7e:	460e      	mov	r6, r1
 8008d80:	4619      	mov	r1, r3
 8008d82:	462b      	mov	r3, r5
 8008d84:	bfbb      	ittet	lt
 8008d86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d8a:	461d      	movlt	r5, r3
 8008d8c:	2300      	movge	r3, #0
 8008d8e:	232d      	movlt	r3, #45	; 0x2d
 8008d90:	700b      	strb	r3, [r1, #0]
 8008d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d98:	4691      	mov	r9, r2
 8008d9a:	f023 0820 	bic.w	r8, r3, #32
 8008d9e:	bfbc      	itt	lt
 8008da0:	4622      	movlt	r2, r4
 8008da2:	4614      	movlt	r4, r2
 8008da4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008da8:	d005      	beq.n	8008db6 <__cvt+0x42>
 8008daa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008dae:	d100      	bne.n	8008db2 <__cvt+0x3e>
 8008db0:	3601      	adds	r6, #1
 8008db2:	2102      	movs	r1, #2
 8008db4:	e000      	b.n	8008db8 <__cvt+0x44>
 8008db6:	2103      	movs	r1, #3
 8008db8:	ab03      	add	r3, sp, #12
 8008dba:	9301      	str	r3, [sp, #4]
 8008dbc:	ab02      	add	r3, sp, #8
 8008dbe:	9300      	str	r3, [sp, #0]
 8008dc0:	ec45 4b10 	vmov	d0, r4, r5
 8008dc4:	4653      	mov	r3, sl
 8008dc6:	4632      	mov	r2, r6
 8008dc8:	f000 fcfa 	bl	80097c0 <_dtoa_r>
 8008dcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	d102      	bne.n	8008dda <__cvt+0x66>
 8008dd4:	f019 0f01 	tst.w	r9, #1
 8008dd8:	d022      	beq.n	8008e20 <__cvt+0xac>
 8008dda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008dde:	eb07 0906 	add.w	r9, r7, r6
 8008de2:	d110      	bne.n	8008e06 <__cvt+0x92>
 8008de4:	783b      	ldrb	r3, [r7, #0]
 8008de6:	2b30      	cmp	r3, #48	; 0x30
 8008de8:	d10a      	bne.n	8008e00 <__cvt+0x8c>
 8008dea:	2200      	movs	r2, #0
 8008dec:	2300      	movs	r3, #0
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	f7f7 fe71 	bl	8000ad8 <__aeabi_dcmpeq>
 8008df6:	b918      	cbnz	r0, 8008e00 <__cvt+0x8c>
 8008df8:	f1c6 0601 	rsb	r6, r6, #1
 8008dfc:	f8ca 6000 	str.w	r6, [sl]
 8008e00:	f8da 3000 	ldr.w	r3, [sl]
 8008e04:	4499      	add	r9, r3
 8008e06:	2200      	movs	r2, #0
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 fe63 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e12:	b108      	cbz	r0, 8008e18 <__cvt+0xa4>
 8008e14:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e18:	2230      	movs	r2, #48	; 0x30
 8008e1a:	9b03      	ldr	r3, [sp, #12]
 8008e1c:	454b      	cmp	r3, r9
 8008e1e:	d307      	bcc.n	8008e30 <__cvt+0xbc>
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e24:	1bdb      	subs	r3, r3, r7
 8008e26:	4638      	mov	r0, r7
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	b004      	add	sp, #16
 8008e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e30:	1c59      	adds	r1, r3, #1
 8008e32:	9103      	str	r1, [sp, #12]
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	e7f0      	b.n	8008e1a <__cvt+0xa6>

08008e38 <__exponent>:
 8008e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2900      	cmp	r1, #0
 8008e3e:	bfb8      	it	lt
 8008e40:	4249      	neglt	r1, r1
 8008e42:	f803 2b02 	strb.w	r2, [r3], #2
 8008e46:	bfb4      	ite	lt
 8008e48:	222d      	movlt	r2, #45	; 0x2d
 8008e4a:	222b      	movge	r2, #43	; 0x2b
 8008e4c:	2909      	cmp	r1, #9
 8008e4e:	7042      	strb	r2, [r0, #1]
 8008e50:	dd2a      	ble.n	8008ea8 <__exponent+0x70>
 8008e52:	f10d 0407 	add.w	r4, sp, #7
 8008e56:	46a4      	mov	ip, r4
 8008e58:	270a      	movs	r7, #10
 8008e5a:	46a6      	mov	lr, r4
 8008e5c:	460a      	mov	r2, r1
 8008e5e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e62:	fb07 1516 	mls	r5, r7, r6, r1
 8008e66:	3530      	adds	r5, #48	; 0x30
 8008e68:	2a63      	cmp	r2, #99	; 0x63
 8008e6a:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e6e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e72:	4631      	mov	r1, r6
 8008e74:	dcf1      	bgt.n	8008e5a <__exponent+0x22>
 8008e76:	3130      	adds	r1, #48	; 0x30
 8008e78:	f1ae 0502 	sub.w	r5, lr, #2
 8008e7c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e80:	1c44      	adds	r4, r0, #1
 8008e82:	4629      	mov	r1, r5
 8008e84:	4561      	cmp	r1, ip
 8008e86:	d30a      	bcc.n	8008e9e <__exponent+0x66>
 8008e88:	f10d 0209 	add.w	r2, sp, #9
 8008e8c:	eba2 020e 	sub.w	r2, r2, lr
 8008e90:	4565      	cmp	r5, ip
 8008e92:	bf88      	it	hi
 8008e94:	2200      	movhi	r2, #0
 8008e96:	4413      	add	r3, r2
 8008e98:	1a18      	subs	r0, r3, r0
 8008e9a:	b003      	add	sp, #12
 8008e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ea2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ea6:	e7ed      	b.n	8008e84 <__exponent+0x4c>
 8008ea8:	2330      	movs	r3, #48	; 0x30
 8008eaa:	3130      	adds	r1, #48	; 0x30
 8008eac:	7083      	strb	r3, [r0, #2]
 8008eae:	70c1      	strb	r1, [r0, #3]
 8008eb0:	1d03      	adds	r3, r0, #4
 8008eb2:	e7f1      	b.n	8008e98 <__exponent+0x60>

08008eb4 <_printf_float>:
 8008eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb8:	ed2d 8b02 	vpush	{d8}
 8008ebc:	b08d      	sub	sp, #52	; 0x34
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ec4:	4616      	mov	r6, r2
 8008ec6:	461f      	mov	r7, r3
 8008ec8:	4605      	mov	r5, r0
 8008eca:	f001 fa65 	bl	800a398 <_localeconv_r>
 8008ece:	f8d0 a000 	ldr.w	sl, [r0]
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	f7f7 f984 	bl	80001e0 <strlen>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	930a      	str	r3, [sp, #40]	; 0x28
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	9305      	str	r3, [sp, #20]
 8008ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ee4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008ee8:	3307      	adds	r3, #7
 8008eea:	f023 0307 	bic.w	r3, r3, #7
 8008eee:	f103 0208 	add.w	r2, r3, #8
 8008ef2:	f8c8 2000 	str.w	r2, [r8]
 8008ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008efe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f06:	9307      	str	r3, [sp, #28]
 8008f08:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f0c:	ee08 0a10 	vmov	s16, r0
 8008f10:	4b9f      	ldr	r3, [pc, #636]	; (8009190 <_printf_float+0x2dc>)
 8008f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f16:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1a:	f7f7 fe0f 	bl	8000b3c <__aeabi_dcmpun>
 8008f1e:	bb88      	cbnz	r0, 8008f84 <_printf_float+0xd0>
 8008f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f24:	4b9a      	ldr	r3, [pc, #616]	; (8009190 <_printf_float+0x2dc>)
 8008f26:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2a:	f7f7 fde9 	bl	8000b00 <__aeabi_dcmple>
 8008f2e:	bb48      	cbnz	r0, 8008f84 <_printf_float+0xd0>
 8008f30:	2200      	movs	r2, #0
 8008f32:	2300      	movs	r3, #0
 8008f34:	4640      	mov	r0, r8
 8008f36:	4649      	mov	r1, r9
 8008f38:	f7f7 fdd8 	bl	8000aec <__aeabi_dcmplt>
 8008f3c:	b110      	cbz	r0, 8008f44 <_printf_float+0x90>
 8008f3e:	232d      	movs	r3, #45	; 0x2d
 8008f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f44:	4b93      	ldr	r3, [pc, #588]	; (8009194 <_printf_float+0x2e0>)
 8008f46:	4894      	ldr	r0, [pc, #592]	; (8009198 <_printf_float+0x2e4>)
 8008f48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008f4c:	bf94      	ite	ls
 8008f4e:	4698      	movls	r8, r3
 8008f50:	4680      	movhi	r8, r0
 8008f52:	2303      	movs	r3, #3
 8008f54:	6123      	str	r3, [r4, #16]
 8008f56:	9b05      	ldr	r3, [sp, #20]
 8008f58:	f023 0204 	bic.w	r2, r3, #4
 8008f5c:	6022      	str	r2, [r4, #0]
 8008f5e:	f04f 0900 	mov.w	r9, #0
 8008f62:	9700      	str	r7, [sp, #0]
 8008f64:	4633      	mov	r3, r6
 8008f66:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 f9d8 	bl	8009320 <_printf_common>
 8008f70:	3001      	adds	r0, #1
 8008f72:	f040 8090 	bne.w	8009096 <_printf_float+0x1e2>
 8008f76:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7a:	b00d      	add	sp, #52	; 0x34
 8008f7c:	ecbd 8b02 	vpop	{d8}
 8008f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f84:	4642      	mov	r2, r8
 8008f86:	464b      	mov	r3, r9
 8008f88:	4640      	mov	r0, r8
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	f7f7 fdd6 	bl	8000b3c <__aeabi_dcmpun>
 8008f90:	b140      	cbz	r0, 8008fa4 <_printf_float+0xf0>
 8008f92:	464b      	mov	r3, r9
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bfbc      	itt	lt
 8008f98:	232d      	movlt	r3, #45	; 0x2d
 8008f9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f9e:	487f      	ldr	r0, [pc, #508]	; (800919c <_printf_float+0x2e8>)
 8008fa0:	4b7f      	ldr	r3, [pc, #508]	; (80091a0 <_printf_float+0x2ec>)
 8008fa2:	e7d1      	b.n	8008f48 <_printf_float+0x94>
 8008fa4:	6863      	ldr	r3, [r4, #4]
 8008fa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008faa:	9206      	str	r2, [sp, #24]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	d13f      	bne.n	8009030 <_printf_float+0x17c>
 8008fb0:	2306      	movs	r3, #6
 8008fb2:	6063      	str	r3, [r4, #4]
 8008fb4:	9b05      	ldr	r3, [sp, #20]
 8008fb6:	6861      	ldr	r1, [r4, #4]
 8008fb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	9303      	str	r3, [sp, #12]
 8008fc0:	ab0a      	add	r3, sp, #40	; 0x28
 8008fc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008fc6:	ab09      	add	r3, sp, #36	; 0x24
 8008fc8:	ec49 8b10 	vmov	d0, r8, r9
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	6022      	str	r2, [r4, #0]
 8008fd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f7ff fecd 	bl	8008d74 <__cvt>
 8008fda:	9b06      	ldr	r3, [sp, #24]
 8008fdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fde:	2b47      	cmp	r3, #71	; 0x47
 8008fe0:	4680      	mov	r8, r0
 8008fe2:	d108      	bne.n	8008ff6 <_printf_float+0x142>
 8008fe4:	1cc8      	adds	r0, r1, #3
 8008fe6:	db02      	blt.n	8008fee <_printf_float+0x13a>
 8008fe8:	6863      	ldr	r3, [r4, #4]
 8008fea:	4299      	cmp	r1, r3
 8008fec:	dd41      	ble.n	8009072 <_printf_float+0x1be>
 8008fee:	f1ab 0b02 	sub.w	fp, fp, #2
 8008ff2:	fa5f fb8b 	uxtb.w	fp, fp
 8008ff6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008ffa:	d820      	bhi.n	800903e <_printf_float+0x18a>
 8008ffc:	3901      	subs	r1, #1
 8008ffe:	465a      	mov	r2, fp
 8009000:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009004:	9109      	str	r1, [sp, #36]	; 0x24
 8009006:	f7ff ff17 	bl	8008e38 <__exponent>
 800900a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800900c:	1813      	adds	r3, r2, r0
 800900e:	2a01      	cmp	r2, #1
 8009010:	4681      	mov	r9, r0
 8009012:	6123      	str	r3, [r4, #16]
 8009014:	dc02      	bgt.n	800901c <_printf_float+0x168>
 8009016:	6822      	ldr	r2, [r4, #0]
 8009018:	07d2      	lsls	r2, r2, #31
 800901a:	d501      	bpl.n	8009020 <_printf_float+0x16c>
 800901c:	3301      	adds	r3, #1
 800901e:	6123      	str	r3, [r4, #16]
 8009020:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009024:	2b00      	cmp	r3, #0
 8009026:	d09c      	beq.n	8008f62 <_printf_float+0xae>
 8009028:	232d      	movs	r3, #45	; 0x2d
 800902a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800902e:	e798      	b.n	8008f62 <_printf_float+0xae>
 8009030:	9a06      	ldr	r2, [sp, #24]
 8009032:	2a47      	cmp	r2, #71	; 0x47
 8009034:	d1be      	bne.n	8008fb4 <_printf_float+0x100>
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1bc      	bne.n	8008fb4 <_printf_float+0x100>
 800903a:	2301      	movs	r3, #1
 800903c:	e7b9      	b.n	8008fb2 <_printf_float+0xfe>
 800903e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009042:	d118      	bne.n	8009076 <_printf_float+0x1c2>
 8009044:	2900      	cmp	r1, #0
 8009046:	6863      	ldr	r3, [r4, #4]
 8009048:	dd0b      	ble.n	8009062 <_printf_float+0x1ae>
 800904a:	6121      	str	r1, [r4, #16]
 800904c:	b913      	cbnz	r3, 8009054 <_printf_float+0x1a0>
 800904e:	6822      	ldr	r2, [r4, #0]
 8009050:	07d0      	lsls	r0, r2, #31
 8009052:	d502      	bpl.n	800905a <_printf_float+0x1a6>
 8009054:	3301      	adds	r3, #1
 8009056:	440b      	add	r3, r1
 8009058:	6123      	str	r3, [r4, #16]
 800905a:	65a1      	str	r1, [r4, #88]	; 0x58
 800905c:	f04f 0900 	mov.w	r9, #0
 8009060:	e7de      	b.n	8009020 <_printf_float+0x16c>
 8009062:	b913      	cbnz	r3, 800906a <_printf_float+0x1b6>
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	07d2      	lsls	r2, r2, #31
 8009068:	d501      	bpl.n	800906e <_printf_float+0x1ba>
 800906a:	3302      	adds	r3, #2
 800906c:	e7f4      	b.n	8009058 <_printf_float+0x1a4>
 800906e:	2301      	movs	r3, #1
 8009070:	e7f2      	b.n	8009058 <_printf_float+0x1a4>
 8009072:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009078:	4299      	cmp	r1, r3
 800907a:	db05      	blt.n	8009088 <_printf_float+0x1d4>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	6121      	str	r1, [r4, #16]
 8009080:	07d8      	lsls	r0, r3, #31
 8009082:	d5ea      	bpl.n	800905a <_printf_float+0x1a6>
 8009084:	1c4b      	adds	r3, r1, #1
 8009086:	e7e7      	b.n	8009058 <_printf_float+0x1a4>
 8009088:	2900      	cmp	r1, #0
 800908a:	bfd4      	ite	le
 800908c:	f1c1 0202 	rsble	r2, r1, #2
 8009090:	2201      	movgt	r2, #1
 8009092:	4413      	add	r3, r2
 8009094:	e7e0      	b.n	8009058 <_printf_float+0x1a4>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	055a      	lsls	r2, r3, #21
 800909a:	d407      	bmi.n	80090ac <_printf_float+0x1f8>
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	4642      	mov	r2, r8
 80090a0:	4631      	mov	r1, r6
 80090a2:	4628      	mov	r0, r5
 80090a4:	47b8      	blx	r7
 80090a6:	3001      	adds	r0, #1
 80090a8:	d12c      	bne.n	8009104 <_printf_float+0x250>
 80090aa:	e764      	b.n	8008f76 <_printf_float+0xc2>
 80090ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090b0:	f240 80e0 	bls.w	8009274 <_printf_float+0x3c0>
 80090b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090b8:	2200      	movs	r2, #0
 80090ba:	2300      	movs	r3, #0
 80090bc:	f7f7 fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d034      	beq.n	800912e <_printf_float+0x27a>
 80090c4:	4a37      	ldr	r2, [pc, #220]	; (80091a4 <_printf_float+0x2f0>)
 80090c6:	2301      	movs	r3, #1
 80090c8:	4631      	mov	r1, r6
 80090ca:	4628      	mov	r0, r5
 80090cc:	47b8      	blx	r7
 80090ce:	3001      	adds	r0, #1
 80090d0:	f43f af51 	beq.w	8008f76 <_printf_float+0xc2>
 80090d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090d8:	429a      	cmp	r2, r3
 80090da:	db02      	blt.n	80090e2 <_printf_float+0x22e>
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	07d8      	lsls	r0, r3, #31
 80090e0:	d510      	bpl.n	8009104 <_printf_float+0x250>
 80090e2:	ee18 3a10 	vmov	r3, s16
 80090e6:	4652      	mov	r2, sl
 80090e8:	4631      	mov	r1, r6
 80090ea:	4628      	mov	r0, r5
 80090ec:	47b8      	blx	r7
 80090ee:	3001      	adds	r0, #1
 80090f0:	f43f af41 	beq.w	8008f76 <_printf_float+0xc2>
 80090f4:	f04f 0800 	mov.w	r8, #0
 80090f8:	f104 091a 	add.w	r9, r4, #26
 80090fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090fe:	3b01      	subs	r3, #1
 8009100:	4543      	cmp	r3, r8
 8009102:	dc09      	bgt.n	8009118 <_printf_float+0x264>
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	079b      	lsls	r3, r3, #30
 8009108:	f100 8105 	bmi.w	8009316 <_printf_float+0x462>
 800910c:	68e0      	ldr	r0, [r4, #12]
 800910e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009110:	4298      	cmp	r0, r3
 8009112:	bfb8      	it	lt
 8009114:	4618      	movlt	r0, r3
 8009116:	e730      	b.n	8008f7a <_printf_float+0xc6>
 8009118:	2301      	movs	r3, #1
 800911a:	464a      	mov	r2, r9
 800911c:	4631      	mov	r1, r6
 800911e:	4628      	mov	r0, r5
 8009120:	47b8      	blx	r7
 8009122:	3001      	adds	r0, #1
 8009124:	f43f af27 	beq.w	8008f76 <_printf_float+0xc2>
 8009128:	f108 0801 	add.w	r8, r8, #1
 800912c:	e7e6      	b.n	80090fc <_printf_float+0x248>
 800912e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc39      	bgt.n	80091a8 <_printf_float+0x2f4>
 8009134:	4a1b      	ldr	r2, [pc, #108]	; (80091a4 <_printf_float+0x2f0>)
 8009136:	2301      	movs	r3, #1
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	47b8      	blx	r7
 800913e:	3001      	adds	r0, #1
 8009140:	f43f af19 	beq.w	8008f76 <_printf_float+0xc2>
 8009144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009148:	4313      	orrs	r3, r2
 800914a:	d102      	bne.n	8009152 <_printf_float+0x29e>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	07d9      	lsls	r1, r3, #31
 8009150:	d5d8      	bpl.n	8009104 <_printf_float+0x250>
 8009152:	ee18 3a10 	vmov	r3, s16
 8009156:	4652      	mov	r2, sl
 8009158:	4631      	mov	r1, r6
 800915a:	4628      	mov	r0, r5
 800915c:	47b8      	blx	r7
 800915e:	3001      	adds	r0, #1
 8009160:	f43f af09 	beq.w	8008f76 <_printf_float+0xc2>
 8009164:	f04f 0900 	mov.w	r9, #0
 8009168:	f104 0a1a 	add.w	sl, r4, #26
 800916c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916e:	425b      	negs	r3, r3
 8009170:	454b      	cmp	r3, r9
 8009172:	dc01      	bgt.n	8009178 <_printf_float+0x2c4>
 8009174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009176:	e792      	b.n	800909e <_printf_float+0x1ea>
 8009178:	2301      	movs	r3, #1
 800917a:	4652      	mov	r2, sl
 800917c:	4631      	mov	r1, r6
 800917e:	4628      	mov	r0, r5
 8009180:	47b8      	blx	r7
 8009182:	3001      	adds	r0, #1
 8009184:	f43f aef7 	beq.w	8008f76 <_printf_float+0xc2>
 8009188:	f109 0901 	add.w	r9, r9, #1
 800918c:	e7ee      	b.n	800916c <_printf_float+0x2b8>
 800918e:	bf00      	nop
 8009190:	7fefffff 	.word	0x7fefffff
 8009194:	0800cd3c 	.word	0x0800cd3c
 8009198:	0800cd40 	.word	0x0800cd40
 800919c:	0800cd48 	.word	0x0800cd48
 80091a0:	0800cd44 	.word	0x0800cd44
 80091a4:	0800cd4c 	.word	0x0800cd4c
 80091a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091ac:	429a      	cmp	r2, r3
 80091ae:	bfa8      	it	ge
 80091b0:	461a      	movge	r2, r3
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	4691      	mov	r9, r2
 80091b6:	dc37      	bgt.n	8009228 <_printf_float+0x374>
 80091b8:	f04f 0b00 	mov.w	fp, #0
 80091bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091c0:	f104 021a 	add.w	r2, r4, #26
 80091c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091c6:	9305      	str	r3, [sp, #20]
 80091c8:	eba3 0309 	sub.w	r3, r3, r9
 80091cc:	455b      	cmp	r3, fp
 80091ce:	dc33      	bgt.n	8009238 <_printf_float+0x384>
 80091d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091d4:	429a      	cmp	r2, r3
 80091d6:	db3b      	blt.n	8009250 <_printf_float+0x39c>
 80091d8:	6823      	ldr	r3, [r4, #0]
 80091da:	07da      	lsls	r2, r3, #31
 80091dc:	d438      	bmi.n	8009250 <_printf_float+0x39c>
 80091de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	eba2 0901 	sub.w	r9, r2, r1
 80091ea:	4599      	cmp	r9, r3
 80091ec:	bfa8      	it	ge
 80091ee:	4699      	movge	r9, r3
 80091f0:	f1b9 0f00 	cmp.w	r9, #0
 80091f4:	dc35      	bgt.n	8009262 <_printf_float+0x3ae>
 80091f6:	f04f 0800 	mov.w	r8, #0
 80091fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091fe:	f104 0a1a 	add.w	sl, r4, #26
 8009202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009206:	1a9b      	subs	r3, r3, r2
 8009208:	eba3 0309 	sub.w	r3, r3, r9
 800920c:	4543      	cmp	r3, r8
 800920e:	f77f af79 	ble.w	8009104 <_printf_float+0x250>
 8009212:	2301      	movs	r3, #1
 8009214:	4652      	mov	r2, sl
 8009216:	4631      	mov	r1, r6
 8009218:	4628      	mov	r0, r5
 800921a:	47b8      	blx	r7
 800921c:	3001      	adds	r0, #1
 800921e:	f43f aeaa 	beq.w	8008f76 <_printf_float+0xc2>
 8009222:	f108 0801 	add.w	r8, r8, #1
 8009226:	e7ec      	b.n	8009202 <_printf_float+0x34e>
 8009228:	4613      	mov	r3, r2
 800922a:	4631      	mov	r1, r6
 800922c:	4642      	mov	r2, r8
 800922e:	4628      	mov	r0, r5
 8009230:	47b8      	blx	r7
 8009232:	3001      	adds	r0, #1
 8009234:	d1c0      	bne.n	80091b8 <_printf_float+0x304>
 8009236:	e69e      	b.n	8008f76 <_printf_float+0xc2>
 8009238:	2301      	movs	r3, #1
 800923a:	4631      	mov	r1, r6
 800923c:	4628      	mov	r0, r5
 800923e:	9205      	str	r2, [sp, #20]
 8009240:	47b8      	blx	r7
 8009242:	3001      	adds	r0, #1
 8009244:	f43f ae97 	beq.w	8008f76 <_printf_float+0xc2>
 8009248:	9a05      	ldr	r2, [sp, #20]
 800924a:	f10b 0b01 	add.w	fp, fp, #1
 800924e:	e7b9      	b.n	80091c4 <_printf_float+0x310>
 8009250:	ee18 3a10 	vmov	r3, s16
 8009254:	4652      	mov	r2, sl
 8009256:	4631      	mov	r1, r6
 8009258:	4628      	mov	r0, r5
 800925a:	47b8      	blx	r7
 800925c:	3001      	adds	r0, #1
 800925e:	d1be      	bne.n	80091de <_printf_float+0x32a>
 8009260:	e689      	b.n	8008f76 <_printf_float+0xc2>
 8009262:	9a05      	ldr	r2, [sp, #20]
 8009264:	464b      	mov	r3, r9
 8009266:	4442      	add	r2, r8
 8009268:	4631      	mov	r1, r6
 800926a:	4628      	mov	r0, r5
 800926c:	47b8      	blx	r7
 800926e:	3001      	adds	r0, #1
 8009270:	d1c1      	bne.n	80091f6 <_printf_float+0x342>
 8009272:	e680      	b.n	8008f76 <_printf_float+0xc2>
 8009274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009276:	2a01      	cmp	r2, #1
 8009278:	dc01      	bgt.n	800927e <_printf_float+0x3ca>
 800927a:	07db      	lsls	r3, r3, #31
 800927c:	d538      	bpl.n	80092f0 <_printf_float+0x43c>
 800927e:	2301      	movs	r3, #1
 8009280:	4642      	mov	r2, r8
 8009282:	4631      	mov	r1, r6
 8009284:	4628      	mov	r0, r5
 8009286:	47b8      	blx	r7
 8009288:	3001      	adds	r0, #1
 800928a:	f43f ae74 	beq.w	8008f76 <_printf_float+0xc2>
 800928e:	ee18 3a10 	vmov	r3, s16
 8009292:	4652      	mov	r2, sl
 8009294:	4631      	mov	r1, r6
 8009296:	4628      	mov	r0, r5
 8009298:	47b8      	blx	r7
 800929a:	3001      	adds	r0, #1
 800929c:	f43f ae6b 	beq.w	8008f76 <_printf_float+0xc2>
 80092a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092a4:	2200      	movs	r2, #0
 80092a6:	2300      	movs	r3, #0
 80092a8:	f7f7 fc16 	bl	8000ad8 <__aeabi_dcmpeq>
 80092ac:	b9d8      	cbnz	r0, 80092e6 <_printf_float+0x432>
 80092ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092b0:	f108 0201 	add.w	r2, r8, #1
 80092b4:	3b01      	subs	r3, #1
 80092b6:	4631      	mov	r1, r6
 80092b8:	4628      	mov	r0, r5
 80092ba:	47b8      	blx	r7
 80092bc:	3001      	adds	r0, #1
 80092be:	d10e      	bne.n	80092de <_printf_float+0x42a>
 80092c0:	e659      	b.n	8008f76 <_printf_float+0xc2>
 80092c2:	2301      	movs	r3, #1
 80092c4:	4652      	mov	r2, sl
 80092c6:	4631      	mov	r1, r6
 80092c8:	4628      	mov	r0, r5
 80092ca:	47b8      	blx	r7
 80092cc:	3001      	adds	r0, #1
 80092ce:	f43f ae52 	beq.w	8008f76 <_printf_float+0xc2>
 80092d2:	f108 0801 	add.w	r8, r8, #1
 80092d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092d8:	3b01      	subs	r3, #1
 80092da:	4543      	cmp	r3, r8
 80092dc:	dcf1      	bgt.n	80092c2 <_printf_float+0x40e>
 80092de:	464b      	mov	r3, r9
 80092e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80092e4:	e6dc      	b.n	80090a0 <_printf_float+0x1ec>
 80092e6:	f04f 0800 	mov.w	r8, #0
 80092ea:	f104 0a1a 	add.w	sl, r4, #26
 80092ee:	e7f2      	b.n	80092d6 <_printf_float+0x422>
 80092f0:	2301      	movs	r3, #1
 80092f2:	4642      	mov	r2, r8
 80092f4:	e7df      	b.n	80092b6 <_printf_float+0x402>
 80092f6:	2301      	movs	r3, #1
 80092f8:	464a      	mov	r2, r9
 80092fa:	4631      	mov	r1, r6
 80092fc:	4628      	mov	r0, r5
 80092fe:	47b8      	blx	r7
 8009300:	3001      	adds	r0, #1
 8009302:	f43f ae38 	beq.w	8008f76 <_printf_float+0xc2>
 8009306:	f108 0801 	add.w	r8, r8, #1
 800930a:	68e3      	ldr	r3, [r4, #12]
 800930c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800930e:	1a5b      	subs	r3, r3, r1
 8009310:	4543      	cmp	r3, r8
 8009312:	dcf0      	bgt.n	80092f6 <_printf_float+0x442>
 8009314:	e6fa      	b.n	800910c <_printf_float+0x258>
 8009316:	f04f 0800 	mov.w	r8, #0
 800931a:	f104 0919 	add.w	r9, r4, #25
 800931e:	e7f4      	b.n	800930a <_printf_float+0x456>

08009320 <_printf_common>:
 8009320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009324:	4616      	mov	r6, r2
 8009326:	4699      	mov	r9, r3
 8009328:	688a      	ldr	r2, [r1, #8]
 800932a:	690b      	ldr	r3, [r1, #16]
 800932c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009330:	4293      	cmp	r3, r2
 8009332:	bfb8      	it	lt
 8009334:	4613      	movlt	r3, r2
 8009336:	6033      	str	r3, [r6, #0]
 8009338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800933c:	4607      	mov	r7, r0
 800933e:	460c      	mov	r4, r1
 8009340:	b10a      	cbz	r2, 8009346 <_printf_common+0x26>
 8009342:	3301      	adds	r3, #1
 8009344:	6033      	str	r3, [r6, #0]
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	0699      	lsls	r1, r3, #26
 800934a:	bf42      	ittt	mi
 800934c:	6833      	ldrmi	r3, [r6, #0]
 800934e:	3302      	addmi	r3, #2
 8009350:	6033      	strmi	r3, [r6, #0]
 8009352:	6825      	ldr	r5, [r4, #0]
 8009354:	f015 0506 	ands.w	r5, r5, #6
 8009358:	d106      	bne.n	8009368 <_printf_common+0x48>
 800935a:	f104 0a19 	add.w	sl, r4, #25
 800935e:	68e3      	ldr	r3, [r4, #12]
 8009360:	6832      	ldr	r2, [r6, #0]
 8009362:	1a9b      	subs	r3, r3, r2
 8009364:	42ab      	cmp	r3, r5
 8009366:	dc26      	bgt.n	80093b6 <_printf_common+0x96>
 8009368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800936c:	1e13      	subs	r3, r2, #0
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	bf18      	it	ne
 8009372:	2301      	movne	r3, #1
 8009374:	0692      	lsls	r2, r2, #26
 8009376:	d42b      	bmi.n	80093d0 <_printf_common+0xb0>
 8009378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800937c:	4649      	mov	r1, r9
 800937e:	4638      	mov	r0, r7
 8009380:	47c0      	blx	r8
 8009382:	3001      	adds	r0, #1
 8009384:	d01e      	beq.n	80093c4 <_printf_common+0xa4>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	68e5      	ldr	r5, [r4, #12]
 800938a:	6832      	ldr	r2, [r6, #0]
 800938c:	f003 0306 	and.w	r3, r3, #6
 8009390:	2b04      	cmp	r3, #4
 8009392:	bf08      	it	eq
 8009394:	1aad      	subeq	r5, r5, r2
 8009396:	68a3      	ldr	r3, [r4, #8]
 8009398:	6922      	ldr	r2, [r4, #16]
 800939a:	bf0c      	ite	eq
 800939c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093a0:	2500      	movne	r5, #0
 80093a2:	4293      	cmp	r3, r2
 80093a4:	bfc4      	itt	gt
 80093a6:	1a9b      	subgt	r3, r3, r2
 80093a8:	18ed      	addgt	r5, r5, r3
 80093aa:	2600      	movs	r6, #0
 80093ac:	341a      	adds	r4, #26
 80093ae:	42b5      	cmp	r5, r6
 80093b0:	d11a      	bne.n	80093e8 <_printf_common+0xc8>
 80093b2:	2000      	movs	r0, #0
 80093b4:	e008      	b.n	80093c8 <_printf_common+0xa8>
 80093b6:	2301      	movs	r3, #1
 80093b8:	4652      	mov	r2, sl
 80093ba:	4649      	mov	r1, r9
 80093bc:	4638      	mov	r0, r7
 80093be:	47c0      	blx	r8
 80093c0:	3001      	adds	r0, #1
 80093c2:	d103      	bne.n	80093cc <_printf_common+0xac>
 80093c4:	f04f 30ff 	mov.w	r0, #4294967295
 80093c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093cc:	3501      	adds	r5, #1
 80093ce:	e7c6      	b.n	800935e <_printf_common+0x3e>
 80093d0:	18e1      	adds	r1, r4, r3
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	2030      	movs	r0, #48	; 0x30
 80093d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093da:	4422      	add	r2, r4
 80093dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093e4:	3302      	adds	r3, #2
 80093e6:	e7c7      	b.n	8009378 <_printf_common+0x58>
 80093e8:	2301      	movs	r3, #1
 80093ea:	4622      	mov	r2, r4
 80093ec:	4649      	mov	r1, r9
 80093ee:	4638      	mov	r0, r7
 80093f0:	47c0      	blx	r8
 80093f2:	3001      	adds	r0, #1
 80093f4:	d0e6      	beq.n	80093c4 <_printf_common+0xa4>
 80093f6:	3601      	adds	r6, #1
 80093f8:	e7d9      	b.n	80093ae <_printf_common+0x8e>
	...

080093fc <_printf_i>:
 80093fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009400:	460c      	mov	r4, r1
 8009402:	4691      	mov	r9, r2
 8009404:	7e27      	ldrb	r7, [r4, #24]
 8009406:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009408:	2f78      	cmp	r7, #120	; 0x78
 800940a:	4680      	mov	r8, r0
 800940c:	469a      	mov	sl, r3
 800940e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009412:	d807      	bhi.n	8009424 <_printf_i+0x28>
 8009414:	2f62      	cmp	r7, #98	; 0x62
 8009416:	d80a      	bhi.n	800942e <_printf_i+0x32>
 8009418:	2f00      	cmp	r7, #0
 800941a:	f000 80d8 	beq.w	80095ce <_printf_i+0x1d2>
 800941e:	2f58      	cmp	r7, #88	; 0x58
 8009420:	f000 80a3 	beq.w	800956a <_printf_i+0x16e>
 8009424:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800942c:	e03a      	b.n	80094a4 <_printf_i+0xa8>
 800942e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009432:	2b15      	cmp	r3, #21
 8009434:	d8f6      	bhi.n	8009424 <_printf_i+0x28>
 8009436:	a001      	add	r0, pc, #4	; (adr r0, 800943c <_printf_i+0x40>)
 8009438:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800943c:	08009495 	.word	0x08009495
 8009440:	080094a9 	.word	0x080094a9
 8009444:	08009425 	.word	0x08009425
 8009448:	08009425 	.word	0x08009425
 800944c:	08009425 	.word	0x08009425
 8009450:	08009425 	.word	0x08009425
 8009454:	080094a9 	.word	0x080094a9
 8009458:	08009425 	.word	0x08009425
 800945c:	08009425 	.word	0x08009425
 8009460:	08009425 	.word	0x08009425
 8009464:	08009425 	.word	0x08009425
 8009468:	080095b5 	.word	0x080095b5
 800946c:	080094d9 	.word	0x080094d9
 8009470:	08009597 	.word	0x08009597
 8009474:	08009425 	.word	0x08009425
 8009478:	08009425 	.word	0x08009425
 800947c:	080095d7 	.word	0x080095d7
 8009480:	08009425 	.word	0x08009425
 8009484:	080094d9 	.word	0x080094d9
 8009488:	08009425 	.word	0x08009425
 800948c:	08009425 	.word	0x08009425
 8009490:	0800959f 	.word	0x0800959f
 8009494:	680b      	ldr	r3, [r1, #0]
 8009496:	1d1a      	adds	r2, r3, #4
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	600a      	str	r2, [r1, #0]
 800949c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094a4:	2301      	movs	r3, #1
 80094a6:	e0a3      	b.n	80095f0 <_printf_i+0x1f4>
 80094a8:	6825      	ldr	r5, [r4, #0]
 80094aa:	6808      	ldr	r0, [r1, #0]
 80094ac:	062e      	lsls	r6, r5, #24
 80094ae:	f100 0304 	add.w	r3, r0, #4
 80094b2:	d50a      	bpl.n	80094ca <_printf_i+0xce>
 80094b4:	6805      	ldr	r5, [r0, #0]
 80094b6:	600b      	str	r3, [r1, #0]
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	da03      	bge.n	80094c4 <_printf_i+0xc8>
 80094bc:	232d      	movs	r3, #45	; 0x2d
 80094be:	426d      	negs	r5, r5
 80094c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094c4:	485e      	ldr	r0, [pc, #376]	; (8009640 <_printf_i+0x244>)
 80094c6:	230a      	movs	r3, #10
 80094c8:	e019      	b.n	80094fe <_printf_i+0x102>
 80094ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094ce:	6805      	ldr	r5, [r0, #0]
 80094d0:	600b      	str	r3, [r1, #0]
 80094d2:	bf18      	it	ne
 80094d4:	b22d      	sxthne	r5, r5
 80094d6:	e7ef      	b.n	80094b8 <_printf_i+0xbc>
 80094d8:	680b      	ldr	r3, [r1, #0]
 80094da:	6825      	ldr	r5, [r4, #0]
 80094dc:	1d18      	adds	r0, r3, #4
 80094de:	6008      	str	r0, [r1, #0]
 80094e0:	0628      	lsls	r0, r5, #24
 80094e2:	d501      	bpl.n	80094e8 <_printf_i+0xec>
 80094e4:	681d      	ldr	r5, [r3, #0]
 80094e6:	e002      	b.n	80094ee <_printf_i+0xf2>
 80094e8:	0669      	lsls	r1, r5, #25
 80094ea:	d5fb      	bpl.n	80094e4 <_printf_i+0xe8>
 80094ec:	881d      	ldrh	r5, [r3, #0]
 80094ee:	4854      	ldr	r0, [pc, #336]	; (8009640 <_printf_i+0x244>)
 80094f0:	2f6f      	cmp	r7, #111	; 0x6f
 80094f2:	bf0c      	ite	eq
 80094f4:	2308      	moveq	r3, #8
 80094f6:	230a      	movne	r3, #10
 80094f8:	2100      	movs	r1, #0
 80094fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094fe:	6866      	ldr	r6, [r4, #4]
 8009500:	60a6      	str	r6, [r4, #8]
 8009502:	2e00      	cmp	r6, #0
 8009504:	bfa2      	ittt	ge
 8009506:	6821      	ldrge	r1, [r4, #0]
 8009508:	f021 0104 	bicge.w	r1, r1, #4
 800950c:	6021      	strge	r1, [r4, #0]
 800950e:	b90d      	cbnz	r5, 8009514 <_printf_i+0x118>
 8009510:	2e00      	cmp	r6, #0
 8009512:	d04d      	beq.n	80095b0 <_printf_i+0x1b4>
 8009514:	4616      	mov	r6, r2
 8009516:	fbb5 f1f3 	udiv	r1, r5, r3
 800951a:	fb03 5711 	mls	r7, r3, r1, r5
 800951e:	5dc7      	ldrb	r7, [r0, r7]
 8009520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009524:	462f      	mov	r7, r5
 8009526:	42bb      	cmp	r3, r7
 8009528:	460d      	mov	r5, r1
 800952a:	d9f4      	bls.n	8009516 <_printf_i+0x11a>
 800952c:	2b08      	cmp	r3, #8
 800952e:	d10b      	bne.n	8009548 <_printf_i+0x14c>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	07df      	lsls	r7, r3, #31
 8009534:	d508      	bpl.n	8009548 <_printf_i+0x14c>
 8009536:	6923      	ldr	r3, [r4, #16]
 8009538:	6861      	ldr	r1, [r4, #4]
 800953a:	4299      	cmp	r1, r3
 800953c:	bfde      	ittt	le
 800953e:	2330      	movle	r3, #48	; 0x30
 8009540:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009544:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009548:	1b92      	subs	r2, r2, r6
 800954a:	6122      	str	r2, [r4, #16]
 800954c:	f8cd a000 	str.w	sl, [sp]
 8009550:	464b      	mov	r3, r9
 8009552:	aa03      	add	r2, sp, #12
 8009554:	4621      	mov	r1, r4
 8009556:	4640      	mov	r0, r8
 8009558:	f7ff fee2 	bl	8009320 <_printf_common>
 800955c:	3001      	adds	r0, #1
 800955e:	d14c      	bne.n	80095fa <_printf_i+0x1fe>
 8009560:	f04f 30ff 	mov.w	r0, #4294967295
 8009564:	b004      	add	sp, #16
 8009566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956a:	4835      	ldr	r0, [pc, #212]	; (8009640 <_printf_i+0x244>)
 800956c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	680e      	ldr	r6, [r1, #0]
 8009574:	061f      	lsls	r7, r3, #24
 8009576:	f856 5b04 	ldr.w	r5, [r6], #4
 800957a:	600e      	str	r6, [r1, #0]
 800957c:	d514      	bpl.n	80095a8 <_printf_i+0x1ac>
 800957e:	07d9      	lsls	r1, r3, #31
 8009580:	bf44      	itt	mi
 8009582:	f043 0320 	orrmi.w	r3, r3, #32
 8009586:	6023      	strmi	r3, [r4, #0]
 8009588:	b91d      	cbnz	r5, 8009592 <_printf_i+0x196>
 800958a:	6823      	ldr	r3, [r4, #0]
 800958c:	f023 0320 	bic.w	r3, r3, #32
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	2310      	movs	r3, #16
 8009594:	e7b0      	b.n	80094f8 <_printf_i+0xfc>
 8009596:	6823      	ldr	r3, [r4, #0]
 8009598:	f043 0320 	orr.w	r3, r3, #32
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	2378      	movs	r3, #120	; 0x78
 80095a0:	4828      	ldr	r0, [pc, #160]	; (8009644 <_printf_i+0x248>)
 80095a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095a6:	e7e3      	b.n	8009570 <_printf_i+0x174>
 80095a8:	065e      	lsls	r6, r3, #25
 80095aa:	bf48      	it	mi
 80095ac:	b2ad      	uxthmi	r5, r5
 80095ae:	e7e6      	b.n	800957e <_printf_i+0x182>
 80095b0:	4616      	mov	r6, r2
 80095b2:	e7bb      	b.n	800952c <_printf_i+0x130>
 80095b4:	680b      	ldr	r3, [r1, #0]
 80095b6:	6826      	ldr	r6, [r4, #0]
 80095b8:	6960      	ldr	r0, [r4, #20]
 80095ba:	1d1d      	adds	r5, r3, #4
 80095bc:	600d      	str	r5, [r1, #0]
 80095be:	0635      	lsls	r5, r6, #24
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	d501      	bpl.n	80095c8 <_printf_i+0x1cc>
 80095c4:	6018      	str	r0, [r3, #0]
 80095c6:	e002      	b.n	80095ce <_printf_i+0x1d2>
 80095c8:	0671      	lsls	r1, r6, #25
 80095ca:	d5fb      	bpl.n	80095c4 <_printf_i+0x1c8>
 80095cc:	8018      	strh	r0, [r3, #0]
 80095ce:	2300      	movs	r3, #0
 80095d0:	6123      	str	r3, [r4, #16]
 80095d2:	4616      	mov	r6, r2
 80095d4:	e7ba      	b.n	800954c <_printf_i+0x150>
 80095d6:	680b      	ldr	r3, [r1, #0]
 80095d8:	1d1a      	adds	r2, r3, #4
 80095da:	600a      	str	r2, [r1, #0]
 80095dc:	681e      	ldr	r6, [r3, #0]
 80095de:	6862      	ldr	r2, [r4, #4]
 80095e0:	2100      	movs	r1, #0
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7f6 fe04 	bl	80001f0 <memchr>
 80095e8:	b108      	cbz	r0, 80095ee <_printf_i+0x1f2>
 80095ea:	1b80      	subs	r0, r0, r6
 80095ec:	6060      	str	r0, [r4, #4]
 80095ee:	6863      	ldr	r3, [r4, #4]
 80095f0:	6123      	str	r3, [r4, #16]
 80095f2:	2300      	movs	r3, #0
 80095f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f8:	e7a8      	b.n	800954c <_printf_i+0x150>
 80095fa:	6923      	ldr	r3, [r4, #16]
 80095fc:	4632      	mov	r2, r6
 80095fe:	4649      	mov	r1, r9
 8009600:	4640      	mov	r0, r8
 8009602:	47d0      	blx	sl
 8009604:	3001      	adds	r0, #1
 8009606:	d0ab      	beq.n	8009560 <_printf_i+0x164>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	079b      	lsls	r3, r3, #30
 800960c:	d413      	bmi.n	8009636 <_printf_i+0x23a>
 800960e:	68e0      	ldr	r0, [r4, #12]
 8009610:	9b03      	ldr	r3, [sp, #12]
 8009612:	4298      	cmp	r0, r3
 8009614:	bfb8      	it	lt
 8009616:	4618      	movlt	r0, r3
 8009618:	e7a4      	b.n	8009564 <_printf_i+0x168>
 800961a:	2301      	movs	r3, #1
 800961c:	4632      	mov	r2, r6
 800961e:	4649      	mov	r1, r9
 8009620:	4640      	mov	r0, r8
 8009622:	47d0      	blx	sl
 8009624:	3001      	adds	r0, #1
 8009626:	d09b      	beq.n	8009560 <_printf_i+0x164>
 8009628:	3501      	adds	r5, #1
 800962a:	68e3      	ldr	r3, [r4, #12]
 800962c:	9903      	ldr	r1, [sp, #12]
 800962e:	1a5b      	subs	r3, r3, r1
 8009630:	42ab      	cmp	r3, r5
 8009632:	dcf2      	bgt.n	800961a <_printf_i+0x21e>
 8009634:	e7eb      	b.n	800960e <_printf_i+0x212>
 8009636:	2500      	movs	r5, #0
 8009638:	f104 0619 	add.w	r6, r4, #25
 800963c:	e7f5      	b.n	800962a <_printf_i+0x22e>
 800963e:	bf00      	nop
 8009640:	0800cd4e 	.word	0x0800cd4e
 8009644:	0800cd5f 	.word	0x0800cd5f

08009648 <siprintf>:
 8009648:	b40e      	push	{r1, r2, r3}
 800964a:	b500      	push	{lr}
 800964c:	b09c      	sub	sp, #112	; 0x70
 800964e:	ab1d      	add	r3, sp, #116	; 0x74
 8009650:	9002      	str	r0, [sp, #8]
 8009652:	9006      	str	r0, [sp, #24]
 8009654:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009658:	4809      	ldr	r0, [pc, #36]	; (8009680 <siprintf+0x38>)
 800965a:	9107      	str	r1, [sp, #28]
 800965c:	9104      	str	r1, [sp, #16]
 800965e:	4909      	ldr	r1, [pc, #36]	; (8009684 <siprintf+0x3c>)
 8009660:	f853 2b04 	ldr.w	r2, [r3], #4
 8009664:	9105      	str	r1, [sp, #20]
 8009666:	6800      	ldr	r0, [r0, #0]
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	a902      	add	r1, sp, #8
 800966c:	f001 fb34 	bl	800acd8 <_svfiprintf_r>
 8009670:	9b02      	ldr	r3, [sp, #8]
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
 8009676:	b01c      	add	sp, #112	; 0x70
 8009678:	f85d eb04 	ldr.w	lr, [sp], #4
 800967c:	b003      	add	sp, #12
 800967e:	4770      	bx	lr
 8009680:	20000040 	.word	0x20000040
 8009684:	ffff0208 	.word	0xffff0208

08009688 <strcat>:
 8009688:	b510      	push	{r4, lr}
 800968a:	4602      	mov	r2, r0
 800968c:	7814      	ldrb	r4, [r2, #0]
 800968e:	4613      	mov	r3, r2
 8009690:	3201      	adds	r2, #1
 8009692:	2c00      	cmp	r4, #0
 8009694:	d1fa      	bne.n	800968c <strcat+0x4>
 8009696:	3b01      	subs	r3, #1
 8009698:	f811 2b01 	ldrb.w	r2, [r1], #1
 800969c:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096a0:	2a00      	cmp	r2, #0
 80096a2:	d1f9      	bne.n	8009698 <strcat+0x10>
 80096a4:	bd10      	pop	{r4, pc}

080096a6 <quorem>:
 80096a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096aa:	6903      	ldr	r3, [r0, #16]
 80096ac:	690c      	ldr	r4, [r1, #16]
 80096ae:	42a3      	cmp	r3, r4
 80096b0:	4607      	mov	r7, r0
 80096b2:	f2c0 8081 	blt.w	80097b8 <quorem+0x112>
 80096b6:	3c01      	subs	r4, #1
 80096b8:	f101 0814 	add.w	r8, r1, #20
 80096bc:	f100 0514 	add.w	r5, r0, #20
 80096c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096ce:	3301      	adds	r3, #1
 80096d0:	429a      	cmp	r2, r3
 80096d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096da:	fbb2 f6f3 	udiv	r6, r2, r3
 80096de:	d331      	bcc.n	8009744 <quorem+0x9e>
 80096e0:	f04f 0e00 	mov.w	lr, #0
 80096e4:	4640      	mov	r0, r8
 80096e6:	46ac      	mov	ip, r5
 80096e8:	46f2      	mov	sl, lr
 80096ea:	f850 2b04 	ldr.w	r2, [r0], #4
 80096ee:	b293      	uxth	r3, r2
 80096f0:	fb06 e303 	mla	r3, r6, r3, lr
 80096f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	ebaa 0303 	sub.w	r3, sl, r3
 80096fe:	0c12      	lsrs	r2, r2, #16
 8009700:	f8dc a000 	ldr.w	sl, [ip]
 8009704:	fb06 e202 	mla	r2, r6, r2, lr
 8009708:	fa13 f38a 	uxtah	r3, r3, sl
 800970c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009710:	fa1f fa82 	uxth.w	sl, r2
 8009714:	f8dc 2000 	ldr.w	r2, [ip]
 8009718:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800971c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009720:	b29b      	uxth	r3, r3
 8009722:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009726:	4581      	cmp	r9, r0
 8009728:	f84c 3b04 	str.w	r3, [ip], #4
 800972c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009730:	d2db      	bcs.n	80096ea <quorem+0x44>
 8009732:	f855 300b 	ldr.w	r3, [r5, fp]
 8009736:	b92b      	cbnz	r3, 8009744 <quorem+0x9e>
 8009738:	9b01      	ldr	r3, [sp, #4]
 800973a:	3b04      	subs	r3, #4
 800973c:	429d      	cmp	r5, r3
 800973e:	461a      	mov	r2, r3
 8009740:	d32e      	bcc.n	80097a0 <quorem+0xfa>
 8009742:	613c      	str	r4, [r7, #16]
 8009744:	4638      	mov	r0, r7
 8009746:	f001 f8b1 	bl	800a8ac <__mcmp>
 800974a:	2800      	cmp	r0, #0
 800974c:	db24      	blt.n	8009798 <quorem+0xf2>
 800974e:	3601      	adds	r6, #1
 8009750:	4628      	mov	r0, r5
 8009752:	f04f 0c00 	mov.w	ip, #0
 8009756:	f858 2b04 	ldr.w	r2, [r8], #4
 800975a:	f8d0 e000 	ldr.w	lr, [r0]
 800975e:	b293      	uxth	r3, r2
 8009760:	ebac 0303 	sub.w	r3, ip, r3
 8009764:	0c12      	lsrs	r2, r2, #16
 8009766:	fa13 f38e 	uxtah	r3, r3, lr
 800976a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800976e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009772:	b29b      	uxth	r3, r3
 8009774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009778:	45c1      	cmp	r9, r8
 800977a:	f840 3b04 	str.w	r3, [r0], #4
 800977e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009782:	d2e8      	bcs.n	8009756 <quorem+0xb0>
 8009784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009788:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800978c:	b922      	cbnz	r2, 8009798 <quorem+0xf2>
 800978e:	3b04      	subs	r3, #4
 8009790:	429d      	cmp	r5, r3
 8009792:	461a      	mov	r2, r3
 8009794:	d30a      	bcc.n	80097ac <quorem+0x106>
 8009796:	613c      	str	r4, [r7, #16]
 8009798:	4630      	mov	r0, r6
 800979a:	b003      	add	sp, #12
 800979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a0:	6812      	ldr	r2, [r2, #0]
 80097a2:	3b04      	subs	r3, #4
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	d1cc      	bne.n	8009742 <quorem+0x9c>
 80097a8:	3c01      	subs	r4, #1
 80097aa:	e7c7      	b.n	800973c <quorem+0x96>
 80097ac:	6812      	ldr	r2, [r2, #0]
 80097ae:	3b04      	subs	r3, #4
 80097b0:	2a00      	cmp	r2, #0
 80097b2:	d1f0      	bne.n	8009796 <quorem+0xf0>
 80097b4:	3c01      	subs	r4, #1
 80097b6:	e7eb      	b.n	8009790 <quorem+0xea>
 80097b8:	2000      	movs	r0, #0
 80097ba:	e7ee      	b.n	800979a <quorem+0xf4>
 80097bc:	0000      	movs	r0, r0
	...

080097c0 <_dtoa_r>:
 80097c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c4:	ed2d 8b02 	vpush	{d8}
 80097c8:	ec57 6b10 	vmov	r6, r7, d0
 80097cc:	b095      	sub	sp, #84	; 0x54
 80097ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097d4:	9105      	str	r1, [sp, #20]
 80097d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80097da:	4604      	mov	r4, r0
 80097dc:	9209      	str	r2, [sp, #36]	; 0x24
 80097de:	930f      	str	r3, [sp, #60]	; 0x3c
 80097e0:	b975      	cbnz	r5, 8009800 <_dtoa_r+0x40>
 80097e2:	2010      	movs	r0, #16
 80097e4:	f000 fddc 	bl	800a3a0 <malloc>
 80097e8:	4602      	mov	r2, r0
 80097ea:	6260      	str	r0, [r4, #36]	; 0x24
 80097ec:	b920      	cbnz	r0, 80097f8 <_dtoa_r+0x38>
 80097ee:	4bb2      	ldr	r3, [pc, #712]	; (8009ab8 <_dtoa_r+0x2f8>)
 80097f0:	21ea      	movs	r1, #234	; 0xea
 80097f2:	48b2      	ldr	r0, [pc, #712]	; (8009abc <_dtoa_r+0x2fc>)
 80097f4:	f001 fb80 	bl	800aef8 <__assert_func>
 80097f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097fc:	6005      	str	r5, [r0, #0]
 80097fe:	60c5      	str	r5, [r0, #12]
 8009800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009802:	6819      	ldr	r1, [r3, #0]
 8009804:	b151      	cbz	r1, 800981c <_dtoa_r+0x5c>
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	604a      	str	r2, [r1, #4]
 800980a:	2301      	movs	r3, #1
 800980c:	4093      	lsls	r3, r2
 800980e:	608b      	str	r3, [r1, #8]
 8009810:	4620      	mov	r0, r4
 8009812:	f000 fe0d 	bl	800a430 <_Bfree>
 8009816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	1e3b      	subs	r3, r7, #0
 800981e:	bfb9      	ittee	lt
 8009820:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009824:	9303      	strlt	r3, [sp, #12]
 8009826:	2300      	movge	r3, #0
 8009828:	f8c8 3000 	strge.w	r3, [r8]
 800982c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009830:	4ba3      	ldr	r3, [pc, #652]	; (8009ac0 <_dtoa_r+0x300>)
 8009832:	bfbc      	itt	lt
 8009834:	2201      	movlt	r2, #1
 8009836:	f8c8 2000 	strlt.w	r2, [r8]
 800983a:	ea33 0309 	bics.w	r3, r3, r9
 800983e:	d11b      	bne.n	8009878 <_dtoa_r+0xb8>
 8009840:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009842:	f242 730f 	movw	r3, #9999	; 0x270f
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800984c:	4333      	orrs	r3, r6
 800984e:	f000 857a 	beq.w	800a346 <_dtoa_r+0xb86>
 8009852:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009854:	b963      	cbnz	r3, 8009870 <_dtoa_r+0xb0>
 8009856:	4b9b      	ldr	r3, [pc, #620]	; (8009ac4 <_dtoa_r+0x304>)
 8009858:	e024      	b.n	80098a4 <_dtoa_r+0xe4>
 800985a:	4b9b      	ldr	r3, [pc, #620]	; (8009ac8 <_dtoa_r+0x308>)
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	3308      	adds	r3, #8
 8009860:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	9800      	ldr	r0, [sp, #0]
 8009866:	b015      	add	sp, #84	; 0x54
 8009868:	ecbd 8b02 	vpop	{d8}
 800986c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009870:	4b94      	ldr	r3, [pc, #592]	; (8009ac4 <_dtoa_r+0x304>)
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	3303      	adds	r3, #3
 8009876:	e7f3      	b.n	8009860 <_dtoa_r+0xa0>
 8009878:	ed9d 7b02 	vldr	d7, [sp, #8]
 800987c:	2200      	movs	r2, #0
 800987e:	ec51 0b17 	vmov	r0, r1, d7
 8009882:	2300      	movs	r3, #0
 8009884:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009888:	f7f7 f926 	bl	8000ad8 <__aeabi_dcmpeq>
 800988c:	4680      	mov	r8, r0
 800988e:	b158      	cbz	r0, 80098a8 <_dtoa_r+0xe8>
 8009890:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009892:	2301      	movs	r3, #1
 8009894:	6013      	str	r3, [r2, #0]
 8009896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 8551 	beq.w	800a340 <_dtoa_r+0xb80>
 800989e:	488b      	ldr	r0, [pc, #556]	; (8009acc <_dtoa_r+0x30c>)
 80098a0:	6018      	str	r0, [r3, #0]
 80098a2:	1e43      	subs	r3, r0, #1
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	e7dd      	b.n	8009864 <_dtoa_r+0xa4>
 80098a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80098ac:	aa12      	add	r2, sp, #72	; 0x48
 80098ae:	a913      	add	r1, sp, #76	; 0x4c
 80098b0:	4620      	mov	r0, r4
 80098b2:	f001 f89f 	bl	800a9f4 <__d2b>
 80098b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098ba:	4683      	mov	fp, r0
 80098bc:	2d00      	cmp	r5, #0
 80098be:	d07c      	beq.n	80099ba <_dtoa_r+0x1fa>
 80098c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80098c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80098ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098da:	4b7d      	ldr	r3, [pc, #500]	; (8009ad0 <_dtoa_r+0x310>)
 80098dc:	2200      	movs	r2, #0
 80098de:	4630      	mov	r0, r6
 80098e0:	4639      	mov	r1, r7
 80098e2:	f7f6 fcd9 	bl	8000298 <__aeabi_dsub>
 80098e6:	a36e      	add	r3, pc, #440	; (adr r3, 8009aa0 <_dtoa_r+0x2e0>)
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f7f6 fe8c 	bl	8000608 <__aeabi_dmul>
 80098f0:	a36d      	add	r3, pc, #436	; (adr r3, 8009aa8 <_dtoa_r+0x2e8>)
 80098f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f6:	f7f6 fcd1 	bl	800029c <__adddf3>
 80098fa:	4606      	mov	r6, r0
 80098fc:	4628      	mov	r0, r5
 80098fe:	460f      	mov	r7, r1
 8009900:	f7f6 fe18 	bl	8000534 <__aeabi_i2d>
 8009904:	a36a      	add	r3, pc, #424	; (adr r3, 8009ab0 <_dtoa_r+0x2f0>)
 8009906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990a:	f7f6 fe7d 	bl	8000608 <__aeabi_dmul>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4630      	mov	r0, r6
 8009914:	4639      	mov	r1, r7
 8009916:	f7f6 fcc1 	bl	800029c <__adddf3>
 800991a:	4606      	mov	r6, r0
 800991c:	460f      	mov	r7, r1
 800991e:	f7f7 f923 	bl	8000b68 <__aeabi_d2iz>
 8009922:	2200      	movs	r2, #0
 8009924:	4682      	mov	sl, r0
 8009926:	2300      	movs	r3, #0
 8009928:	4630      	mov	r0, r6
 800992a:	4639      	mov	r1, r7
 800992c:	f7f7 f8de 	bl	8000aec <__aeabi_dcmplt>
 8009930:	b148      	cbz	r0, 8009946 <_dtoa_r+0x186>
 8009932:	4650      	mov	r0, sl
 8009934:	f7f6 fdfe 	bl	8000534 <__aeabi_i2d>
 8009938:	4632      	mov	r2, r6
 800993a:	463b      	mov	r3, r7
 800993c:	f7f7 f8cc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009940:	b908      	cbnz	r0, 8009946 <_dtoa_r+0x186>
 8009942:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009946:	f1ba 0f16 	cmp.w	sl, #22
 800994a:	d854      	bhi.n	80099f6 <_dtoa_r+0x236>
 800994c:	4b61      	ldr	r3, [pc, #388]	; (8009ad4 <_dtoa_r+0x314>)
 800994e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800995a:	f7f7 f8c7 	bl	8000aec <__aeabi_dcmplt>
 800995e:	2800      	cmp	r0, #0
 8009960:	d04b      	beq.n	80099fa <_dtoa_r+0x23a>
 8009962:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009966:	2300      	movs	r3, #0
 8009968:	930e      	str	r3, [sp, #56]	; 0x38
 800996a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800996c:	1b5d      	subs	r5, r3, r5
 800996e:	1e6b      	subs	r3, r5, #1
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	bf43      	ittte	mi
 8009974:	2300      	movmi	r3, #0
 8009976:	f1c5 0801 	rsbmi	r8, r5, #1
 800997a:	9304      	strmi	r3, [sp, #16]
 800997c:	f04f 0800 	movpl.w	r8, #0
 8009980:	f1ba 0f00 	cmp.w	sl, #0
 8009984:	db3b      	blt.n	80099fe <_dtoa_r+0x23e>
 8009986:	9b04      	ldr	r3, [sp, #16]
 8009988:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800998c:	4453      	add	r3, sl
 800998e:	9304      	str	r3, [sp, #16]
 8009990:	2300      	movs	r3, #0
 8009992:	9306      	str	r3, [sp, #24]
 8009994:	9b05      	ldr	r3, [sp, #20]
 8009996:	2b09      	cmp	r3, #9
 8009998:	d869      	bhi.n	8009a6e <_dtoa_r+0x2ae>
 800999a:	2b05      	cmp	r3, #5
 800999c:	bfc4      	itt	gt
 800999e:	3b04      	subgt	r3, #4
 80099a0:	9305      	strgt	r3, [sp, #20]
 80099a2:	9b05      	ldr	r3, [sp, #20]
 80099a4:	f1a3 0302 	sub.w	r3, r3, #2
 80099a8:	bfcc      	ite	gt
 80099aa:	2500      	movgt	r5, #0
 80099ac:	2501      	movle	r5, #1
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d869      	bhi.n	8009a86 <_dtoa_r+0x2c6>
 80099b2:	e8df f003 	tbb	[pc, r3]
 80099b6:	4e2c      	.short	0x4e2c
 80099b8:	5a4c      	.short	0x5a4c
 80099ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80099be:	441d      	add	r5, r3
 80099c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099c4:	2b20      	cmp	r3, #32
 80099c6:	bfc1      	itttt	gt
 80099c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80099d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80099d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099d8:	bfda      	itte	le
 80099da:	f1c3 0320 	rsble	r3, r3, #32
 80099de:	fa06 f003 	lslle.w	r0, r6, r3
 80099e2:	4318      	orrgt	r0, r3
 80099e4:	f7f6 fd96 	bl	8000514 <__aeabi_ui2d>
 80099e8:	2301      	movs	r3, #1
 80099ea:	4606      	mov	r6, r0
 80099ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80099f0:	3d01      	subs	r5, #1
 80099f2:	9310      	str	r3, [sp, #64]	; 0x40
 80099f4:	e771      	b.n	80098da <_dtoa_r+0x11a>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e7b6      	b.n	8009968 <_dtoa_r+0x1a8>
 80099fa:	900e      	str	r0, [sp, #56]	; 0x38
 80099fc:	e7b5      	b.n	800996a <_dtoa_r+0x1aa>
 80099fe:	f1ca 0300 	rsb	r3, sl, #0
 8009a02:	9306      	str	r3, [sp, #24]
 8009a04:	2300      	movs	r3, #0
 8009a06:	eba8 080a 	sub.w	r8, r8, sl
 8009a0a:	930d      	str	r3, [sp, #52]	; 0x34
 8009a0c:	e7c2      	b.n	8009994 <_dtoa_r+0x1d4>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	9308      	str	r3, [sp, #32]
 8009a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	dc39      	bgt.n	8009a8c <_dtoa_r+0x2cc>
 8009a18:	f04f 0901 	mov.w	r9, #1
 8009a1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a20:	464b      	mov	r3, r9
 8009a22:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a28:	2200      	movs	r2, #0
 8009a2a:	6042      	str	r2, [r0, #4]
 8009a2c:	2204      	movs	r2, #4
 8009a2e:	f102 0614 	add.w	r6, r2, #20
 8009a32:	429e      	cmp	r6, r3
 8009a34:	6841      	ldr	r1, [r0, #4]
 8009a36:	d92f      	bls.n	8009a98 <_dtoa_r+0x2d8>
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f000 fcb9 	bl	800a3b0 <_Balloc>
 8009a3e:	9000      	str	r0, [sp, #0]
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d14b      	bne.n	8009adc <_dtoa_r+0x31c>
 8009a44:	4b24      	ldr	r3, [pc, #144]	; (8009ad8 <_dtoa_r+0x318>)
 8009a46:	4602      	mov	r2, r0
 8009a48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a4c:	e6d1      	b.n	80097f2 <_dtoa_r+0x32>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e7de      	b.n	8009a10 <_dtoa_r+0x250>
 8009a52:	2300      	movs	r3, #0
 8009a54:	9308      	str	r3, [sp, #32]
 8009a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a58:	eb0a 0903 	add.w	r9, sl, r3
 8009a5c:	f109 0301 	add.w	r3, r9, #1
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	9301      	str	r3, [sp, #4]
 8009a64:	bfb8      	it	lt
 8009a66:	2301      	movlt	r3, #1
 8009a68:	e7dd      	b.n	8009a26 <_dtoa_r+0x266>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e7f2      	b.n	8009a54 <_dtoa_r+0x294>
 8009a6e:	2501      	movs	r5, #1
 8009a70:	2300      	movs	r3, #0
 8009a72:	9305      	str	r3, [sp, #20]
 8009a74:	9508      	str	r5, [sp, #32]
 8009a76:	f04f 39ff 	mov.w	r9, #4294967295
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a80:	2312      	movs	r3, #18
 8009a82:	9209      	str	r2, [sp, #36]	; 0x24
 8009a84:	e7cf      	b.n	8009a26 <_dtoa_r+0x266>
 8009a86:	2301      	movs	r3, #1
 8009a88:	9308      	str	r3, [sp, #32]
 8009a8a:	e7f4      	b.n	8009a76 <_dtoa_r+0x2b6>
 8009a8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009a90:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a94:	464b      	mov	r3, r9
 8009a96:	e7c6      	b.n	8009a26 <_dtoa_r+0x266>
 8009a98:	3101      	adds	r1, #1
 8009a9a:	6041      	str	r1, [r0, #4]
 8009a9c:	0052      	lsls	r2, r2, #1
 8009a9e:	e7c6      	b.n	8009a2e <_dtoa_r+0x26e>
 8009aa0:	636f4361 	.word	0x636f4361
 8009aa4:	3fd287a7 	.word	0x3fd287a7
 8009aa8:	8b60c8b3 	.word	0x8b60c8b3
 8009aac:	3fc68a28 	.word	0x3fc68a28
 8009ab0:	509f79fb 	.word	0x509f79fb
 8009ab4:	3fd34413 	.word	0x3fd34413
 8009ab8:	0800cd7d 	.word	0x0800cd7d
 8009abc:	0800cd94 	.word	0x0800cd94
 8009ac0:	7ff00000 	.word	0x7ff00000
 8009ac4:	0800cd79 	.word	0x0800cd79
 8009ac8:	0800cd70 	.word	0x0800cd70
 8009acc:	0800cd4d 	.word	0x0800cd4d
 8009ad0:	3ff80000 	.word	0x3ff80000
 8009ad4:	0800ce90 	.word	0x0800ce90
 8009ad8:	0800cdf3 	.word	0x0800cdf3
 8009adc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ade:	9a00      	ldr	r2, [sp, #0]
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	9b01      	ldr	r3, [sp, #4]
 8009ae4:	2b0e      	cmp	r3, #14
 8009ae6:	f200 80ad 	bhi.w	8009c44 <_dtoa_r+0x484>
 8009aea:	2d00      	cmp	r5, #0
 8009aec:	f000 80aa 	beq.w	8009c44 <_dtoa_r+0x484>
 8009af0:	f1ba 0f00 	cmp.w	sl, #0
 8009af4:	dd36      	ble.n	8009b64 <_dtoa_r+0x3a4>
 8009af6:	4ac3      	ldr	r2, [pc, #780]	; (8009e04 <_dtoa_r+0x644>)
 8009af8:	f00a 030f 	and.w	r3, sl, #15
 8009afc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009b00:	ed93 7b00 	vldr	d7, [r3]
 8009b04:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009b08:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009b0c:	eeb0 8a47 	vmov.f32	s16, s14
 8009b10:	eef0 8a67 	vmov.f32	s17, s15
 8009b14:	d016      	beq.n	8009b44 <_dtoa_r+0x384>
 8009b16:	4bbc      	ldr	r3, [pc, #752]	; (8009e08 <_dtoa_r+0x648>)
 8009b18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b20:	f7f6 fe9c 	bl	800085c <__aeabi_ddiv>
 8009b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b28:	f007 070f 	and.w	r7, r7, #15
 8009b2c:	2503      	movs	r5, #3
 8009b2e:	4eb6      	ldr	r6, [pc, #728]	; (8009e08 <_dtoa_r+0x648>)
 8009b30:	b957      	cbnz	r7, 8009b48 <_dtoa_r+0x388>
 8009b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b36:	ec53 2b18 	vmov	r2, r3, d8
 8009b3a:	f7f6 fe8f 	bl	800085c <__aeabi_ddiv>
 8009b3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b42:	e029      	b.n	8009b98 <_dtoa_r+0x3d8>
 8009b44:	2502      	movs	r5, #2
 8009b46:	e7f2      	b.n	8009b2e <_dtoa_r+0x36e>
 8009b48:	07f9      	lsls	r1, r7, #31
 8009b4a:	d508      	bpl.n	8009b5e <_dtoa_r+0x39e>
 8009b4c:	ec51 0b18 	vmov	r0, r1, d8
 8009b50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b54:	f7f6 fd58 	bl	8000608 <__aeabi_dmul>
 8009b58:	ec41 0b18 	vmov	d8, r0, r1
 8009b5c:	3501      	adds	r5, #1
 8009b5e:	107f      	asrs	r7, r7, #1
 8009b60:	3608      	adds	r6, #8
 8009b62:	e7e5      	b.n	8009b30 <_dtoa_r+0x370>
 8009b64:	f000 80a6 	beq.w	8009cb4 <_dtoa_r+0x4f4>
 8009b68:	f1ca 0600 	rsb	r6, sl, #0
 8009b6c:	4ba5      	ldr	r3, [pc, #660]	; (8009e04 <_dtoa_r+0x644>)
 8009b6e:	4fa6      	ldr	r7, [pc, #664]	; (8009e08 <_dtoa_r+0x648>)
 8009b70:	f006 020f 	and.w	r2, r6, #15
 8009b74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b80:	f7f6 fd42 	bl	8000608 <__aeabi_dmul>
 8009b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b88:	1136      	asrs	r6, r6, #4
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	2502      	movs	r5, #2
 8009b8e:	2e00      	cmp	r6, #0
 8009b90:	f040 8085 	bne.w	8009c9e <_dtoa_r+0x4de>
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1d2      	bne.n	8009b3e <_dtoa_r+0x37e>
 8009b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 808c 	beq.w	8009cb8 <_dtoa_r+0x4f8>
 8009ba0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009ba4:	4b99      	ldr	r3, [pc, #612]	; (8009e0c <_dtoa_r+0x64c>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	4630      	mov	r0, r6
 8009baa:	4639      	mov	r1, r7
 8009bac:	f7f6 ff9e 	bl	8000aec <__aeabi_dcmplt>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	f000 8081 	beq.w	8009cb8 <_dtoa_r+0x4f8>
 8009bb6:	9b01      	ldr	r3, [sp, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d07d      	beq.n	8009cb8 <_dtoa_r+0x4f8>
 8009bbc:	f1b9 0f00 	cmp.w	r9, #0
 8009bc0:	dd3c      	ble.n	8009c3c <_dtoa_r+0x47c>
 8009bc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009bc6:	9307      	str	r3, [sp, #28]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	4b91      	ldr	r3, [pc, #580]	; (8009e10 <_dtoa_r+0x650>)
 8009bcc:	4630      	mov	r0, r6
 8009bce:	4639      	mov	r1, r7
 8009bd0:	f7f6 fd1a 	bl	8000608 <__aeabi_dmul>
 8009bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bd8:	3501      	adds	r5, #1
 8009bda:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009bde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009be2:	4628      	mov	r0, r5
 8009be4:	f7f6 fca6 	bl	8000534 <__aeabi_i2d>
 8009be8:	4632      	mov	r2, r6
 8009bea:	463b      	mov	r3, r7
 8009bec:	f7f6 fd0c 	bl	8000608 <__aeabi_dmul>
 8009bf0:	4b88      	ldr	r3, [pc, #544]	; (8009e14 <_dtoa_r+0x654>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f7f6 fb52 	bl	800029c <__adddf3>
 8009bf8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c00:	9303      	str	r3, [sp, #12]
 8009c02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d15c      	bne.n	8009cc2 <_dtoa_r+0x502>
 8009c08:	4b83      	ldr	r3, [pc, #524]	; (8009e18 <_dtoa_r+0x658>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	4639      	mov	r1, r7
 8009c10:	f7f6 fb42 	bl	8000298 <__aeabi_dsub>
 8009c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c18:	4606      	mov	r6, r0
 8009c1a:	460f      	mov	r7, r1
 8009c1c:	f7f6 ff84 	bl	8000b28 <__aeabi_dcmpgt>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	f040 8296 	bne.w	800a152 <_dtoa_r+0x992>
 8009c26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c30:	4639      	mov	r1, r7
 8009c32:	f7f6 ff5b 	bl	8000aec <__aeabi_dcmplt>
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f040 8288 	bne.w	800a14c <_dtoa_r+0x98c>
 8009c3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f2c0 8158 	blt.w	8009efc <_dtoa_r+0x73c>
 8009c4c:	f1ba 0f0e 	cmp.w	sl, #14
 8009c50:	f300 8154 	bgt.w	8009efc <_dtoa_r+0x73c>
 8009c54:	4b6b      	ldr	r3, [pc, #428]	; (8009e04 <_dtoa_r+0x644>)
 8009c56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f280 80e3 	bge.w	8009e2c <_dtoa_r+0x66c>
 8009c66:	9b01      	ldr	r3, [sp, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f300 80df 	bgt.w	8009e2c <_dtoa_r+0x66c>
 8009c6e:	f040 826d 	bne.w	800a14c <_dtoa_r+0x98c>
 8009c72:	4b69      	ldr	r3, [pc, #420]	; (8009e18 <_dtoa_r+0x658>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	4640      	mov	r0, r8
 8009c78:	4649      	mov	r1, r9
 8009c7a:	f7f6 fcc5 	bl	8000608 <__aeabi_dmul>
 8009c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c82:	f7f6 ff47 	bl	8000b14 <__aeabi_dcmpge>
 8009c86:	9e01      	ldr	r6, [sp, #4]
 8009c88:	4637      	mov	r7, r6
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	f040 8243 	bne.w	800a116 <_dtoa_r+0x956>
 8009c90:	9d00      	ldr	r5, [sp, #0]
 8009c92:	2331      	movs	r3, #49	; 0x31
 8009c94:	f805 3b01 	strb.w	r3, [r5], #1
 8009c98:	f10a 0a01 	add.w	sl, sl, #1
 8009c9c:	e23f      	b.n	800a11e <_dtoa_r+0x95e>
 8009c9e:	07f2      	lsls	r2, r6, #31
 8009ca0:	d505      	bpl.n	8009cae <_dtoa_r+0x4ee>
 8009ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ca6:	f7f6 fcaf 	bl	8000608 <__aeabi_dmul>
 8009caa:	3501      	adds	r5, #1
 8009cac:	2301      	movs	r3, #1
 8009cae:	1076      	asrs	r6, r6, #1
 8009cb0:	3708      	adds	r7, #8
 8009cb2:	e76c      	b.n	8009b8e <_dtoa_r+0x3ce>
 8009cb4:	2502      	movs	r5, #2
 8009cb6:	e76f      	b.n	8009b98 <_dtoa_r+0x3d8>
 8009cb8:	9b01      	ldr	r3, [sp, #4]
 8009cba:	f8cd a01c 	str.w	sl, [sp, #28]
 8009cbe:	930c      	str	r3, [sp, #48]	; 0x30
 8009cc0:	e78d      	b.n	8009bde <_dtoa_r+0x41e>
 8009cc2:	9900      	ldr	r1, [sp, #0]
 8009cc4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cc8:	4b4e      	ldr	r3, [pc, #312]	; (8009e04 <_dtoa_r+0x644>)
 8009cca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cce:	4401      	add	r1, r0
 8009cd0:	9102      	str	r1, [sp, #8]
 8009cd2:	9908      	ldr	r1, [sp, #32]
 8009cd4:	eeb0 8a47 	vmov.f32	s16, s14
 8009cd8:	eef0 8a67 	vmov.f32	s17, s15
 8009cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ce0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	d045      	beq.n	8009d74 <_dtoa_r+0x5b4>
 8009ce8:	494c      	ldr	r1, [pc, #304]	; (8009e1c <_dtoa_r+0x65c>)
 8009cea:	2000      	movs	r0, #0
 8009cec:	f7f6 fdb6 	bl	800085c <__aeabi_ddiv>
 8009cf0:	ec53 2b18 	vmov	r2, r3, d8
 8009cf4:	f7f6 fad0 	bl	8000298 <__aeabi_dsub>
 8009cf8:	9d00      	ldr	r5, [sp, #0]
 8009cfa:	ec41 0b18 	vmov	d8, r0, r1
 8009cfe:	4639      	mov	r1, r7
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7f6 ff31 	bl	8000b68 <__aeabi_d2iz>
 8009d06:	900c      	str	r0, [sp, #48]	; 0x30
 8009d08:	f7f6 fc14 	bl	8000534 <__aeabi_i2d>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	4630      	mov	r0, r6
 8009d12:	4639      	mov	r1, r7
 8009d14:	f7f6 fac0 	bl	8000298 <__aeabi_dsub>
 8009d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d1a:	3330      	adds	r3, #48	; 0x30
 8009d1c:	f805 3b01 	strb.w	r3, [r5], #1
 8009d20:	ec53 2b18 	vmov	r2, r3, d8
 8009d24:	4606      	mov	r6, r0
 8009d26:	460f      	mov	r7, r1
 8009d28:	f7f6 fee0 	bl	8000aec <__aeabi_dcmplt>
 8009d2c:	2800      	cmp	r0, #0
 8009d2e:	d165      	bne.n	8009dfc <_dtoa_r+0x63c>
 8009d30:	4632      	mov	r2, r6
 8009d32:	463b      	mov	r3, r7
 8009d34:	4935      	ldr	r1, [pc, #212]	; (8009e0c <_dtoa_r+0x64c>)
 8009d36:	2000      	movs	r0, #0
 8009d38:	f7f6 faae 	bl	8000298 <__aeabi_dsub>
 8009d3c:	ec53 2b18 	vmov	r2, r3, d8
 8009d40:	f7f6 fed4 	bl	8000aec <__aeabi_dcmplt>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	f040 80b9 	bne.w	8009ebc <_dtoa_r+0x6fc>
 8009d4a:	9b02      	ldr	r3, [sp, #8]
 8009d4c:	429d      	cmp	r5, r3
 8009d4e:	f43f af75 	beq.w	8009c3c <_dtoa_r+0x47c>
 8009d52:	4b2f      	ldr	r3, [pc, #188]	; (8009e10 <_dtoa_r+0x650>)
 8009d54:	ec51 0b18 	vmov	r0, r1, d8
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f7f6 fc55 	bl	8000608 <__aeabi_dmul>
 8009d5e:	4b2c      	ldr	r3, [pc, #176]	; (8009e10 <_dtoa_r+0x650>)
 8009d60:	ec41 0b18 	vmov	d8, r0, r1
 8009d64:	2200      	movs	r2, #0
 8009d66:	4630      	mov	r0, r6
 8009d68:	4639      	mov	r1, r7
 8009d6a:	f7f6 fc4d 	bl	8000608 <__aeabi_dmul>
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460f      	mov	r7, r1
 8009d72:	e7c4      	b.n	8009cfe <_dtoa_r+0x53e>
 8009d74:	ec51 0b17 	vmov	r0, r1, d7
 8009d78:	f7f6 fc46 	bl	8000608 <__aeabi_dmul>
 8009d7c:	9b02      	ldr	r3, [sp, #8]
 8009d7e:	9d00      	ldr	r5, [sp, #0]
 8009d80:	930c      	str	r3, [sp, #48]	; 0x30
 8009d82:	ec41 0b18 	vmov	d8, r0, r1
 8009d86:	4639      	mov	r1, r7
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f7f6 feed 	bl	8000b68 <__aeabi_d2iz>
 8009d8e:	9011      	str	r0, [sp, #68]	; 0x44
 8009d90:	f7f6 fbd0 	bl	8000534 <__aeabi_i2d>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	f7f6 fa7c 	bl	8000298 <__aeabi_dsub>
 8009da0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009da2:	3330      	adds	r3, #48	; 0x30
 8009da4:	f805 3b01 	strb.w	r3, [r5], #1
 8009da8:	9b02      	ldr	r3, [sp, #8]
 8009daa:	429d      	cmp	r5, r3
 8009dac:	4606      	mov	r6, r0
 8009dae:	460f      	mov	r7, r1
 8009db0:	f04f 0200 	mov.w	r2, #0
 8009db4:	d134      	bne.n	8009e20 <_dtoa_r+0x660>
 8009db6:	4b19      	ldr	r3, [pc, #100]	; (8009e1c <_dtoa_r+0x65c>)
 8009db8:	ec51 0b18 	vmov	r0, r1, d8
 8009dbc:	f7f6 fa6e 	bl	800029c <__adddf3>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	4639      	mov	r1, r7
 8009dc8:	f7f6 feae 	bl	8000b28 <__aeabi_dcmpgt>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d175      	bne.n	8009ebc <_dtoa_r+0x6fc>
 8009dd0:	ec53 2b18 	vmov	r2, r3, d8
 8009dd4:	4911      	ldr	r1, [pc, #68]	; (8009e1c <_dtoa_r+0x65c>)
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	f7f6 fa5e 	bl	8000298 <__aeabi_dsub>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4630      	mov	r0, r6
 8009de2:	4639      	mov	r1, r7
 8009de4:	f7f6 fe82 	bl	8000aec <__aeabi_dcmplt>
 8009de8:	2800      	cmp	r0, #0
 8009dea:	f43f af27 	beq.w	8009c3c <_dtoa_r+0x47c>
 8009dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009df0:	1e6b      	subs	r3, r5, #1
 8009df2:	930c      	str	r3, [sp, #48]	; 0x30
 8009df4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009df8:	2b30      	cmp	r3, #48	; 0x30
 8009dfa:	d0f8      	beq.n	8009dee <_dtoa_r+0x62e>
 8009dfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009e00:	e04a      	b.n	8009e98 <_dtoa_r+0x6d8>
 8009e02:	bf00      	nop
 8009e04:	0800ce90 	.word	0x0800ce90
 8009e08:	0800ce68 	.word	0x0800ce68
 8009e0c:	3ff00000 	.word	0x3ff00000
 8009e10:	40240000 	.word	0x40240000
 8009e14:	401c0000 	.word	0x401c0000
 8009e18:	40140000 	.word	0x40140000
 8009e1c:	3fe00000 	.word	0x3fe00000
 8009e20:	4baf      	ldr	r3, [pc, #700]	; (800a0e0 <_dtoa_r+0x920>)
 8009e22:	f7f6 fbf1 	bl	8000608 <__aeabi_dmul>
 8009e26:	4606      	mov	r6, r0
 8009e28:	460f      	mov	r7, r1
 8009e2a:	e7ac      	b.n	8009d86 <_dtoa_r+0x5c6>
 8009e2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e30:	9d00      	ldr	r5, [sp, #0]
 8009e32:	4642      	mov	r2, r8
 8009e34:	464b      	mov	r3, r9
 8009e36:	4630      	mov	r0, r6
 8009e38:	4639      	mov	r1, r7
 8009e3a:	f7f6 fd0f 	bl	800085c <__aeabi_ddiv>
 8009e3e:	f7f6 fe93 	bl	8000b68 <__aeabi_d2iz>
 8009e42:	9002      	str	r0, [sp, #8]
 8009e44:	f7f6 fb76 	bl	8000534 <__aeabi_i2d>
 8009e48:	4642      	mov	r2, r8
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	f7f6 fbdc 	bl	8000608 <__aeabi_dmul>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4630      	mov	r0, r6
 8009e56:	4639      	mov	r1, r7
 8009e58:	f7f6 fa1e 	bl	8000298 <__aeabi_dsub>
 8009e5c:	9e02      	ldr	r6, [sp, #8]
 8009e5e:	9f01      	ldr	r7, [sp, #4]
 8009e60:	3630      	adds	r6, #48	; 0x30
 8009e62:	f805 6b01 	strb.w	r6, [r5], #1
 8009e66:	9e00      	ldr	r6, [sp, #0]
 8009e68:	1bae      	subs	r6, r5, r6
 8009e6a:	42b7      	cmp	r7, r6
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	d137      	bne.n	8009ee2 <_dtoa_r+0x722>
 8009e72:	f7f6 fa13 	bl	800029c <__adddf3>
 8009e76:	4642      	mov	r2, r8
 8009e78:	464b      	mov	r3, r9
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	460f      	mov	r7, r1
 8009e7e:	f7f6 fe53 	bl	8000b28 <__aeabi_dcmpgt>
 8009e82:	b9c8      	cbnz	r0, 8009eb8 <_dtoa_r+0x6f8>
 8009e84:	4642      	mov	r2, r8
 8009e86:	464b      	mov	r3, r9
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f7f6 fe24 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e90:	b110      	cbz	r0, 8009e98 <_dtoa_r+0x6d8>
 8009e92:	9b02      	ldr	r3, [sp, #8]
 8009e94:	07d9      	lsls	r1, r3, #31
 8009e96:	d40f      	bmi.n	8009eb8 <_dtoa_r+0x6f8>
 8009e98:	4620      	mov	r0, r4
 8009e9a:	4659      	mov	r1, fp
 8009e9c:	f000 fac8 	bl	800a430 <_Bfree>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	702b      	strb	r3, [r5, #0]
 8009ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ea6:	f10a 0001 	add.w	r0, sl, #1
 8009eaa:	6018      	str	r0, [r3, #0]
 8009eac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f43f acd8 	beq.w	8009864 <_dtoa_r+0xa4>
 8009eb4:	601d      	str	r5, [r3, #0]
 8009eb6:	e4d5      	b.n	8009864 <_dtoa_r+0xa4>
 8009eb8:	f8cd a01c 	str.w	sl, [sp, #28]
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	461d      	mov	r5, r3
 8009ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ec4:	2a39      	cmp	r2, #57	; 0x39
 8009ec6:	d108      	bne.n	8009eda <_dtoa_r+0x71a>
 8009ec8:	9a00      	ldr	r2, [sp, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d1f7      	bne.n	8009ebe <_dtoa_r+0x6fe>
 8009ece:	9a07      	ldr	r2, [sp, #28]
 8009ed0:	9900      	ldr	r1, [sp, #0]
 8009ed2:	3201      	adds	r2, #1
 8009ed4:	9207      	str	r2, [sp, #28]
 8009ed6:	2230      	movs	r2, #48	; 0x30
 8009ed8:	700a      	strb	r2, [r1, #0]
 8009eda:	781a      	ldrb	r2, [r3, #0]
 8009edc:	3201      	adds	r2, #1
 8009ede:	701a      	strb	r2, [r3, #0]
 8009ee0:	e78c      	b.n	8009dfc <_dtoa_r+0x63c>
 8009ee2:	4b7f      	ldr	r3, [pc, #508]	; (800a0e0 <_dtoa_r+0x920>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f7f6 fb8f 	bl	8000608 <__aeabi_dmul>
 8009eea:	2200      	movs	r2, #0
 8009eec:	2300      	movs	r3, #0
 8009eee:	4606      	mov	r6, r0
 8009ef0:	460f      	mov	r7, r1
 8009ef2:	f7f6 fdf1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	d09b      	beq.n	8009e32 <_dtoa_r+0x672>
 8009efa:	e7cd      	b.n	8009e98 <_dtoa_r+0x6d8>
 8009efc:	9a08      	ldr	r2, [sp, #32]
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	f000 80c4 	beq.w	800a08c <_dtoa_r+0x8cc>
 8009f04:	9a05      	ldr	r2, [sp, #20]
 8009f06:	2a01      	cmp	r2, #1
 8009f08:	f300 80a8 	bgt.w	800a05c <_dtoa_r+0x89c>
 8009f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f0e:	2a00      	cmp	r2, #0
 8009f10:	f000 80a0 	beq.w	800a054 <_dtoa_r+0x894>
 8009f14:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f18:	9e06      	ldr	r6, [sp, #24]
 8009f1a:	4645      	mov	r5, r8
 8009f1c:	9a04      	ldr	r2, [sp, #16]
 8009f1e:	2101      	movs	r1, #1
 8009f20:	441a      	add	r2, r3
 8009f22:	4620      	mov	r0, r4
 8009f24:	4498      	add	r8, r3
 8009f26:	9204      	str	r2, [sp, #16]
 8009f28:	f000 fb3e 	bl	800a5a8 <__i2b>
 8009f2c:	4607      	mov	r7, r0
 8009f2e:	2d00      	cmp	r5, #0
 8009f30:	dd0b      	ble.n	8009f4a <_dtoa_r+0x78a>
 8009f32:	9b04      	ldr	r3, [sp, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	dd08      	ble.n	8009f4a <_dtoa_r+0x78a>
 8009f38:	42ab      	cmp	r3, r5
 8009f3a:	9a04      	ldr	r2, [sp, #16]
 8009f3c:	bfa8      	it	ge
 8009f3e:	462b      	movge	r3, r5
 8009f40:	eba8 0803 	sub.w	r8, r8, r3
 8009f44:	1aed      	subs	r5, r5, r3
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	9304      	str	r3, [sp, #16]
 8009f4a:	9b06      	ldr	r3, [sp, #24]
 8009f4c:	b1fb      	cbz	r3, 8009f8e <_dtoa_r+0x7ce>
 8009f4e:	9b08      	ldr	r3, [sp, #32]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f000 809f 	beq.w	800a094 <_dtoa_r+0x8d4>
 8009f56:	2e00      	cmp	r6, #0
 8009f58:	dd11      	ble.n	8009f7e <_dtoa_r+0x7be>
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	4632      	mov	r2, r6
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f000 fbde 	bl	800a720 <__pow5mult>
 8009f64:	465a      	mov	r2, fp
 8009f66:	4601      	mov	r1, r0
 8009f68:	4607      	mov	r7, r0
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 fb32 	bl	800a5d4 <__multiply>
 8009f70:	4659      	mov	r1, fp
 8009f72:	9007      	str	r0, [sp, #28]
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 fa5b 	bl	800a430 <_Bfree>
 8009f7a:	9b07      	ldr	r3, [sp, #28]
 8009f7c:	469b      	mov	fp, r3
 8009f7e:	9b06      	ldr	r3, [sp, #24]
 8009f80:	1b9a      	subs	r2, r3, r6
 8009f82:	d004      	beq.n	8009f8e <_dtoa_r+0x7ce>
 8009f84:	4659      	mov	r1, fp
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 fbca 	bl	800a720 <__pow5mult>
 8009f8c:	4683      	mov	fp, r0
 8009f8e:	2101      	movs	r1, #1
 8009f90:	4620      	mov	r0, r4
 8009f92:	f000 fb09 	bl	800a5a8 <__i2b>
 8009f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	dd7c      	ble.n	800a098 <_dtoa_r+0x8d8>
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f000 fbbc 	bl	800a720 <__pow5mult>
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	4606      	mov	r6, r0
 8009fae:	dd76      	ble.n	800a09e <_dtoa_r+0x8de>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9306      	str	r3, [sp, #24]
 8009fb4:	6933      	ldr	r3, [r6, #16]
 8009fb6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009fba:	6918      	ldr	r0, [r3, #16]
 8009fbc:	f000 faa4 	bl	800a508 <__hi0bits>
 8009fc0:	f1c0 0020 	rsb	r0, r0, #32
 8009fc4:	9b04      	ldr	r3, [sp, #16]
 8009fc6:	4418      	add	r0, r3
 8009fc8:	f010 001f 	ands.w	r0, r0, #31
 8009fcc:	f000 8086 	beq.w	800a0dc <_dtoa_r+0x91c>
 8009fd0:	f1c0 0320 	rsb	r3, r0, #32
 8009fd4:	2b04      	cmp	r3, #4
 8009fd6:	dd7f      	ble.n	800a0d8 <_dtoa_r+0x918>
 8009fd8:	f1c0 001c 	rsb	r0, r0, #28
 8009fdc:	9b04      	ldr	r3, [sp, #16]
 8009fde:	4403      	add	r3, r0
 8009fe0:	4480      	add	r8, r0
 8009fe2:	4405      	add	r5, r0
 8009fe4:	9304      	str	r3, [sp, #16]
 8009fe6:	f1b8 0f00 	cmp.w	r8, #0
 8009fea:	dd05      	ble.n	8009ff8 <_dtoa_r+0x838>
 8009fec:	4659      	mov	r1, fp
 8009fee:	4642      	mov	r2, r8
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f000 fbef 	bl	800a7d4 <__lshift>
 8009ff6:	4683      	mov	fp, r0
 8009ff8:	9b04      	ldr	r3, [sp, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	dd05      	ble.n	800a00a <_dtoa_r+0x84a>
 8009ffe:	4631      	mov	r1, r6
 800a000:	461a      	mov	r2, r3
 800a002:	4620      	mov	r0, r4
 800a004:	f000 fbe6 	bl	800a7d4 <__lshift>
 800a008:	4606      	mov	r6, r0
 800a00a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d069      	beq.n	800a0e4 <_dtoa_r+0x924>
 800a010:	4631      	mov	r1, r6
 800a012:	4658      	mov	r0, fp
 800a014:	f000 fc4a 	bl	800a8ac <__mcmp>
 800a018:	2800      	cmp	r0, #0
 800a01a:	da63      	bge.n	800a0e4 <_dtoa_r+0x924>
 800a01c:	2300      	movs	r3, #0
 800a01e:	4659      	mov	r1, fp
 800a020:	220a      	movs	r2, #10
 800a022:	4620      	mov	r0, r4
 800a024:	f000 fa26 	bl	800a474 <__multadd>
 800a028:	9b08      	ldr	r3, [sp, #32]
 800a02a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a02e:	4683      	mov	fp, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 818f 	beq.w	800a354 <_dtoa_r+0xb94>
 800a036:	4639      	mov	r1, r7
 800a038:	2300      	movs	r3, #0
 800a03a:	220a      	movs	r2, #10
 800a03c:	4620      	mov	r0, r4
 800a03e:	f000 fa19 	bl	800a474 <__multadd>
 800a042:	f1b9 0f00 	cmp.w	r9, #0
 800a046:	4607      	mov	r7, r0
 800a048:	f300 808e 	bgt.w	800a168 <_dtoa_r+0x9a8>
 800a04c:	9b05      	ldr	r3, [sp, #20]
 800a04e:	2b02      	cmp	r3, #2
 800a050:	dc50      	bgt.n	800a0f4 <_dtoa_r+0x934>
 800a052:	e089      	b.n	800a168 <_dtoa_r+0x9a8>
 800a054:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a056:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a05a:	e75d      	b.n	8009f18 <_dtoa_r+0x758>
 800a05c:	9b01      	ldr	r3, [sp, #4]
 800a05e:	1e5e      	subs	r6, r3, #1
 800a060:	9b06      	ldr	r3, [sp, #24]
 800a062:	42b3      	cmp	r3, r6
 800a064:	bfbf      	itttt	lt
 800a066:	9b06      	ldrlt	r3, [sp, #24]
 800a068:	9606      	strlt	r6, [sp, #24]
 800a06a:	1af2      	sublt	r2, r6, r3
 800a06c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a06e:	bfb6      	itet	lt
 800a070:	189b      	addlt	r3, r3, r2
 800a072:	1b9e      	subge	r6, r3, r6
 800a074:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a076:	9b01      	ldr	r3, [sp, #4]
 800a078:	bfb8      	it	lt
 800a07a:	2600      	movlt	r6, #0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	bfb5      	itete	lt
 800a080:	eba8 0503 	sublt.w	r5, r8, r3
 800a084:	9b01      	ldrge	r3, [sp, #4]
 800a086:	2300      	movlt	r3, #0
 800a088:	4645      	movge	r5, r8
 800a08a:	e747      	b.n	8009f1c <_dtoa_r+0x75c>
 800a08c:	9e06      	ldr	r6, [sp, #24]
 800a08e:	9f08      	ldr	r7, [sp, #32]
 800a090:	4645      	mov	r5, r8
 800a092:	e74c      	b.n	8009f2e <_dtoa_r+0x76e>
 800a094:	9a06      	ldr	r2, [sp, #24]
 800a096:	e775      	b.n	8009f84 <_dtoa_r+0x7c4>
 800a098:	9b05      	ldr	r3, [sp, #20]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	dc18      	bgt.n	800a0d0 <_dtoa_r+0x910>
 800a09e:	9b02      	ldr	r3, [sp, #8]
 800a0a0:	b9b3      	cbnz	r3, 800a0d0 <_dtoa_r+0x910>
 800a0a2:	9b03      	ldr	r3, [sp, #12]
 800a0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0a8:	b9a3      	cbnz	r3, 800a0d4 <_dtoa_r+0x914>
 800a0aa:	9b03      	ldr	r3, [sp, #12]
 800a0ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0b0:	0d1b      	lsrs	r3, r3, #20
 800a0b2:	051b      	lsls	r3, r3, #20
 800a0b4:	b12b      	cbz	r3, 800a0c2 <_dtoa_r+0x902>
 800a0b6:	9b04      	ldr	r3, [sp, #16]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	f108 0801 	add.w	r8, r8, #1
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	9306      	str	r3, [sp, #24]
 800a0c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f47f af74 	bne.w	8009fb4 <_dtoa_r+0x7f4>
 800a0cc:	2001      	movs	r0, #1
 800a0ce:	e779      	b.n	8009fc4 <_dtoa_r+0x804>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	e7f6      	b.n	800a0c2 <_dtoa_r+0x902>
 800a0d4:	9b02      	ldr	r3, [sp, #8]
 800a0d6:	e7f4      	b.n	800a0c2 <_dtoa_r+0x902>
 800a0d8:	d085      	beq.n	8009fe6 <_dtoa_r+0x826>
 800a0da:	4618      	mov	r0, r3
 800a0dc:	301c      	adds	r0, #28
 800a0de:	e77d      	b.n	8009fdc <_dtoa_r+0x81c>
 800a0e0:	40240000 	.word	0x40240000
 800a0e4:	9b01      	ldr	r3, [sp, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	dc38      	bgt.n	800a15c <_dtoa_r+0x99c>
 800a0ea:	9b05      	ldr	r3, [sp, #20]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	dd35      	ble.n	800a15c <_dtoa_r+0x99c>
 800a0f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a0f4:	f1b9 0f00 	cmp.w	r9, #0
 800a0f8:	d10d      	bne.n	800a116 <_dtoa_r+0x956>
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	464b      	mov	r3, r9
 800a0fe:	2205      	movs	r2, #5
 800a100:	4620      	mov	r0, r4
 800a102:	f000 f9b7 	bl	800a474 <__multadd>
 800a106:	4601      	mov	r1, r0
 800a108:	4606      	mov	r6, r0
 800a10a:	4658      	mov	r0, fp
 800a10c:	f000 fbce 	bl	800a8ac <__mcmp>
 800a110:	2800      	cmp	r0, #0
 800a112:	f73f adbd 	bgt.w	8009c90 <_dtoa_r+0x4d0>
 800a116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a118:	9d00      	ldr	r5, [sp, #0]
 800a11a:	ea6f 0a03 	mvn.w	sl, r3
 800a11e:	f04f 0800 	mov.w	r8, #0
 800a122:	4631      	mov	r1, r6
 800a124:	4620      	mov	r0, r4
 800a126:	f000 f983 	bl	800a430 <_Bfree>
 800a12a:	2f00      	cmp	r7, #0
 800a12c:	f43f aeb4 	beq.w	8009e98 <_dtoa_r+0x6d8>
 800a130:	f1b8 0f00 	cmp.w	r8, #0
 800a134:	d005      	beq.n	800a142 <_dtoa_r+0x982>
 800a136:	45b8      	cmp	r8, r7
 800a138:	d003      	beq.n	800a142 <_dtoa_r+0x982>
 800a13a:	4641      	mov	r1, r8
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 f977 	bl	800a430 <_Bfree>
 800a142:	4639      	mov	r1, r7
 800a144:	4620      	mov	r0, r4
 800a146:	f000 f973 	bl	800a430 <_Bfree>
 800a14a:	e6a5      	b.n	8009e98 <_dtoa_r+0x6d8>
 800a14c:	2600      	movs	r6, #0
 800a14e:	4637      	mov	r7, r6
 800a150:	e7e1      	b.n	800a116 <_dtoa_r+0x956>
 800a152:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a154:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a158:	4637      	mov	r7, r6
 800a15a:	e599      	b.n	8009c90 <_dtoa_r+0x4d0>
 800a15c:	9b08      	ldr	r3, [sp, #32]
 800a15e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 80fd 	beq.w	800a362 <_dtoa_r+0xba2>
 800a168:	2d00      	cmp	r5, #0
 800a16a:	dd05      	ble.n	800a178 <_dtoa_r+0x9b8>
 800a16c:	4639      	mov	r1, r7
 800a16e:	462a      	mov	r2, r5
 800a170:	4620      	mov	r0, r4
 800a172:	f000 fb2f 	bl	800a7d4 <__lshift>
 800a176:	4607      	mov	r7, r0
 800a178:	9b06      	ldr	r3, [sp, #24]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d05c      	beq.n	800a238 <_dtoa_r+0xa78>
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	4620      	mov	r0, r4
 800a182:	f000 f915 	bl	800a3b0 <_Balloc>
 800a186:	4605      	mov	r5, r0
 800a188:	b928      	cbnz	r0, 800a196 <_dtoa_r+0x9d6>
 800a18a:	4b80      	ldr	r3, [pc, #512]	; (800a38c <_dtoa_r+0xbcc>)
 800a18c:	4602      	mov	r2, r0
 800a18e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a192:	f7ff bb2e 	b.w	80097f2 <_dtoa_r+0x32>
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	3202      	adds	r2, #2
 800a19a:	0092      	lsls	r2, r2, #2
 800a19c:	f107 010c 	add.w	r1, r7, #12
 800a1a0:	300c      	adds	r0, #12
 800a1a2:	f7fe fdd1 	bl	8008d48 <memcpy>
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 fb12 	bl	800a7d4 <__lshift>
 800a1b0:	9b00      	ldr	r3, [sp, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	9b00      	ldr	r3, [sp, #0]
 800a1b8:	444b      	add	r3, r9
 800a1ba:	9307      	str	r3, [sp, #28]
 800a1bc:	9b02      	ldr	r3, [sp, #8]
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	46b8      	mov	r8, r7
 800a1c4:	9306      	str	r3, [sp, #24]
 800a1c6:	4607      	mov	r7, r0
 800a1c8:	9b01      	ldr	r3, [sp, #4]
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	4658      	mov	r0, fp
 800a1d0:	9302      	str	r3, [sp, #8]
 800a1d2:	f7ff fa68 	bl	80096a6 <quorem>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	3330      	adds	r3, #48	; 0x30
 800a1da:	9004      	str	r0, [sp, #16]
 800a1dc:	4641      	mov	r1, r8
 800a1de:	4658      	mov	r0, fp
 800a1e0:	9308      	str	r3, [sp, #32]
 800a1e2:	f000 fb63 	bl	800a8ac <__mcmp>
 800a1e6:	463a      	mov	r2, r7
 800a1e8:	4681      	mov	r9, r0
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f000 fb79 	bl	800a8e4 <__mdiff>
 800a1f2:	68c2      	ldr	r2, [r0, #12]
 800a1f4:	9b08      	ldr	r3, [sp, #32]
 800a1f6:	4605      	mov	r5, r0
 800a1f8:	bb02      	cbnz	r2, 800a23c <_dtoa_r+0xa7c>
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	4658      	mov	r0, fp
 800a1fe:	f000 fb55 	bl	800a8ac <__mcmp>
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	4602      	mov	r2, r0
 800a206:	4629      	mov	r1, r5
 800a208:	4620      	mov	r0, r4
 800a20a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a20e:	f000 f90f 	bl	800a430 <_Bfree>
 800a212:	9b05      	ldr	r3, [sp, #20]
 800a214:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a216:	9d01      	ldr	r5, [sp, #4]
 800a218:	ea43 0102 	orr.w	r1, r3, r2
 800a21c:	9b06      	ldr	r3, [sp, #24]
 800a21e:	430b      	orrs	r3, r1
 800a220:	9b08      	ldr	r3, [sp, #32]
 800a222:	d10d      	bne.n	800a240 <_dtoa_r+0xa80>
 800a224:	2b39      	cmp	r3, #57	; 0x39
 800a226:	d029      	beq.n	800a27c <_dtoa_r+0xabc>
 800a228:	f1b9 0f00 	cmp.w	r9, #0
 800a22c:	dd01      	ble.n	800a232 <_dtoa_r+0xa72>
 800a22e:	9b04      	ldr	r3, [sp, #16]
 800a230:	3331      	adds	r3, #49	; 0x31
 800a232:	9a02      	ldr	r2, [sp, #8]
 800a234:	7013      	strb	r3, [r2, #0]
 800a236:	e774      	b.n	800a122 <_dtoa_r+0x962>
 800a238:	4638      	mov	r0, r7
 800a23a:	e7b9      	b.n	800a1b0 <_dtoa_r+0x9f0>
 800a23c:	2201      	movs	r2, #1
 800a23e:	e7e2      	b.n	800a206 <_dtoa_r+0xa46>
 800a240:	f1b9 0f00 	cmp.w	r9, #0
 800a244:	db06      	blt.n	800a254 <_dtoa_r+0xa94>
 800a246:	9905      	ldr	r1, [sp, #20]
 800a248:	ea41 0909 	orr.w	r9, r1, r9
 800a24c:	9906      	ldr	r1, [sp, #24]
 800a24e:	ea59 0101 	orrs.w	r1, r9, r1
 800a252:	d120      	bne.n	800a296 <_dtoa_r+0xad6>
 800a254:	2a00      	cmp	r2, #0
 800a256:	ddec      	ble.n	800a232 <_dtoa_r+0xa72>
 800a258:	4659      	mov	r1, fp
 800a25a:	2201      	movs	r2, #1
 800a25c:	4620      	mov	r0, r4
 800a25e:	9301      	str	r3, [sp, #4]
 800a260:	f000 fab8 	bl	800a7d4 <__lshift>
 800a264:	4631      	mov	r1, r6
 800a266:	4683      	mov	fp, r0
 800a268:	f000 fb20 	bl	800a8ac <__mcmp>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	9b01      	ldr	r3, [sp, #4]
 800a270:	dc02      	bgt.n	800a278 <_dtoa_r+0xab8>
 800a272:	d1de      	bne.n	800a232 <_dtoa_r+0xa72>
 800a274:	07da      	lsls	r2, r3, #31
 800a276:	d5dc      	bpl.n	800a232 <_dtoa_r+0xa72>
 800a278:	2b39      	cmp	r3, #57	; 0x39
 800a27a:	d1d8      	bne.n	800a22e <_dtoa_r+0xa6e>
 800a27c:	9a02      	ldr	r2, [sp, #8]
 800a27e:	2339      	movs	r3, #57	; 0x39
 800a280:	7013      	strb	r3, [r2, #0]
 800a282:	462b      	mov	r3, r5
 800a284:	461d      	mov	r5, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a28c:	2a39      	cmp	r2, #57	; 0x39
 800a28e:	d050      	beq.n	800a332 <_dtoa_r+0xb72>
 800a290:	3201      	adds	r2, #1
 800a292:	701a      	strb	r2, [r3, #0]
 800a294:	e745      	b.n	800a122 <_dtoa_r+0x962>
 800a296:	2a00      	cmp	r2, #0
 800a298:	dd03      	ble.n	800a2a2 <_dtoa_r+0xae2>
 800a29a:	2b39      	cmp	r3, #57	; 0x39
 800a29c:	d0ee      	beq.n	800a27c <_dtoa_r+0xabc>
 800a29e:	3301      	adds	r3, #1
 800a2a0:	e7c7      	b.n	800a232 <_dtoa_r+0xa72>
 800a2a2:	9a01      	ldr	r2, [sp, #4]
 800a2a4:	9907      	ldr	r1, [sp, #28]
 800a2a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2aa:	428a      	cmp	r2, r1
 800a2ac:	d02a      	beq.n	800a304 <_dtoa_r+0xb44>
 800a2ae:	4659      	mov	r1, fp
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	220a      	movs	r2, #10
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	f000 f8dd 	bl	800a474 <__multadd>
 800a2ba:	45b8      	cmp	r8, r7
 800a2bc:	4683      	mov	fp, r0
 800a2be:	f04f 0300 	mov.w	r3, #0
 800a2c2:	f04f 020a 	mov.w	r2, #10
 800a2c6:	4641      	mov	r1, r8
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	d107      	bne.n	800a2dc <_dtoa_r+0xb1c>
 800a2cc:	f000 f8d2 	bl	800a474 <__multadd>
 800a2d0:	4680      	mov	r8, r0
 800a2d2:	4607      	mov	r7, r0
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	e775      	b.n	800a1c8 <_dtoa_r+0xa08>
 800a2dc:	f000 f8ca 	bl	800a474 <__multadd>
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	4680      	mov	r8, r0
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	220a      	movs	r2, #10
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 f8c3 	bl	800a474 <__multadd>
 800a2ee:	4607      	mov	r7, r0
 800a2f0:	e7f0      	b.n	800a2d4 <_dtoa_r+0xb14>
 800a2f2:	f1b9 0f00 	cmp.w	r9, #0
 800a2f6:	9a00      	ldr	r2, [sp, #0]
 800a2f8:	bfcc      	ite	gt
 800a2fa:	464d      	movgt	r5, r9
 800a2fc:	2501      	movle	r5, #1
 800a2fe:	4415      	add	r5, r2
 800a300:	f04f 0800 	mov.w	r8, #0
 800a304:	4659      	mov	r1, fp
 800a306:	2201      	movs	r2, #1
 800a308:	4620      	mov	r0, r4
 800a30a:	9301      	str	r3, [sp, #4]
 800a30c:	f000 fa62 	bl	800a7d4 <__lshift>
 800a310:	4631      	mov	r1, r6
 800a312:	4683      	mov	fp, r0
 800a314:	f000 faca 	bl	800a8ac <__mcmp>
 800a318:	2800      	cmp	r0, #0
 800a31a:	dcb2      	bgt.n	800a282 <_dtoa_r+0xac2>
 800a31c:	d102      	bne.n	800a324 <_dtoa_r+0xb64>
 800a31e:	9b01      	ldr	r3, [sp, #4]
 800a320:	07db      	lsls	r3, r3, #31
 800a322:	d4ae      	bmi.n	800a282 <_dtoa_r+0xac2>
 800a324:	462b      	mov	r3, r5
 800a326:	461d      	mov	r5, r3
 800a328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a32c:	2a30      	cmp	r2, #48	; 0x30
 800a32e:	d0fa      	beq.n	800a326 <_dtoa_r+0xb66>
 800a330:	e6f7      	b.n	800a122 <_dtoa_r+0x962>
 800a332:	9a00      	ldr	r2, [sp, #0]
 800a334:	429a      	cmp	r2, r3
 800a336:	d1a5      	bne.n	800a284 <_dtoa_r+0xac4>
 800a338:	f10a 0a01 	add.w	sl, sl, #1
 800a33c:	2331      	movs	r3, #49	; 0x31
 800a33e:	e779      	b.n	800a234 <_dtoa_r+0xa74>
 800a340:	4b13      	ldr	r3, [pc, #76]	; (800a390 <_dtoa_r+0xbd0>)
 800a342:	f7ff baaf 	b.w	80098a4 <_dtoa_r+0xe4>
 800a346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f47f aa86 	bne.w	800985a <_dtoa_r+0x9a>
 800a34e:	4b11      	ldr	r3, [pc, #68]	; (800a394 <_dtoa_r+0xbd4>)
 800a350:	f7ff baa8 	b.w	80098a4 <_dtoa_r+0xe4>
 800a354:	f1b9 0f00 	cmp.w	r9, #0
 800a358:	dc03      	bgt.n	800a362 <_dtoa_r+0xba2>
 800a35a:	9b05      	ldr	r3, [sp, #20]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	f73f aec9 	bgt.w	800a0f4 <_dtoa_r+0x934>
 800a362:	9d00      	ldr	r5, [sp, #0]
 800a364:	4631      	mov	r1, r6
 800a366:	4658      	mov	r0, fp
 800a368:	f7ff f99d 	bl	80096a6 <quorem>
 800a36c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a370:	f805 3b01 	strb.w	r3, [r5], #1
 800a374:	9a00      	ldr	r2, [sp, #0]
 800a376:	1aaa      	subs	r2, r5, r2
 800a378:	4591      	cmp	r9, r2
 800a37a:	ddba      	ble.n	800a2f2 <_dtoa_r+0xb32>
 800a37c:	4659      	mov	r1, fp
 800a37e:	2300      	movs	r3, #0
 800a380:	220a      	movs	r2, #10
 800a382:	4620      	mov	r0, r4
 800a384:	f000 f876 	bl	800a474 <__multadd>
 800a388:	4683      	mov	fp, r0
 800a38a:	e7eb      	b.n	800a364 <_dtoa_r+0xba4>
 800a38c:	0800cdf3 	.word	0x0800cdf3
 800a390:	0800cd4c 	.word	0x0800cd4c
 800a394:	0800cd70 	.word	0x0800cd70

0800a398 <_localeconv_r>:
 800a398:	4800      	ldr	r0, [pc, #0]	; (800a39c <_localeconv_r+0x4>)
 800a39a:	4770      	bx	lr
 800a39c:	20000194 	.word	0x20000194

0800a3a0 <malloc>:
 800a3a0:	4b02      	ldr	r3, [pc, #8]	; (800a3ac <malloc+0xc>)
 800a3a2:	4601      	mov	r1, r0
 800a3a4:	6818      	ldr	r0, [r3, #0]
 800a3a6:	f000 bbe1 	b.w	800ab6c <_malloc_r>
 800a3aa:	bf00      	nop
 800a3ac:	20000040 	.word	0x20000040

0800a3b0 <_Balloc>:
 800a3b0:	b570      	push	{r4, r5, r6, lr}
 800a3b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	460d      	mov	r5, r1
 800a3b8:	b976      	cbnz	r6, 800a3d8 <_Balloc+0x28>
 800a3ba:	2010      	movs	r0, #16
 800a3bc:	f7ff fff0 	bl	800a3a0 <malloc>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	6260      	str	r0, [r4, #36]	; 0x24
 800a3c4:	b920      	cbnz	r0, 800a3d0 <_Balloc+0x20>
 800a3c6:	4b18      	ldr	r3, [pc, #96]	; (800a428 <_Balloc+0x78>)
 800a3c8:	4818      	ldr	r0, [pc, #96]	; (800a42c <_Balloc+0x7c>)
 800a3ca:	2166      	movs	r1, #102	; 0x66
 800a3cc:	f000 fd94 	bl	800aef8 <__assert_func>
 800a3d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3d4:	6006      	str	r6, [r0, #0]
 800a3d6:	60c6      	str	r6, [r0, #12]
 800a3d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3da:	68f3      	ldr	r3, [r6, #12]
 800a3dc:	b183      	cbz	r3, 800a400 <_Balloc+0x50>
 800a3de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3e6:	b9b8      	cbnz	r0, 800a418 <_Balloc+0x68>
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	fa01 f605 	lsl.w	r6, r1, r5
 800a3ee:	1d72      	adds	r2, r6, #5
 800a3f0:	0092      	lsls	r2, r2, #2
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f000 fb5a 	bl	800aaac <_calloc_r>
 800a3f8:	b160      	cbz	r0, 800a414 <_Balloc+0x64>
 800a3fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3fe:	e00e      	b.n	800a41e <_Balloc+0x6e>
 800a400:	2221      	movs	r2, #33	; 0x21
 800a402:	2104      	movs	r1, #4
 800a404:	4620      	mov	r0, r4
 800a406:	f000 fb51 	bl	800aaac <_calloc_r>
 800a40a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a40c:	60f0      	str	r0, [r6, #12]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d1e4      	bne.n	800a3de <_Balloc+0x2e>
 800a414:	2000      	movs	r0, #0
 800a416:	bd70      	pop	{r4, r5, r6, pc}
 800a418:	6802      	ldr	r2, [r0, #0]
 800a41a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a41e:	2300      	movs	r3, #0
 800a420:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a424:	e7f7      	b.n	800a416 <_Balloc+0x66>
 800a426:	bf00      	nop
 800a428:	0800cd7d 	.word	0x0800cd7d
 800a42c:	0800ce04 	.word	0x0800ce04

0800a430 <_Bfree>:
 800a430:	b570      	push	{r4, r5, r6, lr}
 800a432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a434:	4605      	mov	r5, r0
 800a436:	460c      	mov	r4, r1
 800a438:	b976      	cbnz	r6, 800a458 <_Bfree+0x28>
 800a43a:	2010      	movs	r0, #16
 800a43c:	f7ff ffb0 	bl	800a3a0 <malloc>
 800a440:	4602      	mov	r2, r0
 800a442:	6268      	str	r0, [r5, #36]	; 0x24
 800a444:	b920      	cbnz	r0, 800a450 <_Bfree+0x20>
 800a446:	4b09      	ldr	r3, [pc, #36]	; (800a46c <_Bfree+0x3c>)
 800a448:	4809      	ldr	r0, [pc, #36]	; (800a470 <_Bfree+0x40>)
 800a44a:	218a      	movs	r1, #138	; 0x8a
 800a44c:	f000 fd54 	bl	800aef8 <__assert_func>
 800a450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a454:	6006      	str	r6, [r0, #0]
 800a456:	60c6      	str	r6, [r0, #12]
 800a458:	b13c      	cbz	r4, 800a46a <_Bfree+0x3a>
 800a45a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a45c:	6862      	ldr	r2, [r4, #4]
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a464:	6021      	str	r1, [r4, #0]
 800a466:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a46a:	bd70      	pop	{r4, r5, r6, pc}
 800a46c:	0800cd7d 	.word	0x0800cd7d
 800a470:	0800ce04 	.word	0x0800ce04

0800a474 <__multadd>:
 800a474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a478:	690e      	ldr	r6, [r1, #16]
 800a47a:	4607      	mov	r7, r0
 800a47c:	4698      	mov	r8, r3
 800a47e:	460c      	mov	r4, r1
 800a480:	f101 0014 	add.w	r0, r1, #20
 800a484:	2300      	movs	r3, #0
 800a486:	6805      	ldr	r5, [r0, #0]
 800a488:	b2a9      	uxth	r1, r5
 800a48a:	fb02 8101 	mla	r1, r2, r1, r8
 800a48e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a492:	0c2d      	lsrs	r5, r5, #16
 800a494:	fb02 c505 	mla	r5, r2, r5, ip
 800a498:	b289      	uxth	r1, r1
 800a49a:	3301      	adds	r3, #1
 800a49c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a4a0:	429e      	cmp	r6, r3
 800a4a2:	f840 1b04 	str.w	r1, [r0], #4
 800a4a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a4aa:	dcec      	bgt.n	800a486 <__multadd+0x12>
 800a4ac:	f1b8 0f00 	cmp.w	r8, #0
 800a4b0:	d022      	beq.n	800a4f8 <__multadd+0x84>
 800a4b2:	68a3      	ldr	r3, [r4, #8]
 800a4b4:	42b3      	cmp	r3, r6
 800a4b6:	dc19      	bgt.n	800a4ec <__multadd+0x78>
 800a4b8:	6861      	ldr	r1, [r4, #4]
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	3101      	adds	r1, #1
 800a4be:	f7ff ff77 	bl	800a3b0 <_Balloc>
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	b928      	cbnz	r0, 800a4d2 <__multadd+0x5e>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	4b0d      	ldr	r3, [pc, #52]	; (800a500 <__multadd+0x8c>)
 800a4ca:	480e      	ldr	r0, [pc, #56]	; (800a504 <__multadd+0x90>)
 800a4cc:	21b5      	movs	r1, #181	; 0xb5
 800a4ce:	f000 fd13 	bl	800aef8 <__assert_func>
 800a4d2:	6922      	ldr	r2, [r4, #16]
 800a4d4:	3202      	adds	r2, #2
 800a4d6:	f104 010c 	add.w	r1, r4, #12
 800a4da:	0092      	lsls	r2, r2, #2
 800a4dc:	300c      	adds	r0, #12
 800a4de:	f7fe fc33 	bl	8008d48 <memcpy>
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	f7ff ffa3 	bl	800a430 <_Bfree>
 800a4ea:	462c      	mov	r4, r5
 800a4ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a4f0:	3601      	adds	r6, #1
 800a4f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800a4f6:	6126      	str	r6, [r4, #16]
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4fe:	bf00      	nop
 800a500:	0800cdf3 	.word	0x0800cdf3
 800a504:	0800ce04 	.word	0x0800ce04

0800a508 <__hi0bits>:
 800a508:	0c03      	lsrs	r3, r0, #16
 800a50a:	041b      	lsls	r3, r3, #16
 800a50c:	b9d3      	cbnz	r3, 800a544 <__hi0bits+0x3c>
 800a50e:	0400      	lsls	r0, r0, #16
 800a510:	2310      	movs	r3, #16
 800a512:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a516:	bf04      	itt	eq
 800a518:	0200      	lsleq	r0, r0, #8
 800a51a:	3308      	addeq	r3, #8
 800a51c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a520:	bf04      	itt	eq
 800a522:	0100      	lsleq	r0, r0, #4
 800a524:	3304      	addeq	r3, #4
 800a526:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a52a:	bf04      	itt	eq
 800a52c:	0080      	lsleq	r0, r0, #2
 800a52e:	3302      	addeq	r3, #2
 800a530:	2800      	cmp	r0, #0
 800a532:	db05      	blt.n	800a540 <__hi0bits+0x38>
 800a534:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a538:	f103 0301 	add.w	r3, r3, #1
 800a53c:	bf08      	it	eq
 800a53e:	2320      	moveq	r3, #32
 800a540:	4618      	mov	r0, r3
 800a542:	4770      	bx	lr
 800a544:	2300      	movs	r3, #0
 800a546:	e7e4      	b.n	800a512 <__hi0bits+0xa>

0800a548 <__lo0bits>:
 800a548:	6803      	ldr	r3, [r0, #0]
 800a54a:	f013 0207 	ands.w	r2, r3, #7
 800a54e:	4601      	mov	r1, r0
 800a550:	d00b      	beq.n	800a56a <__lo0bits+0x22>
 800a552:	07da      	lsls	r2, r3, #31
 800a554:	d424      	bmi.n	800a5a0 <__lo0bits+0x58>
 800a556:	0798      	lsls	r0, r3, #30
 800a558:	bf49      	itett	mi
 800a55a:	085b      	lsrmi	r3, r3, #1
 800a55c:	089b      	lsrpl	r3, r3, #2
 800a55e:	2001      	movmi	r0, #1
 800a560:	600b      	strmi	r3, [r1, #0]
 800a562:	bf5c      	itt	pl
 800a564:	600b      	strpl	r3, [r1, #0]
 800a566:	2002      	movpl	r0, #2
 800a568:	4770      	bx	lr
 800a56a:	b298      	uxth	r0, r3
 800a56c:	b9b0      	cbnz	r0, 800a59c <__lo0bits+0x54>
 800a56e:	0c1b      	lsrs	r3, r3, #16
 800a570:	2010      	movs	r0, #16
 800a572:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a576:	bf04      	itt	eq
 800a578:	0a1b      	lsreq	r3, r3, #8
 800a57a:	3008      	addeq	r0, #8
 800a57c:	071a      	lsls	r2, r3, #28
 800a57e:	bf04      	itt	eq
 800a580:	091b      	lsreq	r3, r3, #4
 800a582:	3004      	addeq	r0, #4
 800a584:	079a      	lsls	r2, r3, #30
 800a586:	bf04      	itt	eq
 800a588:	089b      	lsreq	r3, r3, #2
 800a58a:	3002      	addeq	r0, #2
 800a58c:	07da      	lsls	r2, r3, #31
 800a58e:	d403      	bmi.n	800a598 <__lo0bits+0x50>
 800a590:	085b      	lsrs	r3, r3, #1
 800a592:	f100 0001 	add.w	r0, r0, #1
 800a596:	d005      	beq.n	800a5a4 <__lo0bits+0x5c>
 800a598:	600b      	str	r3, [r1, #0]
 800a59a:	4770      	bx	lr
 800a59c:	4610      	mov	r0, r2
 800a59e:	e7e8      	b.n	800a572 <__lo0bits+0x2a>
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	4770      	bx	lr
 800a5a4:	2020      	movs	r0, #32
 800a5a6:	4770      	bx	lr

0800a5a8 <__i2b>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	f7ff feff 	bl	800a3b0 <_Balloc>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	b928      	cbnz	r0, 800a5c2 <__i2b+0x1a>
 800a5b6:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <__i2b+0x24>)
 800a5b8:	4805      	ldr	r0, [pc, #20]	; (800a5d0 <__i2b+0x28>)
 800a5ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5be:	f000 fc9b 	bl	800aef8 <__assert_func>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	6144      	str	r4, [r0, #20]
 800a5c6:	6103      	str	r3, [r0, #16]
 800a5c8:	bd10      	pop	{r4, pc}
 800a5ca:	bf00      	nop
 800a5cc:	0800cdf3 	.word	0x0800cdf3
 800a5d0:	0800ce04 	.word	0x0800ce04

0800a5d4 <__multiply>:
 800a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	4614      	mov	r4, r2
 800a5da:	690a      	ldr	r2, [r1, #16]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	bfb8      	it	lt
 800a5e2:	460b      	movlt	r3, r1
 800a5e4:	460d      	mov	r5, r1
 800a5e6:	bfbc      	itt	lt
 800a5e8:	4625      	movlt	r5, r4
 800a5ea:	461c      	movlt	r4, r3
 800a5ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a5f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a5f4:	68ab      	ldr	r3, [r5, #8]
 800a5f6:	6869      	ldr	r1, [r5, #4]
 800a5f8:	eb0a 0709 	add.w	r7, sl, r9
 800a5fc:	42bb      	cmp	r3, r7
 800a5fe:	b085      	sub	sp, #20
 800a600:	bfb8      	it	lt
 800a602:	3101      	addlt	r1, #1
 800a604:	f7ff fed4 	bl	800a3b0 <_Balloc>
 800a608:	b930      	cbnz	r0, 800a618 <__multiply+0x44>
 800a60a:	4602      	mov	r2, r0
 800a60c:	4b42      	ldr	r3, [pc, #264]	; (800a718 <__multiply+0x144>)
 800a60e:	4843      	ldr	r0, [pc, #268]	; (800a71c <__multiply+0x148>)
 800a610:	f240 115d 	movw	r1, #349	; 0x15d
 800a614:	f000 fc70 	bl	800aef8 <__assert_func>
 800a618:	f100 0614 	add.w	r6, r0, #20
 800a61c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a620:	4633      	mov	r3, r6
 800a622:	2200      	movs	r2, #0
 800a624:	4543      	cmp	r3, r8
 800a626:	d31e      	bcc.n	800a666 <__multiply+0x92>
 800a628:	f105 0c14 	add.w	ip, r5, #20
 800a62c:	f104 0314 	add.w	r3, r4, #20
 800a630:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a634:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a638:	9202      	str	r2, [sp, #8]
 800a63a:	ebac 0205 	sub.w	r2, ip, r5
 800a63e:	3a15      	subs	r2, #21
 800a640:	f022 0203 	bic.w	r2, r2, #3
 800a644:	3204      	adds	r2, #4
 800a646:	f105 0115 	add.w	r1, r5, #21
 800a64a:	458c      	cmp	ip, r1
 800a64c:	bf38      	it	cc
 800a64e:	2204      	movcc	r2, #4
 800a650:	9201      	str	r2, [sp, #4]
 800a652:	9a02      	ldr	r2, [sp, #8]
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	429a      	cmp	r2, r3
 800a658:	d808      	bhi.n	800a66c <__multiply+0x98>
 800a65a:	2f00      	cmp	r7, #0
 800a65c:	dc55      	bgt.n	800a70a <__multiply+0x136>
 800a65e:	6107      	str	r7, [r0, #16]
 800a660:	b005      	add	sp, #20
 800a662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a666:	f843 2b04 	str.w	r2, [r3], #4
 800a66a:	e7db      	b.n	800a624 <__multiply+0x50>
 800a66c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a670:	f1ba 0f00 	cmp.w	sl, #0
 800a674:	d020      	beq.n	800a6b8 <__multiply+0xe4>
 800a676:	f105 0e14 	add.w	lr, r5, #20
 800a67a:	46b1      	mov	r9, r6
 800a67c:	2200      	movs	r2, #0
 800a67e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a682:	f8d9 b000 	ldr.w	fp, [r9]
 800a686:	b2a1      	uxth	r1, r4
 800a688:	fa1f fb8b 	uxth.w	fp, fp
 800a68c:	fb0a b101 	mla	r1, sl, r1, fp
 800a690:	4411      	add	r1, r2
 800a692:	f8d9 2000 	ldr.w	r2, [r9]
 800a696:	0c24      	lsrs	r4, r4, #16
 800a698:	0c12      	lsrs	r2, r2, #16
 800a69a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a69e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a6a2:	b289      	uxth	r1, r1
 800a6a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a6a8:	45f4      	cmp	ip, lr
 800a6aa:	f849 1b04 	str.w	r1, [r9], #4
 800a6ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a6b2:	d8e4      	bhi.n	800a67e <__multiply+0xaa>
 800a6b4:	9901      	ldr	r1, [sp, #4]
 800a6b6:	5072      	str	r2, [r6, r1]
 800a6b8:	9a03      	ldr	r2, [sp, #12]
 800a6ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6be:	3304      	adds	r3, #4
 800a6c0:	f1b9 0f00 	cmp.w	r9, #0
 800a6c4:	d01f      	beq.n	800a706 <__multiply+0x132>
 800a6c6:	6834      	ldr	r4, [r6, #0]
 800a6c8:	f105 0114 	add.w	r1, r5, #20
 800a6cc:	46b6      	mov	lr, r6
 800a6ce:	f04f 0a00 	mov.w	sl, #0
 800a6d2:	880a      	ldrh	r2, [r1, #0]
 800a6d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a6d8:	fb09 b202 	mla	r2, r9, r2, fp
 800a6dc:	4492      	add	sl, r2
 800a6de:	b2a4      	uxth	r4, r4
 800a6e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a6e4:	f84e 4b04 	str.w	r4, [lr], #4
 800a6e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a6ec:	f8be 2000 	ldrh.w	r2, [lr]
 800a6f0:	0c24      	lsrs	r4, r4, #16
 800a6f2:	fb09 2404 	mla	r4, r9, r4, r2
 800a6f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a6fa:	458c      	cmp	ip, r1
 800a6fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a700:	d8e7      	bhi.n	800a6d2 <__multiply+0xfe>
 800a702:	9a01      	ldr	r2, [sp, #4]
 800a704:	50b4      	str	r4, [r6, r2]
 800a706:	3604      	adds	r6, #4
 800a708:	e7a3      	b.n	800a652 <__multiply+0x7e>
 800a70a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1a5      	bne.n	800a65e <__multiply+0x8a>
 800a712:	3f01      	subs	r7, #1
 800a714:	e7a1      	b.n	800a65a <__multiply+0x86>
 800a716:	bf00      	nop
 800a718:	0800cdf3 	.word	0x0800cdf3
 800a71c:	0800ce04 	.word	0x0800ce04

0800a720 <__pow5mult>:
 800a720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a724:	4615      	mov	r5, r2
 800a726:	f012 0203 	ands.w	r2, r2, #3
 800a72a:	4606      	mov	r6, r0
 800a72c:	460f      	mov	r7, r1
 800a72e:	d007      	beq.n	800a740 <__pow5mult+0x20>
 800a730:	4c25      	ldr	r4, [pc, #148]	; (800a7c8 <__pow5mult+0xa8>)
 800a732:	3a01      	subs	r2, #1
 800a734:	2300      	movs	r3, #0
 800a736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a73a:	f7ff fe9b 	bl	800a474 <__multadd>
 800a73e:	4607      	mov	r7, r0
 800a740:	10ad      	asrs	r5, r5, #2
 800a742:	d03d      	beq.n	800a7c0 <__pow5mult+0xa0>
 800a744:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a746:	b97c      	cbnz	r4, 800a768 <__pow5mult+0x48>
 800a748:	2010      	movs	r0, #16
 800a74a:	f7ff fe29 	bl	800a3a0 <malloc>
 800a74e:	4602      	mov	r2, r0
 800a750:	6270      	str	r0, [r6, #36]	; 0x24
 800a752:	b928      	cbnz	r0, 800a760 <__pow5mult+0x40>
 800a754:	4b1d      	ldr	r3, [pc, #116]	; (800a7cc <__pow5mult+0xac>)
 800a756:	481e      	ldr	r0, [pc, #120]	; (800a7d0 <__pow5mult+0xb0>)
 800a758:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a75c:	f000 fbcc 	bl	800aef8 <__assert_func>
 800a760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a764:	6004      	str	r4, [r0, #0]
 800a766:	60c4      	str	r4, [r0, #12]
 800a768:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a76c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a770:	b94c      	cbnz	r4, 800a786 <__pow5mult+0x66>
 800a772:	f240 2171 	movw	r1, #625	; 0x271
 800a776:	4630      	mov	r0, r6
 800a778:	f7ff ff16 	bl	800a5a8 <__i2b>
 800a77c:	2300      	movs	r3, #0
 800a77e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a782:	4604      	mov	r4, r0
 800a784:	6003      	str	r3, [r0, #0]
 800a786:	f04f 0900 	mov.w	r9, #0
 800a78a:	07eb      	lsls	r3, r5, #31
 800a78c:	d50a      	bpl.n	800a7a4 <__pow5mult+0x84>
 800a78e:	4639      	mov	r1, r7
 800a790:	4622      	mov	r2, r4
 800a792:	4630      	mov	r0, r6
 800a794:	f7ff ff1e 	bl	800a5d4 <__multiply>
 800a798:	4639      	mov	r1, r7
 800a79a:	4680      	mov	r8, r0
 800a79c:	4630      	mov	r0, r6
 800a79e:	f7ff fe47 	bl	800a430 <_Bfree>
 800a7a2:	4647      	mov	r7, r8
 800a7a4:	106d      	asrs	r5, r5, #1
 800a7a6:	d00b      	beq.n	800a7c0 <__pow5mult+0xa0>
 800a7a8:	6820      	ldr	r0, [r4, #0]
 800a7aa:	b938      	cbnz	r0, 800a7bc <__pow5mult+0x9c>
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f7ff ff0f 	bl	800a5d4 <__multiply>
 800a7b6:	6020      	str	r0, [r4, #0]
 800a7b8:	f8c0 9000 	str.w	r9, [r0]
 800a7bc:	4604      	mov	r4, r0
 800a7be:	e7e4      	b.n	800a78a <__pow5mult+0x6a>
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c6:	bf00      	nop
 800a7c8:	0800cf58 	.word	0x0800cf58
 800a7cc:	0800cd7d 	.word	0x0800cd7d
 800a7d0:	0800ce04 	.word	0x0800ce04

0800a7d4 <__lshift>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	460c      	mov	r4, r1
 800a7da:	6849      	ldr	r1, [r1, #4]
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7e2:	68a3      	ldr	r3, [r4, #8]
 800a7e4:	4607      	mov	r7, r0
 800a7e6:	4691      	mov	r9, r2
 800a7e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7ec:	f108 0601 	add.w	r6, r8, #1
 800a7f0:	42b3      	cmp	r3, r6
 800a7f2:	db0b      	blt.n	800a80c <__lshift+0x38>
 800a7f4:	4638      	mov	r0, r7
 800a7f6:	f7ff fddb 	bl	800a3b0 <_Balloc>
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	b948      	cbnz	r0, 800a812 <__lshift+0x3e>
 800a7fe:	4602      	mov	r2, r0
 800a800:	4b28      	ldr	r3, [pc, #160]	; (800a8a4 <__lshift+0xd0>)
 800a802:	4829      	ldr	r0, [pc, #164]	; (800a8a8 <__lshift+0xd4>)
 800a804:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a808:	f000 fb76 	bl	800aef8 <__assert_func>
 800a80c:	3101      	adds	r1, #1
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	e7ee      	b.n	800a7f0 <__lshift+0x1c>
 800a812:	2300      	movs	r3, #0
 800a814:	f100 0114 	add.w	r1, r0, #20
 800a818:	f100 0210 	add.w	r2, r0, #16
 800a81c:	4618      	mov	r0, r3
 800a81e:	4553      	cmp	r3, sl
 800a820:	db33      	blt.n	800a88a <__lshift+0xb6>
 800a822:	6920      	ldr	r0, [r4, #16]
 800a824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a828:	f104 0314 	add.w	r3, r4, #20
 800a82c:	f019 091f 	ands.w	r9, r9, #31
 800a830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a838:	d02b      	beq.n	800a892 <__lshift+0xbe>
 800a83a:	f1c9 0e20 	rsb	lr, r9, #32
 800a83e:	468a      	mov	sl, r1
 800a840:	2200      	movs	r2, #0
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	fa00 f009 	lsl.w	r0, r0, r9
 800a848:	4302      	orrs	r2, r0
 800a84a:	f84a 2b04 	str.w	r2, [sl], #4
 800a84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a852:	459c      	cmp	ip, r3
 800a854:	fa22 f20e 	lsr.w	r2, r2, lr
 800a858:	d8f3      	bhi.n	800a842 <__lshift+0x6e>
 800a85a:	ebac 0304 	sub.w	r3, ip, r4
 800a85e:	3b15      	subs	r3, #21
 800a860:	f023 0303 	bic.w	r3, r3, #3
 800a864:	3304      	adds	r3, #4
 800a866:	f104 0015 	add.w	r0, r4, #21
 800a86a:	4584      	cmp	ip, r0
 800a86c:	bf38      	it	cc
 800a86e:	2304      	movcc	r3, #4
 800a870:	50ca      	str	r2, [r1, r3]
 800a872:	b10a      	cbz	r2, 800a878 <__lshift+0xa4>
 800a874:	f108 0602 	add.w	r6, r8, #2
 800a878:	3e01      	subs	r6, #1
 800a87a:	4638      	mov	r0, r7
 800a87c:	612e      	str	r6, [r5, #16]
 800a87e:	4621      	mov	r1, r4
 800a880:	f7ff fdd6 	bl	800a430 <_Bfree>
 800a884:	4628      	mov	r0, r5
 800a886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a88a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a88e:	3301      	adds	r3, #1
 800a890:	e7c5      	b.n	800a81e <__lshift+0x4a>
 800a892:	3904      	subs	r1, #4
 800a894:	f853 2b04 	ldr.w	r2, [r3], #4
 800a898:	f841 2f04 	str.w	r2, [r1, #4]!
 800a89c:	459c      	cmp	ip, r3
 800a89e:	d8f9      	bhi.n	800a894 <__lshift+0xc0>
 800a8a0:	e7ea      	b.n	800a878 <__lshift+0xa4>
 800a8a2:	bf00      	nop
 800a8a4:	0800cdf3 	.word	0x0800cdf3
 800a8a8:	0800ce04 	.word	0x0800ce04

0800a8ac <__mcmp>:
 800a8ac:	b530      	push	{r4, r5, lr}
 800a8ae:	6902      	ldr	r2, [r0, #16]
 800a8b0:	690c      	ldr	r4, [r1, #16]
 800a8b2:	1b12      	subs	r2, r2, r4
 800a8b4:	d10e      	bne.n	800a8d4 <__mcmp+0x28>
 800a8b6:	f100 0314 	add.w	r3, r0, #20
 800a8ba:	3114      	adds	r1, #20
 800a8bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8cc:	42a5      	cmp	r5, r4
 800a8ce:	d003      	beq.n	800a8d8 <__mcmp+0x2c>
 800a8d0:	d305      	bcc.n	800a8de <__mcmp+0x32>
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	bd30      	pop	{r4, r5, pc}
 800a8d8:	4283      	cmp	r3, r0
 800a8da:	d3f3      	bcc.n	800a8c4 <__mcmp+0x18>
 800a8dc:	e7fa      	b.n	800a8d4 <__mcmp+0x28>
 800a8de:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e2:	e7f7      	b.n	800a8d4 <__mcmp+0x28>

0800a8e4 <__mdiff>:
 800a8e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e8:	460c      	mov	r4, r1
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	4617      	mov	r7, r2
 800a8f2:	f7ff ffdb 	bl	800a8ac <__mcmp>
 800a8f6:	1e05      	subs	r5, r0, #0
 800a8f8:	d110      	bne.n	800a91c <__mdiff+0x38>
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f7ff fd57 	bl	800a3b0 <_Balloc>
 800a902:	b930      	cbnz	r0, 800a912 <__mdiff+0x2e>
 800a904:	4b39      	ldr	r3, [pc, #228]	; (800a9ec <__mdiff+0x108>)
 800a906:	4602      	mov	r2, r0
 800a908:	f240 2132 	movw	r1, #562	; 0x232
 800a90c:	4838      	ldr	r0, [pc, #224]	; (800a9f0 <__mdiff+0x10c>)
 800a90e:	f000 faf3 	bl	800aef8 <__assert_func>
 800a912:	2301      	movs	r3, #1
 800a914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91c:	bfa4      	itt	ge
 800a91e:	463b      	movge	r3, r7
 800a920:	4627      	movge	r7, r4
 800a922:	4630      	mov	r0, r6
 800a924:	6879      	ldr	r1, [r7, #4]
 800a926:	bfa6      	itte	ge
 800a928:	461c      	movge	r4, r3
 800a92a:	2500      	movge	r5, #0
 800a92c:	2501      	movlt	r5, #1
 800a92e:	f7ff fd3f 	bl	800a3b0 <_Balloc>
 800a932:	b920      	cbnz	r0, 800a93e <__mdiff+0x5a>
 800a934:	4b2d      	ldr	r3, [pc, #180]	; (800a9ec <__mdiff+0x108>)
 800a936:	4602      	mov	r2, r0
 800a938:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a93c:	e7e6      	b.n	800a90c <__mdiff+0x28>
 800a93e:	693e      	ldr	r6, [r7, #16]
 800a940:	60c5      	str	r5, [r0, #12]
 800a942:	6925      	ldr	r5, [r4, #16]
 800a944:	f107 0114 	add.w	r1, r7, #20
 800a948:	f104 0914 	add.w	r9, r4, #20
 800a94c:	f100 0e14 	add.w	lr, r0, #20
 800a950:	f107 0210 	add.w	r2, r7, #16
 800a954:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a958:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a95c:	46f2      	mov	sl, lr
 800a95e:	2700      	movs	r7, #0
 800a960:	f859 3b04 	ldr.w	r3, [r9], #4
 800a964:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a968:	fa1f f883 	uxth.w	r8, r3
 800a96c:	fa17 f78b 	uxtah	r7, r7, fp
 800a970:	0c1b      	lsrs	r3, r3, #16
 800a972:	eba7 0808 	sub.w	r8, r7, r8
 800a976:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a97a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a97e:	fa1f f888 	uxth.w	r8, r8
 800a982:	141f      	asrs	r7, r3, #16
 800a984:	454d      	cmp	r5, r9
 800a986:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a98a:	f84a 3b04 	str.w	r3, [sl], #4
 800a98e:	d8e7      	bhi.n	800a960 <__mdiff+0x7c>
 800a990:	1b2b      	subs	r3, r5, r4
 800a992:	3b15      	subs	r3, #21
 800a994:	f023 0303 	bic.w	r3, r3, #3
 800a998:	3304      	adds	r3, #4
 800a99a:	3415      	adds	r4, #21
 800a99c:	42a5      	cmp	r5, r4
 800a99e:	bf38      	it	cc
 800a9a0:	2304      	movcc	r3, #4
 800a9a2:	4419      	add	r1, r3
 800a9a4:	4473      	add	r3, lr
 800a9a6:	469e      	mov	lr, r3
 800a9a8:	460d      	mov	r5, r1
 800a9aa:	4565      	cmp	r5, ip
 800a9ac:	d30e      	bcc.n	800a9cc <__mdiff+0xe8>
 800a9ae:	f10c 0203 	add.w	r2, ip, #3
 800a9b2:	1a52      	subs	r2, r2, r1
 800a9b4:	f022 0203 	bic.w	r2, r2, #3
 800a9b8:	3903      	subs	r1, #3
 800a9ba:	458c      	cmp	ip, r1
 800a9bc:	bf38      	it	cc
 800a9be:	2200      	movcc	r2, #0
 800a9c0:	441a      	add	r2, r3
 800a9c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a9c6:	b17b      	cbz	r3, 800a9e8 <__mdiff+0x104>
 800a9c8:	6106      	str	r6, [r0, #16]
 800a9ca:	e7a5      	b.n	800a918 <__mdiff+0x34>
 800a9cc:	f855 8b04 	ldr.w	r8, [r5], #4
 800a9d0:	fa17 f488 	uxtah	r4, r7, r8
 800a9d4:	1422      	asrs	r2, r4, #16
 800a9d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a9da:	b2a4      	uxth	r4, r4
 800a9dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a9e0:	f84e 4b04 	str.w	r4, [lr], #4
 800a9e4:	1417      	asrs	r7, r2, #16
 800a9e6:	e7e0      	b.n	800a9aa <__mdiff+0xc6>
 800a9e8:	3e01      	subs	r6, #1
 800a9ea:	e7ea      	b.n	800a9c2 <__mdiff+0xde>
 800a9ec:	0800cdf3 	.word	0x0800cdf3
 800a9f0:	0800ce04 	.word	0x0800ce04

0800a9f4 <__d2b>:
 800a9f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9f8:	4689      	mov	r9, r1
 800a9fa:	2101      	movs	r1, #1
 800a9fc:	ec57 6b10 	vmov	r6, r7, d0
 800aa00:	4690      	mov	r8, r2
 800aa02:	f7ff fcd5 	bl	800a3b0 <_Balloc>
 800aa06:	4604      	mov	r4, r0
 800aa08:	b930      	cbnz	r0, 800aa18 <__d2b+0x24>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	4b25      	ldr	r3, [pc, #148]	; (800aaa4 <__d2b+0xb0>)
 800aa0e:	4826      	ldr	r0, [pc, #152]	; (800aaa8 <__d2b+0xb4>)
 800aa10:	f240 310a 	movw	r1, #778	; 0x30a
 800aa14:	f000 fa70 	bl	800aef8 <__assert_func>
 800aa18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa20:	bb35      	cbnz	r5, 800aa70 <__d2b+0x7c>
 800aa22:	2e00      	cmp	r6, #0
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	d028      	beq.n	800aa7a <__d2b+0x86>
 800aa28:	4668      	mov	r0, sp
 800aa2a:	9600      	str	r6, [sp, #0]
 800aa2c:	f7ff fd8c 	bl	800a548 <__lo0bits>
 800aa30:	9900      	ldr	r1, [sp, #0]
 800aa32:	b300      	cbz	r0, 800aa76 <__d2b+0x82>
 800aa34:	9a01      	ldr	r2, [sp, #4]
 800aa36:	f1c0 0320 	rsb	r3, r0, #32
 800aa3a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3e:	430b      	orrs	r3, r1
 800aa40:	40c2      	lsrs	r2, r0
 800aa42:	6163      	str	r3, [r4, #20]
 800aa44:	9201      	str	r2, [sp, #4]
 800aa46:	9b01      	ldr	r3, [sp, #4]
 800aa48:	61a3      	str	r3, [r4, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	bf14      	ite	ne
 800aa4e:	2202      	movne	r2, #2
 800aa50:	2201      	moveq	r2, #1
 800aa52:	6122      	str	r2, [r4, #16]
 800aa54:	b1d5      	cbz	r5, 800aa8c <__d2b+0x98>
 800aa56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa5a:	4405      	add	r5, r0
 800aa5c:	f8c9 5000 	str.w	r5, [r9]
 800aa60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa64:	f8c8 0000 	str.w	r0, [r8]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	b003      	add	sp, #12
 800aa6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa74:	e7d5      	b.n	800aa22 <__d2b+0x2e>
 800aa76:	6161      	str	r1, [r4, #20]
 800aa78:	e7e5      	b.n	800aa46 <__d2b+0x52>
 800aa7a:	a801      	add	r0, sp, #4
 800aa7c:	f7ff fd64 	bl	800a548 <__lo0bits>
 800aa80:	9b01      	ldr	r3, [sp, #4]
 800aa82:	6163      	str	r3, [r4, #20]
 800aa84:	2201      	movs	r2, #1
 800aa86:	6122      	str	r2, [r4, #16]
 800aa88:	3020      	adds	r0, #32
 800aa8a:	e7e3      	b.n	800aa54 <__d2b+0x60>
 800aa8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa94:	f8c9 0000 	str.w	r0, [r9]
 800aa98:	6918      	ldr	r0, [r3, #16]
 800aa9a:	f7ff fd35 	bl	800a508 <__hi0bits>
 800aa9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aaa2:	e7df      	b.n	800aa64 <__d2b+0x70>
 800aaa4:	0800cdf3 	.word	0x0800cdf3
 800aaa8:	0800ce04 	.word	0x0800ce04

0800aaac <_calloc_r>:
 800aaac:	b513      	push	{r0, r1, r4, lr}
 800aaae:	434a      	muls	r2, r1
 800aab0:	4611      	mov	r1, r2
 800aab2:	9201      	str	r2, [sp, #4]
 800aab4:	f000 f85a 	bl	800ab6c <_malloc_r>
 800aab8:	4604      	mov	r4, r0
 800aaba:	b118      	cbz	r0, 800aac4 <_calloc_r+0x18>
 800aabc:	9a01      	ldr	r2, [sp, #4]
 800aabe:	2100      	movs	r1, #0
 800aac0:	f7fe f950 	bl	8008d64 <memset>
 800aac4:	4620      	mov	r0, r4
 800aac6:	b002      	add	sp, #8
 800aac8:	bd10      	pop	{r4, pc}
	...

0800aacc <_free_r>:
 800aacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aace:	2900      	cmp	r1, #0
 800aad0:	d048      	beq.n	800ab64 <_free_r+0x98>
 800aad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad6:	9001      	str	r0, [sp, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f1a1 0404 	sub.w	r4, r1, #4
 800aade:	bfb8      	it	lt
 800aae0:	18e4      	addlt	r4, r4, r3
 800aae2:	f000 fa65 	bl	800afb0 <__malloc_lock>
 800aae6:	4a20      	ldr	r2, [pc, #128]	; (800ab68 <_free_r+0x9c>)
 800aae8:	9801      	ldr	r0, [sp, #4]
 800aaea:	6813      	ldr	r3, [r2, #0]
 800aaec:	4615      	mov	r5, r2
 800aaee:	b933      	cbnz	r3, 800aafe <_free_r+0x32>
 800aaf0:	6063      	str	r3, [r4, #4]
 800aaf2:	6014      	str	r4, [r2, #0]
 800aaf4:	b003      	add	sp, #12
 800aaf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aafa:	f000 ba5f 	b.w	800afbc <__malloc_unlock>
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	d90b      	bls.n	800ab1a <_free_r+0x4e>
 800ab02:	6821      	ldr	r1, [r4, #0]
 800ab04:	1862      	adds	r2, r4, r1
 800ab06:	4293      	cmp	r3, r2
 800ab08:	bf04      	itt	eq
 800ab0a:	681a      	ldreq	r2, [r3, #0]
 800ab0c:	685b      	ldreq	r3, [r3, #4]
 800ab0e:	6063      	str	r3, [r4, #4]
 800ab10:	bf04      	itt	eq
 800ab12:	1852      	addeq	r2, r2, r1
 800ab14:	6022      	streq	r2, [r4, #0]
 800ab16:	602c      	str	r4, [r5, #0]
 800ab18:	e7ec      	b.n	800aaf4 <_free_r+0x28>
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	b10b      	cbz	r3, 800ab24 <_free_r+0x58>
 800ab20:	42a3      	cmp	r3, r4
 800ab22:	d9fa      	bls.n	800ab1a <_free_r+0x4e>
 800ab24:	6811      	ldr	r1, [r2, #0]
 800ab26:	1855      	adds	r5, r2, r1
 800ab28:	42a5      	cmp	r5, r4
 800ab2a:	d10b      	bne.n	800ab44 <_free_r+0x78>
 800ab2c:	6824      	ldr	r4, [r4, #0]
 800ab2e:	4421      	add	r1, r4
 800ab30:	1854      	adds	r4, r2, r1
 800ab32:	42a3      	cmp	r3, r4
 800ab34:	6011      	str	r1, [r2, #0]
 800ab36:	d1dd      	bne.n	800aaf4 <_free_r+0x28>
 800ab38:	681c      	ldr	r4, [r3, #0]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	6053      	str	r3, [r2, #4]
 800ab3e:	4421      	add	r1, r4
 800ab40:	6011      	str	r1, [r2, #0]
 800ab42:	e7d7      	b.n	800aaf4 <_free_r+0x28>
 800ab44:	d902      	bls.n	800ab4c <_free_r+0x80>
 800ab46:	230c      	movs	r3, #12
 800ab48:	6003      	str	r3, [r0, #0]
 800ab4a:	e7d3      	b.n	800aaf4 <_free_r+0x28>
 800ab4c:	6825      	ldr	r5, [r4, #0]
 800ab4e:	1961      	adds	r1, r4, r5
 800ab50:	428b      	cmp	r3, r1
 800ab52:	bf04      	itt	eq
 800ab54:	6819      	ldreq	r1, [r3, #0]
 800ab56:	685b      	ldreq	r3, [r3, #4]
 800ab58:	6063      	str	r3, [r4, #4]
 800ab5a:	bf04      	itt	eq
 800ab5c:	1949      	addeq	r1, r1, r5
 800ab5e:	6021      	streq	r1, [r4, #0]
 800ab60:	6054      	str	r4, [r2, #4]
 800ab62:	e7c7      	b.n	800aaf4 <_free_r+0x28>
 800ab64:	b003      	add	sp, #12
 800ab66:	bd30      	pop	{r4, r5, pc}
 800ab68:	20000270 	.word	0x20000270

0800ab6c <_malloc_r>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	1ccd      	adds	r5, r1, #3
 800ab70:	f025 0503 	bic.w	r5, r5, #3
 800ab74:	3508      	adds	r5, #8
 800ab76:	2d0c      	cmp	r5, #12
 800ab78:	bf38      	it	cc
 800ab7a:	250c      	movcc	r5, #12
 800ab7c:	2d00      	cmp	r5, #0
 800ab7e:	4606      	mov	r6, r0
 800ab80:	db01      	blt.n	800ab86 <_malloc_r+0x1a>
 800ab82:	42a9      	cmp	r1, r5
 800ab84:	d903      	bls.n	800ab8e <_malloc_r+0x22>
 800ab86:	230c      	movs	r3, #12
 800ab88:	6033      	str	r3, [r6, #0]
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab8e:	f000 fa0f 	bl	800afb0 <__malloc_lock>
 800ab92:	4921      	ldr	r1, [pc, #132]	; (800ac18 <_malloc_r+0xac>)
 800ab94:	680a      	ldr	r2, [r1, #0]
 800ab96:	4614      	mov	r4, r2
 800ab98:	b99c      	cbnz	r4, 800abc2 <_malloc_r+0x56>
 800ab9a:	4f20      	ldr	r7, [pc, #128]	; (800ac1c <_malloc_r+0xb0>)
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	b923      	cbnz	r3, 800abaa <_malloc_r+0x3e>
 800aba0:	4621      	mov	r1, r4
 800aba2:	4630      	mov	r0, r6
 800aba4:	f000 f998 	bl	800aed8 <_sbrk_r>
 800aba8:	6038      	str	r0, [r7, #0]
 800abaa:	4629      	mov	r1, r5
 800abac:	4630      	mov	r0, r6
 800abae:	f000 f993 	bl	800aed8 <_sbrk_r>
 800abb2:	1c43      	adds	r3, r0, #1
 800abb4:	d123      	bne.n	800abfe <_malloc_r+0x92>
 800abb6:	230c      	movs	r3, #12
 800abb8:	6033      	str	r3, [r6, #0]
 800abba:	4630      	mov	r0, r6
 800abbc:	f000 f9fe 	bl	800afbc <__malloc_unlock>
 800abc0:	e7e3      	b.n	800ab8a <_malloc_r+0x1e>
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	1b5b      	subs	r3, r3, r5
 800abc6:	d417      	bmi.n	800abf8 <_malloc_r+0x8c>
 800abc8:	2b0b      	cmp	r3, #11
 800abca:	d903      	bls.n	800abd4 <_malloc_r+0x68>
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	441c      	add	r4, r3
 800abd0:	6025      	str	r5, [r4, #0]
 800abd2:	e004      	b.n	800abde <_malloc_r+0x72>
 800abd4:	6863      	ldr	r3, [r4, #4]
 800abd6:	42a2      	cmp	r2, r4
 800abd8:	bf0c      	ite	eq
 800abda:	600b      	streq	r3, [r1, #0]
 800abdc:	6053      	strne	r3, [r2, #4]
 800abde:	4630      	mov	r0, r6
 800abe0:	f000 f9ec 	bl	800afbc <__malloc_unlock>
 800abe4:	f104 000b 	add.w	r0, r4, #11
 800abe8:	1d23      	adds	r3, r4, #4
 800abea:	f020 0007 	bic.w	r0, r0, #7
 800abee:	1ac2      	subs	r2, r0, r3
 800abf0:	d0cc      	beq.n	800ab8c <_malloc_r+0x20>
 800abf2:	1a1b      	subs	r3, r3, r0
 800abf4:	50a3      	str	r3, [r4, r2]
 800abf6:	e7c9      	b.n	800ab8c <_malloc_r+0x20>
 800abf8:	4622      	mov	r2, r4
 800abfa:	6864      	ldr	r4, [r4, #4]
 800abfc:	e7cc      	b.n	800ab98 <_malloc_r+0x2c>
 800abfe:	1cc4      	adds	r4, r0, #3
 800ac00:	f024 0403 	bic.w	r4, r4, #3
 800ac04:	42a0      	cmp	r0, r4
 800ac06:	d0e3      	beq.n	800abd0 <_malloc_r+0x64>
 800ac08:	1a21      	subs	r1, r4, r0
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f000 f964 	bl	800aed8 <_sbrk_r>
 800ac10:	3001      	adds	r0, #1
 800ac12:	d1dd      	bne.n	800abd0 <_malloc_r+0x64>
 800ac14:	e7cf      	b.n	800abb6 <_malloc_r+0x4a>
 800ac16:	bf00      	nop
 800ac18:	20000270 	.word	0x20000270
 800ac1c:	20000274 	.word	0x20000274

0800ac20 <__ssputs_r>:
 800ac20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac24:	688e      	ldr	r6, [r1, #8]
 800ac26:	429e      	cmp	r6, r3
 800ac28:	4682      	mov	sl, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	4690      	mov	r8, r2
 800ac2e:	461f      	mov	r7, r3
 800ac30:	d838      	bhi.n	800aca4 <__ssputs_r+0x84>
 800ac32:	898a      	ldrh	r2, [r1, #12]
 800ac34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac38:	d032      	beq.n	800aca0 <__ssputs_r+0x80>
 800ac3a:	6825      	ldr	r5, [r4, #0]
 800ac3c:	6909      	ldr	r1, [r1, #16]
 800ac3e:	eba5 0901 	sub.w	r9, r5, r1
 800ac42:	6965      	ldr	r5, [r4, #20]
 800ac44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	444b      	add	r3, r9
 800ac50:	106d      	asrs	r5, r5, #1
 800ac52:	429d      	cmp	r5, r3
 800ac54:	bf38      	it	cc
 800ac56:	461d      	movcc	r5, r3
 800ac58:	0553      	lsls	r3, r2, #21
 800ac5a:	d531      	bpl.n	800acc0 <__ssputs_r+0xa0>
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	f7ff ff85 	bl	800ab6c <_malloc_r>
 800ac62:	4606      	mov	r6, r0
 800ac64:	b950      	cbnz	r0, 800ac7c <__ssputs_r+0x5c>
 800ac66:	230c      	movs	r3, #12
 800ac68:	f8ca 3000 	str.w	r3, [sl]
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac72:	81a3      	strh	r3, [r4, #12]
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295
 800ac78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7c:	6921      	ldr	r1, [r4, #16]
 800ac7e:	464a      	mov	r2, r9
 800ac80:	f7fe f862 	bl	8008d48 <memcpy>
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac8e:	81a3      	strh	r3, [r4, #12]
 800ac90:	6126      	str	r6, [r4, #16]
 800ac92:	6165      	str	r5, [r4, #20]
 800ac94:	444e      	add	r6, r9
 800ac96:	eba5 0509 	sub.w	r5, r5, r9
 800ac9a:	6026      	str	r6, [r4, #0]
 800ac9c:	60a5      	str	r5, [r4, #8]
 800ac9e:	463e      	mov	r6, r7
 800aca0:	42be      	cmp	r6, r7
 800aca2:	d900      	bls.n	800aca6 <__ssputs_r+0x86>
 800aca4:	463e      	mov	r6, r7
 800aca6:	4632      	mov	r2, r6
 800aca8:	6820      	ldr	r0, [r4, #0]
 800acaa:	4641      	mov	r1, r8
 800acac:	f000 f966 	bl	800af7c <memmove>
 800acb0:	68a3      	ldr	r3, [r4, #8]
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	1b9b      	subs	r3, r3, r6
 800acb6:	4432      	add	r2, r6
 800acb8:	60a3      	str	r3, [r4, #8]
 800acba:	6022      	str	r2, [r4, #0]
 800acbc:	2000      	movs	r0, #0
 800acbe:	e7db      	b.n	800ac78 <__ssputs_r+0x58>
 800acc0:	462a      	mov	r2, r5
 800acc2:	f000 f981 	bl	800afc8 <_realloc_r>
 800acc6:	4606      	mov	r6, r0
 800acc8:	2800      	cmp	r0, #0
 800acca:	d1e1      	bne.n	800ac90 <__ssputs_r+0x70>
 800accc:	6921      	ldr	r1, [r4, #16]
 800acce:	4650      	mov	r0, sl
 800acd0:	f7ff fefc 	bl	800aacc <_free_r>
 800acd4:	e7c7      	b.n	800ac66 <__ssputs_r+0x46>
	...

0800acd8 <_svfiprintf_r>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	4698      	mov	r8, r3
 800acde:	898b      	ldrh	r3, [r1, #12]
 800ace0:	061b      	lsls	r3, r3, #24
 800ace2:	b09d      	sub	sp, #116	; 0x74
 800ace4:	4607      	mov	r7, r0
 800ace6:	460d      	mov	r5, r1
 800ace8:	4614      	mov	r4, r2
 800acea:	d50e      	bpl.n	800ad0a <_svfiprintf_r+0x32>
 800acec:	690b      	ldr	r3, [r1, #16]
 800acee:	b963      	cbnz	r3, 800ad0a <_svfiprintf_r+0x32>
 800acf0:	2140      	movs	r1, #64	; 0x40
 800acf2:	f7ff ff3b 	bl	800ab6c <_malloc_r>
 800acf6:	6028      	str	r0, [r5, #0]
 800acf8:	6128      	str	r0, [r5, #16]
 800acfa:	b920      	cbnz	r0, 800ad06 <_svfiprintf_r+0x2e>
 800acfc:	230c      	movs	r3, #12
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	f04f 30ff 	mov.w	r0, #4294967295
 800ad04:	e0d1      	b.n	800aeaa <_svfiprintf_r+0x1d2>
 800ad06:	2340      	movs	r3, #64	; 0x40
 800ad08:	616b      	str	r3, [r5, #20]
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0e:	2320      	movs	r3, #32
 800ad10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad18:	2330      	movs	r3, #48	; 0x30
 800ad1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aec4 <_svfiprintf_r+0x1ec>
 800ad1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad22:	f04f 0901 	mov.w	r9, #1
 800ad26:	4623      	mov	r3, r4
 800ad28:	469a      	mov	sl, r3
 800ad2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad2e:	b10a      	cbz	r2, 800ad34 <_svfiprintf_r+0x5c>
 800ad30:	2a25      	cmp	r2, #37	; 0x25
 800ad32:	d1f9      	bne.n	800ad28 <_svfiprintf_r+0x50>
 800ad34:	ebba 0b04 	subs.w	fp, sl, r4
 800ad38:	d00b      	beq.n	800ad52 <_svfiprintf_r+0x7a>
 800ad3a:	465b      	mov	r3, fp
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	4629      	mov	r1, r5
 800ad40:	4638      	mov	r0, r7
 800ad42:	f7ff ff6d 	bl	800ac20 <__ssputs_r>
 800ad46:	3001      	adds	r0, #1
 800ad48:	f000 80aa 	beq.w	800aea0 <_svfiprintf_r+0x1c8>
 800ad4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad4e:	445a      	add	r2, fp
 800ad50:	9209      	str	r2, [sp, #36]	; 0x24
 800ad52:	f89a 3000 	ldrb.w	r3, [sl]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f000 80a2 	beq.w	800aea0 <_svfiprintf_r+0x1c8>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad66:	f10a 0a01 	add.w	sl, sl, #1
 800ad6a:	9304      	str	r3, [sp, #16]
 800ad6c:	9307      	str	r3, [sp, #28]
 800ad6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad72:	931a      	str	r3, [sp, #104]	; 0x68
 800ad74:	4654      	mov	r4, sl
 800ad76:	2205      	movs	r2, #5
 800ad78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad7c:	4851      	ldr	r0, [pc, #324]	; (800aec4 <_svfiprintf_r+0x1ec>)
 800ad7e:	f7f5 fa37 	bl	80001f0 <memchr>
 800ad82:	9a04      	ldr	r2, [sp, #16]
 800ad84:	b9d8      	cbnz	r0, 800adbe <_svfiprintf_r+0xe6>
 800ad86:	06d0      	lsls	r0, r2, #27
 800ad88:	bf44      	itt	mi
 800ad8a:	2320      	movmi	r3, #32
 800ad8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad90:	0711      	lsls	r1, r2, #28
 800ad92:	bf44      	itt	mi
 800ad94:	232b      	movmi	r3, #43	; 0x2b
 800ad96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad9e:	2b2a      	cmp	r3, #42	; 0x2a
 800ada0:	d015      	beq.n	800adce <_svfiprintf_r+0xf6>
 800ada2:	9a07      	ldr	r2, [sp, #28]
 800ada4:	4654      	mov	r4, sl
 800ada6:	2000      	movs	r0, #0
 800ada8:	f04f 0c0a 	mov.w	ip, #10
 800adac:	4621      	mov	r1, r4
 800adae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adb2:	3b30      	subs	r3, #48	; 0x30
 800adb4:	2b09      	cmp	r3, #9
 800adb6:	d94e      	bls.n	800ae56 <_svfiprintf_r+0x17e>
 800adb8:	b1b0      	cbz	r0, 800ade8 <_svfiprintf_r+0x110>
 800adba:	9207      	str	r2, [sp, #28]
 800adbc:	e014      	b.n	800ade8 <_svfiprintf_r+0x110>
 800adbe:	eba0 0308 	sub.w	r3, r0, r8
 800adc2:	fa09 f303 	lsl.w	r3, r9, r3
 800adc6:	4313      	orrs	r3, r2
 800adc8:	9304      	str	r3, [sp, #16]
 800adca:	46a2      	mov	sl, r4
 800adcc:	e7d2      	b.n	800ad74 <_svfiprintf_r+0x9c>
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	1d19      	adds	r1, r3, #4
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	9103      	str	r1, [sp, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	bfbb      	ittet	lt
 800adda:	425b      	neglt	r3, r3
 800addc:	f042 0202 	orrlt.w	r2, r2, #2
 800ade0:	9307      	strge	r3, [sp, #28]
 800ade2:	9307      	strlt	r3, [sp, #28]
 800ade4:	bfb8      	it	lt
 800ade6:	9204      	strlt	r2, [sp, #16]
 800ade8:	7823      	ldrb	r3, [r4, #0]
 800adea:	2b2e      	cmp	r3, #46	; 0x2e
 800adec:	d10c      	bne.n	800ae08 <_svfiprintf_r+0x130>
 800adee:	7863      	ldrb	r3, [r4, #1]
 800adf0:	2b2a      	cmp	r3, #42	; 0x2a
 800adf2:	d135      	bne.n	800ae60 <_svfiprintf_r+0x188>
 800adf4:	9b03      	ldr	r3, [sp, #12]
 800adf6:	1d1a      	adds	r2, r3, #4
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	9203      	str	r2, [sp, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	bfb8      	it	lt
 800ae00:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae04:	3402      	adds	r4, #2
 800ae06:	9305      	str	r3, [sp, #20]
 800ae08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aed4 <_svfiprintf_r+0x1fc>
 800ae0c:	7821      	ldrb	r1, [r4, #0]
 800ae0e:	2203      	movs	r2, #3
 800ae10:	4650      	mov	r0, sl
 800ae12:	f7f5 f9ed 	bl	80001f0 <memchr>
 800ae16:	b140      	cbz	r0, 800ae2a <_svfiprintf_r+0x152>
 800ae18:	2340      	movs	r3, #64	; 0x40
 800ae1a:	eba0 000a 	sub.w	r0, r0, sl
 800ae1e:	fa03 f000 	lsl.w	r0, r3, r0
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	4303      	orrs	r3, r0
 800ae26:	3401      	adds	r4, #1
 800ae28:	9304      	str	r3, [sp, #16]
 800ae2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2e:	4826      	ldr	r0, [pc, #152]	; (800aec8 <_svfiprintf_r+0x1f0>)
 800ae30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae34:	2206      	movs	r2, #6
 800ae36:	f7f5 f9db 	bl	80001f0 <memchr>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d038      	beq.n	800aeb0 <_svfiprintf_r+0x1d8>
 800ae3e:	4b23      	ldr	r3, [pc, #140]	; (800aecc <_svfiprintf_r+0x1f4>)
 800ae40:	bb1b      	cbnz	r3, 800ae8a <_svfiprintf_r+0x1b2>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	3307      	adds	r3, #7
 800ae46:	f023 0307 	bic.w	r3, r3, #7
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	9303      	str	r3, [sp, #12]
 800ae4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae50:	4433      	add	r3, r6
 800ae52:	9309      	str	r3, [sp, #36]	; 0x24
 800ae54:	e767      	b.n	800ad26 <_svfiprintf_r+0x4e>
 800ae56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	2001      	movs	r0, #1
 800ae5e:	e7a5      	b.n	800adac <_svfiprintf_r+0xd4>
 800ae60:	2300      	movs	r3, #0
 800ae62:	3401      	adds	r4, #1
 800ae64:	9305      	str	r3, [sp, #20]
 800ae66:	4619      	mov	r1, r3
 800ae68:	f04f 0c0a 	mov.w	ip, #10
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae72:	3a30      	subs	r2, #48	; 0x30
 800ae74:	2a09      	cmp	r2, #9
 800ae76:	d903      	bls.n	800ae80 <_svfiprintf_r+0x1a8>
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0c5      	beq.n	800ae08 <_svfiprintf_r+0x130>
 800ae7c:	9105      	str	r1, [sp, #20]
 800ae7e:	e7c3      	b.n	800ae08 <_svfiprintf_r+0x130>
 800ae80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae84:	4604      	mov	r4, r0
 800ae86:	2301      	movs	r3, #1
 800ae88:	e7f0      	b.n	800ae6c <_svfiprintf_r+0x194>
 800ae8a:	ab03      	add	r3, sp, #12
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	462a      	mov	r2, r5
 800ae90:	4b0f      	ldr	r3, [pc, #60]	; (800aed0 <_svfiprintf_r+0x1f8>)
 800ae92:	a904      	add	r1, sp, #16
 800ae94:	4638      	mov	r0, r7
 800ae96:	f7fe f80d 	bl	8008eb4 <_printf_float>
 800ae9a:	1c42      	adds	r2, r0, #1
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	d1d6      	bne.n	800ae4e <_svfiprintf_r+0x176>
 800aea0:	89ab      	ldrh	r3, [r5, #12]
 800aea2:	065b      	lsls	r3, r3, #25
 800aea4:	f53f af2c 	bmi.w	800ad00 <_svfiprintf_r+0x28>
 800aea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeaa:	b01d      	add	sp, #116	; 0x74
 800aeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb0:	ab03      	add	r3, sp, #12
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <_svfiprintf_r+0x1f8>)
 800aeb8:	a904      	add	r1, sp, #16
 800aeba:	4638      	mov	r0, r7
 800aebc:	f7fe fa9e 	bl	80093fc <_printf_i>
 800aec0:	e7eb      	b.n	800ae9a <_svfiprintf_r+0x1c2>
 800aec2:	bf00      	nop
 800aec4:	0800cf64 	.word	0x0800cf64
 800aec8:	0800cf6e 	.word	0x0800cf6e
 800aecc:	08008eb5 	.word	0x08008eb5
 800aed0:	0800ac21 	.word	0x0800ac21
 800aed4:	0800cf6a 	.word	0x0800cf6a

0800aed8 <_sbrk_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d06      	ldr	r5, [pc, #24]	; (800aef4 <_sbrk_r+0x1c>)
 800aedc:	2300      	movs	r3, #0
 800aede:	4604      	mov	r4, r0
 800aee0:	4608      	mov	r0, r1
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	f7f9 fbe8 	bl	80046b8 <_sbrk>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_sbrk_r+0x1a>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_sbrk_r+0x1a>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	200012e0 	.word	0x200012e0

0800aef8 <__assert_func>:
 800aef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aefa:	4614      	mov	r4, r2
 800aefc:	461a      	mov	r2, r3
 800aefe:	4b09      	ldr	r3, [pc, #36]	; (800af24 <__assert_func+0x2c>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4605      	mov	r5, r0
 800af04:	68d8      	ldr	r0, [r3, #12]
 800af06:	b14c      	cbz	r4, 800af1c <__assert_func+0x24>
 800af08:	4b07      	ldr	r3, [pc, #28]	; (800af28 <__assert_func+0x30>)
 800af0a:	9100      	str	r1, [sp, #0]
 800af0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af10:	4906      	ldr	r1, [pc, #24]	; (800af2c <__assert_func+0x34>)
 800af12:	462b      	mov	r3, r5
 800af14:	f000 f80e 	bl	800af34 <fiprintf>
 800af18:	f000 faa4 	bl	800b464 <abort>
 800af1c:	4b04      	ldr	r3, [pc, #16]	; (800af30 <__assert_func+0x38>)
 800af1e:	461c      	mov	r4, r3
 800af20:	e7f3      	b.n	800af0a <__assert_func+0x12>
 800af22:	bf00      	nop
 800af24:	20000040 	.word	0x20000040
 800af28:	0800cf75 	.word	0x0800cf75
 800af2c:	0800cf82 	.word	0x0800cf82
 800af30:	0800cfb0 	.word	0x0800cfb0

0800af34 <fiprintf>:
 800af34:	b40e      	push	{r1, r2, r3}
 800af36:	b503      	push	{r0, r1, lr}
 800af38:	4601      	mov	r1, r0
 800af3a:	ab03      	add	r3, sp, #12
 800af3c:	4805      	ldr	r0, [pc, #20]	; (800af54 <fiprintf+0x20>)
 800af3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af42:	6800      	ldr	r0, [r0, #0]
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	f000 f88f 	bl	800b068 <_vfiprintf_r>
 800af4a:	b002      	add	sp, #8
 800af4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af50:	b003      	add	sp, #12
 800af52:	4770      	bx	lr
 800af54:	20000040 	.word	0x20000040

0800af58 <__ascii_mbtowc>:
 800af58:	b082      	sub	sp, #8
 800af5a:	b901      	cbnz	r1, 800af5e <__ascii_mbtowc+0x6>
 800af5c:	a901      	add	r1, sp, #4
 800af5e:	b142      	cbz	r2, 800af72 <__ascii_mbtowc+0x1a>
 800af60:	b14b      	cbz	r3, 800af76 <__ascii_mbtowc+0x1e>
 800af62:	7813      	ldrb	r3, [r2, #0]
 800af64:	600b      	str	r3, [r1, #0]
 800af66:	7812      	ldrb	r2, [r2, #0]
 800af68:	1e10      	subs	r0, r2, #0
 800af6a:	bf18      	it	ne
 800af6c:	2001      	movne	r0, #1
 800af6e:	b002      	add	sp, #8
 800af70:	4770      	bx	lr
 800af72:	4610      	mov	r0, r2
 800af74:	e7fb      	b.n	800af6e <__ascii_mbtowc+0x16>
 800af76:	f06f 0001 	mvn.w	r0, #1
 800af7a:	e7f8      	b.n	800af6e <__ascii_mbtowc+0x16>

0800af7c <memmove>:
 800af7c:	4288      	cmp	r0, r1
 800af7e:	b510      	push	{r4, lr}
 800af80:	eb01 0402 	add.w	r4, r1, r2
 800af84:	d902      	bls.n	800af8c <memmove+0x10>
 800af86:	4284      	cmp	r4, r0
 800af88:	4623      	mov	r3, r4
 800af8a:	d807      	bhi.n	800af9c <memmove+0x20>
 800af8c:	1e43      	subs	r3, r0, #1
 800af8e:	42a1      	cmp	r1, r4
 800af90:	d008      	beq.n	800afa4 <memmove+0x28>
 800af92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af9a:	e7f8      	b.n	800af8e <memmove+0x12>
 800af9c:	4402      	add	r2, r0
 800af9e:	4601      	mov	r1, r0
 800afa0:	428a      	cmp	r2, r1
 800afa2:	d100      	bne.n	800afa6 <memmove+0x2a>
 800afa4:	bd10      	pop	{r4, pc}
 800afa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800afaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800afae:	e7f7      	b.n	800afa0 <memmove+0x24>

0800afb0 <__malloc_lock>:
 800afb0:	4801      	ldr	r0, [pc, #4]	; (800afb8 <__malloc_lock+0x8>)
 800afb2:	f000 bc17 	b.w	800b7e4 <__retarget_lock_acquire_recursive>
 800afb6:	bf00      	nop
 800afb8:	200012e8 	.word	0x200012e8

0800afbc <__malloc_unlock>:
 800afbc:	4801      	ldr	r0, [pc, #4]	; (800afc4 <__malloc_unlock+0x8>)
 800afbe:	f000 bc12 	b.w	800b7e6 <__retarget_lock_release_recursive>
 800afc2:	bf00      	nop
 800afc4:	200012e8 	.word	0x200012e8

0800afc8 <_realloc_r>:
 800afc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afca:	4607      	mov	r7, r0
 800afcc:	4614      	mov	r4, r2
 800afce:	460e      	mov	r6, r1
 800afd0:	b921      	cbnz	r1, 800afdc <_realloc_r+0x14>
 800afd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800afd6:	4611      	mov	r1, r2
 800afd8:	f7ff bdc8 	b.w	800ab6c <_malloc_r>
 800afdc:	b922      	cbnz	r2, 800afe8 <_realloc_r+0x20>
 800afde:	f7ff fd75 	bl	800aacc <_free_r>
 800afe2:	4625      	mov	r5, r4
 800afe4:	4628      	mov	r0, r5
 800afe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afe8:	f000 fc62 	bl	800b8b0 <_malloc_usable_size_r>
 800afec:	42a0      	cmp	r0, r4
 800afee:	d20f      	bcs.n	800b010 <_realloc_r+0x48>
 800aff0:	4621      	mov	r1, r4
 800aff2:	4638      	mov	r0, r7
 800aff4:	f7ff fdba 	bl	800ab6c <_malloc_r>
 800aff8:	4605      	mov	r5, r0
 800affa:	2800      	cmp	r0, #0
 800affc:	d0f2      	beq.n	800afe4 <_realloc_r+0x1c>
 800affe:	4631      	mov	r1, r6
 800b000:	4622      	mov	r2, r4
 800b002:	f7fd fea1 	bl	8008d48 <memcpy>
 800b006:	4631      	mov	r1, r6
 800b008:	4638      	mov	r0, r7
 800b00a:	f7ff fd5f 	bl	800aacc <_free_r>
 800b00e:	e7e9      	b.n	800afe4 <_realloc_r+0x1c>
 800b010:	4635      	mov	r5, r6
 800b012:	e7e7      	b.n	800afe4 <_realloc_r+0x1c>

0800b014 <__sfputc_r>:
 800b014:	6893      	ldr	r3, [r2, #8]
 800b016:	3b01      	subs	r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	b410      	push	{r4}
 800b01c:	6093      	str	r3, [r2, #8]
 800b01e:	da08      	bge.n	800b032 <__sfputc_r+0x1e>
 800b020:	6994      	ldr	r4, [r2, #24]
 800b022:	42a3      	cmp	r3, r4
 800b024:	db01      	blt.n	800b02a <__sfputc_r+0x16>
 800b026:	290a      	cmp	r1, #10
 800b028:	d103      	bne.n	800b032 <__sfputc_r+0x1e>
 800b02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02e:	f000 b94b 	b.w	800b2c8 <__swbuf_r>
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	1c58      	adds	r0, r3, #1
 800b036:	6010      	str	r0, [r2, #0]
 800b038:	7019      	strb	r1, [r3, #0]
 800b03a:	4608      	mov	r0, r1
 800b03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <__sfputs_r>:
 800b042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b044:	4606      	mov	r6, r0
 800b046:	460f      	mov	r7, r1
 800b048:	4614      	mov	r4, r2
 800b04a:	18d5      	adds	r5, r2, r3
 800b04c:	42ac      	cmp	r4, r5
 800b04e:	d101      	bne.n	800b054 <__sfputs_r+0x12>
 800b050:	2000      	movs	r0, #0
 800b052:	e007      	b.n	800b064 <__sfputs_r+0x22>
 800b054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b058:	463a      	mov	r2, r7
 800b05a:	4630      	mov	r0, r6
 800b05c:	f7ff ffda 	bl	800b014 <__sfputc_r>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d1f3      	bne.n	800b04c <__sfputs_r+0xa>
 800b064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b068 <_vfiprintf_r>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	460d      	mov	r5, r1
 800b06e:	b09d      	sub	sp, #116	; 0x74
 800b070:	4614      	mov	r4, r2
 800b072:	4698      	mov	r8, r3
 800b074:	4606      	mov	r6, r0
 800b076:	b118      	cbz	r0, 800b080 <_vfiprintf_r+0x18>
 800b078:	6983      	ldr	r3, [r0, #24]
 800b07a:	b90b      	cbnz	r3, 800b080 <_vfiprintf_r+0x18>
 800b07c:	f000 fb14 	bl	800b6a8 <__sinit>
 800b080:	4b89      	ldr	r3, [pc, #548]	; (800b2a8 <_vfiprintf_r+0x240>)
 800b082:	429d      	cmp	r5, r3
 800b084:	d11b      	bne.n	800b0be <_vfiprintf_r+0x56>
 800b086:	6875      	ldr	r5, [r6, #4]
 800b088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b08a:	07d9      	lsls	r1, r3, #31
 800b08c:	d405      	bmi.n	800b09a <_vfiprintf_r+0x32>
 800b08e:	89ab      	ldrh	r3, [r5, #12]
 800b090:	059a      	lsls	r2, r3, #22
 800b092:	d402      	bmi.n	800b09a <_vfiprintf_r+0x32>
 800b094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b096:	f000 fba5 	bl	800b7e4 <__retarget_lock_acquire_recursive>
 800b09a:	89ab      	ldrh	r3, [r5, #12]
 800b09c:	071b      	lsls	r3, r3, #28
 800b09e:	d501      	bpl.n	800b0a4 <_vfiprintf_r+0x3c>
 800b0a0:	692b      	ldr	r3, [r5, #16]
 800b0a2:	b9eb      	cbnz	r3, 800b0e0 <_vfiprintf_r+0x78>
 800b0a4:	4629      	mov	r1, r5
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f000 f96e 	bl	800b388 <__swsetup_r>
 800b0ac:	b1c0      	cbz	r0, 800b0e0 <_vfiprintf_r+0x78>
 800b0ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0b0:	07dc      	lsls	r4, r3, #31
 800b0b2:	d50e      	bpl.n	800b0d2 <_vfiprintf_r+0x6a>
 800b0b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b8:	b01d      	add	sp, #116	; 0x74
 800b0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0be:	4b7b      	ldr	r3, [pc, #492]	; (800b2ac <_vfiprintf_r+0x244>)
 800b0c0:	429d      	cmp	r5, r3
 800b0c2:	d101      	bne.n	800b0c8 <_vfiprintf_r+0x60>
 800b0c4:	68b5      	ldr	r5, [r6, #8]
 800b0c6:	e7df      	b.n	800b088 <_vfiprintf_r+0x20>
 800b0c8:	4b79      	ldr	r3, [pc, #484]	; (800b2b0 <_vfiprintf_r+0x248>)
 800b0ca:	429d      	cmp	r5, r3
 800b0cc:	bf08      	it	eq
 800b0ce:	68f5      	ldreq	r5, [r6, #12]
 800b0d0:	e7da      	b.n	800b088 <_vfiprintf_r+0x20>
 800b0d2:	89ab      	ldrh	r3, [r5, #12]
 800b0d4:	0598      	lsls	r0, r3, #22
 800b0d6:	d4ed      	bmi.n	800b0b4 <_vfiprintf_r+0x4c>
 800b0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0da:	f000 fb84 	bl	800b7e6 <__retarget_lock_release_recursive>
 800b0de:	e7e9      	b.n	800b0b4 <_vfiprintf_r+0x4c>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e4:	2320      	movs	r3, #32
 800b0e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ee:	2330      	movs	r3, #48	; 0x30
 800b0f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b2b4 <_vfiprintf_r+0x24c>
 800b0f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0f8:	f04f 0901 	mov.w	r9, #1
 800b0fc:	4623      	mov	r3, r4
 800b0fe:	469a      	mov	sl, r3
 800b100:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b104:	b10a      	cbz	r2, 800b10a <_vfiprintf_r+0xa2>
 800b106:	2a25      	cmp	r2, #37	; 0x25
 800b108:	d1f9      	bne.n	800b0fe <_vfiprintf_r+0x96>
 800b10a:	ebba 0b04 	subs.w	fp, sl, r4
 800b10e:	d00b      	beq.n	800b128 <_vfiprintf_r+0xc0>
 800b110:	465b      	mov	r3, fp
 800b112:	4622      	mov	r2, r4
 800b114:	4629      	mov	r1, r5
 800b116:	4630      	mov	r0, r6
 800b118:	f7ff ff93 	bl	800b042 <__sfputs_r>
 800b11c:	3001      	adds	r0, #1
 800b11e:	f000 80aa 	beq.w	800b276 <_vfiprintf_r+0x20e>
 800b122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b124:	445a      	add	r2, fp
 800b126:	9209      	str	r2, [sp, #36]	; 0x24
 800b128:	f89a 3000 	ldrb.w	r3, [sl]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 80a2 	beq.w	800b276 <_vfiprintf_r+0x20e>
 800b132:	2300      	movs	r3, #0
 800b134:	f04f 32ff 	mov.w	r2, #4294967295
 800b138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b13c:	f10a 0a01 	add.w	sl, sl, #1
 800b140:	9304      	str	r3, [sp, #16]
 800b142:	9307      	str	r3, [sp, #28]
 800b144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b148:	931a      	str	r3, [sp, #104]	; 0x68
 800b14a:	4654      	mov	r4, sl
 800b14c:	2205      	movs	r2, #5
 800b14e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b152:	4858      	ldr	r0, [pc, #352]	; (800b2b4 <_vfiprintf_r+0x24c>)
 800b154:	f7f5 f84c 	bl	80001f0 <memchr>
 800b158:	9a04      	ldr	r2, [sp, #16]
 800b15a:	b9d8      	cbnz	r0, 800b194 <_vfiprintf_r+0x12c>
 800b15c:	06d1      	lsls	r1, r2, #27
 800b15e:	bf44      	itt	mi
 800b160:	2320      	movmi	r3, #32
 800b162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b166:	0713      	lsls	r3, r2, #28
 800b168:	bf44      	itt	mi
 800b16a:	232b      	movmi	r3, #43	; 0x2b
 800b16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b170:	f89a 3000 	ldrb.w	r3, [sl]
 800b174:	2b2a      	cmp	r3, #42	; 0x2a
 800b176:	d015      	beq.n	800b1a4 <_vfiprintf_r+0x13c>
 800b178:	9a07      	ldr	r2, [sp, #28]
 800b17a:	4654      	mov	r4, sl
 800b17c:	2000      	movs	r0, #0
 800b17e:	f04f 0c0a 	mov.w	ip, #10
 800b182:	4621      	mov	r1, r4
 800b184:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b188:	3b30      	subs	r3, #48	; 0x30
 800b18a:	2b09      	cmp	r3, #9
 800b18c:	d94e      	bls.n	800b22c <_vfiprintf_r+0x1c4>
 800b18e:	b1b0      	cbz	r0, 800b1be <_vfiprintf_r+0x156>
 800b190:	9207      	str	r2, [sp, #28]
 800b192:	e014      	b.n	800b1be <_vfiprintf_r+0x156>
 800b194:	eba0 0308 	sub.w	r3, r0, r8
 800b198:	fa09 f303 	lsl.w	r3, r9, r3
 800b19c:	4313      	orrs	r3, r2
 800b19e:	9304      	str	r3, [sp, #16]
 800b1a0:	46a2      	mov	sl, r4
 800b1a2:	e7d2      	b.n	800b14a <_vfiprintf_r+0xe2>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	1d19      	adds	r1, r3, #4
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	9103      	str	r1, [sp, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	bfbb      	ittet	lt
 800b1b0:	425b      	neglt	r3, r3
 800b1b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b1b6:	9307      	strge	r3, [sp, #28]
 800b1b8:	9307      	strlt	r3, [sp, #28]
 800b1ba:	bfb8      	it	lt
 800b1bc:	9204      	strlt	r2, [sp, #16]
 800b1be:	7823      	ldrb	r3, [r4, #0]
 800b1c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b1c2:	d10c      	bne.n	800b1de <_vfiprintf_r+0x176>
 800b1c4:	7863      	ldrb	r3, [r4, #1]
 800b1c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c8:	d135      	bne.n	800b236 <_vfiprintf_r+0x1ce>
 800b1ca:	9b03      	ldr	r3, [sp, #12]
 800b1cc:	1d1a      	adds	r2, r3, #4
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	9203      	str	r2, [sp, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	bfb8      	it	lt
 800b1d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1da:	3402      	adds	r4, #2
 800b1dc:	9305      	str	r3, [sp, #20]
 800b1de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b2c4 <_vfiprintf_r+0x25c>
 800b1e2:	7821      	ldrb	r1, [r4, #0]
 800b1e4:	2203      	movs	r2, #3
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	f7f5 f802 	bl	80001f0 <memchr>
 800b1ec:	b140      	cbz	r0, 800b200 <_vfiprintf_r+0x198>
 800b1ee:	2340      	movs	r3, #64	; 0x40
 800b1f0:	eba0 000a 	sub.w	r0, r0, sl
 800b1f4:	fa03 f000 	lsl.w	r0, r3, r0
 800b1f8:	9b04      	ldr	r3, [sp, #16]
 800b1fa:	4303      	orrs	r3, r0
 800b1fc:	3401      	adds	r4, #1
 800b1fe:	9304      	str	r3, [sp, #16]
 800b200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b204:	482c      	ldr	r0, [pc, #176]	; (800b2b8 <_vfiprintf_r+0x250>)
 800b206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b20a:	2206      	movs	r2, #6
 800b20c:	f7f4 fff0 	bl	80001f0 <memchr>
 800b210:	2800      	cmp	r0, #0
 800b212:	d03f      	beq.n	800b294 <_vfiprintf_r+0x22c>
 800b214:	4b29      	ldr	r3, [pc, #164]	; (800b2bc <_vfiprintf_r+0x254>)
 800b216:	bb1b      	cbnz	r3, 800b260 <_vfiprintf_r+0x1f8>
 800b218:	9b03      	ldr	r3, [sp, #12]
 800b21a:	3307      	adds	r3, #7
 800b21c:	f023 0307 	bic.w	r3, r3, #7
 800b220:	3308      	adds	r3, #8
 800b222:	9303      	str	r3, [sp, #12]
 800b224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b226:	443b      	add	r3, r7
 800b228:	9309      	str	r3, [sp, #36]	; 0x24
 800b22a:	e767      	b.n	800b0fc <_vfiprintf_r+0x94>
 800b22c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b230:	460c      	mov	r4, r1
 800b232:	2001      	movs	r0, #1
 800b234:	e7a5      	b.n	800b182 <_vfiprintf_r+0x11a>
 800b236:	2300      	movs	r3, #0
 800b238:	3401      	adds	r4, #1
 800b23a:	9305      	str	r3, [sp, #20]
 800b23c:	4619      	mov	r1, r3
 800b23e:	f04f 0c0a 	mov.w	ip, #10
 800b242:	4620      	mov	r0, r4
 800b244:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b248:	3a30      	subs	r2, #48	; 0x30
 800b24a:	2a09      	cmp	r2, #9
 800b24c:	d903      	bls.n	800b256 <_vfiprintf_r+0x1ee>
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0c5      	beq.n	800b1de <_vfiprintf_r+0x176>
 800b252:	9105      	str	r1, [sp, #20]
 800b254:	e7c3      	b.n	800b1de <_vfiprintf_r+0x176>
 800b256:	fb0c 2101 	mla	r1, ip, r1, r2
 800b25a:	4604      	mov	r4, r0
 800b25c:	2301      	movs	r3, #1
 800b25e:	e7f0      	b.n	800b242 <_vfiprintf_r+0x1da>
 800b260:	ab03      	add	r3, sp, #12
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	462a      	mov	r2, r5
 800b266:	4b16      	ldr	r3, [pc, #88]	; (800b2c0 <_vfiprintf_r+0x258>)
 800b268:	a904      	add	r1, sp, #16
 800b26a:	4630      	mov	r0, r6
 800b26c:	f7fd fe22 	bl	8008eb4 <_printf_float>
 800b270:	4607      	mov	r7, r0
 800b272:	1c78      	adds	r0, r7, #1
 800b274:	d1d6      	bne.n	800b224 <_vfiprintf_r+0x1bc>
 800b276:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b278:	07d9      	lsls	r1, r3, #31
 800b27a:	d405      	bmi.n	800b288 <_vfiprintf_r+0x220>
 800b27c:	89ab      	ldrh	r3, [r5, #12]
 800b27e:	059a      	lsls	r2, r3, #22
 800b280:	d402      	bmi.n	800b288 <_vfiprintf_r+0x220>
 800b282:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b284:	f000 faaf 	bl	800b7e6 <__retarget_lock_release_recursive>
 800b288:	89ab      	ldrh	r3, [r5, #12]
 800b28a:	065b      	lsls	r3, r3, #25
 800b28c:	f53f af12 	bmi.w	800b0b4 <_vfiprintf_r+0x4c>
 800b290:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b292:	e711      	b.n	800b0b8 <_vfiprintf_r+0x50>
 800b294:	ab03      	add	r3, sp, #12
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	462a      	mov	r2, r5
 800b29a:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <_vfiprintf_r+0x258>)
 800b29c:	a904      	add	r1, sp, #16
 800b29e:	4630      	mov	r0, r6
 800b2a0:	f7fe f8ac 	bl	80093fc <_printf_i>
 800b2a4:	e7e4      	b.n	800b270 <_vfiprintf_r+0x208>
 800b2a6:	bf00      	nop
 800b2a8:	0800d0dc 	.word	0x0800d0dc
 800b2ac:	0800d0fc 	.word	0x0800d0fc
 800b2b0:	0800d0bc 	.word	0x0800d0bc
 800b2b4:	0800cf64 	.word	0x0800cf64
 800b2b8:	0800cf6e 	.word	0x0800cf6e
 800b2bc:	08008eb5 	.word	0x08008eb5
 800b2c0:	0800b043 	.word	0x0800b043
 800b2c4:	0800cf6a 	.word	0x0800cf6a

0800b2c8 <__swbuf_r>:
 800b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ca:	460e      	mov	r6, r1
 800b2cc:	4614      	mov	r4, r2
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	b118      	cbz	r0, 800b2da <__swbuf_r+0x12>
 800b2d2:	6983      	ldr	r3, [r0, #24]
 800b2d4:	b90b      	cbnz	r3, 800b2da <__swbuf_r+0x12>
 800b2d6:	f000 f9e7 	bl	800b6a8 <__sinit>
 800b2da:	4b21      	ldr	r3, [pc, #132]	; (800b360 <__swbuf_r+0x98>)
 800b2dc:	429c      	cmp	r4, r3
 800b2de:	d12b      	bne.n	800b338 <__swbuf_r+0x70>
 800b2e0:	686c      	ldr	r4, [r5, #4]
 800b2e2:	69a3      	ldr	r3, [r4, #24]
 800b2e4:	60a3      	str	r3, [r4, #8]
 800b2e6:	89a3      	ldrh	r3, [r4, #12]
 800b2e8:	071a      	lsls	r2, r3, #28
 800b2ea:	d52f      	bpl.n	800b34c <__swbuf_r+0x84>
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	b36b      	cbz	r3, 800b34c <__swbuf_r+0x84>
 800b2f0:	6923      	ldr	r3, [r4, #16]
 800b2f2:	6820      	ldr	r0, [r4, #0]
 800b2f4:	1ac0      	subs	r0, r0, r3
 800b2f6:	6963      	ldr	r3, [r4, #20]
 800b2f8:	b2f6      	uxtb	r6, r6
 800b2fa:	4283      	cmp	r3, r0
 800b2fc:	4637      	mov	r7, r6
 800b2fe:	dc04      	bgt.n	800b30a <__swbuf_r+0x42>
 800b300:	4621      	mov	r1, r4
 800b302:	4628      	mov	r0, r5
 800b304:	f000 f93c 	bl	800b580 <_fflush_r>
 800b308:	bb30      	cbnz	r0, 800b358 <__swbuf_r+0x90>
 800b30a:	68a3      	ldr	r3, [r4, #8]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	60a3      	str	r3, [r4, #8]
 800b310:	6823      	ldr	r3, [r4, #0]
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	6022      	str	r2, [r4, #0]
 800b316:	701e      	strb	r6, [r3, #0]
 800b318:	6963      	ldr	r3, [r4, #20]
 800b31a:	3001      	adds	r0, #1
 800b31c:	4283      	cmp	r3, r0
 800b31e:	d004      	beq.n	800b32a <__swbuf_r+0x62>
 800b320:	89a3      	ldrh	r3, [r4, #12]
 800b322:	07db      	lsls	r3, r3, #31
 800b324:	d506      	bpl.n	800b334 <__swbuf_r+0x6c>
 800b326:	2e0a      	cmp	r6, #10
 800b328:	d104      	bne.n	800b334 <__swbuf_r+0x6c>
 800b32a:	4621      	mov	r1, r4
 800b32c:	4628      	mov	r0, r5
 800b32e:	f000 f927 	bl	800b580 <_fflush_r>
 800b332:	b988      	cbnz	r0, 800b358 <__swbuf_r+0x90>
 800b334:	4638      	mov	r0, r7
 800b336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b338:	4b0a      	ldr	r3, [pc, #40]	; (800b364 <__swbuf_r+0x9c>)
 800b33a:	429c      	cmp	r4, r3
 800b33c:	d101      	bne.n	800b342 <__swbuf_r+0x7a>
 800b33e:	68ac      	ldr	r4, [r5, #8]
 800b340:	e7cf      	b.n	800b2e2 <__swbuf_r+0x1a>
 800b342:	4b09      	ldr	r3, [pc, #36]	; (800b368 <__swbuf_r+0xa0>)
 800b344:	429c      	cmp	r4, r3
 800b346:	bf08      	it	eq
 800b348:	68ec      	ldreq	r4, [r5, #12]
 800b34a:	e7ca      	b.n	800b2e2 <__swbuf_r+0x1a>
 800b34c:	4621      	mov	r1, r4
 800b34e:	4628      	mov	r0, r5
 800b350:	f000 f81a 	bl	800b388 <__swsetup_r>
 800b354:	2800      	cmp	r0, #0
 800b356:	d0cb      	beq.n	800b2f0 <__swbuf_r+0x28>
 800b358:	f04f 37ff 	mov.w	r7, #4294967295
 800b35c:	e7ea      	b.n	800b334 <__swbuf_r+0x6c>
 800b35e:	bf00      	nop
 800b360:	0800d0dc 	.word	0x0800d0dc
 800b364:	0800d0fc 	.word	0x0800d0fc
 800b368:	0800d0bc 	.word	0x0800d0bc

0800b36c <__ascii_wctomb>:
 800b36c:	b149      	cbz	r1, 800b382 <__ascii_wctomb+0x16>
 800b36e:	2aff      	cmp	r2, #255	; 0xff
 800b370:	bf85      	ittet	hi
 800b372:	238a      	movhi	r3, #138	; 0x8a
 800b374:	6003      	strhi	r3, [r0, #0]
 800b376:	700a      	strbls	r2, [r1, #0]
 800b378:	f04f 30ff 	movhi.w	r0, #4294967295
 800b37c:	bf98      	it	ls
 800b37e:	2001      	movls	r0, #1
 800b380:	4770      	bx	lr
 800b382:	4608      	mov	r0, r1
 800b384:	4770      	bx	lr
	...

0800b388 <__swsetup_r>:
 800b388:	4b32      	ldr	r3, [pc, #200]	; (800b454 <__swsetup_r+0xcc>)
 800b38a:	b570      	push	{r4, r5, r6, lr}
 800b38c:	681d      	ldr	r5, [r3, #0]
 800b38e:	4606      	mov	r6, r0
 800b390:	460c      	mov	r4, r1
 800b392:	b125      	cbz	r5, 800b39e <__swsetup_r+0x16>
 800b394:	69ab      	ldr	r3, [r5, #24]
 800b396:	b913      	cbnz	r3, 800b39e <__swsetup_r+0x16>
 800b398:	4628      	mov	r0, r5
 800b39a:	f000 f985 	bl	800b6a8 <__sinit>
 800b39e:	4b2e      	ldr	r3, [pc, #184]	; (800b458 <__swsetup_r+0xd0>)
 800b3a0:	429c      	cmp	r4, r3
 800b3a2:	d10f      	bne.n	800b3c4 <__swsetup_r+0x3c>
 800b3a4:	686c      	ldr	r4, [r5, #4]
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3ac:	0719      	lsls	r1, r3, #28
 800b3ae:	d42c      	bmi.n	800b40a <__swsetup_r+0x82>
 800b3b0:	06dd      	lsls	r5, r3, #27
 800b3b2:	d411      	bmi.n	800b3d8 <__swsetup_r+0x50>
 800b3b4:	2309      	movs	r3, #9
 800b3b6:	6033      	str	r3, [r6, #0]
 800b3b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3bc:	81a3      	strh	r3, [r4, #12]
 800b3be:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c2:	e03e      	b.n	800b442 <__swsetup_r+0xba>
 800b3c4:	4b25      	ldr	r3, [pc, #148]	; (800b45c <__swsetup_r+0xd4>)
 800b3c6:	429c      	cmp	r4, r3
 800b3c8:	d101      	bne.n	800b3ce <__swsetup_r+0x46>
 800b3ca:	68ac      	ldr	r4, [r5, #8]
 800b3cc:	e7eb      	b.n	800b3a6 <__swsetup_r+0x1e>
 800b3ce:	4b24      	ldr	r3, [pc, #144]	; (800b460 <__swsetup_r+0xd8>)
 800b3d0:	429c      	cmp	r4, r3
 800b3d2:	bf08      	it	eq
 800b3d4:	68ec      	ldreq	r4, [r5, #12]
 800b3d6:	e7e6      	b.n	800b3a6 <__swsetup_r+0x1e>
 800b3d8:	0758      	lsls	r0, r3, #29
 800b3da:	d512      	bpl.n	800b402 <__swsetup_r+0x7a>
 800b3dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3de:	b141      	cbz	r1, 800b3f2 <__swsetup_r+0x6a>
 800b3e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3e4:	4299      	cmp	r1, r3
 800b3e6:	d002      	beq.n	800b3ee <__swsetup_r+0x66>
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	f7ff fb6f 	bl	800aacc <_free_r>
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3f8:	81a3      	strh	r3, [r4, #12]
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	6063      	str	r3, [r4, #4]
 800b3fe:	6923      	ldr	r3, [r4, #16]
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	89a3      	ldrh	r3, [r4, #12]
 800b404:	f043 0308 	orr.w	r3, r3, #8
 800b408:	81a3      	strh	r3, [r4, #12]
 800b40a:	6923      	ldr	r3, [r4, #16]
 800b40c:	b94b      	cbnz	r3, 800b422 <__swsetup_r+0x9a>
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b418:	d003      	beq.n	800b422 <__swsetup_r+0x9a>
 800b41a:	4621      	mov	r1, r4
 800b41c:	4630      	mov	r0, r6
 800b41e:	f000 fa07 	bl	800b830 <__smakebuf_r>
 800b422:	89a0      	ldrh	r0, [r4, #12]
 800b424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b428:	f010 0301 	ands.w	r3, r0, #1
 800b42c:	d00a      	beq.n	800b444 <__swsetup_r+0xbc>
 800b42e:	2300      	movs	r3, #0
 800b430:	60a3      	str	r3, [r4, #8]
 800b432:	6963      	ldr	r3, [r4, #20]
 800b434:	425b      	negs	r3, r3
 800b436:	61a3      	str	r3, [r4, #24]
 800b438:	6923      	ldr	r3, [r4, #16]
 800b43a:	b943      	cbnz	r3, 800b44e <__swsetup_r+0xc6>
 800b43c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b440:	d1ba      	bne.n	800b3b8 <__swsetup_r+0x30>
 800b442:	bd70      	pop	{r4, r5, r6, pc}
 800b444:	0781      	lsls	r1, r0, #30
 800b446:	bf58      	it	pl
 800b448:	6963      	ldrpl	r3, [r4, #20]
 800b44a:	60a3      	str	r3, [r4, #8]
 800b44c:	e7f4      	b.n	800b438 <__swsetup_r+0xb0>
 800b44e:	2000      	movs	r0, #0
 800b450:	e7f7      	b.n	800b442 <__swsetup_r+0xba>
 800b452:	bf00      	nop
 800b454:	20000040 	.word	0x20000040
 800b458:	0800d0dc 	.word	0x0800d0dc
 800b45c:	0800d0fc 	.word	0x0800d0fc
 800b460:	0800d0bc 	.word	0x0800d0bc

0800b464 <abort>:
 800b464:	b508      	push	{r3, lr}
 800b466:	2006      	movs	r0, #6
 800b468:	f000 fa52 	bl	800b910 <raise>
 800b46c:	2001      	movs	r0, #1
 800b46e:	f7f9 f8f3 	bl	8004658 <_exit>
	...

0800b474 <__sflush_r>:
 800b474:	898a      	ldrh	r2, [r1, #12]
 800b476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47a:	4605      	mov	r5, r0
 800b47c:	0710      	lsls	r0, r2, #28
 800b47e:	460c      	mov	r4, r1
 800b480:	d458      	bmi.n	800b534 <__sflush_r+0xc0>
 800b482:	684b      	ldr	r3, [r1, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	dc05      	bgt.n	800b494 <__sflush_r+0x20>
 800b488:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	dc02      	bgt.n	800b494 <__sflush_r+0x20>
 800b48e:	2000      	movs	r0, #0
 800b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b496:	2e00      	cmp	r6, #0
 800b498:	d0f9      	beq.n	800b48e <__sflush_r+0x1a>
 800b49a:	2300      	movs	r3, #0
 800b49c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4a0:	682f      	ldr	r7, [r5, #0]
 800b4a2:	602b      	str	r3, [r5, #0]
 800b4a4:	d032      	beq.n	800b50c <__sflush_r+0x98>
 800b4a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	075a      	lsls	r2, r3, #29
 800b4ac:	d505      	bpl.n	800b4ba <__sflush_r+0x46>
 800b4ae:	6863      	ldr	r3, [r4, #4]
 800b4b0:	1ac0      	subs	r0, r0, r3
 800b4b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4b4:	b10b      	cbz	r3, 800b4ba <__sflush_r+0x46>
 800b4b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4b8:	1ac0      	subs	r0, r0, r3
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	4602      	mov	r2, r0
 800b4be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4c0:	6a21      	ldr	r1, [r4, #32]
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	47b0      	blx	r6
 800b4c6:	1c43      	adds	r3, r0, #1
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	d106      	bne.n	800b4da <__sflush_r+0x66>
 800b4cc:	6829      	ldr	r1, [r5, #0]
 800b4ce:	291d      	cmp	r1, #29
 800b4d0:	d82c      	bhi.n	800b52c <__sflush_r+0xb8>
 800b4d2:	4a2a      	ldr	r2, [pc, #168]	; (800b57c <__sflush_r+0x108>)
 800b4d4:	40ca      	lsrs	r2, r1
 800b4d6:	07d6      	lsls	r6, r2, #31
 800b4d8:	d528      	bpl.n	800b52c <__sflush_r+0xb8>
 800b4da:	2200      	movs	r2, #0
 800b4dc:	6062      	str	r2, [r4, #4]
 800b4de:	04d9      	lsls	r1, r3, #19
 800b4e0:	6922      	ldr	r2, [r4, #16]
 800b4e2:	6022      	str	r2, [r4, #0]
 800b4e4:	d504      	bpl.n	800b4f0 <__sflush_r+0x7c>
 800b4e6:	1c42      	adds	r2, r0, #1
 800b4e8:	d101      	bne.n	800b4ee <__sflush_r+0x7a>
 800b4ea:	682b      	ldr	r3, [r5, #0]
 800b4ec:	b903      	cbnz	r3, 800b4f0 <__sflush_r+0x7c>
 800b4ee:	6560      	str	r0, [r4, #84]	; 0x54
 800b4f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4f2:	602f      	str	r7, [r5, #0]
 800b4f4:	2900      	cmp	r1, #0
 800b4f6:	d0ca      	beq.n	800b48e <__sflush_r+0x1a>
 800b4f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4fc:	4299      	cmp	r1, r3
 800b4fe:	d002      	beq.n	800b506 <__sflush_r+0x92>
 800b500:	4628      	mov	r0, r5
 800b502:	f7ff fae3 	bl	800aacc <_free_r>
 800b506:	2000      	movs	r0, #0
 800b508:	6360      	str	r0, [r4, #52]	; 0x34
 800b50a:	e7c1      	b.n	800b490 <__sflush_r+0x1c>
 800b50c:	6a21      	ldr	r1, [r4, #32]
 800b50e:	2301      	movs	r3, #1
 800b510:	4628      	mov	r0, r5
 800b512:	47b0      	blx	r6
 800b514:	1c41      	adds	r1, r0, #1
 800b516:	d1c7      	bne.n	800b4a8 <__sflush_r+0x34>
 800b518:	682b      	ldr	r3, [r5, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d0c4      	beq.n	800b4a8 <__sflush_r+0x34>
 800b51e:	2b1d      	cmp	r3, #29
 800b520:	d001      	beq.n	800b526 <__sflush_r+0xb2>
 800b522:	2b16      	cmp	r3, #22
 800b524:	d101      	bne.n	800b52a <__sflush_r+0xb6>
 800b526:	602f      	str	r7, [r5, #0]
 800b528:	e7b1      	b.n	800b48e <__sflush_r+0x1a>
 800b52a:	89a3      	ldrh	r3, [r4, #12]
 800b52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b530:	81a3      	strh	r3, [r4, #12]
 800b532:	e7ad      	b.n	800b490 <__sflush_r+0x1c>
 800b534:	690f      	ldr	r7, [r1, #16]
 800b536:	2f00      	cmp	r7, #0
 800b538:	d0a9      	beq.n	800b48e <__sflush_r+0x1a>
 800b53a:	0793      	lsls	r3, r2, #30
 800b53c:	680e      	ldr	r6, [r1, #0]
 800b53e:	bf08      	it	eq
 800b540:	694b      	ldreq	r3, [r1, #20]
 800b542:	600f      	str	r7, [r1, #0]
 800b544:	bf18      	it	ne
 800b546:	2300      	movne	r3, #0
 800b548:	eba6 0807 	sub.w	r8, r6, r7
 800b54c:	608b      	str	r3, [r1, #8]
 800b54e:	f1b8 0f00 	cmp.w	r8, #0
 800b552:	dd9c      	ble.n	800b48e <__sflush_r+0x1a>
 800b554:	6a21      	ldr	r1, [r4, #32]
 800b556:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b558:	4643      	mov	r3, r8
 800b55a:	463a      	mov	r2, r7
 800b55c:	4628      	mov	r0, r5
 800b55e:	47b0      	blx	r6
 800b560:	2800      	cmp	r0, #0
 800b562:	dc06      	bgt.n	800b572 <__sflush_r+0xfe>
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b56a:	81a3      	strh	r3, [r4, #12]
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295
 800b570:	e78e      	b.n	800b490 <__sflush_r+0x1c>
 800b572:	4407      	add	r7, r0
 800b574:	eba8 0800 	sub.w	r8, r8, r0
 800b578:	e7e9      	b.n	800b54e <__sflush_r+0xda>
 800b57a:	bf00      	nop
 800b57c:	20400001 	.word	0x20400001

0800b580 <_fflush_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	690b      	ldr	r3, [r1, #16]
 800b584:	4605      	mov	r5, r0
 800b586:	460c      	mov	r4, r1
 800b588:	b913      	cbnz	r3, 800b590 <_fflush_r+0x10>
 800b58a:	2500      	movs	r5, #0
 800b58c:	4628      	mov	r0, r5
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	b118      	cbz	r0, 800b59a <_fflush_r+0x1a>
 800b592:	6983      	ldr	r3, [r0, #24]
 800b594:	b90b      	cbnz	r3, 800b59a <_fflush_r+0x1a>
 800b596:	f000 f887 	bl	800b6a8 <__sinit>
 800b59a:	4b14      	ldr	r3, [pc, #80]	; (800b5ec <_fflush_r+0x6c>)
 800b59c:	429c      	cmp	r4, r3
 800b59e:	d11b      	bne.n	800b5d8 <_fflush_r+0x58>
 800b5a0:	686c      	ldr	r4, [r5, #4]
 800b5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d0ef      	beq.n	800b58a <_fflush_r+0xa>
 800b5aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5ac:	07d0      	lsls	r0, r2, #31
 800b5ae:	d404      	bmi.n	800b5ba <_fflush_r+0x3a>
 800b5b0:	0599      	lsls	r1, r3, #22
 800b5b2:	d402      	bmi.n	800b5ba <_fflush_r+0x3a>
 800b5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5b6:	f000 f915 	bl	800b7e4 <__retarget_lock_acquire_recursive>
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	4621      	mov	r1, r4
 800b5be:	f7ff ff59 	bl	800b474 <__sflush_r>
 800b5c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5c4:	07da      	lsls	r2, r3, #31
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	d4e0      	bmi.n	800b58c <_fflush_r+0xc>
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	059b      	lsls	r3, r3, #22
 800b5ce:	d4dd      	bmi.n	800b58c <_fflush_r+0xc>
 800b5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5d2:	f000 f908 	bl	800b7e6 <__retarget_lock_release_recursive>
 800b5d6:	e7d9      	b.n	800b58c <_fflush_r+0xc>
 800b5d8:	4b05      	ldr	r3, [pc, #20]	; (800b5f0 <_fflush_r+0x70>)
 800b5da:	429c      	cmp	r4, r3
 800b5dc:	d101      	bne.n	800b5e2 <_fflush_r+0x62>
 800b5de:	68ac      	ldr	r4, [r5, #8]
 800b5e0:	e7df      	b.n	800b5a2 <_fflush_r+0x22>
 800b5e2:	4b04      	ldr	r3, [pc, #16]	; (800b5f4 <_fflush_r+0x74>)
 800b5e4:	429c      	cmp	r4, r3
 800b5e6:	bf08      	it	eq
 800b5e8:	68ec      	ldreq	r4, [r5, #12]
 800b5ea:	e7da      	b.n	800b5a2 <_fflush_r+0x22>
 800b5ec:	0800d0dc 	.word	0x0800d0dc
 800b5f0:	0800d0fc 	.word	0x0800d0fc
 800b5f4:	0800d0bc 	.word	0x0800d0bc

0800b5f8 <std>:
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	b510      	push	{r4, lr}
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b606:	6083      	str	r3, [r0, #8]
 800b608:	8181      	strh	r1, [r0, #12]
 800b60a:	6643      	str	r3, [r0, #100]	; 0x64
 800b60c:	81c2      	strh	r2, [r0, #14]
 800b60e:	6183      	str	r3, [r0, #24]
 800b610:	4619      	mov	r1, r3
 800b612:	2208      	movs	r2, #8
 800b614:	305c      	adds	r0, #92	; 0x5c
 800b616:	f7fd fba5 	bl	8008d64 <memset>
 800b61a:	4b05      	ldr	r3, [pc, #20]	; (800b630 <std+0x38>)
 800b61c:	6263      	str	r3, [r4, #36]	; 0x24
 800b61e:	4b05      	ldr	r3, [pc, #20]	; (800b634 <std+0x3c>)
 800b620:	62a3      	str	r3, [r4, #40]	; 0x28
 800b622:	4b05      	ldr	r3, [pc, #20]	; (800b638 <std+0x40>)
 800b624:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b626:	4b05      	ldr	r3, [pc, #20]	; (800b63c <std+0x44>)
 800b628:	6224      	str	r4, [r4, #32]
 800b62a:	6323      	str	r3, [r4, #48]	; 0x30
 800b62c:	bd10      	pop	{r4, pc}
 800b62e:	bf00      	nop
 800b630:	0800b949 	.word	0x0800b949
 800b634:	0800b96b 	.word	0x0800b96b
 800b638:	0800b9a3 	.word	0x0800b9a3
 800b63c:	0800b9c7 	.word	0x0800b9c7

0800b640 <_cleanup_r>:
 800b640:	4901      	ldr	r1, [pc, #4]	; (800b648 <_cleanup_r+0x8>)
 800b642:	f000 b8af 	b.w	800b7a4 <_fwalk_reent>
 800b646:	bf00      	nop
 800b648:	0800b581 	.word	0x0800b581

0800b64c <__sfmoreglue>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	1e4a      	subs	r2, r1, #1
 800b650:	2568      	movs	r5, #104	; 0x68
 800b652:	4355      	muls	r5, r2
 800b654:	460e      	mov	r6, r1
 800b656:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b65a:	f7ff fa87 	bl	800ab6c <_malloc_r>
 800b65e:	4604      	mov	r4, r0
 800b660:	b140      	cbz	r0, 800b674 <__sfmoreglue+0x28>
 800b662:	2100      	movs	r1, #0
 800b664:	e9c0 1600 	strd	r1, r6, [r0]
 800b668:	300c      	adds	r0, #12
 800b66a:	60a0      	str	r0, [r4, #8]
 800b66c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b670:	f7fd fb78 	bl	8008d64 <memset>
 800b674:	4620      	mov	r0, r4
 800b676:	bd70      	pop	{r4, r5, r6, pc}

0800b678 <__sfp_lock_acquire>:
 800b678:	4801      	ldr	r0, [pc, #4]	; (800b680 <__sfp_lock_acquire+0x8>)
 800b67a:	f000 b8b3 	b.w	800b7e4 <__retarget_lock_acquire_recursive>
 800b67e:	bf00      	nop
 800b680:	200012ec 	.word	0x200012ec

0800b684 <__sfp_lock_release>:
 800b684:	4801      	ldr	r0, [pc, #4]	; (800b68c <__sfp_lock_release+0x8>)
 800b686:	f000 b8ae 	b.w	800b7e6 <__retarget_lock_release_recursive>
 800b68a:	bf00      	nop
 800b68c:	200012ec 	.word	0x200012ec

0800b690 <__sinit_lock_acquire>:
 800b690:	4801      	ldr	r0, [pc, #4]	; (800b698 <__sinit_lock_acquire+0x8>)
 800b692:	f000 b8a7 	b.w	800b7e4 <__retarget_lock_acquire_recursive>
 800b696:	bf00      	nop
 800b698:	200012e7 	.word	0x200012e7

0800b69c <__sinit_lock_release>:
 800b69c:	4801      	ldr	r0, [pc, #4]	; (800b6a4 <__sinit_lock_release+0x8>)
 800b69e:	f000 b8a2 	b.w	800b7e6 <__retarget_lock_release_recursive>
 800b6a2:	bf00      	nop
 800b6a4:	200012e7 	.word	0x200012e7

0800b6a8 <__sinit>:
 800b6a8:	b510      	push	{r4, lr}
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	f7ff fff0 	bl	800b690 <__sinit_lock_acquire>
 800b6b0:	69a3      	ldr	r3, [r4, #24]
 800b6b2:	b11b      	cbz	r3, 800b6bc <__sinit+0x14>
 800b6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6b8:	f7ff bff0 	b.w	800b69c <__sinit_lock_release>
 800b6bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b6c0:	6523      	str	r3, [r4, #80]	; 0x50
 800b6c2:	4b13      	ldr	r3, [pc, #76]	; (800b710 <__sinit+0x68>)
 800b6c4:	4a13      	ldr	r2, [pc, #76]	; (800b714 <__sinit+0x6c>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b6ca:	42a3      	cmp	r3, r4
 800b6cc:	bf04      	itt	eq
 800b6ce:	2301      	moveq	r3, #1
 800b6d0:	61a3      	streq	r3, [r4, #24]
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f000 f820 	bl	800b718 <__sfp>
 800b6d8:	6060      	str	r0, [r4, #4]
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f000 f81c 	bl	800b718 <__sfp>
 800b6e0:	60a0      	str	r0, [r4, #8]
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f000 f818 	bl	800b718 <__sfp>
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	60e0      	str	r0, [r4, #12]
 800b6ec:	2104      	movs	r1, #4
 800b6ee:	6860      	ldr	r0, [r4, #4]
 800b6f0:	f7ff ff82 	bl	800b5f8 <std>
 800b6f4:	68a0      	ldr	r0, [r4, #8]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	2109      	movs	r1, #9
 800b6fa:	f7ff ff7d 	bl	800b5f8 <std>
 800b6fe:	68e0      	ldr	r0, [r4, #12]
 800b700:	2202      	movs	r2, #2
 800b702:	2112      	movs	r1, #18
 800b704:	f7ff ff78 	bl	800b5f8 <std>
 800b708:	2301      	movs	r3, #1
 800b70a:	61a3      	str	r3, [r4, #24]
 800b70c:	e7d2      	b.n	800b6b4 <__sinit+0xc>
 800b70e:	bf00      	nop
 800b710:	0800cd38 	.word	0x0800cd38
 800b714:	0800b641 	.word	0x0800b641

0800b718 <__sfp>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	4607      	mov	r7, r0
 800b71c:	f7ff ffac 	bl	800b678 <__sfp_lock_acquire>
 800b720:	4b1e      	ldr	r3, [pc, #120]	; (800b79c <__sfp+0x84>)
 800b722:	681e      	ldr	r6, [r3, #0]
 800b724:	69b3      	ldr	r3, [r6, #24]
 800b726:	b913      	cbnz	r3, 800b72e <__sfp+0x16>
 800b728:	4630      	mov	r0, r6
 800b72a:	f7ff ffbd 	bl	800b6a8 <__sinit>
 800b72e:	3648      	adds	r6, #72	; 0x48
 800b730:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b734:	3b01      	subs	r3, #1
 800b736:	d503      	bpl.n	800b740 <__sfp+0x28>
 800b738:	6833      	ldr	r3, [r6, #0]
 800b73a:	b30b      	cbz	r3, 800b780 <__sfp+0x68>
 800b73c:	6836      	ldr	r6, [r6, #0]
 800b73e:	e7f7      	b.n	800b730 <__sfp+0x18>
 800b740:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b744:	b9d5      	cbnz	r5, 800b77c <__sfp+0x64>
 800b746:	4b16      	ldr	r3, [pc, #88]	; (800b7a0 <__sfp+0x88>)
 800b748:	60e3      	str	r3, [r4, #12]
 800b74a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b74e:	6665      	str	r5, [r4, #100]	; 0x64
 800b750:	f000 f847 	bl	800b7e2 <__retarget_lock_init_recursive>
 800b754:	f7ff ff96 	bl	800b684 <__sfp_lock_release>
 800b758:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b75c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b760:	6025      	str	r5, [r4, #0]
 800b762:	61a5      	str	r5, [r4, #24]
 800b764:	2208      	movs	r2, #8
 800b766:	4629      	mov	r1, r5
 800b768:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b76c:	f7fd fafa 	bl	8008d64 <memset>
 800b770:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b774:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b778:	4620      	mov	r0, r4
 800b77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b77c:	3468      	adds	r4, #104	; 0x68
 800b77e:	e7d9      	b.n	800b734 <__sfp+0x1c>
 800b780:	2104      	movs	r1, #4
 800b782:	4638      	mov	r0, r7
 800b784:	f7ff ff62 	bl	800b64c <__sfmoreglue>
 800b788:	4604      	mov	r4, r0
 800b78a:	6030      	str	r0, [r6, #0]
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d1d5      	bne.n	800b73c <__sfp+0x24>
 800b790:	f7ff ff78 	bl	800b684 <__sfp_lock_release>
 800b794:	230c      	movs	r3, #12
 800b796:	603b      	str	r3, [r7, #0]
 800b798:	e7ee      	b.n	800b778 <__sfp+0x60>
 800b79a:	bf00      	nop
 800b79c:	0800cd38 	.word	0x0800cd38
 800b7a0:	ffff0001 	.word	0xffff0001

0800b7a4 <_fwalk_reent>:
 800b7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	4688      	mov	r8, r1
 800b7ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b7b0:	2700      	movs	r7, #0
 800b7b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b7b6:	f1b9 0901 	subs.w	r9, r9, #1
 800b7ba:	d505      	bpl.n	800b7c8 <_fwalk_reent+0x24>
 800b7bc:	6824      	ldr	r4, [r4, #0]
 800b7be:	2c00      	cmp	r4, #0
 800b7c0:	d1f7      	bne.n	800b7b2 <_fwalk_reent+0xe>
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c8:	89ab      	ldrh	r3, [r5, #12]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d907      	bls.n	800b7de <_fwalk_reent+0x3a>
 800b7ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	d003      	beq.n	800b7de <_fwalk_reent+0x3a>
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4630      	mov	r0, r6
 800b7da:	47c0      	blx	r8
 800b7dc:	4307      	orrs	r7, r0
 800b7de:	3568      	adds	r5, #104	; 0x68
 800b7e0:	e7e9      	b.n	800b7b6 <_fwalk_reent+0x12>

0800b7e2 <__retarget_lock_init_recursive>:
 800b7e2:	4770      	bx	lr

0800b7e4 <__retarget_lock_acquire_recursive>:
 800b7e4:	4770      	bx	lr

0800b7e6 <__retarget_lock_release_recursive>:
 800b7e6:	4770      	bx	lr

0800b7e8 <__swhatbuf_r>:
 800b7e8:	b570      	push	{r4, r5, r6, lr}
 800b7ea:	460e      	mov	r6, r1
 800b7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f0:	2900      	cmp	r1, #0
 800b7f2:	b096      	sub	sp, #88	; 0x58
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	461d      	mov	r5, r3
 800b7f8:	da07      	bge.n	800b80a <__swhatbuf_r+0x22>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	602b      	str	r3, [r5, #0]
 800b7fe:	89b3      	ldrh	r3, [r6, #12]
 800b800:	061a      	lsls	r2, r3, #24
 800b802:	d410      	bmi.n	800b826 <__swhatbuf_r+0x3e>
 800b804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b808:	e00e      	b.n	800b828 <__swhatbuf_r+0x40>
 800b80a:	466a      	mov	r2, sp
 800b80c:	f000 f902 	bl	800ba14 <_fstat_r>
 800b810:	2800      	cmp	r0, #0
 800b812:	dbf2      	blt.n	800b7fa <__swhatbuf_r+0x12>
 800b814:	9a01      	ldr	r2, [sp, #4]
 800b816:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b81a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b81e:	425a      	negs	r2, r3
 800b820:	415a      	adcs	r2, r3
 800b822:	602a      	str	r2, [r5, #0]
 800b824:	e7ee      	b.n	800b804 <__swhatbuf_r+0x1c>
 800b826:	2340      	movs	r3, #64	; 0x40
 800b828:	2000      	movs	r0, #0
 800b82a:	6023      	str	r3, [r4, #0]
 800b82c:	b016      	add	sp, #88	; 0x58
 800b82e:	bd70      	pop	{r4, r5, r6, pc}

0800b830 <__smakebuf_r>:
 800b830:	898b      	ldrh	r3, [r1, #12]
 800b832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b834:	079d      	lsls	r5, r3, #30
 800b836:	4606      	mov	r6, r0
 800b838:	460c      	mov	r4, r1
 800b83a:	d507      	bpl.n	800b84c <__smakebuf_r+0x1c>
 800b83c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	6123      	str	r3, [r4, #16]
 800b844:	2301      	movs	r3, #1
 800b846:	6163      	str	r3, [r4, #20]
 800b848:	b002      	add	sp, #8
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
 800b84c:	ab01      	add	r3, sp, #4
 800b84e:	466a      	mov	r2, sp
 800b850:	f7ff ffca 	bl	800b7e8 <__swhatbuf_r>
 800b854:	9900      	ldr	r1, [sp, #0]
 800b856:	4605      	mov	r5, r0
 800b858:	4630      	mov	r0, r6
 800b85a:	f7ff f987 	bl	800ab6c <_malloc_r>
 800b85e:	b948      	cbnz	r0, 800b874 <__smakebuf_r+0x44>
 800b860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b864:	059a      	lsls	r2, r3, #22
 800b866:	d4ef      	bmi.n	800b848 <__smakebuf_r+0x18>
 800b868:	f023 0303 	bic.w	r3, r3, #3
 800b86c:	f043 0302 	orr.w	r3, r3, #2
 800b870:	81a3      	strh	r3, [r4, #12]
 800b872:	e7e3      	b.n	800b83c <__smakebuf_r+0xc>
 800b874:	4b0d      	ldr	r3, [pc, #52]	; (800b8ac <__smakebuf_r+0x7c>)
 800b876:	62b3      	str	r3, [r6, #40]	; 0x28
 800b878:	89a3      	ldrh	r3, [r4, #12]
 800b87a:	6020      	str	r0, [r4, #0]
 800b87c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b880:	81a3      	strh	r3, [r4, #12]
 800b882:	9b00      	ldr	r3, [sp, #0]
 800b884:	6163      	str	r3, [r4, #20]
 800b886:	9b01      	ldr	r3, [sp, #4]
 800b888:	6120      	str	r0, [r4, #16]
 800b88a:	b15b      	cbz	r3, 800b8a4 <__smakebuf_r+0x74>
 800b88c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b890:	4630      	mov	r0, r6
 800b892:	f000 f8d1 	bl	800ba38 <_isatty_r>
 800b896:	b128      	cbz	r0, 800b8a4 <__smakebuf_r+0x74>
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	f023 0303 	bic.w	r3, r3, #3
 800b89e:	f043 0301 	orr.w	r3, r3, #1
 800b8a2:	81a3      	strh	r3, [r4, #12]
 800b8a4:	89a0      	ldrh	r0, [r4, #12]
 800b8a6:	4305      	orrs	r5, r0
 800b8a8:	81a5      	strh	r5, [r4, #12]
 800b8aa:	e7cd      	b.n	800b848 <__smakebuf_r+0x18>
 800b8ac:	0800b641 	.word	0x0800b641

0800b8b0 <_malloc_usable_size_r>:
 800b8b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8b4:	1f18      	subs	r0, r3, #4
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	bfbc      	itt	lt
 800b8ba:	580b      	ldrlt	r3, [r1, r0]
 800b8bc:	18c0      	addlt	r0, r0, r3
 800b8be:	4770      	bx	lr

0800b8c0 <_raise_r>:
 800b8c0:	291f      	cmp	r1, #31
 800b8c2:	b538      	push	{r3, r4, r5, lr}
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	460d      	mov	r5, r1
 800b8c8:	d904      	bls.n	800b8d4 <_raise_r+0x14>
 800b8ca:	2316      	movs	r3, #22
 800b8cc:	6003      	str	r3, [r0, #0]
 800b8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d2:	bd38      	pop	{r3, r4, r5, pc}
 800b8d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b8d6:	b112      	cbz	r2, 800b8de <_raise_r+0x1e>
 800b8d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8dc:	b94b      	cbnz	r3, 800b8f2 <_raise_r+0x32>
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 f830 	bl	800b944 <_getpid_r>
 800b8e4:	462a      	mov	r2, r5
 800b8e6:	4601      	mov	r1, r0
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8ee:	f000 b817 	b.w	800b920 <_kill_r>
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d00a      	beq.n	800b90c <_raise_r+0x4c>
 800b8f6:	1c59      	adds	r1, r3, #1
 800b8f8:	d103      	bne.n	800b902 <_raise_r+0x42>
 800b8fa:	2316      	movs	r3, #22
 800b8fc:	6003      	str	r3, [r0, #0]
 800b8fe:	2001      	movs	r0, #1
 800b900:	e7e7      	b.n	800b8d2 <_raise_r+0x12>
 800b902:	2400      	movs	r4, #0
 800b904:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b908:	4628      	mov	r0, r5
 800b90a:	4798      	blx	r3
 800b90c:	2000      	movs	r0, #0
 800b90e:	e7e0      	b.n	800b8d2 <_raise_r+0x12>

0800b910 <raise>:
 800b910:	4b02      	ldr	r3, [pc, #8]	; (800b91c <raise+0xc>)
 800b912:	4601      	mov	r1, r0
 800b914:	6818      	ldr	r0, [r3, #0]
 800b916:	f7ff bfd3 	b.w	800b8c0 <_raise_r>
 800b91a:	bf00      	nop
 800b91c:	20000040 	.word	0x20000040

0800b920 <_kill_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d07      	ldr	r5, [pc, #28]	; (800b940 <_kill_r+0x20>)
 800b924:	2300      	movs	r3, #0
 800b926:	4604      	mov	r4, r0
 800b928:	4608      	mov	r0, r1
 800b92a:	4611      	mov	r1, r2
 800b92c:	602b      	str	r3, [r5, #0]
 800b92e:	f7f8 fe8b 	bl	8004648 <_kill>
 800b932:	1c43      	adds	r3, r0, #1
 800b934:	d102      	bne.n	800b93c <_kill_r+0x1c>
 800b936:	682b      	ldr	r3, [r5, #0]
 800b938:	b103      	cbz	r3, 800b93c <_kill_r+0x1c>
 800b93a:	6023      	str	r3, [r4, #0]
 800b93c:	bd38      	pop	{r3, r4, r5, pc}
 800b93e:	bf00      	nop
 800b940:	200012e0 	.word	0x200012e0

0800b944 <_getpid_r>:
 800b944:	f7f8 be7e 	b.w	8004644 <_getpid>

0800b948 <__sread>:
 800b948:	b510      	push	{r4, lr}
 800b94a:	460c      	mov	r4, r1
 800b94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b950:	f000 f894 	bl	800ba7c <_read_r>
 800b954:	2800      	cmp	r0, #0
 800b956:	bfab      	itete	ge
 800b958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b95a:	89a3      	ldrhlt	r3, [r4, #12]
 800b95c:	181b      	addge	r3, r3, r0
 800b95e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b962:	bfac      	ite	ge
 800b964:	6563      	strge	r3, [r4, #84]	; 0x54
 800b966:	81a3      	strhlt	r3, [r4, #12]
 800b968:	bd10      	pop	{r4, pc}

0800b96a <__swrite>:
 800b96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96e:	461f      	mov	r7, r3
 800b970:	898b      	ldrh	r3, [r1, #12]
 800b972:	05db      	lsls	r3, r3, #23
 800b974:	4605      	mov	r5, r0
 800b976:	460c      	mov	r4, r1
 800b978:	4616      	mov	r6, r2
 800b97a:	d505      	bpl.n	800b988 <__swrite+0x1e>
 800b97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b980:	2302      	movs	r3, #2
 800b982:	2200      	movs	r2, #0
 800b984:	f000 f868 	bl	800ba58 <_lseek_r>
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b98e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b992:	81a3      	strh	r3, [r4, #12]
 800b994:	4632      	mov	r2, r6
 800b996:	463b      	mov	r3, r7
 800b998:	4628      	mov	r0, r5
 800b99a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b99e:	f000 b817 	b.w	800b9d0 <_write_r>

0800b9a2 <__sseek>:
 800b9a2:	b510      	push	{r4, lr}
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9aa:	f000 f855 	bl	800ba58 <_lseek_r>
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	bf15      	itete	ne
 800b9b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9be:	81a3      	strheq	r3, [r4, #12]
 800b9c0:	bf18      	it	ne
 800b9c2:	81a3      	strhne	r3, [r4, #12]
 800b9c4:	bd10      	pop	{r4, pc}

0800b9c6 <__sclose>:
 800b9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ca:	f000 b813 	b.w	800b9f4 <_close_r>
	...

0800b9d0 <_write_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4d07      	ldr	r5, [pc, #28]	; (800b9f0 <_write_r+0x20>)
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	4608      	mov	r0, r1
 800b9d8:	4611      	mov	r1, r2
 800b9da:	2200      	movs	r2, #0
 800b9dc:	602a      	str	r2, [r5, #0]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	f7f8 fe50 	bl	8004684 <_write>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d102      	bne.n	800b9ee <_write_r+0x1e>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	b103      	cbz	r3, 800b9ee <_write_r+0x1e>
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	200012e0 	.word	0x200012e0

0800b9f4 <_close_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4d06      	ldr	r5, [pc, #24]	; (800ba10 <_close_r+0x1c>)
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	4608      	mov	r0, r1
 800b9fe:	602b      	str	r3, [r5, #0]
 800ba00:	f7f8 fe4e 	bl	80046a0 <_close>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d102      	bne.n	800ba0e <_close_r+0x1a>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	b103      	cbz	r3, 800ba0e <_close_r+0x1a>
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	200012e0 	.word	0x200012e0

0800ba14 <_fstat_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d07      	ldr	r5, [pc, #28]	; (800ba34 <_fstat_r+0x20>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	602b      	str	r3, [r5, #0]
 800ba22:	f7f8 fe40 	bl	80046a6 <_fstat>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	d102      	bne.n	800ba30 <_fstat_r+0x1c>
 800ba2a:	682b      	ldr	r3, [r5, #0]
 800ba2c:	b103      	cbz	r3, 800ba30 <_fstat_r+0x1c>
 800ba2e:	6023      	str	r3, [r4, #0]
 800ba30:	bd38      	pop	{r3, r4, r5, pc}
 800ba32:	bf00      	nop
 800ba34:	200012e0 	.word	0x200012e0

0800ba38 <_isatty_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4d06      	ldr	r5, [pc, #24]	; (800ba54 <_isatty_r+0x1c>)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4604      	mov	r4, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	602b      	str	r3, [r5, #0]
 800ba44:	f7f8 fe34 	bl	80046b0 <_isatty>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_isatty_r+0x1a>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_isatty_r+0x1a>
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	200012e0 	.word	0x200012e0

0800ba58 <_lseek_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d07      	ldr	r5, [pc, #28]	; (800ba78 <_lseek_r+0x20>)
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	4608      	mov	r0, r1
 800ba60:	4611      	mov	r1, r2
 800ba62:	2200      	movs	r2, #0
 800ba64:	602a      	str	r2, [r5, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f7f8 fe24 	bl	80046b4 <_lseek>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_lseek_r+0x1e>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_lseek_r+0x1e>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	200012e0 	.word	0x200012e0

0800ba7c <_read_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4d07      	ldr	r5, [pc, #28]	; (800ba9c <_read_r+0x20>)
 800ba80:	4604      	mov	r4, r0
 800ba82:	4608      	mov	r0, r1
 800ba84:	4611      	mov	r1, r2
 800ba86:	2200      	movs	r2, #0
 800ba88:	602a      	str	r2, [r5, #0]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	f7f8 fdea 	bl	8004664 <_read>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d102      	bne.n	800ba9a <_read_r+0x1e>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	b103      	cbz	r3, 800ba9a <_read_r+0x1e>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	200012e0 	.word	0x200012e0

0800baa0 <pow>:
 800baa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baa4:	ec59 8b10 	vmov	r8, r9, d0
 800baa8:	ec57 6b11 	vmov	r6, r7, d1
 800baac:	f000 f8a8 	bl	800bc00 <__ieee754_pow>
 800bab0:	4b4e      	ldr	r3, [pc, #312]	; (800bbec <pow+0x14c>)
 800bab2:	f993 3000 	ldrsb.w	r3, [r3]
 800bab6:	3301      	adds	r3, #1
 800bab8:	ec55 4b10 	vmov	r4, r5, d0
 800babc:	d015      	beq.n	800baea <pow+0x4a>
 800babe:	4632      	mov	r2, r6
 800bac0:	463b      	mov	r3, r7
 800bac2:	4630      	mov	r0, r6
 800bac4:	4639      	mov	r1, r7
 800bac6:	f7f5 f839 	bl	8000b3c <__aeabi_dcmpun>
 800baca:	b970      	cbnz	r0, 800baea <pow+0x4a>
 800bacc:	4642      	mov	r2, r8
 800bace:	464b      	mov	r3, r9
 800bad0:	4640      	mov	r0, r8
 800bad2:	4649      	mov	r1, r9
 800bad4:	f7f5 f832 	bl	8000b3c <__aeabi_dcmpun>
 800bad8:	2200      	movs	r2, #0
 800bada:	2300      	movs	r3, #0
 800badc:	b148      	cbz	r0, 800baf2 <pow+0x52>
 800bade:	4630      	mov	r0, r6
 800bae0:	4639      	mov	r1, r7
 800bae2:	f7f4 fff9 	bl	8000ad8 <__aeabi_dcmpeq>
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d17d      	bne.n	800bbe6 <pow+0x146>
 800baea:	ec45 4b10 	vmov	d0, r4, r5
 800baee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baf2:	4640      	mov	r0, r8
 800baf4:	4649      	mov	r1, r9
 800baf6:	f7f4 ffef 	bl	8000ad8 <__aeabi_dcmpeq>
 800bafa:	b1e0      	cbz	r0, 800bb36 <pow+0x96>
 800bafc:	2200      	movs	r2, #0
 800bafe:	2300      	movs	r3, #0
 800bb00:	4630      	mov	r0, r6
 800bb02:	4639      	mov	r1, r7
 800bb04:	f7f4 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d16c      	bne.n	800bbe6 <pow+0x146>
 800bb0c:	ec47 6b10 	vmov	d0, r6, r7
 800bb10:	f000 fe55 	bl	800c7be <finite>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d0e8      	beq.n	800baea <pow+0x4a>
 800bb18:	2200      	movs	r2, #0
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	4639      	mov	r1, r7
 800bb20:	f7f4 ffe4 	bl	8000aec <__aeabi_dcmplt>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d0e0      	beq.n	800baea <pow+0x4a>
 800bb28:	f7fd f8e4 	bl	8008cf4 <__errno>
 800bb2c:	2321      	movs	r3, #33	; 0x21
 800bb2e:	6003      	str	r3, [r0, #0]
 800bb30:	2400      	movs	r4, #0
 800bb32:	4d2f      	ldr	r5, [pc, #188]	; (800bbf0 <pow+0x150>)
 800bb34:	e7d9      	b.n	800baea <pow+0x4a>
 800bb36:	ec45 4b10 	vmov	d0, r4, r5
 800bb3a:	f000 fe40 	bl	800c7be <finite>
 800bb3e:	bbb8      	cbnz	r0, 800bbb0 <pow+0x110>
 800bb40:	ec49 8b10 	vmov	d0, r8, r9
 800bb44:	f000 fe3b 	bl	800c7be <finite>
 800bb48:	b390      	cbz	r0, 800bbb0 <pow+0x110>
 800bb4a:	ec47 6b10 	vmov	d0, r6, r7
 800bb4e:	f000 fe36 	bl	800c7be <finite>
 800bb52:	b368      	cbz	r0, 800bbb0 <pow+0x110>
 800bb54:	4622      	mov	r2, r4
 800bb56:	462b      	mov	r3, r5
 800bb58:	4620      	mov	r0, r4
 800bb5a:	4629      	mov	r1, r5
 800bb5c:	f7f4 ffee 	bl	8000b3c <__aeabi_dcmpun>
 800bb60:	b160      	cbz	r0, 800bb7c <pow+0xdc>
 800bb62:	f7fd f8c7 	bl	8008cf4 <__errno>
 800bb66:	2321      	movs	r3, #33	; 0x21
 800bb68:	6003      	str	r3, [r0, #0]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4610      	mov	r0, r2
 800bb70:	4619      	mov	r1, r3
 800bb72:	f7f4 fe73 	bl	800085c <__aeabi_ddiv>
 800bb76:	4604      	mov	r4, r0
 800bb78:	460d      	mov	r5, r1
 800bb7a:	e7b6      	b.n	800baea <pow+0x4a>
 800bb7c:	f7fd f8ba 	bl	8008cf4 <__errno>
 800bb80:	2322      	movs	r3, #34	; 0x22
 800bb82:	6003      	str	r3, [r0, #0]
 800bb84:	2200      	movs	r2, #0
 800bb86:	2300      	movs	r3, #0
 800bb88:	4640      	mov	r0, r8
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	f7f4 ffae 	bl	8000aec <__aeabi_dcmplt>
 800bb90:	2400      	movs	r4, #0
 800bb92:	b158      	cbz	r0, 800bbac <pow+0x10c>
 800bb94:	ec47 6b10 	vmov	d0, r6, r7
 800bb98:	f000 fe26 	bl	800c7e8 <rint>
 800bb9c:	4632      	mov	r2, r6
 800bb9e:	ec51 0b10 	vmov	r0, r1, d0
 800bba2:	463b      	mov	r3, r7
 800bba4:	f7f4 ff98 	bl	8000ad8 <__aeabi_dcmpeq>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d0c2      	beq.n	800bb32 <pow+0x92>
 800bbac:	4d11      	ldr	r5, [pc, #68]	; (800bbf4 <pow+0x154>)
 800bbae:	e79c      	b.n	800baea <pow+0x4a>
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	f7f4 ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d094      	beq.n	800baea <pow+0x4a>
 800bbc0:	ec49 8b10 	vmov	d0, r8, r9
 800bbc4:	f000 fdfb 	bl	800c7be <finite>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d08e      	beq.n	800baea <pow+0x4a>
 800bbcc:	ec47 6b10 	vmov	d0, r6, r7
 800bbd0:	f000 fdf5 	bl	800c7be <finite>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d088      	beq.n	800baea <pow+0x4a>
 800bbd8:	f7fd f88c 	bl	8008cf4 <__errno>
 800bbdc:	2322      	movs	r3, #34	; 0x22
 800bbde:	6003      	str	r3, [r0, #0]
 800bbe0:	2400      	movs	r4, #0
 800bbe2:	2500      	movs	r5, #0
 800bbe4:	e781      	b.n	800baea <pow+0x4a>
 800bbe6:	4d04      	ldr	r5, [pc, #16]	; (800bbf8 <pow+0x158>)
 800bbe8:	2400      	movs	r4, #0
 800bbea:	e77e      	b.n	800baea <pow+0x4a>
 800bbec:	20000210 	.word	0x20000210
 800bbf0:	fff00000 	.word	0xfff00000
 800bbf4:	7ff00000 	.word	0x7ff00000
 800bbf8:	3ff00000 	.word	0x3ff00000
 800bbfc:	00000000 	.word	0x00000000

0800bc00 <__ieee754_pow>:
 800bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc04:	ed2d 8b06 	vpush	{d8-d10}
 800bc08:	b08d      	sub	sp, #52	; 0x34
 800bc0a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800bc0e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800bc12:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800bc16:	ea56 0100 	orrs.w	r1, r6, r0
 800bc1a:	ec53 2b10 	vmov	r2, r3, d0
 800bc1e:	f000 84d1 	beq.w	800c5c4 <__ieee754_pow+0x9c4>
 800bc22:	497f      	ldr	r1, [pc, #508]	; (800be20 <__ieee754_pow+0x220>)
 800bc24:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800bc28:	428c      	cmp	r4, r1
 800bc2a:	ee10 8a10 	vmov	r8, s0
 800bc2e:	4699      	mov	r9, r3
 800bc30:	dc09      	bgt.n	800bc46 <__ieee754_pow+0x46>
 800bc32:	d103      	bne.n	800bc3c <__ieee754_pow+0x3c>
 800bc34:	b97a      	cbnz	r2, 800bc56 <__ieee754_pow+0x56>
 800bc36:	42a6      	cmp	r6, r4
 800bc38:	dd02      	ble.n	800bc40 <__ieee754_pow+0x40>
 800bc3a:	e00c      	b.n	800bc56 <__ieee754_pow+0x56>
 800bc3c:	428e      	cmp	r6, r1
 800bc3e:	dc02      	bgt.n	800bc46 <__ieee754_pow+0x46>
 800bc40:	428e      	cmp	r6, r1
 800bc42:	d110      	bne.n	800bc66 <__ieee754_pow+0x66>
 800bc44:	b178      	cbz	r0, 800bc66 <__ieee754_pow+0x66>
 800bc46:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bc4a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bc4e:	ea54 0308 	orrs.w	r3, r4, r8
 800bc52:	f000 84b7 	beq.w	800c5c4 <__ieee754_pow+0x9c4>
 800bc56:	4873      	ldr	r0, [pc, #460]	; (800be24 <__ieee754_pow+0x224>)
 800bc58:	b00d      	add	sp, #52	; 0x34
 800bc5a:	ecbd 8b06 	vpop	{d8-d10}
 800bc5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc62:	f000 bdb9 	b.w	800c7d8 <nan>
 800bc66:	f1b9 0f00 	cmp.w	r9, #0
 800bc6a:	da36      	bge.n	800bcda <__ieee754_pow+0xda>
 800bc6c:	496e      	ldr	r1, [pc, #440]	; (800be28 <__ieee754_pow+0x228>)
 800bc6e:	428e      	cmp	r6, r1
 800bc70:	dc51      	bgt.n	800bd16 <__ieee754_pow+0x116>
 800bc72:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800bc76:	428e      	cmp	r6, r1
 800bc78:	f340 84af 	ble.w	800c5da <__ieee754_pow+0x9da>
 800bc7c:	1531      	asrs	r1, r6, #20
 800bc7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bc82:	2914      	cmp	r1, #20
 800bc84:	dd0f      	ble.n	800bca6 <__ieee754_pow+0xa6>
 800bc86:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800bc8a:	fa20 fc01 	lsr.w	ip, r0, r1
 800bc8e:	fa0c f101 	lsl.w	r1, ip, r1
 800bc92:	4281      	cmp	r1, r0
 800bc94:	f040 84a1 	bne.w	800c5da <__ieee754_pow+0x9da>
 800bc98:	f00c 0c01 	and.w	ip, ip, #1
 800bc9c:	f1cc 0102 	rsb	r1, ip, #2
 800bca0:	9100      	str	r1, [sp, #0]
 800bca2:	b180      	cbz	r0, 800bcc6 <__ieee754_pow+0xc6>
 800bca4:	e059      	b.n	800bd5a <__ieee754_pow+0x15a>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	d155      	bne.n	800bd56 <__ieee754_pow+0x156>
 800bcaa:	f1c1 0114 	rsb	r1, r1, #20
 800bcae:	fa46 fc01 	asr.w	ip, r6, r1
 800bcb2:	fa0c f101 	lsl.w	r1, ip, r1
 800bcb6:	42b1      	cmp	r1, r6
 800bcb8:	f040 848c 	bne.w	800c5d4 <__ieee754_pow+0x9d4>
 800bcbc:	f00c 0c01 	and.w	ip, ip, #1
 800bcc0:	f1cc 0102 	rsb	r1, ip, #2
 800bcc4:	9100      	str	r1, [sp, #0]
 800bcc6:	4959      	ldr	r1, [pc, #356]	; (800be2c <__ieee754_pow+0x22c>)
 800bcc8:	428e      	cmp	r6, r1
 800bcca:	d12d      	bne.n	800bd28 <__ieee754_pow+0x128>
 800bccc:	2f00      	cmp	r7, #0
 800bcce:	da79      	bge.n	800bdc4 <__ieee754_pow+0x1c4>
 800bcd0:	4956      	ldr	r1, [pc, #344]	; (800be2c <__ieee754_pow+0x22c>)
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	f7f4 fdc2 	bl	800085c <__aeabi_ddiv>
 800bcd8:	e016      	b.n	800bd08 <__ieee754_pow+0x108>
 800bcda:	2100      	movs	r1, #0
 800bcdc:	9100      	str	r1, [sp, #0]
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d13b      	bne.n	800bd5a <__ieee754_pow+0x15a>
 800bce2:	494f      	ldr	r1, [pc, #316]	; (800be20 <__ieee754_pow+0x220>)
 800bce4:	428e      	cmp	r6, r1
 800bce6:	d1ee      	bne.n	800bcc6 <__ieee754_pow+0xc6>
 800bce8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bcec:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bcf0:	ea53 0308 	orrs.w	r3, r3, r8
 800bcf4:	f000 8466 	beq.w	800c5c4 <__ieee754_pow+0x9c4>
 800bcf8:	4b4d      	ldr	r3, [pc, #308]	; (800be30 <__ieee754_pow+0x230>)
 800bcfa:	429c      	cmp	r4, r3
 800bcfc:	dd0d      	ble.n	800bd1a <__ieee754_pow+0x11a>
 800bcfe:	2f00      	cmp	r7, #0
 800bd00:	f280 8464 	bge.w	800c5cc <__ieee754_pow+0x9cc>
 800bd04:	2000      	movs	r0, #0
 800bd06:	2100      	movs	r1, #0
 800bd08:	ec41 0b10 	vmov	d0, r0, r1
 800bd0c:	b00d      	add	sp, #52	; 0x34
 800bd0e:	ecbd 8b06 	vpop	{d8-d10}
 800bd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd16:	2102      	movs	r1, #2
 800bd18:	e7e0      	b.n	800bcdc <__ieee754_pow+0xdc>
 800bd1a:	2f00      	cmp	r7, #0
 800bd1c:	daf2      	bge.n	800bd04 <__ieee754_pow+0x104>
 800bd1e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800bd22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bd26:	e7ef      	b.n	800bd08 <__ieee754_pow+0x108>
 800bd28:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800bd2c:	d104      	bne.n	800bd38 <__ieee754_pow+0x138>
 800bd2e:	4610      	mov	r0, r2
 800bd30:	4619      	mov	r1, r3
 800bd32:	f7f4 fc69 	bl	8000608 <__aeabi_dmul>
 800bd36:	e7e7      	b.n	800bd08 <__ieee754_pow+0x108>
 800bd38:	493e      	ldr	r1, [pc, #248]	; (800be34 <__ieee754_pow+0x234>)
 800bd3a:	428f      	cmp	r7, r1
 800bd3c:	d10d      	bne.n	800bd5a <__ieee754_pow+0x15a>
 800bd3e:	f1b9 0f00 	cmp.w	r9, #0
 800bd42:	db0a      	blt.n	800bd5a <__ieee754_pow+0x15a>
 800bd44:	ec43 2b10 	vmov	d0, r2, r3
 800bd48:	b00d      	add	sp, #52	; 0x34
 800bd4a:	ecbd 8b06 	vpop	{d8-d10}
 800bd4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd52:	f000 bc77 	b.w	800c644 <__ieee754_sqrt>
 800bd56:	2100      	movs	r1, #0
 800bd58:	9100      	str	r1, [sp, #0]
 800bd5a:	ec43 2b10 	vmov	d0, r2, r3
 800bd5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd62:	f000 fd23 	bl	800c7ac <fabs>
 800bd66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd6a:	ec51 0b10 	vmov	r0, r1, d0
 800bd6e:	f1b8 0f00 	cmp.w	r8, #0
 800bd72:	d12a      	bne.n	800bdca <__ieee754_pow+0x1ca>
 800bd74:	b12c      	cbz	r4, 800bd82 <__ieee754_pow+0x182>
 800bd76:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800be2c <__ieee754_pow+0x22c>
 800bd7a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800bd7e:	45e6      	cmp	lr, ip
 800bd80:	d123      	bne.n	800bdca <__ieee754_pow+0x1ca>
 800bd82:	2f00      	cmp	r7, #0
 800bd84:	da05      	bge.n	800bd92 <__ieee754_pow+0x192>
 800bd86:	4602      	mov	r2, r0
 800bd88:	460b      	mov	r3, r1
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	4927      	ldr	r1, [pc, #156]	; (800be2c <__ieee754_pow+0x22c>)
 800bd8e:	f7f4 fd65 	bl	800085c <__aeabi_ddiv>
 800bd92:	f1b9 0f00 	cmp.w	r9, #0
 800bd96:	dab7      	bge.n	800bd08 <__ieee754_pow+0x108>
 800bd98:	9b00      	ldr	r3, [sp, #0]
 800bd9a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bd9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bda2:	4323      	orrs	r3, r4
 800bda4:	d108      	bne.n	800bdb8 <__ieee754_pow+0x1b8>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4610      	mov	r0, r2
 800bdac:	4619      	mov	r1, r3
 800bdae:	f7f4 fa73 	bl	8000298 <__aeabi_dsub>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	e78d      	b.n	800bcd4 <__ieee754_pow+0xd4>
 800bdb8:	9b00      	ldr	r3, [sp, #0]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d1a4      	bne.n	800bd08 <__ieee754_pow+0x108>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	e79e      	b.n	800bd08 <__ieee754_pow+0x108>
 800bdca:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800bdce:	f10c 35ff 	add.w	r5, ip, #4294967295
 800bdd2:	950a      	str	r5, [sp, #40]	; 0x28
 800bdd4:	9d00      	ldr	r5, [sp, #0]
 800bdd6:	46ac      	mov	ip, r5
 800bdd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800bdda:	ea5c 0505 	orrs.w	r5, ip, r5
 800bdde:	d0e4      	beq.n	800bdaa <__ieee754_pow+0x1aa>
 800bde0:	4b15      	ldr	r3, [pc, #84]	; (800be38 <__ieee754_pow+0x238>)
 800bde2:	429e      	cmp	r6, r3
 800bde4:	f340 80fc 	ble.w	800bfe0 <__ieee754_pow+0x3e0>
 800bde8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bdec:	429e      	cmp	r6, r3
 800bdee:	4b10      	ldr	r3, [pc, #64]	; (800be30 <__ieee754_pow+0x230>)
 800bdf0:	dd07      	ble.n	800be02 <__ieee754_pow+0x202>
 800bdf2:	429c      	cmp	r4, r3
 800bdf4:	dc0a      	bgt.n	800be0c <__ieee754_pow+0x20c>
 800bdf6:	2f00      	cmp	r7, #0
 800bdf8:	da84      	bge.n	800bd04 <__ieee754_pow+0x104>
 800bdfa:	a307      	add	r3, pc, #28	; (adr r3, 800be18 <__ieee754_pow+0x218>)
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	e795      	b.n	800bd2e <__ieee754_pow+0x12e>
 800be02:	429c      	cmp	r4, r3
 800be04:	dbf7      	blt.n	800bdf6 <__ieee754_pow+0x1f6>
 800be06:	4b09      	ldr	r3, [pc, #36]	; (800be2c <__ieee754_pow+0x22c>)
 800be08:	429c      	cmp	r4, r3
 800be0a:	dd17      	ble.n	800be3c <__ieee754_pow+0x23c>
 800be0c:	2f00      	cmp	r7, #0
 800be0e:	dcf4      	bgt.n	800bdfa <__ieee754_pow+0x1fa>
 800be10:	e778      	b.n	800bd04 <__ieee754_pow+0x104>
 800be12:	bf00      	nop
 800be14:	f3af 8000 	nop.w
 800be18:	8800759c 	.word	0x8800759c
 800be1c:	7e37e43c 	.word	0x7e37e43c
 800be20:	7ff00000 	.word	0x7ff00000
 800be24:	0800cfb0 	.word	0x0800cfb0
 800be28:	433fffff 	.word	0x433fffff
 800be2c:	3ff00000 	.word	0x3ff00000
 800be30:	3fefffff 	.word	0x3fefffff
 800be34:	3fe00000 	.word	0x3fe00000
 800be38:	41e00000 	.word	0x41e00000
 800be3c:	4b64      	ldr	r3, [pc, #400]	; (800bfd0 <__ieee754_pow+0x3d0>)
 800be3e:	2200      	movs	r2, #0
 800be40:	f7f4 fa2a 	bl	8000298 <__aeabi_dsub>
 800be44:	a356      	add	r3, pc, #344	; (adr r3, 800bfa0 <__ieee754_pow+0x3a0>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	4604      	mov	r4, r0
 800be4c:	460d      	mov	r5, r1
 800be4e:	f7f4 fbdb 	bl	8000608 <__aeabi_dmul>
 800be52:	a355      	add	r3, pc, #340	; (adr r3, 800bfa8 <__ieee754_pow+0x3a8>)
 800be54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be58:	4606      	mov	r6, r0
 800be5a:	460f      	mov	r7, r1
 800be5c:	4620      	mov	r0, r4
 800be5e:	4629      	mov	r1, r5
 800be60:	f7f4 fbd2 	bl	8000608 <__aeabi_dmul>
 800be64:	4b5b      	ldr	r3, [pc, #364]	; (800bfd4 <__ieee754_pow+0x3d4>)
 800be66:	4682      	mov	sl, r0
 800be68:	468b      	mov	fp, r1
 800be6a:	2200      	movs	r2, #0
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 fbca 	bl	8000608 <__aeabi_dmul>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	a14d      	add	r1, pc, #308	; (adr r1, 800bfb0 <__ieee754_pow+0x3b0>)
 800be7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be7e:	f7f4 fa0b 	bl	8000298 <__aeabi_dsub>
 800be82:	4622      	mov	r2, r4
 800be84:	462b      	mov	r3, r5
 800be86:	f7f4 fbbf 	bl	8000608 <__aeabi_dmul>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	2000      	movs	r0, #0
 800be90:	4951      	ldr	r1, [pc, #324]	; (800bfd8 <__ieee754_pow+0x3d8>)
 800be92:	f7f4 fa01 	bl	8000298 <__aeabi_dsub>
 800be96:	4622      	mov	r2, r4
 800be98:	4680      	mov	r8, r0
 800be9a:	4689      	mov	r9, r1
 800be9c:	462b      	mov	r3, r5
 800be9e:	4620      	mov	r0, r4
 800bea0:	4629      	mov	r1, r5
 800bea2:	f7f4 fbb1 	bl	8000608 <__aeabi_dmul>
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	4640      	mov	r0, r8
 800beac:	4649      	mov	r1, r9
 800beae:	f7f4 fbab 	bl	8000608 <__aeabi_dmul>
 800beb2:	a341      	add	r3, pc, #260	; (adr r3, 800bfb8 <__ieee754_pow+0x3b8>)
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f7f4 fba6 	bl	8000608 <__aeabi_dmul>
 800bebc:	4602      	mov	r2, r0
 800bebe:	460b      	mov	r3, r1
 800bec0:	4650      	mov	r0, sl
 800bec2:	4659      	mov	r1, fp
 800bec4:	f7f4 f9e8 	bl	8000298 <__aeabi_dsub>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	4680      	mov	r8, r0
 800bece:	4689      	mov	r9, r1
 800bed0:	4630      	mov	r0, r6
 800bed2:	4639      	mov	r1, r7
 800bed4:	f7f4 f9e2 	bl	800029c <__adddf3>
 800bed8:	2400      	movs	r4, #0
 800beda:	4632      	mov	r2, r6
 800bedc:	463b      	mov	r3, r7
 800bede:	4620      	mov	r0, r4
 800bee0:	460d      	mov	r5, r1
 800bee2:	f7f4 f9d9 	bl	8000298 <__aeabi_dsub>
 800bee6:	4602      	mov	r2, r0
 800bee8:	460b      	mov	r3, r1
 800beea:	4640      	mov	r0, r8
 800beec:	4649      	mov	r1, r9
 800beee:	f7f4 f9d3 	bl	8000298 <__aeabi_dsub>
 800bef2:	9b00      	ldr	r3, [sp, #0]
 800bef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bef6:	3b01      	subs	r3, #1
 800bef8:	4313      	orrs	r3, r2
 800befa:	4682      	mov	sl, r0
 800befc:	468b      	mov	fp, r1
 800befe:	f040 81f1 	bne.w	800c2e4 <__ieee754_pow+0x6e4>
 800bf02:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800bfc0 <__ieee754_pow+0x3c0>
 800bf06:	eeb0 8a47 	vmov.f32	s16, s14
 800bf0a:	eef0 8a67 	vmov.f32	s17, s15
 800bf0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf12:	2600      	movs	r6, #0
 800bf14:	4632      	mov	r2, r6
 800bf16:	463b      	mov	r3, r7
 800bf18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf1c:	f7f4 f9bc 	bl	8000298 <__aeabi_dsub>
 800bf20:	4622      	mov	r2, r4
 800bf22:	462b      	mov	r3, r5
 800bf24:	f7f4 fb70 	bl	8000608 <__aeabi_dmul>
 800bf28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf2c:	4680      	mov	r8, r0
 800bf2e:	4689      	mov	r9, r1
 800bf30:	4650      	mov	r0, sl
 800bf32:	4659      	mov	r1, fp
 800bf34:	f7f4 fb68 	bl	8000608 <__aeabi_dmul>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	4649      	mov	r1, r9
 800bf40:	f7f4 f9ac 	bl	800029c <__adddf3>
 800bf44:	4632      	mov	r2, r6
 800bf46:	463b      	mov	r3, r7
 800bf48:	4680      	mov	r8, r0
 800bf4a:	4689      	mov	r9, r1
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	4629      	mov	r1, r5
 800bf50:	f7f4 fb5a 	bl	8000608 <__aeabi_dmul>
 800bf54:	460b      	mov	r3, r1
 800bf56:	4604      	mov	r4, r0
 800bf58:	460d      	mov	r5, r1
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	4640      	mov	r0, r8
 800bf60:	f7f4 f99c 	bl	800029c <__adddf3>
 800bf64:	4b1d      	ldr	r3, [pc, #116]	; (800bfdc <__ieee754_pow+0x3dc>)
 800bf66:	4299      	cmp	r1, r3
 800bf68:	ec45 4b19 	vmov	d9, r4, r5
 800bf6c:	4606      	mov	r6, r0
 800bf6e:	460f      	mov	r7, r1
 800bf70:	468b      	mov	fp, r1
 800bf72:	f340 82fe 	ble.w	800c572 <__ieee754_pow+0x972>
 800bf76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bf7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bf7e:	4303      	orrs	r3, r0
 800bf80:	f000 81f0 	beq.w	800c364 <__ieee754_pow+0x764>
 800bf84:	a310      	add	r3, pc, #64	; (adr r3, 800bfc8 <__ieee754_pow+0x3c8>)
 800bf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8a:	ec51 0b18 	vmov	r0, r1, d8
 800bf8e:	f7f4 fb3b 	bl	8000608 <__aeabi_dmul>
 800bf92:	a30d      	add	r3, pc, #52	; (adr r3, 800bfc8 <__ieee754_pow+0x3c8>)
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	e6cb      	b.n	800bd32 <__ieee754_pow+0x132>
 800bf9a:	bf00      	nop
 800bf9c:	f3af 8000 	nop.w
 800bfa0:	60000000 	.word	0x60000000
 800bfa4:	3ff71547 	.word	0x3ff71547
 800bfa8:	f85ddf44 	.word	0xf85ddf44
 800bfac:	3e54ae0b 	.word	0x3e54ae0b
 800bfb0:	55555555 	.word	0x55555555
 800bfb4:	3fd55555 	.word	0x3fd55555
 800bfb8:	652b82fe 	.word	0x652b82fe
 800bfbc:	3ff71547 	.word	0x3ff71547
 800bfc0:	00000000 	.word	0x00000000
 800bfc4:	bff00000 	.word	0xbff00000
 800bfc8:	8800759c 	.word	0x8800759c
 800bfcc:	7e37e43c 	.word	0x7e37e43c
 800bfd0:	3ff00000 	.word	0x3ff00000
 800bfd4:	3fd00000 	.word	0x3fd00000
 800bfd8:	3fe00000 	.word	0x3fe00000
 800bfdc:	408fffff 	.word	0x408fffff
 800bfe0:	4bd7      	ldr	r3, [pc, #860]	; (800c340 <__ieee754_pow+0x740>)
 800bfe2:	ea03 0309 	and.w	r3, r3, r9
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	b92b      	cbnz	r3, 800bff6 <__ieee754_pow+0x3f6>
 800bfea:	4bd6      	ldr	r3, [pc, #856]	; (800c344 <__ieee754_pow+0x744>)
 800bfec:	f7f4 fb0c 	bl	8000608 <__aeabi_dmul>
 800bff0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bff4:	460c      	mov	r4, r1
 800bff6:	1523      	asrs	r3, r4, #20
 800bff8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bffc:	4413      	add	r3, r2
 800bffe:	9309      	str	r3, [sp, #36]	; 0x24
 800c000:	4bd1      	ldr	r3, [pc, #836]	; (800c348 <__ieee754_pow+0x748>)
 800c002:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c006:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c00a:	429c      	cmp	r4, r3
 800c00c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c010:	dd08      	ble.n	800c024 <__ieee754_pow+0x424>
 800c012:	4bce      	ldr	r3, [pc, #824]	; (800c34c <__ieee754_pow+0x74c>)
 800c014:	429c      	cmp	r4, r3
 800c016:	f340 8163 	ble.w	800c2e0 <__ieee754_pow+0x6e0>
 800c01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c01c:	3301      	adds	r3, #1
 800c01e:	9309      	str	r3, [sp, #36]	; 0x24
 800c020:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c024:	2400      	movs	r4, #0
 800c026:	00e3      	lsls	r3, r4, #3
 800c028:	930b      	str	r3, [sp, #44]	; 0x2c
 800c02a:	4bc9      	ldr	r3, [pc, #804]	; (800c350 <__ieee754_pow+0x750>)
 800c02c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c030:	ed93 7b00 	vldr	d7, [r3]
 800c034:	4629      	mov	r1, r5
 800c036:	ec53 2b17 	vmov	r2, r3, d7
 800c03a:	eeb0 8a47 	vmov.f32	s16, s14
 800c03e:	eef0 8a67 	vmov.f32	s17, s15
 800c042:	4682      	mov	sl, r0
 800c044:	f7f4 f928 	bl	8000298 <__aeabi_dsub>
 800c048:	4652      	mov	r2, sl
 800c04a:	4606      	mov	r6, r0
 800c04c:	460f      	mov	r7, r1
 800c04e:	462b      	mov	r3, r5
 800c050:	ec51 0b18 	vmov	r0, r1, d8
 800c054:	f7f4 f922 	bl	800029c <__adddf3>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	2000      	movs	r0, #0
 800c05e:	49bd      	ldr	r1, [pc, #756]	; (800c354 <__ieee754_pow+0x754>)
 800c060:	f7f4 fbfc 	bl	800085c <__aeabi_ddiv>
 800c064:	ec41 0b19 	vmov	d9, r0, r1
 800c068:	4602      	mov	r2, r0
 800c06a:	460b      	mov	r3, r1
 800c06c:	4630      	mov	r0, r6
 800c06e:	4639      	mov	r1, r7
 800c070:	f7f4 faca 	bl	8000608 <__aeabi_dmul>
 800c074:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c078:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c07c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c080:	2300      	movs	r3, #0
 800c082:	9304      	str	r3, [sp, #16]
 800c084:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c088:	46ab      	mov	fp, r5
 800c08a:	106d      	asrs	r5, r5, #1
 800c08c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c090:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c094:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c098:	2200      	movs	r2, #0
 800c09a:	4640      	mov	r0, r8
 800c09c:	4649      	mov	r1, r9
 800c09e:	4614      	mov	r4, r2
 800c0a0:	461d      	mov	r5, r3
 800c0a2:	f7f4 fab1 	bl	8000608 <__aeabi_dmul>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	4639      	mov	r1, r7
 800c0ae:	f7f4 f8f3 	bl	8000298 <__aeabi_dsub>
 800c0b2:	ec53 2b18 	vmov	r2, r3, d8
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	460f      	mov	r7, r1
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	4629      	mov	r1, r5
 800c0be:	f7f4 f8eb 	bl	8000298 <__aeabi_dsub>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4650      	mov	r0, sl
 800c0c8:	4659      	mov	r1, fp
 800c0ca:	f7f4 f8e5 	bl	8000298 <__aeabi_dsub>
 800c0ce:	4642      	mov	r2, r8
 800c0d0:	464b      	mov	r3, r9
 800c0d2:	f7f4 fa99 	bl	8000608 <__aeabi_dmul>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4630      	mov	r0, r6
 800c0dc:	4639      	mov	r1, r7
 800c0de:	f7f4 f8db 	bl	8000298 <__aeabi_dsub>
 800c0e2:	ec53 2b19 	vmov	r2, r3, d9
 800c0e6:	f7f4 fa8f 	bl	8000608 <__aeabi_dmul>
 800c0ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0ee:	ec41 0b18 	vmov	d8, r0, r1
 800c0f2:	4610      	mov	r0, r2
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	f7f4 fa87 	bl	8000608 <__aeabi_dmul>
 800c0fa:	a37d      	add	r3, pc, #500	; (adr r3, 800c2f0 <__ieee754_pow+0x6f0>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	4604      	mov	r4, r0
 800c102:	460d      	mov	r5, r1
 800c104:	f7f4 fa80 	bl	8000608 <__aeabi_dmul>
 800c108:	a37b      	add	r3, pc, #492	; (adr r3, 800c2f8 <__ieee754_pow+0x6f8>)
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	f7f4 f8c5 	bl	800029c <__adddf3>
 800c112:	4622      	mov	r2, r4
 800c114:	462b      	mov	r3, r5
 800c116:	f7f4 fa77 	bl	8000608 <__aeabi_dmul>
 800c11a:	a379      	add	r3, pc, #484	; (adr r3, 800c300 <__ieee754_pow+0x700>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	f7f4 f8bc 	bl	800029c <__adddf3>
 800c124:	4622      	mov	r2, r4
 800c126:	462b      	mov	r3, r5
 800c128:	f7f4 fa6e 	bl	8000608 <__aeabi_dmul>
 800c12c:	a376      	add	r3, pc, #472	; (adr r3, 800c308 <__ieee754_pow+0x708>)
 800c12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c132:	f7f4 f8b3 	bl	800029c <__adddf3>
 800c136:	4622      	mov	r2, r4
 800c138:	462b      	mov	r3, r5
 800c13a:	f7f4 fa65 	bl	8000608 <__aeabi_dmul>
 800c13e:	a374      	add	r3, pc, #464	; (adr r3, 800c310 <__ieee754_pow+0x710>)
 800c140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c144:	f7f4 f8aa 	bl	800029c <__adddf3>
 800c148:	4622      	mov	r2, r4
 800c14a:	462b      	mov	r3, r5
 800c14c:	f7f4 fa5c 	bl	8000608 <__aeabi_dmul>
 800c150:	a371      	add	r3, pc, #452	; (adr r3, 800c318 <__ieee754_pow+0x718>)
 800c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c156:	f7f4 f8a1 	bl	800029c <__adddf3>
 800c15a:	4622      	mov	r2, r4
 800c15c:	4606      	mov	r6, r0
 800c15e:	460f      	mov	r7, r1
 800c160:	462b      	mov	r3, r5
 800c162:	4620      	mov	r0, r4
 800c164:	4629      	mov	r1, r5
 800c166:	f7f4 fa4f 	bl	8000608 <__aeabi_dmul>
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	4630      	mov	r0, r6
 800c170:	4639      	mov	r1, r7
 800c172:	f7f4 fa49 	bl	8000608 <__aeabi_dmul>
 800c176:	4642      	mov	r2, r8
 800c178:	4604      	mov	r4, r0
 800c17a:	460d      	mov	r5, r1
 800c17c:	464b      	mov	r3, r9
 800c17e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c182:	f7f4 f88b 	bl	800029c <__adddf3>
 800c186:	ec53 2b18 	vmov	r2, r3, d8
 800c18a:	f7f4 fa3d 	bl	8000608 <__aeabi_dmul>
 800c18e:	4622      	mov	r2, r4
 800c190:	462b      	mov	r3, r5
 800c192:	f7f4 f883 	bl	800029c <__adddf3>
 800c196:	4642      	mov	r2, r8
 800c198:	4682      	mov	sl, r0
 800c19a:	468b      	mov	fp, r1
 800c19c:	464b      	mov	r3, r9
 800c19e:	4640      	mov	r0, r8
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	f7f4 fa31 	bl	8000608 <__aeabi_dmul>
 800c1a6:	4b6c      	ldr	r3, [pc, #432]	; (800c358 <__ieee754_pow+0x758>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	460f      	mov	r7, r1
 800c1ae:	f7f4 f875 	bl	800029c <__adddf3>
 800c1b2:	4652      	mov	r2, sl
 800c1b4:	465b      	mov	r3, fp
 800c1b6:	f7f4 f871 	bl	800029c <__adddf3>
 800c1ba:	9c04      	ldr	r4, [sp, #16]
 800c1bc:	460d      	mov	r5, r1
 800c1be:	4622      	mov	r2, r4
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4640      	mov	r0, r8
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	f7f4 fa1f 	bl	8000608 <__aeabi_dmul>
 800c1ca:	4b63      	ldr	r3, [pc, #396]	; (800c358 <__ieee754_pow+0x758>)
 800c1cc:	4680      	mov	r8, r0
 800c1ce:	4689      	mov	r9, r1
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	4629      	mov	r1, r5
 800c1d6:	f7f4 f85f 	bl	8000298 <__aeabi_dsub>
 800c1da:	4632      	mov	r2, r6
 800c1dc:	463b      	mov	r3, r7
 800c1de:	f7f4 f85b 	bl	8000298 <__aeabi_dsub>
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	4650      	mov	r0, sl
 800c1e8:	4659      	mov	r1, fp
 800c1ea:	f7f4 f855 	bl	8000298 <__aeabi_dsub>
 800c1ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1f2:	f7f4 fa09 	bl	8000608 <__aeabi_dmul>
 800c1f6:	4622      	mov	r2, r4
 800c1f8:	4606      	mov	r6, r0
 800c1fa:	460f      	mov	r7, r1
 800c1fc:	462b      	mov	r3, r5
 800c1fe:	ec51 0b18 	vmov	r0, r1, d8
 800c202:	f7f4 fa01 	bl	8000608 <__aeabi_dmul>
 800c206:	4602      	mov	r2, r0
 800c208:	460b      	mov	r3, r1
 800c20a:	4630      	mov	r0, r6
 800c20c:	4639      	mov	r1, r7
 800c20e:	f7f4 f845 	bl	800029c <__adddf3>
 800c212:	4606      	mov	r6, r0
 800c214:	460f      	mov	r7, r1
 800c216:	4602      	mov	r2, r0
 800c218:	460b      	mov	r3, r1
 800c21a:	4640      	mov	r0, r8
 800c21c:	4649      	mov	r1, r9
 800c21e:	f7f4 f83d 	bl	800029c <__adddf3>
 800c222:	9c04      	ldr	r4, [sp, #16]
 800c224:	a33e      	add	r3, pc, #248	; (adr r3, 800c320 <__ieee754_pow+0x720>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	4620      	mov	r0, r4
 800c22c:	460d      	mov	r5, r1
 800c22e:	f7f4 f9eb 	bl	8000608 <__aeabi_dmul>
 800c232:	4642      	mov	r2, r8
 800c234:	ec41 0b18 	vmov	d8, r0, r1
 800c238:	464b      	mov	r3, r9
 800c23a:	4620      	mov	r0, r4
 800c23c:	4629      	mov	r1, r5
 800c23e:	f7f4 f82b 	bl	8000298 <__aeabi_dsub>
 800c242:	4602      	mov	r2, r0
 800c244:	460b      	mov	r3, r1
 800c246:	4630      	mov	r0, r6
 800c248:	4639      	mov	r1, r7
 800c24a:	f7f4 f825 	bl	8000298 <__aeabi_dsub>
 800c24e:	a336      	add	r3, pc, #216	; (adr r3, 800c328 <__ieee754_pow+0x728>)
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	f7f4 f9d8 	bl	8000608 <__aeabi_dmul>
 800c258:	a335      	add	r3, pc, #212	; (adr r3, 800c330 <__ieee754_pow+0x730>)
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	4606      	mov	r6, r0
 800c260:	460f      	mov	r7, r1
 800c262:	4620      	mov	r0, r4
 800c264:	4629      	mov	r1, r5
 800c266:	f7f4 f9cf 	bl	8000608 <__aeabi_dmul>
 800c26a:	4602      	mov	r2, r0
 800c26c:	460b      	mov	r3, r1
 800c26e:	4630      	mov	r0, r6
 800c270:	4639      	mov	r1, r7
 800c272:	f7f4 f813 	bl	800029c <__adddf3>
 800c276:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c278:	4b38      	ldr	r3, [pc, #224]	; (800c35c <__ieee754_pow+0x75c>)
 800c27a:	4413      	add	r3, r2
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	f7f4 f80c 	bl	800029c <__adddf3>
 800c284:	4682      	mov	sl, r0
 800c286:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c288:	468b      	mov	fp, r1
 800c28a:	f7f4 f953 	bl	8000534 <__aeabi_i2d>
 800c28e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c290:	4b33      	ldr	r3, [pc, #204]	; (800c360 <__ieee754_pow+0x760>)
 800c292:	4413      	add	r3, r2
 800c294:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c298:	4606      	mov	r6, r0
 800c29a:	460f      	mov	r7, r1
 800c29c:	4652      	mov	r2, sl
 800c29e:	465b      	mov	r3, fp
 800c2a0:	ec51 0b18 	vmov	r0, r1, d8
 800c2a4:	f7f3 fffa 	bl	800029c <__adddf3>
 800c2a8:	4642      	mov	r2, r8
 800c2aa:	464b      	mov	r3, r9
 800c2ac:	f7f3 fff6 	bl	800029c <__adddf3>
 800c2b0:	4632      	mov	r2, r6
 800c2b2:	463b      	mov	r3, r7
 800c2b4:	f7f3 fff2 	bl	800029c <__adddf3>
 800c2b8:	9c04      	ldr	r4, [sp, #16]
 800c2ba:	4632      	mov	r2, r6
 800c2bc:	463b      	mov	r3, r7
 800c2be:	4620      	mov	r0, r4
 800c2c0:	460d      	mov	r5, r1
 800c2c2:	f7f3 ffe9 	bl	8000298 <__aeabi_dsub>
 800c2c6:	4642      	mov	r2, r8
 800c2c8:	464b      	mov	r3, r9
 800c2ca:	f7f3 ffe5 	bl	8000298 <__aeabi_dsub>
 800c2ce:	ec53 2b18 	vmov	r2, r3, d8
 800c2d2:	f7f3 ffe1 	bl	8000298 <__aeabi_dsub>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	4650      	mov	r0, sl
 800c2dc:	4659      	mov	r1, fp
 800c2de:	e606      	b.n	800beee <__ieee754_pow+0x2ee>
 800c2e0:	2401      	movs	r4, #1
 800c2e2:	e6a0      	b.n	800c026 <__ieee754_pow+0x426>
 800c2e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800c338 <__ieee754_pow+0x738>
 800c2e8:	e60d      	b.n	800bf06 <__ieee754_pow+0x306>
 800c2ea:	bf00      	nop
 800c2ec:	f3af 8000 	nop.w
 800c2f0:	4a454eef 	.word	0x4a454eef
 800c2f4:	3fca7e28 	.word	0x3fca7e28
 800c2f8:	93c9db65 	.word	0x93c9db65
 800c2fc:	3fcd864a 	.word	0x3fcd864a
 800c300:	a91d4101 	.word	0xa91d4101
 800c304:	3fd17460 	.word	0x3fd17460
 800c308:	518f264d 	.word	0x518f264d
 800c30c:	3fd55555 	.word	0x3fd55555
 800c310:	db6fabff 	.word	0xdb6fabff
 800c314:	3fdb6db6 	.word	0x3fdb6db6
 800c318:	33333303 	.word	0x33333303
 800c31c:	3fe33333 	.word	0x3fe33333
 800c320:	e0000000 	.word	0xe0000000
 800c324:	3feec709 	.word	0x3feec709
 800c328:	dc3a03fd 	.word	0xdc3a03fd
 800c32c:	3feec709 	.word	0x3feec709
 800c330:	145b01f5 	.word	0x145b01f5
 800c334:	be3e2fe0 	.word	0xbe3e2fe0
 800c338:	00000000 	.word	0x00000000
 800c33c:	3ff00000 	.word	0x3ff00000
 800c340:	7ff00000 	.word	0x7ff00000
 800c344:	43400000 	.word	0x43400000
 800c348:	0003988e 	.word	0x0003988e
 800c34c:	000bb679 	.word	0x000bb679
 800c350:	0800d120 	.word	0x0800d120
 800c354:	3ff00000 	.word	0x3ff00000
 800c358:	40080000 	.word	0x40080000
 800c35c:	0800d140 	.word	0x0800d140
 800c360:	0800d130 	.word	0x0800d130
 800c364:	a3b5      	add	r3, pc, #724	; (adr r3, 800c63c <__ieee754_pow+0xa3c>)
 800c366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36a:	4640      	mov	r0, r8
 800c36c:	4649      	mov	r1, r9
 800c36e:	f7f3 ff95 	bl	800029c <__adddf3>
 800c372:	4622      	mov	r2, r4
 800c374:	ec41 0b1a 	vmov	d10, r0, r1
 800c378:	462b      	mov	r3, r5
 800c37a:	4630      	mov	r0, r6
 800c37c:	4639      	mov	r1, r7
 800c37e:	f7f3 ff8b 	bl	8000298 <__aeabi_dsub>
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	ec51 0b1a 	vmov	r0, r1, d10
 800c38a:	f7f4 fbcd 	bl	8000b28 <__aeabi_dcmpgt>
 800c38e:	2800      	cmp	r0, #0
 800c390:	f47f adf8 	bne.w	800bf84 <__ieee754_pow+0x384>
 800c394:	4aa4      	ldr	r2, [pc, #656]	; (800c628 <__ieee754_pow+0xa28>)
 800c396:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c39a:	4293      	cmp	r3, r2
 800c39c:	f340 810b 	ble.w	800c5b6 <__ieee754_pow+0x9b6>
 800c3a0:	151b      	asrs	r3, r3, #20
 800c3a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c3a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c3aa:	fa4a f303 	asr.w	r3, sl, r3
 800c3ae:	445b      	add	r3, fp
 800c3b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c3b4:	4e9d      	ldr	r6, [pc, #628]	; (800c62c <__ieee754_pow+0xa2c>)
 800c3b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c3ba:	4116      	asrs	r6, r2
 800c3bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	ea23 0106 	bic.w	r1, r3, r6
 800c3c6:	f1c2 0214 	rsb	r2, r2, #20
 800c3ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c3ce:	fa4a fa02 	asr.w	sl, sl, r2
 800c3d2:	f1bb 0f00 	cmp.w	fp, #0
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4620      	mov	r0, r4
 800c3dc:	4629      	mov	r1, r5
 800c3de:	bfb8      	it	lt
 800c3e0:	f1ca 0a00 	rsblt	sl, sl, #0
 800c3e4:	f7f3 ff58 	bl	8000298 <__aeabi_dsub>
 800c3e8:	ec41 0b19 	vmov	d9, r0, r1
 800c3ec:	4642      	mov	r2, r8
 800c3ee:	464b      	mov	r3, r9
 800c3f0:	ec51 0b19 	vmov	r0, r1, d9
 800c3f4:	f7f3 ff52 	bl	800029c <__adddf3>
 800c3f8:	2400      	movs	r4, #0
 800c3fa:	a379      	add	r3, pc, #484	; (adr r3, 800c5e0 <__ieee754_pow+0x9e0>)
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	4620      	mov	r0, r4
 800c402:	460d      	mov	r5, r1
 800c404:	f7f4 f900 	bl	8000608 <__aeabi_dmul>
 800c408:	ec53 2b19 	vmov	r2, r3, d9
 800c40c:	4606      	mov	r6, r0
 800c40e:	460f      	mov	r7, r1
 800c410:	4620      	mov	r0, r4
 800c412:	4629      	mov	r1, r5
 800c414:	f7f3 ff40 	bl	8000298 <__aeabi_dsub>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	4640      	mov	r0, r8
 800c41e:	4649      	mov	r1, r9
 800c420:	f7f3 ff3a 	bl	8000298 <__aeabi_dsub>
 800c424:	a370      	add	r3, pc, #448	; (adr r3, 800c5e8 <__ieee754_pow+0x9e8>)
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	f7f4 f8ed 	bl	8000608 <__aeabi_dmul>
 800c42e:	a370      	add	r3, pc, #448	; (adr r3, 800c5f0 <__ieee754_pow+0x9f0>)
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	4680      	mov	r8, r0
 800c436:	4689      	mov	r9, r1
 800c438:	4620      	mov	r0, r4
 800c43a:	4629      	mov	r1, r5
 800c43c:	f7f4 f8e4 	bl	8000608 <__aeabi_dmul>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	4640      	mov	r0, r8
 800c446:	4649      	mov	r1, r9
 800c448:	f7f3 ff28 	bl	800029c <__adddf3>
 800c44c:	4604      	mov	r4, r0
 800c44e:	460d      	mov	r5, r1
 800c450:	4602      	mov	r2, r0
 800c452:	460b      	mov	r3, r1
 800c454:	4630      	mov	r0, r6
 800c456:	4639      	mov	r1, r7
 800c458:	f7f3 ff20 	bl	800029c <__adddf3>
 800c45c:	4632      	mov	r2, r6
 800c45e:	463b      	mov	r3, r7
 800c460:	4680      	mov	r8, r0
 800c462:	4689      	mov	r9, r1
 800c464:	f7f3 ff18 	bl	8000298 <__aeabi_dsub>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4620      	mov	r0, r4
 800c46e:	4629      	mov	r1, r5
 800c470:	f7f3 ff12 	bl	8000298 <__aeabi_dsub>
 800c474:	4642      	mov	r2, r8
 800c476:	4606      	mov	r6, r0
 800c478:	460f      	mov	r7, r1
 800c47a:	464b      	mov	r3, r9
 800c47c:	4640      	mov	r0, r8
 800c47e:	4649      	mov	r1, r9
 800c480:	f7f4 f8c2 	bl	8000608 <__aeabi_dmul>
 800c484:	a35c      	add	r3, pc, #368	; (adr r3, 800c5f8 <__ieee754_pow+0x9f8>)
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	4604      	mov	r4, r0
 800c48c:	460d      	mov	r5, r1
 800c48e:	f7f4 f8bb 	bl	8000608 <__aeabi_dmul>
 800c492:	a35b      	add	r3, pc, #364	; (adr r3, 800c600 <__ieee754_pow+0xa00>)
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f7f3 fefe 	bl	8000298 <__aeabi_dsub>
 800c49c:	4622      	mov	r2, r4
 800c49e:	462b      	mov	r3, r5
 800c4a0:	f7f4 f8b2 	bl	8000608 <__aeabi_dmul>
 800c4a4:	a358      	add	r3, pc, #352	; (adr r3, 800c608 <__ieee754_pow+0xa08>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	f7f3 fef7 	bl	800029c <__adddf3>
 800c4ae:	4622      	mov	r2, r4
 800c4b0:	462b      	mov	r3, r5
 800c4b2:	f7f4 f8a9 	bl	8000608 <__aeabi_dmul>
 800c4b6:	a356      	add	r3, pc, #344	; (adr r3, 800c610 <__ieee754_pow+0xa10>)
 800c4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4bc:	f7f3 feec 	bl	8000298 <__aeabi_dsub>
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	462b      	mov	r3, r5
 800c4c4:	f7f4 f8a0 	bl	8000608 <__aeabi_dmul>
 800c4c8:	a353      	add	r3, pc, #332	; (adr r3, 800c618 <__ieee754_pow+0xa18>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f3 fee5 	bl	800029c <__adddf3>
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	462b      	mov	r3, r5
 800c4d6:	f7f4 f897 	bl	8000608 <__aeabi_dmul>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4640      	mov	r0, r8
 800c4e0:	4649      	mov	r1, r9
 800c4e2:	f7f3 fed9 	bl	8000298 <__aeabi_dsub>
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	460d      	mov	r5, r1
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	4649      	mov	r1, r9
 800c4f2:	f7f4 f889 	bl	8000608 <__aeabi_dmul>
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	ec41 0b19 	vmov	d9, r0, r1
 800c4fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c500:	4620      	mov	r0, r4
 800c502:	4629      	mov	r1, r5
 800c504:	f7f3 fec8 	bl	8000298 <__aeabi_dsub>
 800c508:	4602      	mov	r2, r0
 800c50a:	460b      	mov	r3, r1
 800c50c:	ec51 0b19 	vmov	r0, r1, d9
 800c510:	f7f4 f9a4 	bl	800085c <__aeabi_ddiv>
 800c514:	4632      	mov	r2, r6
 800c516:	4604      	mov	r4, r0
 800c518:	460d      	mov	r5, r1
 800c51a:	463b      	mov	r3, r7
 800c51c:	4640      	mov	r0, r8
 800c51e:	4649      	mov	r1, r9
 800c520:	f7f4 f872 	bl	8000608 <__aeabi_dmul>
 800c524:	4632      	mov	r2, r6
 800c526:	463b      	mov	r3, r7
 800c528:	f7f3 feb8 	bl	800029c <__adddf3>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	4620      	mov	r0, r4
 800c532:	4629      	mov	r1, r5
 800c534:	f7f3 feb0 	bl	8000298 <__aeabi_dsub>
 800c538:	4642      	mov	r2, r8
 800c53a:	464b      	mov	r3, r9
 800c53c:	f7f3 feac 	bl	8000298 <__aeabi_dsub>
 800c540:	460b      	mov	r3, r1
 800c542:	4602      	mov	r2, r0
 800c544:	493a      	ldr	r1, [pc, #232]	; (800c630 <__ieee754_pow+0xa30>)
 800c546:	2000      	movs	r0, #0
 800c548:	f7f3 fea6 	bl	8000298 <__aeabi_dsub>
 800c54c:	e9cd 0100 	strd	r0, r1, [sp]
 800c550:	9b01      	ldr	r3, [sp, #4]
 800c552:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c55a:	da2f      	bge.n	800c5bc <__ieee754_pow+0x9bc>
 800c55c:	4650      	mov	r0, sl
 800c55e:	ed9d 0b00 	vldr	d0, [sp]
 800c562:	f000 f9cd 	bl	800c900 <scalbn>
 800c566:	ec51 0b10 	vmov	r0, r1, d0
 800c56a:	ec53 2b18 	vmov	r2, r3, d8
 800c56e:	f7ff bbe0 	b.w	800bd32 <__ieee754_pow+0x132>
 800c572:	4b30      	ldr	r3, [pc, #192]	; (800c634 <__ieee754_pow+0xa34>)
 800c574:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c578:	429e      	cmp	r6, r3
 800c57a:	f77f af0b 	ble.w	800c394 <__ieee754_pow+0x794>
 800c57e:	4b2e      	ldr	r3, [pc, #184]	; (800c638 <__ieee754_pow+0xa38>)
 800c580:	440b      	add	r3, r1
 800c582:	4303      	orrs	r3, r0
 800c584:	d00b      	beq.n	800c59e <__ieee754_pow+0x99e>
 800c586:	a326      	add	r3, pc, #152	; (adr r3, 800c620 <__ieee754_pow+0xa20>)
 800c588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58c:	ec51 0b18 	vmov	r0, r1, d8
 800c590:	f7f4 f83a 	bl	8000608 <__aeabi_dmul>
 800c594:	a322      	add	r3, pc, #136	; (adr r3, 800c620 <__ieee754_pow+0xa20>)
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	f7ff bbca 	b.w	800bd32 <__ieee754_pow+0x132>
 800c59e:	4622      	mov	r2, r4
 800c5a0:	462b      	mov	r3, r5
 800c5a2:	f7f3 fe79 	bl	8000298 <__aeabi_dsub>
 800c5a6:	4642      	mov	r2, r8
 800c5a8:	464b      	mov	r3, r9
 800c5aa:	f7f4 fab3 	bl	8000b14 <__aeabi_dcmpge>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	f43f aef0 	beq.w	800c394 <__ieee754_pow+0x794>
 800c5b4:	e7e7      	b.n	800c586 <__ieee754_pow+0x986>
 800c5b6:	f04f 0a00 	mov.w	sl, #0
 800c5ba:	e717      	b.n	800c3ec <__ieee754_pow+0x7ec>
 800c5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	e7d2      	b.n	800c56a <__ieee754_pow+0x96a>
 800c5c4:	491a      	ldr	r1, [pc, #104]	; (800c630 <__ieee754_pow+0xa30>)
 800c5c6:	2000      	movs	r0, #0
 800c5c8:	f7ff bb9e 	b.w	800bd08 <__ieee754_pow+0x108>
 800c5cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5d0:	f7ff bb9a 	b.w	800bd08 <__ieee754_pow+0x108>
 800c5d4:	9000      	str	r0, [sp, #0]
 800c5d6:	f7ff bb76 	b.w	800bcc6 <__ieee754_pow+0xc6>
 800c5da:	2100      	movs	r1, #0
 800c5dc:	f7ff bb60 	b.w	800bca0 <__ieee754_pow+0xa0>
 800c5e0:	00000000 	.word	0x00000000
 800c5e4:	3fe62e43 	.word	0x3fe62e43
 800c5e8:	fefa39ef 	.word	0xfefa39ef
 800c5ec:	3fe62e42 	.word	0x3fe62e42
 800c5f0:	0ca86c39 	.word	0x0ca86c39
 800c5f4:	be205c61 	.word	0xbe205c61
 800c5f8:	72bea4d0 	.word	0x72bea4d0
 800c5fc:	3e663769 	.word	0x3e663769
 800c600:	c5d26bf1 	.word	0xc5d26bf1
 800c604:	3ebbbd41 	.word	0x3ebbbd41
 800c608:	af25de2c 	.word	0xaf25de2c
 800c60c:	3f11566a 	.word	0x3f11566a
 800c610:	16bebd93 	.word	0x16bebd93
 800c614:	3f66c16c 	.word	0x3f66c16c
 800c618:	5555553e 	.word	0x5555553e
 800c61c:	3fc55555 	.word	0x3fc55555
 800c620:	c2f8f359 	.word	0xc2f8f359
 800c624:	01a56e1f 	.word	0x01a56e1f
 800c628:	3fe00000 	.word	0x3fe00000
 800c62c:	000fffff 	.word	0x000fffff
 800c630:	3ff00000 	.word	0x3ff00000
 800c634:	4090cbff 	.word	0x4090cbff
 800c638:	3f6f3400 	.word	0x3f6f3400
 800c63c:	652b82fe 	.word	0x652b82fe
 800c640:	3c971547 	.word	0x3c971547

0800c644 <__ieee754_sqrt>:
 800c644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c648:	ec55 4b10 	vmov	r4, r5, d0
 800c64c:	4e56      	ldr	r6, [pc, #344]	; (800c7a8 <__ieee754_sqrt+0x164>)
 800c64e:	43ae      	bics	r6, r5
 800c650:	ee10 0a10 	vmov	r0, s0
 800c654:	ee10 3a10 	vmov	r3, s0
 800c658:	4629      	mov	r1, r5
 800c65a:	462a      	mov	r2, r5
 800c65c:	d110      	bne.n	800c680 <__ieee754_sqrt+0x3c>
 800c65e:	ee10 2a10 	vmov	r2, s0
 800c662:	462b      	mov	r3, r5
 800c664:	f7f3 ffd0 	bl	8000608 <__aeabi_dmul>
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f3 fe14 	bl	800029c <__adddf3>
 800c674:	4604      	mov	r4, r0
 800c676:	460d      	mov	r5, r1
 800c678:	ec45 4b10 	vmov	d0, r4, r5
 800c67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c680:	2d00      	cmp	r5, #0
 800c682:	dc10      	bgt.n	800c6a6 <__ieee754_sqrt+0x62>
 800c684:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c688:	4330      	orrs	r0, r6
 800c68a:	d0f5      	beq.n	800c678 <__ieee754_sqrt+0x34>
 800c68c:	b15d      	cbz	r5, 800c6a6 <__ieee754_sqrt+0x62>
 800c68e:	ee10 2a10 	vmov	r2, s0
 800c692:	462b      	mov	r3, r5
 800c694:	ee10 0a10 	vmov	r0, s0
 800c698:	f7f3 fdfe 	bl	8000298 <__aeabi_dsub>
 800c69c:	4602      	mov	r2, r0
 800c69e:	460b      	mov	r3, r1
 800c6a0:	f7f4 f8dc 	bl	800085c <__aeabi_ddiv>
 800c6a4:	e7e6      	b.n	800c674 <__ieee754_sqrt+0x30>
 800c6a6:	1509      	asrs	r1, r1, #20
 800c6a8:	d076      	beq.n	800c798 <__ieee754_sqrt+0x154>
 800c6aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c6ae:	07ce      	lsls	r6, r1, #31
 800c6b0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800c6b4:	bf5e      	ittt	pl
 800c6b6:	0fda      	lsrpl	r2, r3, #31
 800c6b8:	005b      	lslpl	r3, r3, #1
 800c6ba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800c6be:	0fda      	lsrs	r2, r3, #31
 800c6c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800c6c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	106d      	asrs	r5, r5, #1
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	f04f 0e16 	mov.w	lr, #22
 800c6d2:	4684      	mov	ip, r0
 800c6d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c6d8:	eb0c 0401 	add.w	r4, ip, r1
 800c6dc:	4294      	cmp	r4, r2
 800c6de:	bfde      	ittt	le
 800c6e0:	1b12      	suble	r2, r2, r4
 800c6e2:	eb04 0c01 	addle.w	ip, r4, r1
 800c6e6:	1840      	addle	r0, r0, r1
 800c6e8:	0052      	lsls	r2, r2, #1
 800c6ea:	f1be 0e01 	subs.w	lr, lr, #1
 800c6ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c6f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c6f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c6fa:	d1ed      	bne.n	800c6d8 <__ieee754_sqrt+0x94>
 800c6fc:	4671      	mov	r1, lr
 800c6fe:	2720      	movs	r7, #32
 800c700:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c704:	4562      	cmp	r2, ip
 800c706:	eb04 060e 	add.w	r6, r4, lr
 800c70a:	dc02      	bgt.n	800c712 <__ieee754_sqrt+0xce>
 800c70c:	d113      	bne.n	800c736 <__ieee754_sqrt+0xf2>
 800c70e:	429e      	cmp	r6, r3
 800c710:	d811      	bhi.n	800c736 <__ieee754_sqrt+0xf2>
 800c712:	2e00      	cmp	r6, #0
 800c714:	eb06 0e04 	add.w	lr, r6, r4
 800c718:	da43      	bge.n	800c7a2 <__ieee754_sqrt+0x15e>
 800c71a:	f1be 0f00 	cmp.w	lr, #0
 800c71e:	db40      	blt.n	800c7a2 <__ieee754_sqrt+0x15e>
 800c720:	f10c 0801 	add.w	r8, ip, #1
 800c724:	eba2 020c 	sub.w	r2, r2, ip
 800c728:	429e      	cmp	r6, r3
 800c72a:	bf88      	it	hi
 800c72c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c730:	1b9b      	subs	r3, r3, r6
 800c732:	4421      	add	r1, r4
 800c734:	46c4      	mov	ip, r8
 800c736:	0052      	lsls	r2, r2, #1
 800c738:	3f01      	subs	r7, #1
 800c73a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800c73e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c742:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c746:	d1dd      	bne.n	800c704 <__ieee754_sqrt+0xc0>
 800c748:	4313      	orrs	r3, r2
 800c74a:	d006      	beq.n	800c75a <__ieee754_sqrt+0x116>
 800c74c:	1c4c      	adds	r4, r1, #1
 800c74e:	bf13      	iteet	ne
 800c750:	3101      	addne	r1, #1
 800c752:	3001      	addeq	r0, #1
 800c754:	4639      	moveq	r1, r7
 800c756:	f021 0101 	bicne.w	r1, r1, #1
 800c75a:	1043      	asrs	r3, r0, #1
 800c75c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c760:	0849      	lsrs	r1, r1, #1
 800c762:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c766:	07c2      	lsls	r2, r0, #31
 800c768:	bf48      	it	mi
 800c76a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800c76e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800c772:	460c      	mov	r4, r1
 800c774:	463d      	mov	r5, r7
 800c776:	e77f      	b.n	800c678 <__ieee754_sqrt+0x34>
 800c778:	0ada      	lsrs	r2, r3, #11
 800c77a:	3815      	subs	r0, #21
 800c77c:	055b      	lsls	r3, r3, #21
 800c77e:	2a00      	cmp	r2, #0
 800c780:	d0fa      	beq.n	800c778 <__ieee754_sqrt+0x134>
 800c782:	02d7      	lsls	r7, r2, #11
 800c784:	d50a      	bpl.n	800c79c <__ieee754_sqrt+0x158>
 800c786:	f1c1 0420 	rsb	r4, r1, #32
 800c78a:	fa23 f404 	lsr.w	r4, r3, r4
 800c78e:	1e4d      	subs	r5, r1, #1
 800c790:	408b      	lsls	r3, r1
 800c792:	4322      	orrs	r2, r4
 800c794:	1b41      	subs	r1, r0, r5
 800c796:	e788      	b.n	800c6aa <__ieee754_sqrt+0x66>
 800c798:	4608      	mov	r0, r1
 800c79a:	e7f0      	b.n	800c77e <__ieee754_sqrt+0x13a>
 800c79c:	0052      	lsls	r2, r2, #1
 800c79e:	3101      	adds	r1, #1
 800c7a0:	e7ef      	b.n	800c782 <__ieee754_sqrt+0x13e>
 800c7a2:	46e0      	mov	r8, ip
 800c7a4:	e7be      	b.n	800c724 <__ieee754_sqrt+0xe0>
 800c7a6:	bf00      	nop
 800c7a8:	7ff00000 	.word	0x7ff00000

0800c7ac <fabs>:
 800c7ac:	ec51 0b10 	vmov	r0, r1, d0
 800c7b0:	ee10 2a10 	vmov	r2, s0
 800c7b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7b8:	ec43 2b10 	vmov	d0, r2, r3
 800c7bc:	4770      	bx	lr

0800c7be <finite>:
 800c7be:	b082      	sub	sp, #8
 800c7c0:	ed8d 0b00 	vstr	d0, [sp]
 800c7c4:	9801      	ldr	r0, [sp, #4]
 800c7c6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c7ca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c7ce:	0fc0      	lsrs	r0, r0, #31
 800c7d0:	b002      	add	sp, #8
 800c7d2:	4770      	bx	lr
 800c7d4:	0000      	movs	r0, r0
	...

0800c7d8 <nan>:
 800c7d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c7e0 <nan+0x8>
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	00000000 	.word	0x00000000
 800c7e4:	7ff80000 	.word	0x7ff80000

0800c7e8 <rint>:
 800c7e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7ea:	ec51 0b10 	vmov	r0, r1, d0
 800c7ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c7f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c7f6:	2e13      	cmp	r6, #19
 800c7f8:	ee10 4a10 	vmov	r4, s0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c802:	dc58      	bgt.n	800c8b6 <rint+0xce>
 800c804:	2e00      	cmp	r6, #0
 800c806:	da2b      	bge.n	800c860 <rint+0x78>
 800c808:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c80c:	4302      	orrs	r2, r0
 800c80e:	d023      	beq.n	800c858 <rint+0x70>
 800c810:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c814:	4302      	orrs	r2, r0
 800c816:	4254      	negs	r4, r2
 800c818:	4314      	orrs	r4, r2
 800c81a:	0c4b      	lsrs	r3, r1, #17
 800c81c:	0b24      	lsrs	r4, r4, #12
 800c81e:	045b      	lsls	r3, r3, #17
 800c820:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c824:	ea44 0103 	orr.w	r1, r4, r3
 800c828:	4b32      	ldr	r3, [pc, #200]	; (800c8f4 <rint+0x10c>)
 800c82a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c82e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c832:	4602      	mov	r2, r0
 800c834:	460b      	mov	r3, r1
 800c836:	4630      	mov	r0, r6
 800c838:	4639      	mov	r1, r7
 800c83a:	f7f3 fd2f 	bl	800029c <__adddf3>
 800c83e:	e9cd 0100 	strd	r0, r1, [sp]
 800c842:	463b      	mov	r3, r7
 800c844:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c848:	4632      	mov	r2, r6
 800c84a:	f7f3 fd25 	bl	8000298 <__aeabi_dsub>
 800c84e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c852:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c856:	4639      	mov	r1, r7
 800c858:	ec41 0b10 	vmov	d0, r0, r1
 800c85c:	b003      	add	sp, #12
 800c85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c860:	4a25      	ldr	r2, [pc, #148]	; (800c8f8 <rint+0x110>)
 800c862:	4132      	asrs	r2, r6
 800c864:	ea01 0702 	and.w	r7, r1, r2
 800c868:	4307      	orrs	r7, r0
 800c86a:	d0f5      	beq.n	800c858 <rint+0x70>
 800c86c:	0851      	lsrs	r1, r2, #1
 800c86e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c872:	4314      	orrs	r4, r2
 800c874:	d00c      	beq.n	800c890 <rint+0xa8>
 800c876:	ea23 0201 	bic.w	r2, r3, r1
 800c87a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c87e:	2e13      	cmp	r6, #19
 800c880:	fa43 f606 	asr.w	r6, r3, r6
 800c884:	bf0c      	ite	eq
 800c886:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c88a:	2400      	movne	r4, #0
 800c88c:	ea42 0306 	orr.w	r3, r2, r6
 800c890:	4918      	ldr	r1, [pc, #96]	; (800c8f4 <rint+0x10c>)
 800c892:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c896:	4622      	mov	r2, r4
 800c898:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c89c:	4620      	mov	r0, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	f7f3 fcfc 	bl	800029c <__adddf3>
 800c8a4:	e9cd 0100 	strd	r0, r1, [sp]
 800c8a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8ac:	4622      	mov	r2, r4
 800c8ae:	462b      	mov	r3, r5
 800c8b0:	f7f3 fcf2 	bl	8000298 <__aeabi_dsub>
 800c8b4:	e7d0      	b.n	800c858 <rint+0x70>
 800c8b6:	2e33      	cmp	r6, #51	; 0x33
 800c8b8:	dd07      	ble.n	800c8ca <rint+0xe2>
 800c8ba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c8be:	d1cb      	bne.n	800c858 <rint+0x70>
 800c8c0:	ee10 2a10 	vmov	r2, s0
 800c8c4:	f7f3 fcea 	bl	800029c <__adddf3>
 800c8c8:	e7c6      	b.n	800c858 <rint+0x70>
 800c8ca:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c8ce:	f04f 36ff 	mov.w	r6, #4294967295
 800c8d2:	40d6      	lsrs	r6, r2
 800c8d4:	4230      	tst	r0, r6
 800c8d6:	d0bf      	beq.n	800c858 <rint+0x70>
 800c8d8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800c8dc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800c8e0:	bf1f      	itttt	ne
 800c8e2:	ea24 0101 	bicne.w	r1, r4, r1
 800c8e6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c8ea:	fa44 f202 	asrne.w	r2, r4, r2
 800c8ee:	ea41 0402 	orrne.w	r4, r1, r2
 800c8f2:	e7cd      	b.n	800c890 <rint+0xa8>
 800c8f4:	0800d150 	.word	0x0800d150
 800c8f8:	000fffff 	.word	0x000fffff
 800c8fc:	00000000 	.word	0x00000000

0800c900 <scalbn>:
 800c900:	b570      	push	{r4, r5, r6, lr}
 800c902:	ec55 4b10 	vmov	r4, r5, d0
 800c906:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c90a:	4606      	mov	r6, r0
 800c90c:	462b      	mov	r3, r5
 800c90e:	b99a      	cbnz	r2, 800c938 <scalbn+0x38>
 800c910:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c914:	4323      	orrs	r3, r4
 800c916:	d036      	beq.n	800c986 <scalbn+0x86>
 800c918:	4b39      	ldr	r3, [pc, #228]	; (800ca00 <scalbn+0x100>)
 800c91a:	4629      	mov	r1, r5
 800c91c:	ee10 0a10 	vmov	r0, s0
 800c920:	2200      	movs	r2, #0
 800c922:	f7f3 fe71 	bl	8000608 <__aeabi_dmul>
 800c926:	4b37      	ldr	r3, [pc, #220]	; (800ca04 <scalbn+0x104>)
 800c928:	429e      	cmp	r6, r3
 800c92a:	4604      	mov	r4, r0
 800c92c:	460d      	mov	r5, r1
 800c92e:	da10      	bge.n	800c952 <scalbn+0x52>
 800c930:	a32b      	add	r3, pc, #172	; (adr r3, 800c9e0 <scalbn+0xe0>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	e03a      	b.n	800c9ae <scalbn+0xae>
 800c938:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c93c:	428a      	cmp	r2, r1
 800c93e:	d10c      	bne.n	800c95a <scalbn+0x5a>
 800c940:	ee10 2a10 	vmov	r2, s0
 800c944:	4620      	mov	r0, r4
 800c946:	4629      	mov	r1, r5
 800c948:	f7f3 fca8 	bl	800029c <__adddf3>
 800c94c:	4604      	mov	r4, r0
 800c94e:	460d      	mov	r5, r1
 800c950:	e019      	b.n	800c986 <scalbn+0x86>
 800c952:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c956:	460b      	mov	r3, r1
 800c958:	3a36      	subs	r2, #54	; 0x36
 800c95a:	4432      	add	r2, r6
 800c95c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c960:	428a      	cmp	r2, r1
 800c962:	dd08      	ble.n	800c976 <scalbn+0x76>
 800c964:	2d00      	cmp	r5, #0
 800c966:	a120      	add	r1, pc, #128	; (adr r1, 800c9e8 <scalbn+0xe8>)
 800c968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c96c:	da1c      	bge.n	800c9a8 <scalbn+0xa8>
 800c96e:	a120      	add	r1, pc, #128	; (adr r1, 800c9f0 <scalbn+0xf0>)
 800c970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c974:	e018      	b.n	800c9a8 <scalbn+0xa8>
 800c976:	2a00      	cmp	r2, #0
 800c978:	dd08      	ble.n	800c98c <scalbn+0x8c>
 800c97a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c97e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c982:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c986:	ec45 4b10 	vmov	d0, r4, r5
 800c98a:	bd70      	pop	{r4, r5, r6, pc}
 800c98c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c990:	da19      	bge.n	800c9c6 <scalbn+0xc6>
 800c992:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c996:	429e      	cmp	r6, r3
 800c998:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c99c:	dd0a      	ble.n	800c9b4 <scalbn+0xb4>
 800c99e:	a112      	add	r1, pc, #72	; (adr r1, 800c9e8 <scalbn+0xe8>)
 800c9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1e2      	bne.n	800c96e <scalbn+0x6e>
 800c9a8:	a30f      	add	r3, pc, #60	; (adr r3, 800c9e8 <scalbn+0xe8>)
 800c9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ae:	f7f3 fe2b 	bl	8000608 <__aeabi_dmul>
 800c9b2:	e7cb      	b.n	800c94c <scalbn+0x4c>
 800c9b4:	a10a      	add	r1, pc, #40	; (adr r1, 800c9e0 <scalbn+0xe0>)
 800c9b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d0b8      	beq.n	800c930 <scalbn+0x30>
 800c9be:	a10e      	add	r1, pc, #56	; (adr r1, 800c9f8 <scalbn+0xf8>)
 800c9c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9c4:	e7b4      	b.n	800c930 <scalbn+0x30>
 800c9c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c9ca:	3236      	adds	r2, #54	; 0x36
 800c9cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c9d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ca08 <scalbn+0x108>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	e7e8      	b.n	800c9ae <scalbn+0xae>
 800c9dc:	f3af 8000 	nop.w
 800c9e0:	c2f8f359 	.word	0xc2f8f359
 800c9e4:	01a56e1f 	.word	0x01a56e1f
 800c9e8:	8800759c 	.word	0x8800759c
 800c9ec:	7e37e43c 	.word	0x7e37e43c
 800c9f0:	8800759c 	.word	0x8800759c
 800c9f4:	fe37e43c 	.word	0xfe37e43c
 800c9f8:	c2f8f359 	.word	0xc2f8f359
 800c9fc:	81a56e1f 	.word	0x81a56e1f
 800ca00:	43500000 	.word	0x43500000
 800ca04:	ffff3cb0 	.word	0xffff3cb0
 800ca08:	3c900000 	.word	0x3c900000

0800ca0c <_init>:
 800ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca0e:	bf00      	nop
 800ca10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca12:	bc08      	pop	{r3}
 800ca14:	469e      	mov	lr, r3
 800ca16:	4770      	bx	lr

0800ca18 <_fini>:
 800ca18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1a:	bf00      	nop
 800ca1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca1e:	bc08      	pop	{r3}
 800ca20:	469e      	mov	lr, r3
 800ca22:	4770      	bx	lr
